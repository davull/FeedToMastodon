[
  {
    "itemId": "https://andrewlock.net/running-an-aspnetcore-app-behind-iis-in-a-windows-container/",
    "raw": "<img src=\"https://andrewlock.net/content/images/2025/iis_logo.png\" /><p>In this post I first discuss the differences between Linux and Windows containers, and then describe how to run an ASP.NET Core app inside IIS, inside of a Windows container. I show how to install the AspNetCoreModule for running ASP.NET Core in IIS, how to use APPCMD and the PowerShell snippets to create app pools and websites, and how to use <em>ServiceMonitor.exe</em> to watch an app pool. Finally, I describe how I resolved a couple of issues I ran into running an ASP.NET Core app in IIS in a container.</p> <h2 id=\"running-apps-in-containers\" class=\"heading-with-anchor\"><a href=\"#running-apps-in-containers\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Running apps in containers</a></h2> <p>I'm a big fan of using containers to build and package applications. You can use containers to somewhat declaratively define your application's dependencies, and how to build it, and then when you run your application you know you will get the same behaviour wherever you run it. As long as the host has docker (or a comparable container runtime) then you can build and run your application.</p> <blockquote> <p>Pretty much, anyway. Once you have built your application it's set in stone, but you're still vulnerable when you <em>build</em> your image to things like <a href=\"https://devblogs.microsoft.com/dotnet/critical-dotnet-install-links-are-changing/\">download links disappearing</a> and dependencies no longer being available. But at least those dependencies are generally <em>explicit</em> in your dockerfile.</p> </blockquote> <p>Of course, when people say \"containers\", they're normally talking about <em>Linux</em> containers. Linux containers really give the best experience for both building and running ASP.NET Core applications, but there also <a href=\"https://learn.microsoft.com/en-us/virtualization/windowscontainers/\"><em>Windows</em> containers</a>.</p> <p>Windows containers are <em>conceptually</em> similar Linux containers; they allow a similar \"mini-VM\" experience, in which the container is isolated from the host but the operating-system kernel is re-used. In <em>practical</em> terms though, they feel very differnt.</p> <ul><li>You can run virtually any Linux container that supports your process architecture (generally x64 or arm64) on any host. Windows, Linux, and macOS can all run Linux containers. However the base image of Windows containers must match the host. So you can only run Windows Server 2022 containers on a Windows Server 2022 machine, not a 2019 machine (for example).</li> <li>Windows images are <em>much</em> bigger than their Linux counterparts. We're talking 10-1000×—instead of a few MB for alpine you're looking at a few <em>GB</em> for a Windows Server Core image.</li> <li>Predominantly due to the sheer size, Windows containers feel a lot slower to work with than Linux containers in general.</li> <li>Some of the authoring experiences in Windows dockerfiles feels cumbersome compared to writing Linux dockerfiles.</li></ul> <p>So, given all that, why would you choose Windows containers? To my mind, the main answer is generally \"because you have to\". Windows containers still have the advantage of defining an isolated environment compared to running on a host directly. And in some cases you <em>need</em> to run on Windows.</p> <p>Maybe you have an app that explicitly relies on Windows-only APIs to run. Perhaps you're deploying an ASP.NET (non-core) app and need to run it in IIS. Or maybe you <em>are</em> running an ASP.NET Core app, but you need to run it on Windows, or even inside IIS.</p> <h2 id=\"running-an-asp-net-core-application-inside-iis-in-windows-containers\" class=\"heading-with-anchor\"><a href=\"#running-an-asp-net-core-application-inside-iis-in-windows-containers\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Running an ASP.NET Core application, inside IIS, in windows containers</a></h2> <p>In this section, I describe a dockerfile that builds an ASP.NET Core application, and then hosts it in a windows dockerfile, running in-process in IIS. The example I use is a simple .NET 9 ASP.NET Core app. The details aren't important, I'm more interested in how to prepare the image itself.</p> <p>The image below is a multi-stage build. In the first stage we create and publish our .NET web app. In the second stage we do all of the following:</p> <ul><li>Use an IIS/ASP.NET base image</li> <li>Switch to using PowerShell for scripting instead of cmd (optional)</li> <li>Download and install the 9.0 ASP.NET Core hosting bundle (for IIS integration)</li> <li>Copiy the build assets</li> <li>Create a new app pool and app site to host the ASP.NET Core app</li></ul> <pre class=\"language-dockerfile\"><code class=\"language-dockerfile\"><span class=\"token comment\"># Build the ASP.NET Core app using the latest SDK</span>\n<span class=\"token instruction\"><span class=\"token keyword\">FROM</span> mcr.microsoft.com/dotnet/sdk:9.0-windowsservercore-ltsc2022 <span class=\"token keyword\">AS</span> builder</span>\n\n<span class=\"token comment\"># Build the test app</span>\n<span class=\"token instruction\"><span class=\"token keyword\">WORKDIR</span> /src</span>\n<span class=\"token instruction\"><span class=\"token keyword\">RUN</span> dotnet new web --name AspNetCoreTest --output .</span>\n<span class=\"token instruction\"><span class=\"token keyword\">RUN</span> dotnet publish <span class=\"token string\">\"AspNetCoreTest.csproj\"</span> -c Release -o /src/publish</span>\n\n<span class=\"token comment\"># There are other runtime images you could use - this image includes IIS and ASP.NET </span>\n<span class=\"token comment\"># If you don't need aspnet or .NET Framework (we don't in this example), you can</span>\n<span class=\"token comment\"># probably use mcr.microsoft.com/windows/servercore/iis:windowsservercore-ltsc2022</span>\n<span class=\"token instruction\"><span class=\"token keyword\">FROM</span> mcr.microsoft.com/dotnet/framework/aspnet:4.8-windowsservercore-ltsc2022 <span class=\"token keyword\">AS</span> publish</span>\n<span class=\"token instruction\"><span class=\"token keyword\">SHELL</span> [<span class=\"token string\">\"powershell\"</span>, <span class=\"token string\">\"-Command\"</span>, <span class=\"token string\">\"$ErrorActionPreference = 'Stop'; $ProgressPreference = 'SilentlyContinue';\"</span>]</span>\n\n<span class=\"token instruction\"><span class=\"token keyword\">WORKDIR</span> /app</span>\n\n<span class=\"token comment\"># Install the hosting bundle</span>\n<span class=\"token instruction\"><span class=\"token keyword\">RUN</span>  <span class=\"token variable\">$url</span>=<span class=\"token string\">'https://builds.dotnet.microsoft.com/dotnet/aspnetcore/Runtime/9.0.0/dotnet-hosting-9.0.0-win.exe'</span>; <span class=\"token operator\">\\</span>\n    echo <span class=\"token string\">\"Fetching \"</span> + <span class=\"token variable\">$url</span>; <span class=\"token operator\">\\</span>\n    Invoke-WebRequest <span class=\"token variable\">$url</span> -OutFile c:/hosting.exe; <span class=\"token operator\">\\</span>\n    Start-Process -Wait -PassThru -FilePath <span class=\"token string\">\"c:/hosting.exe\"</span> -ArgumentList @(<span class=\"token string\">'/install'</span>, <span class=\"token string\">'/q'</span>, <span class=\"token string\">'/norestart'</span>); <span class=\"token operator\">\\</span>\n    rm c:/hosting.exe;</span>\n\n<span class=\"token comment\"># Copy the app across</span>\n<span class=\"token instruction\"><span class=\"token keyword\">COPY</span> <span class=\"token options\"><span class=\"token property\">--from</span><span class=\"token punctuation\">=</span><span class=\"token string\">builder</span></span> /src/publish /app/.</span>\n\n<span class=\"token comment\"># Create new website we control, and a new app pool set to \"No Managed Code\"</span>\n<span class=\"token instruction\"><span class=\"token keyword\">RUN</span> Remove-WebSite -Name <span class=\"token string\">'Default Web Site'</span>; <span class=\"token operator\">\\</span>\n    c:\\Windows\\System32\\inetsrv\\appcmd add apppool /name:AspNetCorePool /managedRuntimeVersion:<span class=\"token string\">\"\"</span>; <span class=\"token operator\">\\</span>\n    New-Website -Name <span class=\"token string\">'SmokeTest'</span> -Port 5000 -PhysicalPath <span class=\"token string\">'c:\\app'</span> -ApplicationPool <span class=\"token string\">'AspNetCorePool'</span>;</span>\n\n<span class=\"token instruction\"><span class=\"token keyword\">ENTRYPOINT</span> [<span class=\"token string\">\"C:\\\\ServiceMonitor.exe\"</span>, <span class=\"token string\">\"w3svc\"</span>, <span class=\"token string\">\"AspNetCorePool\"</span>]</span>\n</code></pre> <p>The first interesting point in the above file is that we need to download and install the ASP.NET Core hosting bundle. This includes the ASP.NET Core runtime, but also the ASP.NET Core Module (ANCM) for IIS. The ANCM module provides integration between IIS and an ASP.NET Core app and is required to run ASP.NET Core apps in IIS.</p> <p>The second interesting point is using the IIS Administration tools to manage websites and app pools. The example above uses two different approaches (mostly for effect, not due to necessity): <a href=\"https://learn.microsoft.com/en-us/iis/get-started/getting-started-with-iis/getting-started-with-appcmdexe\">appcmd.exe</a> and <a href=\"https://learn.microsoft.com/en-us/iis/get-started/whats-new-in-iis-10/iisadministration-powershell-cmdlets\">IISAdministration PowerShell Cmdlets</a>.</p> <blockquote> <p>Note that the PowerShell Cmdlets were introduced in IIS 10.0, which shipped with Windows Server 2016.</p> </blockquote> <p>Finally, you can see that we have defined an entrypoint that invokes <code>ServiceMonitor.exe</code>. This overrides the entrypoint <a href=\"https://github.com/microsoft/dotnet-framework-docker/blob/main/src/aspnet/4.8/windowsservercore-ltsc2022/Dockerfile#L36\">that is defined in the base <code>aspnet</code> image</a>, which similarly invokes <code>ServiceMonitor.exe</code>. <code>ServiceMonitor.exe</code> is a Windows executable designed to be used as the entrypoint process when running IIS inside a Windows Server container. It's available by default in the base images.</p> <p>As described in <a href=\"https://github.com/microsoft/IIS.ServiceMonitor\">the project's README</a>:</p> <blockquote> <p>ServiceMonitor monitors the status of the w3svc service and will exit when the service state changes from <code>SERVICE_RUNNING</code> to either one of <code>SERVICE_STOPPED</code>, <code>SERVICE_STOP_PENDING</code>, <code>SERVICE_PAUSED</code> or <code>SERVICE_PAUSE_PENDING</code>.</p> <p>Additionally, ServiceMonitor will promote environment variables from process environment it's own process environment block to the DefaultAppPool. We achieve this by naively copying all variables in our process environment block except for those Environment variable / value pairs present in this list below.</p> </blockquote> <p>We override the entrypoint in this case to add the <code>AspNetCorePool</code> argument, so that the entrypoint monitors our new app pool, instead of the default pool.</p> <p>We can build and run the app using something like the following:</p> <pre class=\"language-bash\"><code class=\"language-bash\">dotnet build <span class=\"token parameter variable\">-t</span> aspnetcore-iis-image\ndotnet run <span class=\"token parameter variable\">-p</span> <span class=\"token number\">5000</span>:5000 aspnetcore-iis-image\n</code></pre> <p><code>ServiceMonitor.exe</code> watches the status of the <code>AspNetCorePool</code> app pool, and keeps the container running as long as that pool is running. If the pool shuts down, then the container also exits.</p> <h2 id=\"controlling-app-pool-startup-in-the-container\" class=\"heading-with-anchor\"><a href=\"#controlling-app-pool-startup-in-the-container\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Controlling app pool startup in the container</a></h2> <p>I was working on a \"smoke\" test recently that uses a similar setup to that described above. The test app in question starts a background worker that makes a request to itself, and then shuts down the application. The intention in this case is that no <em>external</em> requests are required. However, this proved somewhat problematic to implement when hosting in IIS.</p> <p>I specifically wanted the following behaviour:</p> <ul><li>When the container starts, the app pool is not yet started.</li> <li>The app pool is then started and a worker process is created.</li> <li>The ASP.NET Core application runs, sends a request to itself, and then exits.</li> <li>The container exits.</li></ul> <p>Unfortunately, I struggled to convince IIS (and <em>ServiceMonitor.exe</em>) to do what I wanted.</p> <p>The major problem I ran into is how IIS manages app pools. There are various properties that control how and when an app pool starts. There are also properties to control when a worker process is spun up to handle a request. Among these knobs are:</p> <ul><li><em>Start application pool immediately</em> (AKA <code>/autoStart</code>) <ul><li><code>Enabled</code>/<code>true</code>: IIS will automatically start the application pool.</li> <li><code>Disabled</code>/<code>false</code>: You need to automatically start the application pool.</li></ul> </li> <li><em>Worker process start mode</em> (AKA <code>/startMode</code>) <ul><li><code>AlwaysRunning</code>: If the application pool is running, immediately start up the worker process.</li> <li><code>OnDemand</code>: If the application pool is running, start the <em>w3wp.exe</em> process when there is an inbound application request.</li></ul> </li> <li><em>Preload the app pool</em>: (AKA <code>applicationDefaults.preloadEnabled</code>) <ul><li><code>True</code>: IIS simulates a user request to the default page of an application or virtual directory so that it is initialized. The application pool's <code>startMode</code> setting must be set to <code>AlwaysRunning</code>.</li> <li><code>False</code>: The app pool is initialized when the first request is received.</li></ul> </li></ul> <p>So, <em>in theory</em> I thought I could do the following</p> <ul><li>Create an app pool with <code>/autoStart=\"false\"</code> and <code>/startMode=\"AlwaysRunning\"</code></li> <li>Create a site with <code>applicationDefaults.preloadEnabled=\"true\"</code></li> <li>Run <em>ServiceMonitor.exe</em> to monitor the app pool. This would serve two purposes <ul><li>Promote the ambient environment variables</li> <li>Exit when the app pool shuts down</li></ul> </li></ul> <p>Unfortunately this doesn't work as I had hoped. As far as I could tell, the ASP.NET Core app wasn't starting up and then the app pool wasn't exiting when the app exits. I'm not entirely sure what's going on here, but I subsequently discovered there's also the <code>applicationinitialization.doAppInitAfterRestart</code> element and I realised I just didn't have the patience to fight with IIS any more 😅</p> <p>In the end I opted for creating an entrypoint script that manually makes an http request to the app, explicitly stops the app pool, and then exits. It wasn't as smooth as I'm sure it <em>could</em> be, but at least it <em>worked</em>:</p> <pre class=\"language-dockerfile\"><code class=\"language-dockerfile\"><span class=\"token comment\"># We override the normal service monitor entrypoint, because we want the container to shut down after the request is sent</span>\n<span class=\"token comment\"># - Run ServiceMonitor.exe to copy the env vars to the app pool</span>\n<span class=\"token comment\"># - Explicitly start the app pool</span>\n<span class=\"token comment\"># - Make a request (doesn't have to hit a \"real\" endpoint)</span>\n<span class=\"token comment\"># - Stop the app pool (this should happen automatically, but just to be safe)</span>\n<span class=\"token comment\"># - Exit</span>\n<span class=\"token instruction\"><span class=\"token keyword\">RUN</span> echo <span class=\"token string\">'Write-Host \\\"Running servicemonitor to copy environment variables\\\"; Start-Process -NoNewWindow -PassThru -FilePath \\\"c:/ServiceMonitor.exe\\\" -ArgumentList @(\\\"w3svc\\\", \\\"AspNetCorePool\\\");'</span> &gt; C:\\app\\entrypoint.ps1; <span class=\"token operator\">\\</span>\n    echo <span class=\"token string\">'Write-Host \\\"Starting AspNetCorePool app pool\\\"; Start-WebAppPool -Name \\\"AspNetCorePool\\\" -PassThru;'</span> &gt;&gt; C:\\app\\entrypoint.ps1; <span class=\"token operator\">\\</span>\n    echo <span class=\"token string\">'Write-Host \\\"Making 404 request\\\"; curl http://localhost:5000;'</span> &gt;&gt; C:\\app\\entrypoint.ps1; <span class=\"token operator\">\\</span>\n    echo <span class=\"token string\">'Write-Host \\\"Stopping pool\\\";Stop-WebAppPool \\\"AspNetCorePool\\\" -PassThru;'</span> &gt;&gt; C:\\app\\entrypoint.ps1;  <span class=\"token operator\">\\</span>\n    echo <span class=\"token string\">'Write-Host \\\"Shutting down\\\"'</span> &gt;&gt; C:\\app\\entrypoint.ps1;</span>\n\n<span class=\"token comment\"># Set the script as the entrypoint</span>\n<span class=\"token instruction\"><span class=\"token keyword\">ENTRYPOINT</span> [<span class=\"token string\">\"powershell\"</span>, <span class=\"token string\">\"-File\"</span>, <span class=\"token string\">\"C:\\\\app\\\\entrypoint.ps1\"</span>]</span>\n</code></pre> <p>And with that, I achieved what I wanted—an ASP.NET Core app, running in IIS, in a Windows container, which starts up and exits. There was one final strange hiccup I ran into though, which I'll cover in the final section.</p> <h2 id=\"troubleshooting-appcmd-failed-with-error-code-183\" class=\"heading-with-anchor\"><a href=\"#troubleshooting-appcmd-failed-with-error-code-183\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Troubleshooting \"APPCMD failed with error code 183\"</a></h2> <p>While initially working with <em>ServiceMonitor.exe</em>, I kept running into this error:</p> <pre><code>Service 'w3svc' has been stopped\n\nAPPCMD failed with error code 183\n\nFailed to update IIS configuration\n</code></pre> <p>Error code 183 is \"Cannot create file when that file already exists\". Err…OK.</p> <p>Well, it turns out you get this error if you an environment variable explicitly set in the <code>&lt;environmentVariables&gt;</code> section and then <em>also</em> set in the docker environment. <em>ServiceMonitor.exe</em> naively tries to \"promote\" the ambient environment variables by calling \"add variable\". And if there's <em>already</em> a variable in the app pool, it throws the above exception. The only solution is to not double up—remove the environment variable either from the app pool or from the dockerfile.</p> <h2 id=\"summary\" class=\"heading-with-anchor\"><a href=\"#summary\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Summary</a></h2> <p>In this post I described how I ran an ASP.NET Core app inside IIS, inside of a Windows container. I showed how to install the AspNetCoreModule for running ASP.NET Core in IIS, how to use APPCMD and the PowerShell snippets to create app pools and websites, and how to use <em>ServiceMonitor.exe</em> to watch an app pool. I then described a specific scenario I was trying to reproduce, as well as how to solve an error I ran into.</p> ",
    "sanitized": "In this post I first discuss the differences between Linux and Windows containers, and then describe how to run an ASP.NET Core app inside IIS, inside of a Windows container. I show how to install the AspNetCoreModule for running ASP.NET Core in IIS, how to use APPCMD and the PowerShell snippets to create app pools and websites, and how to use ServiceMonitor.exe to watch an app pool. Finally, I describe how I resolved a couple of issues I ran into running an ASP.NET Core app in IIS in a container. Running apps in containers I'm a big fan of using containers to build and package applications. You can use containers to somewhat declaratively define your application's dependencies, and how to build it, and then when you run your application you know you will get the same behaviour wherever you run it. As long as the host has docker (or a comparable container runtime) then you can build and run your application.  Pretty much, anyway. Once you have built your application it's set in stone, but you're still vulnerable when you build your image to things like download links disappearing and dependencies no longer being available. But at least those dependencies are generally explicit in your dockerfile.  Of course, when people say \"containers\", they're normally talking about Linux containers. Linux containers really give the best experience for both building and running ASP.NET Core applications, but there also Windows containers. Windows containers are conceptually similar Linux containers; they allow a similar \"mini-VM\" experience, in which the container is isolated from the host but the operating-system kernel is re-used. In practical terms though, they feel very differnt. You can run virtually any Linux container that supports your process architecture (generally x64 or arm64) on any host. Windows, Linux, and macOS can all run Linux containers. However the base image of Windows containers must match the host. So you can only run Windows Server 2022 containers on a Windows Server 2022 machine, not a 2019 machine (for example). Windows images are much bigger than their Linux counterparts. We're talking 10-1000×—instead of a few MB for alpine you're looking at a few GB for a Windows Server Core image. Predominantly due to the sheer size, Windows containers feel a lot slower to work with than Linux containers in general. Some of the authoring experiences in Windows dockerfiles feels cumbersome compared to writing Linux dockerfiles. So, given all that, why would you choose Windows containers? To my mind, the main answer is generally \"because you have to\". Windows containers still have the advantage of defining an isolated environment compared to running on a host directly. And in some cases you need to run on Windows. Maybe you have an app that explicitly relies on Windows-only APIs to run. Perhaps you're deploying an ASP.NET (non-core) app and need to run it in IIS. Or maybe you are running an ASP.NET Core app, but you need to run it on Windows, or even inside IIS. Running an ASP.NET Core application, inside IIS, in windows containers In this section, I describe a dockerfile that builds an ASP.NET Core application, and then hosts it in a windows dockerfile, running in-process in IIS. The example I use is a simple .NET 9 ASP.NET Core app. The details aren't important, I'm more interested in how to prepare the image itself. The image below is a multi-stage build. In the first stage we create and publish our .NET web app. In the second stage we do all of the following: Use an IIS/ASP.NET base image Switch to using PowerShell for scripting instead of cmd (optional) Download and install the 9.0 ASP.NET Core hosting bundle (for IIS integration) Copiy the build assets Create a new app pool and app site to host the ASP.NET Core app # Build the ASP.NET Core app using the latest SDK\nFROM mcr.microsoft.com/dotnet/sdk:9.0-windowsservercore-ltsc2022 AS builder\n\n# Build the test app\nWORKDIR /src\nRUN dotnet new web --name AspNetCoreTest --output .\nRUN dotnet publish \"AspNetCoreTest.csproj\" -c Release -o /src/publish\n\n# There are other runtime images you could use - this image includes IIS and ASP.NET \n# If you don't need aspnet or .NET Framework (we don't in this example), you can\n# probably use mcr.microsoft.com/windows/servercore/iis:windowsservercore-ltsc2022\nFROM mcr.microsoft.com/dotnet/framework/aspnet:4.8-windowsservercore-ltsc2022 AS publish\nSHELL [\"powershell\", \"-Command\", \"$ErrorActionPreference = 'Stop'; $ProgressPreference = 'SilentlyContinue';\"]\n\nWORKDIR /app\n\n# Install the hosting bundle\nRUN  $url='https://builds.dotnet.microsoft.com/dotnet/aspnetcore/Runtime/9.0.0/dotnet-hosting-9.0.0-win.exe'; \\\n    echo \"Fetching \" + $url; \\\n    Invoke-WebRequest $url -OutFile c:/hosting.exe; \\\n    Start-Process -Wait -PassThru -FilePath \"c:/hosting.exe\" -ArgumentList @('/install', '/q', '/norestart'); \\\n    rm c:/hosting.exe;\n\n# Copy the app across\nCOPY --from=builder /src/publish /app/.\n\n# Create new website we control, and a new app pool set to \"No Managed Code\"\nRUN Remove-WebSite -Name 'Default Web Site'; \\\n    c:\\Windows\\System32\\inetsrv\\appcmd add apppool /name:AspNetCorePool /managedRuntimeVersion:\"\"; \\\n    New-Website -Name 'SmokeTest' -Port 5000 -PhysicalPath 'c:\\app' -ApplicationPool 'AspNetCorePool';\n\nENTRYPOINT [\"C:\\\\ServiceMonitor.exe\", \"w3svc\", \"AspNetCorePool\"]\n The first interesting point in the above file is that we need to download and install the ASP.NET Core hosting bundle. This includes the ASP.NET Core runtime, but also the ASP.NET Core Module (ANCM) for IIS. The ANCM module provides integration between IIS and an ASP.NET Core app and is required to run ASP.NET Core apps in IIS. The second interesting point is using the IIS Administration tools to manage websites and app pools. The example above uses two different approaches (mostly for effect, not due to necessity): appcmd.exe and IISAdministration PowerShell Cmdlets.  Note that the PowerShell Cmdlets were introduced in IIS 10.0, which shipped with Windows Server 2016.  Finally, you can see that we have defined an entrypoint that invokes ServiceMonitor.exe. This overrides the entrypoint that is defined in the base aspnet image, which similarly invokes ServiceMonitor.exe. ServiceMonitor.exe is a Windows executable designed to be used as the entrypoint process when running IIS inside a Windows Server container. It's available by default in the base images. As described in the project's README:  ServiceMonitor monitors the status of the w3svc service and will exit when the service state changes from SERVICE_RUNNING to either one of SERVICE_STOPPED, SERVICE_STOP_PENDING, SERVICE_PAUSED or SERVICE_PAUSE_PENDING. Additionally, ServiceMonitor will promote environment variables from process environment it's own process environment block to the DefaultAppPool. We achieve this by naively copying all variables in our process environment block except for those Environment variable / value pairs present in this list below.  We override the entrypoint in this case to add the AspNetCorePool argument, so that the entrypoint monitors our new app pool, instead of the default pool. We can build and run the app using something like the following: dotnet build -t aspnetcore-iis-image\ndotnet run -p 5000:5000 aspnetcore-iis-image\n ServiceMonitor.exe watches the status of the AspNetCorePool app pool, and keeps the container running as long as that pool is running. If the pool shuts down, then the container also exits. Controlling app pool startup in the container I was working on a \"smoke\" test recently that uses a similar setup to that described above. The test app in question starts a background worker that makes a request to itself, and then shuts down the application. The intention in this case is that no external requests are required. However, this proved somewhat problematic to implement when hosting in IIS. I specifically wanted the following behaviour: When the container starts, the app pool is not yet started. The app pool is then started and a worker process is created. The ASP.NET Core application runs, sends a request to itself, and then exits. The container exits. Unfortunately, I struggled to convince IIS (and ServiceMonitor.exe) to do what I wanted. The major problem I ran into is how IIS manages app pools. There are various properties that control how and when an app pool starts. There are also properties to control when a worker process is spun up to handle a request. Among these knobs are: Start application pool immediately (AKA /autoStart) Enabled/true: IIS will automatically start the application pool. Disabled/false: You need to automatically start the application pool.  Worker process start mode (AKA /startMode) AlwaysRunning: If the application pool is running, immediately start up the worker process. OnDemand: If the application pool is running, start the w3wp.exe process when there is an inbound application request.  Preload the app pool: (AKA applicationDefaults.preloadEnabled) True: IIS simulates a user request to the default page of an application or virtual directory so that it is initialized. The application pool's startMode setting must be set to AlwaysRunning. False: The app pool is initialized when the first request is received.  So, in theory I thought I could do the following Create an app pool with /autoStart=\"false\" and /startMode=\"AlwaysRunning\" Create a site with applicationDefaults.preloadEnabled=\"true\" Run ServiceMonitor.exe to monitor the app pool. This would serve two purposes Promote the ambient environment variables Exit when the app pool shuts down  Unfortunately this doesn't work as I had hoped. As far as I could tell, the ASP.NET Core app wasn't starting up and then the app pool wasn't exiting when the app exits. I'm not entirely sure what's going on here, but I subsequently discovered there's also the applicationinitialization.doAppInitAfterRestart element and I realised I just didn't have the patience to fight with IIS any more 😅 In the end I opted for creating an entrypoint script that manually makes an http request to the app, explicitly stops the app pool, and then exits. It wasn't as smooth as I'm sure it could be, but at least it worked: # We override the normal service monitor entrypoint, because we want the container to shut down after the request is sent\n# - Run ServiceMonitor.exe to copy the env vars to the app pool\n# - Explicitly start the app pool\n# - Make a request (doesn't have to hit a \"real\" endpoint)\n# - Stop the app pool (this should happen automatically, but just to be safe)\n# - Exit\nRUN echo 'Write-Host \\\"Running servicemonitor to copy environment variables\\\"; Start-Process -NoNewWindow -PassThru -FilePath \\\"c:/ServiceMonitor.exe\\\" -ArgumentList @(\\\"w3svc\\\", \\\"AspNetCorePool\\\");' > C:\\app\\entrypoint.ps1; \\\n    echo 'Write-Host \\\"Starting AspNetCorePool app pool\\\"; Start-WebAppPool -Name \\\"AspNetCorePool\\\" -PassThru;' >> C:\\app\\entrypoint.ps1; \\\n    echo 'Write-Host \\\"Making 404 request\\\"; curl http://localhost:5000;' >> C:\\app\\entrypoint.ps1; \\\n    echo 'Write-Host \\\"Stopping pool\\\";Stop-WebAppPool \\\"AspNetCorePool\\\" -PassThru;' >> C:\\app\\entrypoint.ps1;  \\\n    echo 'Write-Host \\\"Shutting down\\\"' >> C:\\app\\entrypoint.ps1;\n\n# Set the script as the entrypoint\nENTRYPOINT [\"powershell\", \"-File\", \"C:\\\\app\\\\entrypoint.ps1\"]\n And with that, I achieved what I wanted—an ASP.NET Core app, running in IIS, in a Windows container, which starts up and exits. There was one final strange hiccup I ran into though, which I'll cover in the final section. Troubleshooting \"APPCMD failed with error code 183\" While initially working with ServiceMonitor.exe, I kept running into this error: Service 'w3svc' has been stopped\n\nAPPCMD failed with error code 183\n\nFailed to update IIS configuration\n Error code 183 is \"Cannot create file when that file already exists\". Err…OK. Well, it turns out you get this error if you an environment variable explicitly set in the <environmentVariables> section and then also set in the docker environment. ServiceMonitor.exe naively tries to \"promote\" the ambient environment variables by calling \"add variable\". And if there's already a variable in the app pool, it throws the above exception. The only solution is to not double up—remove the environment variable either from the app pool or from the dockerfile. Summary In this post I described how I ran an ASP.NET Core app inside IIS, inside of a Windows container. I showed how to install the AspNetCoreModule for running ASP.NET Core in IIS, how to use APPCMD and the PowerShell snippets to create app pools and websites, and how to use ServiceMonitor.exe to watch an app pool. I then described a specific scenario I was trying to reproduce, as well as how to solve an error I ran into."
  },
  {
    "itemId": "https://andrewlock.net/creating-an-analyzer-to-detect-infinite-loops-caused-by-threadabortexception/",
    "raw": "<img src=\"https://andrewlock.net/content/images/2025/thread_abort_analyzer_banner.png\" /><p>In this post I describe an infinite-loop scenario that can occur on .NET Framework when a <code>ThreadAbortException</code> is raised. I describe when you might run into this scenario, why it happens (it's a bug in the runtime), and how you can avoid it. Finally I show a Roslyn Analyzer that you can use to automatically flag problematic code.</p> <h2 id=\"throwing-a-threadabortexception-with-thread-abort-\" class=\"heading-with-anchor\"><a href=\"#throwing-a-threadabortexception-with-thread-abort-\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Throwing a <code>ThreadAbortException</code> with <code>Thread.Abort()</code></a></h2> <p>When you're doing parallel/concurrent programming in .NET, and you want to do two things at once, you typically use the <a href=\"https://learn.microsoft.com/en-us/dotnet/standard/parallel-programming/task-parallel-library-tpl\">Task Parallel Library</a>, <code>Task</code>, <code>Task&lt;T&gt;</code>, <code>async</code>/<code>await</code>, and all that modern goodness. However, you <em>can</em> also <a href=\"https://learn.microsoft.com/en-us/dotnet/standard/threading/using-threads-and-threading\">manage threads yourself \"manually\"</a>, by calling <code>Thread.Start()</code> etc.</p> <blockquote> <p>These days, in practice, you should almost never be working directly with threads. Use <code>Task</code> <em>et al</em> wherever possible so that you're using the <a href=\"https://learn.microsoft.com/en-us/dotnet/api/system.threading.threadpool\">ThreadPool</a> to schedule jobs and <code>async</code>/<code>await</code> to handle continuations.</p> </blockquote> <p>If you have a running thread, and you want to stop it running, you would typically try to use <em>cooperative cancellation</em>, using <code>CancellationToken</code>s or something similar. However, in some cases that's not possible; maybe the thread is running third party code out of your control, for example. In .NET Framework you have a \"kill it with fire\" option: <code>Thread.Abort()</code>.</p> <blockquote> <p>Note that <code>Thread.Abort()</code> <em>only</em> applies to .NET Framework. The <code>Abort()</code> method is not supported on .NET Core and throws a <code>PlatformNotSupportedException</code> to the caller instead.</p> </blockquote> <p>Calling <code>Abort()</code> on a thread causes the runtime to throw a <code>ThreadAbortException</code> in the thread's code. <code>ThreadAbortException</code> is special, in that you <em>can</em> catch it in application code (unlike some other exceptions <a href=\"https://learn.microsoft.com/en-us/dotnet/api/system.stackoverflowexception\">such as <code>StackOverflowException</code></a> which can't be caught), but the runtime automatically re-throws the <code>ThreadAbortException</code> at the end of the catch block.</p> <blockquote> <p>It is possible to \"cancel\" the exception by <a href=\"https://learn.microsoft.com/en-us/dotnet/api/system.threading.thread.resetabort?view=netframework-4.8.1\">calling <code>ResetAbort()</code></a> but I'm not going to go into that in this post.</p> </blockquote> <p>Just to give a concrete example, the following is a small .NET Framework program that starts a <code>Thread</code>, which starts doing some work, and then calls <code>Abort()</code>.</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token comment\">// Start a new thread, which runs the DoWork method</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> myThread <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">ThreadStart</span><span class=\"token punctuation\">(</span>DoWork<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmyThread<span class=\"token punctuation\">.</span><span class=\"token function\">Start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nThread<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">300</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nConsole<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Main - aborting thread\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nmyThread<span class=\"token punctuation\">.</span><span class=\"token function\">Abort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Trigger a ThreadAbortException</span>\nmyThread<span class=\"token punctuation\">.</span><span class=\"token function\">Join</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Wait for the thread to exit</span>\n\nConsole<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Main ending\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">DoWork</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">try</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"Thread - working </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">i</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            Thread<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ThreadAbortException</span> e<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"Thread - caught ThreadAbortException: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">e<span class=\"token punctuation\">.</span>Message</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// Even though we caught the exception, the runtime re-throws it</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// This is never called</span>\n    Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Thread - outside the catch block\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>When you run the program, the output looks something like this:</p> <pre class=\"language-bash\"><code class=\"language-bash\">Thread - working <span class=\"token number\">0</span>\nThread - working <span class=\"token number\">1</span>\nThread - working <span class=\"token number\">2</span>\nMain - aborting thread\nThread - caught ThreadAbortException: Thread was being aborted.\nMain ending\n</code></pre> <p>As you can see, even though we caught the <code>ThreadAbortException</code>, the thread exited, as the exception was re-thrown. Now we'll look at a scenario where that doesn't quite work as you expect.</p> <h2 id=\"infinite-loops-and-threadabortexception\" class=\"heading-with-anchor\"><a href=\"#infinite-loops-and-threadabortexception\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Infinite loops and <code>ThreadAbortException</code></a></h2> <p>The issue I'm going to describe is based on a real issue we ran into in the Datadog .NET Tracer shortly before I joined in January 2021. The issue occurred during IIS AppDomain recycles (among other cases) and would result in the apps not shutting down. As you might expect given the preamble, the problem was related to <code>ThreadAbortException</code>.</p> <p>We can demonstrate the problem easily if we make a slight tweak to the example above. Instead of using a <code>for</code> loop inside a <code>try</code>-<code>catch</code>, we're going to change to a <code>try</code>-<code>catch</code> inside a <code>while</code> loop. The rest of the program remains the same, so I've only shown the <code>DoWork()</code> method:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">DoWork</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">try</span>\n        <span class=\"token punctuation\">{</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"Thread - working </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">i</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            Thread<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ThreadAbortException</span> e<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"Thread - caught ThreadAbortException </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">e<span class=\"token punctuation\">.</span>Message</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// Even though we caught the exception, the runtime _should_ re-throw it</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// This is never called</span>\n    Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Thread - outside the catch block.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>Now, <em>theoretically</em>, there should be no difference here. The <code>Abort()</code> is called, caught in the <code>catch</code> block, and the runtime should-rethrow the exception, exiting the <code>while</code> loop and the thread. However if we run the app in the <code>Release</code> configuration we have a problem—we get stuck in an infinite loop in the <code>catch</code> block:</p> <pre class=\"language-bash\"><code class=\"language-bash\">Thread - working <span class=\"token number\">0</span>\nThread - working <span class=\"token number\">1</span>\nThread - working <span class=\"token number\">2</span>\nMain - aborting thread.\nThread - caught ThreadAbortException Thread was being aborted.\nThread - caught ThreadAbortException Thread was being aborted.\nThread - caught ThreadAbortException Thread was being aborted.\nThread - caught ThreadAbortException Thread was being aborted.\nThread - caught ThreadAbortException Thread was being aborted.\nThread - caught ThreadAbortException Thread was being aborted.\nThread - caught ThreadAbortException Thread was being aborted.\nThread - caught ThreadAbortException Thread was being aborted.\nThread - caught ThreadAbortException Thread was being aborted.\nThread - caught ThreadAbortException Thread was being aborted.\n<span class=\"token punctuation\">..</span>.\n</code></pre> <p>This is clearly Not Good™, and ultimately comes down to <a href=\"https://github.com/dotnet/runtime/issues/9633\">a bug in the JIT</a>. The explanation of the bug is somewhat complex (and is largely due to a workardound for a <em>different</em> bug) but <a href=\"https://github.com/dotnet/runtime/issues/9633#issuecomment-366132297\">this comment</a> has all the gory details if you want to dig in.</p> <blockquote> <p>The bug is present in <a href=\"https://github.com/microsoft/dotnet/blob/main/Documentation/testing-with-ryujit.md\">the RyuJIT compiler</a>, but <em>not</em> in the legacy JIT, so you can also workaround the bug by setting <code>&lt;useLegacyJit enabled=\"1\" /&gt;</code> in your <em>app.config</em> or <em>web.config</em>.</p> </blockquote> <p>The bug is triggered specifically when you have a \"tight\" loop with a <code>try</code>-<code>catch</code> directly inside a <code>while</code> loop:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">try</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// ...</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">catch</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// ...</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>Adding a <code>Console.WriteLine()</code> (for example) inside the <code>while</code> loop but <em>outside</em> the <code>try</code>-<code>catch</code> causes the bug to be avoided, as does using a <code>for</code> loop for example, so it's this <em>specific</em> pattern you need to watch out for. Adding a <code>finally</code> block also fixes the issue.</p> <p>Ultimately, Microsoft was decided <em>not</em> to fix this bug, so the workaround is to ensure you always \"manually\" re-<code>throw</code> a <code>ThreadAbortException</code> if you find yourself with the problematic pattern.</p> <p>Unfortunately, it's not <em>obvious</em> that the pattern is problematic just by looking at it, so it's a great candidate for a Roslyn Analyzer to do the spotting for you.</p> <h2 id=\"creating-an-analyzer-to-detect-the-pattern\" class=\"heading-with-anchor\"><a href=\"#creating-an-analyzer-to-detect-the-pattern\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Creating an analyzer to detect the pattern</a></h2> <p>In this section I show <a href=\"https://github.com/DataDog/dd-trace-dotnet/pull/1325\">the Roslyn Analyzer I wrote</a> to make sure we don't accidentally introduce this code into the Datadog library.</p> <blockquote> <p>If you're building a .NET Core-only application then you don't need to worry about this, because .NET Core doesn't support <code>ThreadAbortException</code>s. However, if you're building a library that multi-targets .NET Core <em>and</em> .NET Framework, or uses <code>netstandard2.0</code> to do so, then you might want to consider using it.</p> </blockquote> <p>I'm not going into detail about how to create a analyzer in this post (I covered this some time ago in <a href=\"/creating-a-roslyn-analyzer-in-visual-studio-2017/\">a previous post</a>). Instead I'm just going to focus on the analyzer code itself.</p> <p>As a reminder, we are trying to detect code that looks something like this:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token range operator\">..</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">try</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// ...</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">catch</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// ...</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>and advise you to update it to manually re-throw the exception. The simplest fix might look like this:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token range operator\">..</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">try</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// ...</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">catch</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// ...</span>\n        <span class=\"token keyword\">throw</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Required to avoid infinite recursion</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>We'll add a code fix provider to automatically make that basic fix later.</p> <h3 id=\"creating-the-analyzer\" class=\"heading-with-anchor\"><a href=\"#creating-the-analyzer\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Creating the analyzer</a></h3> <p>We'll start by looking at the analyzer itself. This derives from <code>DiagnosticAnalyzer</code>, defines a diagnostic ID, and registers a <code>SyntaxNodeAction</code> that looks for <code>while</code> loops. If the <code>while</code> loop contains a <code>try-catch</code> that has a problematic <code>catch</code> clause, we raise the issue.</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">DiagnosticAnalyzer</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span>LanguageNames<span class=\"token punctuation\">.</span>CSharp<span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ThreadAbortAnalyzer</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">DiagnosticAnalyzer</span></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">const</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> DiagnosticId <span class=\"token operator\">=</span> <span class=\"token string\">\"ABRT0001\"</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\">DiagnosticDescriptor</span> Rule <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span>\n        DiagnosticId<span class=\"token punctuation\">,</span>\n        <span class=\"token named-parameter punctuation\">title</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Potential infinite loop on ThreadAbortException\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token named-parameter punctuation\">messageFormat</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Potential infinite loop - you should rethrow Exception in catch block\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token named-parameter punctuation\">category</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Reliability\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token named-parameter punctuation\">defaultSeverity</span><span class=\"token punctuation\">:</span> DiagnosticSeverity<span class=\"token punctuation\">.</span>Error<span class=\"token punctuation\">,</span>\n        <span class=\"token named-parameter punctuation\">isEnabledByDefault</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n        <span class=\"token named-parameter punctuation\">description</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"While blocks are vulnerable to infinite loop on ThreadAbortException due to a bug in the runtime. The catch block should rethrow a ThreadAbortException, or use a finally block\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\">ImmutableArray<span class=\"token punctuation\">&lt;</span>DiagnosticDescriptor<span class=\"token punctuation\">&gt;</span></span> SupportedDiagnostics <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> ImmutableArray<span class=\"token punctuation\">.</span><span class=\"token function\">Create</span><span class=\"token punctuation\">(</span>Rule<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Initialize</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">AnalysisContext</span> context<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// Don't bother checking generated code</span>\n        context<span class=\"token punctuation\">.</span><span class=\"token function\">ConfigureGeneratedCodeAnalysis</span><span class=\"token punctuation\">(</span>GeneratedCodeAnalysisFlags<span class=\"token punctuation\">.</span>None<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        context<span class=\"token punctuation\">.</span><span class=\"token function\">EnableConcurrentExecution</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        context<span class=\"token punctuation\">.</span><span class=\"token function\">RegisterSyntaxNodeAction</span><span class=\"token punctuation\">(</span>AnalyseSyntax<span class=\"token punctuation\">,</span> SyntaxKind<span class=\"token punctuation\">.</span>WhileStatement<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">AnalyseSyntax</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SyntaxNodeAnalysisContext</span> context<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span>Node <span class=\"token keyword\">is</span> <span class=\"token class-name\">WhileStatementSyntax</span> whileStatement\n            <span class=\"token operator\">&amp;&amp;</span> ThreadAbortSyntaxHelper<span class=\"token punctuation\">.</span><span class=\"token function\">FindProblematicCatchClause</span><span class=\"token punctuation\">(</span> <span class=\"token comment\">// shown below</span>\n                whileStatement<span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">.</span>SemanticModel<span class=\"token punctuation\">)</span> <span class=\"token keyword\">is</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span> problematicCatch<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// If we're in a while statement, and there's a problematic catch</span>\n            <span class=\"token comment\">// clause, then create a diagnostic</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> diagnostic <span class=\"token operator\">=</span> Diagnostic<span class=\"token punctuation\">.</span><span class=\"token function\">Create</span><span class=\"token punctuation\">(</span>Rule<span class=\"token punctuation\">,</span> problematicCatch<span class=\"token punctuation\">.</span><span class=\"token function\">GetLocation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            context<span class=\"token punctuation\">.</span><span class=\"token function\">ReportDiagnostic</span><span class=\"token punctuation\">(</span>diagnostic<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>The <code>ThreadAbortSyntaxHelper</code> performs the analysis of the while block, looking explicitly for a <code>while</code> block with the following characteristics:</p> <ul><li>The body of the <code>while</code> is a <code>BlockSyntax</code></li> <li>The body contains only one statement, which is a <code>TryStatementSyntax</code></li> <li>The <code>TryStatementSyntax</code> contains a <code>CatchClauseSyntax</code> which catches a <code>ThreadAbortException</code> (or its ancestors)</li> <li>The <code>CatchClauseSyntax</code> does <em>not</em> call <code>throw;</code></li></ul> <p>If all of these conditions are matched, the analyzer flags the <code>catch</code> as problematic. The code of the helper is shown below:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">internal</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ThreadAbortSyntaxHelper</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">CatchClauseSyntax</span> <span class=\"token function\">FindProblematicCatchClause</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">WhileStatementSyntax</span> whileStatement<span class=\"token punctuation\">,</span> <span class=\"token class-name\">SemanticModel</span> model<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>whileStatement<span class=\"token punctuation\">.</span>Statement <span class=\"token keyword\">is</span> <span class=\"token keyword\">not</span> <span class=\"token class-name\">BlockSyntax</span> blockSyntax<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> innerStatements <span class=\"token operator\">=</span> blockSyntax<span class=\"token punctuation\">.</span>Statements<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>innerStatements<span class=\"token punctuation\">.</span>Count <span class=\"token operator\">!=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// only applies when try directly nested under while and only child</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>innerStatements<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">is</span> <span class=\"token keyword\">not</span> <span class=\"token class-name\">TryStatementSyntax</span> tryCatchStatement<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// Not a try catch nested in a while</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token class-name\">CatchClauseSyntax</span> catchClause <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> willCatchThreadAbort <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> willRethrowThreadAbort <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> catchSyntax <span class=\"token keyword\">in</span> tryCatchStatement<span class=\"token punctuation\">.</span>Catches<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            catchClause <span class=\"token operator\">=</span> catchSyntax<span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> exceptionTypeSyntax <span class=\"token operator\">=</span> catchSyntax<span class=\"token punctuation\">.</span>Declaration<span class=\"token punctuation\">.</span>Type<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">CanCatchThreadAbort</span><span class=\"token punctuation\">(</span>exceptionTypeSyntax<span class=\"token punctuation\">,</span> model<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                willCatchThreadAbort <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\n                <span class=\"token comment\">// We're in the catch block that will catch the ThreadAbort</span>\n                <span class=\"token comment\">// Make sure that we re-throw the exception</span>\n                <span class=\"token comment\">// This is a very basic check, in that it doesn't check control flow etc</span>\n                <span class=\"token comment\">// It requires that you have a throw; in the catch block</span>\n                willRethrowThreadAbort <span class=\"token operator\">=</span> catchSyntax<span class=\"token punctuation\">.</span>Block<span class=\"token punctuation\">.</span>Statements\n                    <span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">OfType</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>ThrowStatementSyntax<span class=\"token punctuation\">&gt;</span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">.</span><span class=\"token function\">Any</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>willCatchThreadAbort <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>willRethrowThreadAbort<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> catchClause<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">bool</span></span> <span class=\"token function\">CanCatchThreadAbort</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TypeSyntax</span> syntax<span class=\"token punctuation\">,</span> <span class=\"token class-name\">SemanticModel</span> model<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> exceptionType <span class=\"token operator\">=</span> model<span class=\"token punctuation\">.</span><span class=\"token function\">GetSymbolInfo</span><span class=\"token punctuation\">(</span>syntax<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>Symbol <span class=\"token keyword\">as</span> <span class=\"token class-name\">INamedTypeSymbol</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> exceptionTypeName <span class=\"token operator\">=</span> exceptionType<span class=\"token punctuation\">?.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> exceptionTypeName <span class=\"token operator\">==</span> <span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span><span class=\"token type-expression class-name\">ThreadAbortException</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>FullName\n            <span class=\"token operator\">||</span> exceptionTypeName <span class=\"token operator\">==</span> <span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span><span class=\"token type-expression class-name\">SystemException</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>FullName\n            <span class=\"token operator\">||</span> exceptionTypeName <span class=\"token operator\">==</span> <span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span><span class=\"token type-expression class-name\">Exception</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>FullName<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>There are clearly a bunch of limitations to this analysis, but <a href=\"#limitations-of-the-analyzer-and-the-code-fix\">I'll go through those later</a>. When you run the analyzer, you can see that it works, flagging the exception in a problematic scenario:</p> <p><img src=\"/content/images/2025/thread_abort_analyzer.png\" alt=\"The analyzer in action\"></p> <p>Now that we have the analyzer, let's create a simple code fix provider for it</p> <h3 id=\"creating-the-code-fix-provider\" class=\"heading-with-anchor\"><a href=\"#creating-the-code-fix-provider\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Creating the code fix provider</a></h3> <p>The <code>CodeFixProvider</code> is registered as a fixer for the <code>ThreadAbortAnalyzer</code> we defined above. It takes the diagnostic location provided and registers a code fix which simply adds a <code>throw</code> statement to the end of the first <code>catch</code> block that would catch the <code>ThreadAbortException</code>.</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">ExportCodeFixProvider</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span>LanguageNames<span class=\"token punctuation\">.</span>CSharp<span class=\"token punctuation\">,</span> Name <span class=\"token operator\">=</span> <span class=\"token keyword\">nameof</span><span class=\"token punctuation\">(</span>ThreadAbortCodeFixProvider<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">Shared</span></span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ThreadAbortCodeFixProvider</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">CodeFixProvider</span></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">sealed</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\">ImmutableArray<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">&gt;</span></span> FixableDiagnosticIds <span class=\"token operator\">=&gt;</span> ImmutableArray<span class=\"token punctuation\">.</span><span class=\"token function\">Create</span><span class=\"token punctuation\">(</span>ThreadAbortAnalyzer<span class=\"token punctuation\">.</span>DiagnosticId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">sealed</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\">FixAllProvider</span> <span class=\"token function\">GetFixAllProvider</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> WellKnownFixAllProviders<span class=\"token punctuation\">.</span>BatchFixer<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">sealed</span> <span class=\"token keyword\">override</span> <span class=\"token keyword\">async</span> <span class=\"token return-type class-name\">Task</span> <span class=\"token function\">RegisterCodeFixesAsync</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CodeFixContext</span> context<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> root <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> context<span class=\"token punctuation\">.</span>Document<span class=\"token punctuation\">.</span><span class=\"token function\">GetSyntaxRootAsync</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span>CancellationToken<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ConfigureAwait</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> diagnostic <span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span>Diagnostics<span class=\"token punctuation\">.</span><span class=\"token function\">First</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> diagnosticSpan <span class=\"token operator\">=</span> diagnostic<span class=\"token punctuation\">.</span>Location<span class=\"token punctuation\">.</span>SourceSpan<span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// Find the catch block catch declaration identified by the diagnostic.</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> catchClause <span class=\"token operator\">=</span> root<span class=\"token punctuation\">.</span><span class=\"token function\">FindToken</span><span class=\"token punctuation\">(</span>diagnosticSpan<span class=\"token punctuation\">.</span>Start<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span>Parent\n            <span class=\"token punctuation\">.</span><span class=\"token function\">AncestorsAndSelf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">OfType</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>CatchClauseSyntax<span class=\"token punctuation\">&gt;</span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">First</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// Register a code action that will invoke the fix.</span>\n        context<span class=\"token punctuation\">.</span><span class=\"token function\">RegisterCodeFix</span><span class=\"token punctuation\">(</span>\n            CodeAction<span class=\"token punctuation\">.</span><span class=\"token function\">Create</span><span class=\"token punctuation\">(</span>\n                <span class=\"token named-parameter punctuation\">title</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Rethrow exception\"</span><span class=\"token punctuation\">,</span>\n                <span class=\"token named-parameter punctuation\">createChangedDocument</span><span class=\"token punctuation\">:</span> c <span class=\"token operator\">=&gt;</span> <span class=\"token function\">AddThrowStatement</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span>Document<span class=\"token punctuation\">,</span> catchClause<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                <span class=\"token named-parameter punctuation\">equivalenceKey</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">nameof</span><span class=\"token punctuation\">(</span>ThreadAbortCodeFixProvider<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            diagnostic<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">async</span> <span class=\"token return-type class-name\">Task<span class=\"token punctuation\">&lt;</span>Document<span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">AddThrowStatement</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Document</span> document<span class=\"token punctuation\">,</span> <span class=\"token class-name\">CatchClauseSyntax</span> catchBlock<span class=\"token punctuation\">,</span> <span class=\"token class-name\">CancellationToken</span> cancellationToken<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// This messes with the whitespace, but meh, it's simple</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> throwStatement <span class=\"token operator\">=</span> SyntaxFactory<span class=\"token punctuation\">.</span><span class=\"token function\">ThrowStatement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> statements <span class=\"token operator\">=</span> catchBlock<span class=\"token punctuation\">.</span>Block<span class=\"token punctuation\">.</span>Statements<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>throwStatement<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> newCatchBlock <span class=\"token operator\">=</span> catchBlock<span class=\"token punctuation\">.</span>Block<span class=\"token punctuation\">.</span><span class=\"token function\">WithStatements</span><span class=\"token punctuation\">(</span>statements<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// replace the syntax and return updated document</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> root <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">GetSyntaxRootAsync</span><span class=\"token punctuation\">(</span>cancellationToken<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ConfigureAwait</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        root <span class=\"token operator\">=</span> root<span class=\"token punctuation\">.</span><span class=\"token function\">ReplaceNode</span><span class=\"token punctuation\">(</span>catchBlock<span class=\"token punctuation\">.</span>Block<span class=\"token punctuation\">,</span> newCatchBlock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">WithSyntaxRoot</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>Now when the analyzer flags an issue, you get a suggestion of how to fix it with one click:</p> <p><img src=\"/content/images/2025/thread_abort_analyzer_02.png\" alt=\"The code fix suggestion in action\"></p> <p>This is clearly a crude fix (as I describe in the next section) but I've not found it to be a big issue in practice, the important thing is that it draws attention to the issue and shows a <em>possible</em> fix.</p> <h3 id=\"limitations-of-the-analyzer-and-the-code-fix\" class=\"heading-with-anchor\"><a href=\"#limitations-of-the-analyzer-and-the-code-fix\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Limitations of the analyzer and the code fix</a></h3> <p>The analyzer I show in this post is not particularly sophisticated. It does only very basic analysis of the <code>while</code> and <code>try</code>-<code>catch</code> statements. The limitations include:</p> <ul><li><strong>Assumes an infinite <code>while</code> loop</strong>. For simplicity, the analyzer doesn't check the expression in the while loop, and assumes it will loop infinitely. That's a conservative approach, and will flag some cases that <em>won't</em> trigger the bug, but it's good enough for our purposes.</li> <li><strong>Exception filters are not considered</strong>. For simplicity, I've ignored exception filters on the catch block. That means we might assume an exception is caught when it is not, and in that case we might <em>also</em> incorrectly assume an exception is rethrown when it is not.</li> <li><strong>Doesn't consider finally blocks</strong>. In practice, the presence of a <code>finally</code> block can avoid the bug, so doesn't need to explicitly rethrow. The analyzer does not consider this, and take a more conservative approach, requiring the rethrow.</li> <li><strong>Doesn't check flow control in catch clause</strong>. In some cases, a catch clause <em>might</em> be calling <code>throw;</code>, but if it's not a direct child of the <code>catch</code> block, the analyzer will ignore it. Again, this is a conservative approach.</li></ul> <p>In terms of the code fix provider, it's potentially unlikely that you would <em>actually</em> want to call <code>throw;</code> inside a <code>catch(Exception)</code> block. A better approach would likely be to introduce an additional <code>catch</code> clause for <code>ThreadAbortException</code> specifically, and only re-throwing in that clause.</p> <p>For example, if you have this:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">try</span>\n    <span class=\"token punctuation\">{</span>\n        Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Looping\"</span><span class=\"token punctuation\">)</span>\n        Thread<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Exception!\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>then instead of the code suggested by the analyzer:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">try</span>\n    <span class=\"token punctuation\">{</span>\n        Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Looping\"</span><span class=\"token punctuation\">)</span>\n        Thread<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Exception!\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">throw</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Added by code fix provider</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>you might want to do something like this instead:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">try</span>\n    <span class=\"token punctuation\">{</span>\n        Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Looping\"</span><span class=\"token punctuation\">)</span>\n        Thread<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ThreadAbortException</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// catch ThreadAbortException explicitly</span>\n    <span class=\"token punctuation\">{</span>\n        Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ThreadAbortException!\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">throw</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Avoid the bug</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Exception!\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\">// No need to throw in this block</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>This avoids the bug by re-throwing when you have a <code>ThreadAbortException</code> specifically, and means you don't rethrow for just <em>any</em> <code>Exception</code>. In practice, I wasn't going to bother writing a code fix provider at all, so I went for the simplest solution at the time. If I wanted to be more robust I would almost certainly try to use this pattern instead.</p> <h2 id=\"summary\" class=\"heading-with-anchor\"><a href=\"#summary\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Summary</a></h2> <p>In this post I described a bug in the .NET Framework runtime that can cause a <code>ThreadAbortException</code> to get stuck in an infinite loop. The bug only occurs when you have a try-catch block tightly nested in a <code>while</code> block. Normally if you catch a <code>ThreadAbortException</code> the runtime automatically re-throws the exception after the <code>catch</code> block has executed. However the bug means that the catch block gets stuck re-executing infinitely.</p> <p>In the second half of the post I showed a Roslyn Analyzer I created that can detect the problematic pattern and includes a code fix provider that adds a <code>throw;</code> statement to break out of the infinite loop. It's a relatively crude analyzer, but I know it's saved us at least once from introducing the issue!</p> ",
    "sanitized": "In this post I describe an infinite-loop scenario that can occur on .NET Framework when a ThreadAbortException is raised. I describe when you might run into this scenario, why it happens (it's a bug in the runtime), and how you can avoid it. Finally I show a Roslyn Analyzer that you can use to automatically flag problematic code. Throwing a ThreadAbortException with Thread.Abort() When you're doing parallel/concurrent programming in .NET, and you want to do two things at once, you typically use the Task Parallel Library, Task, Task<T>, async/await, and all that modern goodness. However, you can also manage threads yourself \"manually\", by calling Thread.Start() etc.  These days, in practice, you should almost never be working directly with threads. Use Task et al wherever possible so that you're using the ThreadPool to schedule jobs and async/await to handle continuations.  If you have a running thread, and you want to stop it running, you would typically try to use cooperative cancellation, using CancellationTokens or something similar. However, in some cases that's not possible; maybe the thread is running third party code out of your control, for example. In .NET Framework you have a \"kill it with fire\" option: Thread.Abort().  Note that Thread.Abort() only applies to .NET Framework. The Abort() method is not supported on .NET Core and throws a PlatformNotSupportedException to the caller instead.  Calling Abort() on a thread causes the runtime to throw a ThreadAbortException in the thread's code. ThreadAbortException is special, in that you can catch it in application code (unlike some other exceptions such as StackOverflowException which can't be caught), but the runtime automatically re-throws the ThreadAbortException at the end of the catch block.  It is possible to \"cancel\" the exception by calling ResetAbort() but I'm not going to go into that in this post.  Just to give a concrete example, the following is a small .NET Framework program that starts a Thread, which starts doing some work, and then calls Abort(). // Start a new thread, which runs the DoWork method\nvar myThread = new Thread(new ThreadStart(DoWork));\nmyThread.Start();\n\nThread.Sleep(300);\nConsole.WriteLine(\"Main - aborting thread\");\n\nmyThread.Abort(); // Trigger a ThreadAbortException\nmyThread.Join(); // Wait for the thread to exit\n\nConsole.WriteLine(\"Main ending\");\n\nstatic void DoWork()\n{\n    try\n    {\n        for (var i = 0; i < 100; i++)\n        {\n            Console.WriteLine($\"Thread - working {i}\");\n            Thread.Sleep(100);\n        }\n    }\n    catch (ThreadAbortException e)\n    {\n        Console.WriteLine($\"Thread - caught ThreadAbortException: {e.Message}\");\n        // Even though we caught the exception, the runtime re-throws it\n    }\n\n    // This is never called\n    Console.WriteLine(\"Thread - outside the catch block\");\n}\n When you run the program, the output looks something like this: Thread - working 0\nThread - working 1\nThread - working 2\nMain - aborting thread\nThread - caught ThreadAbortException: Thread was being aborted.\nMain ending\n As you can see, even though we caught the ThreadAbortException, the thread exited, as the exception was re-thrown. Now we'll look at a scenario where that doesn't quite work as you expect. Infinite loops and ThreadAbortException The issue I'm going to describe is based on a real issue we ran into in the Datadog .NET Tracer shortly before I joined in January 2021. The issue occurred during IIS AppDomain recycles (among other cases) and would result in the apps not shutting down. As you might expect given the preamble, the problem was related to ThreadAbortException. We can demonstrate the problem easily if we make a slight tweak to the example above. Instead of using a for loop inside a try-catch, we're going to change to a try-catch inside a while loop. The rest of the program remains the same, so I've only shown the DoWork() method: static void DoWork()\n{\n    var i = 0;\n    while (true)\n    {\n        try\n        {\n            Console.WriteLine($\"Thread - working {i}\");\n            i++;\n            Thread.Sleep(100);\n        }\n        catch (ThreadAbortException e)\n        {\n            Console.WriteLine($\"Thread - caught ThreadAbortException {e.Message}\");\n            // Even though we caught the exception, the runtime _should_ re-throw it\n        }\n    }\n\n    // This is never called\n    Console.WriteLine(\"Thread - outside the catch block.\");\n}\n Now, theoretically, there should be no difference here. The Abort() is called, caught in the catch block, and the runtime should-rethrow the exception, exiting the while loop and the thread. However if we run the app in the Release configuration we have a problem—we get stuck in an infinite loop in the catch block: Thread - working 0\nThread - working 1\nThread - working 2\nMain - aborting thread.\nThread - caught ThreadAbortException Thread was being aborted.\nThread - caught ThreadAbortException Thread was being aborted.\nThread - caught ThreadAbortException Thread was being aborted.\nThread - caught ThreadAbortException Thread was being aborted.\nThread - caught ThreadAbortException Thread was being aborted.\nThread - caught ThreadAbortException Thread was being aborted.\nThread - caught ThreadAbortException Thread was being aborted.\nThread - caught ThreadAbortException Thread was being aborted.\nThread - caught ThreadAbortException Thread was being aborted.\nThread - caught ThreadAbortException Thread was being aborted.\n...\n This is clearly Not Good™, and ultimately comes down to a bug in the JIT. The explanation of the bug is somewhat complex (and is largely due to a workardound for a different bug) but this comment has all the gory details if you want to dig in.  The bug is present in the RyuJIT compiler, but not in the legacy JIT, so you can also workaround the bug by setting <useLegacyJit enabled=\"1\" /> in your app.config or web.config.  The bug is triggered specifically when you have a \"tight\" loop with a try-catch directly inside a while loop: while(true)\n{\n    try\n    {\n        // ...\n    }\n    catch\n    {\n        // ...\n    }\n}\n Adding a Console.WriteLine() (for example) inside the while loop but outside the try-catch causes the bug to be avoided, as does using a for loop for example, so it's this specific pattern you need to watch out for. Adding a finally block also fixes the issue. Ultimately, Microsoft was decided not to fix this bug, so the workaround is to ensure you always \"manually\" re-throw a ThreadAbortException if you find yourself with the problematic pattern. Unfortunately, it's not obvious that the pattern is problematic just by looking at it, so it's a great candidate for a Roslyn Analyzer to do the spotting for you. Creating an analyzer to detect the pattern In this section I show the Roslyn Analyzer I wrote to make sure we don't accidentally introduce this code into the Datadog library.  If you're building a .NET Core-only application then you don't need to worry about this, because .NET Core doesn't support ThreadAbortExceptions. However, if you're building a library that multi-targets .NET Core and .NET Framework, or uses netstandard2.0 to do so, then you might want to consider using it.  I'm not going into detail about how to create a analyzer in this post (I covered this some time ago in a previous post). Instead I'm just going to focus on the analyzer code itself. As a reminder, we are trying to detect code that looks something like this: while(...)\n{\n    try\n    {\n        // ...\n    }\n    catch\n    {\n        // ...\n    }\n}\n and advise you to update it to manually re-throw the exception. The simplest fix might look like this: while(...)\n{\n    try\n    {\n        // ...\n    }\n    catch\n    {\n        // ...\n        throw; // Required to avoid infinite recursion\n    }\n}\n We'll add a code fix provider to automatically make that basic fix later. Creating the analyzer We'll start by looking at the analyzer itself. This derives from DiagnosticAnalyzer, defines a diagnostic ID, and registers a SyntaxNodeAction that looks for while loops. If the while loop contains a try-catch that has a problematic catch clause, we raise the issue. [DiagnosticAnalyzer(LanguageNames.CSharp)]\npublic class ThreadAbortAnalyzer : DiagnosticAnalyzer\n{\n    public const string DiagnosticId = \"ABRT0001\";\n\n    private static readonly DiagnosticDescriptor Rule = new(\n        DiagnosticId,\n        title: \"Potential infinite loop on ThreadAbortException\",\n        messageFormat: \"Potential infinite loop - you should rethrow Exception in catch block\",\n        category: \"Reliability\",\n        defaultSeverity: DiagnosticSeverity.Error,\n        isEnabledByDefault: true,\n        description: \"While blocks are vulnerable to infinite loop on ThreadAbortException due to a bug in the runtime. The catch block should rethrow a ThreadAbortException, or use a finally block\");\n\n    public override ImmutableArray<DiagnosticDescriptor> SupportedDiagnostics { get; } = ImmutableArray.Create(Rule);\n\n    public override void Initialize(AnalysisContext context)\n    {\n        // Don't bother checking generated code\n        context.ConfigureGeneratedCodeAnalysis(GeneratedCodeAnalysisFlags.None);\n        context.EnableConcurrentExecution();\n\n        context.RegisterSyntaxNodeAction(AnalyseSyntax, SyntaxKind.WhileStatement);\n    }\n\n    private void AnalyseSyntax(SyntaxNodeAnalysisContext context)\n    {\n        if (context.Node is WhileStatementSyntax whileStatement\n            && ThreadAbortSyntaxHelper.FindProblematicCatchClause( // shown below\n                whileStatement, context.SemanticModel) is { } problematicCatch)\n        {\n            // If we're in a while statement, and there's a problematic catch\n            // clause, then create a diagnostic\n            var diagnostic = Diagnostic.Create(Rule, problematicCatch.GetLocation());\n            context.ReportDiagnostic(diagnostic);\n        }\n    }\n}\n The ThreadAbortSyntaxHelper performs the analysis of the while block, looking explicitly for a while block with the following characteristics: The body of the while is a BlockSyntax The body contains only one statement, which is a TryStatementSyntax The TryStatementSyntax contains a CatchClauseSyntax which catches a ThreadAbortException (or its ancestors) The CatchClauseSyntax does not call throw; If all of these conditions are matched, the analyzer flags the catch as problematic. The code of the helper is shown below: internal static class ThreadAbortSyntaxHelper\n{\n    public static CatchClauseSyntax FindProblematicCatchClause(WhileStatementSyntax whileStatement, SemanticModel model)\n    {\n        if (whileStatement.Statement is not BlockSyntax blockSyntax)\n        {\n            return null;\n        }\n\n        var innerStatements = blockSyntax.Statements;\n        if (innerStatements.Count != 1)\n        {\n            // only applies when try directly nested under while and only child\n            return null;\n        }\n\n        if (innerStatements[0] is not TryStatementSyntax tryCatchStatement)\n        {\n            // Not a try catch nested in a while\n            return null;\n        }\n\n        CatchClauseSyntax catchClause = null;\n        var willCatchThreadAbort = false;\n        var willRethrowThreadAbort = false;\n\n        foreach (var catchSyntax in tryCatchStatement.Catches)\n        {\n            catchClause = catchSyntax;\n            var exceptionTypeSyntax = catchSyntax.Declaration.Type;\n            if (CanCatchThreadAbort(exceptionTypeSyntax, model))\n            {\n                willCatchThreadAbort = true;\n\n                // We're in the catch block that will catch the ThreadAbort\n                // Make sure that we re-throw the exception\n                // This is a very basic check, in that it doesn't check control flow etc\n                // It requires that you have a throw; in the catch block\n                willRethrowThreadAbort = catchSyntax.Block.Statements\n                    .OfType<ThrowStatementSyntax>()\n                    .Any();\n                break;\n            }\n        }\n\n        if (willCatchThreadAbort && !willRethrowThreadAbort)\n        {\n            return catchClause;\n        }\n\n        return null;\n    }\n\n    private static bool CanCatchThreadAbort(TypeSyntax syntax, SemanticModel model)\n    {\n        var exceptionType = model.GetSymbolInfo(syntax).Symbol as INamedTypeSymbol;\n        var exceptionTypeName = exceptionType?.ToString();\n        return exceptionTypeName == typeof(ThreadAbortException).FullName\n            || exceptionTypeName == typeof(SystemException).FullName\n            || exceptionTypeName == typeof(Exception).FullName;\n    }\n}\n There are clearly a bunch of limitations to this analysis, but I'll go through those later. When you run the analyzer, you can see that it works, flagging the exception in a problematic scenario:  Now that we have the analyzer, let's create a simple code fix provider for it Creating the code fix provider The CodeFixProvider is registered as a fixer for the ThreadAbortAnalyzer we defined above. It takes the diagnostic location provided and registers a code fix which simply adds a throw statement to the end of the first catch block that would catch the ThreadAbortException. [ExportCodeFixProvider(LanguageNames.CSharp, Name = nameof(ThreadAbortCodeFixProvider))]\n[Shared]\npublic class ThreadAbortCodeFixProvider : CodeFixProvider\n{\n    public sealed override ImmutableArray<string> FixableDiagnosticIds => ImmutableArray.Create(ThreadAbortAnalyzer.DiagnosticId);\n    public sealed override FixAllProvider GetFixAllProvider() => WellKnownFixAllProviders.BatchFixer;\n\n    public sealed override async Task RegisterCodeFixesAsync(CodeFixContext context)\n    {\n        var root = await context.Document.GetSyntaxRootAsync(context.CancellationToken).ConfigureAwait(false);\n\n        var diagnostic = context.Diagnostics.First();\n        var diagnosticSpan = diagnostic.Location.SourceSpan;\n\n        // Find the catch block catch declaration identified by the diagnostic.\n        var catchClause = root.FindToken(diagnosticSpan.Start)\n            .Parent\n            .AncestorsAndSelf()\n            .OfType<CatchClauseSyntax>().First();\n\n        // Register a code action that will invoke the fix.\n        context.RegisterCodeFix(\n            CodeAction.Create(\n                title: \"Rethrow exception\",\n                createChangedDocument: c => AddThrowStatement(context.Document, catchClause, c),\n                equivalenceKey: nameof(ThreadAbortCodeFixProvider)),\n            diagnostic);\n    }\n\n    private static async Task<Document> AddThrowStatement(Document document, CatchClauseSyntax catchBlock, CancellationToken cancellationToken)\n    {\n        // This messes with the whitespace, but meh, it's simple\n        var throwStatement = SyntaxFactory.ThrowStatement();\n        var statements = catchBlock.Block.Statements.Add(throwStatement);\n        var newCatchBlock = catchBlock.Block.WithStatements(statements);\n\n        // replace the syntax and return updated document\n        var root = await document.GetSyntaxRootAsync(cancellationToken).ConfigureAwait(false);\n        root = root.ReplaceNode(catchBlock.Block, newCatchBlock);\n        return document.WithSyntaxRoot(root);\n    }\n}\n Now when the analyzer flags an issue, you get a suggestion of how to fix it with one click:  This is clearly a crude fix (as I describe in the next section) but I've not found it to be a big issue in practice, the important thing is that it draws attention to the issue and shows a possible fix. Limitations of the analyzer and the code fix The analyzer I show in this post is not particularly sophisticated. It does only very basic analysis of the while and try-catch statements. The limitations include: Assumes an infinite while loop. For simplicity, the analyzer doesn't check the expression in the while loop, and assumes it will loop infinitely. That's a conservative approach, and will flag some cases that won't trigger the bug, but it's good enough for our purposes. Exception filters are not considered. For simplicity, I've ignored exception filters on the catch block. That means we might assume an exception is caught when it is not, and in that case we might also incorrectly assume an exception is rethrown when it is not. Doesn't consider finally blocks. In practice, the presence of a finally block can avoid the bug, so doesn't need to explicitly rethrow. The analyzer does not consider this, and take a more conservative approach, requiring the rethrow. Doesn't check flow control in catch clause. In some cases, a catch clause might be calling throw;, but if it's not a direct child of the catch block, the analyzer will ignore it. Again, this is a conservative approach. In terms of the code fix provider, it's potentially unlikely that you would actually want to call throw; inside a catch(Exception) block. A better approach would likely be to introduce an additional catch clause for ThreadAbortException specifically, and only re-throwing in that clause. For example, if you have this: while(true)\n{\n    try\n    {\n        Console.WriteLine(\"Looping\")\n        Thread.Sleep(100);\n    }\n    catch(Exception)\n    {\n        Console.WriteLine(\"Exception!\")\n    }\n}\n then instead of the code suggested by the analyzer: while(true)\n{\n    try\n    {\n        Console.WriteLine(\"Looping\")\n        Thread.Sleep(100);\n    }\n    catch(Exception)\n    {\n        Console.WriteLine(\"Exception!\")\n        throw; // Added by code fix provider\n    }\n}\n you might want to do something like this instead: while(true)\n{\n    try\n    {\n        Console.WriteLine(\"Looping\")\n        Thread.Sleep(100);\n    }\n    catch(ThreadAbortException) // catch ThreadAbortException explicitly\n    {\n        Console.WriteLine(\"ThreadAbortException!\")\n        throw; // Avoid the bug\n    }\n    catch(Exception)\n    {\n        Console.WriteLine(\"Exception!\")\n        // No need to throw in this block\n    }\n}\n This avoids the bug by re-throwing when you have a ThreadAbortException specifically, and means you don't rethrow for just any Exception. In practice, I wasn't going to bother writing a code fix provider at all, so I went for the simplest solution at the time. If I wanted to be more robust I would almost certainly try to use this pattern instead. Summary In this post I described a bug in the .NET Framework runtime that can cause a ThreadAbortException to get stuck in an infinite loop. The bug only occurs when you have a try-catch block tightly nested in a while block. Normally if you catch a ThreadAbortException the runtime automatically re-throws the exception after the catch block has executed. However the bug means that the catch block gets stuck re-executing infinitely. In the second half of the post I showed a Roslyn Analyzer I created that can detect the problematic pattern and includes a code fix provider that adds a throw; statement to break out of the infinite loop. It's a relatively crude analyzer, but I know it's saved us at least once from introducing the issue!"
  },
  {
    "itemId": "https://andrewlock.net/disabling-localized-satellite-assemblies-during-dotnet-publish/",
    "raw": "<img src=\"https://andrewlock.net/content/images/2025/satellite_banner.png\" /><p>In this brief post I show how to reduce the size of the publish output for .NET apps by preventing the publishing of localization resources when they're not needed.</p> <h2 id=\"what-are-localization-satellite-assemblies-\" class=\"heading-with-anchor\"><a href=\"#what-are-localization-satellite-assemblies-\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">What are localization satellite assemblies?</a></h2> <p>Localization is an important aspect for many applications, and refers to the process of adapting an application such that it uses the paradigms and aspects of the target culture. This is a complex topic in general, and is more than just changing the language; it also involves changing the currencies, number rules, and other culture-specific aspects.</p> <p>The functionality required to work with a given culture is encapsulated in \"satellite\" resource assemblies. These assemblies are named based on the parent assembly, with an added <code>.resources</code> suffix, and placed in a folder corresponding to the appropriate culture.</p> <blockquote> <p><a href=\"https://learn.microsoft.com/en-us/dotnet/core/dependency-loading/loading-resources#when-are-satellite-assemblies-loaded\">This document</a> describes the algorithm for how satellite resource assemblies are loaded in .NET Core.</p> </blockquote> <p>You can see this pattern if you look inside the <a href=\"https://www.nuget.org/packages/System.CommandLine/2.0.0-beta4.22272.1\">System.CommandLine</a> package for example. The parent assembly <em>System.CommandLine.dll</em> is in the root folder, and there are <em>System.CommandLine.resources.dll</em> in each of the \"culture\" folders:</p> <p><img src=\"/content/images/2025/satellites_01.png\" alt=\"The folder structure for System.CommandLine\"></p> <p>When you publish a project that references <em>System.CommandLine</em>, these resource assembly folders are also copied to the output folder. This can significantly increase the final output size of the app. The resource assemblies for <em>System.CommandLine</em> for example add up to ~260KB while the <em>System.CommandLine.dll</em> file is only ~205KB. Obviously not all libraries contain satellite assemblies, but if they did, you might see your published application size doubling.</p> <h2 id=\"do-you-need-localized-resources-\" class=\"heading-with-anchor\"><a href=\"#do-you-need-localized-resources-\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Do you need localized resources?</a></h2> <p>Obviously those localization assemblies are there for a reason. They contain localized versions of error messages for example. The question is whether or not these assemblies are important to you. Localizing your applications can provide a better user experience, and may be explicitly <em>required</em> for some applications. But the process of localization can also be difficult and somewhat expensive.</p> <p>In some cases, particularly when you're building a web app, you may know that your application will only ever run under a <em>single</em> culture, which may even be <a href=\"https://learn.microsoft.com/en-us/dotnet/fundamentals/runtime-libraries/system-globalization-cultureinfo-invariantculture\">the invariant culture</a>.</p> <p>If that's the case, then you <em>know</em> that those additional culture dlls will never be used, but they'll still be copied to the publish output, and increase the overall size of your published application. It would be nice to be able to exclude these dlls.</p> <h2 id=\"using-globalization-invariant-mode\" class=\"heading-with-anchor\"><a href=\"#using-globalization-invariant-mode\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Using globalization invariant mode</a></h2> <p>I initially thought I might be able to exclude these satellite assemblies by explicitly enabling <a href=\"https://github.com/dotnet/runtime/blob/main/docs/design/features/globalization-invariant-mode.md\">globalization invariant mode</a>. Globalization invariant mode is an opt-in feature in .NET Core that ensures that all culture behave like the invariant culture. This removes the typical dependencies and inconsistencies introduced across different operating systems. It's worth reading <a href=\"https://github.com/dotnet/runtime/blob/main/docs/design/features/globalization-invariant-mode.md\">the docs</a> before enabling this mode to understand all the differences it introduces.</p> <p>There are several ways to enable globalization invariant mode, including setting an MSBuild property, either in your project or at the command line when you publish your app. I added the switch to my project as follows:</p> <pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Project</span> <span class=\"token attr-name\">Sdk</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Microsoft.NET.Sdk<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>PropertyGroup</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>OutputType</span><span class=\"token punctuation\">&gt;</span></span>Exe<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>OutputType</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>TargetFramework</span><span class=\"token punctuation\">&gt;</span></span>net9.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>TargetFramework</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token comment\">&lt;!-- Added this 👇 --&gt;</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>InvariantGlobalization</span><span class=\"token punctuation\">&gt;</span></span>true<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>InvariantGlobalization</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>PropertyGroup</span><span class=\"token punctuation\">&gt;</span></span>\n\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ItemGroup</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>PackageReference</span> <span class=\"token attr-name\">Include</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>System.CommandLine<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">Version</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>2.0.0-beta4.22272.1<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ItemGroup</span><span class=\"token punctuation\">&gt;</span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Project</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre> <p>Unfortunately this has no impact on the publish output 😅 That's not entirely surprising given that this mode is a <em>runtime</em> feature: you can enable this mode with an environment variable or with a <em>runtimeconfig.json</em> switch <a href=\"https://learn.microsoft.com/en-us/dotnet/core/runtime-config/globalization#invariant-mode\">as described here</a>.</p> <p>Fundamentally, globalization invariant mode makes all cultures behave like the invariant culture, but it doesn't affect anything at build or publish time as far as I can tell.</p> <h2 id=\"disabling-copying-of-satellite-assemblies-during-publish\" class=\"heading-with-anchor\"><a href=\"#disabling-copying-of-satellite-assemblies-during-publish\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Disabling copying of satellite assemblies during publish</a></h2> <p>Finally, we come to the solution. The .NET Core 2.1 SDK added support for a new MSBuild property, <code>&lt;SatelliteResourceLanguages&gt;</code>. You can set this property to a semi-colon separated list of satellite resource assembly cultures that <em>should</em> be copied to the build and publish output directories.</p> <p>For example, perhaps you know that you will always be running with the <code>es</code> culture. If so, you can add the <code>&lt;SatelliteResourceLanguages&gt;</code> element to your <em>.csproj</em> file like this:</p> <pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Project</span> <span class=\"token attr-name\">Sdk</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Microsoft.NET.Sdk<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>PropertyGroup</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>OutputType</span><span class=\"token punctuation\">&gt;</span></span>Exe<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>OutputType</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>TargetFramework</span><span class=\"token punctuation\">&gt;</span></span>net9.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>TargetFramework</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token comment\">&lt;!-- Add this 👇 --&gt;</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>SatelliteResourceLanguages</span><span class=\"token punctuation\">&gt;</span></span>es<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>SatelliteResourceLanguages</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>PropertyGroup</span><span class=\"token punctuation\">&gt;</span></span>\n\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ItemGroup</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>PackageReference</span> <span class=\"token attr-name\">Include</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>System.CommandLine<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">Version</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>2.0.0-beta4.22272.1<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ItemGroup</span><span class=\"token punctuation\">&gt;</span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Project</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre> <p>Now when you build or publish the project, only the <code>es</code> folder and its satellite assembly is copied to the build output:</p> <p><img src=\"/content/images/2025/satellites_02.png\" alt=\"Only es has been copied to the build output\"></p> <p>If you want multiple cultures, separate them with a <code>;</code>, for example to include both <code>es</code> and <code>fr</code>:</p> <pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>SatelliteResourceLanguages</span><span class=\"token punctuation\">&gt;</span></span>es;fr<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>SatelliteResourceLanguages</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre> <p>which gives:</p> <p><img src=\"/content/images/2025/satellites_03.png\" alt=\"Only es and fr have been copied to the build output\"></p> <p>If you don't want to copy <em>any</em> of the satellite assemblies, you can use <code>en</code>.</p> <pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>SatelliteResourceLanguages</span><span class=\"token punctuation\">&gt;</span></span>en<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>SatelliteResourceLanguages</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre> <p>and sure enough:</p> <p><img src=\"/content/images/2025/satellites_04.png\" alt=\"None of the assemblies have been copied to the build output\"></p> <h2 id=\"caveats-and-troubleshooting\" class=\"heading-with-anchor\"><a href=\"#caveats-and-troubleshooting\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Caveats and troubleshooting</a></h2> <p>For the most part, this feature works as you would expect, and can potentially significantly reduce the size of the published output for scenarios where you know you're not going to need the satellite assemblies. I only ran into a couple of things to watch out for:</p> <ol><li>You should add the <code>&lt;SatelliteResourceLanguages&gt;</code> to the project that references the NuGet package which contains the resources.</li> <li>You must specify the cultures to keep exactly</li></ol> <p>On the first point, imagine you have a class library which references the <em>System.CommandLine</em> package. This library is then referenced by an ASP.NET Core project. You then publish and deploy the web project, and you don't want to deploy all the satellite assemblies.</p> <p>You might think that you need to add <code>&lt;SatelliteResourceLanguages&gt;</code> to the ASP.NET Core project, but you actually need to add it to the <em>library</em> project, as that's the project that references the <em>System.CommandLine</em> package.</p> <p>This requirements means that you need to keep a close on which packages have satellite assemblies, and which projects are referencing these projects. Alternatively, you can add the <code>&lt;SatelliteResourceLanguages&gt;</code> element to <em>all</em> projects to be on the safe side. One obvious way to do that is using a <em>Directory.Build.props</em>.</p> <pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Project</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>PropertyGroup</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>SatelliteResourceLanguages</span><span class=\"token punctuation\">&gt;</span></span>en<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>SatelliteResourceLanguages</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>PropertyGroup</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Project</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre> <p>The other thing to be aware of is that you must specify the culture exactly. <code>en</code> will ensure there's no satellite assemblies, but otherwise you need to specify the culture the same as the folder in the build output. To use the <em>System.CommandLine</em> example again, you could use <code>es</code>, <code>de</code>, or <code>pt-BR</code>, for example, but you can't use <code>pt</code> or <code>zh</code>, as they don't appear exactly in this form:</p> <p><img src=\"/content/images/2025/satellites_01.png\" alt=\"The folder structure for System.CommandLine\"></p> <p>If you specify a culture that isn't in the output, no error is generated, but no satellite assemblies will be copied.</p> <p>That's about all there is to it. Hopefully you find this tip useful at some point!</p> <h2 id=\"summary\" class=\"heading-with-anchor\"><a href=\"#summary\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Summary</a></h2> <p>In this post I showed how you can avoid copying localization satellite assemblies to the build output by adding the <code>&lt;SatelliteResourceLanguages&gt;</code> property to a project. You can use this property to ensure only specific cultures are copied to the build output, or you can specify <code>en</code> to ensure <em>no</em> satellite assemblies are copied.</p> ",
    "sanitized": "In this brief post I show how to reduce the size of the publish output for .NET apps by preventing the publishing of localization resources when they're not needed. What are localization satellite assemblies? Localization is an important aspect for many applications, and refers to the process of adapting an application such that it uses the paradigms and aspects of the target culture. This is a complex topic in general, and is more than just changing the language; it also involves changing the currencies, number rules, and other culture-specific aspects. The functionality required to work with a given culture is encapsulated in \"satellite\" resource assemblies. These assemblies are named based on the parent assembly, with an added .resources suffix, and placed in a folder corresponding to the appropriate culture.  This document describes the algorithm for how satellite resource assemblies are loaded in .NET Core.  You can see this pattern if you look inside the System.CommandLine package for example. The parent assembly System.CommandLine.dll is in the root folder, and there are System.CommandLine.resources.dll in each of the \"culture\" folders:  When you publish a project that references System.CommandLine, these resource assembly folders are also copied to the output folder. This can significantly increase the final output size of the app. The resource assemblies for System.CommandLine for example add up to ~260KB while the System.CommandLine.dll file is only ~205KB. Obviously not all libraries contain satellite assemblies, but if they did, you might see your published application size doubling. Do you need localized resources? Obviously those localization assemblies are there for a reason. They contain localized versions of error messages for example. The question is whether or not these assemblies are important to you. Localizing your applications can provide a better user experience, and may be explicitly required for some applications. But the process of localization can also be difficult and somewhat expensive. In some cases, particularly when you're building a web app, you may know that your application will only ever run under a single culture, which may even be the invariant culture. If that's the case, then you know that those additional culture dlls will never be used, but they'll still be copied to the publish output, and increase the overall size of your published application. It would be nice to be able to exclude these dlls. Using globalization invariant mode I initially thought I might be able to exclude these satellite assemblies by explicitly enabling globalization invariant mode. Globalization invariant mode is an opt-in feature in .NET Core that ensures that all culture behave like the invariant culture. This removes the typical dependencies and inconsistencies introduced across different operating systems. It's worth reading the docs before enabling this mode to understand all the differences it introduces. There are several ways to enable globalization invariant mode, including setting an MSBuild property, either in your project or at the command line when you publish your app. I added the switch to my project as follows: <Project Sdk=\"Microsoft.NET.Sdk\">\n\n  <PropertyGroup>\n    <OutputType>Exe</OutputType>\n    <TargetFramework>net9.0</TargetFramework>\n    <!-- Added this 👇 -->\n    <InvariantGlobalization>true</InvariantGlobalization>\n  </PropertyGroup>\n\n  <ItemGroup>\n    <PackageReference Include=\"System.CommandLine\" Version=\"2.0.0-beta4.22272.1\" />\n  </ItemGroup>\n\n</Project>\n Unfortunately this has no impact on the publish output 😅 That's not entirely surprising given that this mode is a runtime feature: you can enable this mode with an environment variable or with a runtimeconfig.json switch as described here. Fundamentally, globalization invariant mode makes all cultures behave like the invariant culture, but it doesn't affect anything at build or publish time as far as I can tell. Disabling copying of satellite assemblies during publish Finally, we come to the solution. The .NET Core 2.1 SDK added support for a new MSBuild property, <SatelliteResourceLanguages>. You can set this property to a semi-colon separated list of satellite resource assembly cultures that should be copied to the build and publish output directories. For example, perhaps you know that you will always be running with the es culture. If so, you can add the <SatelliteResourceLanguages> element to your .csproj file like this: <Project Sdk=\"Microsoft.NET.Sdk\">\n\n  <PropertyGroup>\n    <OutputType>Exe</OutputType>\n    <TargetFramework>net9.0</TargetFramework>\n    <!-- Add this 👇 -->\n    <SatelliteResourceLanguages>es</SatelliteResourceLanguages>\n  </PropertyGroup>\n\n  <ItemGroup>\n    <PackageReference Include=\"System.CommandLine\" Version=\"2.0.0-beta4.22272.1\" />\n  </ItemGroup>\n\n</Project>\n Now when you build or publish the project, only the es folder and its satellite assembly is copied to the build output:  If you want multiple cultures, separate them with a ;, for example to include both es and fr: <SatelliteResourceLanguages>es;fr</SatelliteResourceLanguages>\n which gives:  If you don't want to copy any of the satellite assemblies, you can use en. <SatelliteResourceLanguages>en</SatelliteResourceLanguages>\n and sure enough:  Caveats and troubleshooting For the most part, this feature works as you would expect, and can potentially significantly reduce the size of the published output for scenarios where you know you're not going to need the satellite assemblies. I only ran into a couple of things to watch out for: You should add the <SatelliteResourceLanguages> to the project that references the NuGet package which contains the resources. You must specify the cultures to keep exactly On the first point, imagine you have a class library which references the System.CommandLine package. This library is then referenced by an ASP.NET Core project. You then publish and deploy the web project, and you don't want to deploy all the satellite assemblies. You might think that you need to add <SatelliteResourceLanguages> to the ASP.NET Core project, but you actually need to add it to the library project, as that's the project that references the System.CommandLine package. This requirements means that you need to keep a close on which packages have satellite assemblies, and which projects are referencing these projects. Alternatively, you can add the <SatelliteResourceLanguages> element to all projects to be on the safe side. One obvious way to do that is using a Directory.Build.props. <Project>\n  <PropertyGroup>\n    <SatelliteResourceLanguages>en</SatelliteResourceLanguages>\n  </PropertyGroup>\n</Project>\n The other thing to be aware of is that you must specify the culture exactly. en will ensure there's no satellite assemblies, but otherwise you need to specify the culture the same as the folder in the build output. To use the System.CommandLine example again, you could use es, de, or pt-BR, for example, but you can't use pt or zh, as they don't appear exactly in this form:  If you specify a culture that isn't in the output, no error is generated, but no satellite assemblies will be copied. That's about all there is to it. Hopefully you find this tip useful at some point! Summary In this post I showed how you can avoid copying localization satellite assemblies to the build output by adding the <SatelliteResourceLanguages> property to a project. You can use this property to ensure only specific cultures are copied to the build output, or you can specify en to ensure no satellite assemblies are copied."
  },
  {
    "itemId": "https://andrewlock.net/setting-environment-variables-in-iis-and-avoiding-app-pool-restarts/",
    "raw": "<img src=\"https://andrewlock.net/content/images/2025/iis_banner.png\" /><p>I recently needed to set some environment variables for an application that was running in IIS on Windows. It turns out there's <em>lots</em> of different ways to do that. In this post, I describe some of the many ways to do that, both from the Windows and IIS UI and from the command line. For each approach I describe the caveats, advantages, and disadvantages.</p> <h2 id=\"how-does-iis-work-\" class=\"heading-with-anchor\"><a href=\"#how-does-iis-work-\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">How does IIS work?</a></h2> <p>IIS is a huge beast, with decades of legacy, but to understand how to control setting environment variables for an application, it helps to have a basic understanding of how IIS works under the hood. <a href=\"https://learn.microsoft.com/en-us/iis/get-started/introduction-to-iis/introduction-to-iis-architecture\">This introduction to IIS on Microsoft Learn</a> provides a good overview, including the interaction between the main components involved.</p> <p>If we consider how an HTTP request coming from a client reaches an ASP.NET application running in IIS, there are a variety of components to consider:</p> <ul><li><a href=\"https://learn.microsoft.com/en-us/iis/get-started/introduction-to-iis/introduction-to-iis-architecture#hypertext-transfer-protocol-stack-httpsys\"><em>HTTP.sys</em></a> runs as part of Windows. It's a kernel-mode driver that handles HTTP requests from the network, and forwards them to a worker process.</li> <li><em>Windows Process Activation Service (WAS)</em> is responsible for managing and configuration application pool configuration and worker processes.</li> <li><em>World Wide Web Publishing Service (W3SVC)</em> acts as an adapter between WAS and HTTP.sys. It is responsible for updating HTTP.sys when app pool configuration changes, and for notifying WAS when a new request is created. WAS and W3SVC run inside the same process, svchost.exe.</li> <li><em>Application pools</em> are responsible for starting worker processes for handling requests. Multiple sites can be mapped to the same application pool.</li> <li><em>Worker processes</em> are responsible for running the managed and native modules required to handle a request. As the name suggests, worker processes are separated from each other by a process boundary, running in a process called w3wp.exe. However each pool can (optionally) host <em>multiple</em> distinct sites or applications inside the same process. Additionally, a single application pool may optionally contain multiple worker process (termed a <a href=\"https://www.scholarhat.com/tutorial/tools/web-garden-and-web-farm\">web garden</a>).</li></ul> <p>The following diagram shows how the components interact in IIS, when an HTTP request is received from a client.</p> <p><img src=\"/content/images/2025/iis.svg\" alt=\"How IIS processes an HTTP request\"></p> <p>As shown in the diagram, the general flow is as follows:</p> <ol><li>A client sends a request. HTTP.sys intercepts it from the network</li> <li>HTTP.sys contacts W3SVC/WAS to retrieve configuration details for the request.</li> <li>WAS retrieves configuration information for the request, based on global configuration sources the applicationHost.config, and web.config for individual sites.</li> <li>WAS passes the app pool and site configuration to W3SVC which reconfigures HTTP.sys with the config.</li> <li>WAS starts a worker process to handle the incoming request, if one does not already exist.</li> <li>Once the worker process is running, HTTP.sys passes the request details to the worker process, which generates a response and returns it to HTTP.sys.</li> <li>HTTP.sys forwards the request to the client.</li></ol> <p>On subsequent requests, if a worker process already exists, HTTP.sys can forward the request directly to the process. If configuration changes subsequently, WAS creates a new worker process, and W2SVC updates HTTP.sys's configuration.</p> <p>Now we understand the overall process, we can consider how to configure our worker processes.</p> <h2 id=\"changing-the-environment-variables-for-a-worker-process\" class=\"heading-with-anchor\"><a href=\"#changing-the-environment-variables-for-a-worker-process\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Changing the environment variables for a worker process</a></h2> <p>As a reminder, the goal is to change the environment variables for the worker processes, <em>w3wp.exe</em>, which handle our requests. There are a variety of possible ways to do that which I'm going to run through in this post:</p> <ul><li>Set system environment variables</li> <li>Set the environment variables for the W3SVC/WAS service.</li> <li>Set environment variables at the application pool level in applicationHost.config</li></ul> <blockquote> <p>This isn't an exhaustive list. It's also possible to set environment variables for an individual application, and separately for ASP.NET Core applications. In this post I'm looking at how to set variables somewhat \"globally\".</p> </blockquote> <p>We'll start by looking at how to set system environment variables.</p> <h2 id=\"setting-system-environment-variables\" class=\"heading-with-anchor\"><a href=\"#setting-system-environment-variables\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Setting system environment variables</a></h2> <p>The \"system\" environment variables apply to <em>all</em> processes that run on your machine. Typically when you're setting variables using PowerShell you might you syntax something like the following:</p> <pre class=\"language-powershell\"><code class=\"language-powershell\"><span class=\"token variable\">$env</span>:MY_SPECIAL_KEY = <span class=\"token string\">\"Some value\"</span>\n</code></pre> <p>However, that only sets the variable for the current session, rather than setting it globally. It's actually easiest to use the <code>System.Environment</code> .NET type to set the environment variable at the system level:</p> <pre class=\"language-powershell\"><code class=\"language-powershell\"><span class=\"token namespace\">[System.Environment]</span>::SetEnvironmentVariable<span class=\"token punctuation\">(</span><span class=\"token string\">\"MY_SPECIAL_KEY\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Some value\"</span><span class=\"token punctuation\">,</span> <span class=\"token namespace\">[System.EnvironmentVariableTarget]</span>::Machine<span class=\"token punctuation\">)</span>\n</code></pre> <p>After setting the variable, we need to stop the WAS and W3SVC services so that they pick up the environment changes. The easiest way to do this is to run the following from an elevated command/PowerShell prompt:</p> <pre class=\"language-powershell\"><code class=\"language-powershell\"><span class=\"token comment\"># Stop the WAS service. This automatically stops the W3SVC service too.</span>\nnet stop <span class=\"token operator\">/</span>y was\n<span class=\"token comment\"># Restart the services, so they pick up the new variables</span>\nnet <span class=\"token function\">start</span> w3svc\n</code></pre> <p>This is arguably one of the easiest ways to set environment variables for the worker processes, but it's also the most crude. <em>Any</em> process running on the system will retrieve the environment variables, which might not be something you want to do.</p> <blockquote> <p>An easy of example of where you might <em>not</em> want to do this is if you're setting the <a href=\"https://learn.microsoft.com/en-us/dotnet/framework/unmanaged-api/profiling/profiling-overview#the-profiling-api\">.NET profiling API</a> environment variables: setting these at the system level would mean <em>every</em> .NET process on your Windows machine would be processed, which is practically certain to have a significant stability impact.</p> </blockquote> <p>Let's assume we don't want to set the variables at the system level. The next best thing is to set them for the IIS services instead.</p> <h2 id=\"setting-environment-variables-for-w3svc-and-was\" class=\"heading-with-anchor\"><a href=\"#setting-environment-variables-for-w3svc-and-was\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Setting environment variables for W3SVC and WAS</a></h2> <p>W3SVC and WAS run as Windows services, inside an instance of svchost.exe. It's possible to scope environment variables specifically to these services, but to do so, you need to edit the registry.</p> <p>You can add environment variables for a service by editing the <code>HKLM:SYSTEM\\CurrentControlSet\\Services\\&lt;SERVICE NAME&gt;</code> registry key. For example, to add an environment variable to a service called <code>SomeService</code>, you can use something like this:</p> <pre class=\"language-powershell\"><code class=\"language-powershell\"><span class=\"token function\">Set-ItemProperty</span> HKLM:SYSTEM\\CurrentControlSet\\Services\\&lt;SERVICE NAME&gt; <span class=\"token operator\">-</span>Name Environment <span class=\"token operator\">-</span>Value <span class=\"token string\">'MY_SPECIAL_KEY=Something'</span> <span class=\"token operator\">-</span><span class=\"token function\">Type</span> MultiString\n</code></pre> <blockquote> <p>Note that the above example <em>changes</em> the environment variables to the value you provide, it doesn't <em>append</em> to it. If you want to include multiple variables separate the values with a line break, e.g. <code>VAL1=1`r`nVAL2=2</code>.</p> </blockquote> <p>To update the W3SVC and WAS services to ensure they have our environment variables, we can use the following:</p> <pre class=\"language-powershell\"><code class=\"language-powershell\"><span class=\"token function\">Set-ItemProperty</span> HKLM:SYSTEM\\CurrentControlSet\\Services\\W3SVC <span class=\"token operator\">-</span>Name Environment <span class=\"token operator\">-</span>Value <span class=\"token string\">'MY_SPECIAL_KEY=Something'</span> <span class=\"token operator\">-</span><span class=\"token function\">Type</span> MultiString\n<span class=\"token function\">Set-ItemProperty</span> HKLM:SYSTEM\\CurrentControlSet\\Services\\WAS <span class=\"token operator\">-</span>Name Environment <span class=\"token operator\">-</span>Value <span class=\"token string\">'MY_SPECIAL_KEY=Something'</span> <span class=\"token operator\">-</span><span class=\"token function\">Type</span> MultiString\n</code></pre> <p>You can also do this via the Registry Editor UI. Add a new multi-string value to the key called <code>Environment</code>, and add a line in the <code>KEY=VALUE</code> format for each variable</p> <p><img src=\"/content/images/2025/iis_2.png\" alt=\"Updating the environment variables for the WAS service using the registry editor \"></p> <p>Just as when we set the system variables, this doesn't change the variables for the already-running services, so we need to stop and start them again, to ensure they pick up the values from the registry:</p> <pre class=\"language-powershell\"><code class=\"language-powershell\">net stop <span class=\"token operator\">/</span>y was\nnet <span class=\"token function\">start</span> w3svc\n</code></pre> <p>The environment variables you set on the W3SVC and WAS services are inherited by the worker processes that WAS starts, so each w3wp.exe process will have the <code>MY_SPECIAL_KEY</code> variable.</p> <p>This is better than before, in that we've limited the scope of our variable. We're now only applying it to the processes we're interested in.</p> <h2 id=\"setting-environment-variables-in-applicationhost-config\" class=\"heading-with-anchor\"><a href=\"#setting-environment-variables-in-applicationhost-config\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Setting environment variables in applicationHost.config</a></h2> <p>Configuration in IIS combines values from multiple sources: the root <em>web.config</em> file, the <em>applicationHost.config</em> file, <em>web.config</em> files for individual applications etc. I'm not going to go into great detail here, instead we're going to look at a single file: <em>applicationHost.config</em>.</p> <p><em>applicationHost.config</em> contains the definition of your app pools (among many other things) in the <code>&lt;system.applicationHost&gt;</code> section and is what WAS reads when determining how to create worker processes to handle a request. The following is a snippet from an <em>applicationHost.config</em> file that contains two application pools:</p> <pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>system.applicationHost</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>applicationPools</span><span class=\"token punctuation\">&gt;</span></span>\n\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>add</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>DefaultAppPool<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>add</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>dotnet7<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">autoStart</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">managedRuntimeVersion</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>environmentVariables</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>add</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>MY_VAL<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>1<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>environmentVariables</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>add</span><span class=\"token punctuation\">&gt;</span></span>\n\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>applicationPoolDefaults</span> <span class=\"token attr-name\">managedRuntimeVersion</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>v4.0<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>processModel</span> <span class=\"token attr-name\">identityType</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>ApplicationPoolIdentity<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">loadUserProfile</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">setProfileEnvironment</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>false<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>applicationPoolDefaults</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>applicationPools</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre> <p>This configuration defines two application pools using the <code>&lt;add&gt;</code> element:</p> <ul><li><code>DefaultAppPool</code></li> <li><code>dotnet7</code></li></ul> <p>There's also an <code>&lt;applicationPoolDefaults&gt;</code> element which, as you might expect, defines the default behaviour for application pools. individual app pools can override the default behaviour, as you can see where the <code>dotnet7</code> pool has <code>managedRuntimeVersion=\"\"</code> which corresponds to <a href=\"https://learn.microsoft.com/aspnet/core/host-and-deploy/iis/advanced#create-the-iis-site\">the recommended \"No Managed Code\" setting</a> for .NET Core apps.</p> <p>The <code>dotnet7</code> pool in the above example already defines a custom environment variables, indicated by the <a href=\"https://learn.microsoft.com/en-us/iis/configuration/system.applicationHost/applicationPools/add/environmentVariables/#appcmdexe\">nested <code>&lt;environmentVariables&gt;</code> element</a>. This ensures the <em>w3wp.exe</em> worker process also has the environment variable <code>MY_VAL=1</code>.</p> <p>If we want to add environment variables in <em>applicationHost.config</em>, we have two main options:</p> <ul><li>Add an environment variable to the <code>&lt;applicationPoolDefaults&gt;</code> element and inherit the variable in other pools.</li> <li>Add an environment variable to a specific pool, just as the <code>dotnet7</code> pool has. This <em>overrides</em> any values set in <code>&lt;applicationPoolDefaults&gt;</code>; they're <em>not</em> merged at runtime.</li></ul> <p>If we assume that we want to add the environment variable to <em>all</em> worker processes, then we may need to take <em>both</em> approaches. Adding the variable to <code>&lt;applicationPoolDefaults&gt;</code> ensures that all variables <em>without</em> additional configuration will have the environment variable. It also ensures any <em>new</em> pools created will also have the environment variable by default.</p> <p>However, if a pool separately defines its <code>&lt;environmentVariables&gt;</code>, as is the case for the <code>dotnet7</code> pool above, then we must <em>also</em> add the environment variable explicitly to this pool, as it <em>won't</em> inherit the values provided in <code>&lt;applicationPoolDefaults&gt;</code>.</p> <p>There are multiple ways we could modify the <em>applicationHost.config</em> to match our requirements. If you're feeling <em>really</em> brave, you could directly edit the <em>applicationHost.config</em> file found at <em>C:\\Windows\\System32\\inetsrv\\config\\applicationHost.config</em>, but I don't recommend it 😅 Instead I'll show how to make the changes using the IIS UI and using the <code>appcmd.exe</code> tool that comes with IIS.</p> <blockquote> <p>I recently discovered there's also an open source REST API implementation for managing IIS available here: <a href=\"https://github.com/microsoft/IIS.Administration/\">https://github.com/microsoft/IIS.Administration/</a> but I haven't tried using it yet!</p> </blockquote> <h3 id=\"using-the-iis-ui\" class=\"heading-with-anchor\"><a href=\"#using-the-iis-ui\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Using the IIS UI</a></h3> <p>The IIS UI is really… something. To make the changes we want, adding an environment variable to the <code>&lt;applicationPoolDefaults&gt;</code> element and to each of the application pools, we need to click around <em>dozens</em> of times 😅 I'll describe the flow here, but I've only included a few key screenshots:</p> <ol><li>Go to the root of the IIS Server Manager UI, and open Configuration Editor</li> <li>From the drop-down, select the <code>system.applicationHost/applicationPools</code> section:</li></ol> <p><img src=\"/content/images/2025/iis_3.png\" alt=\"Setting the system.applicationHost/applicationPools section\"></p> <ol start=\"3\"><li>Expand the <code>applicationPoolDefaults</code> element, click on <code>environmentVariables</code>, and click the ellipsis (…) on the right hand side, which opens the collection editor.</li></ol> <p><img src=\"/content/images/2025/iis_4.png\" alt=\"Editing the applicationPoolDefaults environemntVariables \"></p> <ol start=\"4\"><li>You can add environment variables to the collection by clicking <strong>Add</strong> in the right panel and entering the key and value in the lower pane.</li></ol> <p><img src=\"/content/images/2025/iis_5.png\" alt=\"Adding an environemntVariable \"></p> <ol start=\"5\"><li>Once you've added all the variables you need, close the window.</li> <li>Open the app pool collection, by clicking the ellipsis (…) on the top row where it says <strong>(Collection)</strong></li> <li>This opens the application pools list. Choose a pool to edit from the top pane.</li> <li>In the bottom pane, click on <code>environmentVariables</code>, and click the ellipsis (…) on the right hand side, which opens the collection editor.</li></ol> <p><img src=\"/content/images/2025/iis_5.png\" alt=\"Editing the environemntVariables for a specific pool \"></p> <ol start=\"9\"><li>As before, add environment variables to the collection by clicking <strong>Add</strong> in the right panel and entering the key and value in the lower pane.</li> <li>Close the environment variable collection window, and repeat steps 8 and 9 for each app pool.</li> <li>After you've made all the required changes, Close the application pool window.</li> <li>Click <strong>Apply</strong> from the right hand pane, to update the application pools and to restart all the worker processes.</li></ol> <p>After working through all these steps our <em>applicationHost.config</em> looks something like this:</p> <pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>applicationPools</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>add</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>DefaultAppPool<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>add</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>dotnet7<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">autoStart</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">managedRuntimeVersion</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>environmentVariables</span><span class=\"token punctuation\">&gt;</span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>add</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>MY_VAL<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>1<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>add</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>MY_SPECIAL_KEY<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Something<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>environmentVariables</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>add</span><span class=\"token punctuation\">&gt;</span></span>\n\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>applicationPoolDefaults</span> <span class=\"token attr-name\">managedRuntimeVersion</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>v4.0<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>processModel</span> <span class=\"token attr-name\">identityType</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>ApplicationPoolIdentity<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">loadUserProfile</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">setProfileEnvironment</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>false<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>environmentVariables</span><span class=\"token punctuation\">&gt;</span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>add</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>MY_SPECIAL_KEY<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Something<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>environmentVariables</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>applicationPoolDefaults</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>applicationPools</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre> <p>You can see that both the <code>dotnet7</code> and <code>applicationPoolDefaults</code> elements have the environment variable we want. I chose <em>not</em> to add it to <code>DefaultAppPool</code> in this case, as it inherits the default environment variables, but you could have added it there as well.</p> <p>Using the IIS UI is \"easy\" but it's definitely convoluted. A better approach is to use the command line.</p> <h3 id=\"using-appcmd-exe\" class=\"heading-with-anchor\"><a href=\"#using-appcmd-exe\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Using appcmd.exe</a></h3> <p><em>appcmd.exe</em> ships with IIS, and provides a somewhat easier way to interact with <em>applicationHost.config</em>. That said, this is still a pretty old command line program, so it's not the prettiest!</p> <p>Viewing the help for <code>appcmd.exe</code> you can see there's a <em>lot</em> you can do with it:</p> <pre class=\"language-cmd\"><code class=\"language-cmd\"><span class=\"token command\"><span class=\"token keyword\">C</span><span class=\"token label property\">:\\Windows\\System32\\inetsrv\\appcmd.exe</span> <span class=\"token parameter attr-name\">/?</span></span>\n\n<span class=\"token command\"><span class=\"token keyword\">General</span> purpose IIS command line administration tool.</span>\n\n<span class=\"token command\"><span class=\"token keyword\">APPCMD</span> (command</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token command\"><span class=\"token keyword\">object</span>-type</span><span class=\"token punctuation\">)</span> &lt;identifier&gt; &lt;/parameter1:value1 ...&gt;\n\n<span class=\"token command\"><span class=\"token keyword\">Supported</span> object types:</span>\n\n  <span class=\"token command\"><span class=\"token keyword\">SITE</span>      Administration of virtual sites</span>\n  <span class=\"token command\"><span class=\"token keyword\">APP</span>       Administration of applications</span>\n  <span class=\"token command\"><span class=\"token keyword\">VDIR</span>      Administration of virtual directories</span>\n  <span class=\"token command\"><span class=\"token keyword\">APPPOOL</span>   Administration of application pools</span>\n  <span class=\"token command\"><span class=\"token keyword\">CONFIG</span>    Administration of general configuration sections</span>\n  <span class=\"token command\"><span class=\"token keyword\">WP</span>        Administration of worker processes</span>\n  <span class=\"token command\"><span class=\"token keyword\">REQUEST</span>   Administration of HTTP requests</span>\n  <span class=\"token command\"><span class=\"token keyword\">MODULE</span>    Administration of server modules</span>\n  <span class=\"token command\"><span class=\"token keyword\">BACKUP</span>    Administration of server configuration backups</span>\n  <span class=\"token command\"><span class=\"token keyword\">TRACE</span>     Working with failed request trace logs</span>\n  <span class=\"token command\"><span class=\"token keyword\">BINDING</span>   Object for working with SSL bindings</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token command\"><span class=\"token keyword\">To</span> list commands supported by each object use /?, e.g. 'appcmd.exe site /?'</span><span class=\"token punctuation\">)</span>\n</code></pre> <p>We're going to be working with the <code>config</code> command. We can perform the same modifications as in the previous section with a single <em>large</em> command. I've broken it over multiple lines for clarity, but you should remove these before running the command yourself</p> <pre class=\"language-powershell\"><code class=\"language-powershell\">C:\\Windows\\System32\\inetsrv\\appcmd<span class=\"token punctuation\">.</span>exe <span class=\"token function\">set</span> config <span class=\"token operator\">-</span>section:system<span class=\"token punctuation\">.</span>applicationHost/applicationPools\n  <span class=\"token operator\">/</span><span class=\"token operator\">+</span><span class=\"token string\">\"[name='dotnet7'].environmentVariables.[name='MY_SPECIAL_KEY',value='Something']\"</span>\n  <span class=\"token operator\">/</span><span class=\"token operator\">+</span><span class=\"token string\">\"applicationPoolDefaults.environmentVariables.[name='MY_SPECIAL_KEY',value='Something']\"</span>\n  <span class=\"token operator\">/</span>commit:apphost<span class=\"token punctuation\">;</span>\n</code></pre> <p>Note that the above command <em>adds</em> the environment variables if they don't exist, but it will fail if the variables already exist. To <em>update</em> an existing value, you should use syntax similar to the following:</p> <pre class=\"language-powershell\"><code class=\"language-powershell\">C:\\Windows\\System32\\inetsrv\\appcmd<span class=\"token punctuation\">.</span>exe <span class=\"token function\">set</span> config <span class=\"token operator\">-</span>section:system<span class=\"token punctuation\">.</span>applicationHost/applicationPools\n  <span class=\"token operator\">/</span><span class=\"token string\">\"[name='dotnet7'].environmentVariables.[name='MY_SPECIAL_KEY'].value:'Something'\"</span>\n  <span class=\"token operator\">/</span><span class=\"token string\">\"applicationPoolDefaults.environmentVariables.[name='MY_SPECIAL_KEY'].value:'Something'\"</span>\n  <span class=\"token operator\">/</span>commit:apphost<span class=\"token punctuation\">;</span>\n</code></pre> <p>The differences in the above command are subtle:</p> <ul><li>Use <code>/+</code> to <em>add</em> a value; use <code>/</code> when updating a variable</li> <li>When adding a new environment variable, define both the <code>name</code> and <code>value</code> attributes in an array</li> <li>When updating the value of an existing environment variable, use <code>.value:'&lt;VALUE&gt;'</code></li></ul> <blockquote> <p>It took me a while to figure out the syntax for how to <em>update</em> these values when they already exist. If it wasn't for <a href=\"https://blogs.iis.net/eokim/understanding-appcmd-exe-list-set-config-configurationpath-section-name-parameter-name-value\">this guide</a> I would probably have given up entirely 😅</p> </blockquote> <p>Theoretically, this blog should be finished, but I wanted to show just one more \"trick\", and that's how to avoid automatically restarting your worker pools when you update <em>applicationHost.config</em>.</p> <h2 id=\"avoiding-app-pool-restarts-on-configuration-changes\" class=\"heading-with-anchor\"><a href=\"#avoiding-app-pool-restarts-on-configuration-changes\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Avoiding app-pool restarts on configuration changes</a></h2> <p>By default, whenever you make changes to <em>applicationhost.config</em>, your app pools will be restarted. This makes sense: if you've made a change to configuration, you <em>probably</em> want the new configuration to be applied as soon as possible.</p> <p>However, restarting an application pool might result in down time for your application, if requests arrive and cannot be serviced while the worker process is being killed and restarted. In some cases you don't need the configuration to be applied <em>immediately</em> and might be willing to wait until the app pool is restarted \"naturally\", when a new version of the app is deployed for example.</p> <p>The <code>&lt;environmentVariables&gt;</code> element nested inside <code>&lt;applicationPools&gt;</code> has a sibling element, <code>&lt;recycling&gt;</code> which controls some of the characteristics of application pool recycling. Of particular interest to us is the <code>disallowRotationOnConfigChange</code> attribute, which exists on both individual app pools and on <code>&lt;applicationPoolDefaults&gt;</code>:</p> <pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>applicationPools</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>add</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>DefaultAppPool<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>add</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>dotnet7<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">autoStart</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">managedRuntimeVersion</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>environmentVariables</span><span class=\"token punctuation\">&gt;</span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>add</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>MY_SPECIAL_KEY<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token punctuation\">'</span>Something<span class=\"token punctuation\">'</span><span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>environmentVariables</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token comment\">&lt;!-- 👇 Pool-specific recycling settings --&gt;</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>recycling</span> <span class=\"token attr-name\">disallowRotationOnConfigChange</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>false<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>add</span><span class=\"token punctuation\">&gt;</span></span>\n\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>applicationPoolDefaults</span> <span class=\"token attr-name\">managedRuntimeVersion</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>v4.0<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>processModel</span> <span class=\"token attr-name\">identityType</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>ApplicationPoolIdentity<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">loadUserProfile</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">setProfileEnvironment</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>false<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>environmentVariables</span><span class=\"token punctuation\">&gt;</span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>add</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>MY_SPECIAL_KEY<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token punctuation\">'</span>Something<span class=\"token punctuation\">'</span><span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>environmentVariables</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token comment\">&lt;!-- 👇 Default recycling settings for pools that don't override --&gt;</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>recycling</span> <span class=\"token attr-name\">disallowRotationOnConfigChange</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>applicationPoolDefaults</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>applicationPools</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre> <p><code>disallowRotationOnConfigChange</code> defaults to <code>false</code>. This means that when when the configuration of an application pool changes, the W3SVC service causes the worker process with the old configuration to be shut down. A new worker process, which uses the new configuration, is created in its place.</p> <p>If you set <code>disallowRotationOnConfigChange</code> to <code>true</code>, this rotation no longer happens. The worker process with the old configuration keeps running and handling requests. The next time the app pool is recycled for some reason, the worker process will naturally pick up the new configuration.</p> <p>Interestingly, changing the value of this property <em>doesn't</em> trigger a configuration change itself, whether you're setting the value to <code>true</code> or <code>false</code>. This provides a mechanism for <em>temporarily</em> disabling the recycling, for a specific configuration change, by temporarily enabling recycling. For example, we could add our variables while also <em>not</em> forcing recycling, using something like the following:</p> <pre class=\"language-powershell\"><code class=\"language-powershell\">C:\\Windows\\System32\\inetsrv\\appcmd<span class=\"token punctuation\">.</span>exe <span class=\"token function\">set</span> config <span class=\"token operator\">-</span>section:system<span class=\"token punctuation\">.</span>applicationHost/applicationPools\n  <span class=\"token operator\">/</span><span class=\"token string\">\"[name='dotnet7'].recycling.disallowRotationOnConfigChange:true\"</span>\n  <span class=\"token operator\">/</span><span class=\"token string\">\"applicationPoolDefaults.recycling.disallowRotationOnConfigChange:true\"</span>\n  <span class=\"token operator\">/</span><span class=\"token operator\">+</span><span class=\"token string\">\"[name='dotnet7'].environmentVariables.[name='MY_SPECIAL_KEY',value='Something']\"</span>\n  <span class=\"token operator\">/</span><span class=\"token operator\">+</span><span class=\"token string\">\"applicationPoolDefaults.environmentVariables.[name='MY_SPECIAL_KEY',value='Something']\"</span>\n  <span class=\"token operator\">/</span>commit:apphost<span class=\"token punctuation\">;</span>\n</code></pre> <p>This applies the configuration without restarting the app pool. We can then restore the original behaviour subsequently by setting the property to <code>false</code>:</p> <pre class=\"language-powershell\"><code class=\"language-powershell\">C:\\Windows\\System32\\inetsrv\\appcmd<span class=\"token punctuation\">.</span>exe <span class=\"token function\">set</span> config <span class=\"token operator\">-</span>section:system<span class=\"token punctuation\">.</span>applicationHost/applicationPools\n  <span class=\"token operator\">/</span><span class=\"token string\">\"[name='dotnet7'].recycling.disallowRotationOnConfigChange:false\"</span>\n  <span class=\"token operator\">/</span><span class=\"token string\">\"applicationPoolDefaults.recycling.disallowRotationOnConfigChange:false\"</span>\n  <span class=\"token operator\">/</span>commit:apphost<span class=\"token punctuation\">;</span>\n</code></pre> <p>And with that we have a mechanism for applying configurations with restarts. It feels like a bit of a hack, but hey, it works!</p> <h2 id=\"summary\" class=\"heading-with-anchor\"><a href=\"#summary\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Summary</a></h2> <p>In this post I began by describing the basic architecture of IIS and some of its components, such as HTTP.sys, W3SVC and WAS. I then described some of the ways to apply environment variables to IIS worker processes, starting with setting system environment variables, followed by setting service-level variables to W3SVC and WAS, and finally using <em>applicationHost.config</em> to add environment variables either to the application pool defaults or to specific application pools.</p> <p>As a bonus, I showed how you can use the <code>recycling.disallowRotationOnConfigChange</code> attribute to prevent application pools from restarting automatically when you change its configuration.</p> ",
    "sanitized": "I recently needed to set some environment variables for an application that was running in IIS on Windows. It turns out there's lots of different ways to do that. In this post, I describe some of the many ways to do that, both from the Windows and IIS UI and from the command line. For each approach I describe the caveats, advantages, and disadvantages. How does IIS work? IIS is a huge beast, with decades of legacy, but to understand how to control setting environment variables for an application, it helps to have a basic understanding of how IIS works under the hood. This introduction to IIS on Microsoft Learn provides a good overview, including the interaction between the main components involved. If we consider how an HTTP request coming from a client reaches an ASP.NET application running in IIS, there are a variety of components to consider: HTTP.sys runs as part of Windows. It's a kernel-mode driver that handles HTTP requests from the network, and forwards them to a worker process. Windows Process Activation Service (WAS) is responsible for managing and configuration application pool configuration and worker processes. World Wide Web Publishing Service (W3SVC) acts as an adapter between WAS and HTTP.sys. It is responsible for updating HTTP.sys when app pool configuration changes, and for notifying WAS when a new request is created. WAS and W3SVC run inside the same process, svchost.exe. Application pools are responsible for starting worker processes for handling requests. Multiple sites can be mapped to the same application pool. Worker processes are responsible for running the managed and native modules required to handle a request. As the name suggests, worker processes are separated from each other by a process boundary, running in a process called w3wp.exe. However each pool can (optionally) host multiple distinct sites or applications inside the same process. Additionally, a single application pool may optionally contain multiple worker process (termed a web garden). The following diagram shows how the components interact in IIS, when an HTTP request is received from a client.  As shown in the diagram, the general flow is as follows: A client sends a request. HTTP.sys intercepts it from the network HTTP.sys contacts W3SVC/WAS to retrieve configuration details for the request. WAS retrieves configuration information for the request, based on global configuration sources the applicationHost.config, and web.config for individual sites. WAS passes the app pool and site configuration to W3SVC which reconfigures HTTP.sys with the config. WAS starts a worker process to handle the incoming request, if one does not already exist. Once the worker process is running, HTTP.sys passes the request details to the worker process, which generates a response and returns it to HTTP.sys. HTTP.sys forwards the request to the client. On subsequent requests, if a worker process already exists, HTTP.sys can forward the request directly to the process. If configuration changes subsequently, WAS creates a new worker process, and W2SVC updates HTTP.sys's configuration. Now we understand the overall process, we can consider how to configure our worker processes. Changing the environment variables for a worker process As a reminder, the goal is to change the environment variables for the worker processes, w3wp.exe, which handle our requests. There are a variety of possible ways to do that which I'm going to run through in this post: Set system environment variables Set the environment variables for the W3SVC/WAS service. Set environment variables at the application pool level in applicationHost.config  This isn't an exhaustive list. It's also possible to set environment variables for an individual application, and separately for ASP.NET Core applications. In this post I'm looking at how to set variables somewhat \"globally\".  We'll start by looking at how to set system environment variables. Setting system environment variables The \"system\" environment variables apply to all processes that run on your machine. Typically when you're setting variables using PowerShell you might you syntax something like the following: $env:MY_SPECIAL_KEY = \"Some value\"\n However, that only sets the variable for the current session, rather than setting it globally. It's actually easiest to use the System.Environment .NET type to set the environment variable at the system level: [System.Environment]::SetEnvironmentVariable(\"MY_SPECIAL_KEY\", \"Some value\", [System.EnvironmentVariableTarget]::Machine)\n After setting the variable, we need to stop the WAS and W3SVC services so that they pick up the environment changes. The easiest way to do this is to run the following from an elevated command/PowerShell prompt: # Stop the WAS service. This automatically stops the W3SVC service too.\nnet stop /y was\n# Restart the services, so they pick up the new variables\nnet start w3svc\n This is arguably one of the easiest ways to set environment variables for the worker processes, but it's also the most crude. Any process running on the system will retrieve the environment variables, which might not be something you want to do.  An easy of example of where you might not want to do this is if you're setting the .NET profiling API environment variables: setting these at the system level would mean every .NET process on your Windows machine would be processed, which is practically certain to have a significant stability impact.  Let's assume we don't want to set the variables at the system level. The next best thing is to set them for the IIS services instead. Setting environment variables for W3SVC and WAS W3SVC and WAS run as Windows services, inside an instance of svchost.exe. It's possible to scope environment variables specifically to these services, but to do so, you need to edit the registry. You can add environment variables for a service by editing the HKLM:SYSTEM\\CurrentControlSet\\Services\\<SERVICE NAME> registry key. For example, to add an environment variable to a service called SomeService, you can use something like this: Set-ItemProperty HKLM:SYSTEM\\CurrentControlSet\\Services\\<SERVICE NAME> -Name Environment -Value 'MY_SPECIAL_KEY=Something' -Type MultiString\n  Note that the above example changes the environment variables to the value you provide, it doesn't append to it. If you want to include multiple variables separate the values with a line break, e.g. VAL1=1`r`nVAL2=2.  To update the W3SVC and WAS services to ensure they have our environment variables, we can use the following: Set-ItemProperty HKLM:SYSTEM\\CurrentControlSet\\Services\\W3SVC -Name Environment -Value 'MY_SPECIAL_KEY=Something' -Type MultiString\nSet-ItemProperty HKLM:SYSTEM\\CurrentControlSet\\Services\\WAS -Name Environment -Value 'MY_SPECIAL_KEY=Something' -Type MultiString\n You can also do this via the Registry Editor UI. Add a new multi-string value to the key called Environment, and add a line in the KEY=VALUE format for each variable  Just as when we set the system variables, this doesn't change the variables for the already-running services, so we need to stop and start them again, to ensure they pick up the values from the registry: net stop /y was\nnet start w3svc\n The environment variables you set on the W3SVC and WAS services are inherited by the worker processes that WAS starts, so each w3wp.exe process will have the MY_SPECIAL_KEY variable. This is better than before, in that we've limited the scope of our variable. We're now only applying it to the processes we're interested in. Setting environment variables in applicationHost.config Configuration in IIS combines values from multiple sources: the root web.config file, the applicationHost.config file, web.config files for individual applications etc. I'm not going to go into great detail here, instead we're going to look at a single file: applicationHost.config. applicationHost.config contains the definition of your app pools (among many other things) in the <system.applicationHost> section and is what WAS reads when determining how to create worker processes to handle a request. The following is a snippet from an applicationHost.config file that contains two application pools: <system.applicationHost>\n  <applicationPools>\n\n    <add name=\"DefaultAppPool\" />\n    <add name=\"dotnet7\" autoStart=\"true\" managedRuntimeVersion=\"\">\n      <environmentVariables>\n        <add name=\"MY_VAL\" value=\"1\" />\n      </environmentVariables>\n    </add>\n\n    <applicationPoolDefaults managedRuntimeVersion=\"v4.0\">\n      <processModel identityType=\"ApplicationPoolIdentity\" loadUserProfile=\"true\" setProfileEnvironment=\"false\" />\n    </applicationPoolDefaults>\n  </applicationPools>\n This configuration defines two application pools using the <add> element: DefaultAppPool dotnet7 There's also an <applicationPoolDefaults> element which, as you might expect, defines the default behaviour for application pools. individual app pools can override the default behaviour, as you can see where the dotnet7 pool has managedRuntimeVersion=\"\" which corresponds to the recommended \"No Managed Code\" setting for .NET Core apps. The dotnet7 pool in the above example already defines a custom environment variables, indicated by the nested <environmentVariables> element. This ensures the w3wp.exe worker process also has the environment variable MY_VAL=1. If we want to add environment variables in applicationHost.config, we have two main options: Add an environment variable to the <applicationPoolDefaults> element and inherit the variable in other pools. Add an environment variable to a specific pool, just as the dotnet7 pool has. This overrides any values set in <applicationPoolDefaults>; they're not merged at runtime. If we assume that we want to add the environment variable to all worker processes, then we may need to take both approaches. Adding the variable to <applicationPoolDefaults> ensures that all variables without additional configuration will have the environment variable. It also ensures any new pools created will also have the environment variable by default. However, if a pool separately defines its <environmentVariables>, as is the case for the dotnet7 pool above, then we must also add the environment variable explicitly to this pool, as it won't inherit the values provided in <applicationPoolDefaults>. There are multiple ways we could modify the applicationHost.config to match our requirements. If you're feeling really brave, you could directly edit the applicationHost.config file found at C:\\Windows\\System32\\inetsrv\\config\\applicationHost.config, but I don't recommend it 😅 Instead I'll show how to make the changes using the IIS UI and using the appcmd.exe tool that comes with IIS.  I recently discovered there's also an open source REST API implementation for managing IIS available here: https://github.com/microsoft/IIS.Administration/ but I haven't tried using it yet!  Using the IIS UI The IIS UI is really… something. To make the changes we want, adding an environment variable to the <applicationPoolDefaults> element and to each of the application pools, we need to click around dozens of times 😅 I'll describe the flow here, but I've only included a few key screenshots: Go to the root of the IIS Server Manager UI, and open Configuration Editor From the drop-down, select the system.applicationHost/applicationPools section:  Expand the applicationPoolDefaults element, click on environmentVariables, and click the ellipsis (…) on the right hand side, which opens the collection editor.  You can add environment variables to the collection by clicking Add in the right panel and entering the key and value in the lower pane.  Once you've added all the variables you need, close the window. Open the app pool collection, by clicking the ellipsis (…) on the top row where it says (Collection) This opens the application pools list. Choose a pool to edit from the top pane. In the bottom pane, click on environmentVariables, and click the ellipsis (…) on the right hand side, which opens the collection editor.  As before, add environment variables to the collection by clicking Add in the right panel and entering the key and value in the lower pane. Close the environment variable collection window, and repeat steps 8 and 9 for each app pool. After you've made all the required changes, Close the application pool window. Click Apply from the right hand pane, to update the application pools and to restart all the worker processes. After working through all these steps our applicationHost.config looks something like this: <applicationPools>\n  <add name=\"DefaultAppPool\" />\n  <add name=\"dotnet7\" autoStart=\"true\" managedRuntimeVersion=\"\">\n    <environmentVariables>\n      <add name=\"MY_VAL\" value=\"1\" />\n      <add name=\"MY_SPECIAL_KEY\" value=\"Something\" />\n    </environmentVariables>\n  </add>\n\n  <applicationPoolDefaults managedRuntimeVersion=\"v4.0\">\n    <processModel identityType=\"ApplicationPoolIdentity\" loadUserProfile=\"true\" setProfileEnvironment=\"false\" />\n    <environmentVariables>\n      <add name=\"MY_SPECIAL_KEY\" value=\"Something\" />\n    </environmentVariables>\n  </applicationPoolDefaults>\n</applicationPools>\n You can see that both the dotnet7 and applicationPoolDefaults elements have the environment variable we want. I chose not to add it to DefaultAppPool in this case, as it inherits the default environment variables, but you could have added it there as well. Using the IIS UI is \"easy\" but it's definitely convoluted. A better approach is to use the command line. Using appcmd.exe appcmd.exe ships with IIS, and provides a somewhat easier way to interact with applicationHost.config. That said, this is still a pretty old command line program, so it's not the prettiest! Viewing the help for appcmd.exe you can see there's a lot you can do with it: C:\\Windows\\System32\\inetsrv\\appcmd.exe /?\n\nGeneral purpose IIS command line administration tool.\n\nAPPCMD (command) (object-type) <identifier> </parameter1:value1 ...>\n\nSupported object types:\n\n  SITE      Administration of virtual sites\n  APP       Administration of applications\n  VDIR      Administration of virtual directories\n  APPPOOL   Administration of application pools\n  CONFIG    Administration of general configuration sections\n  WP        Administration of worker processes\n  REQUEST   Administration of HTTP requests\n  MODULE    Administration of server modules\n  BACKUP    Administration of server configuration backups\n  TRACE     Working with failed request trace logs\n  BINDING   Object for working with SSL bindings\n\n(To list commands supported by each object use /?, e.g. 'appcmd.exe site /?')\n We're going to be working with the config command. We can perform the same modifications as in the previous section with a single large command. I've broken it over multiple lines for clarity, but you should remove these before running the command yourself C:\\Windows\\System32\\inetsrv\\appcmd.exe set config -section:system.applicationHost/applicationPools\n  /+\"[name='dotnet7'].environmentVariables.[name='MY_SPECIAL_KEY',value='Something']\"\n  /+\"applicationPoolDefaults.environmentVariables.[name='MY_SPECIAL_KEY',value='Something']\"\n  /commit:apphost;\n Note that the above command adds the environment variables if they don't exist, but it will fail if the variables already exist. To update an existing value, you should use syntax similar to the following: C:\\Windows\\System32\\inetsrv\\appcmd.exe set config -section:system.applicationHost/applicationPools\n  /\"[name='dotnet7'].environmentVariables.[name='MY_SPECIAL_KEY'].value:'Something'\"\n  /\"applicationPoolDefaults.environmentVariables.[name='MY_SPECIAL_KEY'].value:'Something'\"\n  /commit:apphost;\n The differences in the above command are subtle: Use /+ to add a value; use / when updating a variable When adding a new environment variable, define both the name and value attributes in an array When updating the value of an existing environment variable, use .value:'<VALUE>'  It took me a while to figure out the syntax for how to update these values when they already exist. If it wasn't for this guide I would probably have given up entirely 😅  Theoretically, this blog should be finished, but I wanted to show just one more \"trick\", and that's how to avoid automatically restarting your worker pools when you update applicationHost.config. Avoiding app-pool restarts on configuration changes By default, whenever you make changes to applicationhost.config, your app pools will be restarted. This makes sense: if you've made a change to configuration, you probably want the new configuration to be applied as soon as possible. However, restarting an application pool might result in down time for your application, if requests arrive and cannot be serviced while the worker process is being killed and restarted. In some cases you don't need the configuration to be applied immediately and might be willing to wait until the app pool is restarted \"naturally\", when a new version of the app is deployed for example. The <environmentVariables> element nested inside <applicationPools> has a sibling element, <recycling> which controls some of the characteristics of application pool recycling. Of particular interest to us is the disallowRotationOnConfigChange attribute, which exists on both individual app pools and on <applicationPoolDefaults>: <applicationPools>\n  <add name=\"DefaultAppPool\" />\n  <add name=\"dotnet7\" autoStart=\"true\" managedRuntimeVersion=\"\">\n    <environmentVariables>\n      <add name=\"MY_SPECIAL_KEY\" value=\"'Something'\" />\n    </environmentVariables>\n    <!-- 👇 Pool-specific recycling settings -->\n    <recycling disallowRotationOnConfigChange=\"false\" />\n  </add>\n\n  <applicationPoolDefaults managedRuntimeVersion=\"v4.0\">\n    <processModel identityType=\"ApplicationPoolIdentity\" loadUserProfile=\"true\" setProfileEnvironment=\"false\" />\n    <environmentVariables>\n      <add name=\"MY_SPECIAL_KEY\" value=\"'Something'\" />\n    </environmentVariables>\n    <!-- 👇 Default recycling settings for pools that don't override -->\n    <recycling disallowRotationOnConfigChange=\"true\" />\n  </applicationPoolDefaults>\n</applicationPools>\n disallowRotationOnConfigChange defaults to false. This means that when when the configuration of an application pool changes, the W3SVC service causes the worker process with the old configuration to be shut down. A new worker process, which uses the new configuration, is created in its place. If you set disallowRotationOnConfigChange to true, this rotation no longer happens. The worker process with the old configuration keeps running and handling requests. The next time the app pool is recycled for some reason, the worker process will naturally pick up the new configuration. Interestingly, changing the value of this property doesn't trigger a configuration change itself, whether you're setting the value to true or false. This provides a mechanism for temporarily disabling the recycling, for a specific configuration change, by temporarily enabling recycling. For example, we could add our variables while also not forcing recycling, using something like the following: C:\\Windows\\System32\\inetsrv\\appcmd.exe set config -section:system.applicationHost/applicationPools\n  /\"[name='dotnet7'].recycling.disallowRotationOnConfigChange:true\"\n  /\"applicationPoolDefaults.recycling.disallowRotationOnConfigChange:true\"\n  /+\"[name='dotnet7'].environmentVariables.[name='MY_SPECIAL_KEY',value='Something']\"\n  /+\"applicationPoolDefaults.environmentVariables.[name='MY_SPECIAL_KEY',value='Something']\"\n  /commit:apphost;\n This applies the configuration without restarting the app pool. We can then restore the original behaviour subsequently by setting the property to false: C:\\Windows\\System32\\inetsrv\\appcmd.exe set config -section:system.applicationHost/applicationPools\n  /\"[name='dotnet7'].recycling.disallowRotationOnConfigChange:false\"\n  /\"applicationPoolDefaults.recycling.disallowRotationOnConfigChange:false\"\n  /commit:apphost;\n And with that we have a mechanism for applying configurations with restarts. It feels like a bit of a hack, but hey, it works! Summary In this post I began by describing the basic architecture of IIS and some of its components, such as HTTP.sys, W3SVC and WAS. I then described some of the ways to apply environment variables to IIS worker processes, starting with setting system environment variables, followed by setting service-level variables to W3SVC and WAS, and finally using applicationHost.config to add environment variables either to the application pool defaults or to specific application pools. As a bonus, I showed how you can use the recycling.disallowRotationOnConfigChange attribute to prevent application pools from restarting automatically when you change its configuration."
  },
  {
    "itemId": "https://andrewlock.net/preventing-client-side-cross-site-scripting-vulnerabilities-with-trusted-types/",
    "raw": "<img src=\"https://andrewlock.net/content/images/2025/trusted_types_banner.png\" /><p>In this post I describe how to use the Trusted Types directive as part of <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP\">the Content-Security-Policy (CSP) feature</a> to prevent against cross-site-scripting (XSS) attacks. I'll start by demonstrating how a cross-site scripting attack works, focusing on client-side, DOM-based attacks using dangerous APIs.</p> <p>After demonstrating the issue, I'll show how you can use Trusted Types to close the vulnerabilities in these APIs, and how Trusted Types work. After closing these vulnerabilities, I'll show several ways to work Trusted Types: by using safe APIs, by using sanitisation libraries, and by creating Trusted Types using policies.</p> <blockquote> <p>It's worth noting that the Trusted Types API is currently only available in Chromium based browsers, but it has been available in Chromium since version 83, released in 2020.</p> </blockquote> <h2 id=\"dom-based-client-side-cross-site-scripting\" class=\"heading-with-anchor\"><a href=\"#dom-based-client-side-cross-site-scripting\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">DOM-based client-side cross-site-scripting</a></h2> <p>Cross-site-scripting generally occurs where you allow input from a user to be directly written, unsanitised, into an HTML page in some way. This can occur in server side apps when generating HTML, for example if you use the <code>@Html.Raw()</code> method in Razor.</p> <p>A similar vulnerability exists on the client-side if you allow user data to be written unsanitised into the DOM. This input could come from a URL parameter or <code>postMessage</code> channel for example, and it becomes problematic if you use it directly in some APIs like <a href=\"https://developer.mozilla.org/docs/Web/API/Element/innerHTML\"><code>Element.innerHTML</code></a>, <code>eval</code>, or <code>setTimeout</code>, for example.</p> <p>To demonstrate the issue, The following shows part of a very simple HTML page returned from an ASP.NET Core app. It contains a single \"target\" <code>&lt;div&gt;</code> element which initially contains some text to be replaced. There is also a simple <code>&lt;script&gt;</code> block which reads a <code>username</code> parameter from the URL's querystring, and writes the name as an <code>&lt;h1&gt;</code> tag using the <code>innerHTML</code> property.</p> <blockquote> <p>Remember, this code contains an XSS vulnerability, it's just for demo purposes!</p> </blockquote> <pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>target<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>To be replaced<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text/javascript<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n    const urlParams = new URLSearchParams(window.location.search);\n    const username = urlParams.get('username') || 'no user';\n    \n    // set the username\n    const target = document.getElementById('target');\n    const inner = '<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">&gt;</span></span>' + username + '<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span>';\n    target.innerHTML = inner;\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre> <p>The innocuous case where the user enters a simple name doesn't show any obvious issues:</p> <p><img src=\"/content/images/2025/trusted_types_01.png\" alt=\"An example that seems innocuous\"></p> <p>However, this code contains a severe XSS vulnerability. An attacker could force a user to travel to a URL something like the following:</p> <pre><code>http://localhost:5000/?username=&lt;img src=x onerror=\"alert('XSS Attack')\"&gt;\n</code></pre> <p>This querystring demonstrates that the code contains a clear XSS. When you hit this page:</p> <ul><li>The querystring is read from the URL as <code>&lt;img src=x onerror=\"alert('XSS Attack')\"&gt;</code>.</li> <li>It's combined with the <code>&lt;h1&gt;</code> to give <code>&lt;h1&gt;&lt;img src=x onerror=\"alert('XSS Attack')\"&gt;&lt;/h1&gt;</code>.</li> <li>It's inserted into the target <code>&lt;div&gt;</code>.</li> <li>The <code>&lt;img&gt;</code> tag attempts to load the src <code>x</code>, which obviously fails.</li> <li>The <code>onerror</code> event fires, executing the XSS attack!</li></ul> <blockquote> <p>The attack may seem a bit convoluted, and it is, but that's because there are basic protections to prevent the simplest XSS attacks; <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Element/innerHTML\"><code>&lt;script&gt;</code> tags added via <code>innerHTML</code> are not executed automatically</a>.</p> </blockquote> <p>The following is the result: the <code>alert</code> executes demonstrating the attack.</p> <p><img src=\"/content/images/2025/trusted_types_02.png\" alt=\"An example that demonstrates executing scripts finding its way into the DOM\"></p> <p>Using <code>innerHTML</code> as shown above opens yourself up to XSS vulnerabilities, but auditing everywhere that uses the API can be difficult, especially if it's used inside a library somewhere. Luckily, there's a way to protect yourself using CSP.</p> <h2 id=\"blocking-cross-site-scripting-with-trusted-types-and-a-content-security-policy\" class=\"heading-with-anchor\"><a href=\"#blocking-cross-site-scripting-with-trusted-types-and-a-content-security-policy\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Blocking cross-site-scripting with Trusted Types and a Content-Security-Policy</a></h2> <p>One of the most important security feature for modern applications is <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP\">the <code>Content-Security-Policy</code> (CSP)</a>. CSP is typically added as a header, but it can also be added as a <code>&lt;meta&gt;</code> element. CSP provides a whole swathe of features, such as forcing requests to use <code>https</code> instead of <code>http</code>, only allowing connections to specific hosts and resources, only allowing scripts that match a specific hash, and a variety of other options.</p> <p>The feature I'm using in this post is based on <a href=\"https://www.w3.org/TR/trusted-types/\">a draft W3C specification called Trusted Types</a>. In particular, you can add the <code>require-trusted-types-for</code> directive to your CSP.</p> <p>My security headers library, <a href=\"https://www.nuget.org/packages/NetEscapades.AspNetCore.SecurityHeaders\"><em>NetEscapades.AspNetCore.SecurityHeaders</em></a> can help you build a CSP and add it as a header to your ASP.NET Core responses. The following very basic configuration adds a simply Trusted Types directive to the CSP for the app:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> builder <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">WebApplication<span class=\"token punctuation\">.</span>CreateBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> app <span class=\"token operator\">=</span> builder<span class=\"token punctuation\">.</span><span class=\"token function\">Build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Configure the policy</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">UseSecurityHeaders</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">HeaderPolicyCollection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">AddContentSecurityPolicy</span><span class=\"token punctuation\">(</span>builder <span class=\"token operator\">=&gt;</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// Add require-trusted-types-for 'script' header</span>\n        builder<span class=\"token punctuation\">.</span><span class=\"token function\">AddRequireTrustedTypesFor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Script</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// other configuration</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">Run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre> <p>This adds a header like the following to the response:</p> <pre class=\"language-http\"><code class=\"language-http\"><span class=\"token header\"><span class=\"token header-name keyword\">Content-Security-Policy</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">require-trusted-types-for 'script'</span></span>\n</code></pre> <p>And now if we try to exploit the <code>innerHTML</code> API, we are magically protected:</p> <p><img src=\"/content/images/2025/trusted_types_03.png\" alt=\"Showing trusted-types protections using a CSP\"></p> <p>The screenshot above shows that the document requires <code>TrustedHTML</code> assignment, and that assigning <code>innerHTML</code> has failed completely. The attack has been thwarted!</p> <p>So <em>how</em> does the CSP header protect you?</p> <p>As you can see from the log messages, when you return a CSP with the <code>require-trusted-types-for 'Script'</code> directive, you put the browser into a different mode, in which the standard APIs no longer accept simple <code>string</code> values. Instead, APIs like <code>innerHTML</code> must be passed a <code>TrustedHTML</code> object; APIs like <code>eval</code> must be used with a <code>TrustedScript</code> object; and APIs like setting a <code>&lt;script src&gt;</code> must be used with <code>TrustedScriptURL</code>.</p> <h2 id=\"fixing-trusted-type-violations\" class=\"heading-with-anchor\"><a href=\"#fixing-trusted-type-violations\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Fixing trusted type violations</a></h2> <p>By changing the type accepted by these APIs (also called <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Trusted_Types_API#injection_sinks\">\"injection sinks\"</a>), you're safe from simple injection attacks, but presumably you <em>do</em> want to call those APIs, or at least achieve the same functionality. In this section I'll show a couple of options.</p> <h3 id=\"avoiding-problematic-apis\" class=\"heading-with-anchor\"><a href=\"#avoiding-problematic-apis\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Avoiding problematic APIs</a></h3> <p>In this section, I'll assume that you want to display the username passed in the querystring, but in a <em>safe</em> way. The following snippet shows how you can use <code>createElement</code>, <code>textContent</code>, and <code>appendChild</code> instead of the dangerous <code>innerHTML</code> API:</p> <pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> urlParams <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">URLSearchParams</span><span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">.</span>location<span class=\"token punctuation\">.</span>search<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> username <span class=\"token operator\">=</span> urlParams<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'username'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token string\">'no user'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> target <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'target'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Use createElement to create a DOM element, and set the text</span>\n<span class=\"token keyword\">const</span> h1 <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'h1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nh1<span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">=</span> username<span class=\"token punctuation\">;</span>\ntarget<span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\ntarget<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>h1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre> <p>With this change, the page is functioning again, this time <em>without</em> exposing any CSS vectors, and without any errors:</p> <p><img src=\"/content/images/2025/trusted_types_04.png\" alt=\"An example that shows a safe way to add to the DOM using safe APIs\"></p> <p>Unfortunately, it's not always possible to refactor your code in this way.</p> <h3 id=\"using-a-sanitisation-library\" class=\"heading-with-anchor\"><a href=\"#using-a-sanitisation-library\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Using a sanitisation library</a></h3> <p>The approach in the previous section is safest, as it uses inherently safe APIs, but it's unfortunately not always possible. For example, perhaps you <em>want</em> people to be able to provide <em>safe</em> HTML to include in the DOM.</p> <p>In this section, I show how you can use a sanitisation library to create a <code>TrustedHTML</code> type that you can pass directly to the <code>innerHTML</code> setter.</p> <blockquote> <p>Using a sanitisation library is obviously only as \"safe\" as the library itself. If there's a bug or workaround in the sanitisation library, then you may still be vulnerable despite using Trusted Types.</p> </blockquote> <p>In this example I'm using <a href=\"https://github.com/cure53/DOMPurify\">DOMPurify</a>, an XSS sanitiser library. There are many ways to use this library, but in this example I add a link to the script directly:</p> <pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://cdnjs.cloudflare.com/ajax/libs/dompurify/3.2.3/purify.min.js<span class=\"token punctuation\">\"</span></span>\n    <span class=\"token attr-name\">integrity</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>sha512-Ll+TuDvrWDNNRnFFIM8dOiw7Go7dsHyxRp4RutiIFW/wm3DgDmCnRZow6AqbXnCbpWu93yM1O34q+4ggzGeXVA==<span class=\"token punctuation\">\"</span></span>\n    <span class=\"token attr-name\">crossorigin</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>anonymous<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">referrerpolicy</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>no-referrer<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre> <p>And then call <code>DOMPurify.sanitize()</code> on the potentially vulnerable HTML, <a href=\"https://github.com/cure53/DOMPurify?tab=readme-ov-file#what-about-dompurify-and-trusted-types\">enabling the Trusted Type support</a>:</p> <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> urlParams <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">URLSearchParams</span><span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">.</span>location<span class=\"token punctuation\">.</span>search<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> username <span class=\"token operator\">=</span> urlParams<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'username'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token string\">'no user'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> target <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'target'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> inner <span class=\"token operator\">=</span> <span class=\"token string\">'&lt;h1&gt;'</span> <span class=\"token operator\">+</span> username <span class=\"token operator\">+</span> <span class=\"token string\">'&lt;/h1&gt;'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Create a \"cleaned\" version, which returns a TrustedHTML object</span>\n<span class=\"token keyword\">const</span> cleaned <span class=\"token operator\">=</span> DOMPurify<span class=\"token punctuation\">.</span><span class=\"token function\">sanitize</span><span class=\"token punctuation\">(</span>inner<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token constant\">RETURN_TRUSTED_TYPE</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ntarget<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> cleaned<span class=\"token punctuation\">;</span>\n</code></pre> <p>If we test this out, we get a different result to the previous example, as the HTML is still written to the <code>&lt;div&gt;</code> target, but the dangerous XSS vector has been removed:</p> <pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>target<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>x<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre> <p>The result is simply a broken image, instead of the direct CSS:</p> <p><img src=\"/content/images/2025/trusted_types_06.png\" alt=\"DOMpurify returns a TrustedHTML that can be safely added to the DOM\"></p> <p>It's always safest to just not accept user input where possible, or to use the safe APIs, but DOMPurify provides a feasible alternative if you really need the functionality.</p> <h2 id=\"controlling-how-trustedhtml-may-be-generated\" class=\"heading-with-anchor\"><a href=\"#controlling-how-trustedhtml-may-be-generated\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Controlling how trustedHTML may be generated</a></h2> <p>We've protected our application, but there still feels like a gap here, right? Should it <em>really</em> be possible for just <em>any</em> JavaScript to be able to generate a <code>TrustedHTML</code> type and bypass the trusted Type protections? 🤔</p> <p>The solution to <em>that</em> problem is with yet another CSP directive—<code>trusted-types</code>. You can add this directive using <a href=\"https://www.nuget.org/packages/NetEscapades.AspNetCore.SecurityHeaders/\"><em>NetEscapades.AspNetCore.SecurityHeaders</em></a> as follows:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> policyCollection <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">HeaderPolicyCollection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">AddContentSecurityPolicy</span><span class=\"token punctuation\">(</span>builder <span class=\"token operator\">=&gt;</span>\n    <span class=\"token punctuation\">{</span>\n        builder<span class=\"token punctuation\">.</span><span class=\"token function\">AddRequireTrustedTypesFor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Script</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// Add trusted-types mypolicy to CSP</span>\n        builder<span class=\"token punctuation\">.</span><span class=\"token function\">AddTrustedTypes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">AllowPolicy</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"my-policy\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre> <p>This results in the following CSP header being added to the response:</p> <pre class=\"language-http\"><code class=\"language-http\"><span class=\"token header\"><span class=\"token header-name keyword\">Content-Security-Policy</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">require-trusted-types-for 'script'; trusted-types my-policy</span></span>\n</code></pre> <p>After that change, the code that was previously working to sanitize the querystring now fails:</p> <p><img src=\"/content/images/2025/trusted_types_05.png\" alt=\"Our trusted-types policy blocks us from using the DOMpurify library\"></p> <p>The error message says:</p> <pre><code>Refused to create a TrustedTypePolicy named 'dompurify'\nbecause it violates the following Content Security\nPolicy directive: \"trusted-types my policy\".\n</code></pre> <p>As the error message hints at, the DOMPurify library creates a <code>TrustedHTML</code> object using a <code>TrustedTypePolicy</code> called <code>dompurify</code>. We'll look in more detail at how to create policies soon, but for now we'll unblock DOMPurify by explicitly allowing the <code>dompurify</code> policy it uses in our CSP:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> policyCollection <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">HeaderPolicyCollection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">AddContentSecurityPolicy</span><span class=\"token punctuation\">(</span>builder <span class=\"token operator\">=&gt;</span>\n    <span class=\"token punctuation\">{</span>\n        builder<span class=\"token punctuation\">.</span><span class=\"token function\">AddRequireTrustedTypesFor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Script</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        builder<span class=\"token punctuation\">.</span><span class=\"token function\">AddTrustedTypes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">AllowPolicy</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"my-policy\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">AllowPolicy</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"dompurify\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 👈 Add additional policy</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre> <p>So now the response header looks like this:</p> <pre class=\"language-http\"><code class=\"language-http\"><span class=\"token header\"><span class=\"token header-name keyword\">Content-Security-Policy</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">require-trusted-types-for 'script'; trusted-types my-policy dompurify</span></span>\n</code></pre> <p>And with that we have a functioning DOMPurify sanitizer with Trusted Type protections again:</p> <p><img src=\"/content/images/2025/trusted_types_06.png\" alt=\"Showing that the dompurify policy works again\"></p> <p>Unfortunately, DOMPurify doesn't work for all scenarios.</p> <h2 id=\"creating-a-trusted-type-policy\" class=\"heading-with-anchor\"><a href=\"#creating-a-trusted-type-policy\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Creating a Trusted Type policy</a></h2> <p>In general, creating your own Trusted Type policy should probably be a last resort. <em>Ideally</em> you'll simply remove usages of any problematic APIs. If not, then using a library like DOMPurify is probably the next-best safest approach. Unfortunately, that's not always possible. For those cases, you can create your own policies to create Trusted Types like <code>TrustedHTML</code>.</p> <blockquote> <p>When you're initially adding support for Trusted Types, you may want to create your own policies as part of the migration. However, your goal should generally be to remove as many of these as possible.</p> </blockquote> <p>At the core of the Trusted Types policies you must provide a function that takes a <code>string</code> and returns a \"safe\", sanitized, <code>string</code>. You pass this to <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Trusted_Types_API\">the <code>window.trustedTypes</code> API</a>, to create a <code>TrustedTypePolicy</code> that can be used to create instances of <code>TrustedHTML</code> from a <code>string</code>:</p> <pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// fallback incase trusted-types feature is not available</span>\n<span class=\"token keyword\">let</span> sanitizeHtmlPolicy <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token function-variable function\">createHTML</span><span class=\"token operator\">:</span> <span class=\"token parameter\">x</span> <span class=\"token operator\">=&gt;</span> x<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Feature testing</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">.</span>trustedTypes <span class=\"token operator\">&amp;&amp;</span> trustedTypes<span class=\"token punctuation\">.</span>createPolicy<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n  <span class=\"token comment\">// Create a policy called my-policy (so it's allowed by the CSP)</span>\n  sanitizeHtmlPolicy <span class=\"token operator\">=</span> trustedTypes<span class=\"token punctuation\">.</span><span class=\"token function\">createPolicy</span><span class=\"token punctuation\">(</span><span class=\"token string\">'my-policy'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Create a basic sanitisation function (for demonstration only!)</span>\n    <span class=\"token function-variable function\">createHTML</span><span class=\"token operator\">:</span> <span class=\"token parameter\">toEscape</span> <span class=\"token operator\">=&gt;</span> toEscape\n      <span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">&lt;</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">,</span> <span class=\"token string\">'&amp;lt;'</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">&gt;</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">,</span> <span class=\"token string\">'&amp;gt;'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// retrieve the parameters</span>\n<span class=\"token keyword\">const</span> urlParams <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">URLSearchParams</span><span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">.</span>location<span class=\"token punctuation\">.</span>search<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> username <span class=\"token operator\">=</span> urlParams<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'username'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token string\">'no user'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> target <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'target'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> inner <span class=\"token operator\">=</span> <span class=\"token string\">'&lt;h1&gt;'</span> <span class=\"token operator\">+</span> username <span class=\"token operator\">+</span> <span class=\"token string\">'&lt;/h1&gt;'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Create a trusted-type by invoking the policy and using it</span>\n<span class=\"token keyword\">const</span> cleaned <span class=\"token operator\">=</span> sanitizeHtmlPolicy<span class=\"token punctuation\">.</span><span class=\"token function\">createHTML</span><span class=\"token punctuation\">(</span>inner<span class=\"token punctuation\">)</span>\ntarget<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> cleaned<span class=\"token punctuation\">;</span>\n</code></pre> <p>It's important to understand that there's no verification that the \"sanitization\" function you use to create the policy <em>actually</em> sanitizes. It's entirely up to you to make it safe. Which is also why this is the riskiest approach 😉</p> <p>Nevertheless, you can see that with the new policy we don't receive any errors, and our sanitised string can be written to the <code>innerHTML</code> property successfully:</p> <p><img src=\"/content/images/2025/trusted_types_04.png\" alt=\"And now we have the sanitised version again\"></p> <p>In the example above I showed how to create a <code>TrustedHTML</code> object for setting on <code>innerHTML</code> using <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/TrustedTypePolicy/createHTML\">the <code>createHTML</code></a> method on the policy. If you need it <code>TrustedTypePolicy</code> also contains a <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/TrustedTypePolicy/createScript\"><code>createScript()</code></a> method for creating a <code>TrustedScript</code> object and a <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/TrustedTypePolicy/createScriptURL\"><code>createScriptURL()</code></a> method for creating a <code>TrustedScriptURL</code> object.</p> <h2 id=\"creating-a-default-policy\" class=\"heading-with-anchor\"><a href=\"#creating-a-default-policy\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Creating a default policy</a></h2> <p>When you're initially migrating to using Trusted Types you have a bit of a problem. You need to update <em>every</em> usage of a problematic API. That could be a <em>lot</em> of work.</p> <p>To work around this, you can create a \"default\" policy. This policy is used whenever a <code>string</code> is passed to an API that requires Trusted Types.</p> <p>In the simplest case you could create a \"pass through\" version that just logs a warning to the console when it's used, though ideally you'll do <em>some</em> sort of sanitisation, whether it's using DOMPurify, or the super simple case:</p> <pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// fallback incase trusted-types feature is not available</span>\n<span class=\"token keyword\">let</span> sanitizeHtmlPolicy <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token function-variable function\">createHTML</span><span class=\"token operator\">:</span> <span class=\"token parameter\">x</span> <span class=\"token operator\">=&gt;</span> x<span class=\"token punctuation\">,</span> <span class=\"token function-variable function\">createScript</span><span class=\"token operator\">:</span> <span class=\"token parameter\">x</span> <span class=\"token operator\">=&gt;</span> x<span class=\"token punctuation\">,</span> <span class=\"token function-variable function\">createScriptURL</span><span class=\"token operator\">:</span> <span class=\"token parameter\">x</span> <span class=\"token operator\">=&gt;</span> x<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Feature testing</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">.</span>trustedTypes <span class=\"token operator\">&amp;&amp;</span> trustedTypes<span class=\"token punctuation\">.</span>createPolicy<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// create a default policy</span>\n  sanitizeHtmlPolicy <span class=\"token operator\">=</span> trustedTypes<span class=\"token punctuation\">.</span><span class=\"token function\">createPolicy</span><span class=\"token punctuation\">(</span><span class=\"token string\">'default'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">createHTML</span><span class=\"token operator\">:</span> <span class=\"token parameter\">toEscape</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Warning: use of default createHTML policy.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> toEscape <span class=\"token comment\">// TODO: use a sanitization library</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">&lt;</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">,</span> <span class=\"token string\">'&amp;lt;'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">&gt;</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">,</span> <span class=\"token string\">'&amp;gt;'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">createScript</span><span class=\"token operator\">:</span> <span class=\"token parameter\">toEscape</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Warning: use of default createScript policy.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> toEscape<span class=\"token punctuation\">;</span> <span class=\"token comment\">// TODO: actually try to sanitize this</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">createScriptURL</span><span class=\"token operator\">:</span> <span class=\"token parameter\">toEscape</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Warning: use of default createScriptURL policy.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> toEscape<span class=\"token punctuation\">;</span> <span class=\"token comment\">// TODO: actually try to sanitize this</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>The <code>default</code> policy is always available, but you still need to explicitly allow it in your CSP configuration:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> policyCollection <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">HeaderPolicyCollection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">AddContentSecurityPolicy</span><span class=\"token punctuation\">(</span>builder <span class=\"token operator\">=&gt;</span>\n    <span class=\"token punctuation\">{</span>\n        builder<span class=\"token punctuation\">.</span><span class=\"token function\">AddRequireTrustedTypesFor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Script</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        builder<span class=\"token punctuation\">.</span><span class=\"token function\">AddTrustedTypes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Default</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre> <p>With this setup, you now get warnings whenever the fallback policy is used, but your APIs aren't broken any more:</p> <p><img src=\"/content/images/2025/trusted_types_07.png\" alt=\"Using the default policy logs a message\"></p> <p>This at least gives a migration path forward for Trusted Types!</p> <h2 id=\"summary\" class=\"heading-with-anchor\"><a href=\"#summary\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Summary</a></h2> <p>In this post I demonstrated how some APIs are vulnerable to cross-site-scripting (CSS) attacks in the browser. I then showed how the Trusted Types APIs in the browser, coupled with the <code>require-trusted-types-for</code> and <code>trusted-types</code> Content-Security-Policy directives can help protect your site. Depending on which APIs you're using, how prevalently they're used, and whether they're called by code outside of your control, migrating to Trusted Types may not be an easy fix, but there are approaches that make it possible.</p> <h2 id=\"resources\" class=\"heading-with-anchor\"><a href=\"#resources\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Resources</a></h2> <ul><li><a href=\"https://web.dev/articles/trusted-types\">web.dev article on trusted types</a></li> <li><a href=\"https://www.w3.org/TR/trusted-types/\">W3C draft spec for trusted types</a></li> <li><a href=\"https://github.com/w3c/webappsec/blob/5d339e8f3c8bc88130ba6fa70166fa1cbb10c5de/mitigation-guidance/TrustedTypes/index.md\">W3C guidance on trusted types rollout and mitigation</a></li> <li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy/trusted-types\">MDN documentation on <code>trusted-types</code> CSP header</a></li> <li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy/require-trusted-types-for\">MDN documentation on <code>require-trusted-types-for</code> CSP header</a></li> <li><a href=\"https://github.com/cure53/DOMPurify?tab=readme-ov-file#what-about-dompurify-and-trusted-types\">Using DOMPurify with Trusted Types</a></li></ul> ",
    "sanitized": "In this post I describe how to use the Trusted Types directive as part of the Content-Security-Policy (CSP) feature to prevent against cross-site-scripting (XSS) attacks. I'll start by demonstrating how a cross-site scripting attack works, focusing on client-side, DOM-based attacks using dangerous APIs. After demonstrating the issue, I'll show how you can use Trusted Types to close the vulnerabilities in these APIs, and how Trusted Types work. After closing these vulnerabilities, I'll show several ways to work Trusted Types: by using safe APIs, by using sanitisation libraries, and by creating Trusted Types using policies.  It's worth noting that the Trusted Types API is currently only available in Chromium based browsers, but it has been available in Chromium since version 83, released in 2020.  DOM-based client-side cross-site-scripting Cross-site-scripting generally occurs where you allow input from a user to be directly written, unsanitised, into an HTML page in some way. This can occur in server side apps when generating HTML, for example if you use the @Html.Raw() method in Razor. A similar vulnerability exists on the client-side if you allow user data to be written unsanitised into the DOM. This input could come from a URL parameter or postMessage channel for example, and it becomes problematic if you use it directly in some APIs like Element.innerHTML, eval, or setTimeout, for example. To demonstrate the issue, The following shows part of a very simple HTML page returned from an ASP.NET Core app. It contains a single \"target\" <div> element which initially contains some text to be replaced. There is also a simple <script> block which reads a username parameter from the URL's querystring, and writes the name as an <h1> tag using the innerHTML property.  Remember, this code contains an XSS vulnerability, it's just for demo purposes!  <div id=\"target\">To be replaced</div>\n\n<script type=\"text/javascript\">\n    const urlParams = new URLSearchParams(window.location.search);\n    const username = urlParams.get('username') || 'no user';\n    \n    // set the username\n    const target = document.getElementById('target');\n    const inner = '<h1>' + username + '</h1>';\n    target.innerHTML = inner;\n</script>\n The innocuous case where the user enters a simple name doesn't show any obvious issues:  However, this code contains a severe XSS vulnerability. An attacker could force a user to travel to a URL something like the following: http://localhost:5000/?username=<img src=x onerror=\"alert('XSS Attack')\">\n This querystring demonstrates that the code contains a clear XSS. When you hit this page: The querystring is read from the URL as <img src=x onerror=\"alert('XSS Attack')\">. It's combined with the <h1> to give <h1><img src=x onerror=\"alert('XSS Attack')\"></h1>. It's inserted into the target <div>. The <img> tag attempts to load the src x, which obviously fails. The onerror event fires, executing the XSS attack!  The attack may seem a bit convoluted, and it is, but that's because there are basic protections to prevent the simplest XSS attacks; <script> tags added via innerHTML are not executed automatically.  The following is the result: the alert executes demonstrating the attack.  Using innerHTML as shown above opens yourself up to XSS vulnerabilities, but auditing everywhere that uses the API can be difficult, especially if it's used inside a library somewhere. Luckily, there's a way to protect yourself using CSP. Blocking cross-site-scripting with Trusted Types and a Content-Security-Policy One of the most important security feature for modern applications is the Content-Security-Policy (CSP). CSP is typically added as a header, but it can also be added as a <meta> element. CSP provides a whole swathe of features, such as forcing requests to use https instead of http, only allowing connections to specific hosts and resources, only allowing scripts that match a specific hash, and a variety of other options. The feature I'm using in this post is based on a draft W3C specification called Trusted Types. In particular, you can add the require-trusted-types-for directive to your CSP. My security headers library, NetEscapades.AspNetCore.SecurityHeaders can help you build a CSP and add it as a header to your ASP.NET Core responses. The following very basic configuration adds a simply Trusted Types directive to the CSP for the app: var builder = new WebApplication.CreateBuilder();\n\nvar app = builder.Build();\n// Configure the policy\napp.UseSecurityHeaders(new HeaderPolicyCollection()\n    .AddContentSecurityPolicy(builder =>\n    {\n        // Add require-trusted-types-for 'script' header\n        builder.AddRequireTrustedTypesFor().Script();\n    }));\n\n// other configuration\napp.Run();\n This adds a header like the following to the response: Content-Security-Policy: require-trusted-types-for 'script'\n And now if we try to exploit the innerHTML API, we are magically protected:  The screenshot above shows that the document requires TrustedHTML assignment, and that assigning innerHTML has failed completely. The attack has been thwarted! So how does the CSP header protect you? As you can see from the log messages, when you return a CSP with the require-trusted-types-for 'Script' directive, you put the browser into a different mode, in which the standard APIs no longer accept simple string values. Instead, APIs like innerHTML must be passed a TrustedHTML object; APIs like eval must be used with a TrustedScript object; and APIs like setting a <script src> must be used with TrustedScriptURL. Fixing trusted type violations By changing the type accepted by these APIs (also called \"injection sinks\"), you're safe from simple injection attacks, but presumably you do want to call those APIs, or at least achieve the same functionality. In this section I'll show a couple of options. Avoiding problematic APIs In this section, I'll assume that you want to display the username passed in the querystring, but in a safe way. The following snippet shows how you can use createElement, textContent, and appendChild instead of the dangerous innerHTML API: const urlParams = new URLSearchParams(window.location.search);\nconst username = urlParams.get('username') || 'no user';\n\nconst target = document.getElementById('target');\n// Use createElement to create a DOM element, and set the text\nconst h1 = document.createElement('h1');\nh1.textContent = username;\ntarget.textContent = '';\ntarget.appendChild(h1);\n With this change, the page is functioning again, this time without exposing any CSS vectors, and without any errors:  Unfortunately, it's not always possible to refactor your code in this way. Using a sanitisation library The approach in the previous section is safest, as it uses inherently safe APIs, but it's unfortunately not always possible. For example, perhaps you want people to be able to provide safe HTML to include in the DOM. In this section, I show how you can use a sanitisation library to create a TrustedHTML type that you can pass directly to the innerHTML setter.  Using a sanitisation library is obviously only as \"safe\" as the library itself. If there's a bug or workaround in the sanitisation library, then you may still be vulnerable despite using Trusted Types.  In this example I'm using DOMPurify, an XSS sanitiser library. There are many ways to use this library, but in this example I add a link to the script directly: <script src=\"https://cdnjs.cloudflare.com/ajax/libs/dompurify/3.2.3/purify.min.js\"\n    integrity=\"sha512-Ll+TuDvrWDNNRnFFIM8dOiw7Go7dsHyxRp4RutiIFW/wm3DgDmCnRZow6AqbXnCbpWu93yM1O34q+4ggzGeXVA==\"\n    crossorigin=\"anonymous\" referrerpolicy=\"no-referrer\"></script>\n And then call DOMPurify.sanitize() on the potentially vulnerable HTML, enabling the Trusted Type support: const urlParams = new URLSearchParams(window.location.search);\nconst username = urlParams.get('username') || 'no user';\n\nconst target = document.getElementById('target');\nconst inner = '<h1>' + username + '</h1>';\n\n// Create a \"cleaned\" version, which returns a TrustedHTML object\nconst cleaned = DOMPurify.sanitize(inner, {RETURN_TRUSTED_TYPE: true});\ntarget.innerHTML = cleaned;\n If we test this out, we get a different result to the previous example, as the HTML is still written to the <div> target, but the dangerous XSS vector has been removed: <div id=\"target\"><h1><img src=\"x\"></h1></div>\n The result is simply a broken image, instead of the direct CSS:  It's always safest to just not accept user input where possible, or to use the safe APIs, but DOMPurify provides a feasible alternative if you really need the functionality. Controlling how trustedHTML may be generated We've protected our application, but there still feels like a gap here, right? Should it really be possible for just any JavaScript to be able to generate a TrustedHTML type and bypass the trusted Type protections? 🤔 The solution to that problem is with yet another CSP directive—trusted-types. You can add this directive using NetEscapades.AspNetCore.SecurityHeaders as follows: var policyCollection = new HeaderPolicyCollection()\n    .AddContentSecurityPolicy(builder =>\n    {\n        builder.AddRequireTrustedTypesFor().Script();\n        // Add trusted-types mypolicy to CSP\n        builder.AddTrustedTypes().AllowPolicy(\"my-policy\");\n    });\n This results in the following CSP header being added to the response: Content-Security-Policy: require-trusted-types-for 'script'; trusted-types my-policy\n After that change, the code that was previously working to sanitize the querystring now fails:  The error message says: Refused to create a TrustedTypePolicy named 'dompurify'\nbecause it violates the following Content Security\nPolicy directive: \"trusted-types my policy\".\n As the error message hints at, the DOMPurify library creates a TrustedHTML object using a TrustedTypePolicy called dompurify. We'll look in more detail at how to create policies soon, but for now we'll unblock DOMPurify by explicitly allowing the dompurify policy it uses in our CSP: var policyCollection = new HeaderPolicyCollection()\n    .AddContentSecurityPolicy(builder =>\n    {\n        builder.AddRequireTrustedTypesFor().Script();\n        builder.AddTrustedTypes()\n            .AllowPolicy(\"my-policy\");\n            .AllowPolicy(\"dompurify\"); // 👈 Add additional policy\n    });\n So now the response header looks like this: Content-Security-Policy: require-trusted-types-for 'script'; trusted-types my-policy dompurify\n And with that we have a functioning DOMPurify sanitizer with Trusted Type protections again:  Unfortunately, DOMPurify doesn't work for all scenarios. Creating a Trusted Type policy In general, creating your own Trusted Type policy should probably be a last resort. Ideally you'll simply remove usages of any problematic APIs. If not, then using a library like DOMPurify is probably the next-best safest approach. Unfortunately, that's not always possible. For those cases, you can create your own policies to create Trusted Types like TrustedHTML.  When you're initially adding support for Trusted Types, you may want to create your own policies as part of the migration. However, your goal should generally be to remove as many of these as possible.  At the core of the Trusted Types policies you must provide a function that takes a string and returns a \"safe\", sanitized, string. You pass this to the window.trustedTypes API, to create a TrustedTypePolicy that can be used to create instances of TrustedHTML from a string: // fallback incase trusted-types feature is not available\nlet sanitizeHtmlPolicy = {createHTML: x => x};\n\n// Feature testing\nif (window.trustedTypes && trustedTypes.createPolicy) { \n  // Create a policy called my-policy (so it's allowed by the CSP)\n  sanitizeHtmlPolicy = trustedTypes.createPolicy('my-policy', {\n    // Create a basic sanitisation function (for demonstration only!)\n    createHTML: toEscape => toEscape\n      .replace(/</g, '&lt;')\n      .replace(/>/g, '&gt;'),\n  });\n}\n\n// retrieve the parameters\nconst urlParams = new URLSearchParams(window.location.search);\nconst username = urlParams.get('username') || 'no user';\n\nconst target = document.getElementById('target');\nconst inner = '<h1>' + username + '</h1>';\n\n// Create a trusted-type by invoking the policy and using it\nconst cleaned = sanitizeHtmlPolicy.createHTML(inner)\ntarget.innerHTML = cleaned;\n It's important to understand that there's no verification that the \"sanitization\" function you use to create the policy actually sanitizes. It's entirely up to you to make it safe. Which is also why this is the riskiest approach 😉 Nevertheless, you can see that with the new policy we don't receive any errors, and our sanitised string can be written to the innerHTML property successfully:  In the example above I showed how to create a TrustedHTML object for setting on innerHTML using the createHTML method on the policy. If you need it TrustedTypePolicy also contains a createScript() method for creating a TrustedScript object and a createScriptURL() method for creating a TrustedScriptURL object. Creating a default policy When you're initially migrating to using Trusted Types you have a bit of a problem. You need to update every usage of a problematic API. That could be a lot of work. To work around this, you can create a \"default\" policy. This policy is used whenever a string is passed to an API that requires Trusted Types. In the simplest case you could create a \"pass through\" version that just logs a warning to the console when it's used, though ideally you'll do some sort of sanitisation, whether it's using DOMPurify, or the super simple case: // fallback incase trusted-types feature is not available\nlet sanitizeHtmlPolicy = {createHTML: x => x, createScript: x => x, createScriptURL: x => x};\n\n// Feature testing\nif (window.trustedTypes && trustedTypes.createPolicy) {\n  // create a default policy\n  sanitizeHtmlPolicy = trustedTypes.createPolicy('default', {\n    createHTML: toEscape => {\n      console.log('Warning: use of default createHTML policy.');\n      return toEscape // TODO: use a sanitization library\n        .replace(/</g, '&lt;')\n        .replace(/>/g, '&gt;');\n    },\n    createScript: toEscape => {\n      console.log('Warning: use of default createScript policy.');\n      return toEscape; // TODO: actually try to sanitize this\n    },\n    createScriptURL: toEscape => {\n      console.log('Warning: use of default createScriptURL policy.');\n      return toEscape; // TODO: actually try to sanitize this\n    },\n  });\n}\n The default policy is always available, but you still need to explicitly allow it in your CSP configuration: var policyCollection = new HeaderPolicyCollection()\n    .AddContentSecurityPolicy(builder =>\n    {\n        builder.AddRequireTrustedTypesFor().Script();\n        builder.AddTrustedTypes().Default();\n    });\n With this setup, you now get warnings whenever the fallback policy is used, but your APIs aren't broken any more:  This at least gives a migration path forward for Trusted Types! Summary In this post I demonstrated how some APIs are vulnerable to cross-site-scripting (CSS) attacks in the browser. I then showed how the Trusted Types APIs in the browser, coupled with the require-trusted-types-for and trusted-types Content-Security-Policy directives can help protect your site. Depending on which APIs you're using, how prevalently they're used, and whether they're called by code outside of your control, migrating to Trusted Types may not be an easy fix, but there are approaches that make it possible. Resources web.dev article on trusted types W3C draft spec for trusted types W3C guidance on trusted types rollout and mitigation MDN documentation on trusted-types CSP header MDN documentation on require-trusted-types-for CSP header Using DOMPurify with Trusted Types"
  },
  {
    "itemId": "https://andrewlock.net/creating-a-source-generator-part-14-supporting-multiple-sdk-versions-in-a-source-generator/",
    "raw": "<img src=\"https://andrewlock.net/content/images/2025/multi_targeting_banner.png\" /><nav><p>This is the fourteen post in the series: <a href=\"/series/creating-a-source-generator/\">Creating a source generator</a>. </p> <ol class=\"list-none\"><li><a href=\"/creating-a-source-generator-part-1-creating-an-incremental-source-generator/\">Part 1 - Creating an incremental generator</a></li><li><a href=\"/creating-a-source-generator-part-2-testing-an-incremental-generator-with-snapshot-testing/\">Part 2 - Testing an incremental generator with snapshot testing</a></li><li><a href=\"/creating-a-source-generator-part-3-integration-testing-and-packaging/\">Part 3 - Integration testing and NuGet packaging</a></li><li><a href=\"/creating-a-source-generator-part-4-customising-generated-code-with-marker-attributes/\">Part 4 - Customising generated code with marker attributes</a></li><li><a href=\"/creating-a-source-generator-part-5-finding-a-type-declarations-namespace-and-type-hierarchy/\">Part 5 - Finding a type declaration's namespace and type hierarchy</a></li><li><a href=\"/creating-a-source-generator-part-6-saving-source-generator-output-in-source-control/\">Part 6 - Saving source generator output in source control</a></li><li><a href=\"/creating-a-source-generator-part-7-solving-the-source-generator-marker-attribute-problem-part1/\">Part 7 - Solving the source generator 'marker attribute' problem - Part 1</a></li><li><a href=\"/creating-a-source-generator-part-8-solving-the-source-generator-marker-attribute-problem-part2/\">Part 8 - Solving the source generator 'marker attribute' problem - Part 2</a></li><li><a href=\"/creating-a-source-generator-part-9-avoiding-performance-pitfalls-in-incremental-generators/\">Part 9 - Avoiding performance pitfalls in incremental generators</a></li><li><a href=\"/creating-a-source-generator-part-10-testing-your-incremental-generator-pipeline-outputs-are-cacheable/\">Part 10 - Testing your incremental generator pipeline outputs are cacheable</a></li><li><a href=\"/creating-a-source-generator-part-11-implementing-an-interceptor-with-a-source-generator/\">Part 11 - Implementing an interceptor with a source generator</a></li><li><a href=\"/creating-a-source-generator-part-12-reading-compilation-options-and-csharp-version-in-source-generators/\">Part 12 - Reading compilation options and the C# version in source generators</a></li><li><a href=\"/creating-a-source-generator-part-13-providing-and-accessing-msbuild-settings-in-source-generators/\">Part 13 - Accessing MSBuild properties and user configuration from source generators</a></li><li>Part 14 - Supporting multiple .NET SDK versions in a source generator (this post) </li></ol></nav><p>In <a href=\"/supporting-multiple-sdk-versions-in-analyzers-and-source-generators/\">my previous post</a> I described why you might want (or need) to target multiple versions of the .NET SDK in a source generator. In this post I show how I applied this to my <em>NetEscapades.EnumGenerators</em> source generator, so that I could support features only available in the .NET 8/9 SDK, while still supporting users stuck on the .NET 7 SDK.</p> <h2 id=\"-net-sdk-versions-microsoft-codeanalysis-csharp-and-nuget-package-layouts\" class=\"heading-with-anchor\"><a href=\"#-net-sdk-versions-microsoft-codeanalysis-csharp-and-nuget-package-layouts\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">.NET SDK versions, <em>Microsoft.CodeAnalysis.CSharp</em>, and NuGet package layouts</a></h2> <p>In <a href=\"/supporting-multiple-sdk-versions-in-analyzers-and-source-generators/\">my previous post</a> I provided a long description of how and why you might need to target multiple versions of the .NET SDK. This post directly follows on from that one, so if you haven't, I suggest reading that one first.</p> <p>In summary, when you create a source generator, you reference a specific version of the <a href=\"https://www.nuget.org/packages/Microsoft.CodeAnalysis.CSharp\">Microsoft.CodeAnalysis.CSharp</a> NuGet package. The <a href=\"https://learn.microsoft.com/en-us/visualstudio/extensibility/roslyn-version-support\">version of this package</a> you choose defines the minimum version of <a href=\"https://learn.microsoft.com/en-us/dotnet/core/porting/versioning-sdk-msbuild-vs\">Visual Studio, MSBuild, and the .NET SDK</a> that your source generator will work with. The higher the version, the more Roslyn APIs you can use, but the higher the version of the .NET SDK the consumer must be using.</p> <p>In the .NET 6 SDK, Microsoft updated the logic that finds analyzers/source generators in a NuGet file to allow versioning a source generator by Roslyn API version. That means you can ship a source generator that provides basic functionality when used with the .NET 6 SDK (for example) but which provides <em>additional</em> functionality when used with the .NET 7 or .NET 8 SDKs, for example. You do this by shipping multiple versions of the generator in the NuGet package, each compiled against a different version of <a href=\"https://www.nuget.org/packages/Microsoft.CodeAnalysis.CSharp\">Microsoft.CodeAnalysis.CSharp</a>:</p> <p><img src=\"/content/images/2025/system_text_json_4.png\" alt=\"The (simplified) layout of the System.Text.Json 6.0.0 package\"></p> <p>The .NET SDK then loads the highest supported version of the analyzer, based on the version of the Roslyn API that it supports.</p> <p>I covered most of the details of why you might want to multi-target multiple roslyn versions in your package in <a href=\"/supporting-multiple-sdk-versions-in-analyzers-and-source-generators/\">the previous post</a>, so in this post I'll show how I added multi-targeting support to my <em>NetEscapades.EnumGenerators</em> source generator.</p> <h2 id=\"adding-multi-targeting-support-for-netescapades-enumgenerators\" class=\"heading-with-anchor\"><a href=\"#adding-multi-targeting-support-for-netescapades-enumgenerators\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Adding multi-targeting support for <em>NetEscapades.EnumGenerators</em></a></h2> <p>The <a href=\"https://www.nuget.org/packages/NetEscapades.EnumGenerators/\">NetEscapades.EnumGenerators</a> package is a source generator for making working with enums faster. I <a href=\"/recent-updates-for-netescapades-enumgenerators-interceptors/\">recently added experimental support for interceptors to the package</a>, but this required using a newer version of the Roslyn API than I was previously. The interceptor API I needed was only available in .NET SDK version <code>8.0.400</code> (version <code>4.11</code> of the Roslyn API in <em>Microsoft.CodeAnalysis.CSharp</em>), whereas I was currently targeting <code>4.4</code>.</p> <p>The easy approach would have been to simply update the version of <em>Microsoft.CodeAnalysis.CSharp</em> to <code>4.11.0</code> to give access to the <code>4.11</code> Roslyn API. However, doing so would have meant that anyone currently using the package with a .NET 7 SDK or a .NET 8 SDK below <code>8.0.400</code> would have been broken.</p> <p>Rather than inconvenience people, I decided to have a go at multi-targeting. This would ensure that down-version users could use the basic functionality, but the interceptor support would not be available. Meanwhile, anyone using <code>8.0.400</code> or higher of the .NET SDK <em>would</em> be able to enable the interceptor functionality. The best of both worlds!</p> <p>The approach I took to multi-targeting was heavily based on <a href=\"https://github.com/dotnet/runtime/pull/59074/files#diff-258ed32f98847603de7425cdcd362915271c61390268af3e6c75b4335b817471\">the approach taken by the built-in generators</a> like the <em>System.Text.Json</em> generator and the <em>Microsoft.Extensions.Logging</em> generator when they first added multi-targeting support.</p> <p>I implemented the bulk of the support in <a href=\"https://github.com/andrewlock/NetEscapades.EnumGenerators/pull/101\">a single PR</a>, and it's broadly the same approach I show in this post.</p> <h3 id=\"the-original-prior-to-multi-targeting\" class=\"heading-with-anchor\"><a href=\"#the-original-prior-to-multi-targeting\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">The original: prior to multi-targeting</a></h3> <p>To set the stage, <em>prior</em> to multi-targeting, the <em>NetEscapades.EnumGenerators</em> source generator targeted version <code>4.4</code> of the Roslyn API, by referencing <code>4.4.0</code> of the <em>Microsoft.CodeAnalysis.CSharp</em> NuGet package. This API version corresponds to the .NET 7 SDK, and gives access to the <a href=\"/creating-a-source-generator-part-9-avoiding-performance-pitfalls-in-incremental-generators/#1-use-the-net-7-api-forattributewithmetadataname\">recommended <code>ForAttributeWithMetadataName</code> API</a>.</p> <p>The solution consisted of two main projects:</p> <ul><li><code>NetEscapades.EnumGenerators</code>: The main source generator project</li> <li><code>NetEscapades.EnumGenerators.Attributes</code>: A library project containing the \"marker\" attributes that drive the source generator</li></ul> <p>There's also a bunch of test projects, some of the main ones are described below. I've described these approaches in <a href=\"/creating-a-source-generator-part-2-testing-an-incremental-generator-with-snapshot-testing/\">more detail</a> <a href=\"/creating-a-source-generator-part-3-integration-testing-and-packaging/\">previously</a> in <a href=\"/series/creating-a-source-generator/\">this series</a>:</p> <ul><li><code>NetEscapades.EnumGenerators.Tests</code>: Unit tests for the generator functionality, and snapshot tests comparing the generated output</li> <li><code>NetEscapades.EnumGenerators.IntegrationTests</code>: \"Integration\" test project that references the source generator project directly, and runs a bunch of tests. This ensures the generated output <em>actually</em> compiles, and gives the expected values when executed, for example.</li> <li><code>NetEscapades.EnumGenerators.Nuget.IntegrationTests</code>: Runs the same tests as the above project, but instead of referencing the source generator directly, it uses a version of the generator that has been fully packed into a NuGet package. This is the closest to a \"real life\" scenario you can get to.</li></ul> <p>There are a bunch of other tests for additional variations, but I'll ignore those for brevity:</p> <p><img src=\"/content/images/2025/multi_targeting_01.png\" alt=\"The solution layout\"></p> <p>Now we have the starting point, lets begin the migration to support multiple Roslyn versions.</p> <h3 id=\"splitting-the-source-generator-project\" class=\"heading-with-anchor\"><a href=\"#splitting-the-source-generator-project\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Splitting the source generator project</a></h3> <p>Prior to supporting the multi-targeting, the <em>NetEscapades.EnumGenerators</em> <em>.csproj</em> file looked as shown below. This includes a variety of properties and items. Some of the properties (<code>&lt;TargetFramework&gt;</code>, <code>&lt;PackageReference&gt;</code>) are related to <em>building</em> the source generator dll, some parts are related to properties of the final NuGet package (<code>&lt;PackageId&gt;</code>, <code>&lt;Description&gt;</code>), and some are related to controlling the contents of the final NuGet package (<code>&lt;PackageReadmeFile&gt;</code>, <code>PackagePath</code> attributes):</p> <pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Project</span> <span class=\"token attr-name\">Sdk</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Microsoft.NET.Sdk<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>PropertyGroup</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>TargetFramework</span><span class=\"token punctuation\">&gt;</span></span>netstandard2.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>TargetFramework</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>IncludeBuildOutput</span><span class=\"token punctuation\">&gt;</span></span>false<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>IncludeBuildOutput</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Nullable</span><span class=\"token punctuation\">&gt;</span></span>enable<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Nullable</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ImplicitUsings</span><span class=\"token punctuation\">&gt;</span></span>true<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ImplicitUsings</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>PackageId</span><span class=\"token punctuation\">&gt;</span></span>NetEscapades.EnumGenerators<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>PackageId</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Description</span><span class=\"token punctuation\">&gt;</span></span>A source generator for creating helper extension methods on enums using a [EnumExtensions] attribute<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Description</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>PackageReadmeFile</span><span class=\"token punctuation\">&gt;</span></span>README.md<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>PackageReadmeFile</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>PropertyGroup</span><span class=\"token punctuation\">&gt;</span></span>\n\n  <span class=\"token comment\">&lt;!-- These are references required by the source generator --&gt;</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ItemGroup</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>PackageReference</span> <span class=\"token attr-name\">Include</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Microsoft.CodeAnalysis.Analyzers<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">Version</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>3.3.3<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">PrivateAssets</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>all<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>PackageReference</span> <span class=\"token attr-name\">Include</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Microsoft.CodeAnalysis.CSharp<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">Version</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>4.4.0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">PrivateAssets</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>all<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ProjectReference</span> <span class=\"token attr-name\">Include</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>..\\NetEscapades.EnumGenerators.Attributes\\NetEscapades.EnumGenerators.Attributes.csproj<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">PrivateAssets</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>All<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ItemGroup</span><span class=\"token punctuation\">&gt;</span></span>\n\n  <span class=\"token comment\">&lt;!-- These tweak and control the contents of the NuGet package --&gt;</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ItemGroup</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>None</span> <span class=\"token attr-name\">Include</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>../../README.md<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">Pack</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">PackagePath</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>\\<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n\n    <span class=\"token comment\">&lt;!-- Pack the source generator and attributes dll --&gt;</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>None</span> <span class=\"token attr-name\">Include</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>$(OutputPath)\\$(AssemblyName).dll<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">Pack</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">PackagePath</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>analyzers/dotnet/cs<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">Visible</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>false<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>None</span> <span class=\"token attr-name\">Include</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>$(OutputPath)\\NetEscapades.EnumGenerators.Attributes.dll<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">Pack</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">PackagePath</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>analyzers/dotnet/cs<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">Visible</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>false<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n\n    <span class=\"token comment\">&lt;!-- Pack the attributes file to be referenced by the target project --&gt;</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>None</span> <span class=\"token attr-name\">Include</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>$(OutputPath)\\NetEscapades.EnumGenerators.Attributes.dll<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">Pack</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">PackagePath</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>lib\\netstandard2.0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">Visible</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>None</span> <span class=\"token attr-name\">Include</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>$(OutputPath)\\NetEscapades.EnumGenerators.Attributes.xml<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">Pack</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">PackagePath</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>lib\\netstandard2.0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">Visible</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>None</span> <span class=\"token attr-name\">Include</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>$(OutputPath)\\NetEscapades.EnumGenerators.Attributes.dll<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">Pack</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">PackagePath</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>lib\\net451<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">Visible</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>None</span> <span class=\"token attr-name\">Include</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>$(OutputPath)\\NetEscapades.EnumGenerators.Attributes.xml<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">Pack</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">PackagePath</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>lib\\net451<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">Visible</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ItemGroup</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Project</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre> <p>To support multi-targeting, we need to make some significant changes to this project:</p> <ul><li>Split the source generator project into multiple projects, each referencing different version of <em>Microsoft.CodeAnalysis.CSharp</em>. <ul><li>One project references version <code>4.4.0</code>. This is the \"lower\" bound for our SDK support, and corresponds to the .NET 7 SDK.</li> <li>Another project references version <code>4.11.0</code>. This is the \"enhanced\" SDK support, which we need for interceptor support, and corresponds to <code>8.0.4xx</code> of the .NET SDK.</li></ul> </li> <li>Update the projects to share most of the implementation. Update the implementation in the <code>4.11</code> project with the additional functionality.</li> <li>Create a separate project that is used solely to <em>pack</em> the two source generator dlls into the final NuGet package. You could also use a nuspec file for this, but I prefer to use a csproj instead.</li></ul> <p>The final result looks something like this in the solution explorer:</p> <p><img src=\"/content/images/2025/multi_targeting_02.png\" alt=\"The updated solution explorer, with 3 new projects\"></p> <p>So the original <em>NetEscapades.EnumGenerators</em> project has gone, and we have <em>three</em> projects in its place:</p> <ul><li><code>NetEscapades.EnumGenerators.Rolsyn4_04</code>: The version of the generator that references <em>Microsoft.CodeAnalysis.CSharp</em> <code>4.4.0</code>.</li> <li><code>NetEscapades.EnumGenerators.Rolsyn4_11</code>: The version of the generator that references <em>Microsoft.CodeAnalysis.CSharp</em> <code>4.11.0</code>.</li> <li><code>NetEscapades.EnumGenerators.Pack</code>: A project focused solely on collecting the output artifacts from the other source projects and producing the final NuGet package.</li></ul> <p>Note that the three projects are peers in the solution explorer, but the files are all side-by-side in the same folder in the filesystem, rather than being in separate folders:</p> <p><img src=\"/content/images/2025/multi_targeting_03.png\" alt=\"The filesystem of the updated solution, showing the files are side-by-side\"></p> <p>Now lets look at the project files, as well as some ancillary files.</p> <h3 id=\"exploring-the-new-project-files\" class=\"heading-with-anchor\"><a href=\"#exploring-the-new-project-files\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Exploring the new project files</a></h3> <p>We'll start by looking at the <code>NetEscapades.EnumGenerators.Rolsyn4_04</code> and <code>NetEscapades.EnumGenerators.Rolsyn4_11</code> <em>.csproj</em> files. These are quite simple, basically just defining the version of the Roslyn API they require and then importing a separate <code>.targets</code> file.</p> <p>The <code>Rolsyn4_04</code> project looks like this:</p> <pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Project</span> <span class=\"token attr-name\">Sdk</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Microsoft.NET.Sdk<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>PropertyGroup</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>RoslynApiVersion</span><span class=\"token punctuation\">&gt;</span></span>4.4.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>RoslynApiVersion</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>IsPackable</span><span class=\"token punctuation\">&gt;</span></span>false<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>IsPackable</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>PropertyGroup</span><span class=\"token punctuation\">&gt;</span></span>\n\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Import</span> <span class=\"token attr-name\">Project</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>NetEscapades.EnumGenerators.Build.targets<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Project</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre> <p>and the <code>Rolsyn4_11</code> project looks like this:</p> <pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Project</span> <span class=\"token attr-name\">Sdk</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Microsoft.NET.Sdk<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>PropertyGroup</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>RoslynApiVersion</span><span class=\"token punctuation\">&gt;</span></span>4.11.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>RoslynApiVersion</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>DefineConstants</span><span class=\"token punctuation\">&gt;</span></span>$(DefineConstants);INTERCEPTORS<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>DefineConstants</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>IsPackable</span><span class=\"token punctuation\">&gt;</span></span>false<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>IsPackable</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>PropertyGroup</span><span class=\"token punctuation\">&gt;</span></span>\n\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Import</span> <span class=\"token attr-name\">Project</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>NetEscapades.EnumGenerators.Build.targets<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Project</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre> <p>Note that I've defined an additional constant in the <code>Rolsyn4_11</code> project, so that I can use <code>#if INTERCEPTORS</code> in the source generator code, and share the same files between both projects.</p> <p>The bulk of the project definition happens in the <em>NetEscapades.EnumGenerators.Build.targets</em> file (the name is chosen arbitrarily). This includes most of the same property definitions as we had before, with a couple of tweaks, which I've highlighted in comments below:</p> <pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Project</span><span class=\"token punctuation\">&gt;</span></span>\n\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>PropertyGroup</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>TargetFramework</span><span class=\"token punctuation\">&gt;</span></span>netstandard2.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>TargetFramework</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>IncludeBuildOutput</span><span class=\"token punctuation\">&gt;</span></span>false<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>IncludeBuildOutput</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>PackageId</span><span class=\"token punctuation\">&gt;</span></span>NetEscapades.EnumGenerators<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>PackageId</span><span class=\"token punctuation\">&gt;</span></span>\n\n    <span class=\"token comment\">&lt;!-- Explicitly define these, so that both projects produce dlls with the same name --&gt;</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>AssemblyName</span><span class=\"token punctuation\">&gt;</span></span>$(PackageId)<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>AssemblyName</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>RootNamespace</span><span class=\"token punctuation\">&gt;</span></span>$(PackageId)<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>RootNamespace</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Nullable</span><span class=\"token punctuation\">&gt;</span></span>enable<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Nullable</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ImplicitUsings</span><span class=\"token punctuation\">&gt;</span></span>true<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ImplicitUsings</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>PackageId</span><span class=\"token punctuation\">&gt;</span></span>NetEscapades.EnumGenerators<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>PackageId</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Description</span><span class=\"token punctuation\">&gt;</span></span>A source generator for creating helper extension methods on enums using a [EnumExtensions] attribute<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Description</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>PackageReadmeFile</span><span class=\"token punctuation\">&gt;</span></span>README.md<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>PackageReadmeFile</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>EnforceExtendedAnalyzerRules</span><span class=\"token punctuation\">&gt;</span></span>true<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>EnforceExtendedAnalyzerRules</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>PropertyGroup</span><span class=\"token punctuation\">&gt;</span></span>\n\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ItemGroup</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>PackageReference</span> <span class=\"token attr-name\">Include</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Microsoft.CodeAnalysis.Analyzers<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">Version</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>3.3.4<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">PrivateAssets</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>all<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n    <span class=\"token comment\">&lt;!-- Use the RoslynApiVersion version defined in the project's .csproj --&gt;</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>PackageReference</span> <span class=\"token attr-name\">Include</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Microsoft.CodeAnalysis.CSharp<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">Version</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>$(RoslynApiVersion)<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">PrivateAssets</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>all<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ProjectReference</span> <span class=\"token attr-name\">Include</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>..\\NetEscapades.EnumGenerators.Attributes\\NetEscapades.EnumGenerators.Attributes.csproj<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">PrivateAssets</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>All<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ItemGroup</span><span class=\"token punctuation\">&gt;</span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Project</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre> <p>As you can see, this <code>.targets</code> file <em>only</em> includes values for controlling how the dlls are built. There's nothing related to actually packaging the file here. That's all handled in the <code>.Pack</code> project, which admittedly, feels a bit of a hack. The <em>.csproj</em> for the <code>.Pack</code> project looks like the following (heavily commented to try to make sense of it all!):</p> <pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Project</span> <span class=\"token attr-name\">Sdk</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Microsoft.NET.Sdk<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n\n  <span class=\"token comment\">&lt;!-- This project is just used to _pack_ the NuGet, containing both the other analyzers --&gt;</span>\n  <span class=\"token comment\">&lt;!-- We still import the same targets file to ensure we have the same values. There are --&gt;</span>\n  <span class=\"token comment\">&lt;!-- probably other, better ways of doing this (e.g. using Directory.Build.props), but --&gt;</span>\n  <span class=\"token comment\">&lt;!-- this is where I eventually ended up, and it works, so I haven't bothered experimenting --&gt;</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>PropertyGroup</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>RoslynApiVersion</span><span class=\"token punctuation\">&gt;</span></span>4.11.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>RoslynApiVersion</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>IsPackable</span><span class=\"token punctuation\">&gt;</span></span>true<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>IsPackable</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>PropertyGroup</span><span class=\"token punctuation\">&gt;</span></span>\n\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Import</span> <span class=\"token attr-name\">Project</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>NetEscapades.EnumGenerators.Build.targets<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n\n  <span class=\"token comment\">&lt;!-- These project references to each of the \"real\" projects ensures everything builds --&gt;</span>\n  <span class=\"token comment\">&lt;!-- in the correct order etc. We set ReferenceOutputAssembly=\"false\" though --&gt;</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ItemGroup</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ProjectReference</span> <span class=\"token attr-name\">Include</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>..\\NetEscapades.EnumGenerators\\NetEscapades.EnumGenerators.Roslyn4_04.csproj<span class=\"token punctuation\">\"</span></span> \n      <span class=\"token attr-name\">PrivateAssets</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>All<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">ReferenceOutputAssembly</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>false<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ProjectReference</span> <span class=\"token attr-name\">Include</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>..\\NetEscapades.EnumGenerators\\NetEscapades.EnumGenerators.Roslyn4_11.csproj<span class=\"token punctuation\">\"</span></span>\n      <span class=\"token attr-name\">PrivateAssets</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>All<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">ReferenceOutputAssembly</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>false<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ItemGroup</span><span class=\"token punctuation\">&gt;</span></span>\n\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ItemGroup</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token comment\">&lt;!-- We don't want to actually build anything in this project --&gt;</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Compile</span> <span class=\"token attr-name\">Remove</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>**\\*.cs<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>None</span> <span class=\"token attr-name\">Include</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>../../README.md<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">Pack</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">PackagePath</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>\\<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n\n    <span class=\"token comment\">&lt;!-- Pack the Roslyn4_04 project output into the analyzers/dotnet/roslyn4.4/cs folder --&gt;</span>\n    <span class=\"token comment\">&lt;!-- and the Roslyn4_11 project output into the analyzers/dotnet/roslyn4.11/cs folder --&gt;</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>None</span> <span class=\"token attr-name\">Include</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>$(OutputPath)\\..\\..\\NetEscapades.EnumGenerators.Roslyn4_04\\$(ArtifactsPivots)\\$(AssemblyName).dll<span class=\"token punctuation\">\"</span></span>\n          <span class=\"token attr-name\">Pack</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">PackagePath</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>analyzers/dotnet/roslyn4.4/cs<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">Visible</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>false<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>None</span> <span class=\"token attr-name\">Include</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>$(OutputPath)\\..\\..\\NetEscapades.EnumGenerators.Roslyn4_11\\$(ArtifactsPivots)\\$(AssemblyName).dll<span class=\"token punctuation\">\"</span></span>\n          <span class=\"token attr-name\">Pack</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">PackagePath</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>analyzers/dotnet/roslyn4.11/cs<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">Visible</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>false<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n\n    <span class=\"token comment\">&lt;!-- Pack the attributes dll for both Roslyn versions for referencing by the generator directly --&gt;</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>None</span> <span class=\"token attr-name\">Include</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>$(OutputPath)\\NetEscapades.EnumGenerators.Attributes.dll<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">Pack</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span>\n          <span class=\"token attr-name\">PackagePath</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>analyzers/dotnet/roslyn4.4/cs<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">Visible</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>false<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>None</span> <span class=\"token attr-name\">Include</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>$(OutputPath)\\NetEscapades.EnumGenerators.Attributes.dll<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">Pack</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span>\n          <span class=\"token attr-name\">PackagePath</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>analyzers/dotnet/roslyn4.11/cs<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">Visible</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>false<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n\n    <span class=\"token comment\">&lt;!-- Pack the attributes dll for referencing by the target project--&gt;</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>None</span> <span class=\"token attr-name\">Include</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>$(OutputPath)\\NetEscapades.EnumGenerators.Attributes.dll<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">Pack</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">PackagePath</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>lib\\netstandard2.0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">Visible</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>false<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>None</span> <span class=\"token attr-name\">Include</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>$(OutputPath)\\NetEscapades.EnumGenerators.Attributes.xml<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">Pack</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">PackagePath</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>lib\\netstandard2.0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">Visible</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>false<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>None</span> <span class=\"token attr-name\">Include</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>$(OutputPath)\\NetEscapades.EnumGenerators.Attributes.dll<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">Pack</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">PackagePath</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>lib\\net451<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">Visible</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>false<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>None</span> <span class=\"token attr-name\">Include</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>$(OutputPath)\\NetEscapades.EnumGenerators.Attributes.xml<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">Pack</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">PackagePath</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>lib\\net451<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">Visible</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>false<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ItemGroup</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Project</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre> <p>Phew, that's a lot, but it is <em>mostly</em> just a way to define a nuspec file while reusing values between the dlls. A simple <code>dotnet pack</code> and we have everything we need!</p> <p>Of course, as we're now <em>building</em> for multiple Roslyn versions, we really should <em>test</em> for those different versions too, right?</p> <h2 id=\"testing-multi-targeting-support\" class=\"heading-with-anchor\"><a href=\"#testing-multi-targeting-support\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Testing multi-targeting support</a></h2> <p>Testing is where things really start to get a little hairy. Prior to the multi-targeting support I had 3 main test projects, as I described previously:</p> <ul><li><code>NetEscapades.EnumGenerators.Tests</code></li> <li><code>NetEscapades.EnumGenerators.IntegrationTests</code></li> <li><code>NetEscapades.EnumGenerators.Nuget.IntegrationTests</code></li></ul> <p>However, if I really wanted to be sure that everything was working as expected, I decided I would need to run the tests <em>both</em> with the <code>4.4</code> Roslyn API and with the <code>4.11</code> Roslyn API. Which means running all the tests <em>twice</em> with two different versions of the .NET SDK.</p> <p>But on top of that the <em>unit test</em> project, <code>NetEscapades.EnumGenerators.Tests</code>, needs to reference one of the <em>NetEscapades.EnumGenerators</em> projects (<code>Roslyn4_04</code> or <code>Roslyn4_11</code>) directly, which means you actually need <em>two</em> versions of this project (or at least, that's what I did).</p> <blockquote> <p>This uses a \"normal\" project reference, so you can reference <em>either</em> version of the projects, the version of the SDK you're using for the unit testing/snapshot testing isn't critical.</p> </blockquote> <p>For the integration tests I took a slightly different approach. These test projects reference the <em>NetEscapades.EnumGenerators</em> projects as an <em>analyzer</em>. In this case we <em>can't</em> load the <code>Roslyn4_11</code> project unless we're using a supported version of the SDK, so it makes things a bit trickier. In the end, I ended up creating several new test projects:</p> <ul><li><code>NetEscapades.EnumGenerators.Tests.Roslyn4_04</code>: Runs all the unit/snapshot tests for the <code>4.4</code> version of the analyzer.</li> <li><code>NetEscapades.EnumGenerators.Tests.Roslyn4_11</code>: Runs all the unit/snapshot tests for the <code>4.11</code> version of the analyzer, including some additional snapshot tests for the interceptor support.</li> <li><code>NetEscapades.EnumGenerators.IntegrationTests</code>: References the <code>4.4</code> version of the generator, runs tests that are common to both implementations.</li> <li><code>NetEscapades.EnumGenerators.Interceptors.IntegrationTests</code>: References <em>either</em> the <code>4.4</code> or <code>4.11</code> version of the generator, <em>depending on the currently active .NET SDK version</em>, but only runs additional interceptor tests when using the <code>4.11</code> version</li> <li><code>NetEscapades.EnumGenerators.NuGet.IntegrationTests</code>: References the final generated NuGet package, and runs tests common to both implementations.</li> <li><code>NetEscapades.EnumGenerators.Interceptors.IntegrationTests</code>: References the final generated NuGet package, but only runs additional interceptor tests when using the <code>4.11</code> version.</li></ul> <p>If all that extra duplication sounds like a pain, you're not wrong 😅 Still, for full coverage, it's pretty much necessary. The following sections show how I handled the MSBuild/csproj mess.</p> <h3 id=\"splitting-the-snapshot-test-project\" class=\"heading-with-anchor\"><a href=\"#splitting-the-snapshot-test-project\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Splitting the snapshot test project</a></h3> <p>The <code>NetEscapades.EnumGenerators.Tests</code> project is <a href=\"/creating-a-source-generator-part-2-testing-an-incremental-generator-with-snapshot-testing/\">where I do the snapshot testing</a> of the generators, and is the main feedback loop when I'm developing a source generator. As I wanted to be able to quickly test both versions of the generator, all while developing locally, I split the project in two, each referencing a different version of <em>Microsoft.CodeAnalysis.CSharp</em> and of the generator project.</p> <p>As before, I reduced the duplication in the project files by moving the bulk of the definition into a <code>.targets</code> file, and referencing it from two different <em>.csproj</em> files. The <code>NetEscapades.EnumGenerators.Tests.Roslyn4_04</code> .csproj file looks like this:</p> <pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Project</span> <span class=\"token attr-name\">Sdk</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Microsoft.NET.Sdk<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>PropertyGroup</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>RoslynApiVersion</span><span class=\"token punctuation\">&gt;</span></span>4.4.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>RoslynApiVersion</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>PropertyGroup</span><span class=\"token punctuation\">&gt;</span></span>\n\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Import</span> <span class=\"token attr-name\">Project</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>NetEscapades.EnumGenerators.Tests.Project.targets<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ItemGroup</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ProjectReference</span> <span class=\"token attr-name\">Include</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>..\\..\\src\\NetEscapades.EnumGenerators\\NetEscapades.EnumGenerators.Roslyn4_04.csproj<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ItemGroup</span><span class=\"token punctuation\">&gt;</span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Project</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre> <p>The <code>Roslyn4_11</code> version is the same, but references the <code>Roslyn4_11</code> versions of the generator, sets <code>RoslynApiVersion</code> to <code>4.11.0</code>, and defines an additional MSBuild constant, <code>INTERCEPTORS</code>, for use in <code>#if</code> within test files . Both of the files reference the <code>.targets</code> file shown below, but the only real important part is the use of <code>$(RoslynApiVersion)</code>, which is taken from the projects file:</p> <pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Project</span><span class=\"token punctuation\">&gt;</span></span>\n\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>PropertyGroup</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>AssemblyName</span><span class=\"token punctuation\">&gt;</span></span>NetEscapades.EnumGenerators.Tests<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>AssemblyName</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>RootNamespace</span><span class=\"token punctuation\">&gt;</span></span>$(AssemblyName)<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>RootNamespace</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>TargetFrameworks</span><span class=\"token punctuation\">&gt;</span></span>netcoreapp3.1;net6.0;net7.0;net8.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>TargetFrameworks</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>IsPackable</span><span class=\"token punctuation\">&gt;</span></span>false<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>IsPackable</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>PropertyGroup</span><span class=\"token punctuation\">&gt;</span></span>\n\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ItemGroup</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token comment\">&lt;!-- Use the Roslyn API version passed in from the project file  --&gt;</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>PackageReference</span> <span class=\"token attr-name\">Include</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Microsoft.CodeAnalysis.CSharp<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">Version</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>$(RoslynApiVersion)<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">PrivateAssets</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>all<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>PackageReference</span> <span class=\"token attr-name\">Include</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Microsoft.NET.Test.Sdk<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">Version</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>16.11.0<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>PackageReference</span> <span class=\"token attr-name\">Include</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>System.ComponentModel.Annotations<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">Version</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>5.0.0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">Condition</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token punctuation\">'</span>$(TargetFramework)<span class=\"token punctuation\">'</span> == <span class=\"token punctuation\">'</span>net48<span class=\"token punctuation\">'</span><span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>PackageReference</span> <span class=\"token attr-name\">Include</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Verify.Xunit<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">Version</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>14.3.0<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>PackageReference</span> <span class=\"token attr-name\">Include</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>xunit<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">Version</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>2.4.1<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>PackageReference</span> <span class=\"token attr-name\">Include</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>xunit.runner.visualstudio<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">Version</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>2.4.3<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>IncludeAssets</span><span class=\"token punctuation\">&gt;</span></span>runtime; build; native; contentfiles; analyzers; buildtransitive<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>IncludeAssets</span><span class=\"token punctuation\">&gt;</span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>PrivateAssets</span><span class=\"token punctuation\">&gt;</span></span>all<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>PrivateAssets</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>PackageReference</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>PackageReference</span> <span class=\"token attr-name\">Include</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>coverlet.collector<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">Version</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>3.1.0<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>IncludeAssets</span><span class=\"token punctuation\">&gt;</span></span>runtime; build; native; contentfiles; analyzers; buildtransitive<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>IncludeAssets</span><span class=\"token punctuation\">&gt;</span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>PrivateAssets</span><span class=\"token punctuation\">&gt;</span></span>all<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>PrivateAssets</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>PackageReference</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>PackageReference</span> <span class=\"token attr-name\">Include</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>FluentAssertions<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">Version</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>6.12.0<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ItemGroup</span><span class=\"token punctuation\">&gt;</span></span>\n\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ItemGroup</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ProjectReference</span> <span class=\"token attr-name\">Include</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>..\\..\\src\\NetEscapades.EnumGenerators.Attributes\\NetEscapades.EnumGenerators.Attributes.csproj<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ItemGroup</span><span class=\"token punctuation\">&gt;</span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Project</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre> <p>Both of these test projects can run on any support .NET SDK version, because the generator directly uses the <code>Compilation</code> types provided in the <em>Microsoft.CodeAnalysis.CSharp</em> package, rather than relying on it being provided by the .NET SDK itself. That's different from the integration test projects, which <em>do</em> rely on the SDK.</p> <h3 id=\"multi-targeting-the-integration-test-project-for-multiple-net-sdk-versions\" class=\"heading-with-anchor\"><a href=\"#multi-targeting-the-integration-test-project-for-multiple-net-sdk-versions\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Multi-targeting the integration test project for multiple .NET SDK versions</a></h3> <p>The integration test projects for my source generators reference the generator projects, but add the generator with <code>OutputItemType=\"Analyzer\"</code>, as described <a href=\"/creating-a-source-generator-part-3-integration-testing-and-packaging/\">in a previous post</a>. This lets you test your generator <em>similar</em> to how it will be used \"in production\", but without needing to create and reference a NuGet package locally, which is a bit of a pain.</p> <p>In integration tests, your source generator is running <em>in</em> the compiler, so you need to be careful about the Roslyn APIs. You can only reference and test functionality exposed by the <code>Roslyn4_11</code> project if you're using a high enough SDK version. To achieve the testing I wanted, I needed to conditionally reference a different project (<code>Roslyn4_04</code> or <code>Roslyn4_11</code>) <em>based on the version of the .NET SDK I was building with</em>.</p> <p>It turns out, I've never had to do that before. I've had <em>minimum</em> .NET SDK version requirements, but needing to run with two different SDK versions isn't something I'd tried before. Luckily, it turns out that MSBuild exposes the .NET SDK version you're using as a property. I used this in my test project <em>.csproj</em> to set a simple MSBuild property and a constant, which I could use further on in the <em>.csproj</em> file, and in <code>#if</code> conditions in the code.</p> <p>This post is already long, so I've just shown the pertinent parts of the <em>.csproj</em> file below:</p> <pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token comment\">&lt;!-- Are we building with .NET SDK 8.0.400 or greater? --&gt;</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>PropertyGroup</span> <span class=\"token attr-name\">Condition</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>$([MSBuild]::VersionGreaterThanOrEquals(<span class=\"token punctuation\">'</span>$(NETCoreSdkVersion)<span class=\"token punctuation\">'</span>, <span class=\"token punctuation\">'</span>8.0.400<span class=\"token punctuation\">'</span>))<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token comment\">&lt;!-- If so, set some properties and constants --&gt;</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>UsingModernDotNetSdk</span><span class=\"token punctuation\">&gt;</span></span>true<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>UsingModernDotNetSdk</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>DefineConstants</span><span class=\"token punctuation\">&gt;</span></span>$(DefineConstants);INTERCEPTORS<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>DefineConstants</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>PropertyGroup</span><span class=\"token punctuation\">&gt;</span></span>\n\n<span class=\"token comment\">&lt;!-- This project can only be loaded when we have a high enough compiler version --&gt;</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ItemGroup</span> <span class=\"token attr-name\">Condition</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>$(UsingModernDotNetSdk) == true<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token comment\">&lt;!-- Can use the 4_11 project --&gt;</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ProjectReference</span> <span class=\"token attr-name\">Include</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>..\\..\\src\\NetEscapades.EnumGenerators\\NetEscapades.EnumGenerators.Roslyn4_11.csproj<span class=\"token punctuation\">\"</span></span>\n                    <span class=\"token attr-name\">OutputItemType</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Analyzer<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">ReferenceOutputAssembly</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>false<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ItemGroup</span><span class=\"token punctuation\">&gt;</span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ItemGroup</span> <span class=\"token attr-name\">Condition</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>$(UsingModernDotNetSdk) != true<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token comment\">&lt;!-- Have to use the 4_04 project instead--&gt;</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ProjectReference</span> <span class=\"token attr-name\">Include</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>..\\..\\src\\NetEscapades.EnumGenerators\\NetEscapades.EnumGenerators.Roslyn4_04.csproj<span class=\"token punctuation\">\"</span></span>\n                    <span class=\"token attr-name\">OutputItemType</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Analyzer<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">ReferenceOutputAssembly</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>false<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ItemGroup</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre> <p>That's the biggest difference in this project; the test files make judicious use of <code>#if INTERCEPTORS</code> to both test the behaviour where interceptors <em>are</em> available (in <code>4.11</code>) but also where they're <em>not</em> available (<code>4.4</code>).</p> <p>The final piece of the puzzle I want to touch on are how I set up the testing for this in CI.</p> <h2 id=\"setting-up-a-ci-build-in-github-actions\" class=\"heading-with-anchor\"><a href=\"#setting-up-a-ci-build-in-github-actions\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Setting up a CI build in GitHub Actions</a></h2> <p>Prior to the above changes, I already had a relatively simple, but thorough, GitHub Actions CI pipeline set up for building and testing the package, which looked something like the following (I've reduced some of the unimportant aspects):</p> <pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> BuildAndPack\n\n<span class=\"token comment\"># Build pushes and PRs</span>\n<span class=\"token key atrule\">on</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">push</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">branches</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> main\n    <span class=\"token key atrule\">tags</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token string\">'*'</span>\n  <span class=\"token key atrule\">pull_request</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">branches</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token string\">'*'</span>\n\n<span class=\"token key atrule\">jobs</span><span class=\"token punctuation\">:</span>\n  <span class=\"token comment\"># Build and test on multiple OS</span>\n  <span class=\"token key atrule\">build-and-test</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">strategy</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">matrix</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">include</span><span class=\"token punctuation\">:</span>\n          <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">os</span><span class=\"token punctuation\">:</span> windows\n            <span class=\"token key atrule\">vm</span><span class=\"token punctuation\">:</span> windows<span class=\"token punctuation\">-</span>latest\n          <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">os</span><span class=\"token punctuation\">:</span> linux\n            <span class=\"token key atrule\">vm</span><span class=\"token punctuation\">:</span> ubuntu<span class=\"token punctuation\">-</span>latest\n          <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">os</span><span class=\"token punctuation\">:</span> macos\n            <span class=\"token key atrule\">vm</span><span class=\"token punctuation\">:</span> macos<span class=\"token punctuation\">-</span><span class=\"token number\">13</span>\n\n    <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> matrix.os<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n    <span class=\"token key atrule\">runs-on</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> matrix.vm<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n    <span class=\"token key atrule\">steps</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> actions/checkout@v4\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> actions/setup<span class=\"token punctuation\">-</span>dotnet@v4\n        <span class=\"token key atrule\">with</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">dotnet-version</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">|</span><span class=\"token scalar string\">\n            8.0.402\n            6.0.x\n            3.1.x</span>\n      <span class=\"token comment\"># Build, Test, Pack, Test the NuGet package, and (optionally) push to NuGet</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Run './build.cmd Clean Test TestPackage PushToNuGet'\n        <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span> ./build.cmd Clean Test TestPackage PushToNuGet\n        <span class=\"token key atrule\">env</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">NuGetToken</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> secrets.NUGET_TOKEN <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n</code></pre> <p>Previously, this whole build was using the <code>8.0.402</code> .NET SDK, but with my changes I wanted to ensure I could run <em>some</em> of the tests with an earlier version of the .NET SDK. Specifically, and for simplicity, I decided to <em>only</em> run the NuGet package tests on both SDKs in CI. Consequently, I updated the build pipeline to be something like the following (again, simplified, but with the changes highlighted):</p> <pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> BuildAndPack\n\n<span class=\"token comment\"># Build pushes and PRs</span>\n<span class=\"token key atrule\">on</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">push</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">branches</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> main\n    <span class=\"token key atrule\">tags</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token string\">'*'</span>\n  <span class=\"token key atrule\">pull_request</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">branches</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token string\">'*'</span>\n\n<span class=\"token key atrule\">jobs</span><span class=\"token punctuation\">:</span>\n  <span class=\"token comment\"># Build and test on multiple OS</span>\n  <span class=\"token key atrule\">build-and-test</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">strategy</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">matrix</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">include</span><span class=\"token punctuation\">:</span>\n          <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">os</span><span class=\"token punctuation\">:</span> windows\n            <span class=\"token key atrule\">vm</span><span class=\"token punctuation\">:</span> windows<span class=\"token punctuation\">-</span>latest\n          <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">os</span><span class=\"token punctuation\">:</span> linux\n            <span class=\"token key atrule\">vm</span><span class=\"token punctuation\">:</span> ubuntu<span class=\"token punctuation\">-</span>latest\n          <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">os</span><span class=\"token punctuation\">:</span> macos\n            <span class=\"token key atrule\">vm</span><span class=\"token punctuation\">:</span> macos<span class=\"token punctuation\">-</span><span class=\"token number\">13</span>\n\n    <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> matrix.os<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n    <span class=\"token key atrule\">runs-on</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> matrix.vm<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n    <span class=\"token key atrule\">steps</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> actions/checkout@v4\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> actions/setup<span class=\"token punctuation\">-</span>dotnet@v4\n        <span class=\"token key atrule\">with</span><span class=\"token punctuation\">:</span>\n          <span class=\"token comment\"># NOTE: installing the 8.0.110 SDK too</span>\n          <span class=\"token key atrule\">dotnet-version</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">|</span><span class=\"token scalar string\">\n            8.0.402\n            8.0.110\n            6.0.x\n            3.1.x</span>\n      <span class=\"token comment\"># Force the build to use the 8.0.402 SDK specifically</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span> dotnet new globaljson <span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>sdk<span class=\"token punctuation\">-</span>version \"8.0.402\" <span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>force\n\n      <span class=\"token comment\"># Run the build, test, pack, and package test with the 8.0.402 SDK</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Run './build.cmd Clean Test TestPackage'\n        <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span> ./build.cmd Clean Test TestPackage\n\n      <span class=\"token comment\"># Force the build to use an earlier .NET SDK</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span> dotnet new globaljson <span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>sdk<span class=\"token punctuation\">-</span>version \"8.0.110\" <span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>force\n\n      <span class=\"token comment\"># Run the TestPackage stage with the earlier SDK (skipping dependent steps)</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Run './build.cmd TestPackage PushToNuGet <span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>skip'\n        <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span> ./build.cmd TestPackage PushToNuGet <span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>skip\n        <span class=\"token key atrule\">env</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">NuGetToken</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> secrets.NUGET_TOKEN <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n</code></pre> <p>I <em>could</em> have chosen to run <em>all</em> the integration tests with the earlier SDK, but it didn't seem worth the effort, as I share <a href=\"/creating-a-source-generator-part-3-integration-testing-and-packaging/\">the same actual test files between both the integration tests and package tests</a>. So with that, I'm done!</p> <h2 id=\"was-it-worth-it-should-you-do-it-\" class=\"heading-with-anchor\"><a href=\"#was-it-worth-it-should-you-do-it-\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Was it worth it? Should you do it?</a></h2> <p>As you can tell by the length of the post, there's a <em>lot</em> of moving pieces required to support multiple Roslyn API versions in a source generator. This post is actually quite brief compared to the changes I found I needed to make in my project, as I haven't touched on a bunch of additional points.</p> <blockquote> <p>A prime example of work not covered here is tracking your tests in CI. I wanted to make sure I didn't \"lose\" any tests with these changes, and to understand exactly what I was testing under what SDK. I used the <code>EnricoMi/publish-unit-test-result-action@v2</code> GitHub Action for this, but tracking it properly required a bunch of gnarly <code>#if</code>/<code>#elif</code> that I didn't go into in this post, but <a href=\"https://github.com/andrewlock/NetEscapades.EnumGenerators/blob/main/tests/NetEscapades.EnumGenerators.Interceptors.IntegrationTests/InterceptorTests.cs#L8-L28\">which you can see in the repo</a> if you like pain😆</p> </blockquote> <p>So…was it worth it? Well, it depends. If you don't <em>have</em> to do this, then don't. It's a <em>lot</em> of work and added complexity to a project, without a big pay off. <em>In general</em> there aren't a lot of reasons <em>not</em> to just update your .NET SDK, so there <em>shouldn't</em> be a big call for supporting older versions of the SDK.</p> <blockquote> <p>Ironically, I have one in my day job—.NET 8 dropped support for the unsupported (but still heavily used) CentOS 7 Linux distro (and related distros), which means we <em>can't</em> upgrade the SDK for the portions of the build that need to run on CentOS 7🙁</p> </blockquote> <p>In my case, I wanted to increase the .NET SDK requirement so I could add a <em>preview</em> of an <em>optional</em> component. That didn't seem a big enough justification for forcing <em>everyone</em> to update their .NET SDK, so multi-targeting <em>somewhat</em> made sense. Honestly, I mostly took the multi-targeting approach to see how bad it would be. And the verdict is: it's Pretty Bad™😅</p> <h2 id=\"summary\" class=\"heading-with-anchor\"><a href=\"#summary\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Summary</a></h2> <p>In this post I showed how you could update an existing source generator project to add multi-targeting support for multiple Roslyn API versions. This ensures your source generator can run on the widest possible range of .NET SDK versions and that features which require a newer SDK version can \"light up\" when it's available. Unfortunately this process is somewhat complex.</p> <p>In this post I described the changes I made to the project files of my <em>NetEscapades.EnumGenerators</em> source generator project when I added Roslyn API multi-targeting support. I split the main source generator API into two, to produce two different dlls targeting different versions of the <em>Microsoft.CodeAnalysis.CSharp</em> package. To test the changes, I split my unit testing projects in two, each testing a different version of the source generator project, and updated the integration tests to support working with multiple versions of the .NET SDK.</p> <p>Overall multi-targeting multiple versions of the .NET SDK adds quite a lot of complexity to the various projects you need, and I wouldn't recommend it unless you definitely need to.</p> ",
    "sanitized": "This is the fourteen post in the series: Creating a source generator.  Part 1 - Creating an incremental generatorPart 2 - Testing an incremental generator with snapshot testingPart 3 - Integration testing and NuGet packagingPart 4 - Customising generated code with marker attributesPart 5 - Finding a type declaration's namespace and type hierarchyPart 6 - Saving source generator output in source controlPart 7 - Solving the source generator 'marker attribute' problem - Part 1Part 8 - Solving the source generator 'marker attribute' problem - Part 2Part 9 - Avoiding performance pitfalls in incremental generatorsPart 10 - Testing your incremental generator pipeline outputs are cacheablePart 11 - Implementing an interceptor with a source generatorPart 12 - Reading compilation options and the C# version in source generatorsPart 13 - Accessing MSBuild properties and user configuration from source generatorsPart 14 - Supporting multiple .NET SDK versions in a source generator (this post) In my previous post I described why you might want (or need) to target multiple versions of the .NET SDK in a source generator. In this post I show how I applied this to my NetEscapades.EnumGenerators source generator, so that I could support features only available in the .NET 8/9 SDK, while still supporting users stuck on the .NET 7 SDK. .NET SDK versions, Microsoft.CodeAnalysis.CSharp, and NuGet package layouts In my previous post I provided a long description of how and why you might need to target multiple versions of the .NET SDK. This post directly follows on from that one, so if you haven't, I suggest reading that one first. In summary, when you create a source generator, you reference a specific version of the Microsoft.CodeAnalysis.CSharp NuGet package. The version of this package you choose defines the minimum version of Visual Studio, MSBuild, and the .NET SDK that your source generator will work with. The higher the version, the more Roslyn APIs you can use, but the higher the version of the .NET SDK the consumer must be using. In the .NET 6 SDK, Microsoft updated the logic that finds analyzers/source generators in a NuGet file to allow versioning a source generator by Roslyn API version. That means you can ship a source generator that provides basic functionality when used with the .NET 6 SDK (for example) but which provides additional functionality when used with the .NET 7 or .NET 8 SDKs, for example. You do this by shipping multiple versions of the generator in the NuGet package, each compiled against a different version of Microsoft.CodeAnalysis.CSharp:  The .NET SDK then loads the highest supported version of the analyzer, based on the version of the Roslyn API that it supports. I covered most of the details of why you might want to multi-target multiple roslyn versions in your package in the previous post, so in this post I'll show how I added multi-targeting support to my NetEscapades.EnumGenerators source generator. Adding multi-targeting support for NetEscapades.EnumGenerators The NetEscapades.EnumGenerators package is a source generator for making working with enums faster. I recently added experimental support for interceptors to the package, but this required using a newer version of the Roslyn API than I was previously. The interceptor API I needed was only available in .NET SDK version 8.0.400 (version 4.11 of the Roslyn API in Microsoft.CodeAnalysis.CSharp), whereas I was currently targeting 4.4. The easy approach would have been to simply update the version of Microsoft.CodeAnalysis.CSharp to 4.11.0 to give access to the 4.11 Roslyn API. However, doing so would have meant that anyone currently using the package with a .NET 7 SDK or a .NET 8 SDK below 8.0.400 would have been broken. Rather than inconvenience people, I decided to have a go at multi-targeting. This would ensure that down-version users could use the basic functionality, but the interceptor support would not be available. Meanwhile, anyone using 8.0.400 or higher of the .NET SDK would be able to enable the interceptor functionality. The best of both worlds! The approach I took to multi-targeting was heavily based on the approach taken by the built-in generators like the System.Text.Json generator and the Microsoft.Extensions.Logging generator when they first added multi-targeting support. I implemented the bulk of the support in a single PR, and it's broadly the same approach I show in this post. The original: prior to multi-targeting To set the stage, prior to multi-targeting, the NetEscapades.EnumGenerators source generator targeted version 4.4 of the Roslyn API, by referencing 4.4.0 of the Microsoft.CodeAnalysis.CSharp NuGet package. This API version corresponds to the .NET 7 SDK, and gives access to the recommended ForAttributeWithMetadataName API. The solution consisted of two main projects: NetEscapades.EnumGenerators: The main source generator project NetEscapades.EnumGenerators.Attributes: A library project containing the \"marker\" attributes that drive the source generator There's also a bunch of test projects, some of the main ones are described below. I've described these approaches in more detail previously in this series: NetEscapades.EnumGenerators.Tests: Unit tests for the generator functionality, and snapshot tests comparing the generated output NetEscapades.EnumGenerators.IntegrationTests: \"Integration\" test project that references the source generator project directly, and runs a bunch of tests. This ensures the generated output actually compiles, and gives the expected values when executed, for example. NetEscapades.EnumGenerators.Nuget.IntegrationTests: Runs the same tests as the above project, but instead of referencing the source generator directly, it uses a version of the generator that has been fully packed into a NuGet package. This is the closest to a \"real life\" scenario you can get to. There are a bunch of other tests for additional variations, but I'll ignore those for brevity:  Now we have the starting point, lets begin the migration to support multiple Roslyn versions. Splitting the source generator project Prior to supporting the multi-targeting, the NetEscapades.EnumGenerators .csproj file looked as shown below. This includes a variety of properties and items. Some of the properties (<TargetFramework>, <PackageReference>) are related to building the source generator dll, some parts are related to properties of the final NuGet package (<PackageId>, <Description>), and some are related to controlling the contents of the final NuGet package (<PackageReadmeFile>, PackagePath attributes): <Project Sdk=\"Microsoft.NET.Sdk\">\n\n  <PropertyGroup>\n    <TargetFramework>netstandard2.0</TargetFramework>\n    <IncludeBuildOutput>false</IncludeBuildOutput>\n    <Nullable>enable</Nullable>\n    <ImplicitUsings>true</ImplicitUsings>\n    <PackageId>NetEscapades.EnumGenerators</PackageId>\n    <Description>A source generator for creating helper extension methods on enums using a [EnumExtensions] attribute</Description>\n    <PackageReadmeFile>README.md</PackageReadmeFile>\n  </PropertyGroup>\n\n  <!-- These are references required by the source generator -->\n  <ItemGroup>\n    <PackageReference Include=\"Microsoft.CodeAnalysis.Analyzers\" Version=\"3.3.3\" PrivateAssets=\"all\" />\n    <PackageReference Include=\"Microsoft.CodeAnalysis.CSharp\" Version=\"4.4.0\" PrivateAssets=\"all\" />\n    <ProjectReference Include=\"..\\NetEscapades.EnumGenerators.Attributes\\NetEscapades.EnumGenerators.Attributes.csproj\" PrivateAssets=\"All\" />\n  </ItemGroup>\n\n  <!-- These tweak and control the contents of the NuGet package -->\n  <ItemGroup>\n    <None Include=\"../../README.md\" Pack=\"true\" PackagePath=\"\\\" />\n\n    <!-- Pack the source generator and attributes dll -->\n    <None Include=\"$(OutputPath)\\$(AssemblyName).dll\" Pack=\"true\" PackagePath=\"analyzers/dotnet/cs\" Visible=\"false\" />\n    <None Include=\"$(OutputPath)\\NetEscapades.EnumGenerators.Attributes.dll\" Pack=\"true\" PackagePath=\"analyzers/dotnet/cs\" Visible=\"false\" />\n\n    <!-- Pack the attributes file to be referenced by the target project -->\n    <None Include=\"$(OutputPath)\\NetEscapades.EnumGenerators.Attributes.dll\" Pack=\"true\" PackagePath=\"lib\\netstandard2.0\" Visible=\"true\" />\n    <None Include=\"$(OutputPath)\\NetEscapades.EnumGenerators.Attributes.xml\" Pack=\"true\" PackagePath=\"lib\\netstandard2.0\" Visible=\"true\" />\n    <None Include=\"$(OutputPath)\\NetEscapades.EnumGenerators.Attributes.dll\" Pack=\"true\" PackagePath=\"lib\\net451\" Visible=\"true\" />\n    <None Include=\"$(OutputPath)\\NetEscapades.EnumGenerators.Attributes.xml\" Pack=\"true\" PackagePath=\"lib\\net451\" Visible=\"true\" />\n  </ItemGroup>\n</Project>\n To support multi-targeting, we need to make some significant changes to this project: Split the source generator project into multiple projects, each referencing different version of Microsoft.CodeAnalysis.CSharp. One project references version 4.4.0. This is the \"lower\" bound for our SDK support, and corresponds to the .NET 7 SDK. Another project references version 4.11.0. This is the \"enhanced\" SDK support, which we need for interceptor support, and corresponds to 8.0.4xx of the .NET SDK.  Update the projects to share most of the implementation. Update the implementation in the 4.11 project with the additional functionality. Create a separate project that is used solely to pack the two source generator dlls into the final NuGet package. You could also use a nuspec file for this, but I prefer to use a csproj instead. The final result looks something like this in the solution explorer:  So the original NetEscapades.EnumGenerators project has gone, and we have three projects in its place: NetEscapades.EnumGenerators.Rolsyn4_04: The version of the generator that references Microsoft.CodeAnalysis.CSharp 4.4.0. NetEscapades.EnumGenerators.Rolsyn4_11: The version of the generator that references Microsoft.CodeAnalysis.CSharp 4.11.0. NetEscapades.EnumGenerators.Pack: A project focused solely on collecting the output artifacts from the other source projects and producing the final NuGet package. Note that the three projects are peers in the solution explorer, but the files are all side-by-side in the same folder in the filesystem, rather than being in separate folders:  Now lets look at the project files, as well as some ancillary files. Exploring the new project files We'll start by looking at the NetEscapades.EnumGenerators.Rolsyn4_04 and NetEscapades.EnumGenerators.Rolsyn4_11 .csproj files. These are quite simple, basically just defining the version of the Roslyn API they require and then importing a separate .targets file. The Rolsyn4_04 project looks like this: <Project Sdk=\"Microsoft.NET.Sdk\">\n\n  <PropertyGroup>\n    <RoslynApiVersion>4.4.0</RoslynApiVersion>\n    <IsPackable>false</IsPackable>\n  </PropertyGroup>\n\n  <Import Project=\"NetEscapades.EnumGenerators.Build.targets\" />\n\n</Project>\n and the Rolsyn4_11 project looks like this: <Project Sdk=\"Microsoft.NET.Sdk\">\n\n  <PropertyGroup>\n    <RoslynApiVersion>4.11.0</RoslynApiVersion>\n    <DefineConstants>$(DefineConstants);INTERCEPTORS</DefineConstants>\n    <IsPackable>false</IsPackable>\n  </PropertyGroup>\n\n  <Import Project=\"NetEscapades.EnumGenerators.Build.targets\" />\n\n</Project>\n Note that I've defined an additional constant in the Rolsyn4_11 project, so that I can use #if INTERCEPTORS in the source generator code, and share the same files between both projects. The bulk of the project definition happens in the NetEscapades.EnumGenerators.Build.targets file (the name is chosen arbitrarily). This includes most of the same property definitions as we had before, with a couple of tweaks, which I've highlighted in comments below: <Project>\n\n  <PropertyGroup>\n    <TargetFramework>netstandard2.0</TargetFramework>\n    <IncludeBuildOutput>false</IncludeBuildOutput>\n    <PackageId>NetEscapades.EnumGenerators</PackageId>\n\n    <!-- Explicitly define these, so that both projects produce dlls with the same name -->\n    <AssemblyName>$(PackageId)</AssemblyName>\n    <RootNamespace>$(PackageId)</RootNamespace>\n    <Nullable>enable</Nullable>\n    <ImplicitUsings>true</ImplicitUsings>\n    <PackageId>NetEscapades.EnumGenerators</PackageId>\n    <Description>A source generator for creating helper extension methods on enums using a [EnumExtensions] attribute</Description>\n    <PackageReadmeFile>README.md</PackageReadmeFile>\n    <EnforceExtendedAnalyzerRules>true</EnforceExtendedAnalyzerRules>\n  </PropertyGroup>\n\n  <ItemGroup>\n    <PackageReference Include=\"Microsoft.CodeAnalysis.Analyzers\" Version=\"3.3.4\" PrivateAssets=\"all\" />\n    <!-- Use the RoslynApiVersion version defined in the project's .csproj -->\n    <PackageReference Include=\"Microsoft.CodeAnalysis.CSharp\" Version=\"$(RoslynApiVersion)\" PrivateAssets=\"all\" />\n    <ProjectReference Include=\"..\\NetEscapades.EnumGenerators.Attributes\\NetEscapades.EnumGenerators.Attributes.csproj\" PrivateAssets=\"All\" />\n  </ItemGroup>\n\n</Project>\n As you can see, this .targets file only includes values for controlling how the dlls are built. There's nothing related to actually packaging the file here. That's all handled in the .Pack project, which admittedly, feels a bit of a hack. The .csproj for the .Pack project looks like the following (heavily commented to try to make sense of it all!): <Project Sdk=\"Microsoft.NET.Sdk\">\n\n  <!-- This project is just used to _pack_ the NuGet, containing both the other analyzers -->\n  <!-- We still import the same targets file to ensure we have the same values. There are -->\n  <!-- probably other, better ways of doing this (e.g. using Directory.Build.props), but -->\n  <!-- this is where I eventually ended up, and it works, so I haven't bothered experimenting -->\n  <PropertyGroup>\n    <RoslynApiVersion>4.11.0</RoslynApiVersion>\n    <IsPackable>true</IsPackable>\n  </PropertyGroup>\n\n  <Import Project=\"NetEscapades.EnumGenerators.Build.targets\" />\n\n  <!-- These project references to each of the \"real\" projects ensures everything builds -->\n  <!-- in the correct order etc. We set ReferenceOutputAssembly=\"false\" though -->\n  <ItemGroup>\n    <ProjectReference Include=\"..\\NetEscapades.EnumGenerators\\NetEscapades.EnumGenerators.Roslyn4_04.csproj\" \n      PrivateAssets=\"All\" ReferenceOutputAssembly=\"false\" />\n    <ProjectReference Include=\"..\\NetEscapades.EnumGenerators\\NetEscapades.EnumGenerators.Roslyn4_11.csproj\"\n      PrivateAssets=\"All\" ReferenceOutputAssembly=\"false\" />\n  </ItemGroup>\n\n  <ItemGroup>\n    <!-- We don't want to actually build anything in this project -->\n    <Compile Remove=\"**\\*.cs\" />\n    <None Include=\"../../README.md\" Pack=\"true\" PackagePath=\"\\\" />\n\n    <!-- Pack the Roslyn4_04 project output into the analyzers/dotnet/roslyn4.4/cs folder -->\n    <!-- and the Roslyn4_11 project output into the analyzers/dotnet/roslyn4.11/cs folder -->\n    <None Include=\"$(OutputPath)\\..\\..\\NetEscapades.EnumGenerators.Roslyn4_04\\$(ArtifactsPivots)\\$(AssemblyName).dll\"\n          Pack=\"true\" PackagePath=\"analyzers/dotnet/roslyn4.4/cs\" Visible=\"false\" />\n    <None Include=\"$(OutputPath)\\..\\..\\NetEscapades.EnumGenerators.Roslyn4_11\\$(ArtifactsPivots)\\$(AssemblyName).dll\"\n          Pack=\"true\" PackagePath=\"analyzers/dotnet/roslyn4.11/cs\" Visible=\"false\" />\n\n    <!-- Pack the attributes dll for both Roslyn versions for referencing by the generator directly -->\n    <None Include=\"$(OutputPath)\\NetEscapades.EnumGenerators.Attributes.dll\" Pack=\"true\"\n          PackagePath=\"analyzers/dotnet/roslyn4.4/cs\" Visible=\"false\" />\n    <None Include=\"$(OutputPath)\\NetEscapades.EnumGenerators.Attributes.dll\" Pack=\"true\"\n          PackagePath=\"analyzers/dotnet/roslyn4.11/cs\" Visible=\"false\" />\n\n    <!-- Pack the attributes dll for referencing by the target project-->\n    <None Include=\"$(OutputPath)\\NetEscapades.EnumGenerators.Attributes.dll\" Pack=\"true\" PackagePath=\"lib\\netstandard2.0\" Visible=\"false\" />\n    <None Include=\"$(OutputPath)\\NetEscapades.EnumGenerators.Attributes.xml\" Pack=\"true\" PackagePath=\"lib\\netstandard2.0\" Visible=\"false\" />\n    <None Include=\"$(OutputPath)\\NetEscapades.EnumGenerators.Attributes.dll\" Pack=\"true\" PackagePath=\"lib\\net451\" Visible=\"false\" />\n    <None Include=\"$(OutputPath)\\NetEscapades.EnumGenerators.Attributes.xml\" Pack=\"true\" PackagePath=\"lib\\net451\" Visible=\"false\" />\n\n  </ItemGroup>\n</Project>\n Phew, that's a lot, but it is mostly just a way to define a nuspec file while reusing values between the dlls. A simple dotnet pack and we have everything we need! Of course, as we're now building for multiple Roslyn versions, we really should test for those different versions too, right? Testing multi-targeting support Testing is where things really start to get a little hairy. Prior to the multi-targeting support I had 3 main test projects, as I described previously: NetEscapades.EnumGenerators.Tests NetEscapades.EnumGenerators.IntegrationTests NetEscapades.EnumGenerators.Nuget.IntegrationTests However, if I really wanted to be sure that everything was working as expected, I decided I would need to run the tests both with the 4.4 Roslyn API and with the 4.11 Roslyn API. Which means running all the tests twice with two different versions of the .NET SDK. But on top of that the unit test project, NetEscapades.EnumGenerators.Tests, needs to reference one of the NetEscapades.EnumGenerators projects (Roslyn4_04 or Roslyn4_11) directly, which means you actually need two versions of this project (or at least, that's what I did).  This uses a \"normal\" project reference, so you can reference either version of the projects, the version of the SDK you're using for the unit testing/snapshot testing isn't critical.  For the integration tests I took a slightly different approach. These test projects reference the NetEscapades.EnumGenerators projects as an analyzer. In this case we can't load the Roslyn4_11 project unless we're using a supported version of the SDK, so it makes things a bit trickier. In the end, I ended up creating several new test projects: NetEscapades.EnumGenerators.Tests.Roslyn4_04: Runs all the unit/snapshot tests for the 4.4 version of the analyzer. NetEscapades.EnumGenerators.Tests.Roslyn4_11: Runs all the unit/snapshot tests for the 4.11 version of the analyzer, including some additional snapshot tests for the interceptor support. NetEscapades.EnumGenerators.IntegrationTests: References the 4.4 version of the generator, runs tests that are common to both implementations. NetEscapades.EnumGenerators.Interceptors.IntegrationTests: References either the 4.4 or 4.11 version of the generator, depending on the currently active .NET SDK version, but only runs additional interceptor tests when using the 4.11 version NetEscapades.EnumGenerators.NuGet.IntegrationTests: References the final generated NuGet package, and runs tests common to both implementations. NetEscapades.EnumGenerators.Interceptors.IntegrationTests: References the final generated NuGet package, but only runs additional interceptor tests when using the 4.11 version. If all that extra duplication sounds like a pain, you're not wrong 😅 Still, for full coverage, it's pretty much necessary. The following sections show how I handled the MSBuild/csproj mess. Splitting the snapshot test project The NetEscapades.EnumGenerators.Tests project is where I do the snapshot testing of the generators, and is the main feedback loop when I'm developing a source generator. As I wanted to be able to quickly test both versions of the generator, all while developing locally, I split the project in two, each referencing a different version of Microsoft.CodeAnalysis.CSharp and of the generator project. As before, I reduced the duplication in the project files by moving the bulk of the definition into a .targets file, and referencing it from two different .csproj files. The NetEscapades.EnumGenerators.Tests.Roslyn4_04 .csproj file looks like this: <Project Sdk=\"Microsoft.NET.Sdk\">\n\n  <PropertyGroup>\n    <RoslynApiVersion>4.4.0</RoslynApiVersion>\n  </PropertyGroup>\n\n  <Import Project=\"NetEscapades.EnumGenerators.Tests.Project.targets\" />\n\n  <ItemGroup>\n    <ProjectReference Include=\"..\\..\\src\\NetEscapades.EnumGenerators\\NetEscapades.EnumGenerators.Roslyn4_04.csproj\" />\n  </ItemGroup>\n\n</Project>\n The Roslyn4_11 version is the same, but references the Roslyn4_11 versions of the generator, sets RoslynApiVersion to 4.11.0, and defines an additional MSBuild constant, INTERCEPTORS, for use in #if within test files . Both of the files reference the .targets file shown below, but the only real important part is the use of $(RoslynApiVersion), which is taken from the projects file: <Project>\n\n  <PropertyGroup>\n    <AssemblyName>NetEscapades.EnumGenerators.Tests</AssemblyName>\n    <RootNamespace>$(AssemblyName)</RootNamespace>\n    <TargetFrameworks>netcoreapp3.1;net6.0;net7.0;net8.0</TargetFrameworks>\n    <IsPackable>false</IsPackable>\n  </PropertyGroup>\n\n  <ItemGroup>\n    <!-- Use the Roslyn API version passed in from the project file  -->\n    <PackageReference Include=\"Microsoft.CodeAnalysis.CSharp\" Version=\"$(RoslynApiVersion)\" PrivateAssets=\"all\" />\n    <PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"16.11.0\" />\n    <PackageReference Include=\"System.ComponentModel.Annotations\" Version=\"5.0.0\" Condition=\"'$(TargetFramework)' == 'net48'\" />\n    <PackageReference Include=\"Verify.Xunit\" Version=\"14.3.0\" />\n    <PackageReference Include=\"xunit\" Version=\"2.4.1\" />\n    <PackageReference Include=\"xunit.runner.visualstudio\" Version=\"2.4.3\">\n      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>\n      <PrivateAssets>all</PrivateAssets>\n    </PackageReference>\n    <PackageReference Include=\"coverlet.collector\" Version=\"3.1.0\">\n      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>\n      <PrivateAssets>all</PrivateAssets>\n    </PackageReference>\n    <PackageReference Include=\"FluentAssertions\" Version=\"6.12.0\" />\n  </ItemGroup>\n\n  <ItemGroup>\n    <ProjectReference Include=\"..\\..\\src\\NetEscapades.EnumGenerators.Attributes\\NetEscapades.EnumGenerators.Attributes.csproj\" />\n  </ItemGroup>\n\n</Project>\n Both of these test projects can run on any support .NET SDK version, because the generator directly uses the Compilation types provided in the Microsoft.CodeAnalysis.CSharp package, rather than relying on it being provided by the .NET SDK itself. That's different from the integration test projects, which do rely on the SDK. Multi-targeting the integration test project for multiple .NET SDK versions The integration test projects for my source generators reference the generator projects, but add the generator with OutputItemType=\"Analyzer\", as described in a previous post. This lets you test your generator similar to how it will be used \"in production\", but without needing to create and reference a NuGet package locally, which is a bit of a pain. In integration tests, your source generator is running in the compiler, so you need to be careful about the Roslyn APIs. You can only reference and test functionality exposed by the Roslyn4_11 project if you're using a high enough SDK version. To achieve the testing I wanted, I needed to conditionally reference a different project (Roslyn4_04 or Roslyn4_11) based on the version of the .NET SDK I was building with. It turns out, I've never had to do that before. I've had minimum .NET SDK version requirements, but needing to run with two different SDK versions isn't something I'd tried before. Luckily, it turns out that MSBuild exposes the .NET SDK version you're using as a property. I used this in my test project .csproj to set a simple MSBuild property and a constant, which I could use further on in the .csproj file, and in #if conditions in the code. This post is already long, so I've just shown the pertinent parts of the .csproj file below: <!-- Are we building with .NET SDK 8.0.400 or greater? -->\n<PropertyGroup Condition=\"$([MSBuild]::VersionGreaterThanOrEquals('$(NETCoreSdkVersion)', '8.0.400'))\">\n  <!-- If so, set some properties and constants -->\n  <UsingModernDotNetSdk>true</UsingModernDotNetSdk>\n  <DefineConstants>$(DefineConstants);INTERCEPTORS</DefineConstants>\n</PropertyGroup>\n\n<!-- This project can only be loaded when we have a high enough compiler version -->\n<ItemGroup Condition=\"$(UsingModernDotNetSdk) == true\">\n  <!-- Can use the 4_11 project -->\n  <ProjectReference Include=\"..\\..\\src\\NetEscapades.EnumGenerators\\NetEscapades.EnumGenerators.Roslyn4_11.csproj\"\n                    OutputItemType=\"Analyzer\" ReferenceOutputAssembly=\"false\" />\n</ItemGroup>\n\n<ItemGroup Condition=\"$(UsingModernDotNetSdk) != true\">\n  <!-- Have to use the 4_04 project instead-->\n  <ProjectReference Include=\"..\\..\\src\\NetEscapades.EnumGenerators\\NetEscapades.EnumGenerators.Roslyn4_04.csproj\"\n                    OutputItemType=\"Analyzer\" ReferenceOutputAssembly=\"false\" />\n</ItemGroup>\n That's the biggest difference in this project; the test files make judicious use of #if INTERCEPTORS to both test the behaviour where interceptors are available (in 4.11) but also where they're not available (4.4). The final piece of the puzzle I want to touch on are how I set up the testing for this in CI. Setting up a CI build in GitHub Actions Prior to the above changes, I already had a relatively simple, but thorough, GitHub Actions CI pipeline set up for building and testing the package, which looked something like the following (I've reduced some of the unimportant aspects): name: BuildAndPack\n\n# Build pushes and PRs\non:\n  push:\n    branches:\n      - main\n    tags:\n      - '*'\n  pull_request:\n    branches:\n      - '*'\n\njobs:\n  # Build and test on multiple OS\n  build-and-test:\n    strategy:\n      matrix:\n        include:\n          - os: windows\n            vm: windows-latest\n          - os: linux\n            vm: ubuntu-latest\n          - os: macos\n            vm: macos-13\n\n    name: ${{ matrix.os}}\n    runs-on: ${{ matrix.vm}}\n    steps:\n      - uses: actions/checkout@v4\n      - uses: actions/setup-dotnet@v4\n        with:\n          dotnet-version: |\n            8.0.402\n            6.0.x\n            3.1.x\n      # Build, Test, Pack, Test the NuGet package, and (optionally) push to NuGet\n      - name: Run './build.cmd Clean Test TestPackage PushToNuGet'\n        run: ./build.cmd Clean Test TestPackage PushToNuGet\n        env:\n          NuGetToken: ${{ secrets.NUGET_TOKEN }}\n Previously, this whole build was using the 8.0.402 .NET SDK, but with my changes I wanted to ensure I could run some of the tests with an earlier version of the .NET SDK. Specifically, and for simplicity, I decided to only run the NuGet package tests on both SDKs in CI. Consequently, I updated the build pipeline to be something like the following (again, simplified, but with the changes highlighted): name: BuildAndPack\n\n# Build pushes and PRs\non:\n  push:\n    branches:\n      - main\n    tags:\n      - '*'\n  pull_request:\n    branches:\n      - '*'\n\njobs:\n  # Build and test on multiple OS\n  build-and-test:\n    strategy:\n      matrix:\n        include:\n          - os: windows\n            vm: windows-latest\n          - os: linux\n            vm: ubuntu-latest\n          - os: macos\n            vm: macos-13\n\n    name: ${{ matrix.os}}\n    runs-on: ${{ matrix.vm}}\n    steps:\n      - uses: actions/checkout@v4\n      - uses: actions/setup-dotnet@v4\n        with:\n          # NOTE: installing the 8.0.110 SDK too\n          dotnet-version: |\n            8.0.402\n            8.0.110\n            6.0.x\n            3.1.x\n      # Force the build to use the 8.0.402 SDK specifically\n      - run: dotnet new globaljson --sdk-version \"8.0.402\" --force\n\n      # Run the build, test, pack, and package test with the 8.0.402 SDK\n      - name: Run './build.cmd Clean Test TestPackage'\n        run: ./build.cmd Clean Test TestPackage\n\n      # Force the build to use an earlier .NET SDK\n      - run: dotnet new globaljson --sdk-version \"8.0.110\" --force\n\n      # Run the TestPackage stage with the earlier SDK (skipping dependent steps)\n      - name: Run './build.cmd TestPackage PushToNuGet --skip'\n        run: ./build.cmd TestPackage PushToNuGet --skip\n        env:\n          NuGetToken: ${{ secrets.NUGET_TOKEN }}\n I could have chosen to run all the integration tests with the earlier SDK, but it didn't seem worth the effort, as I share the same actual test files between both the integration tests and package tests. So with that, I'm done! Was it worth it? Should you do it? As you can tell by the length of the post, there's a lot of moving pieces required to support multiple Roslyn API versions in a source generator. This post is actually quite brief compared to the changes I found I needed to make in my project, as I haven't touched on a bunch of additional points.  A prime example of work not covered here is tracking your tests in CI. I wanted to make sure I didn't \"lose\" any tests with these changes, and to understand exactly what I was testing under what SDK. I used the EnricoMi/publish-unit-test-result-action@v2 GitHub Action for this, but tracking it properly required a bunch of gnarly #if/#elif that I didn't go into in this post, but which you can see in the repo if you like pain😆  So…was it worth it? Well, it depends. If you don't have to do this, then don't. It's a lot of work and added complexity to a project, without a big pay off. In general there aren't a lot of reasons not to just update your .NET SDK, so there shouldn't be a big call for supporting older versions of the SDK.  Ironically, I have one in my day job—.NET 8 dropped support for the unsupported (but still heavily used) CentOS 7 Linux distro (and related distros), which means we can't upgrade the SDK for the portions of the build that need to run on CentOS 7🙁  In my case, I wanted to increase the .NET SDK requirement so I could add a preview of an optional component. That didn't seem a big enough justification for forcing everyone to update their .NET SDK, so multi-targeting somewhat made sense. Honestly, I mostly took the multi-targeting approach to see how bad it would be. And the verdict is: it's Pretty Bad™😅 Summary In this post I showed how you could update an existing source generator project to add multi-targeting support for multiple Roslyn API versions. This ensures your source generator can run on the widest possible range of .NET SDK versions and that features which require a newer SDK version can \"light up\" when it's available. Unfortunately this process is somewhat complex. In this post I described the changes I made to the project files of my NetEscapades.EnumGenerators source generator project when I added Roslyn API multi-targeting support. I split the main source generator API into two, to produce two different dlls targeting different versions of the Microsoft.CodeAnalysis.CSharp package. To test the changes, I split my unit testing projects in two, each testing a different version of the source generator project, and updated the integration tests to support working with multiple versions of the .NET SDK. Overall multi-targeting multiple versions of the .NET SDK adds quite a lot of complexity to the various projects you need, and I wouldn't recommend it unless you definitely need to."
  },
  {
    "itemId": "https://andrewlock.net/supporting-multiple-sdk-versions-in-analyzers-and-source-generators/",
    "raw": "<img src=\"https://andrewlock.net/content/images/2025/system_text_json_banner.png\" /><p>In this post I describe why source generators might need to work with multiple versions of the .NET SDK. This may be necessary if you want to support features that are only available in newer versions of the .NET SDK, while simultaneously supporting users building with older versions of the .NET SDK in a more limited fashion. I then show how support was added in .NET 6 for this scenario, and how NuGet package layouts have changed. In the next post I show how you can add multi-targeting support to your own packages.</p> <h2 id=\"why-does-the-version-of-the-net-sdk-matter-for-source-generators-\" class=\"heading-with-anchor\"><a href=\"#why-does-the-version-of-the-net-sdk-matter-for-source-generators-\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Why does the version of the .NET SDK matter for source generators?</a></h2> <p>When you create a source generator, you reference a specific version of the <a href=\"https://www.nuget.org/packages/Microsoft.CodeAnalysis.CSharp\">Microsoft.CodeAnalysis.CSharp</a> NuGet package. The <a href=\"https://learn.microsoft.com/en-us/visualstudio/extensibility/roslyn-version-support\">version of the package</a> you choose defines the minimum version of <a href=\"https://learn.microsoft.com/en-us/dotnet/core/porting/versioning-sdk-msbuild-vs\">Visual Studio, MSBuild, and the .NET SDK</a> that your source generator will work with.</p> <p>The following table is compiled (well, inferred) from the links above, primarily for recent versions of the package:</p> <table><thead><tr><th style=\"text-align:center\">Roslyn package version</th><th style=\"text-align:center\">SDK version</th><th style=\"text-align:center\">MSBuild/Visual Studio version</th></tr></thead><tbody><tr><td style=\"text-align:center\">4.12.0</td><td style=\"text-align:center\">9.0.1xx</td><td style=\"text-align:center\">17.12</td></tr><tr><td style=\"text-align:center\">4.11.0</td><td style=\"text-align:center\">8.0.4xx</td><td style=\"text-align:center\">17.11</td></tr><tr><td style=\"text-align:center\">4.10.0</td><td style=\"text-align:center\">8.0.3xx</td><td style=\"text-align:center\">17.10</td></tr><tr><td style=\"text-align:center\">4.9.2</td><td style=\"text-align:center\">8.0.2xx</td><td style=\"text-align:center\">17.9</td></tr><tr><td style=\"text-align:center\">4.8.0</td><td style=\"text-align:center\">8.0.1xx</td><td style=\"text-align:center\">17.8</td></tr><tr><td style=\"text-align:center\">4.7.0</td><td style=\"text-align:center\">7.0.4xx</td><td style=\"text-align:center\">17.7</td></tr><tr><td style=\"text-align:center\">4.6.0</td><td style=\"text-align:center\">7.0.3xx</td><td style=\"text-align:center\">17.6</td></tr><tr><td style=\"text-align:center\">4.5.0</td><td style=\"text-align:center\">7.0.2xx</td><td style=\"text-align:center\">17.5</td></tr><tr><td style=\"text-align:center\">4.4.0</td><td style=\"text-align:center\">7.0.1xx</td><td style=\"text-align:center\">17.4</td></tr><tr><td style=\"text-align:center\">4.3.1</td><td style=\"text-align:center\">6.0.4xx</td><td style=\"text-align:center\">17.3</td></tr><tr><td style=\"text-align:center\">4.2.0</td><td style=\"text-align:center\">6.0.3xx</td><td style=\"text-align:center\">17.2</td></tr><tr><td style=\"text-align:center\">4.1.0</td><td style=\"text-align:center\">6.0.2xx</td><td style=\"text-align:center\">17.1</td></tr><tr><td style=\"text-align:center\">4.0.1</td><td style=\"text-align:center\">6.0.1xx</td><td style=\"text-align:center\">17.0</td></tr><tr><td style=\"text-align:center\">3.8.0</td><td style=\"text-align:center\">5.0.1xx</td><td style=\"text-align:center\">16.8</td></tr><tr><td style=\"text-align:center\">3.4.0</td><td style=\"text-align:center\">3.1.1xx</td><td style=\"text-align:center\">16.4</td></tr><tr><td style=\"text-align:center\">2.10.0</td><td style=\"text-align:center\">2.1.5xx</td><td style=\"text-align:center\">15.9</td></tr></tbody></table> <p>As you can see, each new minor release of the .NET SDK and Visual Studio version is associated with a new Roslyn package (<em>Microsoft.CodeAnalysis.CSharp</em>) version. Each new version of the package provides additional APIs for you to use.</p> <p>For example, when I first created my NetEscapades.EnumGenerators project I used version <code>4.0.1</code> of <em>Microsoft.CodeAnalysis.CSharp</em>, which gave access to the new incremental generator API <code>IIncrementalGenerator</code> introduced in .NET 6.</p> <p>When I wanted to use <a href=\"/creating-a-source-generator-part-9-avoiding-performance-pitfalls-in-incremental-generators/#1-use-the-net-7-api-forattributewithmetadataname\">the recommended <code>ForAttributeWithMetadataName</code> API</a> introduced in .NET 7, I had to update the <em>Microsoft.CodeAnalysis.CSharp</em> version used by the source generator to <code>4.4.0</code>. However, by updating that dependency, the source generator was no longer compatible with the .NET 6 SDK. You could still install the package, but the generator would not work, and you would get a warning at compile time:</p> <pre class=\"language-plain\"><code class=\"language-plain\">CSC : warning CS8032: An instance of analyzer NetEscapades.EnumGenerators.EnumGenerator\ncannot be created from C:\\Users\\Sock\\.nuget\\packages\\enumgenerators.enumgenerator\\1.0.0-beta09\\analyzers\\dotnet\\\ncs\\NetEscapades.EnumGenerators.dll : \nCould not load file or assembly 'Microsoft.CodeAnalysis, Version=4.4.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'. \nThe system cannot find the file specified.\n</code></pre> <p>So in general, if you want to have the broadest support, you should reference the <em>lowest</em> version of <em>Microsoft.CodeAnalysis.CSharp</em> that you can. On the other hand, if you want access to the latest SDK features, you need to reference the <em>highest</em> version of the package. It's the same classic trade-off that library maintainers have to make when it comes to dependencies, and what's the right choice for you will vary.</p> <h2 id=\"supporting-multiple-sdk-versions-and-lighting-up-features\" class=\"heading-with-anchor\"><a href=\"#supporting-multiple-sdk-versions-and-lighting-up-features\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Supporting multiple SDK versions and lighting-up features</a></h2> <p>One traditional approach to solving the \"broader support vs. features\" trade-off is to kind of do both! You target the lowest version of the API you can get away with, and that serves as your lower bound. You then \"light up\" with additional features when you detect that a newer version of the API is available.</p> <p>A classic example of where this makes sense for a source generator is with <a href=\"https://andrewlock.net/recent-updates-for-netescapades-enumgenerators-interceptors/\">the interceptor support I recently added</a> to the <em>NetEscapades.EnumGenerators</em> source generator. The source generator requires version <code>4.4.0</code> as a minimum (.NET 7 SDK, for <code>ForAttributeWithMetadataName</code> support), but if you're using a .NET SDK version of <code>8.0.400</code> or greater, you can optionally enable the interceptor support.</p> <p>I <em>could</em> have made <code>8.0.400</code> the minimum required SDK version to get <em>any</em> functionality, but by making the interceptor support an optional extra, people stuck on older versions of the SDK can continue to use the other features of the library.</p> <p>There are also examples of needing to take this approach in the runtime itself. For example, the original System.Text.Json source generator was written to support the non-incremental version of source generators. However, <a href=\"https://github.com/dotnet/runtime/issues/56702\">this API was notorious for causing performance problems in the IDE</a>. The only solution was to rewrite the generator to use <code>IIncrementalGenerator</code>.</p> <p>Unfortunately, simply updating the <code>JsonSourceGenerator</code> package to use a newer version of <em>Microsoft.CodeAnalysis.CSharp</em> (to access the <code>IIncrementalGenerator</code> API) would have broken the generator for anyone using the (still supported at the time) .NET 5 SDK. Instead, the team created two versions of the generator—one that used the .NET 6 SDK and the <code>IIncrementalGenerator</code> API, and one that used the .NET 5 SDK and the non-incremental generator.</p> <p>Sounds easy enough, right? After all, shipping different code for multiple target frameworks in a single NuGet package has been possible in .NET for a long time. Well…not so fast. We're not talking about shipping different dlls per <em>framework</em>. We're talking about shipping different dlls per <em>.NET SDK</em>…</p> <h2 id=\"creating-nuget-packages-that-support-multiple-roslyn-sdk-versions\" class=\"heading-with-anchor\"><a href=\"#creating-nuget-packages-that-support-multiple-roslyn-sdk-versions\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Creating NuGet packages that support multiple Roslyn/SDK versions</a></h2> <p>The fundamental problem of needing to ship different versions of source generators (and analyzers more generally) <a href=\"https://github.com/dotnet/sdk/issues/20355\">was realised</a> as part of the .NET 6 preview releases, when the performance issues with the System.Text.Json generator appeared. At that point, there was essentially no solution—as a source generator author you had to choose either broad support or new APIs. And if you went for the latter, then customers using your package with old versions of the SDK would get warnings in their build.</p> <p>The solution was to update the logic in the .NET SDK that loads analyzers/source generators from NuGet packages to be \"SDK version aware\". This logic is available as of .NET 6.</p> <p>Prior to .NET 6, the .NET SDK only recognizes the following folder folder structure in NuGet packages for loading analyzers:</p> <pre><code>analyzers[\\dotnet][\\cs|vb]\\my_generator.dll\n</code></pre> <p>In .NET 6 this pattern is still recognized, but if you have specific Roslyn API version requirements, <a href=\"https://github.com/dotnet/sdk/pull/20793\">you can encode those in the folder structure</a>:</p> <pre><code>analyzers[\\dotnet][\\roslyn{version}][\\cs|vb]\\my_generator.dll\n</code></pre> <p>Note the additional <code>roslyn{version}</code> folder in the <code>analyzers\\dotnet</code> folder. The <code>{version}</code> is a <code>{major}.{minor}</code> number corresponding to the Roslyn API version (the version of the <em>Microsoft.CodeAnalysis.CSharp</em> package referenced in your source generator).</p> <p>By splitting by Roslyn API version, you can now ship multiple dlls in the same NuGet package, each of which uses a different version of the <em>Microsoft.CodeAnalysis.CSharp</em> package, and hence each of which can use features available in the specific version of the .NET SDK that's available.</p> <p>We can see this in practice by taking a look at how the layout of <a href=\"https://www.nuget.org/packages/System.Text.Json\">the System.Text.Json NuGet package</a> changed between <a href=\"https://www.nuget.org/packages/System.Text.Json/6.0.0-preview.5.21301.5\">the .NET 6 preview 5 builds</a> (when the non-incremental source generator was introduced) and <a href=\"https://www.nuget.org/packages/System.Text.Json/6.0.0\">the first GA .NET 6 build</a>.</p> <p>The <code>6.0.0-preview.5.21301.5</code> version of the package uses the default \"simple\" layout, placing the <em>System.Text.Json.SourceGeneration.dll</em> file in the <code>analyzers/dotnet/cs</code> folder:</p> <p><img src=\"/content/images/2025/system_text_json.png\" alt=\"The layout of the 6.0.0-preview.5.21301.5 version of the System.Text.Json NuGet\"></p> <p>In contrast, if we look at the <code>6.0.0</code> version of the package, you can see there are intermediate <code>roslyn3.11</code> and <code>roslyn4.0</code> folders. The <code>3.11</code> version includes a version of the generator that is compatible with the .NET 5 SDK, while the <code>4.0</code> version requires the .NET 6 SDK, and uses <code>IIncrementalGenerator</code>:</p> <p><img src=\"/content/images/2025/system_text_json_2.png\" alt=\"The layout of the 6.0.0 version of the System.Text.Json NuGet\"></p> <blockquote> <p>Note that I simplified the layout in the package above to remove the localization dlls, so if you inspect the version from nuget.org, you'll also see the additional satellite resource dlls.</p> </blockquote> <p>The <a href=\"https://www.nuget.org/packages/System.Text.Json/9.0.0\">latest version of the package</a>, <code>9.0.0</code> includes a third differentiation, supporting the .NET 7 SDK (version <code>4.4</code> of the roslyn API):</p> <p><img src=\"/content/images/2025/system_text_json_3.png\" alt=\"The layout of the 9.0.0 version of the System.Text.Json NuGet\"></p> <p>There's a slight wrinkle in this otherwise-elegant solution when a NuGet package is loaded in a version of the .NET SDK that <em>doesn't</em> understand the new analyzer layout. By default, the earlier SDK would load <em>all</em> of the versions of the generator, which is obviously problematic.</p> <p>To work around that, the .NET 6 SDK introduces a new MSBuild property, <code>$(SupportsRoslynComponentVersioning)</code>. You can then include a <code>.targets</code> folder in your NuGet package that detects the <em>lack</em> of this variable to do the analyzer selection manually yourself.</p> <p>As an example, the <em>System.Text.Json</em> <code>6.0.0</code> package includes the following <code>.targets</code> file, which is added to the build of a project that references the <em>System.Text.Json</em> NuGet package. The file is a little hard to read (obviously, it's MSBuild) but it's essentially just checking for <code>$(SupportsRoslynComponentVersioning) != 'true'</code>, and removing the <code>rolsyn4.x</code> analyzers if so, leaving only the <code>roslyn3.x</code> package:</p> <pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Project</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Target</span> <span class=\"token attr-name\">Name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>_System_Text_JsonGatherAnalyzers<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ItemGroup</span><span class=\"token punctuation\">&gt;</span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>_System_Text_JsonAnalyzer</span> <span class=\"token attr-name\">Include</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>@(Analyzer)<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">Condition</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token punctuation\">'</span>%(Analyzer.NuGetPackageId)<span class=\"token punctuation\">'</span> == <span class=\"token punctuation\">'</span>System.Text.Json<span class=\"token punctuation\">'</span><span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ItemGroup</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Target</span><span class=\"token punctuation\">&gt;</span></span>\n\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Target</span> <span class=\"token attr-name\">Name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>_System_Text_JsonAnalyzerMultiTargeting<span class=\"token punctuation\">\"</span></span> \n          <span class=\"token attr-name\">Condition</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token punctuation\">'</span>$(SupportsRoslynComponentVersioning)<span class=\"token punctuation\">'</span> != <span class=\"token punctuation\">'</span>true<span class=\"token punctuation\">'</span><span class=\"token punctuation\">\"</span></span> \n          <span class=\"token attr-name\">AfterTargets</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>ResolvePackageDependenciesForBuild;ResolveNuGetPackageAssets<span class=\"token punctuation\">\"</span></span>\n          <span class=\"token attr-name\">DependsOnTargets</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>_System_Text_JsonGatherAnalyzers<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ItemGroup</span><span class=\"token punctuation\">&gt;</span></span>\n      <span class=\"token comment\">&lt;!-- Remove our analyzers targeting roslyn4.x --&gt;</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Analyzer</span> <span class=\"token attr-name\">Remove</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>@(_System_Text_JsonAnalyzer)<span class=\"token punctuation\">\"</span></span>\n                <span class=\"token attr-name\">Condition</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>$([System.String]::Copy(<span class=\"token punctuation\">'</span>%(_System_Text_JsonAnalyzer.Identity)<span class=\"token punctuation\">'</span>).IndexOf(<span class=\"token punctuation\">'</span>roslyn4<span class=\"token punctuation\">'</span>)) <span class=\"token entity named-entity\" title=\">\">&amp;gt;</span>= 0<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ItemGroup</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Target</span><span class=\"token punctuation\">&gt;</span></span>\n\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Target</span> <span class=\"token attr-name\">Name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>_System_Text_JsonRemoveAnalyzers<span class=\"token punctuation\">\"</span></span> \n          <span class=\"token attr-name\">Condition</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token punctuation\">'</span>$(DisableSystemTextJsonSourceGenerator)<span class=\"token punctuation\">'</span> == <span class=\"token punctuation\">'</span>true<span class=\"token punctuation\">'</span><span class=\"token punctuation\">\"</span></span>\n          <span class=\"token attr-name\">AfterTargets</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>ResolvePackageDependenciesForBuild;ResolveNuGetPackageAssets<span class=\"token punctuation\">\"</span></span>\n          <span class=\"token attr-name\">DependsOnTargets</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>_System_Text_JsonGatherAnalyzers<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n\n    <span class=\"token comment\">&lt;!-- Remove all our analyzers --&gt;</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ItemGroup</span><span class=\"token punctuation\">&gt;</span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Analyzer</span> <span class=\"token attr-name\">Remove</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>@(_System_Text_JsonAnalyzer)<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ItemGroup</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Target</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Project</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre> <p>This ensures that the multi-targeting works even in early versions of the .NET SDK that don't support the new folder layout.</p> <blockquote> <p>I was somewhat interested to see that this code still exists, even in the latest versions of the package, when .NET 5 SDK has been out of support for 2.5 years. I <em>assume</em> the issue is that some versions of <em>Visual Studio</em> are still supported, and fundamentally you can't stop people using it with old SDKs.</p> </blockquote> <p>I've covered all the details of why you might want to multi-target multiple roslyn versions in a NuGet package in this post. In the next post I'll show how you can support this in your own packages, by showing how I added multi-targeting support to my <em>NetEscapades.EnumGenerators</em> source generator.</p> <h2 id=\"summary\" class=\"heading-with-anchor\"><a href=\"#summary\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Summary</a></h2> <p>In this post I described how the version of the <em>Microsoft.CodeAnalysis.CSharp</em> NuGet package used by a source generator is tied to a Roslyn API and .NET SDK version. I discussed how the fact you need to choose a single API version means you have to trade off between broadness of support and access to features. .NET 6 introduced a new feature for NuGet packages that allows you to multi-target your analyzers/source generators for multiple .NET SDK versions.</p> <p>In the next post I show a case study of how I updated my <em>NetEscapades.EnumGenerators</em> source generator to use this feature and multi-target against multiple .NET SDK versions.</p> ",
    "sanitized": "In this post I describe why source generators might need to work with multiple versions of the .NET SDK. This may be necessary if you want to support features that are only available in newer versions of the .NET SDK, while simultaneously supporting users building with older versions of the .NET SDK in a more limited fashion. I then show how support was added in .NET 6 for this scenario, and how NuGet package layouts have changed. In the next post I show how you can add multi-targeting support to your own packages. Why does the version of the .NET SDK matter for source generators? When you create a source generator, you reference a specific version of the Microsoft.CodeAnalysis.CSharp NuGet package. The version of the package you choose defines the minimum version of Visual Studio, MSBuild, and the .NET SDK that your source generator will work with. The following table is compiled (well, inferred) from the links above, primarily for recent versions of the package: Roslyn package versionSDK versionMSBuild/Visual Studio version4.12.09.0.1xx17.124.11.08.0.4xx17.114.10.08.0.3xx17.104.9.28.0.2xx17.94.8.08.0.1xx17.84.7.07.0.4xx17.74.6.07.0.3xx17.64.5.07.0.2xx17.54.4.07.0.1xx17.44.3.16.0.4xx17.34.2.06.0.3xx17.24.1.06.0.2xx17.14.0.16.0.1xx17.03.8.05.0.1xx16.83.4.03.1.1xx16.42.10.02.1.5xx15.9 As you can see, each new minor release of the .NET SDK and Visual Studio version is associated with a new Roslyn package (Microsoft.CodeAnalysis.CSharp) version. Each new version of the package provides additional APIs for you to use. For example, when I first created my NetEscapades.EnumGenerators project I used version 4.0.1 of Microsoft.CodeAnalysis.CSharp, which gave access to the new incremental generator API IIncrementalGenerator introduced in .NET 6. When I wanted to use the recommended ForAttributeWithMetadataName API introduced in .NET 7, I had to update the Microsoft.CodeAnalysis.CSharp version used by the source generator to 4.4.0. However, by updating that dependency, the source generator was no longer compatible with the .NET 6 SDK. You could still install the package, but the generator would not work, and you would get a warning at compile time: CSC : warning CS8032: An instance of analyzer NetEscapades.EnumGenerators.EnumGenerator\ncannot be created from C:\\Users\\Sock\\.nuget\\packages\\enumgenerators.enumgenerator\\1.0.0-beta09\\analyzers\\dotnet\\\ncs\\NetEscapades.EnumGenerators.dll : \nCould not load file or assembly 'Microsoft.CodeAnalysis, Version=4.4.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'. \nThe system cannot find the file specified.\n So in general, if you want to have the broadest support, you should reference the lowest version of Microsoft.CodeAnalysis.CSharp that you can. On the other hand, if you want access to the latest SDK features, you need to reference the highest version of the package. It's the same classic trade-off that library maintainers have to make when it comes to dependencies, and what's the right choice for you will vary. Supporting multiple SDK versions and lighting-up features One traditional approach to solving the \"broader support vs. features\" trade-off is to kind of do both! You target the lowest version of the API you can get away with, and that serves as your lower bound. You then \"light up\" with additional features when you detect that a newer version of the API is available. A classic example of where this makes sense for a source generator is with the interceptor support I recently added to the NetEscapades.EnumGenerators source generator. The source generator requires version 4.4.0 as a minimum (.NET 7 SDK, for ForAttributeWithMetadataName support), but if you're using a .NET SDK version of 8.0.400 or greater, you can optionally enable the interceptor support. I could have made 8.0.400 the minimum required SDK version to get any functionality, but by making the interceptor support an optional extra, people stuck on older versions of the SDK can continue to use the other features of the library. There are also examples of needing to take this approach in the runtime itself. For example, the original System.Text.Json source generator was written to support the non-incremental version of source generators. However, this API was notorious for causing performance problems in the IDE. The only solution was to rewrite the generator to use IIncrementalGenerator. Unfortunately, simply updating the JsonSourceGenerator package to use a newer version of Microsoft.CodeAnalysis.CSharp (to access the IIncrementalGenerator API) would have broken the generator for anyone using the (still supported at the time) .NET 5 SDK. Instead, the team created two versions of the generator—one that used the .NET 6 SDK and the IIncrementalGenerator API, and one that used the .NET 5 SDK and the non-incremental generator. Sounds easy enough, right? After all, shipping different code for multiple target frameworks in a single NuGet package has been possible in .NET for a long time. Well…not so fast. We're not talking about shipping different dlls per framework. We're talking about shipping different dlls per .NET SDK… Creating NuGet packages that support multiple Roslyn/SDK versions The fundamental problem of needing to ship different versions of source generators (and analyzers more generally) was realised as part of the .NET 6 preview releases, when the performance issues with the System.Text.Json generator appeared. At that point, there was essentially no solution—as a source generator author you had to choose either broad support or new APIs. And if you went for the latter, then customers using your package with old versions of the SDK would get warnings in their build. The solution was to update the logic in the .NET SDK that loads analyzers/source generators from NuGet packages to be \"SDK version aware\". This logic is available as of .NET 6. Prior to .NET 6, the .NET SDK only recognizes the following folder folder structure in NuGet packages for loading analyzers: analyzers[\\dotnet][\\cs|vb]\\my_generator.dll\n In .NET 6 this pattern is still recognized, but if you have specific Roslyn API version requirements, you can encode those in the folder structure: analyzers[\\dotnet][\\roslyn{version}][\\cs|vb]\\my_generator.dll\n Note the additional roslyn{version} folder in the analyzers\\dotnet folder. The {version} is a {major}.{minor} number corresponding to the Roslyn API version (the version of the Microsoft.CodeAnalysis.CSharp package referenced in your source generator). By splitting by Roslyn API version, you can now ship multiple dlls in the same NuGet package, each of which uses a different version of the Microsoft.CodeAnalysis.CSharp package, and hence each of which can use features available in the specific version of the .NET SDK that's available. We can see this in practice by taking a look at how the layout of the System.Text.Json NuGet package changed between the .NET 6 preview 5 builds (when the non-incremental source generator was introduced) and the first GA .NET 6 build. The 6.0.0-preview.5.21301.5 version of the package uses the default \"simple\" layout, placing the System.Text.Json.SourceGeneration.dll file in the analyzers/dotnet/cs folder:  In contrast, if we look at the 6.0.0 version of the package, you can see there are intermediate roslyn3.11 and roslyn4.0 folders. The 3.11 version includes a version of the generator that is compatible with the .NET 5 SDK, while the 4.0 version requires the .NET 6 SDK, and uses IIncrementalGenerator:   Note that I simplified the layout in the package above to remove the localization dlls, so if you inspect the version from nuget.org, you'll also see the additional satellite resource dlls.  The latest version of the package, 9.0.0 includes a third differentiation, supporting the .NET 7 SDK (version 4.4 of the roslyn API):  There's a slight wrinkle in this otherwise-elegant solution when a NuGet package is loaded in a version of the .NET SDK that doesn't understand the new analyzer layout. By default, the earlier SDK would load all of the versions of the generator, which is obviously problematic. To work around that, the .NET 6 SDK introduces a new MSBuild property, $(SupportsRoslynComponentVersioning). You can then include a .targets folder in your NuGet package that detects the lack of this variable to do the analyzer selection manually yourself. As an example, the System.Text.Json 6.0.0 package includes the following .targets file, which is added to the build of a project that references the System.Text.Json NuGet package. The file is a little hard to read (obviously, it's MSBuild) but it's essentially just checking for $(SupportsRoslynComponentVersioning) != 'true', and removing the rolsyn4.x analyzers if so, leaving only the roslyn3.x package: <Project>\n  <Target Name=\"_System_Text_JsonGatherAnalyzers\">\n\n    <ItemGroup>\n      <_System_Text_JsonAnalyzer Include=\"@(Analyzer)\" Condition=\"'%(Analyzer.NuGetPackageId)' == 'System.Text.Json'\" />\n    </ItemGroup>\n  </Target>\n\n  <Target Name=\"_System_Text_JsonAnalyzerMultiTargeting\" \n          Condition=\"'$(SupportsRoslynComponentVersioning)' != 'true'\" \n          AfterTargets=\"ResolvePackageDependenciesForBuild;ResolveNuGetPackageAssets\"\n          DependsOnTargets=\"_System_Text_JsonGatherAnalyzers\">\n\n    <ItemGroup>\n      <!-- Remove our analyzers targeting roslyn4.x -->\n      <Analyzer Remove=\"@(_System_Text_JsonAnalyzer)\"\n                Condition=\"$([System.String]::Copy('%(_System_Text_JsonAnalyzer.Identity)').IndexOf('roslyn4')) &gt;= 0\"/>\n    </ItemGroup>\n  </Target>\n\n  <Target Name=\"_System_Text_JsonRemoveAnalyzers\" \n          Condition=\"'$(DisableSystemTextJsonSourceGenerator)' == 'true'\"\n          AfterTargets=\"ResolvePackageDependenciesForBuild;ResolveNuGetPackageAssets\"\n          DependsOnTargets=\"_System_Text_JsonGatherAnalyzers\">\n\n    <!-- Remove all our analyzers -->\n    <ItemGroup>\n      <Analyzer Remove=\"@(_System_Text_JsonAnalyzer)\" />\n    </ItemGroup>\n  </Target>\n</Project>\n This ensures that the multi-targeting works even in early versions of the .NET SDK that don't support the new folder layout.  I was somewhat interested to see that this code still exists, even in the latest versions of the package, when .NET 5 SDK has been out of support for 2.5 years. I assume the issue is that some versions of Visual Studio are still supported, and fundamentally you can't stop people using it with old SDKs.  I've covered all the details of why you might want to multi-target multiple roslyn versions in a NuGet package in this post. In the next post I'll show how you can support this in your own packages, by showing how I added multi-targeting support to my NetEscapades.EnumGenerators source generator. Summary In this post I described how the version of the Microsoft.CodeAnalysis.CSharp NuGet package used by a source generator is tied to a Roslyn API and .NET SDK version. I discussed how the fact you need to choose a single API version means you have to trade off between broadness of support and access to features. .NET 6 introduced a new feature for NuGet packages that allows you to multi-target your analyzers/source generators for multiple .NET SDK versions. In the next post I show a case study of how I updated my NetEscapades.EnumGenerators source generator to use this feature and multi-target against multiple .NET SDK versions."
  },
  {
    "itemId": "https://andrewlock.net/creating-a-source-generator-part-13-providing-and-accessing-msbuild-settings-in-source-generators/",
    "raw": "<img src=\"https://andrewlock.net/content/images/2025/generator_props_banner.png\" /><nav><p>This is the thirteen post in the series: <a href=\"/series/creating-a-source-generator/\">Creating a source generator</a>. </p> <ol class=\"list-none\"><li><a href=\"/creating-a-source-generator-part-1-creating-an-incremental-source-generator/\">Part 1 - Creating an incremental generator</a></li><li><a href=\"/creating-a-source-generator-part-2-testing-an-incremental-generator-with-snapshot-testing/\">Part 2 - Testing an incremental generator with snapshot testing</a></li><li><a href=\"/creating-a-source-generator-part-3-integration-testing-and-packaging/\">Part 3 - Integration testing and NuGet packaging</a></li><li><a href=\"/creating-a-source-generator-part-4-customising-generated-code-with-marker-attributes/\">Part 4 - Customising generated code with marker attributes</a></li><li><a href=\"/creating-a-source-generator-part-5-finding-a-type-declarations-namespace-and-type-hierarchy/\">Part 5 - Finding a type declaration's namespace and type hierarchy</a></li><li><a href=\"/creating-a-source-generator-part-6-saving-source-generator-output-in-source-control/\">Part 6 - Saving source generator output in source control</a></li><li><a href=\"/creating-a-source-generator-part-7-solving-the-source-generator-marker-attribute-problem-part1/\">Part 7 - Solving the source generator 'marker attribute' problem - Part 1</a></li><li><a href=\"/creating-a-source-generator-part-8-solving-the-source-generator-marker-attribute-problem-part2/\">Part 8 - Solving the source generator 'marker attribute' problem - Part 2</a></li><li><a href=\"/creating-a-source-generator-part-9-avoiding-performance-pitfalls-in-incremental-generators/\">Part 9 - Avoiding performance pitfalls in incremental generators</a></li><li><a href=\"/creating-a-source-generator-part-10-testing-your-incremental-generator-pipeline-outputs-are-cacheable/\">Part 10 - Testing your incremental generator pipeline outputs are cacheable</a></li><li><a href=\"/creating-a-source-generator-part-11-implementing-an-interceptor-with-a-source-generator/\">Part 11 - Implementing an interceptor with a source generator</a></li><li><a href=\"/creating-a-source-generator-part-12-reading-compilation-options-and-csharp-version-in-source-generators/\">Part 12 - Reading compilation options and the C# version in source generators</a></li><li>Part 13 - Accessing MSBuild properties and user configuration from source generators (this post) </li><li><a href=\"/creating-a-source-generator-part-14-supporting-multiple-sdk-versions-in-a-source-generator/\">Part 14 - Supporting multiple .NET SDK versions in a source generator</a></li></ol></nav><p>In this post I describe how to read MSBuild settings from inside a source generator. I show how you can use this to add \"configuration\" to your source generators so consumers can control some behaviour of the source generator. Finally I show how you can bundle a <em>.targets</em> file with your generator to make some aspects of this easier to use for consumers, particularly when it comes to interceptors.</p> <h2 id=\"why-might-you-want-to-access-msbuild-settings-\" class=\"heading-with-anchor\"><a href=\"#why-might-you-want-to-access-msbuild-settings-\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Why might you want to access MSBuild settings?</a></h2> <p>In the <a href=\"/creating-a-source-generator-part-12-providing-and-accessing-msbuild-settings-in-source-generators/\">previous post</a> I described how some features of the compilation can be accessed on the <code>Compilation</code> object. However, there's a lot you <em>can't</em> get from there. For example, the default <code>RootNamespace</code> does not appear to be accessible from <code>Compilation</code>. Instead, you must access the MSBuild property to know what it's set to.</p> <p>Most of the source generators I've created are controlled solely by attributes applied in code. However there are many cases where you might want to control the behaviour of a source generator in a <em>global</em> way. For example, if you're generating a single type, you may want to be able to control the <em>name</em> of the generated type, or you may want to enable or disable specific features.</p> <p>As a concrete example, I recently needed to do this while working on <a href=\"https://www.nuget.org/packages/NetEscapades.EnumGenerators\"><em>NetEscapades.EnumGenerators</em></a>. I wanted the interceptor support to be disabled by default, but for consumers to be able to enable it with an MSBuild flag.</p> <p>In the following sections I'll describe the basics of how to work with both of these aspects.</p> <h2 id=\"reading-msbuild-settings-from-a-source-generator\" class=\"heading-with-anchor\"><a href=\"#reading-msbuild-settings-from-a-source-generator\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Reading MSBuild settings from a source generator</a></h2> <p>I'll start by showing how you can read the <code>RootNamespace</code> for a project. I've started with this setting because it's readable from source generators automatically.</p> <p>To read an MSBuild setting, you should use the <code>AnalyzerConfigOptionsProvider</code>. The following source generator shows how to do this for the <code>RootNamespace</code> property. It reads the value from the context and creates a file that just contains a comment with the root namespace:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">Generator</span></span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">sealed</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RootNamespaceGenerator</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">IIncrementalGenerator</span></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Initialize</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IncrementalGeneratorInitializationContext</span> context<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// Create an IncrementalValueProvider from AnalyzerConfigOptionsProvider</span>\n        <span class=\"token class-name\">IncrementalValueProvider<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">?</span><span class=\"token punctuation\">&gt;</span></span> rootNamespace <span class=\"token operator\">=</span> context\n            <span class=\"token punctuation\">.</span>AnalyzerConfigOptionsProvider\n            <span class=\"token comment\">// Retrieve the RootNamespace property</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">Select</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">AnalyzerConfigOptionsProvider</span> c<span class=\"token punctuation\">,</span> <span class=\"token class-name\">CancellationToken</span> _<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span>\n                c<span class=\"token punctuation\">.</span>GlobalOptions<span class=\"token punctuation\">.</span><span class=\"token function\">TryGetValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"build_property.RootNamespace\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">out</span> <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> nameSpace<span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">?</span> nameSpace\n                    <span class=\"token punctuation\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// Generate the source</span>\n        context<span class=\"token punctuation\">.</span><span class=\"token function\">RegisterSourceOutput</span><span class=\"token punctuation\">(</span>rootNamespace<span class=\"token punctuation\">,</span> <span class=\"token keyword\">static</span> <span class=\"token punctuation\">(</span>spc<span class=\"token punctuation\">,</span> nameSpace<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> source <span class=\"token operator\">=</span> $<span class=\"token interpolation-string\"><span class=\"token string\">$\"\"</span></span>\"\n                           <span class=\"token comment\">// RootNamespace: {{nameSpace}}</span>\n                           <span class=\"token string\">\"\"</span>\"<span class=\"token punctuation\">;</span>\n\n            spc<span class=\"token punctuation\">.</span><span class=\"token function\">AddSource</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Example.g.cs\"</span><span class=\"token punctuation\">,</span> source<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>If you add this generator to a target project, the generated <em>Example.g.cs</em> file contains something like this following:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token comment\">// RootNamespace: MyExampleProject</span>\n</code></pre> <p>It's important to note that when you retrieve the property from <code>AnalyzerConfigOptionsProvider</code>, you must use the prefix <code>\"build_property.\"</code>. You might be wondering <em>why</em> you need that prefix; after all, when you're reading MSBuild properties in <em>.csproj</em> files, you don't need that prefix. To explain why, we'll take a short detour.</p> <h2 id=\"msbuild-generatedmsbuildeditorconfig-editorconfig-and-source-generators\" class=\"heading-with-anchor\"><a href=\"#msbuild-generatedmsbuildeditorconfig-editorconfig-and-source-generators\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">MSBuild, <em>GeneratedMSBuildEditorConfig.editorconfig</em>, and source generators</a></h2> <p>When you build a .NET project, a number of \"intermediate\" artifacts are created, that are used to create the final build. These files are typically stored inside the <code>obj</code> folder of a project. This can include things like where to find the NuGet packages on disk after a restore, source link details, and runtime configuration details.</p> <p>One such artifact created is <code>&lt;ProjectName&gt;.GeneratedMSBuildEditorConfig.editorconfig</code>. Go ahead, take a look, you'll find this file for all your .NET projects. The exact contents will vary depending on the <em>type</em> of the project and on how your project is built, but it'll look something like this:</p> <pre class=\"language-ini\"><code class=\"language-ini\"><span class=\"token key attr-name\">is_global</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">true</span>\n<span class=\"token key attr-name\">build_property.TargetFramework</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">net8.0</span>\n<span class=\"token key attr-name\">build_property.TargetPlatformMinVersion</span> <span class=\"token punctuation\">=</span> \n<span class=\"token key attr-name\">build_property.UsingMicrosoftNETSdkWeb</span> <span class=\"token punctuation\">=</span> \n<span class=\"token key attr-name\">build_property.ProjectTypeGuids</span> <span class=\"token punctuation\">=</span> \n<span class=\"token key attr-name\">build_property.InvariantGlobalization</span> <span class=\"token punctuation\">=</span> \n<span class=\"token key attr-name\">build_property.PlatformNeutralAssembly</span> <span class=\"token punctuation\">=</span> \n<span class=\"token key attr-name\">build_property.EnforceExtendedAnalyzerRules</span> <span class=\"token punctuation\">=</span> \n<span class=\"token key attr-name\">build_property._SupportedPlatformList</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">Linux,macOS,Windows</span>\n<span class=\"token key attr-name\">build_property.RootNamespace</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">MyExample</span>\n<span class=\"token key attr-name\">build_property.ProjectDir</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">C:\\repos\\MyExample\\</span>\n<span class=\"token key attr-name\">build_property.EnableComHosting</span> <span class=\"token punctuation\">=</span> \n<span class=\"token key attr-name\">build_property.EnableGeneratedComInterfaceComImportInterop</span> <span class=\"token punctuation\">=</span> \n<span class=\"token key attr-name\">build_property.EffectiveAnalysisLevelStyle</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">8.0</span>\n<span class=\"token key attr-name\">build_property.EnableCodeStyleSeverity</span> <span class=\"token punctuation\">=</span> \n</code></pre> <p>EditorConfig is primarily a <a href=\"https://spec.editorconfig.org/\">specification</a> for maintaining consistent coding style across multiple developers and IDEs when working in the same project. In this case, however, the file is exposing various properties of the MSBuild system, which can then be consumed by your source generator.</p> <p>As you can see from the above listing, only a few properties are exposed, with <code>RootNamespace</code>, <code>ProjectDir</code>, and <code>TargetFramework</code> being the most interesting. So what if you want to read some <em>other</em> MSBuild property? So that a consumer can specify \"settings\" for your generator, for example?</p> <h2 id=\"enabling-generator-access-for-an-msbuild-property\" class=\"heading-with-anchor\"><a href=\"#enabling-generator-access-for-an-msbuild-property\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Enabling generator access for an MSBuild property</a></h2> <p>You've seen how to access a given MSBuild property, but you can <em>only</em> access properties that are exposed in the generated editor config. To make an arbitrary MSBuild property appear in the editor config, you need to mark it as a \"compiler aware property\".</p> <p>To achieve this, the target project must add a <code>&lt;CompilerVisibleProperty&gt;</code>. For example, if we add the following to a <em>.csproj</em> file, it will set the value of the property <code>&lt;EnableInterceptor&gt;</code> and then mark it as compiler aware:</p> <pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Project</span> <span class=\"token attr-name\">Sdk</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Microsoft.NET.Sdk<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>PropertyGroup</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>OutputType</span><span class=\"token punctuation\">&gt;</span></span>Exe<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>OutputType</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>TargetFramework</span><span class=\"token punctuation\">&gt;</span></span>net8.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>TargetFramework</span><span class=\"token punctuation\">&gt;</span></span>\n\n    <span class=\"token comment\">&lt;!-- Set the value of the property --&gt;</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>EnableInterceptor</span><span class=\"token punctuation\">&gt;</span></span>true<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>EnableInterceptor</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>PropertyGroup</span><span class=\"token punctuation\">&gt;</span></span>\n\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ItemGroup</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token comment\">&lt;!-- Mark the property as compiler aware, so it's added to the editor config--&gt;</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>CompilerVisibleProperty</span> <span class=\"token attr-name\">Include</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>EnableInterceptor<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ItemGroup</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Project</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre> <p>If we inspect the generated editor config for this property we can see that the value has indeed been added, on the second line down:</p> <pre class=\"language-ini\"><code class=\"language-ini\"><span class=\"token key attr-name\">is_global</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">true</span>\n<span class=\"token key attr-name\">build_property.EnableInterceptor</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">true # 👈 This was added</span>\n<span class=\"token key attr-name\">build_property.TargetFramework</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">net8.0</span>\n<span class=\"token key attr-name\">build_property.TargetPlatformMinVersion</span> <span class=\"token punctuation\">=</span> \n<span class=\"token key attr-name\">build_property.UsingMicrosoftNETSdkWeb</span> <span class=\"token punctuation\">=</span> \n<span class=\"token key attr-name\">build_property.ProjectTypeGuids</span> <span class=\"token punctuation\">=</span> \n<span class=\"token key attr-name\">build_property.InvariantGlobalization</span> <span class=\"token punctuation\">=</span> \n<span class=\"token key attr-name\">build_property.PlatformNeutralAssembly</span> <span class=\"token punctuation\">=</span> \n<span class=\"token key attr-name\">build_property.EnforceExtendedAnalyzerRules</span> <span class=\"token punctuation\">=</span> \n<span class=\"token key attr-name\">build_property._SupportedPlatformList</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">Linux,macOS,Windows</span>\n<span class=\"token key attr-name\">build_property.RootNamespace</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">MyExample</span>\n<span class=\"token key attr-name\">build_property.ProjectDir</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">C:\\repos\\MyExample\\</span>\n<span class=\"token key attr-name\">build_property.EnableComHosting</span> <span class=\"token punctuation\">=</span> \n<span class=\"token key attr-name\">build_property.EnableGeneratedComInterfaceComImportInterop</span> <span class=\"token punctuation\">=</span> \n<span class=\"token key attr-name\">build_property.EffectiveAnalysisLevelStyle</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">8.0</span>\n<span class=\"token key attr-name\">build_property.EnableCodeStyleSeverity</span> <span class=\"token punctuation\">=</span> \n</code></pre> <p>Now that the property is exposed here, we can read it in our generator, and print it as a comment in the generated source, just as we did for RootNamespace:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">Generator</span></span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">sealed</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">EnableInterceptorGenerator</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">IIncrementalGenerator</span></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Initialize</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IncrementalGeneratorInitializationContext</span> context<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> isEnabled <span class=\"token operator\">=</span> context\n            <span class=\"token punctuation\">.</span>AnalyzerConfigOptionsProvider\n            <span class=\"token punctuation\">.</span><span class=\"token function\">Select</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">,</span> _<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span>\n                <span class=\"token comment\">// Get the value, check if it's set to 'true', otherwise return false</span>\n                config<span class=\"token punctuation\">.</span>GlobalOptions\n                    <span class=\"token punctuation\">.</span><span class=\"token function\">TryGetValue</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"build_property.EnableInterceptor\"</span></span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">out</span> <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> enableSwitch<span class=\"token punctuation\">)</span>\n                  <span class=\"token operator\">&amp;&amp;</span> enableSwitch<span class=\"token punctuation\">.</span><span class=\"token function\">Equals</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"true\"</span><span class=\"token punctuation\">,</span> StringComparison<span class=\"token punctuation\">.</span>Ordinal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// Generate the source</span>\n        context<span class=\"token punctuation\">.</span><span class=\"token function\">RegisterSourceOutput</span><span class=\"token punctuation\">(</span>isEnabled<span class=\"token punctuation\">,</span> <span class=\"token keyword\">static</span> <span class=\"token punctuation\">(</span>spc<span class=\"token punctuation\">,</span> enabled<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> source <span class=\"token operator\">=</span> $<span class=\"token interpolation-string\"><span class=\"token string\">$\"\"</span></span>\"\n                           <span class=\"token comment\">// EnableInterceptor: {{enabled}}</span>\n                           <span class=\"token string\">\"\"</span>\"<span class=\"token punctuation\">;</span>\n\n            spc<span class=\"token punctuation\">.</span><span class=\"token function\">AddSource</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Example.g.cs\"</span><span class=\"token punctuation\">,</span> source<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>Sure enough, if we check the <em>Example.g.cs</em> file in our target project, we'll see it looks like the following:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token comment\">// EnableInterceptor: True</span>\n</code></pre> <p>If we change <code>&lt;EnableInterceptor&gt;</code> to be <code>false</code>, or if we remove the <code>&lt;CompilerVisibleProperty&gt;</code> value, then the output changes to be:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token comment\">// EnableInterceptor: False</span>\n</code></pre> <p>In the example above I'm not doing anything particularly interesting with the setting value, but you could use it to control the generated source in a more detailed way, or to enable or disable features, for example.</p> <p>OK, that's all pretty cool, but it kinda sucks that consumers have to specify both the property value <code>&lt;EnableInterceptor&gt;</code> <em>and</em> add <code>&lt;CompilerVisibleProperty&gt;</code>. Luckily, if you're creating a NuGet package, you can use a NuGet feature to do that automatically.</p> <h2 id=\"automatically-adding-compilervisibleproperty-for-a-setting-to-a-nuget-package\" class=\"heading-with-anchor\"><a href=\"#automatically-adding-compilervisibleproperty-for-a-setting-to-a-nuget-package\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Automatically adding <code>&lt;CompilerVisibleProperty&gt;</code> for a setting to a NuGet package</a></h2> <p>NuGet packages can contain many different <em>types</em> of files. A non-exhaustive list includes:</p> <ul><li>Dlls that should be referenced by the target application.</li> <li>Analyzers and source generators that are used by the compiler in the target project.</li> <li>Content that is just copied directly to a target project's build output.</li> <li>Build files, that change how the target project is compiled.</li></ul> <p>We're going to use that last feature to package a <code>.props</code> file with our NuGet package, which automatically adds the <code>&lt;CompilerVisibleProperty&gt;</code> we need. Overall this is a relatively simple feature: we create a file with the right name, pack it into a NuGet package, and any project consuming our NuGet package automatically gets the <code>.props</code> file added to it.</p> <blockquote> <p>You can read more about this NuGet feature <a href=\"https://learn.microsoft.com/en-us/nuget/concepts/msbuild-props-and-targets\">in the documentation</a>.</p> </blockquote> <p>In order to keep things more concrete, I'm going to switch to describing how things work in my <a href=\"https://github.com/andrewlock/NetEscapades.EnumGenerators\">NetEscapades.EnumGenerators</a> package, instead of the hypothetical generators I've described so far.</p> <p>First of all, we create a file called <code>&lt;Package&gt;.props</code>, i.e. <code>NetEscapades.EnumGenerators.props</code>. In here we add the <code>&lt;CompilerVisibleProperty&gt;</code> definition we need to access from the generator:</p> <pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Project</span><span class=\"token punctuation\">&gt;</span></span>  \n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ItemGroup</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>CompilerVisibleProperty</span> <span class=\"token attr-name\">Include</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>EnableEnumGeneratorInterceptor<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ItemGroup</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Project</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre> <p>This ensures the <code>EnableEnumGeneratorInterceptor</code> setting is available from the <em>NetEscapades.EnumGenerators</em> source generator.</p> <p>Next, we need to make sure we pack the <em>NetEscapades.EnumGenerators.props</em> file into the correct place in the NuGet package. The following line in the <em>NetEscapades.EnumGenerators.csproj</em> project file makes sure the file is packed into the <code>build</code> folder of the package:</p> <pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>None</span> <span class=\"token attr-name\">Include</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>NetEscapades.EnumGenerators.props<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">Visible</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>false<span class=\"token punctuation\">\"</span></span>\n      <span class=\"token attr-name\">Pack</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">PackagePath</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>build<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n</code></pre> <p>And that's all there is too it! When you run <code>dotnet pack</code> on the project, the resulting NuGet package has the file in the correct place:</p> <p><img src=\"/content/images/2025/generator_props.png\" alt=\"The NuGet package now includes the file\"></p> <p>What's more, any projects consuming the package can <em>just</em> define the property, they don't need to mess around with <code>&lt;CompilerVisibleProperty&gt;</code>:</p> <pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Project</span><span class=\"token punctuation\">&gt;</span></span>  \n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>PropertyGroup</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>EnableEnumGeneratorInterceptor</span><span class=\"token punctuation\">&gt;</span></span>true<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>EnableEnumGeneratorInterceptor</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>PropertyGroup</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Project</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre> <p>Much cleaner!</p> <h2 id=\"enabling-interception-using-a-single-property-setting\" class=\"heading-with-anchor\"><a href=\"#enabling-interception-using-a-single-property-setting\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Enabling interception using a single property setting</a></h2> <p>When I was designing the interceptor support for <em>NetEscapades.EnumGenerators</em> I had the goal of consumers only needing to set a single property in their <em>.csproj</em> to enable the support. Unfortunately, the very design of interceptors makes that a little tricky.</p> <p>Interceptors can be a little confusing, so they require an explicit opt-in from consuming projects. <a href=\"https://github.com/dotnet/roslyn/blob/main/docs/features/interceptors.md#user-opt-in\">Users must specify</a> the property <code>&lt;InterceptorsNamespaces&gt;</code> in their project, which is a list of namespaces that are allowed to contain interceptors. For example:</p> <pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>InterceptorsNamespaces</span><span class=\"token punctuation\">&gt;</span></span>$(InterceptorsNamespaces);Microsoft.AspNetCore.Http.Generated;<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>InterceptorsNamespaces</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre> <p>That makes my goal for a \"simple one property activation\" a little tricky; are users are always going to have to update the main setting <em>and</em> <code>&lt;InterceptorsNamespaces&gt;</code> to use my interceptor? Well, yes and no.</p> <p>In my solution to this issue, I took some inspiration from the built-in source generator interceptors that ship with the .NET runtime—the ASP.NET Core <a href=\"/exploring-the-dotnet-8-preview-changing-method-calls-with-interceptors/#updating-the-minimal-api-generator-to-use-interceptors\">minimal API interceptor</a> and <a href=\"https://github.com/dotnet/runtime/tree/9cf8a80db3354173cfd25dea4660632861dee0eb/src/libraries/Microsoft.Extensions.Configuration.Binder\">the configuration binder interceptor</a>. The configuration binder is particularly interesting, as it behaves exactly as I want: setting <code>&lt;EnableConfigurationBindingGenerator&gt;</code> to <code>true</code> automatically adds the required <code>&lt;InterceptorsNamespaces&gt;</code> values.</p> <p>The configuration binder interceptor achieves this using some NuGet and MSBuild fun:</p> <ul><li>You can add MSBuild properties and items using a <code>.props</code> file in a NuGet file</li> <li>However, customers can set the property in many different ways. That means you don't know exactly <em>when</em> the value of the property be the \"final\" value.</li> <li>Consequently, reading the value in a <code>.targets</code> file is the \"safest\" way to do this, as those are executed after all the various <code>.props</code> files have executed</li></ul> <p>Based on this, the following approach is what I opted for in my <em>NetEscapades.EnumGenerators</em> package.</p> <p>Add a <code>&lt;Package&gt;.targets</code> file (<code>NetEscapades.EnumGenerators.targets</code> in my case) containing a <code>&lt;Target&gt;</code> that runs before other defined targets, which sets the <code>&lt;InterceptorsNamespaces&gt;</code> property based on the value of the <code>&lt;EnableEnumGeneratorInterceptor&gt;</code> property:</p> <pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token comment\">&lt;!-- An arbitrary name for the target, chosen to avoid collisions --&gt;</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Project</span> <span class=\"token attr-name\">InitialTargets</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>NetEscapades_EnumGenerators_Interceptors<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n\n  <span class=\"token comment\">&lt;!-- This is the targe that runs --&gt;</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Target</span> <span class=\"token attr-name\">Name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>NetEscapades_EnumGenerators_Interceptors<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n\n    <span class=\"token comment\">&lt;!-- If the user has set EnableEnumGeneratorInterceptor, modify the interceptor namespaces--&gt;</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>PropertyGroup</span> <span class=\"token attr-name\">Condition</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token punctuation\">'</span>$(EnableEnumGeneratorInterceptor)<span class=\"token punctuation\">'</span> == <span class=\"token punctuation\">'</span>true<span class=\"token punctuation\">'</span><span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n\n      <span class=\"token comment\">&lt;!-- Modifying both InterceptorsNamespaces and InterceptorsPreviewNamespaces, --&gt;</span>\n      <span class=\"token comment\">&lt;!-- in case they're using an old version of the SDK that doesn't support the former --&gt;</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>InterceptorsNamespaces</span><span class=\"token punctuation\">&gt;</span></span>$(InterceptorsNamespaces);NetEscapades.EnumGenerators<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>InterceptorsNamespaces</span><span class=\"token punctuation\">&gt;</span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>InterceptorsPreviewNamespaces</span><span class=\"token punctuation\">&gt;</span></span>$(InterceptorsPreviewNamespaces);NetEscapades.EnumGenerators<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>InterceptorsPreviewNamespaces</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>PropertyGroup</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Target</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Project</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre> <p>This file is then packaged into the NuGet in the same way as for the <code>.props</code> file:</p> <pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>None</span> <span class=\"token attr-name\">Include</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>NetEscapades.EnumGenerators.targets<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">Visible</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>false<span class=\"token punctuation\">\"</span></span>\n      <span class=\"token attr-name\">Pack</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">PackagePath</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>build<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n</code></pre> <p>Which places it in the correct place in the package:</p> <p><img src=\"/content/images/2025/generator_props_2.png\" alt=\"The NuGet package now includes the targets file too\"></p> <p>and now customers have a lovely clean behaviour: they need only to set the following in their project, and the <code>.props</code> and <code>.targets</code> work to set up everything else for them:</p> <pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Project</span> <span class=\"token attr-name\">Sdk</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Microsoft.NET.Sdk<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>PropertyGroup</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>OutputType</span><span class=\"token punctuation\">&gt;</span></span>Exe<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>OutputType</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>TargetFramework</span><span class=\"token punctuation\">&gt;</span></span>net8.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>TargetFramework</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token comment\">&lt;!-- Add this 👇 --&gt;</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>EnableEnumGeneratorInterceptor</span><span class=\"token punctuation\">&gt;</span></span>true<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>EnableEnumGeneratorInterceptor</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>PropertyGroup</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Project</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre> <p>and voila, interceptors!</p> <p>I haven't gone into details about the work that needs to happen in the generator to correctly enable and disable the functionality, but ultimately it comes down to reading the <code>build_property.EnableEnumGeneratorInterceptor</code> value I showed earlier. We can then bail out of interception if it's not required. If you want to see all the details, you can find the <a href=\"https://github.com/andrewlock/NetEscapades.EnumGenerators/blob/ce553416b9aba0a7101c559aac9d18d7b1c1805c/src/NetEscapades.EnumGenerators/EnumGenerator.cs#L53\">code on GitHub</a></p> <h2 id=\"summary\" class=\"heading-with-anchor\"><a href=\"#summary\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Summary</a></h2> <p>In this post I described how you can read MSBuild properties from a source generator, using the <code>AnalyzerConfigOptionsProvider</code>. I showed that you need to prefix the properties with <code>build_property.</code> and explained why this is necessary, based on the <em>.editorconfig</em> file. Next I showed how you can add arbitrary additional properties to this file using <code>&lt;CompilerVisibleProperty&gt;</code> so you can read them from your source generators.</p> <p>Finally, I showed how you can add <code>.props</code> and <code>.targets</code> files to your NuGet packages so that consumers of your package don't need to add these properties themselves. I also showed a specific example of using a <code>.targets</code> file to add additional values to the <code>&lt;InterceptorsNamespaces&gt;</code> property, based on the value of a different property.</p> ",
    "sanitized": "This is the thirteen post in the series: Creating a source generator.  Part 1 - Creating an incremental generatorPart 2 - Testing an incremental generator with snapshot testingPart 3 - Integration testing and NuGet packagingPart 4 - Customising generated code with marker attributesPart 5 - Finding a type declaration's namespace and type hierarchyPart 6 - Saving source generator output in source controlPart 7 - Solving the source generator 'marker attribute' problem - Part 1Part 8 - Solving the source generator 'marker attribute' problem - Part 2Part 9 - Avoiding performance pitfalls in incremental generatorsPart 10 - Testing your incremental generator pipeline outputs are cacheablePart 11 - Implementing an interceptor with a source generatorPart 12 - Reading compilation options and the C# version in source generatorsPart 13 - Accessing MSBuild properties and user configuration from source generators (this post) Part 14 - Supporting multiple .NET SDK versions in a source generatorIn this post I describe how to read MSBuild settings from inside a source generator. I show how you can use this to add \"configuration\" to your source generators so consumers can control some behaviour of the source generator. Finally I show how you can bundle a .targets file with your generator to make some aspects of this easier to use for consumers, particularly when it comes to interceptors. Why might you want to access MSBuild settings? In the previous post I described how some features of the compilation can be accessed on the Compilation object. However, there's a lot you can't get from there. For example, the default RootNamespace does not appear to be accessible from Compilation. Instead, you must access the MSBuild property to know what it's set to. Most of the source generators I've created are controlled solely by attributes applied in code. However there are many cases where you might want to control the behaviour of a source generator in a global way. For example, if you're generating a single type, you may want to be able to control the name of the generated type, or you may want to enable or disable specific features. As a concrete example, I recently needed to do this while working on NetEscapades.EnumGenerators. I wanted the interceptor support to be disabled by default, but for consumers to be able to enable it with an MSBuild flag. In the following sections I'll describe the basics of how to work with both of these aspects. Reading MSBuild settings from a source generator I'll start by showing how you can read the RootNamespace for a project. I've started with this setting because it's readable from source generators automatically. To read an MSBuild setting, you should use the AnalyzerConfigOptionsProvider. The following source generator shows how to do this for the RootNamespace property. It reads the value from the context and creates a file that just contains a comment with the root namespace: [Generator]\npublic sealed class RootNamespaceGenerator : IIncrementalGenerator\n{\n    public void Initialize(IncrementalGeneratorInitializationContext context)\n    {\n        // Create an IncrementalValueProvider from AnalyzerConfigOptionsProvider\n        IncrementalValueProvider<string?> rootNamespace = context\n            .AnalyzerConfigOptionsProvider\n            // Retrieve the RootNamespace property\n            .Select((AnalyzerConfigOptionsProvider c, CancellationToken _) =>\n                c.GlobalOptions.TryGetValue(\"build_property.RootNamespace\", out var nameSpace)\n                    ? nameSpace\n                    : null);\n\n        // Generate the source\n        context.RegisterSourceOutput(rootNamespace, static (spc, nameSpace) =>\n        {\n            var source = $$\"\"\"\n                           // RootNamespace: {{nameSpace}}\n                           \"\"\";\n\n            spc.AddSource(\"Example.g.cs\", source);\n        });\n    }\n}\n If you add this generator to a target project, the generated Example.g.cs file contains something like this following: // RootNamespace: MyExampleProject\n It's important to note that when you retrieve the property from AnalyzerConfigOptionsProvider, you must use the prefix \"build_property.\". You might be wondering why you need that prefix; after all, when you're reading MSBuild properties in .csproj files, you don't need that prefix. To explain why, we'll take a short detour. MSBuild, GeneratedMSBuildEditorConfig.editorconfig, and source generators When you build a .NET project, a number of \"intermediate\" artifacts are created, that are used to create the final build. These files are typically stored inside the obj folder of a project. This can include things like where to find the NuGet packages on disk after a restore, source link details, and runtime configuration details. One such artifact created is <ProjectName>.GeneratedMSBuildEditorConfig.editorconfig. Go ahead, take a look, you'll find this file for all your .NET projects. The exact contents will vary depending on the type of the project and on how your project is built, but it'll look something like this: is_global = true\nbuild_property.TargetFramework = net8.0\nbuild_property.TargetPlatformMinVersion = \nbuild_property.UsingMicrosoftNETSdkWeb = \nbuild_property.ProjectTypeGuids = \nbuild_property.InvariantGlobalization = \nbuild_property.PlatformNeutralAssembly = \nbuild_property.EnforceExtendedAnalyzerRules = \nbuild_property._SupportedPlatformList = Linux,macOS,Windows\nbuild_property.RootNamespace = MyExample\nbuild_property.ProjectDir = C:\\repos\\MyExample\\\nbuild_property.EnableComHosting = \nbuild_property.EnableGeneratedComInterfaceComImportInterop = \nbuild_property.EffectiveAnalysisLevelStyle = 8.0\nbuild_property.EnableCodeStyleSeverity = \n EditorConfig is primarily a specification for maintaining consistent coding style across multiple developers and IDEs when working in the same project. In this case, however, the file is exposing various properties of the MSBuild system, which can then be consumed by your source generator. As you can see from the above listing, only a few properties are exposed, with RootNamespace, ProjectDir, and TargetFramework being the most interesting. So what if you want to read some other MSBuild property? So that a consumer can specify \"settings\" for your generator, for example? Enabling generator access for an MSBuild property You've seen how to access a given MSBuild property, but you can only access properties that are exposed in the generated editor config. To make an arbitrary MSBuild property appear in the editor config, you need to mark it as a \"compiler aware property\". To achieve this, the target project must add a <CompilerVisibleProperty>. For example, if we add the following to a .csproj file, it will set the value of the property <EnableInterceptor> and then mark it as compiler aware: <Project Sdk=\"Microsoft.NET.Sdk\">\n\n  <PropertyGroup>\n    <OutputType>Exe</OutputType>\n    <TargetFramework>net8.0</TargetFramework>\n\n    <!-- Set the value of the property -->\n    <EnableInterceptor>true</EnableInterceptor>\n  </PropertyGroup>\n\n  <ItemGroup>\n    <!-- Mark the property as compiler aware, so it's added to the editor config-->\n    <CompilerVisibleProperty Include=\"EnableInterceptor\" />\n  </ItemGroup>\n</Project>\n If we inspect the generated editor config for this property we can see that the value has indeed been added, on the second line down: is_global = true\nbuild_property.EnableInterceptor = true # 👈 This was added\nbuild_property.TargetFramework = net8.0\nbuild_property.TargetPlatformMinVersion = \nbuild_property.UsingMicrosoftNETSdkWeb = \nbuild_property.ProjectTypeGuids = \nbuild_property.InvariantGlobalization = \nbuild_property.PlatformNeutralAssembly = \nbuild_property.EnforceExtendedAnalyzerRules = \nbuild_property._SupportedPlatformList = Linux,macOS,Windows\nbuild_property.RootNamespace = MyExample\nbuild_property.ProjectDir = C:\\repos\\MyExample\\\nbuild_property.EnableComHosting = \nbuild_property.EnableGeneratedComInterfaceComImportInterop = \nbuild_property.EffectiveAnalysisLevelStyle = 8.0\nbuild_property.EnableCodeStyleSeverity = \n Now that the property is exposed here, we can read it in our generator, and print it as a comment in the generated source, just as we did for RootNamespace: [Generator]\npublic sealed class EnableInterceptorGenerator : IIncrementalGenerator\n{\n    public void Initialize(IncrementalGeneratorInitializationContext context)\n    {\n        var isEnabled = context\n            .AnalyzerConfigOptionsProvider\n            .Select((config, _) =>\n                // Get the value, check if it's set to 'true', otherwise return false\n                config.GlobalOptions\n                    .TryGetValue($\"build_property.EnableInterceptor\", out var enableSwitch)\n                  && enableSwitch.Equals(\"true\", StringComparison.Ordinal));\n\n        // Generate the source\n        context.RegisterSourceOutput(isEnabled, static (spc, enabled) =>\n        {\n            var source = $$\"\"\"\n                           // EnableInterceptor: {{enabled}}\n                           \"\"\";\n\n            spc.AddSource(\"Example.g.cs\", source);\n        });\n    }\n}\n Sure enough, if we check the Example.g.cs file in our target project, we'll see it looks like the following: // EnableInterceptor: True\n If we change <EnableInterceptor> to be false, or if we remove the <CompilerVisibleProperty> value, then the output changes to be: // EnableInterceptor: False\n In the example above I'm not doing anything particularly interesting with the setting value, but you could use it to control the generated source in a more detailed way, or to enable or disable features, for example. OK, that's all pretty cool, but it kinda sucks that consumers have to specify both the property value <EnableInterceptor> and add <CompilerVisibleProperty>. Luckily, if you're creating a NuGet package, you can use a NuGet feature to do that automatically. Automatically adding <CompilerVisibleProperty> for a setting to a NuGet package NuGet packages can contain many different types of files. A non-exhaustive list includes: Dlls that should be referenced by the target application. Analyzers and source generators that are used by the compiler in the target project. Content that is just copied directly to a target project's build output. Build files, that change how the target project is compiled. We're going to use that last feature to package a .props file with our NuGet package, which automatically adds the <CompilerVisibleProperty> we need. Overall this is a relatively simple feature: we create a file with the right name, pack it into a NuGet package, and any project consuming our NuGet package automatically gets the .props file added to it.  You can read more about this NuGet feature in the documentation.  In order to keep things more concrete, I'm going to switch to describing how things work in my NetEscapades.EnumGenerators package, instead of the hypothetical generators I've described so far. First of all, we create a file called <Package>.props, i.e. NetEscapades.EnumGenerators.props. In here we add the <CompilerVisibleProperty> definition we need to access from the generator: <Project>  \n  <ItemGroup>\n    <CompilerVisibleProperty Include=\"EnableEnumGeneratorInterceptor\" />\n  </ItemGroup>\n</Project>\n This ensures the EnableEnumGeneratorInterceptor setting is available from the NetEscapades.EnumGenerators source generator. Next, we need to make sure we pack the NetEscapades.EnumGenerators.props file into the correct place in the NuGet package. The following line in the NetEscapades.EnumGenerators.csproj project file makes sure the file is packed into the build folder of the package: <None Include=\"NetEscapades.EnumGenerators.props\" Visible=\"false\"\n      Pack=\"true\" PackagePath=\"build\" />\n And that's all there is too it! When you run dotnet pack on the project, the resulting NuGet package has the file in the correct place:  What's more, any projects consuming the package can just define the property, they don't need to mess around with <CompilerVisibleProperty>: <Project>  \n  <PropertyGroup>\n    <EnableEnumGeneratorInterceptor>true</EnableEnumGeneratorInterceptor>\n  </PropertyGroup>\n</Project>\n Much cleaner! Enabling interception using a single property setting When I was designing the interceptor support for NetEscapades.EnumGenerators I had the goal of consumers only needing to set a single property in their .csproj to enable the support. Unfortunately, the very design of interceptors makes that a little tricky. Interceptors can be a little confusing, so they require an explicit opt-in from consuming projects. Users must specify the property <InterceptorsNamespaces> in their project, which is a list of namespaces that are allowed to contain interceptors. For example: <InterceptorsNamespaces>$(InterceptorsNamespaces);Microsoft.AspNetCore.Http.Generated;</InterceptorsNamespaces>\n That makes my goal for a \"simple one property activation\" a little tricky; are users are always going to have to update the main setting and <InterceptorsNamespaces> to use my interceptor? Well, yes and no. In my solution to this issue, I took some inspiration from the built-in source generator interceptors that ship with the .NET runtime—the ASP.NET Core minimal API interceptor and the configuration binder interceptor. The configuration binder is particularly interesting, as it behaves exactly as I want: setting <EnableConfigurationBindingGenerator> to true automatically adds the required <InterceptorsNamespaces> values. The configuration binder interceptor achieves this using some NuGet and MSBuild fun: You can add MSBuild properties and items using a .props file in a NuGet file However, customers can set the property in many different ways. That means you don't know exactly when the value of the property be the \"final\" value. Consequently, reading the value in a .targets file is the \"safest\" way to do this, as those are executed after all the various .props files have executed Based on this, the following approach is what I opted for in my NetEscapades.EnumGenerators package. Add a <Package>.targets file (NetEscapades.EnumGenerators.targets in my case) containing a <Target> that runs before other defined targets, which sets the <InterceptorsNamespaces> property based on the value of the <EnableEnumGeneratorInterceptor> property: <!-- An arbitrary name for the target, chosen to avoid collisions -->\n<Project InitialTargets=\"NetEscapades_EnumGenerators_Interceptors\">\n\n  <!-- This is the targe that runs -->\n  <Target Name=\"NetEscapades_EnumGenerators_Interceptors\">\n\n    <!-- If the user has set EnableEnumGeneratorInterceptor, modify the interceptor namespaces-->\n    <PropertyGroup Condition=\"'$(EnableEnumGeneratorInterceptor)' == 'true'\">\n\n      <!-- Modifying both InterceptorsNamespaces and InterceptorsPreviewNamespaces, -->\n      <!-- in case they're using an old version of the SDK that doesn't support the former -->\n      <InterceptorsNamespaces>$(InterceptorsNamespaces);NetEscapades.EnumGenerators</InterceptorsNamespaces>\n      <InterceptorsPreviewNamespaces>$(InterceptorsPreviewNamespaces);NetEscapades.EnumGenerators</InterceptorsPreviewNamespaces>\n    </PropertyGroup>\n  </Target>\n</Project>\n This file is then packaged into the NuGet in the same way as for the .props file: <None Include=\"NetEscapades.EnumGenerators.targets\" Visible=\"false\"\n      Pack=\"true\" PackagePath=\"build\" />\n Which places it in the correct place in the package:  and now customers have a lovely clean behaviour: they need only to set the following in their project, and the .props and .targets work to set up everything else for them: <Project Sdk=\"Microsoft.NET.Sdk\">\n\n  <PropertyGroup>\n    <OutputType>Exe</OutputType>\n    <TargetFramework>net8.0</TargetFramework>\n    <!-- Add this 👇 -->\n    <EnableEnumGeneratorInterceptor>true</EnableEnumGeneratorInterceptor>\n  </PropertyGroup>\n</Project>\n and voila, interceptors! I haven't gone into details about the work that needs to happen in the generator to correctly enable and disable the functionality, but ultimately it comes down to reading the build_property.EnableEnumGeneratorInterceptor value I showed earlier. We can then bail out of interception if it's not required. If you want to see all the details, you can find the code on GitHub Summary In this post I described how you can read MSBuild properties from a source generator, using the AnalyzerConfigOptionsProvider. I showed that you need to prefix the properties with build_property. and explained why this is necessary, based on the .editorconfig file. Next I showed how you can add arbitrary additional properties to this file using <CompilerVisibleProperty> so you can read them from your source generators. Finally, I showed how you can add .props and .targets files to your NuGet packages so that consumers of your package don't need to add these properties themselves. I also showed a specific example of using a .targets file to add additional values to the <InterceptorsNamespaces> property, based on the value of a different property."
  },
  {
    "itemId": "https://andrewlock.net/creating-a-source-generator-part-12-reading-compilation-options-and-csharp-version-in-source-generators/",
    "raw": "<img src=\"https://andrewlock.net/content/images/2025/lang_version_banner.webp\" /><nav><p>This is the twelve post in the series: <a href=\"/series/creating-a-source-generator/\">Creating a source generator</a>. </p> <ol class=\"list-none\"><li><a href=\"/creating-a-source-generator-part-1-creating-an-incremental-source-generator/\">Part 1 - Creating an incremental generator</a></li><li><a href=\"/creating-a-source-generator-part-2-testing-an-incremental-generator-with-snapshot-testing/\">Part 2 - Testing an incremental generator with snapshot testing</a></li><li><a href=\"/creating-a-source-generator-part-3-integration-testing-and-packaging/\">Part 3 - Integration testing and NuGet packaging</a></li><li><a href=\"/creating-a-source-generator-part-4-customising-generated-code-with-marker-attributes/\">Part 4 - Customising generated code with marker attributes</a></li><li><a href=\"/creating-a-source-generator-part-5-finding-a-type-declarations-namespace-and-type-hierarchy/\">Part 5 - Finding a type declaration's namespace and type hierarchy</a></li><li><a href=\"/creating-a-source-generator-part-6-saving-source-generator-output-in-source-control/\">Part 6 - Saving source generator output in source control</a></li><li><a href=\"/creating-a-source-generator-part-7-solving-the-source-generator-marker-attribute-problem-part1/\">Part 7 - Solving the source generator 'marker attribute' problem - Part 1</a></li><li><a href=\"/creating-a-source-generator-part-8-solving-the-source-generator-marker-attribute-problem-part2/\">Part 8 - Solving the source generator 'marker attribute' problem - Part 2</a></li><li><a href=\"/creating-a-source-generator-part-9-avoiding-performance-pitfalls-in-incremental-generators/\">Part 9 - Avoiding performance pitfalls in incremental generators</a></li><li><a href=\"/creating-a-source-generator-part-10-testing-your-incremental-generator-pipeline-outputs-are-cacheable/\">Part 10 - Testing your incremental generator pipeline outputs are cacheable</a></li><li><a href=\"/creating-a-source-generator-part-11-implementing-an-interceptor-with-a-source-generator/\">Part 11 - Implementing an interceptor with a source generator</a></li><li>Part 12 - Reading compilation options and the C# version in source generators (this post) </li><li><a href=\"/creating-a-source-generator-part-13-providing-and-accessing-msbuild-settings-in-source-generators/\">Part 13 - Accessing MSBuild properties and user configuration from source generators</a></li><li><a href=\"/creating-a-source-generator-part-14-supporting-multiple-sdk-versions-in-a-source-generator/\">Part 14 - Supporting multiple .NET SDK versions in a source generator</a></li></ol></nav><p>In this post I show how to access information about the project a source generator is running in, such as the C# version, the name of the assembly, or the current configuration (<code>Debug</code> or <code>Release</code>).</p> <h2 id=\"why-might-you-need-details-about-the-compilation-\" class=\"heading-with-anchor\"><a href=\"#why-might-you-need-details-about-the-compilation-\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Why might you need details about the compilation?</a></h2> <p>If you're writing a source generator, you're generating C# source code that is included in the target project's compilation. But you have to be careful—which C# features are you using in your generated code? Do you know which features you <em>can</em> safely use?</p> <p>For example, if you're building a source generator that could be used with the .NET 6 or 7 SDK, then you <em>can't</em> just assume that you can use <a href=\"/series/behind-the-scenes-of-collection-expressions/\">collection expressions</a>. Collection expressions were introduced in C# 12 (along with .NET 8), and <em>can</em> be used when you're targeting earlier framework versions of .NET, as long as you're using a new enough version of the .NET SDK and are using C# 12 or higher.</p> <p>Depending on the code you're generating, that means you should <em>potentially</em> be generating different code based on the consuming project's C# version. Collection expressions are a great example that necessitate this, as in general, you <em>should</em> use them where you can, because <a href=\"/behind-the-scenes-of-collection-expressions-part-2-exploring-the-generated-code-list-and-fallback-cases/#optimizing-listt\">they can improve runtime performance</a>.</p> <p>Yes, that's kind of a pain, and it seems <em>generally</em> quite rare to bother with the added complexity, outside of the generators that ship with the runtime. And even in those cases, they <a href=\"https://github.com/dotnet/runtime/blob/dae890906431049d32e24d498a1d707a441a64a8/src/libraries/System.Text.RegularExpressions/gen/RegexGenerator.cs#L296-L302\">tend to just bail out of generation entirely</a> rather than support multiple SDK versions.</p> <blockquote> <p>Interestingly, <a href=\"https://github.com/dotnet/roslyn/issues/61094\">there was a proposal</a> a few years ago to let the version of C# used in the generator be <em>higher</em> than that used in the rest of the project. This may have solved the issue in some cases, but it didn't go anywhere due to the additional complexity it would have added to the compiler and/or IDEs.</p> </blockquote> <p>In the following sections I'll show how to access some basic compilation settings, and then we'll move onto detecting and working with the C# version.</p> <h2 id=\"accessing-details-about-the-compilation-from-a-source-generator\" class=\"heading-with-anchor\"><a href=\"#accessing-details-about-the-compilation-from-a-source-generator\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Accessing details about the compilation from a source generator</a></h2> <p>We'll start by retrieving some static compilation settings like the platform being compiled for (e.g. <code>x64</code>, <code>x86</code>, or, more likely, <code>AnyCPU</code>) and the configuration setting (<code>Debug</code> or <code>Release</code>). I'll also show how to grab the name of the assembly of the target project.</p> <p>These details are all available from within a source generator from the <code>Compilation</code> type. You can access the <code>Compilation</code> using <code>IncrementalGeneratorInitializationContext.CompilationProvider</code>. For example, the following very simple generator shows how to grab several details, and output a source generated file that includes the values as comments. It's more likely that you would want to expose these as constants in a generated class, but this is just for demo purposes!</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">Generator</span></span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">sealed</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">IncrementalBuildInformationGenerator</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">IIncrementalGenerator</span></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Initialize</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IncrementalGeneratorInitializationContext</span> context<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// Create an IncrementalValueProvider from CompilationProvider</span>\n        <span class=\"token class-name\">IncrementalValueProvider<span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">(</span>Platform Platform<span class=\"token punctuation\">,</span> OptimizationLevel OptimizationLevel<span class=\"token punctuation\">,</span> <span class=\"token keyword\">string</span><span class=\"token punctuation\">?</span> AssemblyName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&gt;</span></span> settings <span class=\"token operator\">=</span> context\n          <span class=\"token punctuation\">.</span>CompilationProvider\n          <span class=\"token punctuation\">.</span><span class=\"token function\">Select</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Compilation</span> c<span class=\"token punctuation\">,</span> <span class=\"token class-name\">CancellationToken</span> _<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span>\n          <span class=\"token punctuation\">{</span>\n              <span class=\"token comment\">// Grab the values from Compilation and CompilationOptions</span>\n              <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">.</span>Options<span class=\"token punctuation\">.</span>Platform<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">.</span>Options<span class=\"token punctuation\">.</span>OptimizationLevel<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">.</span>AssemblyName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// Generate the source from the captured values</span>\n        context<span class=\"token punctuation\">.</span><span class=\"token function\">RegisterSourceOutput</span><span class=\"token punctuation\">(</span>settings<span class=\"token punctuation\">,</span> <span class=\"token keyword\">static</span> <span class=\"token punctuation\">(</span>spc<span class=\"token punctuation\">,</span> opts<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">var</span></span>  source <span class=\"token operator\">=</span> \n                $<span class=\"token interpolation-string\"><span class=\"token string\">$\"\"</span></span>\"\n                <span class=\"token comment\">// Platform: {{opts.Platform}}</span>\n                <span class=\"token comment\">// Configuration: {{opts.OptimizationLevel}}</span>\n                <span class=\"token comment\">// AssemblyName: {{opts.AssemblyName}}</span>\n                <span class=\"token string\">\"\"</span>\"<span class=\"token punctuation\">;</span>\n\n            spc<span class=\"token punctuation\">.</span><span class=\"token function\">AddSource</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Example.g.cs\"</span><span class=\"token punctuation\">,</span> source<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>When you run this generator, the generated <em>Example.g.cs</em> file contains something like this following:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token comment\">// Platform: AnyCPU</span>\n<span class=\"token comment\">// AssemblyName: MyExampleProject</span>\n<span class=\"token comment\">// Configuration: Release</span>\n</code></pre> <p>There are <em>many</em> more details you can find on the <code>Compilation</code> and <code>CompilationOptions</code> object if you need them. However, you should be a little careful about doing to much work in the CompilationProvider, and should be wary about accessing and using symbols and some syntax. The <code>CompilationProvider</code> returns a new value for every keypress in the IDE, so you should <a href=\"/creating-a-source-generator-part-9-avoiding-performance-pitfalls-in-incremental-generators/#5-be-careful-using-compilationprovider\">bear that in mind</a>.</p> <h2 id=\"finding-the-c-language-version\" class=\"heading-with-anchor\"><a href=\"#finding-the-c-language-version\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Finding the C# Language version</a></h2> <p>The <code>CompilationOptions</code> object contains a lot of details about the compilation, but it <em>doesn't</em> expose anything about which version of C# is being used. That's because those details are exposed by the <code>CSharpCompilation</code> object, which is a <em>subclass</em> of <code>Compilation</code>.</p> <p>To access the C# language version, we can extend the above example, checking that the provided compilation object is a <code>CSharpCompilation</code>, and extracting the <code>LanguageVersion</code>. <em>Theoretically</em> you could be in a VB project, so can't guarantee that you'll have a <code>CSharpCompilation</code>, though I'm really not sure if the generator even runs in that case, so this is mostly just a case of keeping the C# compiler happy.</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">Generator</span></span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">sealed</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">IncrementalBuildInformationGenerator</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">IIncrementalGenerator</span></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Initialize</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IncrementalGeneratorInitializationContext</span> context<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> settings <span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span>CompilationProvider\n          <span class=\"token punctuation\">.</span><span class=\"token function\">Select</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">,</span> _<span class=\"token punctuation\">)</span>  <span class=\"token operator\">=&gt;</span> \n          <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// Assuming this is a C# project, this should be true!</span>\n            <span class=\"token class-name\">LanguageVersion<span class=\"token punctuation\">?</span></span> csharpVersion <span class=\"token operator\">=</span> c <span class=\"token keyword\">is</span> <span class=\"token class-name\">CSharpCompilation</span> comp\n              <span class=\"token punctuation\">?</span> comp<span class=\"token punctuation\">.</span>LanguageVersion\n              <span class=\"token punctuation\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n                c<span class=\"token punctuation\">.</span>Options<span class=\"token punctuation\">.</span>Platform<span class=\"token punctuation\">,</span>\n                c<span class=\"token punctuation\">.</span>Options<span class=\"token punctuation\">.</span>OptimizationLevel<span class=\"token punctuation\">,</span>\n                c<span class=\"token punctuation\">.</span>AssemblyName<span class=\"token punctuation\">,</span>\n                <span class=\"token named-parameter punctuation\">LanguageVersion</span><span class=\"token punctuation\">:</span> csharpVersion<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        context<span class=\"token punctuation\">.</span><span class=\"token function\">RegisterSourceOutput</span><span class=\"token punctuation\">(</span>settings<span class=\"token punctuation\">,</span> <span class=\"token keyword\">static</span> <span class=\"token punctuation\">(</span>spc<span class=\"token punctuation\">,</span> opts<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span>\n        <span class=\"token punctuation\">{</span>\n           <span class=\"token class-name\"><span class=\"token keyword\">var</span></span>  source <span class=\"token operator\">=</span> \n              $<span class=\"token interpolation-string\"><span class=\"token string\">$\"\"</span></span>\"\n                <span class=\"token comment\">// Platform: {{opts.Platform}}</span>\n                <span class=\"token comment\">// Configuration: {{opts.OptimizationLevel}}</span>\n                <span class=\"token comment\">// AssemblyName: {{opts.AssemblyName}}</span>\n                <span class=\"token comment\">// C# version: {{opts.LanguageVersion}}</span>\n              <span class=\"token string\">\"\"</span>\"<span class=\"token punctuation\">;</span>\n\n            spc<span class=\"token punctuation\">.</span><span class=\"token function\">AddSource</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Example.g.cs\"</span><span class=\"token punctuation\">,</span> source<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>With this addition, the generated file looks something like this instead:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token comment\">// Platform: AnyCPU</span>\n<span class=\"token comment\">// AssemblyName: MyExampleProject</span>\n<span class=\"token comment\">// Configuration: Release</span>\n<span class=\"token comment\">// C# version: CSharp13</span>\n</code></pre> <p>The <code>LanguageVersion</code> property is an <code>enum</code>, so we're just printing the <code>ToString</code> value here.</p> <h2 id=\"understanding-the-possible-values-of-c-version\" class=\"heading-with-anchor\"><a href=\"#understanding-the-possible-values-of-c-version\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Understanding the possible values of C# version</a></h2> <p>One interesting point is that the possible values of <code>LanguageVersion</code> at <em>compile</em> time are controlled by the version of the <em>Microsoft.CodeAnalysis.CSharp</em> package you reference in your source generator. For example, for the <code>4.4.0</code> version of the package, which corresponds to the .NET 7 (i.e. the C# 11) SDK release, <code>LanguageVersion</code> contains the following values:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">LanguageVersion</span>\n<span class=\"token punctuation\">{</span>\n    CSharp1 <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n    CSharp2 <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n    CSharp3 <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span>\n    CSharp4 <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span>\n    CSharp5 <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span>\n    CSharp6 <span class=\"token operator\">=</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span>\n    CSharp7 <span class=\"token operator\">=</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span>\n    CSharp7_1 <span class=\"token operator\">=</span> <span class=\"token number\">701</span><span class=\"token punctuation\">,</span>\n    CSharp7_2 <span class=\"token operator\">=</span> <span class=\"token number\">702</span><span class=\"token punctuation\">,</span>\n    CSharp7_3 <span class=\"token operator\">=</span> <span class=\"token number\">703</span><span class=\"token punctuation\">,</span>\n    CSharp8 <span class=\"token operator\">=</span> <span class=\"token number\">800</span><span class=\"token punctuation\">,</span>\n    CSharp9 <span class=\"token operator\">=</span> <span class=\"token number\">900</span><span class=\"token punctuation\">,</span>\n    CSharp10 <span class=\"token operator\">=</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">,</span>\n    CSharp11 <span class=\"token operator\">=</span> <span class=\"token number\">1100</span><span class=\"token punctuation\">,</span>\n    LatestMajor <span class=\"token operator\">=</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">.</span>MaxValue <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n    Preview <span class=\"token operator\">=</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">.</span>MaxValue <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n    Latest <span class=\"token operator\">=</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">.</span>MaxValue<span class=\"token punctuation\">,</span>\n    Default <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>However, if you run the above generator in a project that's built with the .NET 9 SDK (which supports C# 13), you'll see the following output:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token comment\">// Platform: AnyCPU</span>\n<span class=\"token comment\">// AssemblyName: MyExampleProject</span>\n<span class=\"token comment\">// Configuration: Release</span>\n<span class=\"token comment\">// C# version: CSharp13</span>\n</code></pre> <p>The above shows that we're building with C# 13, and that the <code>LanguageVersion</code> property returned the value <code>CSharp13</code>, <em>even though our generator didn't know that value existed at at compile time</em>!</p> <blockquote> <p>This demonstrates the relationship with the <em>Microsoft.CodeAnalysis.CSharp</em> package you reference at compile time for your source generator versus at runtime. The NuGet package is providing an API surface to code against, but the .NET SDK is free to provide a <em>different</em> implementation, as long as the API is binary compatible. In this case, adding an additional enum value is perfectly legal.</p> </blockquote> <p>So remember: the <code>LanguageVersion</code> <em>may</em> contain a value that you can't reference at compile time!</p> <h2 id=\"changing-the-c-langversion-in-a-project\" class=\"heading-with-anchor\"><a href=\"#changing-the-c-langversion-in-a-project\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Changing the C# LangVersion in a project</a></h2> <p>By default, the version of C# used by a project is tied to the version of the framework it's targeting. So if you're targeting .NET 8, the default C# version is <code>12</code>, while for .NET 9 it's <code>13</code>.</p> <p>You can override the C# version for a project using the <code>&lt;LangVersion&gt;</code> property in your <em>.csproj</em>:</p> <pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Project</span> <span class=\"token attr-name\">Sdk</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Microsoft.NET.Sdk<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>PropertyGroup</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>TargetFramework</span><span class=\"token punctuation\">&gt;</span></span>net9.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>TargetFramework</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token comment\">&lt;!-- Using C#10 instead of the default C# 13 --&gt;</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>LangVersion</span><span class=\"token punctuation\">&gt;</span></span>10<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>LangVersion</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>PropertyGroup</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Project</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre> <p>The source generator above detects this change, and the <code>LanguageVersion</code> updates as expected:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token comment\">// Platform: AnyCPU</span>\n<span class=\"token comment\">// AssemblyName: MyExampleProject</span>\n<span class=\"token comment\">// Configuration: Release</span>\n<span class=\"token comment\">// C# version: CSharp10</span>\n</code></pre> <p>Note that it's <em>also</em> possible to <a href=\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/configure-language-version#c-language-version-reference\">specify some \"special\" versions</a> in the <code>&lt;LangVersion&gt;</code> element:</p> <ul><li><code>default</code> or <code>latestMajor</code>: The compiler accepts syntax from the latest released major version of the compiler.</li> <li><code>latest</code>: The compiler accepts syntax from the latest released version of the compiler (including minor version).</li> <li><code>preview</code>: The compiler accepts all valid language syntax from the latest preview version.</li></ul> <p>Note that if users specifies <code>default</code>, <code>latest</code>, or <code>latestMajor</code> in their <em>.csproj</em> it's automatically mapped to the corresponding specific <code>CSharpX</code> version when you retrieve it in the <code>LanguageVersion</code> property. For example, setting this in your <em>.csproj</em></p> <pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>LangVersion</span><span class=\"token punctuation\">&gt;</span></span>latest<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>LangVersion</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre> <p>results in the following generated C# version (when running with the .NET 9 SDK)</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token comment\">// C# version: CSharp13</span>\n</code></pre> <p>The one exception to this is <code>Preview</code>, which <em>isn't</em> re-mapped as far as I can tell (presumably because the \"next\" C# version doesn't have an entry in the enum)! So if the target project has this:</p> <pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>LangVersion</span><span class=\"token punctuation\">&gt;</span></span>preview<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>LangVersion</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre> <p>then your generated code looks like this:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token comment\">// C# version: Preview</span>\n</code></pre> <p>Once you have extracted a <code>LanguageVersion</code> in your source generator, the question becomes what to <em>do</em> with it.</p> <h2 id=\"generating-different-code-based-on-languageversion\" class=\"heading-with-anchor\"><a href=\"#generating-different-code-based-on-languageversion\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Generating different code based on <code>LanguageVersion</code></a></h2> <p>In the extreme case, you might decide that you simply can't support generating code unless a specific C# version is supported. If that's the case, you can simply add a version check wherever it's required in your pipeline to bail out.</p> <p>Alternatively, you might decide that you just want to generate <em>different</em> code. If so, then you'll probably want to add a condition in your generation code something like the following:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>currentVersion <span class=\"token operator\">&lt;=</span> LanguageVersion<span class=\"token punctuation\">.</span>CSharp11<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// can't use collection expressions</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"\"</span>\"\n           <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">List<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">&gt;</span></span>\n           <span class=\"token punctuation\">{</span>\n               <span class=\"token string\">\"value1\"</span><span class=\"token punctuation\">,</span>\n               <span class=\"token string\">\"value2\"</span><span class=\"token punctuation\">,</span>\n           <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n           <span class=\"token string\">\"\"</span>\"\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">else</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// C# 12+ gives us collection expressions</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"\"</span>\"\n           <span class=\"token keyword\">return</span>\n           <span class=\"token punctuation\">[</span>\n               <span class=\"token string\">\"value1\"</span><span class=\"token punctuation\">,</span>\n               <span class=\"token string\">\"value2\"</span><span class=\"token punctuation\">,</span>\n           <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n           <span class=\"token string\">\"\"</span>\"\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>Obviously it's a toy example, but it's pretty much all you need to do! The only real complexity is when you're referencing a version of <em>Microsoft.CodeAnalysis.CSharp</em> that doesn't contain the <code>LanguageVersion</code> property you need.</p> <blockquote> <p>The version of the <em>Microsoft.CodeAnalysis.CSharp</em> package ties directly to a specific version of the Rosyln API and .NET SDK, so you often can't \"simply\" update the package, as that reduces the range of SDKs your source generator works on. I'll talk more about this in a subsequent post.</p> </blockquote> <p>For example, in the above code I worked around the fact that <code>CSharp12</code> wasn't an option in the <code>4.4.0</code> version of <em>Microsoft.CodeAnalysis.CSharp</em>. But what if I needed to specialise for <code>CSharp13</code>? I couldn't use any cute <code>&lt;=</code> tricks for that…</p> <p>I think the best option in that scenario is to use the fact that the values for future C# versions use known <code>int</code> values, and to \"cast\" to the correct value, for example:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token comment\">// test for C#13 or higher</span>\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>currentVersion <span class=\"token operator\">&gt;=</span> <span class=\"token punctuation\">(</span>LanguageVersion<span class=\"token punctuation\">)</span><span class=\"token number\">1300</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// can use params collections</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"\"</span>\"\n           <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Loop</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">params</span> <span class=\"token class-name\">ReadOnlySpan<span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">&gt;</span></span> items<span class=\"token punctuation\">)</span>\n           <span class=\"token punctuation\">{</span>\n               <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> item <span class=\"token keyword\">in</span> items<span class=\"token punctuation\">)</span>\n                  Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span>\n           <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n           <span class=\"token string\">\"\"</span>\"\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">else</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// No params collections, have to use array instead</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"\"</span>\"\n           <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Loop</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">params</span> <span class=\"token class-name\">T<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> items<span class=\"token punctuation\">)</span>\n           <span class=\"token punctuation\">{</span>\n               <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> item <span class=\"token keyword\">in</span> items<span class=\"token punctuation\">)</span>\n                  Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span>\n           <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n           <span class=\"token string\">\"\"</span>\"\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>It's not particularly pretty, but it works!</p> <p>I think that covers pretty much everything to do with fetching compilation options and language versions. I haven't covered reading MSBuild properties yet, as that's a bit more involved. I'll cover that in the next post.</p> <h2 id=\"summary\" class=\"heading-with-anchor\"><a href=\"#summary\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Summary</a></h2> <p>In this post I showed how you can retrieve compilation options such as the current configuration and platform from a <code>Compilation</code> object in a source generator. I then showed how you can determine the C# version used by the target project. This is important information for a source generator, as you must make sure not to generate code that contains features from an unsupported C# version.</p> <p>In the next post I'll show how to read MSBuild properties from the target project, how you can use those to configure your source generator, and how to make it easier for users by packing extra files in a NuGet package.</p> ",
    "sanitized": "This is the twelve post in the series: Creating a source generator.  Part 1 - Creating an incremental generatorPart 2 - Testing an incremental generator with snapshot testingPart 3 - Integration testing and NuGet packagingPart 4 - Customising generated code with marker attributesPart 5 - Finding a type declaration's namespace and type hierarchyPart 6 - Saving source generator output in source controlPart 7 - Solving the source generator 'marker attribute' problem - Part 1Part 8 - Solving the source generator 'marker attribute' problem - Part 2Part 9 - Avoiding performance pitfalls in incremental generatorsPart 10 - Testing your incremental generator pipeline outputs are cacheablePart 11 - Implementing an interceptor with a source generatorPart 12 - Reading compilation options and the C# version in source generators (this post) Part 13 - Accessing MSBuild properties and user configuration from source generatorsPart 14 - Supporting multiple .NET SDK versions in a source generatorIn this post I show how to access information about the project a source generator is running in, such as the C# version, the name of the assembly, or the current configuration (Debug or Release). Why might you need details about the compilation? If you're writing a source generator, you're generating C# source code that is included in the target project's compilation. But you have to be careful—which C# features are you using in your generated code? Do you know which features you can safely use? For example, if you're building a source generator that could be used with the .NET 6 or 7 SDK, then you can't just assume that you can use collection expressions. Collection expressions were introduced in C# 12 (along with .NET 8), and can be used when you're targeting earlier framework versions of .NET, as long as you're using a new enough version of the .NET SDK and are using C# 12 or higher. Depending on the code you're generating, that means you should potentially be generating different code based on the consuming project's C# version. Collection expressions are a great example that necessitate this, as in general, you should use them where you can, because they can improve runtime performance. Yes, that's kind of a pain, and it seems generally quite rare to bother with the added complexity, outside of the generators that ship with the runtime. And even in those cases, they tend to just bail out of generation entirely rather than support multiple SDK versions.  Interestingly, there was a proposal a few years ago to let the version of C# used in the generator be higher than that used in the rest of the project. This may have solved the issue in some cases, but it didn't go anywhere due to the additional complexity it would have added to the compiler and/or IDEs.  In the following sections I'll show how to access some basic compilation settings, and then we'll move onto detecting and working with the C# version. Accessing details about the compilation from a source generator We'll start by retrieving some static compilation settings like the platform being compiled for (e.g. x64, x86, or, more likely, AnyCPU) and the configuration setting (Debug or Release). I'll also show how to grab the name of the assembly of the target project. These details are all available from within a source generator from the Compilation type. You can access the Compilation using IncrementalGeneratorInitializationContext.CompilationProvider. For example, the following very simple generator shows how to grab several details, and output a source generated file that includes the values as comments. It's more likely that you would want to expose these as constants in a generated class, but this is just for demo purposes! [Generator]\npublic sealed class IncrementalBuildInformationGenerator : IIncrementalGenerator\n{\n    public void Initialize(IncrementalGeneratorInitializationContext context)\n    {\n        // Create an IncrementalValueProvider from CompilationProvider\n        IncrementalValueProvider<(Platform Platform, OptimizationLevel OptimizationLevel, string? AssemblyName)> settings = context\n          .CompilationProvider\n          .Select((Compilation c, CancellationToken _) =>\n          {\n              // Grab the values from Compilation and CompilationOptions\n              return (c.Options.Platform, c.Options.OptimizationLevel, c.AssemblyName);\n          });\n\n        // Generate the source from the captured values\n        context.RegisterSourceOutput(settings, static (spc, opts) =>\n        {\n            var  source = \n                $$\"\"\"\n                // Platform: {{opts.Platform}}\n                // Configuration: {{opts.OptimizationLevel}}\n                // AssemblyName: {{opts.AssemblyName}}\n                \"\"\";\n\n            spc.AddSource(\"Example.g.cs\", source);\n        });\n    }\n}\n When you run this generator, the generated Example.g.cs file contains something like this following: // Platform: AnyCPU\n// AssemblyName: MyExampleProject\n// Configuration: Release\n There are many more details you can find on the Compilation and CompilationOptions object if you need them. However, you should be a little careful about doing to much work in the CompilationProvider, and should be wary about accessing and using symbols and some syntax. The CompilationProvider returns a new value for every keypress in the IDE, so you should bear that in mind. Finding the C# Language version The CompilationOptions object contains a lot of details about the compilation, but it doesn't expose anything about which version of C# is being used. That's because those details are exposed by the CSharpCompilation object, which is a subclass of Compilation. To access the C# language version, we can extend the above example, checking that the provided compilation object is a CSharpCompilation, and extracting the LanguageVersion. Theoretically you could be in a VB project, so can't guarantee that you'll have a CSharpCompilation, though I'm really not sure if the generator even runs in that case, so this is mostly just a case of keeping the C# compiler happy. [Generator]\npublic sealed class IncrementalBuildInformationGenerator : IIncrementalGenerator\n{\n    public void Initialize(IncrementalGeneratorInitializationContext context)\n    {\n        var settings = context.CompilationProvider\n          .Select((c, _)  => \n          {\n            // Assuming this is a C# project, this should be true!\n            LanguageVersion? csharpVersion = c is CSharpCompilation comp\n              ? comp.LanguageVersion\n              : null;\n\n            return (\n                c.Options.Platform,\n                c.Options.OptimizationLevel,\n                c.AssemblyName,\n                LanguageVersion: csharpVersion);\n          });\n\n        context.RegisterSourceOutput(settings, static (spc, opts) =>\n        {\n           var  source = \n              $$\"\"\"\n                // Platform: {{opts.Platform}}\n                // Configuration: {{opts.OptimizationLevel}}\n                // AssemblyName: {{opts.AssemblyName}}\n                // C# version: {{opts.LanguageVersion}}\n              \"\"\";\n\n            spc.AddSource(\"Example.g.cs\", source);\n        });\n    }\n}\n With this addition, the generated file looks something like this instead: // Platform: AnyCPU\n// AssemblyName: MyExampleProject\n// Configuration: Release\n// C# version: CSharp13\n The LanguageVersion property is an enum, so we're just printing the ToString value here. Understanding the possible values of C# version One interesting point is that the possible values of LanguageVersion at compile time are controlled by the version of the Microsoft.CodeAnalysis.CSharp package you reference in your source generator. For example, for the 4.4.0 version of the package, which corresponds to the .NET 7 (i.e. the C# 11) SDK release, LanguageVersion contains the following values: public enum LanguageVersion\n{\n    CSharp1 = 1,\n    CSharp2 = 2,\n    CSharp3 = 3,\n    CSharp4 = 4,\n    CSharp5 = 5,\n    CSharp6 = 6,\n    CSharp7 = 7,\n    CSharp7_1 = 701,\n    CSharp7_2 = 702,\n    CSharp7_3 = 703,\n    CSharp8 = 800,\n    CSharp9 = 900,\n    CSharp10 = 1000,\n    CSharp11 = 1100,\n    LatestMajor = int.MaxValue - 2,\n    Preview = int.MaxValue - 1,\n    Latest = int.MaxValue,\n    Default = 0,\n}\n However, if you run the above generator in a project that's built with the .NET 9 SDK (which supports C# 13), you'll see the following output: // Platform: AnyCPU\n// AssemblyName: MyExampleProject\n// Configuration: Release\n// C# version: CSharp13\n The above shows that we're building with C# 13, and that the LanguageVersion property returned the value CSharp13, even though our generator didn't know that value existed at at compile time!  This demonstrates the relationship with the Microsoft.CodeAnalysis.CSharp package you reference at compile time for your source generator versus at runtime. The NuGet package is providing an API surface to code against, but the .NET SDK is free to provide a different implementation, as long as the API is binary compatible. In this case, adding an additional enum value is perfectly legal.  So remember: the LanguageVersion may contain a value that you can't reference at compile time! Changing the C# LangVersion in a project By default, the version of C# used by a project is tied to the version of the framework it's targeting. So if you're targeting .NET 8, the default C# version is 12, while for .NET 9 it's 13. You can override the C# version for a project using the <LangVersion> property in your .csproj: <Project Sdk=\"Microsoft.NET.Sdk\">\n  <PropertyGroup>\n    <TargetFramework>net9.0</TargetFramework>\n    <!-- Using C#10 instead of the default C# 13 -->\n    <LangVersion>10</LangVersion>\n  </PropertyGroup>\n</Project>\n The source generator above detects this change, and the LanguageVersion updates as expected: // Platform: AnyCPU\n// AssemblyName: MyExampleProject\n// Configuration: Release\n// C# version: CSharp10\n Note that it's also possible to specify some \"special\" versions in the <LangVersion> element: default or latestMajor: The compiler accepts syntax from the latest released major version of the compiler. latest: The compiler accepts syntax from the latest released version of the compiler (including minor version). preview: The compiler accepts all valid language syntax from the latest preview version. Note that if users specifies default, latest, or latestMajor in their .csproj it's automatically mapped to the corresponding specific CSharpX version when you retrieve it in the LanguageVersion property. For example, setting this in your .csproj <LangVersion>latest</LangVersion>\n results in the following generated C# version (when running with the .NET 9 SDK) // C# version: CSharp13\n The one exception to this is Preview, which isn't re-mapped as far as I can tell (presumably because the \"next\" C# version doesn't have an entry in the enum)! So if the target project has this: <LangVersion>preview</LangVersion>\n then your generated code looks like this: // C# version: Preview\n Once you have extracted a LanguageVersion in your source generator, the question becomes what to do with it. Generating different code based on LanguageVersion In the extreme case, you might decide that you simply can't support generating code unless a specific C# version is supported. If that's the case, you can simply add a version check wherever it's required in your pipeline to bail out. Alternatively, you might decide that you just want to generate different code. If so, then you'll probably want to add a condition in your generation code something like the following: if(currentVersion <= LanguageVersion.CSharp11)\n{\n    // can't use collection expressions\n    return \"\"\"\n           return new List<string>\n           {\n               \"value1\",\n               \"value2\",\n           };\n           \"\"\"\n}\nelse\n{\n    // C# 12+ gives us collection expressions\n    return \"\"\"\n           return\n           [\n               \"value1\",\n               \"value2\",\n           ];\n           \"\"\"\n}\n Obviously it's a toy example, but it's pretty much all you need to do! The only real complexity is when you're referencing a version of Microsoft.CodeAnalysis.CSharp that doesn't contain the LanguageVersion property you need.  The version of the Microsoft.CodeAnalysis.CSharp package ties directly to a specific version of the Rosyln API and .NET SDK, so you often can't \"simply\" update the package, as that reduces the range of SDKs your source generator works on. I'll talk more about this in a subsequent post.  For example, in the above code I worked around the fact that CSharp12 wasn't an option in the 4.4.0 version of Microsoft.CodeAnalysis.CSharp. But what if I needed to specialise for CSharp13? I couldn't use any cute <= tricks for that… I think the best option in that scenario is to use the fact that the values for future C# versions use known int values, and to \"cast\" to the correct value, for example: // test for C#13 or higher\nif(currentVersion >= (LanguageVersion)1300)\n{\n    // can use params collections\n    return \"\"\"\n           public void Loop(params ReadOnlySpan<T> items)\n           {\n               foreach (var item in items)\n                  Console.WriteLine(item)\n           };\n           \"\"\"\n}\nelse\n{\n    // No params collections, have to use array instead\n    return \"\"\"\n           public void Loop(params T[] items)\n           {\n               foreach (var item in items)\n                  Console.WriteLine(item)\n           };\n           \"\"\"\n}\n It's not particularly pretty, but it works! I think that covers pretty much everything to do with fetching compilation options and language versions. I haven't covered reading MSBuild properties yet, as that's a bit more involved. I'll cover that in the next post. Summary In this post I showed how you can retrieve compilation options such as the current configuration and platform from a Compilation object in a source generator. I then showed how you can determine the C# version used by the target project. This is important information for a source generator, as you must make sure not to generate code that contains features from an unsupported C# version. In the next post I'll show how to read MSBuild properties from the target project, how you can use those to configure your source generator, and how to make it easier for users by packing extra files in a NuGet package."
  },
  {
    "itemId": "https://andrewlock.net/creating-a-source-generator-part-11-implementing-an-interceptor-with-a-source-generator/",
    "raw": "<img src=\"https://andrewlock.net/content/images/2024/enumgenerators_banner.webp\" /><nav><p>This is the eleven post in the series: <a href=\"/series/creating-a-source-generator/\">Creating a source generator</a>. </p> <ol class=\"list-none\"><li><a href=\"/creating-a-source-generator-part-1-creating-an-incremental-source-generator/\">Part 1 - Creating an incremental generator</a></li><li><a href=\"/creating-a-source-generator-part-2-testing-an-incremental-generator-with-snapshot-testing/\">Part 2 - Testing an incremental generator with snapshot testing</a></li><li><a href=\"/creating-a-source-generator-part-3-integration-testing-and-packaging/\">Part 3 - Integration testing and NuGet packaging</a></li><li><a href=\"/creating-a-source-generator-part-4-customising-generated-code-with-marker-attributes/\">Part 4 - Customising generated code with marker attributes</a></li><li><a href=\"/creating-a-source-generator-part-5-finding-a-type-declarations-namespace-and-type-hierarchy/\">Part 5 - Finding a type declaration's namespace and type hierarchy</a></li><li><a href=\"/creating-a-source-generator-part-6-saving-source-generator-output-in-source-control/\">Part 6 - Saving source generator output in source control</a></li><li><a href=\"/creating-a-source-generator-part-7-solving-the-source-generator-marker-attribute-problem-part1/\">Part 7 - Solving the source generator 'marker attribute' problem - Part 1</a></li><li><a href=\"/creating-a-source-generator-part-8-solving-the-source-generator-marker-attribute-problem-part2/\">Part 8 - Solving the source generator 'marker attribute' problem - Part 2</a></li><li><a href=\"/creating-a-source-generator-part-9-avoiding-performance-pitfalls-in-incremental-generators/\">Part 9 - Avoiding performance pitfalls in incremental generators</a></li><li><a href=\"/creating-a-source-generator-part-10-testing-your-incremental-generator-pipeline-outputs-are-cacheable/\">Part 10 - Testing your incremental generator pipeline outputs are cacheable</a></li><li>Part 11 - Implementing an interceptor with a source generator (this post) </li><li><a href=\"/creating-a-source-generator-part-12-reading-compilation-options-and-csharp-version-in-source-generators/\">Part 12 - Reading compilation options and the C# version in source generators</a></li><li><a href=\"/creating-a-source-generator-part-13-providing-and-accessing-msbuild-settings-in-source-generators/\">Part 13 - Accessing MSBuild properties and user configuration from source generators</a></li><li><a href=\"/creating-a-source-generator-part-14-supporting-multiple-sdk-versions-in-a-source-generator/\">Part 14 - Supporting multiple .NET SDK versions in a source generator</a></li></ol></nav><p>In this post I describe how you can use the interceptor support available in the .NET 8 and .NET 9 SDK to replace method calls at build time. The APIs have evolved a little since they were first introduced in .NET 8, so in this post I show how to use the new APIs with a source generator.</p> <blockquote> <p>This post is a follow on <a href=\"/recent-updates-for-netescapades-enumgenerators-interceptors/\">from a recent post</a> in which I described the preview interceptor support I added to my <a href=\"https://www.nuget.org/packages/NetEscapades.EnumGenerators\">NetEscapades.EnumGenerators NuGet package</a>.</p> </blockquote> <p>I start by explaining what interceptors are, why they can be useful, and scenarios where they're already being used. I then show how the new interceptor APIs work, and how you can use them in your own source generators.</p> <h2 id=\"what-are-interceptors-and-why-do-we-need-them-\" class=\"heading-with-anchor\"><a href=\"#what-are-interceptors-and-why-do-we-need-them-\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">What are interceptors, and why do we need them?</a></h2> <p>Interceptors are an interesting new feature, first introduced in experimental form in C#12, that allow you to replace (or \"intercept\") a method call in your application with an alternative method. When your app is compiled, the compiler automatically \"swaps out\" the call to the original method with your substitute.</p> <p>An obvious question here is <em>why</em> would you want to do that? Why not just call the substitute method directly? In general, that is the simplest solution, but in reality that may not be possible. There's a lot of existing code written, and asking everyone to update their code to use new APIs isn't necessarily feasible.</p> <p>But why would it be so urgent to use new APIs?</p> <p>The main reason is ahead-of-time compilation (AOT) which <a href=\"/exploring-the-dotnet-8-preview-the-minimal-api-aot-template/\">I've discussed several times in a previous series</a>. Interceptors aren't <em>specifically</em> for AOT, but it's one of the clearest use cases. By using interceptors you could take code which previously wasn't AOT friendly, and replace it with an AOT-friendly source-generated version.</p> <p>Customer's don't need to change their code, the source generator just automatically \"upgrades\" the method calls to use source-generated versions of the APIs that are compatible with AOT instead. If that sounds familiar, it's because that's exactly what the <a href=\"/exploring-the-dotnet-8-preview-using-the-new-configuration-binder-source-generator/\">configuration source generator</a> and <a href=\"/exploring-the-dotnet-8-preview-exploring-the-new-minimal-api-source-generator/\">existing minimal API source generator</a> do in .NET 8 and later.</p> <p>Interceptors are particularly interesting because they're the one case where source generators can be used to <em>change</em> existing code. Normally source generators can only <em>add</em> additional code.</p> <blockquote> <p>For a video discussion of interceptors, <a href=\"https://www.youtube.com/watch?v=X1_QeH1yAto&amp;list=PLdo4fOcmZ0oX-DBuRG4u58ZTAJgBAeQ-t&amp;index=12\">there was a great discussion a year ago on the .NET community standup a year or so ago</a>. It's a little out of date now, but I still recommend it.</p> </blockquote> <p>That's all quite abstract, so in the next section I'll show a very simple example of an interceptor, so that you can understand the mechanics of how they work.</p> <h2 id=\"an-interceptor-in-practice\" class=\"heading-with-anchor\"><a href=\"#an-interceptor-in-practice\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">An interceptor in practice</a></h2> <p>To demonstrate how interceptors work, I'll show a small example using my <a href=\"https://www.nuget.org/packages/NetEscapades.EnumGenerators\">NetEscapades.EnumGenerators NuGet package</a>. This package provides an <code>[EnumExtensions]</code> attribute that you can apply to an enum. <a href=\"/recent-updates-for-netescapades-enumgenerators-interceptors/\">When enabled, it can also generate interceptors for calls to <code>ToString()</code></a>.</p> <h3 id=\"the-original-example-without-interceptors\" class=\"heading-with-anchor\"><a href=\"#the-original-example-without-interceptors\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">The original example without interceptors</a></h3> <p>Lets say you have the following simple program. It defines an enum, <code>MyEnum</code>, which is decorated with the <code>[EnumExtensions]</code> attribute. The program itself simply creates an instance of the enum, and calls <code>ToString()</code> on it:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">NetEscapades<span class=\"token punctuation\">.</span>EnumGenerators</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> <span class=\"token keyword\">value</span> <span class=\"token operator\">=</span> MyEnum<span class=\"token punctuation\">.</span>First<span class=\"token punctuation\">;</span>\nConsole<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">value</span><span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">EnumExtensions</span></span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">internal</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">MyEnum</span>\n<span class=\"token punctuation\">{</span>\n    First<span class=\"token punctuation\">,</span>\n    Second<span class=\"token punctuation\">,</span>\n    Third<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>Without an interceptor, this code calls the <code>ToString()</code> method defined on the base <code>Enum</code> type. This method is historically surprisingly slow (more on that later), so <em>NetEscapades.EnumGenerators</em> provides an alternative, faster, implementation:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">internal</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">partial</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyEnumExtensions</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> <span class=\"token function\">ToStringFast</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token class-name\">MyEnum</span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">)</span>\n        <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">value</span> <span class=\"token keyword\">switch</span>\n        <span class=\"token punctuation\">{</span>\n            MyEnum<span class=\"token punctuation\">.</span>First <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">nameof</span><span class=\"token punctuation\">(</span>MyEnum<span class=\"token punctuation\">.</span>First<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            MyEnum<span class=\"token punctuation\">.</span>Second <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">nameof</span><span class=\"token punctuation\">(</span>MyEnum<span class=\"token punctuation\">.</span>Second<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            _ <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>This implementation is significantly faster, and allocates less than the runtime's <code>ToString()</code> implementation:</p> <pre class=\"language-ini\"><code class=\"language-ini\"><span class=\"token key attr-name\">BenchmarkDotNet</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">v0.13.1, OS=Windows 10.0.19042.1348 (20H2/October2020Update)</span>\nIntel Core i7-7500U CPU 2.70GHz (Kaby Lake), 1 CPU, 4 logical and 2 physical cores\n  DefaultJob : .NET Framework 4.8 (4.8.4420.0), X64 RyuJIT\n<span class=\"token key attr-name\">.NET SDK</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">6.0.100</span>\n  DefaultJob : .NET 6.0.0 (6.0.21.52210), X64 RyuJIT\n</code></pre> <table><thead><tr><th>Method</th><th>FX</th><th style=\"text-align:right\">Mean</th><th style=\"text-align:right\">Error</th><th style=\"text-align:right\">StdDev</th><th style=\"text-align:right\">Ratio</th><th style=\"text-align:right\">Gen 0</th><th style=\"text-align:right\">Allocated</th></tr></thead><tbody><tr><td>ToString</td><td><code>net48</code></td><td style=\"text-align:right\">578.276ns</td><td style=\"text-align:right\">3.3109ns</td><td style=\"text-align:right\">3.0970ns</td><td style=\"text-align:right\">1.000</td><td style=\"text-align:right\">0.0458</td><td style=\"text-align:right\">96 B</td></tr><tr><td>ToStringFast</td><td><code>net48</code></td><td style=\"text-align:right\">3.091ns</td><td style=\"text-align:right\">0.0567ns</td><td style=\"text-align:right\">0.0443ns</td><td style=\"text-align:right\">0.005</td><td style=\"text-align:right\">-</td><td style=\"text-align:right\">-</td></tr><tr><td>ToString</td><td><code>net6.0</code></td><td style=\"text-align:right\">17.9850ns</td><td style=\"text-align:right\">0.1230ns</td><td style=\"text-align:right\">0.1151ns</td><td style=\"text-align:right\">1.000</td><td style=\"text-align:right\">0.0115</td><td style=\"text-align:right\">24 B</td></tr><tr><td>ToStringFast</td><td><code>net6.0</code></td><td style=\"text-align:right\">0.1212ns</td><td style=\"text-align:right\">0.0225ns</td><td style=\"text-align:right\">0.0199ns</td><td style=\"text-align:right\">0.007</td><td style=\"text-align:right\">-</td><td style=\"text-align:right\">-</td></tr></tbody></table> <p>The obvious downside is that you have to remember to <em>use</em> the <code>ToStringFast()</code> method, with interceptors we can automate that instead!</p> <h3 id=\"enabling-interceptor-support\" class=\"heading-with-anchor\"><a href=\"#enabling-interceptor-support\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Enabling interceptor support</a></h3> <p>If you <a href=\"/recent-updates-for-netescapades-enumgenerators-interceptors/\">enable the interceptor support</a>, the <em>NetEscapades.EnumGenerators</em> library doesn't just emit extension methods, it also emits interceptor code.</p> <blockquote> <p>Note that to use the interceptor support described in this post, you must be building with the 8.0.4xx SDK (or 9.0.x SDK) at a minimum. Earlier versions of the SDK include now-deprecated APIs, but only the later SDKs include the APIs used in this post.</p> </blockquote> <p>The <em>NetEscapades.EnumGenerators</em> library generates interceptor code similar to the following:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">static</span> file <span class=\"token keyword\">class</span> <span class=\"token class-name\">EnumInterceptors</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">InterceptsLocation</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token named-parameter punctuation\">version</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token named-parameter punctuation\">data</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"yxKJBEhzkHdnMhHGENjk8qgBAABQcm9ncmFtLmNz\"</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span> <span class=\"token comment\">// Program.cs(4,24)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> <span class=\"token function\">MyEnumExtensionsToString</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token class-name\">Enum</span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">)</span>\n        <span class=\"token operator\">=&gt;</span> MyEnumExtensions<span class=\"token punctuation\">.</span><span class=\"token function\">ToStringFast</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>MyEnum<span class=\"token punctuation\">)</span><span class=\"token keyword\">value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>The <code>[InterceptsLocation]</code> attribute is what makes the <code>MyEnumExtensionsToString()</code> method an <em>interceptor</em>. At compile time, the compiler replaces the call to <code>ToString()</code> with the call to <code>MyEnumExtensionsToString()</code>, something like the following:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\">Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>EnumInterceptors<span class=\"token punctuation\">.</span><span class=\"token function\">MyEnumExtensionsToString</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre> <p>The library automatically detects all the calls to <code>MyEnum.ToString()</code> and adds an <code>[InterceptsLocation]</code> attribute for each instance. That means you don't have to remember to call <code>ToStringFast()</code> yourself, you can just let the interceptor handle it itself!</p> <h3 id=\"emitting-the-interceptslocationattribute-definition\" class=\"heading-with-anchor\"><a href=\"#emitting-the-interceptslocationattribute-definition\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Emitting the <code>InterceptsLocationAttribute</code> definition</a></h3> <p>The compiler looks for the <code>[InterceptsLocation]</code> attribute to identify interceptors, but the library itself <em>also</em> emits the <code>[InterceptsLocation]</code> attribute, rather than relying on the attribute to be defined in the runtime. This is a similar pattern as used for many other compiler features, as it does not tie the feature to a specific runtime version.</p> <p>When generating the enum interceptors, the <em>NetEscapades.EnumGenerators</em> library also generates the <code>[InterceptsLocation]</code> attribute definition itself, as shown below:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">System</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Diagnostics</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token preprocessor property\">#<span class=\"token directive keyword\">nullable</span> enable</span>\n<span class=\"token keyword\">namespace</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Runtime<span class=\"token punctuation\">.</span>CompilerServices</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// this type is needed by the compiler to implement interceptors,</span>\n    <span class=\"token comment\">// it doesn't need to come from the runtime itself</span>\n\n    <span class=\"token punctuation\">[</span><span class=\"token function\">Conditional</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"DEBUG\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">// not needed post-build, so can evaporate it</span>\n    <span class=\"token punctuation\">[</span><span class=\"token function\">AttributeUsage</span><span class=\"token punctuation\">(</span>AttributeTargets<span class=\"token punctuation\">.</span>Method<span class=\"token punctuation\">,</span> AllowMultiple <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">sealed</span> file <span class=\"token keyword\">class</span> <span class=\"token class-name\">InterceptsLocationAttribute</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">Attribute</span></span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">public</span> <span class=\"token function\">InterceptsLocationAttribute</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> version<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> data<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            _ <span class=\"token operator\">=</span> version<span class=\"token punctuation\">;</span>\n            _ <span class=\"token operator\">=</span> data<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>The attribute is generated above as a <code>file</code> scoped attribute (<a href=\"https://github.com/dotnet/roslyn/blob/98ea496177bc8e607dbf454abd6b5a5e4678aed2/docs/features/interceptors.md#interceptslocationattribute\">as suggested in the docs</a>), so that multiple generators can generate it separately if necessary.</p> <p>The arguments to the <code>[InterceptsLocation]</code> attribute are:</p> <ul><li><code>version</code>: A version number defining the encoding. Only version <code>1</code> is currently defined, but the compiler may introduce new encodings in the future</li> <li><code>data</code>: An encoding defining the location to intercept, that's not intended to be human-readable. The version <code>1</code> encoding is a base64-encoding of the following: <ul><li>16 byte xxHash128 content checksum of the file containing the intercepted call.</li> <li><code>int32</code> in little-endian format for the position (i.e. <code>SyntaxNode.Position</code>) of the call in syntax.</li> <li>utf-8 string data containing a file name, used for error reporting.</li></ul> </li></ul> <blockquote> <p>Note that these argument is a big change from the <em>previous</em> experimental interceptor <code>[InterceptsLocation]</code> attribute, which used the human-readable values <code>[InterceptsLocation(path, line, column)]</code>. This path-based API has been deprecated, and will be removed in the future. This also means interceptors are <em>only</em> really feasible for use with source generators now.</p> </blockquote> <p>If it looks difficult to generate the <code>data</code> argument correctly, then don't worry, you don't have to! Instead, there's a Roslyn API you can use to generate the required <code>data</code> value from a source generator.</p> <h2 id=\"implementing-an-interceptor-in-a-source-generator\" class=\"heading-with-anchor\"><a href=\"#implementing-an-interceptor-in-a-source-generator\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Implementing an interceptor in a source generator</a></h2> <p>Now we've covered all the background, I'll describe how I implemented the interceptor support in the <code>NetEscapades.EnumGenerators</code> source generator. I'm going to assume you're familiar with source generators in general (<a href=\"/series/creating-a-source-generator/\">see the earlier posts in this series if not</a>!), and will just focus on the interceptor part.</p> <p>Broadly speaking, there are three things we need to do:</p> <ul><li>Find the locations we want to intercept</li> <li>Extract an <code>InterceptableLocation</code> instance for each location</li> <li>Use the <code>InterceptableLocation</code> (and other information) to generate the interceptor target and <code>[InterceptsLocation]</code> attribute.</li></ul> <p>For the first part we use the <code>SyntaxValueProvider.CreateSyntaxProvider()</code> method and pass in \"predicate\" and \"transform\" functions:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> locations <span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span>SyntaxProvider\n    <span class=\"token punctuation\">.</span><span class=\"token function\">CreateSyntaxProvider</span><span class=\"token punctuation\">(</span>\n        <span class=\"token named-parameter punctuation\">predicate</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">static</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">,</span> _<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">InterceptorPredicate</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token named-parameter punctuation\">transform</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">static</span> <span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> ct<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">InterceptorTransform</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> ct<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">Where</span><span class=\"token punctuation\">(</span>candidate <span class=\"token operator\">=&gt;</span> candidate <span class=\"token keyword\">is</span> <span class=\"token keyword\">not</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre> <p>The predicate runs for every change in syntax, so we do a lightweight check using pattern matching to see if we're in a <code>ToString()</code> method call:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\">    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">bool</span></span> <span class=\"token function\">InterceptorPredicate</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SyntaxNode</span> node<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span>\n        node <span class=\"token keyword\">is</span> <span class=\"token class-name\">InvocationExpressionSyntax</span> <span class=\"token punctuation\">{</span> \n            Expression<span class=\"token punctuation\">:</span> MemberAccessExpressionSyntax <span class=\"token punctuation\">{</span>\n                Name<span class=\"token punctuation\">.</span>Identifier<span class=\"token punctuation\">.</span>ValueText<span class=\"token punctuation\">:</span> <span class=\"token string\">\"ToString\"</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre> <p>This includes more instances than we actually want, as it includes <em>all</em> calls to <code>ToString()</code>, but the important thing is to significantly reduce the number of nodes we investigate in the next stage. In the <code>InterceptorTransform</code> method we do the full check, to make sure we are only looking at <code>Enum.ToString()</code> cases.</p> <p>The code below uses a bunch of pattern matching and examining of the <em>semantic</em> model to check that the invocation is an <code>Enum.ToString()</code> call, and if so calls <code>GetInterceptableLocation()</code> to get the details we need. I've added comments to explain what each of the checks are doing:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">CandidateInvocation<span class=\"token punctuation\">?</span></span> <span class=\"token function\">InterceptorTransform</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">GeneratorSyntaxContext</span> ctx<span class=\"token punctuation\">,</span> <span class=\"token class-name\">CancellationToken</span> ct<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Is this an instance method invocation? (we know it must be due to the predicate check, but play it safe)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">.</span>Node <span class=\"token keyword\">is</span> <span class=\"token class-name\">InvocationExpressionSyntax</span> <span class=\"token punctuation\">{</span>Expression<span class=\"token punctuation\">:</span> MemberAccessExpressionSyntax <span class=\"token punctuation\">{</span>Name<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span> nameSyntax<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span> invocation\n        <span class=\"token comment\">// Get the semantic definition of the method invocation</span>\n        <span class=\"token operator\">&amp;&amp;</span> ctx<span class=\"token punctuation\">.</span>SemanticModel<span class=\"token punctuation\">.</span><span class=\"token function\">GetOperation</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">.</span>Node<span class=\"token punctuation\">,</span> ct<span class=\"token punctuation\">)</span> <span class=\"token keyword\">is</span> <span class=\"token class-name\">IInvocationOperation</span> targetOperation\n        <span class=\"token comment\">// This is the main check - is the method a ToString invocation on System.Enum.ToString()?</span>\n        <span class=\"token operator\">&amp;&amp;</span> targetOperation<span class=\"token punctuation\">.</span>TargetMethod <span class=\"token keyword\">is</span> <span class=\"token punctuation\">{</span>Name <span class=\"token punctuation\">:</span> <span class=\"token string\">\"ToString\"</span><span class=\"token punctuation\">,</span> <span class=\"token named-parameter punctuation\">ContainingType</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>Name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Enum\"</span><span class=\"token punctuation\">,</span> <span class=\"token named-parameter punctuation\">ContainingNamespace</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>Name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"System\"</span><span class=\"token punctuation\">,</span> ContainingNamespace<span class=\"token punctuation\">.</span>IsGlobalNamespace<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">// Grab the Type of the enum on which this is being invoked </span>\n        <span class=\"token operator\">&amp;&amp;</span> targetOperation<span class=\"token punctuation\">.</span>Instance<span class=\"token punctuation\">?.</span>Type <span class=\"token keyword\">is</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span> type\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// If we get to here, we know we want to generate an interceptor,</span>\n        <span class=\"token comment\">// so use the experimental GetInterceptableLocation() API to get the data</span>\n        <span class=\"token comment\">// we need. This returns null if the location is not interceptable, but</span>\n        <span class=\"token comment\">// should never be non-null for this example.</span>\n<span class=\"token preprocessor property\">#<span class=\"token directive keyword\">pragma</span> warning disable RSEXPERIMENTAL002 </span><span class=\"token comment\">// / Experimental interceptable location API</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">.</span>SemanticModel<span class=\"token punctuation\">.</span><span class=\"token function\">GetInterceptableLocation</span><span class=\"token punctuation\">(</span>invocation<span class=\"token punctuation\">)</span> <span class=\"token keyword\">is</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span> location<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// Return the location details and the full type details</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">CandidateInvocation</span><span class=\"token punctuation\">(</span>location<span class=\"token punctuation\">,</span> type<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n<span class=\"token preprocessor property\">#<span class=\"token directive keyword\">pragma</span> warning restore RSEXPERIMENTAL002</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// Not an interceptor location we're interested in </span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Record for holding the interception details</span>\n<span class=\"token preprocessor property\">#<span class=\"token directive keyword\">pragma</span> warning disable RSEXPERIMENTAL002 </span><span class=\"token comment\">// / Experimental interceptable location API</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">record</span> <span class=\"token class-name\">CandidateInvocation</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">InterceptableLocation</span> Location<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> EnumName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token preprocessor property\">#<span class=\"token directive keyword\">pragma</span> warning restore RSEXPERIMENTAL002</span>\n</code></pre> <p>The <code>GetInterceptableLocation()</code> API is currently (as of the .NET 9.0.101 SDK and 4.12.0 of the <a href=\"https://www.nuget.org/packages/Microsoft.CodeAnalysis.CSharp\">Microsoft.CodeAnalysis.CSharp</a>) marked as experimental, so you need to explicitly acknowledge that using <code>#pragma</code> as in the code above.</p> <blockquote> <p>This will no longer be required soon, as <a href=\"https://github.com/dotnet/roslyn/pull/76312\">the interceptors feature has recently been marked stable</a>, and the <code>[Experimental]</code> attribute has been removed! 🎉</p> </blockquote> <p>The <code>GetInterceptableLocation()</code> method returns an instance of the <code>InterceptableLocation</code> class, which encodes the important <code>version</code> and <code>data</code> values we need to use to render the <code>[InterceptsLocation]</code> attribute.</p> <p>Going back to our source generator, now all that remains is to generate our final code. Whether you need to combine the locations with other data extracted from the source generator depends on exactly what you're trying to generate. For simplicity in this post, I've hardcoded most of the details that are unrelated to the interceptor but you can find <a href=\"https://github.com/andrewlock/NetEscapades.EnumGenerators/blob/main/src/NetEscapades.EnumGenerators/EnumGenerator.cs\">the full details on GitHub</a> if you prefer.</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token comment\">// Reproduced from above</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> locations <span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span>SyntaxProvider\n    <span class=\"token punctuation\">.</span><span class=\"token function\">CreateSyntaxProvider</span><span class=\"token punctuation\">(</span>\n        <span class=\"token named-parameter punctuation\">predicate</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">static</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">,</span> _<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">InterceptorPredicate</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token named-parameter punctuation\">transform</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">static</span> <span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> ct<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">InterceptorTransform</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> ct<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">Where</span><span class=\"token punctuation\">(</span>candidate <span class=\"token operator\">=&gt;</span> candidate <span class=\"token keyword\">is</span> <span class=\"token keyword\">not</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Output the interceptor code</span>\ncontext<span class=\"token punctuation\">.</span><span class=\"token function\">RegisterSourceOutput</span><span class=\"token punctuation\">(</span>enumInterceptions<span class=\"token punctuation\">,</span> ExecuteInterceptors<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">ExecuteInterceptors</span><span class=\"token punctuation\">(</span>\n    <span class=\"token class-name\">SourceProductionContext</span> context<span class=\"token punctuation\">,</span>\n    <span class=\"token class-name\">ImmutableArray<span class=\"token punctuation\">&lt;</span>CandidateInvocation<span class=\"token punctuation\">&gt;</span></span> toIntercept<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> sb <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">StringBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// group by the target enum.</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> grouped <span class=\"token operator\">=</span> toIntercept<span class=\"token punctuation\">.</span><span class=\"token function\">GroupBy</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">=&gt;</span> x<span class=\"token punctuation\">.</span>EnumName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> grouping <span class=\"token keyword\">in</span> grouped<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> enumType <span class=\"token operator\">=</span> grouping<span class=\"token punctuation\">.</span>Key<span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// Add the InterceptsLocationAttribute to the generated file,</span>\n        <span class=\"token comment\">// along with the start of the interceptor</span>\n        sb<span class=\"token punctuation\">.</span><span class=\"token function\">Append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span>\"\n                    <span class=\"token preprocessor property\">#<span class=\"token directive keyword\">nullable</span> enable</span>\n                    <span class=\"token keyword\">namespace</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Runtime<span class=\"token punctuation\">.</span>CompilerServices</span>\n                    <span class=\"token punctuation\">{</span>\n                        <span class=\"token punctuation\">[</span><span class=\"token keyword\">global</span><span class=\"token punctuation\">::</span>System<span class=\"token punctuation\">.</span>Diagnostics<span class=\"token punctuation\">.</span><span class=\"token function\">Conditional</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"DEBUG\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n                        <span class=\"token punctuation\">[</span><span class=\"token keyword\">global</span><span class=\"token punctuation\">::</span>System<span class=\"token punctuation\">.</span><span class=\"token function\">AttributeUsage</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">global</span><span class=\"token punctuation\">::</span>System<span class=\"token punctuation\">.</span>AttributeTargets<span class=\"token punctuation\">.</span>Method<span class=\"token punctuation\">,</span> AllowMultiple <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n                        <span class=\"token keyword\">sealed</span> file <span class=\"token keyword\">class</span> <span class=\"token class-name\">InterceptsLocationAttribute</span> <span class=\"token punctuation\">:</span> <span class=\"token keyword\">global</span><span class=\"token punctuation\">::</span>System<span class=\"token punctuation\">.</span>Attribute\n                        <span class=\"token punctuation\">{</span>\n                            <span class=\"token keyword\">public</span> <span class=\"token function\">InterceptsLocationAttribute</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> version<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> data<span class=\"token punctuation\">)</span>\n                            <span class=\"token punctuation\">{</span>\n                                _ <span class=\"token operator\">=</span> version<span class=\"token punctuation\">;</span>\n                                _ <span class=\"token operator\">=</span> data<span class=\"token punctuation\">;</span>\n                            <span class=\"token punctuation\">}</span>\n                        <span class=\"token punctuation\">}</span>\n                    <span class=\"token punctuation\">}</span>\n                    \n                    <span class=\"token keyword\">namespace</span> <span class=\"token namespace\">NetEscapades<span class=\"token punctuation\">.</span>EnumGenerators</span>\n                    <span class=\"token punctuation\">{</span>\n                        <span class=\"token keyword\">static</span> file <span class=\"token keyword\">class</span> <span class=\"token class-name\">EnumInterceptors</span>\n                        <span class=\"token punctuation\">{</span>\n                    <span class=\"token string\">\"\"</span>\"<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n        <span class=\"token comment\">// Generate the [InterceptsLocation] attributes, using the InterceptableLocation</span>\n        <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> invocation <span class=\"token keyword\">in</span> grouping<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> location <span class=\"token operator\">=</span> invocation<span class=\"token punctuation\">.</span>Location<span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> version <span class=\"token operator\">=</span> location<span class=\"token punctuation\">.</span>Version<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> data <span class=\"token operator\">=</span> location<span class=\"token punctuation\">.</span>Data<span class=\"token punctuation\">;</span> <span class=\"token comment\">// e.g. yxKJBEhzkHdnMhHGENjk8qgBAABQcm9ncmFtLmNz</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> displayLocation <span class=\"token operator\">=</span> location<span class=\"token punctuation\">.</span><span class=\"token function\">GetDisplayLocation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// e.g. Program.cs(19,32)</span>\n            sb<span class=\"token punctuation\">.</span><span class=\"token function\">AppendLine</span><span class=\"token punctuation\">(</span>\n                <span class=\"token interpolation-string\"><span class=\"token string\">$\"\"</span></span>\"        <span class=\"token punctuation\">[</span><span class=\"token keyword\">global</span><span class=\"token punctuation\">::</span>System<span class=\"token punctuation\">.</span>Runtime<span class=\"token punctuation\">.</span>CompilerServices<span class=\"token punctuation\">.</span><span class=\"token function\">InterceptsLocation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>version<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"{data}\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">// {displayLocation}\"\"\");</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">// Add the interceptor implementation</span>\n        sb<span class=\"token punctuation\">.</span><span class=\"token function\">AppendLine</span><span class=\"token punctuation\">(</span>$<span class=\"token interpolation-string\"><span class=\"token string\">$\"\"</span></span>\"\n                            <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> <span class=\"token function\">MyEnumExtensionsToString</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token keyword\">global</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">System<span class=\"token punctuation\">.</span>Enum</span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">)</span>\n                                <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">global</span><span class=\"token punctuation\">::</span>MyTestNameSpace<span class=\"token punctuation\">.</span>MyEnumExtensions<span class=\"token punctuation\">.</span><span class=\"token function\">ToStringFast</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>enumType<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token punctuation\">}</span>\n                    <span class=\"token punctuation\">}</span>\n                    <span class=\"token string\">\"\"</span>\"<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// Add the source to the compilation</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> contents <span class=\"token operator\">=</span> sb<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> filename <span class=\"token operator\">=</span> <span class=\"token interpolation-string\"><span class=\"token string\">$\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">enumType</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">_Interception.g.cs\"</span></span><span class=\"token punctuation\">;</span>\n        context<span class=\"token punctuation\">.</span><span class=\"token function\">AddSource</span><span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">,</span> SourceText<span class=\"token punctuation\">.</span><span class=\"token function\">From</span><span class=\"token punctuation\">(</span>contents<span class=\"token punctuation\">,</span> Encoding<span class=\"token punctuation\">.</span>UTF8<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        sb<span class=\"token punctuation\">.</span><span class=\"token function\">Clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>And that's all there is to the mechanics of interceptors. I've glossed over some complexities such as actually <em>enabling</em> interceptors and how to gracefully handle an insufficient SDK version, but I'll dig into those in later posts.</p> <p>Before I close this post, I'll quickly address the \"experimental\" part of interceptors.</p> <h2 id=\"what-is-the-status-of-the-interceptors-feature-\" class=\"heading-with-anchor\"><a href=\"#what-is-the-status-of-the-interceptors-feature-\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">What is the status of the interceptors feature?</a></h2> <p>When I recently <a href=\"https://bsky.app/profile/andrewlock.bsky.social/post/3la7xn745a72y\">announced</a> preview support for <a href=\"/recent-updates-for-netescapades-enumgenerators-interceptors/\">interceptors in NetEscapades.EnumGenerators</a>, <a href=\"https://bsky.app/profile/jasonbock.net\">Jason Bock</a> <a href=\"https://bsky.app/profile/jasonbock.net/post/3lalxlvnmjs2r\">pointed out that,</a> at that point, interceptors were still described as experimental, and not listed as an official feature.</p> <p>However, <a href=\"https://github.com/dotnet/roslyn/pull/76312\">a recent PR</a> explicitly updated the docs. Specifically, that PR:</p> <ul><li><a href=\"https://github.com/dotnet/roslyn/blob/98ea496177bc8e607dbf454abd6b5a5e4678aed2/docs/features/interceptors.md\">Updates the docs</a> to describe the feature as stable in .NET 9.0.2xx SDK and later.</li> <li>Removed the <code>[Experimental]</code> attribute from the APIs.</li> <li>Marked the old <code>[InterceptsLocation(path, line, column)]</code> API as officially deprecated, with the intention of removing them later.</li></ul> <p>On that basis, I think it's now safe to look into interceptors more broadly. Interceptors have been used both <a href=\"https://github.com/dotnet/aspnetcore/issues/55152\">by ASP.NET Core</a> and by <a href=\"https://github.com/dotnet/runtime/issues/101079\">the configuration binder source generator</a> to provide support for AOT, so they've been tested in real production scenarios too.</p> <p>That said, the waters are still a <em>little</em> murky. The <a href=\"https://github.com/dotnet/csharplang/blob/410cfaed5528d1b7e92a25cc15993017912b6afd/Language-Version-History.md\">C# features list</a> still doesn't include interceptors as a feature yet, though I suspect that's just an oversight. You also still need to \"opt-in\" to individual interceptors by adding the namespace of the interceptor in the <code>&lt;InterceptorsNamespaces&gt;</code> MSBuild property. There doesn't seem to be any intention to change that behaviour, as it provides an easy layer of control over any interceptors added to your project.</p> <p>Taking all that into account, interceptors are now considered stable, so I think it's worth looking into and understanding them. There may not be as many use cases for them as there are for source generators in general, but they provide interesting opportunities for some scenarios.</p> <h2 id=\"summary\" class=\"heading-with-anchor\"><a href=\"#summary\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Summary</a></h2> <p>In this post I described the interceptor support introduced in the .NET 8 and 9 SDKs. Interceptors can replace a method call with another at compile time, which is particularly useful for some scenarios like Ahead Of Time compilation. I showed how the APIs have changed recently, and how you can use these new APIs to create an interceptor using a source generator. In the .NET 9.0.2xx SDK interceptors are considered a stable language feature, so it's worth looking into to see if they can solve any use cases that can't be handled another way.</p> ",
    "sanitized": "This is the eleven post in the series: Creating a source generator.  Part 1 - Creating an incremental generatorPart 2 - Testing an incremental generator with snapshot testingPart 3 - Integration testing and NuGet packagingPart 4 - Customising generated code with marker attributesPart 5 - Finding a type declaration's namespace and type hierarchyPart 6 - Saving source generator output in source controlPart 7 - Solving the source generator 'marker attribute' problem - Part 1Part 8 - Solving the source generator 'marker attribute' problem - Part 2Part 9 - Avoiding performance pitfalls in incremental generatorsPart 10 - Testing your incremental generator pipeline outputs are cacheablePart 11 - Implementing an interceptor with a source generator (this post) Part 12 - Reading compilation options and the C# version in source generatorsPart 13 - Accessing MSBuild properties and user configuration from source generatorsPart 14 - Supporting multiple .NET SDK versions in a source generatorIn this post I describe how you can use the interceptor support available in the .NET 8 and .NET 9 SDK to replace method calls at build time. The APIs have evolved a little since they were first introduced in .NET 8, so in this post I show how to use the new APIs with a source generator.  This post is a follow on from a recent post in which I described the preview interceptor support I added to my NetEscapades.EnumGenerators NuGet package.  I start by explaining what interceptors are, why they can be useful, and scenarios where they're already being used. I then show how the new interceptor APIs work, and how you can use them in your own source generators. What are interceptors, and why do we need them? Interceptors are an interesting new feature, first introduced in experimental form in C#12, that allow you to replace (or \"intercept\") a method call in your application with an alternative method. When your app is compiled, the compiler automatically \"swaps out\" the call to the original method with your substitute. An obvious question here is why would you want to do that? Why not just call the substitute method directly? In general, that is the simplest solution, but in reality that may not be possible. There's a lot of existing code written, and asking everyone to update their code to use new APIs isn't necessarily feasible. But why would it be so urgent to use new APIs? The main reason is ahead-of-time compilation (AOT) which I've discussed several times in a previous series. Interceptors aren't specifically for AOT, but it's one of the clearest use cases. By using interceptors you could take code which previously wasn't AOT friendly, and replace it with an AOT-friendly source-generated version. Customer's don't need to change their code, the source generator just automatically \"upgrades\" the method calls to use source-generated versions of the APIs that are compatible with AOT instead. If that sounds familiar, it's because that's exactly what the configuration source generator and existing minimal API source generator do in .NET 8 and later. Interceptors are particularly interesting because they're the one case where source generators can be used to change existing code. Normally source generators can only add additional code.  For a video discussion of interceptors, there was a great discussion a year ago on the .NET community standup a year or so ago. It's a little out of date now, but I still recommend it.  That's all quite abstract, so in the next section I'll show a very simple example of an interceptor, so that you can understand the mechanics of how they work. An interceptor in practice To demonstrate how interceptors work, I'll show a small example using my NetEscapades.EnumGenerators NuGet package. This package provides an [EnumExtensions] attribute that you can apply to an enum. When enabled, it can also generate interceptors for calls to ToString(). The original example without interceptors Lets say you have the following simple program. It defines an enum, MyEnum, which is decorated with the [EnumExtensions] attribute. The program itself simply creates an instance of the enum, and calls ToString() on it: using NetEscapades.EnumGenerators;\n\nvar value = MyEnum.First;\nConsole.WriteLine(value.ToString());\n\n[EnumExtensions]\ninternal enum MyEnum\n{\n    First,\n    Second,\n    Third,\n}\n Without an interceptor, this code calls the ToString() method defined on the base Enum type. This method is historically surprisingly slow (more on that later), so NetEscapades.EnumGenerators provides an alternative, faster, implementation: internal static partial class MyEnumExtensions\n{\n    public static string ToStringFast(this MyEnum value)\n        => value switch\n        {\n            MyEnum.First => nameof(MyEnum.First),\n            MyEnum.Second => nameof(MyEnum.Second),\n            _ => value.ToString(),\n        };\n}\n This implementation is significantly faster, and allocates less than the runtime's ToString() implementation: BenchmarkDotNet=v0.13.1, OS=Windows 10.0.19042.1348 (20H2/October2020Update)\nIntel Core i7-7500U CPU 2.70GHz (Kaby Lake), 1 CPU, 4 logical and 2 physical cores\n  DefaultJob : .NET Framework 4.8 (4.8.4420.0), X64 RyuJIT\n.NET SDK=6.0.100\n  DefaultJob : .NET 6.0.0 (6.0.21.52210), X64 RyuJIT\n MethodFXMeanErrorStdDevRatioGen 0AllocatedToStringnet48578.276ns3.3109ns3.0970ns1.0000.045896 BToStringFastnet483.091ns0.0567ns0.0443ns0.005--ToStringnet6.017.9850ns0.1230ns0.1151ns1.0000.011524 BToStringFastnet6.00.1212ns0.0225ns0.0199ns0.007-- The obvious downside is that you have to remember to use the ToStringFast() method, with interceptors we can automate that instead! Enabling interceptor support If you enable the interceptor support, the NetEscapades.EnumGenerators library doesn't just emit extension methods, it also emits interceptor code.  Note that to use the interceptor support described in this post, you must be building with the 8.0.4xx SDK (or 9.0.x SDK) at a minimum. Earlier versions of the SDK include now-deprecated APIs, but only the later SDKs include the APIs used in this post.  The NetEscapades.EnumGenerators library generates interceptor code similar to the following: static file class EnumInterceptors\n{\n    [InterceptsLocation(version: 1, data: \"yxKJBEhzkHdnMhHGENjk8qgBAABQcm9ncmFtLmNz\")] // Program.cs(4,24)\n    public static string MyEnumExtensionsToString(this Enum value)\n        => MyEnumExtensions.ToStringFast((MyEnum)value);\n}\n The [InterceptsLocation] attribute is what makes the MyEnumExtensionsToString() method an interceptor. At compile time, the compiler replaces the call to ToString() with the call to MyEnumExtensionsToString(), something like the following: Console.WriteLine(EnumInterceptors.MyEnumExtensionsToString(value));\n The library automatically detects all the calls to MyEnum.ToString() and adds an [InterceptsLocation] attribute for each instance. That means you don't have to remember to call ToStringFast() yourself, you can just let the interceptor handle it itself! Emitting the InterceptsLocationAttribute definition The compiler looks for the [InterceptsLocation] attribute to identify interceptors, but the library itself also emits the [InterceptsLocation] attribute, rather than relying on the attribute to be defined in the runtime. This is a similar pattern as used for many other compiler features, as it does not tie the feature to a specific runtime version. When generating the enum interceptors, the NetEscapades.EnumGenerators library also generates the [InterceptsLocation] attribute definition itself, as shown below: using System;\nusing System.Diagnostics;\n\n#nullable enable\nnamespace System.Runtime.CompilerServices\n{\n    // this type is needed by the compiler to implement interceptors,\n    // it doesn't need to come from the runtime itself\n\n    [Conditional(\"DEBUG\")] // not needed post-build, so can evaporate it\n    [AttributeUsage(AttributeTargets.Method, AllowMultiple = true)]\n    sealed file class InterceptsLocationAttribute : Attribute\n    {\n        public InterceptsLocationAttribute(int version, string data)\n        {\n            _ = version;\n            _ = data;\n        }\n    }\n}\n The attribute is generated above as a file scoped attribute (as suggested in the docs), so that multiple generators can generate it separately if necessary. The arguments to the [InterceptsLocation] attribute are: version: A version number defining the encoding. Only version 1 is currently defined, but the compiler may introduce new encodings in the future data: An encoding defining the location to intercept, that's not intended to be human-readable. The version 1 encoding is a base64-encoding of the following: 16 byte xxHash128 content checksum of the file containing the intercepted call. int32 in little-endian format for the position (i.e. SyntaxNode.Position) of the call in syntax. utf-8 string data containing a file name, used for error reporting.   Note that these argument is a big change from the previous experimental interceptor [InterceptsLocation] attribute, which used the human-readable values [InterceptsLocation(path, line, column)]. This path-based API has been deprecated, and will be removed in the future. This also means interceptors are only really feasible for use with source generators now.  If it looks difficult to generate the data argument correctly, then don't worry, you don't have to! Instead, there's a Roslyn API you can use to generate the required data value from a source generator. Implementing an interceptor in a source generator Now we've covered all the background, I'll describe how I implemented the interceptor support in the NetEscapades.EnumGenerators source generator. I'm going to assume you're familiar with source generators in general (see the earlier posts in this series if not!), and will just focus on the interceptor part. Broadly speaking, there are three things we need to do: Find the locations we want to intercept Extract an InterceptableLocation instance for each location Use the InterceptableLocation (and other information) to generate the interceptor target and [InterceptsLocation] attribute. For the first part we use the SyntaxValueProvider.CreateSyntaxProvider() method and pass in \"predicate\" and \"transform\" functions: var locations = context.SyntaxProvider\n    .CreateSyntaxProvider(\n        predicate: static (node, _) => InterceptorPredicate(node),\n        transform: static (context, ct) => InterceptorTransform(context, ct))\n    .Where(candidate => candidate is not null);\n The predicate runs for every change in syntax, so we do a lightweight check using pattern matching to see if we're in a ToString() method call:     private static bool InterceptorPredicate(SyntaxNode node) =>\n        node is InvocationExpressionSyntax { \n            Expression: MemberAccessExpressionSyntax {\n                Name.Identifier.ValueText: \"ToString\"\n            }\n        };\n This includes more instances than we actually want, as it includes all calls to ToString(), but the important thing is to significantly reduce the number of nodes we investigate in the next stage. In the InterceptorTransform method we do the full check, to make sure we are only looking at Enum.ToString() cases. The code below uses a bunch of pattern matching and examining of the semantic model to check that the invocation is an Enum.ToString() call, and if so calls GetInterceptableLocation() to get the details we need. I've added comments to explain what each of the checks are doing: private static CandidateInvocation? InterceptorTransform(GeneratorSyntaxContext ctx, CancellationToken ct)\n{\n    // Is this an instance method invocation? (we know it must be due to the predicate check, but play it safe)\n    if (ctx.Node is InvocationExpressionSyntax {Expression: MemberAccessExpressionSyntax {Name: { } nameSyntax}} invocation\n        // Get the semantic definition of the method invocation\n        && ctx.SemanticModel.GetOperation(ctx.Node, ct) is IInvocationOperation targetOperation\n        // This is the main check - is the method a ToString invocation on System.Enum.ToString()?\n        && targetOperation.TargetMethod is {Name : \"ToString\", ContainingType: {Name: \"Enum\", ContainingNamespace: {Name: \"System\", ContainingNamespace.IsGlobalNamespace: true}}}\n        // Grab the Type of the enum on which this is being invoked \n        && targetOperation.Instance?.Type is { } type\n    {\n        // If we get to here, we know we want to generate an interceptor,\n        // so use the experimental GetInterceptableLocation() API to get the data\n        // we need. This returns null if the location is not interceptable, but\n        // should never be non-null for this example.\n#pragma warning disable RSEXPERIMENTAL002 // / Experimental interceptable location API\n        if (ctx.SemanticModel.GetInterceptableLocation(invocation) is { } location)\n        {\n            // Return the location details and the full type details\n            return new CandidateInvocation(location, type.ToString());\n        }\n#pragma warning restore RSEXPERIMENTAL002\n    }\n\n    // Not an interceptor location we're interested in \n    return null;\n}\n\n// Record for holding the interception details\n#pragma warning disable RSEXPERIMENTAL002 // / Experimental interceptable location API\npublic record CandidateInvocation(InterceptableLocation Location, string EnumName);\n#pragma warning restore RSEXPERIMENTAL002\n The GetInterceptableLocation() API is currently (as of the .NET 9.0.101 SDK and 4.12.0 of the Microsoft.CodeAnalysis.CSharp) marked as experimental, so you need to explicitly acknowledge that using #pragma as in the code above.  This will no longer be required soon, as the interceptors feature has recently been marked stable, and the [Experimental] attribute has been removed! 🎉  The GetInterceptableLocation() method returns an instance of the InterceptableLocation class, which encodes the important version and data values we need to use to render the [InterceptsLocation] attribute. Going back to our source generator, now all that remains is to generate our final code. Whether you need to combine the locations with other data extracted from the source generator depends on exactly what you're trying to generate. For simplicity in this post, I've hardcoded most of the details that are unrelated to the interceptor but you can find the full details on GitHub if you prefer. // Reproduced from above\nvar locations = context.SyntaxProvider\n    .CreateSyntaxProvider(\n        predicate: static (node, _) => InterceptorPredicate(node),\n        transform: static (context, ct) => InterceptorTransform(context, ct))\n    .Where(candidate => candidate is not null);\n\n// Output the interceptor code\ncontext.RegisterSourceOutput(enumInterceptions, ExecuteInterceptors);\n\nprivate static void ExecuteInterceptors(\n    SourceProductionContext context,\n    ImmutableArray<CandidateInvocation> toIntercept)\n{\n    var sb = new StringBuilder();\n\n    // group by the target enum.\n    var grouped = toIntercept.GroupBy(x => x.EnumName);\n    foreach (var grouping in grouped)\n    {\n        string enumType = grouping.Key;\n\n        // Add the InterceptsLocationAttribute to the generated file,\n        // along with the start of the interceptor\n        sb.Append(\"\"\"\n                    #nullable enable\n                    namespace System.Runtime.CompilerServices\n                    {\n                        [global::System.Diagnostics.Conditional(\"DEBUG\")]\n                        [global::System.AttributeUsage(global::System.AttributeTargets.Method, AllowMultiple = true)]\n                        sealed file class InterceptsLocationAttribute : global::System.Attribute\n                        {\n                            public InterceptsLocationAttribute(int version, string data)\n                            {\n                                _ = version;\n                                _ = data;\n                            }\n                        }\n                    }\n                    \n                    namespace NetEscapades.EnumGenerators\n                    {\n                        static file class EnumInterceptors\n                        {\n                    \"\"\");\n\n\n        // Generate the [InterceptsLocation] attributes, using the InterceptableLocation\n        foreach (var invocation in grouping)\n        {\n            var location = invocation.Location;\n            int version = location.Version; // 1\n            string data = location.Data; // e.g. yxKJBEhzkHdnMhHGENjk8qgBAABQcm9ncmFtLmNz\n            string displayLocation = location.GetDisplayLocation(); // e.g. Program.cs(19,32)\n            sb.AppendLine(\n                $\"\"\"        [global::System.Runtime.CompilerServices.InterceptsLocation({version}, \"{data}\")] // {displayLocation}\"\"\");\n        }\n\n        // Add the interceptor implementation\n        sb.AppendLine($$\"\"\"\n                            public static string MyEnumExtensionsToString(this global::System.Enum value)\n                                => global::MyTestNameSpace.MyEnumExtensions.ToStringFast(({{enumType}})value);\n                        }\n                    }\n                    \"\"\");\n\n        // Add the source to the compilation\n        string contents = sb.ToString();\n        string filename = $\"{enumType}_Interception.g.cs\";\n        context.AddSource(filename, SourceText.From(contents, Encoding.UTF8));\n        sb.Clear();\n    }\n}\n And that's all there is to the mechanics of interceptors. I've glossed over some complexities such as actually enabling interceptors and how to gracefully handle an insufficient SDK version, but I'll dig into those in later posts. Before I close this post, I'll quickly address the \"experimental\" part of interceptors. What is the status of the interceptors feature? When I recently announced preview support for interceptors in NetEscapades.EnumGenerators, Jason Bock pointed out that, at that point, interceptors were still described as experimental, and not listed as an official feature. However, a recent PR explicitly updated the docs. Specifically, that PR: Updates the docs to describe the feature as stable in .NET 9.0.2xx SDK and later. Removed the [Experimental] attribute from the APIs. Marked the old [InterceptsLocation(path, line, column)] API as officially deprecated, with the intention of removing them later. On that basis, I think it's now safe to look into interceptors more broadly. Interceptors have been used both by ASP.NET Core and by the configuration binder source generator to provide support for AOT, so they've been tested in real production scenarios too. That said, the waters are still a little murky. The C# features list still doesn't include interceptors as a feature yet, though I suspect that's just an oversight. You also still need to \"opt-in\" to individual interceptors by adding the namespace of the interceptor in the <InterceptorsNamespaces> MSBuild property. There doesn't seem to be any intention to change that behaviour, as it provides an easy layer of control over any interceptors added to your project. Taking all that into account, interceptors are now considered stable, so I think it's worth looking into and understanding them. There may not be as many use cases for them as there are for source generators in general, but they provide interesting opportunities for some scenarios. Summary In this post I described the interceptor support introduced in the .NET 8 and 9 SDKs. Interceptors can replace a method call with another at compile time, which is particularly useful for some scenarios like Ahead Of Time compilation. I showed how the APIs have changed recently, and how you can use these new APIs to create an interceptor using a source generator. In the .NET 9.0.2xx SDK interceptors are considered a stable language feature, so it's worth looking into to see if they can solve any use cases that can't be handled another way."
  },
  {
    "itemId": "https://andrewlock.net/building-latex-projects-on-windows-easily-with-docker/",
    "raw": "<img src=\"https://andrewlock.net/content/images/2024/latex_windows.webp\" /><p>In this short post I describe how I build LaTeX projects on a Windows machine by using Docker. There's nothing particularly novel or exciting about this, someone just asked me about it recently so this is effectively my reply!</p> <h2 id=\"typesetting-documents-with-latex\" class=\"heading-with-anchor\"><a href=\"#typesetting-documents-with-latex\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Typesetting documents with LaTeX</a></h2> <p>I love using markdown for writing documentation, blog posts, <a href=\"https://obsidian.md/\">notes</a>, or anything I can. Even with a very simple editor, you can have something that roughly <em>looks</em> like the markup that you want to produce. But markdown is generally tied closely to HTML (though this is not strictly required), and sometimes you want or need to produce a standalone document, like a PDF, for which HTML isn't generally well suited.</p> <p>For those rare cases where I want to produce a nice looking document, such as a CV, I fallback to <a href=\"https://en.wikipedia.org/wiki/LaTeX\">LaTeX</a>. LaTeX is a markup language that is explicitly about typesetting <em>documents</em> so it cares deeply about pages and margins, which contrasts with HTML markup. You then use a <a href=\"https://en.wikipedia.org/wiki/LaTeX\">TeX</a> distribution to render the LaTeX document as a PDF (or other format).</p> <blockquote> <p>LaTeX performs the same general function as <a href=\"https://en.wikipedia.org/wiki/WYSIWYG\">WYSIWYG</a> editors like Google Docs or Microsoft Word. However, LaTeX is <em>not</em> WYSIWYG (requiring an exxplicit rendering step) which can make it harder to use in general, but this all can enable broader optimisations and produce better looking documents overall.</p> </blockquote> <p>LaTeX is very common in the scientific community in particular, with papers often being written in LaTeX. It is also particularly good for writing large documents, which is why I used it to write my PhD thesis. However, that was years ago. When I came to work with LaTeX again recently, I was reminded that working with it on Windows was not obvious.</p> <h2 id=\"rendering-latex-on-windows\" class=\"heading-with-anchor\"><a href=\"#rendering-latex-on-windows\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Rendering LaTeX on Windows</a></h2> <p>LaTeX comes very much from the *Nix world, which means that it's very open, and available, but also that there are thousand different \"suggested\" approaches to rending LaTeX documents. For people who want choice, or who care about the little details of each distribution, that's great. For people who just want to \"install something\" and get on with it, getting started can be confusing 😅</p> <blockquote> <p>Just to be clear, I am very much a beginner with LaTeX, despite having used it a lot 15 years ago. I still find it has a very steep learning curve (softened somewhat these days by StackOverflow and ChatGPT), but there are some things it just does better than WYSWIG editors, so I lean on it where I can now and again.</p> </blockquote> <p>When I was working on my PhD, I'm pretty sure I used <a href=\"https://www.texniccenter.org/\">TeXnicCenter</a>, but it's been a decade since there were any updates there, and you need to manage your own TeX distribution (e.g. MiKTeX) directly if I understand correctly. <a href=\"https://www.reddit.com/r/LaTeX/comments/sle89v/preferred_latex_editor/\">Other common suggestions</a> include <a href=\"https://www.xm1math.net/texmaker/\">Texmaker</a>, <a href=\"https://www.texstudio.org/\">TeXstudio</a>, or just to use VS Code, but these all still require you manage the TeX distribution yourself. Unfortunately I have bad memories of manually managing MiKTeX on Windows and really wanted to avoid that if I could help it.</p> <p>For a long while, I was using <a href=\"https://overleaf.com/\">Overleaf</a>, an online-only platform, for occasionally rendering LaTeX documents, and it worked very well for my needs. I was only rendering relatively short documents and didn't particularly need a lot of IDE or collaborative features.</p> <p><img src=\"/content/images/2024/overleaf.png\" alt=\"Overleaf\"></p> <p>Unfortunately, Overleaf made the individual free-plan basically unusable (rendering a two page document was \"too complex\"), and I couldn't justify paying a subscription for something I only used a couple of times a year.</p> <p>Using Docker seemed like the obvious choice to solve my issue: I could use VS Code as my editor (it has built-in syntax support for LaTeX), and then rending the documents using a self-contained distribution.</p> <p>Overleaf itself <em>is</em> open source, and provides Docker images for running the community edition. I looked into this initially, but it was overkill for what I needed: I didn't need multiple accounts and project storage in the Overleaf implementation itself, I just needed the <em>rendering</em> part.</p> <h2 id=\"building-latex-with-docker-using-blang-latex\" class=\"heading-with-anchor\"><a href=\"#building-latex-with-docker-using-blang-latex\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Building LaTeX with Docker using <code>blang/latex</code></a></h2> <p>Eventually I found <a href=\"https://hub.docker.com/r/blang/latex\">the <code>blang/latex</code> docker images</a>, which do exactly what I want—an Ubuntu-based image, with everything you need to compile locally in docker. The <code>blang/latex</code> come in three different flavours:</p> <ul><li><code>blang/latex:ubuntu</code> (<a href=\"https://github.com/blang/latex-docker/blob/master/Dockerfile.ubuntu\">Dockerfile</a>)—Ubuntu TexLive distribution: Old but stable, most needed packages(3.9GB)</li> <li><code>blang/latex:ctanbasic</code> (<a href=\"https://github.com/blang/latex-docker/blob/master/Dockerfile.basic\">Dockerfile</a>)— CTAN TexLive Scheme-basic: Up-to-date, only basic packages, base for custom builds (500MB)</li> <li><code>blang/latex:ctanfull</code> (<a href=\"https://github.com/blang/latex-docker/blob/master/Dockerfile.full\">Dockerfile</a>)— CTAN TexLive Scheme-full: Up-to-date, all packages (5.6GB)</li></ul> <p>The more complete versions are obviously quite big images, but as I was only going to be pulling them once locally and running them repeatedly to build, I wasn't particularly worried about that. For simplicity I went with the <code>ctanfull</code> tag which contains the <em>full</em> set of <a href=\"http://mirror.ctan.org/systems/texlive/tlnet/archive\">CTAN packages</a>.</p> <p><a href=\"https://hub.docker.com/r/blang/latex\">The docker hub page</a> describes how you can use these images to build your LaTeX project, but I decided to go with something a bit different. I created two files in the root of my project.</p> <ul><li><code>build.ps1</code>—This script runs (or restarts) the docker <code>blang/latex</code> container.</li> <li><code>build.sh</code>—This simple script runs <em>inside</em> the docker container, and does the latex build.</li></ul> <p>The scrcipts themselves are <em>very</em> simple. First we have the <code>build.ps1</code> script:</p> <pre class=\"language-powershell\"><code class=\"language-powershell\"><span class=\"token comment\"># Try to start an existing container, if it exists</span>\ndocker <span class=\"token function\">start</span> <span class=\"token operator\">-</span>a <span class=\"token operator\">-</span>i <span class=\"token string\">\"latex-builder\"</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$LASTEXITCODE</span> <span class=\"token operator\">-ne</span> 0<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\"># The latex-builder image doesn't exist, so run it explicitly</span>\n  <span class=\"token variable\">$ROOT_DIR</span>=<span class=\"token string\">\"<span class=\"token variable\">$PSScriptRoot</span>\"</span>\n\n  docker run <span class=\"token operator\">-</span>it `\n    <span class=\"token operator\">--</span><span class=\"token function\">mount</span> <span class=\"token string\">\"type=bind,source=<span class=\"token variable\">$ROOT_DIR</span>,target=/data\"</span> `\n    <span class=\"token operator\">--</span>name <span class=\"token string\">\"latex-builder\"</span> `\n    blang/latex:ctanfull <span class=\"token operator\">/</span>bin/bash\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>This script attempts to start a docker container using the <code>blang/latex:ctanfull</code> image, using the name <code>latex-builder</code>, and attaches stdin/stdout/stderr. If the container already exists and is stopped, then this just restarts the same image and connects to the container. If the container with the name <code>latex-builder</code> <em>doesn't</em> exist, the script starts a new container, mounts the root directory inside the image at <code>/data</code>, and opens a <code>bash</code> shell.</p> <blockquote> <p>This doesn't <em>strictly</em> work as I would like, as depending on how you later exit a re-started container, the exit code may be non-null, which causes the script to (harmlessly) try to start a new container, fail, and show an error. It's not a big deal, but it's slightly annoying, and I'm sure I'm missing an obvious solution here!</p> </blockquote> <p>Once the container is running, you can build by running <code>.\\build.sh</code> inside the container. The <code>build.sh</code> script is specific to each project and looks something like this:</p> <pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token shebang important\">#!/bin/sh</span>\n\nlualatex <span class=\"token parameter variable\">--jobname</span><span class=\"token operator\">=</span><span class=\"token string\">\"My CV\"</span>  main.tex\n</code></pre> <p>This simple script runs lualatex to render the <code>main.tex</code> LaTeX document as a PDF. Thanks to mounting the directory, this appears on the \"Windows side\" automatically. I keep the docker container running in a window, iterate on the LaTeX files in an editor, and then when I want to see the changes, quickly flick to the terminal and run<code> build.sh</code> in the container. It's exactly the workflow I was hoping for.</p> <blockquote> <p>Note that you could also use <code>pdflatex</code> or <code>latexmk</code> instead of <code>lualatex</code> if you prefer, as described <a href=\"https://hub.docker.com/r/blang/latex\">in the docs</a> for <code>blang/latex</code>.</p> </blockquote> <h2 id=\"why-use-two-separate-files-\" class=\"heading-with-anchor\"><a href=\"#why-use-two-separate-files-\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Why use two separate files?</a></h2> <p>You might be wondering why I opted to keep the docker image container running, necessitating both a <code>build.ps1</code> <em>and</em> <code>build.sh</code> file? It's true that you <em>could</em> run everything all in one command. For example, you could combine the scripts above as follows:</p> <pre class=\"language-powershell\"><code class=\"language-powershell\"><span class=\"token variable\">$ROOT_DIR</span>=<span class=\"token string\">\"<span class=\"token variable\">$PSScriptRoot</span>\"</span>\n\ndocker run <span class=\"token operator\">-</span>it <span class=\"token operator\">--</span><span class=\"token function\">rm</span>`\n  <span class=\"token operator\">--</span><span class=\"token function\">mount</span> <span class=\"token string\">\"type=bind,source=<span class=\"token variable\">$ROOT_DIR</span>,target=/data\"</span> `\n  <span class=\"token operator\">--</span>name <span class=\"token string\">\"latex-builder\"</span> `\n  blang/latex:ctanfull `\n  lualatex <span class=\"token operator\">--</span>jobname=<span class=\"token string\">\"My CV\"</span>  main<span class=\"token punctuation\">.</span>tex\n</code></pre> <p>The problem with this approach is that it starts a new container every time. But when you first run <code>luatex</code> (and, I assume <code>pdflatex</code> and others), it performs some one-time setup, similar to the following</p> <pre class=\"language-bash\"><code class=\"language-bash\">root@67d3d81c4129:~<span class=\"token comment\"># ./build.sh</span>\nThis is LuaTeX, Version <span class=\"token number\">1.0</span>.4 <span class=\"token punctuation\">(</span>TeX Live <span class=\"token number\">2017</span><span class=\"token punctuation\">)</span>\n restricted system commands enabled.\n<span class=\"token punctuation\">(</span>./main.tex\nLaTeX2e <span class=\"token operator\">&lt;</span><span class=\"token number\">2017</span>-04-1<span class=\"token operator\"><span class=\"token file-descriptor important\">5</span>&gt;</span>\n<span class=\"token punctuation\">(</span>using cache: /usr/local/texlive/2017/texmf-var/luatex-cache/generic<span class=\"token punctuation\">)</span>\nluaotfload <span class=\"token operator\">|</span> main <span class=\"token builtin class-name\">:</span> initialization completed <span class=\"token keyword\">in</span> <span class=\"token number\">0.362</span> seconds\nBabel <span class=\"token operator\">&lt;</span><span class=\"token number\">3.1</span><span class=\"token operator\"><span class=\"token file-descriptor important\">6</span>&gt;</span> and hyphenation patterns <span class=\"token keyword\">for</span> <span class=\"token number\">1</span> language<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span> loaded.\n<span class=\"token punctuation\">(</span>./example.cls\nDocument Class: example <span class=\"token number\">2013</span>/02/09 v1.3.0 example class\n<span class=\"token punctuation\">(</span>/usr/local/texlive/2017/texmf-dist/tex/latex/base/size11.clo\nluaotfload <span class=\"token operator\">|</span> db <span class=\"token builtin class-name\">:</span> Font names database not found, generating new one.\nluaotfload <span class=\"token operator\">|</span> db <span class=\"token builtin class-name\">:</span> This can take several minutes<span class=\"token punctuation\">;</span> please be patient.\n</code></pre> <p>As you can see, on this \"first run\", <code>luatex</code> has to build the font-name database cache. On my old laptop this only takes 5-10s, but it's an annoying extra delay for the \"inner-loop\" experience, where the remainder of the build only takes a couple of seconds. By reusing an existing container we can skip that initialization entirely, and go straight to the build!</p> <p>That said, if you want to also have a build that runs in CI, then the one-shot approach obviously makes sense. This is effectively what the GitHub actions yml file below does, by calling <code>./build.sh</code> directly instead of starting a shell:</p> <pre class=\"language-yml\"><code class=\"language-yml\"><span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Build\n<span class=\"token key atrule\">on</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">push</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">branches</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">\"main\"</span> <span class=\"token punctuation\">]</span>\n  <span class=\"token key atrule\">pull_request</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">workflow_dispatch</span><span class=\"token punctuation\">:</span>\n\n<span class=\"token key atrule\">jobs</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">build</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">runs-on</span><span class=\"token punctuation\">:</span> ubuntu<span class=\"token punctuation\">-</span>latest\n    <span class=\"token key atrule\">steps</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> actions/checkout@v4\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> build in docker\n        <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span> docker run <span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>mount type=bind<span class=\"token punctuation\">,</span>source=\"$<span class=\"token punctuation\">{</span>PWD<span class=\"token punctuation\">}</span>\"<span class=\"token punctuation\">,</span>target=/data $IMAGE /data/build.sh\n        <span class=\"token key atrule\">env</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">IMAGE</span><span class=\"token punctuation\">:</span> blang/latex<span class=\"token punctuation\">:</span>ctanfull\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> actions/upload<span class=\"token punctuation\">-</span>artifact@v4.4.3\n        <span class=\"token key atrule\">with</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> pdf\n          <span class=\"token key atrule\">path</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'My CV.pdf'</span>\n</code></pre> <p>Overall I find this setup gives me the best of all worlds, but the <em>real</em> win here is not having to worry about managing dependencies or Windows TeX distributions. Instead I lean on people who are more knowledgeable about these things package things neatly in a Docker image for me!</p> <h2 id=\"what-s-in-the-dockerfile-\" class=\"heading-with-anchor\"><a href=\"#what-s-in-the-dockerfile-\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">What's in the dockerfile?</a></h2> <p>Whenever I'm using random docker images like this, I like to take a look at the Dockerfile to see what's going on under the hood. <a href=\"https://github.com/blang/latex-docker/blob/42d2c532a09a00938331512fd2b539f9944c400c/Dockerfile.basic\">The <code>blang/latex:basic</code> image</a> contains <em>most</em> of the setup:</p> <pre class=\"language-dockerfile\"><code class=\"language-dockerfile\"><span class=\"token instruction\"><span class=\"token keyword\">FROM</span> ubuntu:xenial</span>\n<span class=\"token instruction\"><span class=\"token keyword\">MAINTAINER</span> Benedikt Lang &lt;mail@blang.io&gt;</span>\n<span class=\"token instruction\"><span class=\"token keyword\">ENV</span> DEBIAN_FRONTEND noninteractive</span>\n\n<span class=\"token comment\"># Add the prerequisite packages</span>\n<span class=\"token instruction\"><span class=\"token keyword\">RUN</span> apt-get update -q <span class=\"token operator\">\\</span>\n    &amp;&amp; apt-get install -qy build-essential wget libfontconfig1 <span class=\"token operator\">\\</span>\n    &amp;&amp; rm -rf /var/lib/apt/lists/*</span>\n\n<span class=\"token comment\"># Install TexLive with scheme-basic</span>\n<span class=\"token instruction\"><span class=\"token keyword\">RUN</span> wget http://mirror.ctan.org/systems/texlive/tlnet/install-tl-unx.tar.gz; <span class=\"token operator\">\\</span>\n\tmkdir /install-tl-unx; <span class=\"token operator\">\\</span>\n\ttar -xvf install-tl-unx.tar.gz -C /install-tl-unx --strip-components=1; <span class=\"token operator\">\\</span>\n    echo <span class=\"token string\">\"selected_scheme scheme-basic\"</span> &gt;&gt; /install-tl-unx/texlive.profile; <span class=\"token operator\">\\</span>\n\t/install-tl-unx/install-tl -profile /install-tl-unx/texlive.profile; <span class=\"token operator\">\\</span>\n    rm -r /install-tl-unx; <span class=\"token operator\">\\</span>\n\trm install-tl-unx.tar.gz</span>\n\n<span class=\"token instruction\"><span class=\"token keyword\">ENV</span> PATH=<span class=\"token string\">\"/usr/local/texlive/2017/bin/x86_64-linux:${PATH}\"</span></span>\n\n<span class=\"token instruction\"><span class=\"token keyword\">ENV</span> HOME /data</span>\n<span class=\"token instruction\"><span class=\"token keyword\">WORKDIR</span> /data</span>\n\n<span class=\"token comment\"># Install latex packages</span>\n<span class=\"token instruction\"><span class=\"token keyword\">RUN</span> tlmgr install latexmk</span>\n\n<span class=\"token instruction\"><span class=\"token keyword\">VOLUME</span> [<span class=\"token string\">\"/data\"</span>]</span>\n</code></pre> <p>There's not loads going on there: from an Ubuntu <code>16.04</code> base image (which is getting outdated, and probably needs updating soon) the image installs prerequisites like <code>wget</code> and <code>build-essential</code>, and then installs a <code>TexLive</code> distribution, and adds it to the path.</p> <p><a href=\"https://github.com/blang/latex-docker/blob/42d2c532a09a00938331512fd2b539f9944c400c/Dockerfile.full\">The <code>blang/latex:ctanfull</code> image</a> that I use in this post, is based on this image, but uses the \"full\" scheme:</p> <pre class=\"language-dockerfile\"><code class=\"language-dockerfile\"><span class=\"token instruction\"><span class=\"token keyword\">FROM</span> blang/latex:ctanbasic</span>\n<span class=\"token instruction\"><span class=\"token keyword\">MAINTAINER</span> Benedikt Lang &lt;mail@blang.io&gt;</span>\n\n<span class=\"token instruction\"><span class=\"token keyword\">RUN</span> tlmgr install scheme-full</span>\n</code></pre> <p>I might think about trying to create updated versions of these images, but honestly, as long as they keep working, I probably won't 🙈</p> <h2 id=\"the-local-editor-experience\" class=\"heading-with-anchor\"><a href=\"#the-local-editor-experience\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">The local editor experience</a></h2> <p>For the local editing experience, I've found that VS Code is good enough for me, and I'm obviously very familiar with it. VS Code has LaTeX support built-in, so I simply added <a href=\"https://marketplace.visualstudio.com/items?itemName=mathematic.vscode-pdf\">a PDF Viewer extension</a> so that I can have the rendered result open in on the right side of the Window while editing on the left, and a terminal open at the base. Add in <a href=\"https://marketplace.visualstudio.com/items?itemName=ban.spellright\">a spell-checker</a> and there's not much more I need for local development:</p> <p><img src=\"/content/images/2024/cv.png\" alt=\"An image of my local dev setup using VS Code\"></p> <p>That covers my local development setup, my build process, and the simple CI that I have for projects. It's easy to copy the <code>build.ps1</code>, <code>build.sh</code>, and <code>build.yml</code> files between projects whenever I need to. And if I come back to it 6 months later, it's obvious what I need to do—run the <code>build.*</code> script that makes sense (<code>.ps1</code> for Windows and <code>.sh</code> once running inside the docker container)!</p> <h2 id=\"summary\" class=\"heading-with-anchor\"><a href=\"#summary\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Summary</a></h2> <p>In this post I described how I render LaTeX projects using the <code>blang/latex</code> docker image, which contains a full LaTeX distribution. I described how and why I start a long-lived docker container for the project, and then repeatedly re-render the project using <code>lualatex</code>. Finally I showed the setup I use with VS Code, a PDF rendering extension, and a spellchecker.</p> ",
    "sanitized": "In this short post I describe how I build LaTeX projects on a Windows machine by using Docker. There's nothing particularly novel or exciting about this, someone just asked me about it recently so this is effectively my reply! Typesetting documents with LaTeX I love using markdown for writing documentation, blog posts, notes, or anything I can. Even with a very simple editor, you can have something that roughly looks like the markup that you want to produce. But markdown is generally tied closely to HTML (though this is not strictly required), and sometimes you want or need to produce a standalone document, like a PDF, for which HTML isn't generally well suited. For those rare cases where I want to produce a nice looking document, such as a CV, I fallback to LaTeX. LaTeX is a markup language that is explicitly about typesetting documents so it cares deeply about pages and margins, which contrasts with HTML markup. You then use a TeX distribution to render the LaTeX document as a PDF (or other format).  LaTeX performs the same general function as WYSIWYG editors like Google Docs or Microsoft Word. However, LaTeX is not WYSIWYG (requiring an exxplicit rendering step) which can make it harder to use in general, but this all can enable broader optimisations and produce better looking documents overall.  LaTeX is very common in the scientific community in particular, with papers often being written in LaTeX. It is also particularly good for writing large documents, which is why I used it to write my PhD thesis. However, that was years ago. When I came to work with LaTeX again recently, I was reminded that working with it on Windows was not obvious. Rendering LaTeX on Windows LaTeX comes very much from the *Nix world, which means that it's very open, and available, but also that there are thousand different \"suggested\" approaches to rending LaTeX documents. For people who want choice, or who care about the little details of each distribution, that's great. For people who just want to \"install something\" and get on with it, getting started can be confusing 😅  Just to be clear, I am very much a beginner with LaTeX, despite having used it a lot 15 years ago. I still find it has a very steep learning curve (softened somewhat these days by StackOverflow and ChatGPT), but there are some things it just does better than WYSWIG editors, so I lean on it where I can now and again.  When I was working on my PhD, I'm pretty sure I used TeXnicCenter, but it's been a decade since there were any updates there, and you need to manage your own TeX distribution (e.g. MiKTeX) directly if I understand correctly. Other common suggestions include Texmaker, TeXstudio, or just to use VS Code, but these all still require you manage the TeX distribution yourself. Unfortunately I have bad memories of manually managing MiKTeX on Windows and really wanted to avoid that if I could help it. For a long while, I was using Overleaf, an online-only platform, for occasionally rendering LaTeX documents, and it worked very well for my needs. I was only rendering relatively short documents and didn't particularly need a lot of IDE or collaborative features.  Unfortunately, Overleaf made the individual free-plan basically unusable (rendering a two page document was \"too complex\"), and I couldn't justify paying a subscription for something I only used a couple of times a year. Using Docker seemed like the obvious choice to solve my issue: I could use VS Code as my editor (it has built-in syntax support for LaTeX), and then rending the documents using a self-contained distribution. Overleaf itself is open source, and provides Docker images for running the community edition. I looked into this initially, but it was overkill for what I needed: I didn't need multiple accounts and project storage in the Overleaf implementation itself, I just needed the rendering part. Building LaTeX with Docker using blang/latex Eventually I found the blang/latex docker images, which do exactly what I want—an Ubuntu-based image, with everything you need to compile locally in docker. The blang/latex come in three different flavours: blang/latex:ubuntu (Dockerfile)—Ubuntu TexLive distribution: Old but stable, most needed packages(3.9GB) blang/latex:ctanbasic (Dockerfile)— CTAN TexLive Scheme-basic: Up-to-date, only basic packages, base for custom builds (500MB) blang/latex:ctanfull (Dockerfile)— CTAN TexLive Scheme-full: Up-to-date, all packages (5.6GB) The more complete versions are obviously quite big images, but as I was only going to be pulling them once locally and running them repeatedly to build, I wasn't particularly worried about that. For simplicity I went with the ctanfull tag which contains the full set of CTAN packages. The docker hub page describes how you can use these images to build your LaTeX project, but I decided to go with something a bit different. I created two files in the root of my project. build.ps1—This script runs (or restarts) the docker blang/latex container. build.sh—This simple script runs inside the docker container, and does the latex build. The scrcipts themselves are very simple. First we have the build.ps1 script: # Try to start an existing container, if it exists\ndocker start -a -i \"latex-builder\"\n\nif ($LASTEXITCODE -ne 0) {\n  # The latex-builder image doesn't exist, so run it explicitly\n  $ROOT_DIR=\"$PSScriptRoot\"\n\n  docker run -it `\n    --mount \"type=bind,source=$ROOT_DIR,target=/data\" `\n    --name \"latex-builder\" `\n    blang/latex:ctanfull /bin/bash\n}\n This script attempts to start a docker container using the blang/latex:ctanfull image, using the name latex-builder, and attaches stdin/stdout/stderr. If the container already exists and is stopped, then this just restarts the same image and connects to the container. If the container with the name latex-builder doesn't exist, the script starts a new container, mounts the root directory inside the image at /data, and opens a bash shell.  This doesn't strictly work as I would like, as depending on how you later exit a re-started container, the exit code may be non-null, which causes the script to (harmlessly) try to start a new container, fail, and show an error. It's not a big deal, but it's slightly annoying, and I'm sure I'm missing an obvious solution here!  Once the container is running, you can build by running .\\build.sh inside the container. The build.sh script is specific to each project and looks something like this: #!/bin/sh\n\nlualatex --jobname=\"My CV\"  main.tex\n This simple script runs lualatex to render the main.tex LaTeX document as a PDF. Thanks to mounting the directory, this appears on the \"Windows side\" automatically. I keep the docker container running in a window, iterate on the LaTeX files in an editor, and then when I want to see the changes, quickly flick to the terminal and run build.sh in the container. It's exactly the workflow I was hoping for.  Note that you could also use pdflatex or latexmk instead of lualatex if you prefer, as described in the docs for blang/latex.  Why use two separate files? You might be wondering why I opted to keep the docker image container running, necessitating both a build.ps1 and build.sh file? It's true that you could run everything all in one command. For example, you could combine the scripts above as follows: $ROOT_DIR=\"$PSScriptRoot\"\n\ndocker run -it --rm`\n  --mount \"type=bind,source=$ROOT_DIR,target=/data\" `\n  --name \"latex-builder\" `\n  blang/latex:ctanfull `\n  lualatex --jobname=\"My CV\"  main.tex\n The problem with this approach is that it starts a new container every time. But when you first run luatex (and, I assume pdflatex and others), it performs some one-time setup, similar to the following root@67d3d81c4129:~# ./build.sh\nThis is LuaTeX, Version 1.0.4 (TeX Live 2017)\n restricted system commands enabled.\n(./main.tex\nLaTeX2e <2017-04-15>\n(using cache: /usr/local/texlive/2017/texmf-var/luatex-cache/generic)\nluaotfload | main : initialization completed in 0.362 seconds\nBabel <3.16> and hyphenation patterns for 1 language(s) loaded.\n(./example.cls\nDocument Class: example 2013/02/09 v1.3.0 example class\n(/usr/local/texlive/2017/texmf-dist/tex/latex/base/size11.clo\nluaotfload | db : Font names database not found, generating new one.\nluaotfload | db : This can take several minutes; please be patient.\n As you can see, on this \"first run\", luatex has to build the font-name database cache. On my old laptop this only takes 5-10s, but it's an annoying extra delay for the \"inner-loop\" experience, where the remainder of the build only takes a couple of seconds. By reusing an existing container we can skip that initialization entirely, and go straight to the build! That said, if you want to also have a build that runs in CI, then the one-shot approach obviously makes sense. This is effectively what the GitHub actions yml file below does, by calling ./build.sh directly instead of starting a shell: name: Build\non:\n  push:\n    branches: [ \"main\" ]\n  pull_request:\n  workflow_dispatch:\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n      - name: build in docker\n        run: docker run --mount type=bind,source=\"${PWD}\",target=/data $IMAGE /data/build.sh\n        env:\n          IMAGE: blang/latex:ctanfull\n      - uses: actions/upload-artifact@v4.4.3\n        with:\n          name: pdf\n          path: 'My CV.pdf'\n Overall I find this setup gives me the best of all worlds, but the real win here is not having to worry about managing dependencies or Windows TeX distributions. Instead I lean on people who are more knowledgeable about these things package things neatly in a Docker image for me! What's in the dockerfile? Whenever I'm using random docker images like this, I like to take a look at the Dockerfile to see what's going on under the hood. The blang/latex:basic image contains most of the setup: FROM ubuntu:xenial\nMAINTAINER Benedikt Lang <mail@blang.io>\nENV DEBIAN_FRONTEND noninteractive\n\n# Add the prerequisite packages\nRUN apt-get update -q \\\n    && apt-get install -qy build-essential wget libfontconfig1 \\\n    && rm -rf /var/lib/apt/lists/*\n\n# Install TexLive with scheme-basic\nRUN wget http://mirror.ctan.org/systems/texlive/tlnet/install-tl-unx.tar.gz; \\\n\tmkdir /install-tl-unx; \\\n\ttar -xvf install-tl-unx.tar.gz -C /install-tl-unx --strip-components=1; \\\n    echo \"selected_scheme scheme-basic\" >> /install-tl-unx/texlive.profile; \\\n\t/install-tl-unx/install-tl -profile /install-tl-unx/texlive.profile; \\\n    rm -r /install-tl-unx; \\\n\trm install-tl-unx.tar.gz\n\nENV PATH=\"/usr/local/texlive/2017/bin/x86_64-linux:${PATH}\"\n\nENV HOME /data\nWORKDIR /data\n\n# Install latex packages\nRUN tlmgr install latexmk\n\nVOLUME [\"/data\"]\n There's not loads going on there: from an Ubuntu 16.04 base image (which is getting outdated, and probably needs updating soon) the image installs prerequisites like wget and build-essential, and then installs a TexLive distribution, and adds it to the path. The blang/latex:ctanfull image that I use in this post, is based on this image, but uses the \"full\" scheme: FROM blang/latex:ctanbasic\nMAINTAINER Benedikt Lang <mail@blang.io>\n\nRUN tlmgr install scheme-full\n I might think about trying to create updated versions of these images, but honestly, as long as they keep working, I probably won't 🙈 The local editor experience For the local editing experience, I've found that VS Code is good enough for me, and I'm obviously very familiar with it. VS Code has LaTeX support built-in, so I simply added a PDF Viewer extension so that I can have the rendered result open in on the right side of the Window while editing on the left, and a terminal open at the base. Add in a spell-checker and there's not much more I need for local development:  That covers my local development setup, my build process, and the simple CI that I have for projects. It's easy to copy the build.ps1, build.sh, and build.yml files between projects whenever I need to. And if I come back to it 6 months later, it's obvious what I need to do—run the build.* script that makes sense (.ps1 for Windows and .sh once running inside the docker container)! Summary In this post I described how I render LaTeX projects using the blang/latex docker image, which contains a full LaTeX distribution. I described how and why I start a long-lived docker container for the project, and then repeatedly re-render the project using lualatex. Finally I showed the setup I use with VS Code, a PDF rendering extension, and a spellchecker."
  },
  {
    "itemId": "https://andrewlock.net/using-the-yamldotnet-source-generator-for-native-aot/",
    "raw": "<img src=\"https://andrewlock.net/content/images/2024/yamldotnet.png\" /><p>In this post I show how you can use the <a href=\"https://github.com/aaubry/YamlDotNet\">YamlDotNet</a> source generator in your .NET 7+ application. This is particularly important if you're planning on using your application with NativeAOT.</p> <h2 id=\"reading-yaml-with-yamldotnet\" class=\"heading-with-anchor\"><a href=\"#reading-yaml-with-yamldotnet\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Reading YAML with YamlDotNet</a></h2> <p>Love it or hate it, <a href=\"https://yaml.org/\">YAML</a> is everywhere these days. It's emerged as the markup language of choice for \"cloud native\" configuration, whether that's Kubernetes manifests, docker compose files, or GitHub Action workflows. On the one hand, it's a generally-easy-to-read format, and a strict superset of JSON. On the other hand, the significant whitespace can be a nightmare if you don't have decent tooling 😅</p> <p>Either way, people clearly choose to use it, even if they don't have to. Years ago I wrote a small ASP.NET Core library, <a href=\"https://www.nuget.org/packages/NetEscapades.Configuration.Yaml\">NetEscapades.Configuration.Yaml</a> that reads YAML files in as part of ASP.NET Core's standard <a href=\"https://learn.microsoft.com/en-us/aspnet/core/fundamentals/configuration\">configuration system</a>. Judging from the <a href=\"https://nugettrends.com/packages?ids=NetEscapades.Configuration.Yaml&amp;months=72\">NuGet Trends data</a>, YAML is not going away any time soon!</p> <p><img src=\"/content/images/2024/nuget_trends.png\" alt=\"The NuGet downloads for the NetEscapades.Configuration.Yaml library\"></p> <p>Under the hood, <a href=\"https://www.nuget.org/packages/NetEscapades.Configuration.Yaml\">NetEscapades.Configuration.Yaml</a> uses <a href=\"https://www.nuget.org/packages/YamlDotNet/\">YamlDotNet</a> to read the YAML files. <a href=\"https://github.com/aaubry/YamlDotNet\">YamlDotNet</a> is <em>the</em> YAML parser for .NET—with ~245 Million downloads it's effectively the \"Newtonsoft.Json for YAML\".</p> <p>There are several ways to work with YAML files with YamlDotNet. If you need to, you can <a href=\"https://github.com/aaubry/YamlDotNet/wiki/Samples.LoadingAYamlStream\">manipulate a high-level representation of the YAML</a> (e.g. <code>YamlScalarNode</code>, <code>YamlMappingNode</code> etc) if you need to work with the YAML document directly.</p> <p>A more common approach is to serialize your YAML to and from strongly-typed objects, just like you'd do with Newtonsoft.Json or System.Text.Json. For example, the following code shows how to deserialize a YAML document into a strongly-typed <code>Person</code> object using YamlDotNet:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">YamlDotNet<span class=\"token punctuation\">.</span>Serialization</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">YamlDotNet<span class=\"token punctuation\">.</span>Serialization<span class=\"token punctuation\">.</span>NamingConventions</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// create a deserializer, using the builder pattern </span>\n<span class=\"token class-name\">IDeserializer</span> deserializer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">DeserializerBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">WithNamingConvention</span><span class=\"token punctuation\">(</span>UnderscoredNamingConvention<span class=\"token punctuation\">.</span>Instance<span class=\"token punctuation\">)</span> <span class=\"token comment\">// customise conventions</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">Build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Can deserialize from a string or TextReader (for example)</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> yaml <span class=\"token operator\">=</span> \n    <span class=\"token string\">\"\"</span>\"\n    name<span class=\"token punctuation\">:</span> George <span class=\"token class-name\">Washington</span>\n    age<span class=\"token punctuation\">:</span> <span class=\"token number\">89</span>\n    height_in_inches<span class=\"token punctuation\">:</span> <span class=\"token number\">5.75</span>\n    addresses<span class=\"token punctuation\">:</span>\n      home<span class=\"token punctuation\">:</span>\n        street<span class=\"token punctuation\">:</span> <span class=\"token number\">400</span> Mockingbird <span class=\"token class-name\">Lane</span>\n        state<span class=\"token punctuation\">:</span> Hawidaho\n    <span class=\"token string\">\"\"</span>\"<span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">Person</span> p <span class=\"token operator\">=</span> deserializer<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">Deserialize</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>Person<span class=\"token punctuation\">&gt;</span></span></span><span class=\"token punctuation\">(</span>yaml<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre> <p>You can customise the conventions used to read the YAML, override the serialization for certain types or properties, and generally customize things as you need. It's worth checking out <a href=\"https://github.com/aaubry/YamlDotNet/wiki/Serialization.Deserializer\">the GitHub Wiki</a> for details of all the possible customisation you can do.</p> <h2 id=\"the-advantages-and-complexities-of-native-aot\" class=\"heading-with-anchor\"><a href=\"#the-advantages-and-complexities-of-native-aot\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">The advantages and complexities of Native AOT</a></h2> <p><a href=\"https://learn.microsoft.com/en-us/dotnet/core/deploying/native-aot/?tabs=windows%2Cnet8\"><em>Native AOT</em></a> is a new (since .NET 7) deployment mechanism for .NET applications. Normally, when you publish and deploy a .NET application, your application is compiled into Intermediate Language (IL). When the .NET runtime runs your application it uses a Just-In-Time (JIT) compiler to convert your IL into machine-language instructions which can actually be executed by processor.</p> <p>In contrast, Native AOT performs the IL to machine-language conversion during a <code>dotnet publish</code>. It produces a single binary, targeting a single platform (for example <code>x64</code> Windows or <code>arm64</code> Linux), which contains the complete .NET runtime, all the base-class libraries, and your application. To keep the size of this file down, NativeAOT automatically \"trims\" any unused types and members from your application <em>and</em> from the underlying platform.</p> <blockquote> <p>When choosing between IL+JIT or Native AOT there are a number of trade offs to consider. I won't go into those exhaustively here, and instead will just highlight a few.</p> </blockquote> <p>Advantages to using the IL+JIT approach include:</p> <ul><li>The JIT can optimise the machine-language generated for the specific capabilities of the processor currently executing, which may mean it can produce faster code than Native AOT would.</li> <li>You're free to use meta-programming approaches such as reflection (e.g. <code>Assembly.LoadFile</code>) and run-time code generation (e.g. <code>System.Reflection.Emit</code>).</li> <li>You can use any .NET library available; they're all designed to be used in this mode.</li></ul> <p>Whereas Native AOT brings other advantages:</p> <ul><li>Native AOT typically allows significantly faster startup times, as there's no need to load all the types, start the JIT compiler, and generate machine code from IL; the app starts executing almost immediately.</li> <li>The size of a Native AOT app is typically <em>much</em> smaller than the overall footprint of a JIT app (runtime + base class libraries + application), as any unused features are trimmed and removed.</li> <li>Runtime memory usage is typically smaller, as the runtime has to do less work (it doesn't need to run the JIT compiler, load types, have debugger support).</li></ul> <blockquote> <p>Michal Strehovsky gave a great <a href=\"https://www.youtube.com/watch?v=Gmn-4mVSjq4&amp;ab_channel=dotnet\">Deep dive on Native AOT</a> talk at .NET Conf 2024; if you're interested in Native AOT I strongly suggest taking a look at it!</p> </blockquote> <p>The big downside to using Native AOT publishing is that the compiler needs to be able to <em>statically</em> understand which types in your application are <em>actually</em> going to be used. That is particularly difficult for functionality that leans heavily on <em>reflection</em>. And guess what, serialization and deserialization typically does just that.</p> <h2 id=\"source-generation-to-the-rescue-\" class=\"heading-with-anchor\"><a href=\"#source-generation-to-the-rescue-\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Source generation to the rescue!</a></h2> <p>Reflection is often problematic for Native AOT, as it can quickly become difficult for the compiler to know which types are <em>actually</em> being used. For example, the following code would (potentially) work fine when you're running with a JIT:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\">Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Enter a type to load\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword\">string</span></span> typeToLoad <span class=\"token operator\">=</span> Console<span class=\"token punctuation\">.</span><span class=\"token function\">ReadLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Type<span class=\"token punctuation\">?</span></span> type <span class=\"token operator\">=</span> Type<span class=\"token punctuation\">.</span><span class=\"token function\">GetType</span><span class=\"token punctuation\">(</span>typeToLoad<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// dynamically load the type</span>\nConsole<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"Loaded type </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">type</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre> <p>There's clearly no way for the compiler to know ahead of time what type will be requested, so there's pretty much no way Native AOT is going to work with this sort of pattern.</p> <blockquote> <p>This example is obviously very contrived, but it's actually similar to how some plugin systems work in practice!</p> </blockquote> <p>In other scenarios we use reflection primarily because it was historically the only tool available to us. This is often the case for serialization and deserialization. Serializers commonly use reflection to inspect the properties of objects so they can be created from a given document, whether that's XML, JSON, or YAML.</p> <p>However, with the introduction of source generators, we now have another tool. Instead of inspecting types at <em>runtime</em> to generate the mapping code from documents-to-types, source generators allow us to move that work to <em>compile</em> time. This can give performance improvements (as there's less work to do at runtime), but more importantly (for this case) it also means our code is statically analyzable, and can potentially support Native AOT.</p> <blockquote> <p>I've written a lot about source generators: I have a series on <a href=\"/series/creating-a-source-generator/\">creating an incremental source generator here</a> and have described some of the source generators I've created <a href=\"/recent-updates-for-netescapades-enumgenerators-interceptors/\">here</a> and <a href=\"https://andrewlock.net/updates-to-the-stronglytypedid-library/\">here</a>.</p> </blockquote> <p>It's important to be aware that using source generation for serialization <em>typically</em> requires making code changes. For example, using source generation with System.Text.Json (the built-in JSON serializer) requires</p> <ul><li>Creating a <code>JsonSerializerContract</code>.</li> <li>Applying <code>[JsonSerializable]</code> with the types to generate.</li> <li>Explicitly calling serialization method overloads that use the <code>JsonSerializerContract</code>.</li></ul> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> json <span class=\"token operator\">=</span> \n    <span class=\"token string\">\"\"</span>\"\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token string\">\"Date\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"2019-08-01T00:00:00\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"TemperatureCelsius\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">25</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"Summary\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Hot\"</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token string\">\"\"</span>\"<span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> weatherForecast <span class=\"token operator\">=</span> JsonSerializer<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">Deserialize</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>WeatherForecast<span class=\"token punctuation\">&gt;</span></span></span><span class=\"token punctuation\">(</span>\n    json<span class=\"token punctuation\">,</span>\n    SourceGenerationContext<span class=\"token punctuation\">.</span>Default<span class=\"token punctuation\">.</span>WeatherForecast<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Explicitly use the context</span>\n\n<span class=\"token comment\">// The data type</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">WeatherForecast</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">DateTime</span> Date <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">int</span></span> TemperatureCelsius <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">?</span></span> Summary <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// The context - the body of this type is source generated</span>\n<span class=\"token punctuation\">[</span><span class=\"token function\">JsonSerializable</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span><span class=\"token type-expression class-name\">WeatherForecast</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">internal</span> <span class=\"token keyword\">partial</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SourceGenerationContext</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">JsonSerializerContext</span></span>\n<span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>Source generation in System.Text.Json has got progressively better over recent releases, so that many of the gaps and issues that were once there have been resolved. However, I wasn't aware until recently that YamlDotNet has a similar source generator for serializing YAML.</p> <h2 id=\"using-source-generation-with-yamldotnet\" class=\"heading-with-anchor\"><a href=\"#using-source-generation-with-yamldotnet\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Using source generation with YamlDotNet</a></h2> <p>I was recently working on a project that I wanted to publish using NativeAOT. It involved reading some Markdown files <a href=\"https://github.com/xoofx/markdig\">using Markdig</a>, reading <a href=\"https://github.com/xoofx/markdig/blob/master/src/Markdig.Tests/Specs/YamlSpecs.md\">the YAML frontmatter</a>, and parsing the YAML.</p> <p>Initially, I thought I might have a problem. There's no real mention of Native AOT or source generation that I could see <a href=\"https://github.com/aaubry/YamlDotNet/wiki\">in the YamlDotNet Wiki</a>. However <a href=\"https://github.com/aaubry/YamlDotNet/issues/740\">this issue</a> requesting support for Native AOT was marked complete and there was a sample called <a href=\"https://github.com/aaubry/YamlDotNet/tree/master/YamlDotNet.Core7AoTCompileTest\">YamlDotNet.Core7AoTCompileTest</a>, and sure enough, it was possible!</p> <p>To use the YamlDotNet source generation in your project, you need to do 4 things:</p> <ul><li>Add a reference to <a href=\"https://www.nuget.org/packages/Vecc.YamlDotNet.Analyzers.StaticGenerator\">Vecc.YamlDotNet.Analyzers.StaticGenerator</a>.</li> <li>Create a class derived from <code>YamlDotNet.Serialization.StaticContext</code>.</li> <li>Annotate this class with the types you wish to use with source generation.</li> <li>Use the <code>StaticDeserializerBuilder</code> instead of <code>DeserializerBuilder</code> to build your <code>IDeserializer</code></li></ul> <p>I'll walk through each of those steps in the following sections.</p> <h3 id=\"1-add-a-reference-to-vecc-yamldotnet-analyzers-staticgenerator\" class=\"heading-with-anchor\"><a href=\"#1-add-a-reference-to-vecc-yamldotnet-analyzers-staticgenerator\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">1. Add a reference to Vecc.YamlDotNet.Analyzers.StaticGenerator</a></h3> <p>The first step, adding a reference to <a href=\"https://www.nuget.org/packages/Vecc.YamlDotNet.Analyzers.StaticGenerator\"><em>Vecc.YamlDotNet.Analyzers.StaticGenerator</em></a> is a somewhat odd one - I get the <em>impression</em> that this is just a temporary measure by the current maintainer, but it's a required step right now. The NuGet is published by the current maintainer of YamlDotNet, and the version numbers match with the YamlDotNet releases.</p> <p>Add both this package and YamlDotNet to your project:</p> <pre class=\"language-bash\"><code class=\"language-bash\">dotnet <span class=\"token function\">add</span> package Vecc.YamlDotNet.Analyzers.StaticGenerator\ndotnet <span class=\"token function\">add</span> package YamlDotNet\n</code></pre> <h3 id=\"2-create-a-yamldotnet-serialization-staticcontext-type\" class=\"heading-with-anchor\"><a href=\"#2-create-a-yamldotnet-serialization-staticcontext-type\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">2. Create a <code>YamlDotNet.Serialization.StaticContext</code> type</a></h3> <p>Next, create a class that derives from <code>YamlDotNet.Serialization.StaticContext</code>, and add the <code>[YamlStaticContext]</code> attribute to it. For example:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">YamlDotNet<span class=\"token punctuation\">.</span>Serialization</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">YamlStaticContext</span></span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">partial</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">YamlStaticContext</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">YamlDotNet<span class=\"token punctuation\">.</span>Serialization<span class=\"token punctuation\">.</span>StaticContext</span></span>\n<span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>This type is equivalent to the <code>JsonSerializerContext</code> used by System.Text.Json, and serves as the \"target\" of the source generator.</p> <h3 id=\"3-add-yamlserializable-attributes-for-each-type-to-serialize\" class=\"heading-with-anchor\"><a href=\"#3-add-yamlserializable-attributes-for-each-type-to-serialize\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">3. Add <code>[YamlSerializable]</code> attributes for each type to serialize</a></h3> <p>For each type that you want to serialize or deserialize, decorate your <code>StaticContext</code> class with a <code>[YamlSerializable]</code> attribute. For example:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">YamlDotNet<span class=\"token punctuation\">.</span>Serialization</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">YamlStaticContext</span></span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">YamlSerializable</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span><span class=\"token type-expression class-name\">WeatherForecast</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span> <span class=\"token comment\">// Generate for WeatherForecast type</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">partial</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">YamlStaticContext</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">YamlDotNet<span class=\"token punctuation\">.</span>Serialization<span class=\"token punctuation\">.</span>StaticContext</span></span>\n<span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>This makes the type available for source generation.</p> <blockquote> <p>Note that you must add <code>[YamlSerializable]</code> for all the non-built-in types that you wish to serialize, whether they're \"top-level\" types, or just referenced by other properties.</p> </blockquote> <p>If you check the generated code, you can see <em>exactly</em> what YamlDotNet is doing. I'm not going to reproduce it all here, but there's a few interesting points to note:</p> <ul><li>By default, when you register a type <code>T</code> using <code>[YamlSerializable]</code>, YamlDotNet will also recognise <code>T[]</code>, <code>IEnumerable&lt;T&gt;</code>, <code>List&lt;T&gt;</code>, and <code>Dictionary&lt;string, T&gt;</code>.</li> <li>The source generator implements an <code>IObjectAccessor</code> for the type.</li></ul> <p>On that latter point, the accessor looks something like this:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">DemoApp_WeatherForecast_379090c0bf12475d92847d8798d5c88f</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">YamlDotNet<span class=\"token punctuation\">.</span>Serialization<span class=\"token punctuation\">.</span>IObjectAccessor</span></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Set</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> propertyName<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">object</span></span> target<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">object</span></span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> v <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>DemoApp<span class=\"token punctuation\">.</span>WeatherForecast<span class=\"token punctuation\">)</span>target<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>propertyName<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">case</span> <span class=\"token string\">\"Date\"</span><span class=\"token punctuation\">:</span> v<span class=\"token punctuation\">.</span>Date <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>System<span class=\"token punctuation\">.</span>DateTime<span class=\"token punctuation\">)</span><span class=\"token keyword\">value</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">case</span> <span class=\"token string\">\"TemperatureCelsius\"</span><span class=\"token punctuation\">:</span> v<span class=\"token punctuation\">.</span>TemperatureCelsius <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>System<span class=\"token punctuation\">.</span>Int32<span class=\"token punctuation\">)</span><span class=\"token keyword\">value</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">case</span> <span class=\"token string\">\"Summary\"</span><span class=\"token punctuation\">:</span> v<span class=\"token punctuation\">.</span>Summary <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>System<span class=\"token punctuation\">.</span>String<span class=\"token punctuation\">)</span><span class=\"token keyword\">value</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">ArgumentOutOfRangeException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"propertyName\"</span><span class=\"token punctuation\">,</span> <span class=\"token interpolation-string\"><span class=\"token string\">$\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">propertyName</span><span class=\"token punctuation\">}</span></span><span class=\"token string\"> does not exist or is not settable\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">object</span></span> <span class=\"token function\">Read</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> propertyName<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">object</span></span> target<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> v <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>DemoApp<span class=\"token punctuation\">.</span>WeatherForecast<span class=\"token punctuation\">)</span>target<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>propertyName<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">case</span> <span class=\"token string\">\"Date\"</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">return</span> v<span class=\"token punctuation\">.</span>Date<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">case</span> <span class=\"token string\">\"TemperatureCelsius\"</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">return</span> v<span class=\"token punctuation\">.</span>TemperatureCelsius<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">case</span> <span class=\"token string\">\"Summary\"</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">return</span> v<span class=\"token punctuation\">.</span>Summary<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>Of course, you don't need to worry about any of that. But if you <em>do</em> need to peek behind the curtains, you can often more easily see what's going on when the code is source generated like this!.</p> <p>We're nearly finished, there's just one more change we need for our app to support the generated definitions.</p> <h3 id=\"4-use-the-staticdeserializerbuilder\" class=\"heading-with-anchor\"><a href=\"#4-use-the-staticdeserializerbuilder\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">4. Use the <code>StaticDeserializerBuilder</code></a></h3> <p>The final step is to find where you're currently creating an <code>IDeserializer</code> using a <code>DeserializerBuilder</code>. Replace the <code>DeserializerBuilder</code> with <code>StaticDeserializerBuilder</code> and pass in an instance of your <code>StaticContext</code>. For example:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token comment\">// Replace this ...</span>\n<span class=\"token comment\">// IDeserializer deserializer = new DeserializerBuilder()</span>\n\n<span class=\"token comment\">// With this:</span>\n<span class=\"token comment\">//                              👇 Static builder         👇 Your StaticContext type</span>\n<span class=\"token class-name\">IDeserializer</span> deserializer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">StaticDeserializerBuilder</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">YamlStaticContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">WithNamingConvention</span><span class=\"token punctuation\">(</span>UnderscoredNamingConvention<span class=\"token punctuation\">.</span>Instance<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">Build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">WeatherForecast</span> p <span class=\"token operator\">=</span> deserializer<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">Deserialize</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>WeatherForecast<span class=\"token punctuation\">&gt;</span></span></span><span class=\"token punctuation\">(</span>yaml<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre> <p>You can still customize your conventions as before, but now when you call <code>Deserialize&lt;T&gt;</code> YamlDotNet uses your <code>StaticContext</code> and generated <code>IObjectAccessors</code> to deserialize the YAML into your strongly typed object. Serializing works in much the same way:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token comment\">// Use the StaticSerializerBuilder and pass in your custom StaticContext</span>\n<span class=\"token class-name\">ISerializer</span> serializer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">StaticSerializerBuilder</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">YamlStaticContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">EnsureRoundtrip</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">Build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> forecast <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">WeatherForecast</span>\n<span class=\"token punctuation\">{</span>\n    Date <span class=\"token operator\">=</span> DateTime<span class=\"token punctuation\">.</span>UtcNow<span class=\"token punctuation\">,</span>\n    Summary <span class=\"token operator\">=</span> <span class=\"token string\">\"Sunny\"</span><span class=\"token punctuation\">,</span>\n    TemperatureCelsius <span class=\"token operator\">=</span> <span class=\"token number\">23</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Serialize the object as normal</span>\n<span class=\"token class-name\"><span class=\"token keyword\">string</span></span> json <span class=\"token operator\">=</span> serializer<span class=\"token punctuation\">.</span><span class=\"token function\">Serialize</span><span class=\"token punctuation\">(</span>forecast<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre> <p>And that's it. You now have NativeAOT compatible YAML serialization and deserialization, all thanks to the good work of the YamlDotNet maintainers!</p> <h2 id=\"summary\" class=\"heading-with-anchor\"><a href=\"#summary\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Summary</a></h2> <p>In this post I showed how you can use the YamlDotNet library to deserialize YAML into a strongly typed object. I then discussed some of the pros and cons of Native AOT, and how source generation can help work around the lack of reflection in Native AOT. Finally, I showed how to enable a source generator for YamlDotNet so that you can make your YAML serialization and deserialization Native AOT-friendly.</p> ",
    "sanitized": "In this post I show how you can use the YamlDotNet source generator in your .NET 7+ application. This is particularly important if you're planning on using your application with NativeAOT. Reading YAML with YamlDotNet Love it or hate it, YAML is everywhere these days. It's emerged as the markup language of choice for \"cloud native\" configuration, whether that's Kubernetes manifests, docker compose files, or GitHub Action workflows. On the one hand, it's a generally-easy-to-read format, and a strict superset of JSON. On the other hand, the significant whitespace can be a nightmare if you don't have decent tooling 😅 Either way, people clearly choose to use it, even if they don't have to. Years ago I wrote a small ASP.NET Core library, NetEscapades.Configuration.Yaml that reads YAML files in as part of ASP.NET Core's standard configuration system. Judging from the NuGet Trends data, YAML is not going away any time soon!  Under the hood, NetEscapades.Configuration.Yaml uses YamlDotNet to read the YAML files. YamlDotNet is the YAML parser for .NET—with ~245 Million downloads it's effectively the \"Newtonsoft.Json for YAML\". There are several ways to work with YAML files with YamlDotNet. If you need to, you can manipulate a high-level representation of the YAML (e.g. YamlScalarNode, YamlMappingNode etc) if you need to work with the YAML document directly. A more common approach is to serialize your YAML to and from strongly-typed objects, just like you'd do with Newtonsoft.Json or System.Text.Json. For example, the following code shows how to deserialize a YAML document into a strongly-typed Person object using YamlDotNet: using YamlDotNet.Serialization;\nusing YamlDotNet.Serialization.NamingConventions;\n\n// create a deserializer, using the builder pattern \nIDeserializer deserializer = new DeserializerBuilder()\n    .WithNamingConvention(UnderscoredNamingConvention.Instance) // customise conventions\n    .Build();\n\n// Can deserialize from a string or TextReader (for example)\nvar yaml = \n    \"\"\"\n    name: George Washington\n    age: 89\n    height_in_inches: 5.75\n    addresses:\n      home:\n        street: 400 Mockingbird Lane\n        state: Hawidaho\n    \"\"\";\n\nPerson p = deserializer.Deserialize<Person>(yaml);\n You can customise the conventions used to read the YAML, override the serialization for certain types or properties, and generally customize things as you need. It's worth checking out the GitHub Wiki for details of all the possible customisation you can do. The advantages and complexities of Native AOT Native AOT is a new (since .NET 7) deployment mechanism for .NET applications. Normally, when you publish and deploy a .NET application, your application is compiled into Intermediate Language (IL). When the .NET runtime runs your application it uses a Just-In-Time (JIT) compiler to convert your IL into machine-language instructions which can actually be executed by processor. In contrast, Native AOT performs the IL to machine-language conversion during a dotnet publish. It produces a single binary, targeting a single platform (for example x64 Windows or arm64 Linux), which contains the complete .NET runtime, all the base-class libraries, and your application. To keep the size of this file down, NativeAOT automatically \"trims\" any unused types and members from your application and from the underlying platform.  When choosing between IL+JIT or Native AOT there are a number of trade offs to consider. I won't go into those exhaustively here, and instead will just highlight a few.  Advantages to using the IL+JIT approach include: The JIT can optimise the machine-language generated for the specific capabilities of the processor currently executing, which may mean it can produce faster code than Native AOT would. You're free to use meta-programming approaches such as reflection (e.g. Assembly.LoadFile) and run-time code generation (e.g. System.Reflection.Emit). You can use any .NET library available; they're all designed to be used in this mode. Whereas Native AOT brings other advantages: Native AOT typically allows significantly faster startup times, as there's no need to load all the types, start the JIT compiler, and generate machine code from IL; the app starts executing almost immediately. The size of a Native AOT app is typically much smaller than the overall footprint of a JIT app (runtime + base class libraries + application), as any unused features are trimmed and removed. Runtime memory usage is typically smaller, as the runtime has to do less work (it doesn't need to run the JIT compiler, load types, have debugger support).  Michal Strehovsky gave a great Deep dive on Native AOT talk at .NET Conf 2024; if you're interested in Native AOT I strongly suggest taking a look at it!  The big downside to using Native AOT publishing is that the compiler needs to be able to statically understand which types in your application are actually going to be used. That is particularly difficult for functionality that leans heavily on reflection. And guess what, serialization and deserialization typically does just that. Source generation to the rescue! Reflection is often problematic for Native AOT, as it can quickly become difficult for the compiler to know which types are actually being used. For example, the following code would (potentially) work fine when you're running with a JIT: Console.WriteLine(\"Enter a type to load\");\nstring typeToLoad = Console.ReadLine();\nType? type = Type.GetType(typeToLoad); // dynamically load the type\nConsole.WriteLine($\"Loaded type {type}\");\n There's clearly no way for the compiler to know ahead of time what type will be requested, so there's pretty much no way Native AOT is going to work with this sort of pattern.  This example is obviously very contrived, but it's actually similar to how some plugin systems work in practice!  In other scenarios we use reflection primarily because it was historically the only tool available to us. This is often the case for serialization and deserialization. Serializers commonly use reflection to inspect the properties of objects so they can be created from a given document, whether that's XML, JSON, or YAML. However, with the introduction of source generators, we now have another tool. Instead of inspecting types at runtime to generate the mapping code from documents-to-types, source generators allow us to move that work to compile time. This can give performance improvements (as there's less work to do at runtime), but more importantly (for this case) it also means our code is statically analyzable, and can potentially support Native AOT.  I've written a lot about source generators: I have a series on creating an incremental source generator here and have described some of the source generators I've created here and here.  It's important to be aware that using source generation for serialization typically requires making code changes. For example, using source generation with System.Text.Json (the built-in JSON serializer) requires Creating a JsonSerializerContract. Applying [JsonSerializable] with the types to generate. Explicitly calling serialization method overloads that use the JsonSerializerContract. string json = \n    \"\"\"\n    {\n      \"Date\": \"2019-08-01T00:00:00\",\n      \"TemperatureCelsius\": 25,\n      \"Summary\": \"Hot\"\n    }\n    \"\"\";\n\nvar weatherForecast = JsonSerializer.Deserialize<WeatherForecast>(\n    json,\n    SourceGenerationContext.Default.WeatherForecast); // Explicitly use the context\n\n// The data type\npublic class WeatherForecast\n{\n    public DateTime Date { get; set; }\n    public int TemperatureCelsius { get; set; }\n    public string? Summary { get; set; }\n}\n\n// The context - the body of this type is source generated\n[JsonSerializable(typeof(WeatherForecast))]\ninternal partial class SourceGenerationContext : JsonSerializerContext\n{\n}\n Source generation in System.Text.Json has got progressively better over recent releases, so that many of the gaps and issues that were once there have been resolved. However, I wasn't aware until recently that YamlDotNet has a similar source generator for serializing YAML. Using source generation with YamlDotNet I was recently working on a project that I wanted to publish using NativeAOT. It involved reading some Markdown files using Markdig, reading the YAML frontmatter, and parsing the YAML. Initially, I thought I might have a problem. There's no real mention of Native AOT or source generation that I could see in the YamlDotNet Wiki. However this issue requesting support for Native AOT was marked complete and there was a sample called YamlDotNet.Core7AoTCompileTest, and sure enough, it was possible! To use the YamlDotNet source generation in your project, you need to do 4 things: Add a reference to Vecc.YamlDotNet.Analyzers.StaticGenerator. Create a class derived from YamlDotNet.Serialization.StaticContext. Annotate this class with the types you wish to use with source generation. Use the StaticDeserializerBuilder instead of DeserializerBuilder to build your IDeserializer I'll walk through each of those steps in the following sections. 1. Add a reference to Vecc.YamlDotNet.Analyzers.StaticGenerator The first step, adding a reference to Vecc.YamlDotNet.Analyzers.StaticGenerator is a somewhat odd one - I get the impression that this is just a temporary measure by the current maintainer, but it's a required step right now. The NuGet is published by the current maintainer of YamlDotNet, and the version numbers match with the YamlDotNet releases. Add both this package and YamlDotNet to your project: dotnet add package Vecc.YamlDotNet.Analyzers.StaticGenerator\ndotnet add package YamlDotNet\n 2. Create a YamlDotNet.Serialization.StaticContext type Next, create a class that derives from YamlDotNet.Serialization.StaticContext, and add the [YamlStaticContext] attribute to it. For example: using YamlDotNet.Serialization;\n\n[YamlStaticContext]\npublic partial class YamlStaticContext : YamlDotNet.Serialization.StaticContext\n{\n}\n This type is equivalent to the JsonSerializerContext used by System.Text.Json, and serves as the \"target\" of the source generator. 3. Add [YamlSerializable] attributes for each type to serialize For each type that you want to serialize or deserialize, decorate your StaticContext class with a [YamlSerializable] attribute. For example: using YamlDotNet.Serialization;\n\n[YamlStaticContext]\n[YamlSerializable(typeof(WeatherForecast))] // Generate for WeatherForecast type\npublic partial class YamlStaticContext : YamlDotNet.Serialization.StaticContext\n{\n}\n This makes the type available for source generation.  Note that you must add [YamlSerializable] for all the non-built-in types that you wish to serialize, whether they're \"top-level\" types, or just referenced by other properties.  If you check the generated code, you can see exactly what YamlDotNet is doing. I'm not going to reproduce it all here, but there's a few interesting points to note: By default, when you register a type T using [YamlSerializable], YamlDotNet will also recognise T[], IEnumerable<T>, List<T>, and Dictionary<string, T>. The source generator implements an IObjectAccessor for the type. On that latter point, the accessor looks something like this: class DemoApp_WeatherForecast_379090c0bf12475d92847d8798d5c88f : YamlDotNet.Serialization.IObjectAccessor\n{\n    public void Set(string propertyName, object target, object value)\n    {\n        var v = (DemoApp.WeatherForecast)target;\n        switch (propertyName)\n        {\n            case \"Date\": v.Date = (System.DateTime)value; return;\n            case \"TemperatureCelsius\": v.TemperatureCelsius = (System.Int32)value; return;\n            case \"Summary\": v.Summary = (System.String)value; return;\n            default: throw new ArgumentOutOfRangeException(\"propertyName\", $\"{propertyName} does not exist or is not settable\");\n        }\n    }\n    public object Read(string propertyName, object target)\n    {\n        var v = (DemoApp.WeatherForecast)target;\n        switch (propertyName)\n        {\n            case \"Date\": return v.Date;\n            case \"TemperatureCelsius\": return v.TemperatureCelsius;\n            case \"Summary\": return v.Summary;\n        }\n        return null;\n    }\n}\n Of course, you don't need to worry about any of that. But if you do need to peek behind the curtains, you can often more easily see what's going on when the code is source generated like this!. We're nearly finished, there's just one more change we need for our app to support the generated definitions. 4. Use the StaticDeserializerBuilder The final step is to find where you're currently creating an IDeserializer using a DeserializerBuilder. Replace the DeserializerBuilder with StaticDeserializerBuilder and pass in an instance of your StaticContext. For example: // Replace this ...\n// IDeserializer deserializer = new DeserializerBuilder()\n\n// With this:\n//                              👇 Static builder         👇 Your StaticContext type\nIDeserializer deserializer = new StaticDeserializerBuilder(new YamlStaticContext())\n    .WithNamingConvention(UnderscoredNamingConvention.Instance)\n    .Build();\n\nWeatherForecast p = deserializer.Deserialize<WeatherForecast>(yaml);\n You can still customize your conventions as before, but now when you call Deserialize<T> YamlDotNet uses your StaticContext and generated IObjectAccessors to deserialize the YAML into your strongly typed object. Serializing works in much the same way: // Use the StaticSerializerBuilder and pass in your custom StaticContext\nISerializer serializer = new StaticSerializerBuilder(new YamlStaticContext())\n    .EnsureRoundtrip()\n    .Build();\n\nvar forecast = new WeatherForecast\n{\n    Date = DateTime.UtcNow,\n    Summary = \"Sunny\",\n    TemperatureCelsius = 23,\n};\n\n// Serialize the object as normal\nstring json = serializer.Serialize(forecast);\n And that's it. You now have NativeAOT compatible YAML serialization and deserialization, all thanks to the good work of the YamlDotNet maintainers! Summary In this post I showed how you can use the YamlDotNet library to deserialize YAML into a strongly typed object. I then discussed some of the pros and cons of Native AOT, and how source generation can help work around the lack of reflection in Native AOT. Finally, I showed how to enable a source generator for YamlDotNet so that you can make your YAML serialization and deserialization Native AOT-friendly."
  },
  {
    "itemId": "https://andrewlock.net/understanding-security-headers-part-3-cross-origin-embedder-policy/",
    "raw": "<img src=\"https://andrewlock.net/content/images/2024/coep_banner.png\" /><nav><p>This is the three post in the series: <a href=\"/series/understanding-cross-origin-security-headers/\">Understanding cross-origin security headers</a>. </p> <ol class=\"list-none\"><li><a href=\"/understanding-security-headers-part-1-cross-origin-opener-policy-preventing-attacks-from-popups/\">Part 1 - Cross-Origin-Opener-Policy: preventing attacks from popups</a></li><li><a href=\"/understanding-security-headers-part-2-cross-origin-resource-policy-preventing-hotlinking/\">Part 2 - Cross-Origin-Resource-Policy: preventing hotlinking and XSSI attacks</a></li><li>Part 3 - Cross-Origin-Embedder-Policy: securing embedded resources (this post) </li></ol></nav><p>In this post I discuss the <code>Cross-Origin-Embedder-Policy</code> (COEP) header. I describe why you need it, how it protects your site, and how it unlocks additional features as part of the cross-origin isolation requirements. Along the way I describe the difference between <code>cors</code> and <code>no-cors</code> requests when embedding resources in your site, and how the COEP header interacts with the <code>Cross-Origin-Resource-Policy</code> (CORP) header and cross-origin resource sharing (CORS) features.</p> <ul><li><a href=\"#isolating-your-site-with-cross-origin-embedder-policy\">Isolating your site with <code>Cross-Origin-Embedder-Policy</code></a></li> <li><a href=\"#understanding-the-relationship-between-coep-corp-and-cors\">Understanding the relationship between COEP, CORP, and CORS</a></li> <li><a href=\"#accessing-sharedarraybuffer-by-enabling-cross-origin-isolation\">Accessing <code>SharedArrayBuffer</code> by enabling cross-origin isolation</a></li> <li><a href=\"#easier-isolation-with-credentialless\">Easier isolation with <code>credentialless</code></a></li> <li><a href=\"#rolling-out-cross-origin-embedder-policy-safely-with-reporting\">Rolling-out <code>Cross-Origin-Embedder-Policy</code> safely with reporting</a></li></ul> <h2 id=\"isolating-your-site-with-cross-origin-embedder-policy\" class=\"heading-with-anchor\"><a href=\"#isolating-your-site-with-cross-origin-embedder-policy\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Isolating your site with <code>Cross-Origin-Embedder-Policy</code></a></h2> <p>In my previous post on the <code>Cross-Origin-Resource-Policy</code> (CORP) I explained that <a href=\"https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy\">the same-origin policy</a> doesn't apply to most cases where the requests are made by <em>embedding</em> links in a document. For example browsers will allow cross-origin requests by default for</p> <ul><li>Images linked in <code>&lt;img&gt;</code> elements.</li> <li>Media linked in <code>&lt;video&gt;</code> and <code>&lt;audio&gt;</code> elements.</li> <li>JavaScript files referenced in <code>&lt;script src=\"…\"&gt;&lt;/script&gt;</code>.</li> <li>CSS files referenced in <code>&lt;link rel=\"stylesheet\" href=\"…\"&gt;</code> (as long as the stylesheet has the correct MIME type).</li></ul> <p>Malicious sites can use this fact to exploit a class of vulnerabilities termed <a href=\"https://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/11-Client_Side_Testing/13-Testing_for_Cross_Site_Script_Inclusion\">Cross Site Script Inclusion (XSSI)</a>. XSSI attacks embedded a resource from your site inside an attacker's site, which can then leak sensitive data from your site to the attacker. That's on top of <a href=\"https://spectreattack.com/\">speculative side-channel attacks like Spectre</a> which rely on cross-origin access.</p> <p>The <code>Cross-Origin-Resource-Policy</code> header protects you in this scenario, as it prevents your resources from being loaded by the attacker website unless you <em>explicitly</em> declare that it's safe to do so.</p> <p>What's more, cross-origin requests like these even include cookies. That means if an attacker manages to force you to embed an <code>&lt;img&gt;</code> to a third-party site (for example), they can make <em>credentialled</em> requests to that site.</p> <p>While CORP protects you from being embedded, the <code>Cross-Origin-Embedder-Policy</code> (COEP) protects your site as the embedder. By adding this header you can declare that your site should <em>only</em> load resources that have <em>explicitly</em> opted-in to being loaded across origins.</p> <p><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cross-Origin-Embedder-Policy\">The <code>Cross-Origin-Embedder-Policy</code> header</a> can be set to one of three values:</p> <ul><li><code>unsafe-none</code>—the default value, doesn't add any additional protections.</li> <li><code>require-corp</code>—the strictest value, requires that all cross-origin requests <em>either</em> include a <code>Cross-Origin-Resource-Policy</code> header (for <code>no-cors</code> requests) <em>or</em> a relevant <code>Access-Control-Allow-Origin</code> (ACAO) (for <code>cors</code> requests). More on that later!</li> <li><code>credentialless</code>—a half-way value, <code>no-cors</code> cross-origin requests are sent without cookies and no cookies are saved from the response, but there are no requirements for CORP or ACAO headers.</li></ul> <p>If you're anything like me, then you should be thoroughly confused😅 I've seen the following image (from <a href=\"https://web.dev/articles/why-coop-coep\">https://web.dev/articles/why-coop-coep</a>) used to try to explain COEP, and maybe it will resonate:</p> <p><img src=\"/content/images/2024/how-coep-works.png\" alt=\"How COEP works, taken from https://web.dev/articles/why-coop-coep\"></p> <p>Unfortunately, I think the image is overly simplistic, and assumes a lot of understanding of how Cross Origin Resource Sharing (CORS) and same-origin policy work. In the next section I'll try to be more explicit about the relationship between COEP, CORP, and CORS.</p> <h2 id=\"understanding-the-relationship-between-coep-corp-and-cors\" class=\"heading-with-anchor\"><a href=\"#understanding-the-relationship-between-coep-corp-and-cors\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Understanding the relationship between COEP, CORP, and CORS</a></h2> <p>The first thing to understand is the difference between <code>cors</code> and <code>no-cors</code> requests. Cross-origin <code>no-cors</code> requests are typically <em>allowed</em> without issue. The examples I described previously, such as links in an <code>&lt;img&gt;</code> element are <code>no-cors</code> requests:</p> <pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://some-other-comain.com/photo.jpg<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n</code></pre> <p>If you read my previous post on <a href=\"/understanding-security-headers-part-2-cross-origin-resource-policy-preventing-hotlinking/\">the <code>Cross-Origin-Resource-Policy</code> (CORP) header</a>, you may remember that CORP adds extra protection to resources fetched using <code>no-cors</code> requests, by enforcing that only <code>same-origin</code> or <code>same-site</code> resources can be accessed by a document.</p> <p>In contrast, if you're making cross-origin requests using the <code>fetch()</code> API, these will typically be <code>cors</code> requests. These require that the server opts-in to cross-origin access by returning the <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Access-Control-Allow-Origin\"><code>Access-Control-Allow-Origin</code> header</a> with an appropriate value. Returning the <code>Access-Control-Allow-Origin</code> header opts the site in to cross origin resource sharing (CORS).</p> <blockquote> <p>There are additional pre-flight requirements for \"complex\" HTTP calls that are anything other than a simple <code>GET</code> or form <code>POST</code>, plus additional requirements if you want to send cookies. I'm not going to go into more details on CORS here; <a href=\"/making-authenticated-cross-origin-requests-with-aspnetcore-identity/\">I've discussed CORS in the past</a> and there's plenty of resources around if you want to learn more!</p> </blockquote> <p>You can also turn a <code>no-cors</code> embedded request into a <code>cors</code> request by adding the <code>crossorigin</code> attribute, for example:</p> <pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://some-other-comain.com/photo.jpg<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">crossorigin</span><span class=\"token punctuation\">/&gt;</span></span>\n</code></pre> <p>The <code>Cross-Origin-Embedder-Policy</code> header ties everything all together. If you set the COEP value to <code>require-corp</code>, then</p> <ul><li><code>no-cors</code> requests <em>must</em> return a <code>Cross-Origin-Resource-Policy</code> header value, and it must indicate that the resource is allowed to be accessed. Based on the CORP header value: <ul><li>If the CORP header is <code>same-origin</code> then the embedded resource can only be loaded if it has the same origin as the COEP document.</li> <li>If the CORP header is <code>same-site</code> then the embedded resource can only be loaded if it has the same <em>site</em> as the COEP document, i.e. it has the same domain (<code>andrewlock.net</code>) and scheme (<code>http</code> or <code>https</code>).</li> <li>If the CORP header is <code>cross-origin</code> then the embedded resource can be loaded in any embedded document.</li></ul> </li> <li><code>cors</code> requests <em>must</em> return an <code>Access-Control-Allow-Origin</code> header (i.e. a CORS header) value that indicates the resource may be accessed.</li></ul> <p>We can alternatively visualize the various paths here as a flow chart:</p> <p><img src=\"/content/images/2024/coep_flow.svg\" alt=\"A flow chart of CORS vs CORP for COEP: require-corp\"></p> <p>An important thing to understand is that returning an <code>Access-Control-Allow-Origin</code> CORS header when the request is a <code>no-cors</code> request is <em>not</em> sufficient to satisfy a COEP header of <code>require-corp</code>. Similarly, a <code>cors</code> request with a CORP header will <em>not</em> satisfy the embedded policy.</p> <p>If we consider <em>just</em> the <code>no-cors</code> case for now, then the following image from <a href=\"https://developer.chrome.com/blog/coep-credentialless-origin-trial\">the chrome developer blog</a> demonstrates that with an embedder policy of <code>require-corp</code>, only responses that include a CORP header value of <code>cross-origin</code> will be allowed through:</p> <p><img src=\"/content/images/2024/coep_no_cors.png\" alt=\"image from https://developer.chrome.com/blog/coep-credentialless-origin-trial\"></p> <p>There's a lot of moving pieces here, so you might well be wondering: why bother?</p> <h2 id=\"accessing-sharedarraybuffer-by-enabling-cross-origin-isolation\" class=\"heading-with-anchor\"><a href=\"#accessing-sharedarraybuffer-by-enabling-cross-origin-isolation\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Accessing <code>SharedArrayBuffer</code> by enabling cross-origin isolation</a></h2> <p>I motivated our initial discussion of the CORP and COEP headers by talking about XSSI attacks, as well as <a href=\"https://spectreattack.com/\">speculative side-channel attacks like Spectre</a>, which rely on cross-origin access. But a concrete reason you may <em>have</em> to consider these headers is if you want to use certain features like <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer\"><code>SharedArrayBuffer</code></a>, <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Performance/measureUserAgentSpecificMemory\"><code>performance.measureUserAgentSpecificMemory()</code></a> or <a href=\"https://developer.chrome.com/blog/cross-origin-isolated-hr-timers\">high-precision timers with better resolution</a>.</p> <p>These features are <em>only</em> available when your site is deemed to be in an \"isolated\" state from other origins, to ensure it's not open to side-channel attacks. To enable cross-origin isolation, you must set two response headers:</p> <pre class=\"language-http\"><code class=\"language-http\"><span class=\"token header\"><span class=\"token header-name keyword\">Cross-Origin-Embedder-Policy</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">require-corp</span></span>\n<span class=\"token header\"><span class=\"token header-name keyword\">Cross-Origin-Opener-Policy</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">same-origin</span></span>\n</code></pre> <p>In this state, cross-origin isolation is enabled, and you can use features like <code>SharedArrayBuffer</code>. You can check whether your site is correctly isolated by checking the <code>window.crossOriginIsolated</code> property:</p> <pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> myWorker <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Worker</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"worker.js\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">.</span>crossOriginIsolated<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// site is isolated, so can use SharedArrayBuffer</span>\n  <span class=\"token keyword\">const</span> buffer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SharedArrayBuffer</span><span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  myWorker<span class=\"token punctuation\">.</span><span class=\"token function\">postMessage</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// site is not isolated, cannot use SharedArrayBuffer</span>\n  <span class=\"token keyword\">const</span> buffer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayBuffer</span><span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  myWorker<span class=\"token punctuation\">.</span><span class=\"token function\">postMessage</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>Even if you don't want to use any of these capabilities, enabling cross-origin isolation is a good choice for security. The only difficulty is that it can be hard to achieve in practice!</p> <h2 id=\"easier-isolation-with-credentialless\" class=\"heading-with-anchor\"><a href=\"#easier-isolation-with-credentialless\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Easier isolation with <code>credentialless</code></a></h2> <p>When <code>Cross-Origin-Embedder-Policy</code> was originally defined there were only two possible values:</p> <ul><li><code>unsafe-none</code></li> <li><code>require-corp</code></li></ul> <p>However using <code>require-corp</code> is very restrictive. <a href=\"https://web.dev/articles/coop-coep#2_ensure_resources_have_corp_or_cors_enabled\">This article</a> describes the multi-step process for preparing your site to enable COEP. The big problem is that before you can enable COEP on your site, you need to update the response headers for all the embedded resources your site loads. That's fine if <em>you</em> control how those resources are delivered, but it's particularly problematic <em>as you might not control cross-origin resources</em>!</p> <p>The suggested approach for preparing for <code>require-corp</code> is:</p> <ol><li>If <strong>you</strong> control the resource, add a <code>Cross-Origin-Resource-Policy</code> header set to <code>same-origin</code>, <code>same-site</code>, or <code>cross-origin</code> header, depending on your requirements</li> <li>If you <strong>don't</strong> control the resource <ul><li>If the resource is sent with <code>cross-origin</code> CORP header, you're OK.</li> <li>If the resource is not sent with a CORP header, try making a <code>cors</code> request (instead of <code>no-cors</code>) by adding the <code>cross-origin</code> attribute (<a href=\"#understanding-the-relationship-between-coep-corp-and-cors\">as described previously</a>) <ul><li>If the resource is CORS enabled (using <code>Access-Control-Allow-Origin</code>) then you're OK.</li> <li>If not…there's nothing you can do 😢</li></ul> </li></ul> </li></ol> <p>If you end up at the final bullet point, you're completely stuck. There's no way for you to safely enable <code>require-corp</code> on your site unless <em>someone else</em> enabled CORP or CORS for the resource you're embedding.</p> <p>To work around this fundamental problem, <a href=\"https://developer.chrome.com/blog/coep-credentialless-origin-trial\">the <code>Cross-Origin-Embedder-Policy: credentialless</code> value</a> was added. When you use <code>credentialless</code> you get the best of both worlds:</p> <ul><li>Your site is still considered \"cross-origin isolated\", so you can use the additional features like <code>SharedArrayBuffer</code></li> <li><code>no-cors</code> requests <em>don't</em> need to have a <code>Cross-Origin-Resource-Policy</code> to be embedded in your site.</li></ul> <p>Based on that description you would be right to be a little confused: how does <code>credentialless</code> provide any protection?</p> <p>The difference is that when you use <code>credentialless</code>, <code>no-cors</code> requests are sent <em>without</em> any credentials (i.e. cookies in most cases), and any cookies in the response are discarded. By definition, that means the resources you're embedding are available in \"public\", and so should be <em>safe</em> to embed. There's no risk of attackers being able to make the canonical \"request to your bank\" attack, because no credentials will be included!</p> <p>If the embedded resource <em>does</em> return a <code>Cross-Origin-Resource-Policy</code> header, it will still be honoured, but if you use <code>credentialless</code>, then you will no longer be blocked from embedding a resource that <em>doesn't</em> add the CORP header. Compare the following image (from <a href=\"https://developer.chrome.com/blog/coep-credentialless-origin-trial#credentialless_to_the_rescue\">the Chrome developer blog</a>), to the <code>require-corp</code> version I saw previously, and you'll see that the \"nothing\" case is now unblocked!</p> <p><img src=\"/content/images/2024/coep_credentialless.png\" alt=\"image from https://developer.chrome.com/blog/coep-credentialless-origin-trial\"></p> <p>If you compare the following <code>credentialless</code> flow chart to the previous <code>require-corp</code> version, you can see that it's only the <code>no-cors</code> \"CORP missing\" case that has changed:</p> <p><img src=\"/content/images/2024/coep_flow_credentialless.svg\" alt=\"A flow chart of CORS vs CORP for COEP: require-corp\"></p> <p>The <code>credentialless</code> header means you no longer need to ask third-parties to add CORP or CORS headers just so that <em>you</em> can enable COEP, which <em>should</em> make it easier to roll out. The <code>credentialless</code> option has been available for a couple of years now, and has pretty good support, but unfortunately <a href=\"https://caniuse.com/mdn-http_headers_cross-origin-embedder-policy_credentialless\">no support on Safari</a> means that it's not a complete solution😢.</p> <h2 id=\"rolling-out-cross-origin-embedder-policy-safely-with-reporting\" class=\"heading-with-anchor\"><a href=\"#rolling-out-cross-origin-embedder-policy-safely-with-reporting\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Rolling-out <code>Cross-Origin-Embedder-Policy</code> safely with reporting</a></h2> <p>Even with <code>credentialless</code>, rolling out support for COEP is a <em>potentially</em> dangerous affair. Consequently, it's strongly recommended that you use the <a href=\"https://web.dev/reporting-api\">Reporting API</a> built into browsers to identify any issues.</p> <p>You should also consider running the <code>Cross-Origin-Embedder-Policy</code> header in \"report only\" mode, by using the <code>Cross-Origin-Embedder-Policy-Report-Only</code> header instead. This header \"simulates\" the provided policy, whether it's <code>require-corp</code> or <code>credentialless</code>, and reports violations using the Reporting API.</p> <p>By using this staged approach you can identify and fix any potential cross-origin issues <em>before</em> you start enforcing the embedder policy on your site for real.</p> <h2 id=\"summary\" class=\"heading-with-anchor\"><a href=\"#summary\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Summary</a></h2> <p>In this post I described the <code>Cross-Origin-Embedder-Policy</code> header. I explained that it adds additional requirements to <code>no-cors</code> requests that your site makes, such as for the links used in <code>&lt;img&gt;</code> tags. I explained how it interacts with the <code>Cross-Origin-Resource-Policy</code> and CORS headers depending on the request being made, and how you can use the <code>credentialless</code> option to make it easier to deploy the COEP header to your site.</p> ",
    "sanitized": "This is the three post in the series: Understanding cross-origin security headers.  Part 1 - Cross-Origin-Opener-Policy: preventing attacks from popupsPart 2 - Cross-Origin-Resource-Policy: preventing hotlinking and XSSI attacksPart 3 - Cross-Origin-Embedder-Policy: securing embedded resources (this post) In this post I discuss the Cross-Origin-Embedder-Policy (COEP) header. I describe why you need it, how it protects your site, and how it unlocks additional features as part of the cross-origin isolation requirements. Along the way I describe the difference between cors and no-cors requests when embedding resources in your site, and how the COEP header interacts with the Cross-Origin-Resource-Policy (CORP) header and cross-origin resource sharing (CORS) features. Isolating your site with Cross-Origin-Embedder-Policy Understanding the relationship between COEP, CORP, and CORS Accessing SharedArrayBuffer by enabling cross-origin isolation Easier isolation with credentialless Rolling-out Cross-Origin-Embedder-Policy safely with reporting Isolating your site with Cross-Origin-Embedder-Policy In my previous post on the Cross-Origin-Resource-Policy (CORP) I explained that the same-origin policy doesn't apply to most cases where the requests are made by embedding links in a document. For example browsers will allow cross-origin requests by default for Images linked in <img> elements. Media linked in <video> and <audio> elements. JavaScript files referenced in <script src=\"…\"></script>. CSS files referenced in <link rel=\"stylesheet\" href=\"…\"> (as long as the stylesheet has the correct MIME type). Malicious sites can use this fact to exploit a class of vulnerabilities termed Cross Site Script Inclusion (XSSI). XSSI attacks embedded a resource from your site inside an attacker's site, which can then leak sensitive data from your site to the attacker. That's on top of speculative side-channel attacks like Spectre which rely on cross-origin access. The Cross-Origin-Resource-Policy header protects you in this scenario, as it prevents your resources from being loaded by the attacker website unless you explicitly declare that it's safe to do so. What's more, cross-origin requests like these even include cookies. That means if an attacker manages to force you to embed an <img> to a third-party site (for example), they can make credentialled requests to that site. While CORP protects you from being embedded, the Cross-Origin-Embedder-Policy (COEP) protects your site as the embedder. By adding this header you can declare that your site should only load resources that have explicitly opted-in to being loaded across origins. The Cross-Origin-Embedder-Policy header can be set to one of three values: unsafe-none—the default value, doesn't add any additional protections. require-corp—the strictest value, requires that all cross-origin requests either include a Cross-Origin-Resource-Policy header (for no-cors requests) or a relevant Access-Control-Allow-Origin (ACAO) (for cors requests). More on that later! credentialless—a half-way value, no-cors cross-origin requests are sent without cookies and no cookies are saved from the response, but there are no requirements for CORP or ACAO headers. If you're anything like me, then you should be thoroughly confused😅 I've seen the following image (from https://web.dev/articles/why-coop-coep) used to try to explain COEP, and maybe it will resonate:  Unfortunately, I think the image is overly simplistic, and assumes a lot of understanding of how Cross Origin Resource Sharing (CORS) and same-origin policy work. In the next section I'll try to be more explicit about the relationship between COEP, CORP, and CORS. Understanding the relationship between COEP, CORP, and CORS The first thing to understand is the difference between cors and no-cors requests. Cross-origin no-cors requests are typically allowed without issue. The examples I described previously, such as links in an <img> element are no-cors requests: <img src=\"https://some-other-comain.com/photo.jpg\" />\n If you read my previous post on the Cross-Origin-Resource-Policy (CORP) header, you may remember that CORP adds extra protection to resources fetched using no-cors requests, by enforcing that only same-origin or same-site resources can be accessed by a document. In contrast, if you're making cross-origin requests using the fetch() API, these will typically be cors requests. These require that the server opts-in to cross-origin access by returning the Access-Control-Allow-Origin header with an appropriate value. Returning the Access-Control-Allow-Origin header opts the site in to cross origin resource sharing (CORS).  There are additional pre-flight requirements for \"complex\" HTTP calls that are anything other than a simple GET or form POST, plus additional requirements if you want to send cookies. I'm not going to go into more details on CORS here; I've discussed CORS in the past and there's plenty of resources around if you want to learn more!  You can also turn a no-cors embedded request into a cors request by adding the crossorigin attribute, for example: <img src=\"https://some-other-comain.com/photo.jpg\" crossorigin/>\n The Cross-Origin-Embedder-Policy header ties everything all together. If you set the COEP value to require-corp, then no-cors requests must return a Cross-Origin-Resource-Policy header value, and it must indicate that the resource is allowed to be accessed. Based on the CORP header value: If the CORP header is same-origin then the embedded resource can only be loaded if it has the same origin as the COEP document. If the CORP header is same-site then the embedded resource can only be loaded if it has the same site as the COEP document, i.e. it has the same domain (andrewlock.net) and scheme (http or https). If the CORP header is cross-origin then the embedded resource can be loaded in any embedded document.  cors requests must return an Access-Control-Allow-Origin header (i.e. a CORS header) value that indicates the resource may be accessed. We can alternatively visualize the various paths here as a flow chart:  An important thing to understand is that returning an Access-Control-Allow-Origin CORS header when the request is a no-cors request is not sufficient to satisfy a COEP header of require-corp. Similarly, a cors request with a CORP header will not satisfy the embedded policy. If we consider just the no-cors case for now, then the following image from the chrome developer blog demonstrates that with an embedder policy of require-corp, only responses that include a CORP header value of cross-origin will be allowed through:  There's a lot of moving pieces here, so you might well be wondering: why bother? Accessing SharedArrayBuffer by enabling cross-origin isolation I motivated our initial discussion of the CORP and COEP headers by talking about XSSI attacks, as well as speculative side-channel attacks like Spectre, which rely on cross-origin access. But a concrete reason you may have to consider these headers is if you want to use certain features like SharedArrayBuffer, performance.measureUserAgentSpecificMemory() or high-precision timers with better resolution. These features are only available when your site is deemed to be in an \"isolated\" state from other origins, to ensure it's not open to side-channel attacks. To enable cross-origin isolation, you must set two response headers: Cross-Origin-Embedder-Policy: require-corp\nCross-Origin-Opener-Policy: same-origin\n In this state, cross-origin isolation is enabled, and you can use features like SharedArrayBuffer. You can check whether your site is correctly isolated by checking the window.crossOriginIsolated property: const myWorker = new Worker(\"worker.js\");\n\nif (window.crossOriginIsolated) {\n  // site is isolated, so can use SharedArrayBuffer\n  const buffer = new SharedArrayBuffer(16);\n  myWorker.postMessage(buffer);\n} else {\n  // site is not isolated, cannot use SharedArrayBuffer\n  const buffer = new ArrayBuffer(16);\n  myWorker.postMessage(buffer);\n}\n Even if you don't want to use any of these capabilities, enabling cross-origin isolation is a good choice for security. The only difficulty is that it can be hard to achieve in practice! Easier isolation with credentialless When Cross-Origin-Embedder-Policy was originally defined there were only two possible values: unsafe-none require-corp However using require-corp is very restrictive. This article describes the multi-step process for preparing your site to enable COEP. The big problem is that before you can enable COEP on your site, you need to update the response headers for all the embedded resources your site loads. That's fine if you control how those resources are delivered, but it's particularly problematic as you might not control cross-origin resources! The suggested approach for preparing for require-corp is: If you control the resource, add a Cross-Origin-Resource-Policy header set to same-origin, same-site, or cross-origin header, depending on your requirements If you don't control the resource If the resource is sent with cross-origin CORP header, you're OK. If the resource is not sent with a CORP header, try making a cors request (instead of no-cors) by adding the cross-origin attribute (as described previously) If the resource is CORS enabled (using Access-Control-Allow-Origin) then you're OK. If not…there's nothing you can do 😢   If you end up at the final bullet point, you're completely stuck. There's no way for you to safely enable require-corp on your site unless someone else enabled CORP or CORS for the resource you're embedding. To work around this fundamental problem, the Cross-Origin-Embedder-Policy: credentialless value was added. When you use credentialless you get the best of both worlds: Your site is still considered \"cross-origin isolated\", so you can use the additional features like SharedArrayBuffer no-cors requests don't need to have a Cross-Origin-Resource-Policy to be embedded in your site. Based on that description you would be right to be a little confused: how does credentialless provide any protection? The difference is that when you use credentialless, no-cors requests are sent without any credentials (i.e. cookies in most cases), and any cookies in the response are discarded. By definition, that means the resources you're embedding are available in \"public\", and so should be safe to embed. There's no risk of attackers being able to make the canonical \"request to your bank\" attack, because no credentials will be included! If the embedded resource does return a Cross-Origin-Resource-Policy header, it will still be honoured, but if you use credentialless, then you will no longer be blocked from embedding a resource that doesn't add the CORP header. Compare the following image (from the Chrome developer blog), to the require-corp version I saw previously, and you'll see that the \"nothing\" case is now unblocked!  If you compare the following credentialless flow chart to the previous require-corp version, you can see that it's only the no-cors \"CORP missing\" case that has changed:  The credentialless header means you no longer need to ask third-parties to add CORP or CORS headers just so that you can enable COEP, which should make it easier to roll out. The credentialless option has been available for a couple of years now, and has pretty good support, but unfortunately no support on Safari means that it's not a complete solution😢. Rolling-out Cross-Origin-Embedder-Policy safely with reporting Even with credentialless, rolling out support for COEP is a potentially dangerous affair. Consequently, it's strongly recommended that you use the Reporting API built into browsers to identify any issues. You should also consider running the Cross-Origin-Embedder-Policy header in \"report only\" mode, by using the Cross-Origin-Embedder-Policy-Report-Only header instead. This header \"simulates\" the provided policy, whether it's require-corp or credentialless, and reports violations using the Reporting API. By using this staged approach you can identify and fix any potential cross-origin issues before you start enforcing the embedder policy on your site for real. Summary In this post I described the Cross-Origin-Embedder-Policy header. I explained that it adds additional requirements to no-cors requests that your site makes, such as for the links used in <img> tags. I explained how it interacts with the Cross-Origin-Resource-Policy and CORS headers depending on the request being made, and how you can use the credentialless option to make it easier to deploy the COEP header to your site."
  },
  {
    "itemId": "https://andrewlock.net/understanding-security-headers-part-2-cross-origin-resource-policy-preventing-hotlinking/",
    "raw": "<img src=\"https://andrewlock.net/content/images/2024/corp_banner.png\" /><nav><p>This is the two post in the series: <a href=\"/series/understanding-cross-origin-security-headers/\">Understanding cross-origin security headers</a>. </p> <ol class=\"list-none\"><li><a href=\"/understanding-security-headers-part-1-cross-origin-opener-policy-preventing-attacks-from-popups/\">Part 1 - Cross-Origin-Opener-Policy: preventing attacks from popups</a></li><li>Part 2 - Cross-Origin-Resource-Policy: preventing hotlinking and XSSI attacks (this post) </li><li><a href=\"/understanding-security-headers-part-3-cross-origin-embedder-policy/\">Part 3 - Cross-Origin-Embedder-Policy: securing embedded resources</a></li></ol></nav><p>In this post I describe how some cross-origin resources can be loaded without restriction, despite the same-origin policy. This can open your site up to vulnerabilities that leak sensitive data, as well as enable hotlinking to your resources. I show how the <code>Cross-Origin-Resource-Policy</code> can block these cross-origin requests, how each of the available header values behave, and how the header differs from CORS headers.</p> <ul><li><a href=\"#why-do-we-need-the-cross-origin-resource-policy-header-\">Why do we need the <code>Cross-Origin-Resource-Policy</code> header?</a></li> <li><a href=\"#locking-down-cross-origin-requests-with-cross-origin-resource-policy\">Locking down cross-origin requests with <code>Cross-Origin-Resource-Policy</code></a></li> <li><a href=\"#understanding-the-difference-between-same-origin-and-same-site\">Understanding the difference between same-origin and same-site</a></li> <li><a href=\"#testing-out-cross-origin-resource-policy\">Testing out <code>Cross-Origin-Resource-Policy</code></a></li> <li><a href=\"#corp-vs-cors-why-do-we-need-both-\">CORP vs CORS: why do we need both?</a></li> <li><a href=\"#the-relationship-with-cross-origin-embedder-policy\">The relationship with <code>Cross-Origin-Embedder-Policy</code></a></li></ul> <h2 id=\"why-do-we-need-the-cross-origin-resource-policy-header-\" class=\"heading-with-anchor\"><a href=\"#why-do-we-need-the-cross-origin-resource-policy-header-\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Why do we need the <code>Cross-Origin-Resource-Policy</code> header?</a></h2> <p>One of the first things I thought when first reading about the <code>Cross-Origin-Resource-Policy</code> was: why? We <em>already</em> have <a href=\"https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy\">the same-origin policy</a> that restricts cross-origin network access, right? Why do we need another header?</p> <p>Well, it turns out, that although the same-origin policy <a href=\"/understanding-security-headers-cross-origin-opener-policy-preventing-attacks-from-popups/#same-origin-policy-restrictions\">applies some pretty strict restrictions</a> when it comes to JavaScript APIs and requests using <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window/fetch\"><code>fetch()</code></a>, the restrictions are much looser when it comes to <em>embedded</em> resources.</p> <p>Embedded resources include things like scripts referenced in a <code>&lt;script&gt;</code> element and images linked in an <code>&lt;img&gt;</code> tag. <a href=\"https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy#cross-origin_network_access\">MDN</a> provides a long list of resources which <em>can</em> be accessed cross-origin. In each of these cases, the same-origin policy provides no protection; the browser will happily load them from a cross-origin URL by default. That includes:</p> <ul><li>Images linked in <code>&lt;img&gt;</code> elements.</li> <li>Media linked in <code>&lt;video&gt;</code> and <code>&lt;audio&gt;</code> elements.</li> <li>JavaScript files referenced in <code>&lt;script src=\"…\"&gt;&lt;/script&gt;</code>.</li> <li>CSS files referenced in <code>&lt;link rel=\"stylesheet\" href=\"…\"&gt;</code> (as long as the stylesheet has the correct MIME type).</li></ul> <p>In each of these cases, the same-origin policy doesn't protect you by default on <em>either</em> side. That means if an attacker manages to add an <code>&lt;img&gt;</code> or <code>&lt;script&gt;</code> to your site, they can load links from any origin. The <code>Cross-Origin-Resource-Policy</code> doesn't directly help you in this scenario; you need a <code>Content-Security-Policy</code> or <code>Cross-Origin-Embedder-Policy</code> for that.</p> <p>From the other direction, there's nothing in the same-origin policy to stop people linking to images hosted on <em>your</em> site and displaying them in <em>their</em> site. This is often called <a href=\"https://simple.wikipedia.org/wiki/Hotlinking\">hotlinking</a> and is problematic as it makes it easier to plagiarise content, but also places the egress and server costs on <em>your</em> site, as the host, instead of the embedding site.</p> <p>As well as hotlinking, there's a class of vulnerabilities termed Cross Site Script Inclusion (XSSI), <a href=\"https://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/11-Client_Side_Testing/13-Testing_for_Cross_Site_Script_Inclusion\">in which a script from your site is embedded inside an attackers site</a>, which can leak sensitive data from your site to the attacker. That's on top of <a href=\"https://spectreattack.com/\">speculative side-channel attacks like Spectre</a> which rely on cross-origin access.</p> <p>The <code>Cross-Origin-Resource-Policy</code> header provides a way to protect you from these attacks and vulnerabilities.</p> <h2 id=\"locking-down-cross-origin-requests-with-cross-origin-resource-policy\" class=\"heading-with-anchor\"><a href=\"#locking-down-cross-origin-requests-with-cross-origin-resource-policy\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Locking down cross-origin requests with <code>Cross-Origin-Resource-Policy</code></a></h2> <p>The <code>Cross-Origin-Resource-Policy</code> (CORP) header is a security header you can return in your responses that signals to the browser whether or not the resource is allowed to be embedded in a document.</p> <blockquote> <p>Note that you might be wondering why you need CORP when we already have <code>Cross-Origin-Resource-Sharing</code> (CORS). I go into more detail later, but the short-answer is that CORP only applies to <code>no-cors</code> scenarios i.e. when CORS <em>doesn't</em> apply.</p> </blockquote> <p>There are currently three possible values for the <code>Cross-Origin-Resource-Policy</code> header:</p> <ul><li><code>same-origin</code>—the browser should <strong>reject</strong> cross-origin responses that are returned with a header with this value.</li> <li><code>same-site</code>—the browser should <strong>reject</strong> cross-site responses that are returned with a header with this value. This is less restrictive than <code>same-origin</code>; I describe the difference between same-site and same-origin in the following section.</li> <li><code>cross-origin</code>—the browser should <strong>allow</strong> cross-origin responses. By default, this behaves similarly to when no CORP header is returned, but it also interacts with the <code>Cross-Origin-Embedder-Policy</code> header, as I describe later.</li></ul> <blockquote> <p>Note that <a href=\"https://crbug.com/1074261\">there's a bug in Chrome</a> where setting <code>Cross-Origin-Resource-Policy</code> can break PDF rendering, preventing you being able to read past the first page of some PDFs.</p> </blockquote> <p>I'll walk through some examples of these shortly, but first I'll clarify the difference between <code>same-origin</code> and <code>same-site</code>.</p> <h2 id=\"understanding-the-difference-between-same-origin-and-same-site\" class=\"heading-with-anchor\"><a href=\"#understanding-the-difference-between-same-origin-and-same-site\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Understanding the difference between same-origin and same-site</a></h2> <p>The CORP header can be set to either <code>same-site</code> or <code>same-origin</code>. Site and origin are two similar concepts, but it's important to understand the differences. Two URLs are considered to be \"same-<strong>site</strong>\" if they:</p> <ul><li>Have the same <em>scheme</em> i.e. <code>http</code> or <code>https</code></li> <li>Have the same <em>domain</em> i.e. <code>example.com</code>, <code>andrewlock.net</code> or <code>microsoft.com</code></li></ul> <p>They <em>don't</em> need to have the same <code>port</code> or <code>subdomain</code>.</p> <p>Two URLs are considered to be \"same-<strong>origin</strong>\" if they</p> <ul><li>Have the same <em>scheme</em> i.e. <code>http</code> or <code>https</code></li> <li>Have the same <em>domain</em> i.e. <code>example.com</code>, <code>andrewlock.net</code> or <code>microsoft.com</code></li> <li>Have the same <em>subdomain</em> i.e. <code>www.</code></li> <li>Have the same <em>port</em> (which may be implicit) i.e. port <code>80</code> for <code>http</code> and <code>443</code> for <code>https</code></li></ul> <p>So <code>same-origin</code> is more restrictive than <code>same-site</code>. Note that neither concept cares about the path, querystring, or fragment of the URL.</p> <p>If we use the URL <code>http://www.example.org</code> as an example and compare against variations, you can see the difference more clearly.</p> <table><thead><tr><th>URL</th><th>Description</th><th>same-site</th><th>same-origin</th></tr></thead><tbody><tr><td><code>http://www.example.org</code></td><td>Identical URL</td><td>✅</td><td>✅</td></tr><tr><td><code>http://www.example.org:80</code></td><td>Identical URL (implicit port)</td><td>✅</td><td>✅</td></tr><tr><td><code>http://www.example.org:5000</code></td><td>Different port</td><td>✅</td><td>❌</td></tr><tr><td><code>http://example.org</code></td><td>Different subdomain</td><td>✅</td><td>❌</td></tr><tr><td><code>http://sub.example.org</code></td><td>Different subdomain</td><td>✅</td><td>❌</td></tr><tr><td><code>https://www.example.org</code></td><td>Different scheme</td><td>❌</td><td>❌</td></tr><tr><td><code>http://www.example.evil</code></td><td>Different TLD</td><td>❌</td><td>❌</td></tr></tbody></table> <p>This becomes important when thinking about the <code>Cross-Origin-Resource-Policy</code> header. If you serve resources from a dedicated subdomain, <code>cdn.example.org</code> for example, and you want them to be embedded on <code>example.org</code> or <code>www.example.org</code>, then you will need to make sure the resources are returned with a <code>same-site</code> value. If, however, you only embed resources from the exact same origin, then using <code>same-origin</code> provides greater security.</p> <h2 id=\"testing-out-cross-origin-resource-policy\" class=\"heading-with-anchor\"><a href=\"#testing-out-cross-origin-resource-policy\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Testing out <code>Cross-Origin-Resource-Policy</code></a></h2> <p>I've described the various possible values for <code>Cross-Origin-Resource-Policy</code>, but I find it helps to see the header in action.</p> <p>To test out the different policy values, I created two ASP.NET Core apps, and used my <a href=\"/major-updates-to-netescapades-aspnetcore-security-headers/#adding-security-headers-to-your-app\"><em>NetEscapades.AspNetCore.SecurityHeaders</em></a> NuGet package to configure the <code>Cross-Origin-Resource-Policy</code> for each. The Index page loads an image using an <code>&lt;img&gt;</code> tag:</p> <pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://localhost:5005/photo.jpg<span class=\"token punctuation\">\"</span></span>\n    <span class=\"token attr-name\">alt</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Unable to load image<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/&gt;</span></span>\n</code></pre> <p>By default, without any <code>Cross-Origin-Resource-Policy</code> value, the browser loads the image, even in cross-origin scenarios:</p> <p><img src=\"/content/images/2024/corp_none.webp\" alt=\"Without the CORP header, the image loads in cross-origin scenarios\"></p> <blockquote> <p>This is a cross-origin scenario because the root document is hosted at http://localhost:5011, while the embedded image is hosted on a site at a different port, http://localhost:5005.</p> </blockquote> <p>Similarly, if you use the <code>cross-origin</code> header value, the image still loads:</p> <p><img src=\"/content/images/2024/corp_cross.webp\" alt=\"Without the CORP header, the image loads in cross-origin scenarios\"></p> <p>If, however, the image returns a <code>Cross-Origin-Resource-Policy</code> header with the value <code>same-origin</code>, then the image is blocked:</p> <p><img src=\"/content/images/2024/corp_same.png\" alt=\"Without a same-origin CORP header, the image is blocked in cross-origin scenarios\"></p> <p>If we take a look at the dev tools, we can see that the request was made successfully, and returned a <code>200 OK</code> response, but the browser rejected the content, because it was a cross-origin request with a <code>same-origin</code> CORP header:</p> <p><img src=\"/content/images/2024/corp_same_devtools.png\" alt=\"Without a same-origin CORP header, the image is blocked in cross-origin scenarios\"></p> <p>The dev tools explanation of why the request failed is quite nice here, explaining why the request failed, and possible resolutions. In this scenario, we can switch the resource to use <code>same-site</code> (because the sites only differ in the port number, which is not part of <a href=\"#understanding-the-difference-between-same-origin-and-same-site\">the \"site\" definition</a>). With that change, the image can be embedded once again:</p> <p><img src=\"/content/images/2024/corp_same_site.webp\" alt=\"Without a same-site CORP header, the image is not blocked in same-site scenarios\"></p> <p>The possible values of the <code>Cross-Origin-Resource-Policy</code> header are pretty simple to follow, but it took me a long time to understand why we need the header at all when there are many other security headers that seem to do similar things.</p> <h2 id=\"corp-vs-cors-why-do-we-need-both-\" class=\"heading-with-anchor\"><a href=\"#corp-vs-cors-why-do-we-need-both-\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">CORP vs CORS: why do we need both?</a></h2> <p>One of the common questions about the <code>Cross-Origin-Resource-Policy</code> header is: why do we need it, when we already have <code>Cross-Origin-Resource-Sharing</code> (CORS)?</p> <p>CORS is used to <em>allow</em> cross-origin requests that would otherwise be <em>blocked</em> by the existing same-origin policy protections. These requests are termed <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Request/mode#cors\"><code>cors</code> mode</a> requests. Adding CORS headers to a site <em>reduces</em> its security by <em>allowing</em> more requests.</p> <p>In contrast, the CORP header <em>increases</em> security by <em>blocking</em> requests that would otherwise have been allowed <em>despite</em> the same-origin policy protections. It applies to a different set of requests than CORS, in that it only applies to <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Request/mode#no-cors\"><code>no-cors</code> mode</a> requests.</p> <p>One difficulty is understanding <em>exactly</em> what constitutes a <code>no-cors</code> or <code>cors</code> request can be tricky. For example, in this post I've shown that resources loaded by <code>&lt;img&gt;</code> are typically <code>no-cors</code> requests. CORP applies to these requests, hence the behaviour I showed.</p> <p>However, you can turn an <code>&lt;img&gt;</code> link into a <code>cors</code> request by adding the <code>crossorigin</code> attribute to an <code>&lt;img&gt;</code> tag:</p> <pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://localhost:5005/photo.jpg<span class=\"token punctuation\">\"</span></span>\n    <span class=\"token attr-name\">alt</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Unable to load image<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">crossorigin</span><span class=\"token punctuation\">/&gt;</span></span>\n</code></pre> <p>With this small edition, the CORP header no longer applies. Even if the CORP header would have allowed the request, the addition of <code>crossorigin</code> turns the request into a <code>cors</code> request, which will be blocked by default:</p> <p><img src=\"/content/images/2024/corp_cors.png\" alt=\"By adding the crossorigin attribute to the img attribute means that CORS applies, not CORP\"></p> <p>To allow the request, you must add CORS headers, returning <code>Access-Control-Allow-Origin</code> of either <code>*</code> or the embedding origin (<code>http://localhost:5011</code>), as in the following image:</p> <p><img src=\"/content/images/2024/corp_cors_allowed.webp\" alt=\"By adding the crossorigin attribute to the img attribute you need to apply CORS headers instead\"></p> <p>As you can see in the above image, in this scenario the CORS header is all that's required; no CORP header is applied and it does not affect the loading of the image.</p> <h2 id=\"the-relationship-with-cross-origin-embedder-policy\" class=\"heading-with-anchor\"><a href=\"#the-relationship-with-cross-origin-embedder-policy\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">The relationship with <code>Cross-Origin-Embedder-Policy</code></a></h2> <p>Many security headers have a \"default\" value that is equivalent to not applying the header at all. In many cases the <code>cross-origin</code> value serves this purpose for the <code>Cross-Origin-Resource-Policy</code> header, in that it doesn't block cross-origin requests, which is the same behaviour your see if no header had been applied.</p> <p>The difference is that the <code>cross-origin</code> CORP value <em>explicitly</em> allows cross-origin requests (for <code>no-cors</code> mode requests). This is important when it comes to the <code>Cross-Origin-Embedder-Policy</code> (COEP) which differentiates between responses which have a CORP header and those that don't. The COEP header can be configured to <em>require</em> that a resource returns a CORP header. In the next post we'll look in more detail at the COEP header and how it interacts with both CORP and COEP.</p> <h2 id=\"summary\" class=\"heading-with-anchor\"><a href=\"#summary\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Summary</a></h2> <p>In this post I described some scenarios where cross-origin resources can be loaded without restrictions, such as when images or scripts are embedded in a document using <code>&lt;img&gt;</code> or <code>&lt;script&gt;</code> tags. This can open your site to cross-site script inclusion (XSSI) attacks as well as enable others to hotlink to your resources.</p> <p>The <code>Cross-Origin-Resource-Policy</code> (CORP) header enables you to block the browser from loading these resources in cross-origin or cross-site scenarios. For maximum protection, apply a CORP header with the value <code>same-origin</code>. If you expect your resources to be loaded from a different origin, use the <code>same-site</code> value if possible.</p> ",
    "sanitized": "This is the two post in the series: Understanding cross-origin security headers.  Part 1 - Cross-Origin-Opener-Policy: preventing attacks from popupsPart 2 - Cross-Origin-Resource-Policy: preventing hotlinking and XSSI attacks (this post) Part 3 - Cross-Origin-Embedder-Policy: securing embedded resourcesIn this post I describe how some cross-origin resources can be loaded without restriction, despite the same-origin policy. This can open your site up to vulnerabilities that leak sensitive data, as well as enable hotlinking to your resources. I show how the Cross-Origin-Resource-Policy can block these cross-origin requests, how each of the available header values behave, and how the header differs from CORS headers. Why do we need the Cross-Origin-Resource-Policy header? Locking down cross-origin requests with Cross-Origin-Resource-Policy Understanding the difference between same-origin and same-site Testing out Cross-Origin-Resource-Policy CORP vs CORS: why do we need both? The relationship with Cross-Origin-Embedder-Policy Why do we need the Cross-Origin-Resource-Policy header? One of the first things I thought when first reading about the Cross-Origin-Resource-Policy was: why? We already have the same-origin policy that restricts cross-origin network access, right? Why do we need another header? Well, it turns out, that although the same-origin policy applies some pretty strict restrictions when it comes to JavaScript APIs and requests using fetch(), the restrictions are much looser when it comes to embedded resources. Embedded resources include things like scripts referenced in a <script> element and images linked in an <img> tag. MDN provides a long list of resources which can be accessed cross-origin. In each of these cases, the same-origin policy provides no protection; the browser will happily load them from a cross-origin URL by default. That includes: Images linked in <img> elements. Media linked in <video> and <audio> elements. JavaScript files referenced in <script src=\"…\"></script>. CSS files referenced in <link rel=\"stylesheet\" href=\"…\"> (as long as the stylesheet has the correct MIME type). In each of these cases, the same-origin policy doesn't protect you by default on either side. That means if an attacker manages to add an <img> or <script> to your site, they can load links from any origin. The Cross-Origin-Resource-Policy doesn't directly help you in this scenario; you need a Content-Security-Policy or Cross-Origin-Embedder-Policy for that. From the other direction, there's nothing in the same-origin policy to stop people linking to images hosted on your site and displaying them in their site. This is often called hotlinking and is problematic as it makes it easier to plagiarise content, but also places the egress and server costs on your site, as the host, instead of the embedding site. As well as hotlinking, there's a class of vulnerabilities termed Cross Site Script Inclusion (XSSI), in which a script from your site is embedded inside an attackers site, which can leak sensitive data from your site to the attacker. That's on top of speculative side-channel attacks like Spectre which rely on cross-origin access. The Cross-Origin-Resource-Policy header provides a way to protect you from these attacks and vulnerabilities. Locking down cross-origin requests with Cross-Origin-Resource-Policy The Cross-Origin-Resource-Policy (CORP) header is a security header you can return in your responses that signals to the browser whether or not the resource is allowed to be embedded in a document.  Note that you might be wondering why you need CORP when we already have Cross-Origin-Resource-Sharing (CORS). I go into more detail later, but the short-answer is that CORP only applies to no-cors scenarios i.e. when CORS doesn't apply.  There are currently three possible values for the Cross-Origin-Resource-Policy header: same-origin—the browser should reject cross-origin responses that are returned with a header with this value. same-site—the browser should reject cross-site responses that are returned with a header with this value. This is less restrictive than same-origin; I describe the difference between same-site and same-origin in the following section. cross-origin—the browser should allow cross-origin responses. By default, this behaves similarly to when no CORP header is returned, but it also interacts with the Cross-Origin-Embedder-Policy header, as I describe later.  Note that there's a bug in Chrome where setting Cross-Origin-Resource-Policy can break PDF rendering, preventing you being able to read past the first page of some PDFs.  I'll walk through some examples of these shortly, but first I'll clarify the difference between same-origin and same-site. Understanding the difference between same-origin and same-site The CORP header can be set to either same-site or same-origin. Site and origin are two similar concepts, but it's important to understand the differences. Two URLs are considered to be \"same-site\" if they: Have the same scheme i.e. http or https Have the same domain i.e. example.com, andrewlock.net or microsoft.com They don't need to have the same port or subdomain. Two URLs are considered to be \"same-origin\" if they Have the same scheme i.e. http or https Have the same domain i.e. example.com, andrewlock.net or microsoft.com Have the same subdomain i.e. www. Have the same port (which may be implicit) i.e. port 80 for http and 443 for https So same-origin is more restrictive than same-site. Note that neither concept cares about the path, querystring, or fragment of the URL. If we use the URL http://www.example.org as an example and compare against variations, you can see the difference more clearly. URLDescriptionsame-sitesame-originhttp://www.example.orgIdentical URL✅✅http://www.example.org:80Identical URL (implicit port)✅✅http://www.example.org:5000Different port✅❌http://example.orgDifferent subdomain✅❌http://sub.example.orgDifferent subdomain✅❌https://www.example.orgDifferent scheme❌❌http://www.example.evilDifferent TLD❌❌ This becomes important when thinking about the Cross-Origin-Resource-Policy header. If you serve resources from a dedicated subdomain, cdn.example.org for example, and you want them to be embedded on example.org or www.example.org, then you will need to make sure the resources are returned with a same-site value. If, however, you only embed resources from the exact same origin, then using same-origin provides greater security. Testing out Cross-Origin-Resource-Policy I've described the various possible values for Cross-Origin-Resource-Policy, but I find it helps to see the header in action. To test out the different policy values, I created two ASP.NET Core apps, and used my NetEscapades.AspNetCore.SecurityHeaders NuGet package to configure the Cross-Origin-Resource-Policy for each. The Index page loads an image using an <img> tag: <img src=\"http://localhost:5005/photo.jpg\"\n    alt=\"Unable to load image\"/>\n By default, without any Cross-Origin-Resource-Policy value, the browser loads the image, even in cross-origin scenarios:   This is a cross-origin scenario because the root document is hosted at http://localhost:5011, while the embedded image is hosted on a site at a different port, http://localhost:5005.  Similarly, if you use the cross-origin header value, the image still loads:  If, however, the image returns a Cross-Origin-Resource-Policy header with the value same-origin, then the image is blocked:  If we take a look at the dev tools, we can see that the request was made successfully, and returned a 200 OK response, but the browser rejected the content, because it was a cross-origin request with a same-origin CORP header:  The dev tools explanation of why the request failed is quite nice here, explaining why the request failed, and possible resolutions. In this scenario, we can switch the resource to use same-site (because the sites only differ in the port number, which is not part of the \"site\" definition). With that change, the image can be embedded once again:  The possible values of the Cross-Origin-Resource-Policy header are pretty simple to follow, but it took me a long time to understand why we need the header at all when there are many other security headers that seem to do similar things. CORP vs CORS: why do we need both? One of the common questions about the Cross-Origin-Resource-Policy header is: why do we need it, when we already have Cross-Origin-Resource-Sharing (CORS)? CORS is used to allow cross-origin requests that would otherwise be blocked by the existing same-origin policy protections. These requests are termed cors mode requests. Adding CORS headers to a site reduces its security by allowing more requests. In contrast, the CORP header increases security by blocking requests that would otherwise have been allowed despite the same-origin policy protections. It applies to a different set of requests than CORS, in that it only applies to no-cors mode requests. One difficulty is understanding exactly what constitutes a no-cors or cors request can be tricky. For example, in this post I've shown that resources loaded by <img> are typically no-cors requests. CORP applies to these requests, hence the behaviour I showed. However, you can turn an <img> link into a cors request by adding the crossorigin attribute to an <img> tag: <img src=\"http://localhost:5005/photo.jpg\"\n    alt=\"Unable to load image\" crossorigin/>\n With this small edition, the CORP header no longer applies. Even if the CORP header would have allowed the request, the addition of crossorigin turns the request into a cors request, which will be blocked by default:  To allow the request, you must add CORS headers, returning Access-Control-Allow-Origin of either * or the embedding origin (http://localhost:5011), as in the following image:  As you can see in the above image, in this scenario the CORS header is all that's required; no CORP header is applied and it does not affect the loading of the image. The relationship with Cross-Origin-Embedder-Policy Many security headers have a \"default\" value that is equivalent to not applying the header at all. In many cases the cross-origin value serves this purpose for the Cross-Origin-Resource-Policy header, in that it doesn't block cross-origin requests, which is the same behaviour your see if no header had been applied. The difference is that the cross-origin CORP value explicitly allows cross-origin requests (for no-cors mode requests). This is important when it comes to the Cross-Origin-Embedder-Policy (COEP) which differentiates between responses which have a CORP header and those that don't. The COEP header can be configured to require that a resource returns a CORP header. In the next post we'll look in more detail at the COEP header and how it interacts with both CORP and COEP. Summary In this post I described some scenarios where cross-origin resources can be loaded without restrictions, such as when images or scripts are embedded in a document using <img> or <script> tags. This can open your site to cross-site script inclusion (XSSI) attacks as well as enable others to hotlink to your resources. The Cross-Origin-Resource-Policy (CORP) header enables you to block the browser from loading these resources in cross-origin or cross-site scenarios. For maximum protection, apply a CORP header with the value same-origin. If you expect your resources to be loaded from a different origin, use the same-site value if possible."
  },
  {
    "itemId": "https://andrewlock.net/understanding-security-headers-part-1-cross-origin-opener-policy-preventing-attacks-from-popups/",
    "raw": "<img src=\"https://andrewlock.net/content/images/2024/coop_banner.png\" /><nav><p>This is the one post in the series: <a href=\"/series/understanding-cross-origin-security-headers/\">Understanding cross-origin security headers</a>. </p> <ol class=\"list-none\"><li>Part 1 - Cross-Origin-Opener-Policy: preventing attacks from popups (this post) </li><li><a href=\"/understanding-security-headers-part-2-cross-origin-resource-policy-preventing-hotlinking/\">Part 2 - Cross-Origin-Resource-Policy: preventing hotlinking and XSSI attacks</a></li><li><a href=\"/understanding-security-headers-part-3-cross-origin-embedder-policy/\">Part 3 - Cross-Origin-Embedder-Policy: securing embedded resources</a></li></ol></nav><p>In this post I describe the same-origin policy and describe how, despite its protections, your site could leak information via side-channel vectors in the web platform APIs. I then describe how you can use the <code>Cross-Origin-Opener-Policy</code> (COOP) header to mitigate one such vulnerability that is available using the <code>window.open()</code> and <code>window.opener</code> APIs. I describe which values provide isolation in which scenarios, how they differ between opener and popup, and which values you should use depending on your requirements.</p> <ul><li><a href=\"#what-is-an-origin-\">What is an origin?</a></li> <li><a href=\"#same-origin-policy-restrictions\">Same-origin policy restrictions</a></li> <li><a href=\"#leaking-information-across-origins\">Leaking information across origins</a></li> <li><a href=\"#protecting-against-window-open-attacks-using-cross-origin-opener-policy\">Protecting against <code>window.open</code> attacks using <code>Cross-Origin-Opener-Policy</code></a></li> <li><a href=\"#testing-cross-origin-opener-policy-with-multiple-scenarios\">Testing <code>Cross-Origin-Opener-Policy</code> with multiple scenarios</a> <ul><li><a href=\"#the-impact-of-cross-origin-opener-policy-on-same-origin-communication\">The impact of <code>Cross-Origin-Opener-Policy</code> on same-origin communication</a></li> <li><a href=\"#the-impact-of-cross-origin-opener-policy-on-cross-origin-communication\">The impact of <code>Cross-Origin-Opener-Policy</code> on cross-origin communication</a></li></ul> </li> <li><a href=\"#what-cross-origin-opener-policy-value-should-i-use-\">What <code>Cross-Origin-Opener-Policy</code> value should I use?</a></li> <li><a href=\"#rolling-out-cross-origin-opener-policy-safely-with-reporting\">Rolling-out <code>Cross-Origin-Opener-Policy</code> safely with reporting</a></li> <li><a href=\"#a-half-way-house-restrict-properties\">A half-way house: <code>restrict-properties</code></a></li> <li><a href=\"#enabling-additional-features-with-crossoriginisolated\">Enabling additional features with <code>crossOriginIsolated</code></a></li></ul> <h2 id=\"what-is-an-origin-\" class=\"heading-with-anchor\"><a href=\"#what-is-an-origin-\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">What is an origin?</a></h2> <p>Before we can go any further, it's first important to clarify what an \"origin\" is from a browser's point of view. The origin of two URLs are considered to be the same if they</p> <ul><li>Have the same <em>scheme</em> i.e. <code>http</code> or <code>https</code></li> <li>Have the same <em>domain</em> i.e. <code>example.com</code>, <code>andrewlock.net</code> or <code>microsoft.com</code></li> <li>Have the same <em>subdomain</em> i.e. <code>www.</code></li> <li>Have the same <em>port</em> (which may be implicit) i.e. port <code>80</code> for <code>http</code> and <code>443</code> for <code>https</code></li></ul> <p>Note that the <em>path</em> of a URL, i.e. <code>/some/path</code> in the URL <code>http://www.example.org/some/path</code> is <em>not</em> part of the origin, neither is the querystring (<code>?key=value</code>) or a fragment (<code>#someid</code>).</p> <p>But essentially, everything before the path in the URL must match for two URLs to be considered \"same-origin\". The only subtlety to that statement is that the port may be implicit (port <code>80</code> for <code>http</code> and <code>443</code> for <code>https</code>) or explicit, and the sites are still considered same-origin.</p> <blockquote> <p>There is a similar, less-strict, concept called \"same-site\" that is used <a href=\"/understanding-samesite-cookies/\">by same-site cookies</a>, among other things.</p> </blockquote> <p>The table below compares URLs to the origin <code>http://www.example.org</code> so you can clearly see the difference between same-origin and cross-origin:</p> <table><thead><tr><th>URL</th><th>Description</th><th>same-origin</th></tr></thead><tbody><tr><td><code>http://www.example.org</code></td><td>Identical URL</td><td>✅</td></tr><tr><td><code>http://www.example.org:80</code></td><td>Identical URL (implicit port)</td><td>✅</td></tr><tr><td><code>http://www.example.org:5000</code></td><td>Different port</td><td>❌</td></tr><tr><td><code>http://example.org</code></td><td>Different subdomain</td><td>❌</td></tr><tr><td><code>http://sub.example.org</code></td><td>Different subdomain</td><td>❌</td></tr><tr><td><code>https://www.example.org</code></td><td>Different scheme</td><td>❌</td></tr><tr><td><code>http://www.example.evil</code></td><td>Different TLD</td><td>❌</td></tr></tbody></table> <p>When two sites have the same origin, they are termed \"same-origin\"; when they have different origins, they are \"cross-origin\".</p> <h2 id=\"same-origin-policy-restrictions\" class=\"heading-with-anchor\"><a href=\"#same-origin-policy-restrictions\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Same-origin policy restrictions</a></h2> <p>The <a href=\"https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy\">same-origin policy</a> is a key security mechanism used by browsers to restrict how resources loaded from one origin can interact with resources loaded from another origin.</p> <p>One of the most common interactions people first run into is when you're <em>sending</em> cross-origin requests, as many of these are blocked unless you enable <a href=\"/making-authenticated-cross-origin-requests-with-aspnetcore-identity/\">Cross Origin Resource Sharing (CORS)</a>. These restrictions come into play when you're making <code>fetch()</code> requests in JavaScript for example.</p> <blockquote> <p>Most of the time, developers interacting with cross-origin documents are trying to do completely legitimate things, and the same-origin policy can seem very restrictive. But the same-origin policy is vital for isolating your site from malicious sites. Without it, your website would be extremely vulnerable!</p> </blockquote> <p>However, there are also cross-origin restrictions at the JavaScript API-level that don't involve <code>fetch()</code>. On the face of it, that might sound a bit confusing—how can you interact with a <em>different</em> document using JavaScript without making requests? There are several APIs that allow you to do this, which generally provide a reference to <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window\">the <code>Window</code> object</a> for a different document. For example:</p> <ul><li><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/HTMLIFrameElement/contentWindow\"><code>iframe.contentWindow</code></a> returns the <code>Window</code> object of an iFrame.</li> <li><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window/parent\"><code>window.parent</code></a> returns the <code>Window</code> object of the <em>parent</em> window (when called from an iFrame for example).</li> <li><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window/open\"><code>window.open()</code></a> allows you to open a new window, whether in a popup or a new tab, and returns a reference to the <code>Window</code> object of the opened document.</li> <li><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window/opener\"><code>window.opener</code></a> provides a reference to the <code>Window</code> object of the document that opened this one. This is available when the current document was opened via a <code>window.open()</code> call, or by clicking a link that has a <code>target</code> attribute.</li></ul> <p>When the documents are same-origin, then you have direct access to the other <code>Window</code> but in cross-origin scenarios, <a href=\"https://html.spec.whatwg.org/multipage/browsers.html#cross-origin-objects\">you can only access a limited number of properties and methods</a>, for example:</p> <ul><li><code>window.close()</code></li> <li><code>window.focus()</code></li> <li><code>window.postMessage()</code></li> <li><code>window.length</code></li> <li><code>window.closed</code> (read-only)</li> <li><code>window.opener</code> (read-only)</li> <li><code>window.frames</code> (read-only)</li></ul> <p>The exact available properties and methods vary by browser, but you can find a more complete list <a href=\"https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy#window\">here</a>. Nevertheless, even though cross-origin interactions are limited to this small subset, there are attacks that can use these APIs to leak information across contexts.</p> <h2 id=\"leaking-information-across-origins\" class=\"heading-with-anchor\"><a href=\"#leaking-information-across-origins\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Leaking information across origins</a></h2> <p>One class of vulnerabilities, often called cross-site leaks (aka <a href=\"https://xsleaks.dev/\">XS-Leaks</a>), <a href=\"https://owasp.org/www-pdf-archive/Side_Channel_Vulnerabilities.pdf\">attack the side-channels</a> built into the web platform to infer information about other sites. There have been some high-profile attacks, such as <a href=\"https://spectreattack.com/\">Meltdown and Spectre</a> which leverage hardware bugs, but there are also leaks that come directly from the browser APIs.</p> <p><a href=\"https://xsleaks.dev/docs/attacks/frame-counting/\">One source of information</a> comes via the <code>window.length</code> property which returns the number of frames (<code>iframe</code>s) that are in the document. This seems like a very benign property, but if this number changes based on properties of the user, then that's a source of information that could be abused by an attacker. As a concrete example, Facebook patched such a bug that could be used to leak all sorts of information about the user (<a href=\"https://www.imperva.com/blog/facebook-privacy-bug/\">as described in this post</a>).</p> <p>There are many other possible sources of information leaks (described in detail at <a href=\"https://xsleaks.dev/\">https://xsleaks.dev/</a>), but it's clear that even having mostly-readonly access to a cross-origin document is enough to expose yourself to vulnerabilities. To work around this, browsers introduced the <code>Cross-Origin-Opener-Policy</code> header, to give you additional restrictions.</p> <h2 id=\"protecting-against-window-open-attacks-using-cross-origin-opener-policy\" class=\"heading-with-anchor\"><a href=\"#protecting-against-window-open-attacks-using-cross-origin-opener-policy\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Protecting against <code>window.open</code> attacks using <code>Cross-Origin-Opener-Policy</code></a></h2> <p><code>Cross-Origin-Opener-Policy</code> (COOP) is <a href=\"https://andrewlock.net/major-updates-to-netescapades-aspnetcore-security-headers/#what-are-security-headers-\">a security header</a> that you can return in your HTTP responses, which enables additional protections for your site when you call <code>window.open</code>, or when a <em>different</em> document calls <code>window.open</code> to open <em>your</em> site.</p> <p>The <code>Cross-Origin-Opener-Policy</code> (COOP) header currently has <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cross-Origin-Opener-Policy\">three possible values</a>:</p> <ul><li><code>unsafe-none</code>—the default, unsafe value.</li> <li><code>same-origin</code>—the most safe value</li> <li><code>same-origin-allow-popups</code>—a middle-ground, which provides some protections.</li></ul> <p>I'll describe how each of these headers impact the behaviour of the JavaScript APIs shortly, but a word of warning, the language can get confusing, as we're describing the available interactions between two different sites:</p> <ul><li>The <em>opener</em>—this is the site that called <code>window.open()</code>. This API returns a <code>Window</code> object which references the <em>opened</em> site</li> <li>The <em>opened</em>—this is the site that was opened. It can reference the <code>Window</code> object of the <em>opener</em> using the <code>window.opener</code> property.</li></ul> <p>Both the <em>opener</em> and <em>opened</em> sites could set different values for COOP, and the combination of the two controls whether the two documents are in the same <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Browsing_context\">browsing context</a> or not. When documents are in <em>different</em> browsing contexts, then</p> <ul><li><code>window.opener</code> in the <em>opened</em> document returns <code>null</code>, instead of the <code>Window</code> reference to the <em>opener</em>.</li> <li>In the <em>opener</em>, the value returned by <code>window.open()</code> returns \"default\" values for some of the properties, such as <code>window.closed</code></li></ul> <p>Not that these restrictions are in <em>addition</em> to the same-origin restrictions that also apply.</p> <p>There's a lot of moving pieces here, so the follow sections describe various scenarios.</p> <h2 id=\"testing-cross-origin-opener-policy-with-multiple-scenarios\" class=\"heading-with-anchor\"><a href=\"#testing-cross-origin-opener-policy-with-multiple-scenarios\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Testing <code>Cross-Origin-Opener-Policy</code> with multiple scenarios</a></h2> <p>To test out the impact of the COOP header, I created two simple ASP.NET Core web apps which serve HTML pages.</p> <ul><li>Web app 1, hosted at <code>http://localhost:5011</code>, serves an Index.html document which contains a single button, which runs <code>window.open()</code> to open a popup in web app 2.</li> <li>Web app 2, hosted at <code>http://localhost:5005</code>, serves a Popup.html document, which attempts to read <code>window.opener</code>.</li></ul> <p>The apps are nothing fancy, just basic HTML that shows the value of the <code>Cross-Origin-Opener-Policy</code> used to serve the page and a button to click:</p> <p><img src=\"/content/images/2024/coop_cross_initial.png\" alt=\"The initial opener page\"></p> <p>Each of the apps runs a small amount of JavaScript to test the isolation of the site. In the <em>opener</em>, web app 1 reads the value of <code>window.closed</code>; in the isolated scenario, this will <em>always</em> return <code>true</code>, whereas it will return the \"correct\" value when the documents are in a shared context:</p> <pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// Add a button click handler</span>\ndocument<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'open_btn'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// Open the popup in a new window</span>\n        <span class=\"token keyword\">const</span> opened <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http://localhost:5005/popup'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'_blank'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'popup=true'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// Check whether we have the correct value for opened.closed</span>\n        document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'opener_ele'</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> <span class=\"token string\">'Opened window - reference object &lt;code&gt;opened.closed&lt;/code&gt; is '</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>opened<span class=\"token punctuation\">.</span>closed\n                <span class=\"token operator\">?</span> <span class=\"token string\">'&lt;span style=\"color:red\"&gt;TRUE&lt;/span&gt;'</span>\n                <span class=\"token operator\">:</span> <span class=\"token string\">'&lt;span style=\"color:green\"&gt;FALSE&lt;/span&gt;'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre> <p>On the popup (<em>opened</em>) side, we check the value of <code>window.opener</code>. In the isolated context, this will be <code>null</code>, while in the shared context scenario it will be the standard <code>Window</code> object:</p> <pre class=\"language-js\"><code class=\"language-js\">document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'opener_ele'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> <span class=\"token string\">'&lt;code&gt;window.opener&lt;/code&gt; object is '</span> <span class=\"token operator\">+</span>\n        <span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">.</span>opener\n            <span class=\"token operator\">?</span> <span class=\"token string\">'&lt;span style=\"color:green\"&gt;AVAILABLE&lt;/span&gt;'</span>\n            <span class=\"token operator\">:</span> <span class=\"token string\">'&lt;span style=\"color:red\"&gt;UNAVAILABLE&lt;/span&gt;'</span><span class=\"token punctuation\">)</span>\n</code></pre> <p>For each app I used my <a href=\"/major-updates-to-netescapades-aspnetcore-security-headers/#adding-security-headers-to-your-app\"><em>NetEscapades.AspNetCore.SecurityHeaders</em></a> NuGet package to configure the <code>Cross-Origin-Opener-Policy</code> for each web app with one of the three possible values. In the following sections we look at how the header impacts the behaviour of the apps.</p> <h3 id=\"the-impact-of-cross-origin-opener-policy-on-same-origin-communication\" class=\"heading-with-anchor\"><a href=\"#the-impact-of-cross-origin-opener-policy-on-same-origin-communication\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">The impact of <code>Cross-Origin-Opener-Policy</code> on same-origin communication</a></h3> <p>We'll start with the easy case, when both the opener and opened documents have the same origin, both running on <code>http://localhost:5011</code>. In this scenario, there are <em>no</em> same-origin restrictions, <em>regardless</em> of what <code>Cross-Origin-Opener-Policy</code> you apply to either the opener <em>or</em> the popup.</p> <p>In this scenario, <code>window.closed</code> returns the correct value in the opener (<code>false</code>) and the <code>window.opener</code> value returns the \"real\" <code>Window</code> object to the popup. This happens even with the most-restrictive header value of <code>same-origin</code>:</p> <p><img src=\"/content/images/2024/coop_same_same_origin.png\" alt=\"The initial opener page\"></p> <p>Each page can interact completely unrestricted with the other, because they're both on the same origin. Where things get interesting is when the pages are <em>cross</em> origin.</p> <h3 id=\"the-impact-of-cross-origin-opener-policy-on-cross-origin-communication\" class=\"heading-with-anchor\"><a href=\"#the-impact-of-cross-origin-opener-policy-on-cross-origin-communication\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">The impact of <code>Cross-Origin-Opener-Policy</code> on cross-origin communication</a></h3> <p>In this scenario, a website opens a page on a <em>different</em> origin.</p> <p>We'll again start with the easiest scenario, where both sites are using <code>Cross-Origin-Opener-Policy: unsafe-none</code> (or, more likely, not returning the header at all). In this scenario, there are no additional restrictions over the normal same-site restrictions. That means:</p> <ul><li>✔ <code>window.opener</code> is available in the popup</li> <li>✔ <code>opened.closed</code> reflects the correct value in the opener document</li></ul> <p><img src=\"/content/images/2024/coop_cross_unsafe_on_both.png\" alt=\"In cross-origin scenarios where both have unsafe-none, there are no additional restrictions\"></p> <p>This scenario is the least secure one. Remember, if there's a malicious site, it could be <em>either</em> the site doing the opening, or it could be the site being opened in the popup (if your site is tricked into opening it). So although there are still <a href=\"/understanding-security-headers-part-1-cross-origin-opener-policy-preventing-attacks-from-popups/#same-origin-policy-restrictions\">same-origin restrictions for accessing the other site's <code>Window</code> object</a>, the side channel vulnerabilities are unmitigated.</p> <p>At the other end of the scale, if <em>either</em> the opener <em>or</em> the opened/popup document return <code>Cross-Origin-Opener-Policy: same-origin</code>, the result is the same:</p> <ul><li>❌ <code>window.opener</code> is <code>null</code> in the popup</li> <li>❌ <code>opened.closed</code> always returns <code>true</code> in the opener document</li></ul> <p>The image below shows this in action: the <code>opened.closed</code> property returns <code>true</code> even though the popup is clearly open, while in the popup <code>window.opener</code> is <code>null</code>:</p> <p><img src=\"/content/images/2024/coop_cross_same_origin_on_both.png\" alt=\"In cross-origin scenarios where both have unsafe-none, there are no additional restrictions\"></p> <p>Not that you get the same behaviour when <em>either</em> of the sites uses <code>same-origin</code>, <em>regardless</em> of what the other site uses. Whether or not the sites share a browsing context is a binary decision, so if either of the <em>sites</em> opts out of sharing a context, the result is the same.</p> <p>The final option to consider is <code>same-origin-allow-popups</code>, which is more subtle:</p> <ul><li>When returned by the opened/popup site, it behaves exactly like <code>same-origin</code>, i.e. isolated browsing contexts.</li> <li>When returned by the opener, then <em>if</em> the popup returns <code>unsafe-none</code> (or doesn't return a COOP header), they <em>will</em> share browsing context. If the popup returns anything else, then they're isolated.</li></ul> <p>So in the following, the opener has <code>same-origin-allow-popups</code> while the popup has <code>unsafe-none</code>, and you can see they are sharing a context, as the values are correct and available:</p> <p><img src=\"/content/images/2024/coop_cross_allow_popups_unsafe.png\" alt=\"If the opener has same-origin-allow-popups and the popup has unsafe-none, they share a browsing context\"></p> <p>Whereas in the following, the popup does <em>not</em> have <code>unsafe-none</code> (instead it has <code>same-origin-allow-popups</code>), so they don't share a browsing context, and the objects are blocked:</p> <p><img src=\"/content/images/2024/coop_cross_allow_popups_on_both.png\" alt=\"If the opener has same-origin-allow-popups but the popup does not have unsafe-none, they don't share a browsing context\"></p> <p>As a reminder, if the <em>popup</em> has <code>same-origin-allow-popups</code>, this is treated the same as <code>same-origin</code>, so even if the opener has <code>unsafe-none</code>, they do not share a browsing context</p> <p><img src=\"/content/images/2024/coop_cross_unsafe_allow_popups.png\" alt=\"If the opener has unsafe-none and the popup has same-origin-allow-popups, they don't share a browsing context\"></p> <p>I'm not going to lie, I found it all quite confusing trying to understand the matrix of possibilities. However, if you consider just the cross-origin scnario, you can narrow the options down to a 3×3 table of options. In the table below, \"Shared ✔\" means that the <code>window.opener</code> and <code>opened</code> values are available, because the sites share a browsing context. In the \"Isolated ❌\" case, the sites are isolated.</p> <figure> <table class=\"align-middle text-center\"><thead><tr><th></th><th></th><th colspan=\"3\">Opened <code>Cross-Origin-Opener-Policy</code></th></tr><tr><th></th><th></th><th><code>unsafe-none</code> / missing</th><th><code>same-origin-allow-popups</code></th><th><code>same-origin</code></th></tr></thead><tbody><tr><th rowspan=\"3\">Opener<br>COOP</th><td><code>unsafe-none</code> / missing</td><td>Shared ✔</td><td>Isolated ❌</td><td>Isolated ❌</td></tr><tr><td><code>same-origin-allow-popups</code></td><td>Shared ✔</td><td>Isolated ❌</td><td>Isolated ❌</td></tr><tr><td><code>same-origin</code></td><td>Isolated ❌</td><td>Isolated ❌</td><td>Isolated ❌</td></tr></tbody></table><figcaption>The possible states of the browsing context when using the <code>Cross-Origin-Opener-Policy</code> header in a cross-origin scenario </figcaption></figure> <h2 id=\"what-cross-origin-opener-policy-value-should-i-use-\" class=\"heading-with-anchor\"><a href=\"#what-cross-origin-opener-policy-value-should-i-use-\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">What <code>Cross-Origin-Opener-Policy</code> value should I use?</a></h2> <p>So if you've come this far, maybe you're looking for some advice. Which <code>Cross-Origin-Opener-Policy</code> header value should you use?</p> <p>Luckily, this is relatively easy: if you want to be the most secure, your should use <code>same-origin</code>. This protects you from malicious popups in case you're tricked into calling <code>window.open</code>, but it also protects you if a malicious site opens <em>your</em> site in a popup.</p> <p>Unfortunately, things might not be that simple. Maybe you interact with a payment or authentication site that requires opening in a popup and retrieving a token. If that's the case, you likely won't be able to use <code>same-origin</code>. For this scenario you can use <code>same-origin-allow-popups</code> (and the target authentication/payment site must omit the COOP header or alternatively use <code>unsafe-none</code>).</p> <p>If you do choose to use <code>same-origin-allow-popups</code> for your site then you'll still be protected if a malicious site opens your site in a popup, but you <em>won't</em> be protected from sites that <em>you</em> open with <code>window.open</code>.</p> <h2 id=\"rolling-out-cross-origin-opener-policy-safely-with-reporting\" class=\"heading-with-anchor\"><a href=\"#rolling-out-cross-origin-opener-policy-safely-with-reporting\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Rolling-out <code>Cross-Origin-Opener-Policy</code> safely with reporting</a></h2> <p>Given that returning the <code>Cross-Origin-Opener-Policy</code> header has the potential to break both the opened and opener sites, you obviously need to be careful when rolling it out. It's strongly recommended that you use the <a href=\"https://web.dev/reporting-api\">Reporting API</a> built into browsers to identify any issues in production.</p> <p>Before taking the plunge, you should also consider running the <code>Cross-Origin-Opener-Policy</code> header in \"report only\" mode, by using the <code>Cross-Origin-Opener-Policy-Report-Only</code> header instead. This header \"simulates\" the policy, and sends any violations via the reporting API. This gives you a chance to adjust your site and re-evaluate, before enforcing the policy for real.</p> <h2 id=\"a-half-way-house-restrict-properties\" class=\"heading-with-anchor\"><a href=\"#a-half-way-house-restrict-properties\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">A half-way house: <code>restrict-properties</code></a></h2> <p>Throughout this post I've said there's only three values but Chrome actually <a href=\"https://developer.chrome.com/blog/coop-restrict-properties\">briefly implemented a fourth value</a>, <code>restrict-properties</code>. This was only available for companies <a href=\"https://developer.chrome.com/origintrials/#/view_trial/1827335548805578753\">signing up for a trial</a>, and was explicitly meant to handle the payment/authentication scenario I described previously, but relaxing restrictions from the <em>popup</em>'s point of view. I don't go into more detail here, as it never made it out of the experimental phase as far as I can tell.</p> <h2 id=\"enabling-additional-features-with-crossoriginisolated\" class=\"heading-with-anchor\"><a href=\"#enabling-additional-features-with-crossoriginisolated\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Enabling additional features with <code>crossOriginIsolated</code></a></h2> <p>After the <a href=\"https://spectreattack.com/\">Meltdown and Spectre</a> vulnerabilities were revealed, browser makers removed some of the features they relied on. These were later re-introduced, but were guarded so that they could only be introduced in a <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window/crossOriginIsolated\">\"cross-origin isolated\" state</a> (exposed as <code>window.crossOriginIsolated</code>).</p> <p>To be in a cross-origin isolated state, your site must:</p> <ul><li>Return the <code>Cross-Origin-Opener-Policy</code> header with the value <code>same-origin</code>.</li> <li>Return the <code>Cross-Origin-Embedder-Policy</code> header with the value <code>require-corp</code> or <code>credentialless</code>. I'll talk more about this header in a separate post.</li></ul> <p>If you meet these requirements then you unlock some additional APIs:</p> <ul><li>You can send <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer\"><code>SharedArrayBuffer</code></a> via <code>Window.postMessage()</code> calls.</li> <li><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Performance/now\"><code>Performance.now()</code></a> gives better precision.</li> <li><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Performance/measureUserAgentSpecificMemory\"><code>Performance.measureUserAgentSpecificMemory()</code></a> is available.</li></ul> <p>So that's yet another reason to use <code>Cross-Origin-Opener-Policy: same origin</code> for your sites if you can!</p> <h2 id=\"summary\" class=\"heading-with-anchor\"><a href=\"#summary\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Summary</a></h2> <p>In this post I discussed the same-origin policy and how, despite its restrictions, your site could leak information via side-channel vectors in the web platform APIs. I then described how you can use <code>Cross-Origin-Opener-Policy</code> (COOP) to mitigate vulnerabilities that are associated with the <code>window.open()</code> and <code>window.opener</code> APIs.</p> <p>I described which header values provide isolation in which scenarios, how the behaviour differs between opener and popup, and which values you should use based on your requirements. Finally, I described the cross-origin isolated state which enables additional APIs and requires that you use the <code>same-origin</code> value.</p> ",
    "sanitized": "This is the one post in the series: Understanding cross-origin security headers.  Part 1 - Cross-Origin-Opener-Policy: preventing attacks from popups (this post) Part 2 - Cross-Origin-Resource-Policy: preventing hotlinking and XSSI attacksPart 3 - Cross-Origin-Embedder-Policy: securing embedded resourcesIn this post I describe the same-origin policy and describe how, despite its protections, your site could leak information via side-channel vectors in the web platform APIs. I then describe how you can use the Cross-Origin-Opener-Policy (COOP) header to mitigate one such vulnerability that is available using the window.open() and window.opener APIs. I describe which values provide isolation in which scenarios, how they differ between opener and popup, and which values you should use depending on your requirements. What is an origin? Same-origin policy restrictions Leaking information across origins Protecting against window.open attacks using Cross-Origin-Opener-Policy Testing Cross-Origin-Opener-Policy with multiple scenarios The impact of Cross-Origin-Opener-Policy on same-origin communication The impact of Cross-Origin-Opener-Policy on cross-origin communication  What Cross-Origin-Opener-Policy value should I use? Rolling-out Cross-Origin-Opener-Policy safely with reporting A half-way house: restrict-properties Enabling additional features with crossOriginIsolated What is an origin? Before we can go any further, it's first important to clarify what an \"origin\" is from a browser's point of view. The origin of two URLs are considered to be the same if they Have the same scheme i.e. http or https Have the same domain i.e. example.com, andrewlock.net or microsoft.com Have the same subdomain i.e. www. Have the same port (which may be implicit) i.e. port 80 for http and 443 for https Note that the path of a URL, i.e. /some/path in the URL http://www.example.org/some/path is not part of the origin, neither is the querystring (?key=value) or a fragment (#someid). But essentially, everything before the path in the URL must match for two URLs to be considered \"same-origin\". The only subtlety to that statement is that the port may be implicit (port 80 for http and 443 for https) or explicit, and the sites are still considered same-origin.  There is a similar, less-strict, concept called \"same-site\" that is used by same-site cookies, among other things.  The table below compares URLs to the origin http://www.example.org so you can clearly see the difference between same-origin and cross-origin: URLDescriptionsame-originhttp://www.example.orgIdentical URL✅http://www.example.org:80Identical URL (implicit port)✅http://www.example.org:5000Different port❌http://example.orgDifferent subdomain❌http://sub.example.orgDifferent subdomain❌https://www.example.orgDifferent scheme❌http://www.example.evilDifferent TLD❌ When two sites have the same origin, they are termed \"same-origin\"; when they have different origins, they are \"cross-origin\". Same-origin policy restrictions The same-origin policy is a key security mechanism used by browsers to restrict how resources loaded from one origin can interact with resources loaded from another origin. One of the most common interactions people first run into is when you're sending cross-origin requests, as many of these are blocked unless you enable Cross Origin Resource Sharing (CORS). These restrictions come into play when you're making fetch() requests in JavaScript for example.  Most of the time, developers interacting with cross-origin documents are trying to do completely legitimate things, and the same-origin policy can seem very restrictive. But the same-origin policy is vital for isolating your site from malicious sites. Without it, your website would be extremely vulnerable!  However, there are also cross-origin restrictions at the JavaScript API-level that don't involve fetch(). On the face of it, that might sound a bit confusing—how can you interact with a different document using JavaScript without making requests? There are several APIs that allow you to do this, which generally provide a reference to the Window object for a different document. For example: iframe.contentWindow returns the Window object of an iFrame. window.parent returns the Window object of the parent window (when called from an iFrame for example). window.open() allows you to open a new window, whether in a popup or a new tab, and returns a reference to the Window object of the opened document. window.opener provides a reference to the Window object of the document that opened this one. This is available when the current document was opened via a window.open() call, or by clicking a link that has a target attribute. When the documents are same-origin, then you have direct access to the other Window but in cross-origin scenarios, you can only access a limited number of properties and methods, for example: window.close() window.focus() window.postMessage() window.length window.closed (read-only) window.opener (read-only) window.frames (read-only) The exact available properties and methods vary by browser, but you can find a more complete list here. Nevertheless, even though cross-origin interactions are limited to this small subset, there are attacks that can use these APIs to leak information across contexts. Leaking information across origins One class of vulnerabilities, often called cross-site leaks (aka XS-Leaks), attack the side-channels built into the web platform to infer information about other sites. There have been some high-profile attacks, such as Meltdown and Spectre which leverage hardware bugs, but there are also leaks that come directly from the browser APIs. One source of information comes via the window.length property which returns the number of frames (iframes) that are in the document. This seems like a very benign property, but if this number changes based on properties of the user, then that's a source of information that could be abused by an attacker. As a concrete example, Facebook patched such a bug that could be used to leak all sorts of information about the user (as described in this post). There are many other possible sources of information leaks (described in detail at https://xsleaks.dev/), but it's clear that even having mostly-readonly access to a cross-origin document is enough to expose yourself to vulnerabilities. To work around this, browsers introduced the Cross-Origin-Opener-Policy header, to give you additional restrictions. Protecting against window.open attacks using Cross-Origin-Opener-Policy Cross-Origin-Opener-Policy (COOP) is a security header that you can return in your HTTP responses, which enables additional protections for your site when you call window.open, or when a different document calls window.open to open your site. The Cross-Origin-Opener-Policy (COOP) header currently has three possible values: unsafe-none—the default, unsafe value. same-origin—the most safe value same-origin-allow-popups—a middle-ground, which provides some protections. I'll describe how each of these headers impact the behaviour of the JavaScript APIs shortly, but a word of warning, the language can get confusing, as we're describing the available interactions between two different sites: The opener—this is the site that called window.open(). This API returns a Window object which references the opened site The opened—this is the site that was opened. It can reference the Window object of the opener using the window.opener property. Both the opener and opened sites could set different values for COOP, and the combination of the two controls whether the two documents are in the same browsing context or not. When documents are in different browsing contexts, then window.opener in the opened document returns null, instead of the Window reference to the opener. In the opener, the value returned by window.open() returns \"default\" values for some of the properties, such as window.closed Not that these restrictions are in addition to the same-origin restrictions that also apply. There's a lot of moving pieces here, so the follow sections describe various scenarios. Testing Cross-Origin-Opener-Policy with multiple scenarios To test out the impact of the COOP header, I created two simple ASP.NET Core web apps which serve HTML pages. Web app 1, hosted at http://localhost:5011, serves an Index.html document which contains a single button, which runs window.open() to open a popup in web app 2. Web app 2, hosted at http://localhost:5005, serves a Popup.html document, which attempts to read window.opener. The apps are nothing fancy, just basic HTML that shows the value of the Cross-Origin-Opener-Policy used to serve the page and a button to click:  Each of the apps runs a small amount of JavaScript to test the isolation of the site. In the opener, web app 1 reads the value of window.closed; in the isolated scenario, this will always return true, whereas it will return the \"correct\" value when the documents are in a shared context: // Add a button click handler\ndocument.getElementById('open_btn')\n    .addEventListener('click', () => {\n        // Open the popup in a new window\n        const opened = window.open('http://localhost:5005/popup', '_blank', 'popup=true');\n\n        // Check whether we have the correct value for opened.closed\n        document.getElementById('opener_ele')\n            .innerHTML = 'Opened window - reference object <code>opened.closed</code> is ' + (opened.closed\n                ? '<span style=\"color:red\">TRUE</span>'\n                : '<span style=\"color:green\">FALSE</span>');\n});\n On the popup (opened) side, we check the value of window.opener. In the isolated context, this will be null, while in the shared context scenario it will be the standard Window object: document.getElementById('opener_ele')\n    .innerHTML = '<code>window.opener</code> object is ' +\n        (window.opener\n            ? '<span style=\"color:green\">AVAILABLE</span>'\n            : '<span style=\"color:red\">UNAVAILABLE</span>')\n For each app I used my NetEscapades.AspNetCore.SecurityHeaders NuGet package to configure the Cross-Origin-Opener-Policy for each web app with one of the three possible values. In the following sections we look at how the header impacts the behaviour of the apps. The impact of Cross-Origin-Opener-Policy on same-origin communication We'll start with the easy case, when both the opener and opened documents have the same origin, both running on http://localhost:5011. In this scenario, there are no same-origin restrictions, regardless of what Cross-Origin-Opener-Policy you apply to either the opener or the popup. In this scenario, window.closed returns the correct value in the opener (false) and the window.opener value returns the \"real\" Window object to the popup. This happens even with the most-restrictive header value of same-origin:  Each page can interact completely unrestricted with the other, because they're both on the same origin. Where things get interesting is when the pages are cross origin. The impact of Cross-Origin-Opener-Policy on cross-origin communication In this scenario, a website opens a page on a different origin. We'll again start with the easiest scenario, where both sites are using Cross-Origin-Opener-Policy: unsafe-none (or, more likely, not returning the header at all). In this scenario, there are no additional restrictions over the normal same-site restrictions. That means: ✔ window.opener is available in the popup ✔ opened.closed reflects the correct value in the opener document  This scenario is the least secure one. Remember, if there's a malicious site, it could be either the site doing the opening, or it could be the site being opened in the popup (if your site is tricked into opening it). So although there are still same-origin restrictions for accessing the other site's Window object, the side channel vulnerabilities are unmitigated. At the other end of the scale, if either the opener or the opened/popup document return Cross-Origin-Opener-Policy: same-origin, the result is the same: ❌ window.opener is null in the popup ❌ opened.closed always returns true in the opener document The image below shows this in action: the opened.closed property returns true even though the popup is clearly open, while in the popup window.opener is null:  Not that you get the same behaviour when either of the sites uses same-origin, regardless of what the other site uses. Whether or not the sites share a browsing context is a binary decision, so if either of the sites opts out of sharing a context, the result is the same. The final option to consider is same-origin-allow-popups, which is more subtle: When returned by the opened/popup site, it behaves exactly like same-origin, i.e. isolated browsing contexts. When returned by the opener, then if the popup returns unsafe-none (or doesn't return a COOP header), they will share browsing context. If the popup returns anything else, then they're isolated. So in the following, the opener has same-origin-allow-popups while the popup has unsafe-none, and you can see they are sharing a context, as the values are correct and available:  Whereas in the following, the popup does not have unsafe-none (instead it has same-origin-allow-popups), so they don't share a browsing context, and the objects are blocked:  As a reminder, if the popup has same-origin-allow-popups, this is treated the same as same-origin, so even if the opener has unsafe-none, they do not share a browsing context  I'm not going to lie, I found it all quite confusing trying to understand the matrix of possibilities. However, if you consider just the cross-origin scnario, you can narrow the options down to a 3×3 table of options. In the table below, \"Shared ✔\" means that the window.opener and opened values are available, because the sites share a browsing context. In the \"Isolated ❌\" case, the sites are isolated.  Opened Cross-Origin-Opener-Policyunsafe-none / missingsame-origin-allow-popupssame-originOpenerCOOPunsafe-none / missingShared ✔Isolated ❌Isolated ❌same-origin-allow-popupsShared ✔Isolated ❌Isolated ❌same-originIsolated ❌Isolated ❌Isolated ❌The possible states of the browsing context when using the Cross-Origin-Opener-Policy header in a cross-origin scenario  What Cross-Origin-Opener-Policy value should I use? So if you've come this far, maybe you're looking for some advice. Which Cross-Origin-Opener-Policy header value should you use? Luckily, this is relatively easy: if you want to be the most secure, your should use same-origin. This protects you from malicious popups in case you're tricked into calling window.open, but it also protects you if a malicious site opens your site in a popup. Unfortunately, things might not be that simple. Maybe you interact with a payment or authentication site that requires opening in a popup and retrieving a token. If that's the case, you likely won't be able to use same-origin. For this scenario you can use same-origin-allow-popups (and the target authentication/payment site must omit the COOP header or alternatively use unsafe-none). If you do choose to use same-origin-allow-popups for your site then you'll still be protected if a malicious site opens your site in a popup, but you won't be protected from sites that you open with window.open. Rolling-out Cross-Origin-Opener-Policy safely with reporting Given that returning the Cross-Origin-Opener-Policy header has the potential to break both the opened and opener sites, you obviously need to be careful when rolling it out. It's strongly recommended that you use the Reporting API built into browsers to identify any issues in production. Before taking the plunge, you should also consider running the Cross-Origin-Opener-Policy header in \"report only\" mode, by using the Cross-Origin-Opener-Policy-Report-Only header instead. This header \"simulates\" the policy, and sends any violations via the reporting API. This gives you a chance to adjust your site and re-evaluate, before enforcing the policy for real. A half-way house: restrict-properties Throughout this post I've said there's only three values but Chrome actually briefly implemented a fourth value, restrict-properties. This was only available for companies signing up for a trial, and was explicitly meant to handle the payment/authentication scenario I described previously, but relaxing restrictions from the popup's point of view. I don't go into more detail here, as it never made it out of the experimental phase as far as I can tell. Enabling additional features with crossOriginIsolated After the Meltdown and Spectre vulnerabilities were revealed, browser makers removed some of the features they relied on. These were later re-introduced, but were guarded so that they could only be introduced in a \"cross-origin isolated\" state (exposed as window.crossOriginIsolated). To be in a cross-origin isolated state, your site must: Return the Cross-Origin-Opener-Policy header with the value same-origin. Return the Cross-Origin-Embedder-Policy header with the value require-corp or credentialless. I'll talk more about this header in a separate post. If you meet these requirements then you unlock some additional APIs: You can send SharedArrayBuffer via Window.postMessage() calls. Performance.now() gives better precision. Performance.measureUserAgentSpecificMemory() is available. So that's yet another reason to use Cross-Origin-Opener-Policy: same origin for your sites if you can! Summary In this post I discussed the same-origin policy and how, despite its restrictions, your site could leak information via side-channel vectors in the web platform APIs. I then described how you can use Cross-Origin-Opener-Policy (COOP) to mitigate vulnerabilities that are associated with the window.open() and window.opener APIs. I described which header values provide isolation in which scenarios, how the behaviour differs between opener and popup, and which values you should use based on your requirements. Finally, I described the cross-origin isolated state which enables additional APIs and requires that you use the same-origin value."
  },
  {
    "itemId": "https://andrewlock.net/recent-updates-for-netescapades-enumgenerators-interceptors/",
    "raw": "<img src=\"https://andrewlock.net/content/images/2024/enumgenerators_banner.webp\" /><p>In this post I describe a recent update to the <a href=\"https://www.nuget.org/packages/NetEscapades.EnumGenerators/\">NetEscapades.EnumGenerators</a> package. The big new feature introduced in <code>1.0.0-beta11</code> is experimental support for interceptors. Interceptors allow you to replace one method call with a completely different method.</p> <blockquote> <p>This post doesn't discuss <em>how</em> I added support for interceptors; I will describe that in a future post. This post discuss how the feature works in the NuGet package, and how it works in general.</p> </blockquote> <p>I first describe why I created this package, show how to add it to your own project, how to use the basic functionality, and provide some basic benchmarks. Finally I show off the new interceptor feature and discuss what you need to do to enable it.</p> <ul><li><a href=\"#enums-are-often-surprisingly-slow\">Enums are often surprisingly slow</a></li> <li><a href=\"#adding-netescapades-enumgenerators-to-your-project\">Adding NetEscapades.EnumGenerators to your project</a></li> <li><a href=\"#adding-support-for-interceptors\">Adding support for interceptors</a> <ul><li><a href=\"#what-are-interceptors-\">What are interceptors?</a></li> <li><a href=\"#why-would-interceptors-be-useful-for-netescapades-enumgenerators-\">Why would interceptors be useful for NetEscapades.EnumGenerators?</a></li> <li><a href=\"#enabling-interceptor-support-for-netescapades-enumgenerators\">Enabling interceptor support for NetEscapades.EnumGenerators</a></li></ul> </li> <li><a href=\"#disabling-interception-for-specific-enums\">Disabling interception for specific enums</a></li> <li><a href=\"#intercepting-enums-defined-in-other-projects\">Intercepting enums defined in other projects</a></li> <li><a href=\"#caveats-this-won-t-work-everywhere-\">Caveats: this won't work everywhere!</a></li> <li><a href=\"#future-ideas\">Future ideas</a></li></ul> <h2 id=\"enums-are-often-surprisingly-slow\" class=\"heading-with-anchor\"><a href=\"#enums-are-often-surprisingly-slow\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Enums are often surprisingly slow</a></h2> <p><a href=\"https://github.com/andrewlock/NetEscapades.EnumGenerators\">NetEscapades.EnumGenerators</a> was one of the first source generators I created using <a href=\"/exploring-dotnet-6-part-9-source-generator-updates-incremental-generators/\">the incremental generator support introduced in .NET 6</a>. I chose to create this package to work around an annoying characteristic of working with enums: some operations are surprisingly slow.</p> <blockquote> <p>Note that while this has <em>historically</em> been true, this fact won't necessarily remain true forever. In fact, .NET 8 provided a bunch of improvements to enum handling in the runtime.</p> </blockquote> <p>As an example, let's say you have the following enum:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">Colour</span>\n<span class=\"token punctuation\">{</span>\n    Red <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n    Blue <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>At some point, you want to print the name of a <code>Color</code> variable, so you create this helper method:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">PrintColour</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Colour</span> colour<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"You chose \"</span><span class=\"token operator\">+</span> colour<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// You chose Red</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>While this <em>looks</em> like it should be fast, it's really not. <em>NetEscapades.EnumGenerators</em> works by automatically generating an implementation that <em>is</em> fast. It generates a <code>ToStringFast()</code> method that looks something like this:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ColourExtensions</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> <span class=\"token function\">ToStringFast</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token class-name\">Colour</span> colour<span class=\"token punctuation\">)</span>\n        <span class=\"token operator\">=&gt;</span> colour <span class=\"token keyword\">switch</span>\n        <span class=\"token punctuation\">{</span>\n            Colour<span class=\"token punctuation\">.</span>Red <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">nameof</span><span class=\"token punctuation\">(</span>Colour<span class=\"token punctuation\">.</span>Red<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            Colour<span class=\"token punctuation\">.</span>Blue <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">nameof</span><span class=\"token punctuation\">(</span>Colour<span class=\"token punctuation\">.</span>Blue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            _ <span class=\"token operator\">=&gt;</span> colour<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>This simple switch statement checks for each of the known values of <code>Colour</code> and uses <code>nameof</code> to return the textual representation of the <code>enum</code>. If it's an unknown value, then it falls back to the built-in <code>ToString()</code> implementation to ensure correct handling of unknown values (for example this is valid C#: <code>PrintColour((Colour)123)</code>).</p> <p>If we compare these two implementations using <a href=\"https://benchmarkdotnet.org/\">BenchmarkDotNet</a> for a known colour, you can see how much faster <code>ToStringFast()</code> implementation is:</p> <pre class=\"language-ini\"><code class=\"language-ini\"><span class=\"token key attr-name\">BenchmarkDotNet</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">v0.13.1, OS=Windows 10.0.19042.1348 (20H2/October2020Update)</span>\nIntel Core i7-7500U CPU 2.70GHz (Kaby Lake), 1 CPU, 4 logical and 2 physical cores\n  DefaultJob : .NET Framework 4.8 (4.8.4420.0), X64 RyuJIT\n<span class=\"token key attr-name\">.NET SDK</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">6.0.100</span>\n  DefaultJob : .NET 6.0.0 (6.0.21.52210), X64 RyuJIT\n</code></pre> <table><thead><tr><th>Method</th><th>FX</th><th style=\"text-align:right\">Mean</th><th style=\"text-align:right\">Error</th><th style=\"text-align:right\">StdDev</th><th style=\"text-align:right\">Ratio</th><th style=\"text-align:right\">Gen 0</th><th style=\"text-align:right\">Allocated</th></tr></thead><tbody><tr><td>ToString</td><td><code>net48</code></td><td style=\"text-align:right\">578.276 ns</td><td style=\"text-align:right\">3.3109 ns</td><td style=\"text-align:right\">3.0970 ns</td><td style=\"text-align:right\">1.000</td><td style=\"text-align:right\">0.0458</td><td style=\"text-align:right\">96 B</td></tr><tr><td>ToStringFast</td><td><code>net48</code></td><td style=\"text-align:right\">3.091 ns</td><td style=\"text-align:right\">0.0567 ns</td><td style=\"text-align:right\">0.0443 ns</td><td style=\"text-align:right\">0.005</td><td style=\"text-align:right\">-</td><td style=\"text-align:right\">-</td></tr><tr><td>ToString</td><td><code>net6.0</code></td><td style=\"text-align:right\">17.985 ns</td><td style=\"text-align:right\">0.1230 ns</td><td style=\"text-align:right\">0.1151 ns</td><td style=\"text-align:right\">1.000</td><td style=\"text-align:right\">0.0115</td><td style=\"text-align:right\">24 B</td></tr><tr><td>ToStringFast</td><td><code>net6.0</code></td><td style=\"text-align:right\">0.121 ns</td><td style=\"text-align:right\">0.0225 ns</td><td style=\"text-align:right\">0.0199 ns</td><td style=\"text-align:right\">0.007</td><td style=\"text-align:right\">-</td><td style=\"text-align:right\">-</td></tr></tbody></table> <p>These numbers are a little old now, but the overall pattern hasn't changed: .NET is <em>way</em> faster than .NET Framework, and the <code>ToStringFast()</code> implementation is way faster than the built-in <code>ToString()</code>. Obviously your mileage may vary and the results will depend on the specific enum you're using, but in general, using the source generator should give you a free performance boost.</p> <h2 id=\"adding-netescapades-enumgenerators-to-your-project\" class=\"heading-with-anchor\"><a href=\"#adding-netescapades-enumgenerators-to-your-project\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Adding NetEscapades.EnumGenerators to your project</a></h2> <p>You can install <em>NetEscapades.EnumGenerators</em> into your own projects using</p> <pre class=\"language-bash\"><code class=\"language-bash\">dotnet <span class=\"token function\">add</span> package NetEscapades.EnumGenerators <span class=\"token parameter variable\">--prerelease</span>\n</code></pre> <blockquote> <p>Note that this NuGet package uses incremental generator APIs introduced in the .NET 7 SDK incremental generator APIs, so you must be using at least the .NET 7 SDK, although you can still <em>target</em> earlier frameworks. If you wish to use the interceptors feature described later in the post, you must use the .NET 8.0.4xx SDK at a minimum.</p> </blockquote> <p>This adds a <code>&lt;PackageReference&gt;</code> to your project. You can additionally mark the package as <code>PrivateAssets=\"all\"</code> and <code>ExcludeAssets=\"runtime\"</code>.</p> <pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Project</span> <span class=\"token attr-name\">Sdk</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Microsoft.NET.Sdk<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>PropertyGroup</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>OutputType</span><span class=\"token punctuation\">&gt;</span></span>Exe<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>OutputType</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>TargetFramework</span><span class=\"token punctuation\">&gt;</span></span>net8.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>TargetFramework</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>PropertyGroup</span><span class=\"token punctuation\">&gt;</span></span>\n\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ItemGroup</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token comment\">&lt;!-- 👇 Add the package reference--&gt;</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>PackageReference</span> <span class=\"token attr-name\">Include</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>NetEscapades.EnumGenerators<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">Version</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>1.0.0-beta11<span class=\"token punctuation\">\"</span></span> \n    <span class=\"token attr-name\">PrivateAssets</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>all<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">ExcludeAssets</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>runtime<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n    <span class=\"token comment\">&lt;!-- --&gt;</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ItemGroup</span><span class=\"token punctuation\">&gt;</span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Project</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre> <blockquote> <p>Setting <code>PrivateAssets=\"all\"</code> means any projects referencing this one won't get a reference to the <em>NetEscapades.EnumGenerators</em> package. Setting <code>ExcludeAssets=\"runtime\"</code> ensures the <em>NetEscapades.EnumGenerators.Attributes.dll</em> file is not copied to your build output (it is not required at runtime).</p> </blockquote> <p>Adding the package to your project automatically adds a marker attribute, <code>[EnumExtensions]</code>, to your project. To use the generator, add the <code>[EnumExtensions]</code> attribute to an <code>enum</code>. For example:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">NetEscapades<span class=\"token punctuation\">.</span>EnumGenerators</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">EnumExtensions</span></span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">Colour</span>\n<span class=\"token punctuation\">{</span>\n    Red <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n    Blue <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>This generates various extension methods for your <code>enum</code>, including <code>ToStringFast()</code>. You can use this method anywhere you would ordinarily call <code>ToString()</code> on the enum, and benefit from the performance improvement for known values:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">PrintColour</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Colour</span> colour<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"You chose \"</span><span class=\"token operator\">+</span> colour<span class=\"token punctuation\">.</span><span class=\"token function\">ToStringFast</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// You chose Red</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>You can view the definition of <code>ToStringFast()</code> by navigating to it's definition:</p> <p><img src=\"/content/images/2022/enumgenerators.png\" alt=\"The ToStringFast definition for Colour\"></p> <p>The source generator generates many different extension methods, as described in the project's README. It also adds support for the <code>[DisplayName]</code> and other attributes that enable fast-tracking other common behaviours.</p> <p>What's more, you can even generate these performance-related extensions for <em>external</em> enums, such as those defined in the runtime or in other NuGet packages. For this you need the generic <code>[EnumExtensions&lt;T&gt;]</code> assembly attribute:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">NetEscapades<span class=\"token punctuation\">.</span>EnumGenerators</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token target keyword\">assembly</span><span class=\"token punctuation\">:</span><span class=\"token class-name\">EnumExtensions&lt;DateTimeKind&gt;</span></span><span class=\"token punctuation\">]</span>\n</code></pre> <p>After adding the above attribute to a project, the generator produces helper methods similar to the following</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">partial</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DateTimeKindExtensions</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> <span class=\"token function\">ToStringFast</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token class-name\">DateTimeKind</span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">)</span>\n        <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">value</span> <span class=\"token keyword\">switch</span>\n        <span class=\"token punctuation\">{</span>\n            DateTimeKind<span class=\"token punctuation\">.</span>Local <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">nameof</span><span class=\"token punctuation\">(</span>DateTimeKind<span class=\"token punctuation\">.</span>Local<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            DateTimeKind<span class=\"token punctuation\">.</span>Unspecified <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">nameof</span><span class=\"token punctuation\">(</span>DateTimeKind<span class=\"token punctuation\">.</span>Unspecified<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            DateTimeKind<span class=\"token punctuation\">.</span>Utc <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">nameof</span><span class=\"token punctuation\">(</span>DateTimeKind<span class=\"token punctuation\">.</span>Utc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            _ <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>All of this functionality has been available since <code>1.0.0-beta09</code>, but there's a big new feature that was added to the latest version <code>1.0.0-beta11</code>: interceptors.</p> <h2 id=\"adding-support-for-interceptors\" class=\"heading-with-anchor\"><a href=\"#adding-support-for-interceptors\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Adding support for interceptors</a></h2> <p>Version <code>1.0.0-beta11</code> of <em>NetEscapades.EnumGenerators</em> adds support for interceptors. In this section I'll give a brief overview of interceptors, why you might want them, and how to enable them in your own project.</p> <h3 id=\"what-are-interceptors-\" class=\"heading-with-anchor\"><a href=\"#what-are-interceptors-\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">What are interceptors?</a></h3> <p>Interceptors were an experimental feature originally released in C#12 (with .NET 8) that allow you to replace (or \"intercept\") a method call in your application with a different method. When your app is compiled, the compiler automatically \"swaps out\" the call to the original method with your substitute.</p> <blockquote> <p>If you want to learn more about interceptors I <a href=\"/exploring-the-dotnet-8-preview-changing-method-calls-with-interceptors/\">wrote about them in more detail over a year ago</a>, when I explored how the ASP.NET Core framework is using them for minimal APIs.</p> </blockquote> <p>An obvious question here is why would you want to do that. Why not just call the substitute method directly?</p> <p>The <em>main</em> motivation is ahead-of-time compilation (AOT). Interceptors aren't specifically for AOT, but they are clearly designed with AOT in mind. By using interceptors you could take code which previously wasn't AOT friendly, and replace it with a source-generated version.</p> <p>Customer's don't need to change their code, the source generator just automatically \"upgrades\" the method calls to use the source generated versions. The minimal API and configuration binder AOT support built-in to ASP.NET Core for .NET 8+ uses interceptors to replace the reflection-dependent AOT-unfriendly code with source-generated AOT-friendly equivalents.</p> <blockquote> <p>Another great example from the community is the <a href=\"https://github.com/DapperLib/DapperAOT\">DapperAOT project</a>, which uses a source generator to make <a href=\"https://github.com/DapperLib/Dapper\">the Dapper micro-ORM</a> AOT-compatible.</p> </blockquote> <p>The interceptor API has evolved a little in recent versions of the Roslyn API, but it's still a preview feature as best I can tell. Nevertheless, it presents an interesting possibility for NetEscapades.EnumGenerators!</p> <h3 id=\"why-would-interceptors-be-useful-for-netescapades-enumgenerators-\" class=\"heading-with-anchor\"><a href=\"#why-would-interceptors-be-useful-for-netescapades-enumgenerators-\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Why would interceptors be useful for NetEscapades.EnumGenerators?</a></h3> <p>One of the \"problems\" of <em>NetEscapades.EnumGenerators</em> is that <code>ToStringFast()</code> is a bit of an ugly name 😅 And you always have to remember to explicitly call the extension instead of the slow built-in <code>ToString()</code> method. Every now and again I get an issue raised asking why I can't \"just\" replace <code>ToString()</code> directly. Unfortunately, there's not been a way to do that in C#…until now!</p> <p>I originally explored the possibility of using interceptors in <em>NetEscapades.EnumGenerators</em> about a year ago, when .NET 8 was first released. <a href=\"/a-failed-experiment-with-interceptors-in-csharp-12-and-dotnet-8/\">You can read all about it in detail here</a>, including <em>why</em> it didn't work, but the short answer is that <a href=\"https://github.com/dotnet/roslyn/issues/70841\">there was a bug in the compiler</a> which <a href=\"https://github.com/dotnet/roslyn/pull/71655\">was fixed</a> in version 8.0.300 of the .NET SDK (which shipped with Visual Studio 17.10).</p> <p>With the fix in place, this opened up the possibility of adding an interceptor to <em>NetEscapades.EnumGenerators</em>. The benefit is that if you enable the interceptors for your project, you don't need to call <code>ToStringFast()</code> in your application; the interceptor will kick in and replace all the <code>ToString()</code> calls on your <code>[EnumExtensions]</code> with calls to <code>ToStringFast()</code>!</p> <p>So once you enable interceptors, this code suddenly gets faster!</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">PrintColour</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Colour</span> colour<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// The interceptor replaces this       👇 with ToStringFast()</span>\n    Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"You chose \"</span><span class=\"token operator\">+</span> colour<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// You chose Red</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>The end result is the same, but your code suddenly gets faster without you having to do anything!</p> <p>Currently only <code>ToString()</code> and <code>HasFlag(flag)</code> (for <code>[Flags]</code> enums) are supported by the interceptor, and there are also some other caveats as described later, but for the most part, if you're using a supported version of the .NET SDK, it Just Works™.</p> <h3 id=\"enabling-interceptor-support-for-netescapades-enumgenerators\" class=\"heading-with-anchor\"><a href=\"#enabling-interceptor-support-for-netescapades-enumgenerators\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Enabling interceptor support for NetEscapades.EnumGenerators</a></h3> <p>Interceptor support was introduced as part of the <em>NetEscapades.EnumGenerators</em> <code>1.0.0-beta11</code> package. In order to enable intercepting usages of <code>ToString()</code>, you must do two things:</p> <ul><li>Update to version <code>8.0.400</code> or greater of the .NET SDK. <a href=\"https://learn.microsoft.com/en-us/dotnet/core/porting/versioning-sdk-msbuild-vs\">This ships with Visual Studio version 17.11</a>, so you will need at least that version or higher. Just to clarify, the .NET 9 SDK works too.</li> <li>Enable the interceptor in your <em>.csproj</em> by setting <code>EnableEnumGeneratorInterceptor</code> to <code>true</code>, as shown below.</li></ul> <p>As shown previously, you can add <em>NetEscapades.EnumGenerators</em> to your project using</p> <pre class=\"language-bash\"><code class=\"language-bash\">dotnet <span class=\"token function\">add</span> package NetEscapades.EnumGenerators <span class=\"token parameter variable\">--prerelease</span>\n</code></pre> <p>You should then update your project file with the <code>EnableEnumGeneratorInterceptor</code> property:</p> <pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Project</span> <span class=\"token attr-name\">Sdk</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Microsoft.NET.Sdk<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>PropertyGroup</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>OutputType</span><span class=\"token punctuation\">&gt;</span></span>Exe<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>OutputType</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>TargetFramework</span><span class=\"token punctuation\">&gt;</span></span>net8.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>TargetFramework</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token comment\">&lt;!-- 👇 Add this property to enable the interceptor in the project --&gt;</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>EnableEnumGeneratorInterceptor</span><span class=\"token punctuation\">&gt;</span></span>true<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>EnableEnumGeneratorInterceptor</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>PropertyGroup</span><span class=\"token punctuation\">&gt;</span></span>\n\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ItemGroup</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>PackageReference</span> <span class=\"token attr-name\">Include</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>NetEscapades.EnumGenerators<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">Version</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>1.0.0-beta11<span class=\"token punctuation\">\"</span></span> \n    <span class=\"token attr-name\">PrivateAssets</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>all<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">ExcludeAssets</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>runtime<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ItemGroup</span><span class=\"token punctuation\">&gt;</span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Project</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre> <p>After making that change you'll \"magically\" have interception! Any enums you decorate with the <code>[EnumExtensions]</code> attribute (and similarly any external enums you generate extensions for using <code>[EnumExtensions&lt;T&gt;]</code>) are automatically opted-in to interception.</p> <p>Unfortunately, by it's nature, it's somewhat difficult to <em>tell</em> that interception is working—none of your code visibly changes after all! Unfortunately, I've found disappointingly few ways to confirm it's working as expected, even in your IDE.</p> <p>The main way I found to check if the interceptors are working, is checking the generated output. The interceptor generator results in an additional source-generated file per enum, adding a file with the <code>_Interceptors.g.cs</code> suffix. If you have set <code>EmitGeneratedFiles</code> to <code>true</code> in your project, then these files are visible in the <em>obj/generated</em> folder, but you can also see them directly in Visual Studio or Rider:</p> <p><img src=\"/content/images/2024/interceptors_in_vs.png\" alt=\"The source-generated interceptors are shown with a file suffix of _Interceptors.g.cs\"></p> <p>In the above image you can see that there are interceptor files for both <code>DateTimeKind</code> and <code>EnumInFoo</code>. You can dig into these files to check that a particular usage of <code>ToString()</code> was intercepted, but it's not very friendly or convenient.</p> <blockquote> <p>Note that the current version of Rider 2024.2.7 <a href=\"https://youtrack.jetbrains.com/issue/RIDER-119320/Source-generators-that-multi-target-Roslyn-SDKs-break-Riders-support\">doesn't handle the new layout of the NuGet package</a>, which causes IntelliSense to fail for the source generated code completely currently. I've filed a bug, and hopefully it'll be fixed in a future version of 2024.3.</p> </blockquote> <p>Given that interception should \"just work\", the somewhat-opaque nature of interceptors <em>shouldn't</em> be a big problem, but given there also some <a href=\"#caveats-this-won-t-work-everywhere-\">caveats around interception</a> I wonder if IDEs will make interceptions sites more visible in the future. Even just having an icon next to interception sites seems like it would be a nice addition.</p> <h2 id=\"disabling-interception-for-specific-enums\" class=\"heading-with-anchor\"><a href=\"#disabling-interception-for-specific-enums\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Disabling interception for specific enums</a></h2> <p>By default, all calls to <code>ToString()</code> and <code>HasFlag()</code> for enums defined in your project are intercepted when you enable interception, but you can also opt enums <em>out</em> of interception, while still generating the extension methods. To disable interception per-enum, set <code>IsInterceptable = false</code> in the <code>[EnumExtensions]</code> attribute:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">EnumExtensions</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span>IsInterceptable <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">Colour</span>\n<span class=\"token punctuation\">{</span>\n    Red <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n    Blue <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>Similarly you can disable interception for any external enums you choose to generate extensions for in a project:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"> <span class=\"token comment\">// 👇 This _will_ have interceptors</span>\n<span class=\"token punctuation\">[</span>assembly<span class=\"token punctuation\">:</span>EnumExtensions<span class=\"token operator\">&lt;</span>DateTimeKind<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token comment\">// 👇 This _won't_ have interceptors</span>\n<span class=\"token punctuation\">[</span>assembly<span class=\"token punctuation\">:</span><span class=\"token generic-method\"><span class=\"token function\">EnumExtensions</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>StringComparison<span class=\"token punctuation\">&gt;</span></span></span><span class=\"token punctuation\">(</span>IsInterceptable <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n</code></pre> <p>An important point is that interception here <em>only</em> works inside the <em>same</em> project as the original <code>[EnumExtensions]</code> enum was defined (or where the <code>[EnumExtensions&lt;T&gt;]</code> external attribute is declared). If you want interception to occur in projects that <em>reference</em> the enum, you'll need to opt in to that, as described below.</p> <h2 id=\"intercepting-enums-defined-in-other-projects\" class=\"heading-with-anchor\"><a href=\"#intercepting-enums-defined-in-other-projects\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Intercepting enums defined in other projects</a></h2> <p>The interceptor feature currently only runs in the same project as the <code>enum</code> extensions are defined. If you want an enum to also be intercepted in a different project you should add the <code>[Interceptable&lt;T&gt;]</code> assembly attribute to the project where you want interception.</p> <p>For example, if you have the following enum extensions generated in project A:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token target keyword\">assembly</span><span class=\"token punctuation\">:</span><span class=\"token class-name\">EnumExtensions&lt;DateTimeKind&gt;</span></span><span class=\"token punctuation\">]</span>\n\n<span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">EnumExtensions</span></span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">Colour</span>\n<span class=\"token punctuation\">{</span>\n    Red <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n    Blue <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>and you want to enable interception in project B (which has a reference to project A) you should add the following in project B:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token target keyword\">assembly</span><span class=\"token punctuation\">:</span><span class=\"token class-name\">Interceptable&lt;DateTimeKind&gt;</span></span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token target keyword\">assembly</span><span class=\"token punctuation\">:</span><span class=\"token class-name\">Interceptable&lt;Colour&gt;</span></span><span class=\"token punctuation\">]</span>\n</code></pre> <p>With this change, both project A <em>and</em> B will have interceptions enabled 🎉</p> <h2 id=\"caveats-this-won-t-work-everywhere-\" class=\"heading-with-anchor\"><a href=\"#caveats-this-won-t-work-everywhere-\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Caveats: this won't work everywhere!</a></h2> <p>The interceptors kick in any time you <em>explicitly</em> call <code>ToString()</code> or <code>HasFlag()</code> on an interceptable enum (assuming you have enabled interception and have a high enough .NET SDK). Unfortunately, there are some cases where interception <em>won't</em> work:</p> <ul><li>When <code>ToString()</code> is called in other source generated code. <ul><li>Source generators can't \"see\" other source generated code, so there's no way to intercept these usages.</li></ul> </li> <li>When <code>ToString()</code> is called in already-compiled code. <ul><li>Interception works at compile-time, so if a <code>ToString()</code> method has already been \"baked in\", then the call can't be intercepted.</li></ul> </li> <li>If the <code>ToString()</code> call is <em>implicit</em>. <ul><li>Only explicit calls to <code>ToString()</code> are intercepted.</li> <li>For example, if you use an enum in an interpolated string, <code>\"The value is {Color.Red}\"</code>, there's no explicit call to <code>ToString()</code>, so it won't be intercepted.</li></ul> </li> <li>If the <code>ToString()</code> call is made on a base type, such as <code>System.Enum</code> or <code>object</code> <ul><li>The compile-time type you're calling <code>ToString()</code> on has to be your interceptable enum.</li></ul> </li> <li>If the <code>ToString()</code> call is made on a generic type. <ul><li>This doesn't work, as you would need to call a different interceptor for each <code>T</code></li></ul> </li></ul> <p>To try and reinforce these rules, the following shows cases that <em>can</em> be intercepted, followed by cases that <em>won't</em> be intercepted:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">EnumExtensions</span></span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">Colour</span>\n<span class=\"token punctuation\">{</span>\n    Red <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n    Blue <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// All the examples in this method CAN be intercepted</span>\n<span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">CanIntercept</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> ok1 <span class=\"token operator\">=</span> Color<span class=\"token punctuation\">.</span>Red<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ✅</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> red <span class=\"token operator\">=</span> Color<span class=\"token punctuation\">.</span>Red<span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> ok2 <span class=\"token operator\">=</span> red<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ✅</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> ok3 <span class=\"token operator\">=</span> <span class=\"token string\">\"The colour is \"</span> <span class=\"token operator\">+</span> red<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ✅</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> ok4 <span class=\"token operator\">=</span> <span class=\"token interpolation-string\"><span class=\"token string\">$\"The colour is </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">red<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ✅</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">CantIntercept</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> bad1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>System<span class=\"token punctuation\">.</span>Enum<span class=\"token punctuation\">)</span>Color<span class=\"token punctuation\">.</span>Red<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ❌ Base type</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> bad2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">object</span><span class=\"token punctuation\">)</span>Color<span class=\"token punctuation\">.</span>Red<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ❌ Base type</span>\n    \n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> bad3 <span class=\"token operator\">=</span> <span class=\"token string\">\"The colour is \"</span> <span class=\"token operator\">+</span> red<span class=\"token punctuation\">;</span> <span class=\"token comment\">// ❌ implicit</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> bad4 <span class=\"token operator\">=</span> <span class=\"token interpolation-string\"><span class=\"token string\">$\"The colour is </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">red</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ❌ implicit</span>\n\n    <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> <span class=\"token generic-method\"><span class=\"token function\">Write</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">&gt;</span></span></span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> val<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">where</span> <span class=\"token class-name\">T</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">Enum</span></span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> val<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ❌ generic</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>Another important aspect to be aware of is that the <code>ToStringFast()</code> implementation used in the interceptor is aware of the <code>[Description]</code> and <code>[Display]</code> attributes, and will preferentially use the values they provide over the simple name of the enum member. That means <code>ToString</code> and <code>ToStringFast()</code> may give different values in some cases:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">EnumExtensions</span></span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">Values</span>\n<span class=\"token punctuation\">{</span>\n    First<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">Display</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span>Name <span class=\"token operator\">=</span> <span class=\"token string\">\"2nd\"</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span>\n    Second<span class=\"token punctuation\">,</span>\n    Third<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> without <span class=\"token operator\">=</span> Values<span class=\"token punctuation\">.</span>Second<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Returns \"Second\" when interception is disabled</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> with <span class=\"token operator\">=</span> Values<span class=\"token punctuation\">.</span>Second<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Returns \"2nd\" when interception is enabled</span>\n</code></pre> <p>So as you can see, on the one hand, interceptors can give you a \"free\" speed boost, without having to add <code>ToStringFast()</code> calls everywhere, but it won't work for <em>all</em> cases by a long shot.</p> <h2 id=\"future-ideas\" class=\"heading-with-anchor\"><a href=\"#future-ideas\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Future ideas</a></h2> <p>I'd like to create a stable version of the package soon, but there are a couple of things I'd like to address first.</p> <p>First of all, I think it was an error adding the extra <code>[Description]</code>/<code>[Display]</code> behaviour to the <em>default</em> <code>ToStringFast()</code> method; that should have been added to overloads only. Depending on feedback one way or another, I may well make a breaking change and change the default behaviour.</p> <p>This would have the benefit of being a \"safer\" drop in replacement for <code>ToString()</code> in the interceptor scenario, and generally just maps better I think.</p> <p>In terms of interceptors, I don't like the fact that there are lots of ways to \"accidentally\" not use the interceptor. I was considering adding an analyzer suggesting that you call <code>ToString()</code> in certain situations. For example</p> <ul><li>When you use an enum in an interpolated string then the <code>ToString()</code> call <em>won't</em> be intercepted.</li> <li>When you pass an enum to any method that takes an <code>object</code> or <code>System.Enum</code> then <em>if</em> the method serializes the enum, the call won't be intercepted.</li></ul> <p>There's going to be trade-offs if I do add an analyzer for these though, so I'm not entirely sure they're worth doing. And I don't enjoy writing analyzers 😅</p> <p>Nevertheless, I'd be interested to see what people thing about the experimental interceptor support, whether there's any obvious concerns with the current implementation (particularly the <code>ToString()</code>/<code>ToStringFast()</code> differences) or if anyone has further ideas. Please raise <a href=\"https://github.com/andrewlock/NetEscapades.EnumGenerators\">an issue on GitHub</a> if you have any thoughts!</p> <h2 id=\"summary\" class=\"heading-with-anchor\"><a href=\"#summary\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Summary</a></h2> <p>In this post, I described the new experimental interceptor support added to <em>NetEscapades.EnumGenerators</em> in <code>1.0.0-beta11</code>. You can enable interception for supported enums by setting <code>EnableEnumGeneratorInterceptor=true</code> in your <em>.csproj</em> file.</p> <p>Interception is only enabled in the project where the enum is defined; if you want interception in other projects you need to add the <code>[assembly:Interceptable&lt;T&gt;]</code> attribute in those projects. You can <em>disable</em> interception for a specific enum by setting the <code>IsInterceptable</code> property on the <code>[EnumExtensions]</code> attribute.</p> <p>Please give the new version a try, see what you think, if you have any feedback, <a href=\"https://github.com/andrewlock/NetEscapades.EnumGenerators/issues\">raise an issue on GitHub</a>, thanks!</p> ",
    "sanitized": "In this post I describe a recent update to the NetEscapades.EnumGenerators package. The big new feature introduced in 1.0.0-beta11 is experimental support for interceptors. Interceptors allow you to replace one method call with a completely different method.  This post doesn't discuss how I added support for interceptors; I will describe that in a future post. This post discuss how the feature works in the NuGet package, and how it works in general.  I first describe why I created this package, show how to add it to your own project, how to use the basic functionality, and provide some basic benchmarks. Finally I show off the new interceptor feature and discuss what you need to do to enable it. Enums are often surprisingly slow Adding NetEscapades.EnumGenerators to your project Adding support for interceptors What are interceptors? Why would interceptors be useful for NetEscapades.EnumGenerators? Enabling interceptor support for NetEscapades.EnumGenerators  Disabling interception for specific enums Intercepting enums defined in other projects Caveats: this won't work everywhere! Future ideas Enums are often surprisingly slow NetEscapades.EnumGenerators was one of the first source generators I created using the incremental generator support introduced in .NET 6. I chose to create this package to work around an annoying characteristic of working with enums: some operations are surprisingly slow.  Note that while this has historically been true, this fact won't necessarily remain true forever. In fact, .NET 8 provided a bunch of improvements to enum handling in the runtime.  As an example, let's say you have the following enum: public enum Colour\n{\n    Red = 0,\n    Blue = 1,\n}\n At some point, you want to print the name of a Color variable, so you create this helper method: public void PrintColour(Colour colour)\n{\n    Console.WriteLine(\"You chose \"+ colour.ToString()); // You chose Red\n}\n While this looks like it should be fast, it's really not. NetEscapades.EnumGenerators works by automatically generating an implementation that is fast. It generates a ToStringFast() method that looks something like this: public static class ColourExtensions\n{\n    public string ToStringFast(this Colour colour)\n        => colour switch\n        {\n            Colour.Red => nameof(Colour.Red),\n            Colour.Blue => nameof(Colour.Blue),\n            _ => colour.ToString(),\n        }\n    }\n}\n This simple switch statement checks for each of the known values of Colour and uses nameof to return the textual representation of the enum. If it's an unknown value, then it falls back to the built-in ToString() implementation to ensure correct handling of unknown values (for example this is valid C#: PrintColour((Colour)123)). If we compare these two implementations using BenchmarkDotNet for a known colour, you can see how much faster ToStringFast() implementation is: BenchmarkDotNet=v0.13.1, OS=Windows 10.0.19042.1348 (20H2/October2020Update)\nIntel Core i7-7500U CPU 2.70GHz (Kaby Lake), 1 CPU, 4 logical and 2 physical cores\n  DefaultJob : .NET Framework 4.8 (4.8.4420.0), X64 RyuJIT\n.NET SDK=6.0.100\n  DefaultJob : .NET 6.0.0 (6.0.21.52210), X64 RyuJIT\n MethodFXMeanErrorStdDevRatioGen 0AllocatedToStringnet48578.276 ns3.3109 ns3.0970 ns1.0000.045896 BToStringFastnet483.091 ns0.0567 ns0.0443 ns0.005--ToStringnet6.017.985 ns0.1230 ns0.1151 ns1.0000.011524 BToStringFastnet6.00.121 ns0.0225 ns0.0199 ns0.007-- These numbers are a little old now, but the overall pattern hasn't changed: .NET is way faster than .NET Framework, and the ToStringFast() implementation is way faster than the built-in ToString(). Obviously your mileage may vary and the results will depend on the specific enum you're using, but in general, using the source generator should give you a free performance boost. Adding NetEscapades.EnumGenerators to your project You can install NetEscapades.EnumGenerators into your own projects using dotnet add package NetEscapades.EnumGenerators --prerelease\n  Note that this NuGet package uses incremental generator APIs introduced in the .NET 7 SDK incremental generator APIs, so you must be using at least the .NET 7 SDK, although you can still target earlier frameworks. If you wish to use the interceptors feature described later in the post, you must use the .NET 8.0.4xx SDK at a minimum.  This adds a <PackageReference> to your project. You can additionally mark the package as PrivateAssets=\"all\" and ExcludeAssets=\"runtime\". <Project Sdk=\"Microsoft.NET.Sdk\">\n\n  <PropertyGroup>\n    <OutputType>Exe</OutputType>\n    <TargetFramework>net8.0</TargetFramework>\n  </PropertyGroup>\n\n  <ItemGroup>\n    <!-- 👇 Add the package reference-->\n    <PackageReference Include=\"NetEscapades.EnumGenerators\" Version=\"1.0.0-beta11\" \n    PrivateAssets=\"all\" ExcludeAssets=\"runtime\" />\n    <!-- -->\n  </ItemGroup>\n\n</Project>\n  Setting PrivateAssets=\"all\" means any projects referencing this one won't get a reference to the NetEscapades.EnumGenerators package. Setting ExcludeAssets=\"runtime\" ensures the NetEscapades.EnumGenerators.Attributes.dll file is not copied to your build output (it is not required at runtime).  Adding the package to your project automatically adds a marker attribute, [EnumExtensions], to your project. To use the generator, add the [EnumExtensions] attribute to an enum. For example: using NetEscapades.EnumGenerators;\n\n[EnumExtensions]\npublic enum Colour\n{\n    Red = 0,\n    Blue = 1,\n}\n This generates various extension methods for your enum, including ToStringFast(). You can use this method anywhere you would ordinarily call ToString() on the enum, and benefit from the performance improvement for known values: public void PrintColour(Colour colour)\n{\n    Console.WriteLine(\"You chose \"+ colour.ToStringFast()); // You chose Red\n}\n You can view the definition of ToStringFast() by navigating to it's definition:  The source generator generates many different extension methods, as described in the project's README. It also adds support for the [DisplayName] and other attributes that enable fast-tracking other common behaviours. What's more, you can even generate these performance-related extensions for external enums, such as those defined in the runtime or in other NuGet packages. For this you need the generic [EnumExtensions<T>] assembly attribute: using NetEscapades.EnumGenerators;\n\n[assembly:EnumExtensions<DateTimeKind>]\n After adding the above attribute to a project, the generator produces helper methods similar to the following public static partial class DateTimeKindExtensions\n{\n    public static string ToStringFast(this DateTimeKind value)\n        => value switch\n        {\n            DateTimeKind.Local => nameof(DateTimeKind.Local),\n            DateTimeKind.Unspecified => nameof(DateTimeKind.Unspecified),\n            DateTimeKind.Utc => nameof(DateTimeKind.Utc),\n            _ => value.ToString(),\n        };\n}\n All of this functionality has been available since 1.0.0-beta09, but there's a big new feature that was added to the latest version 1.0.0-beta11: interceptors. Adding support for interceptors Version 1.0.0-beta11 of NetEscapades.EnumGenerators adds support for interceptors. In this section I'll give a brief overview of interceptors, why you might want them, and how to enable them in your own project. What are interceptors? Interceptors were an experimental feature originally released in C#12 (with .NET 8) that allow you to replace (or \"intercept\") a method call in your application with a different method. When your app is compiled, the compiler automatically \"swaps out\" the call to the original method with your substitute.  If you want to learn more about interceptors I wrote about them in more detail over a year ago, when I explored how the ASP.NET Core framework is using them for minimal APIs.  An obvious question here is why would you want to do that. Why not just call the substitute method directly? The main motivation is ahead-of-time compilation (AOT). Interceptors aren't specifically for AOT, but they are clearly designed with AOT in mind. By using interceptors you could take code which previously wasn't AOT friendly, and replace it with a source-generated version. Customer's don't need to change their code, the source generator just automatically \"upgrades\" the method calls to use the source generated versions. The minimal API and configuration binder AOT support built-in to ASP.NET Core for .NET 8+ uses interceptors to replace the reflection-dependent AOT-unfriendly code with source-generated AOT-friendly equivalents.  Another great example from the community is the DapperAOT project, which uses a source generator to make the Dapper micro-ORM AOT-compatible.  The interceptor API has evolved a little in recent versions of the Roslyn API, but it's still a preview feature as best I can tell. Nevertheless, it presents an interesting possibility for NetEscapades.EnumGenerators! Why would interceptors be useful for NetEscapades.EnumGenerators? One of the \"problems\" of NetEscapades.EnumGenerators is that ToStringFast() is a bit of an ugly name 😅 And you always have to remember to explicitly call the extension instead of the slow built-in ToString() method. Every now and again I get an issue raised asking why I can't \"just\" replace ToString() directly. Unfortunately, there's not been a way to do that in C#…until now! I originally explored the possibility of using interceptors in NetEscapades.EnumGenerators about a year ago, when .NET 8 was first released. You can read all about it in detail here, including why it didn't work, but the short answer is that there was a bug in the compiler which was fixed in version 8.0.300 of the .NET SDK (which shipped with Visual Studio 17.10). With the fix in place, this opened up the possibility of adding an interceptor to NetEscapades.EnumGenerators. The benefit is that if you enable the interceptors for your project, you don't need to call ToStringFast() in your application; the interceptor will kick in and replace all the ToString() calls on your [EnumExtensions] with calls to ToStringFast()! So once you enable interceptors, this code suddenly gets faster! public void PrintColour(Colour colour)\n{\n    // The interceptor replaces this       👇 with ToStringFast()\n    Console.WriteLine(\"You chose \"+ colour.ToString()); // You chose Red\n}\n The end result is the same, but your code suddenly gets faster without you having to do anything! Currently only ToString() and HasFlag(flag) (for [Flags] enums) are supported by the interceptor, and there are also some other caveats as described later, but for the most part, if you're using a supported version of the .NET SDK, it Just Works™. Enabling interceptor support for NetEscapades.EnumGenerators Interceptor support was introduced as part of the NetEscapades.EnumGenerators 1.0.0-beta11 package. In order to enable intercepting usages of ToString(), you must do two things: Update to version 8.0.400 or greater of the .NET SDK. This ships with Visual Studio version 17.11, so you will need at least that version or higher. Just to clarify, the .NET 9 SDK works too. Enable the interceptor in your .csproj by setting EnableEnumGeneratorInterceptor to true, as shown below. As shown previously, you can add NetEscapades.EnumGenerators to your project using dotnet add package NetEscapades.EnumGenerators --prerelease\n You should then update your project file with the EnableEnumGeneratorInterceptor property: <Project Sdk=\"Microsoft.NET.Sdk\">\n\n  <PropertyGroup>\n    <OutputType>Exe</OutputType>\n    <TargetFramework>net8.0</TargetFramework>\n    <!-- 👇 Add this property to enable the interceptor in the project -->\n    <EnableEnumGeneratorInterceptor>true</EnableEnumGeneratorInterceptor>\n  </PropertyGroup>\n\n  <ItemGroup>\n    <PackageReference Include=\"NetEscapades.EnumGenerators\" Version=\"1.0.0-beta11\" \n    PrivateAssets=\"all\" ExcludeAssets=\"runtime\" />\n  </ItemGroup>\n\n</Project>\n After making that change you'll \"magically\" have interception! Any enums you decorate with the [EnumExtensions] attribute (and similarly any external enums you generate extensions for using [EnumExtensions<T>]) are automatically opted-in to interception. Unfortunately, by it's nature, it's somewhat difficult to tell that interception is working—none of your code visibly changes after all! Unfortunately, I've found disappointingly few ways to confirm it's working as expected, even in your IDE. The main way I found to check if the interceptors are working, is checking the generated output. The interceptor generator results in an additional source-generated file per enum, adding a file with the _Interceptors.g.cs suffix. If you have set EmitGeneratedFiles to true in your project, then these files are visible in the obj/generated folder, but you can also see them directly in Visual Studio or Rider:  In the above image you can see that there are interceptor files for both DateTimeKind and EnumInFoo. You can dig into these files to check that a particular usage of ToString() was intercepted, but it's not very friendly or convenient.  Note that the current version of Rider 2024.2.7 doesn't handle the new layout of the NuGet package, which causes IntelliSense to fail for the source generated code completely currently. I've filed a bug, and hopefully it'll be fixed in a future version of 2024.3.  Given that interception should \"just work\", the somewhat-opaque nature of interceptors shouldn't be a big problem, but given there also some caveats around interception I wonder if IDEs will make interceptions sites more visible in the future. Even just having an icon next to interception sites seems like it would be a nice addition. Disabling interception for specific enums By default, all calls to ToString() and HasFlag() for enums defined in your project are intercepted when you enable interception, but you can also opt enums out of interception, while still generating the extension methods. To disable interception per-enum, set IsInterceptable = false in the [EnumExtensions] attribute: [EnumExtensions(IsInterceptable = false)]\npublic enum Colour\n{\n    Red = 0,\n    Blue = 1,\n}\n Similarly you can disable interception for any external enums you choose to generate extensions for in a project:  // 👇 This _will_ have interceptors\n[assembly:EnumExtensions<DateTimeKind>]\n\n// 👇 This _won't_ have interceptors\n[assembly:EnumExtensions<StringComparison>(IsInterceptable = false)]\n An important point is that interception here only works inside the same project as the original [EnumExtensions] enum was defined (or where the [EnumExtensions<T>] external attribute is declared). If you want interception to occur in projects that reference the enum, you'll need to opt in to that, as described below. Intercepting enums defined in other projects The interceptor feature currently only runs in the same project as the enum extensions are defined. If you want an enum to also be intercepted in a different project you should add the [Interceptable<T>] assembly attribute to the project where you want interception. For example, if you have the following enum extensions generated in project A: [assembly:EnumExtensions<DateTimeKind>]\n\n[EnumExtensions]\npublic enum Colour\n{\n    Red = 0,\n    Blue = 1,\n}\n and you want to enable interception in project B (which has a reference to project A) you should add the following in project B: [assembly:Interceptable<DateTimeKind>]\n[assembly:Interceptable<Colour>]\n With this change, both project A and B will have interceptions enabled 🎉 Caveats: this won't work everywhere! The interceptors kick in any time you explicitly call ToString() or HasFlag() on an interceptable enum (assuming you have enabled interception and have a high enough .NET SDK). Unfortunately, there are some cases where interception won't work: When ToString() is called in other source generated code. Source generators can't \"see\" other source generated code, so there's no way to intercept these usages.  When ToString() is called in already-compiled code. Interception works at compile-time, so if a ToString() method has already been \"baked in\", then the call can't be intercepted.  If the ToString() call is implicit. Only explicit calls to ToString() are intercepted. For example, if you use an enum in an interpolated string, \"The value is {Color.Red}\", there's no explicit call to ToString(), so it won't be intercepted.  If the ToString() call is made on a base type, such as System.Enum or object The compile-time type you're calling ToString() on has to be your interceptable enum.  If the ToString() call is made on a generic type. This doesn't work, as you would need to call a different interceptor for each T  To try and reinforce these rules, the following shows cases that can be intercepted, followed by cases that won't be intercepted: [EnumExtensions]\npublic enum Colour\n{\n    Red = 0,\n    Blue = 1,\n}\n\n// All the examples in this method CAN be intercepted\npublic void CanIntercept()\n{\n    var ok1 = Color.Red.ToString(); // ✅\n    var red = Color.Red;\n    var ok2 = red.ToString(); // ✅\n    var ok3 = \"The colour is \" + red.ToString(); // ✅\n    var ok4 = $\"The colour is {red.ToString()}\"; // ✅\n}\n\npublic void CantIntercept()\n{\n    var bad1 = ((System.Enum)Color.Red).ToString(); // ❌ Base type\n    var bad2 = ((object)Color.Red).ToString(); // ❌ Base type\n    \n    var bad3 = \"The colour is \" + red; // ❌ implicit\n    var bad4 = $\"The colour is {red}\"; // ❌ implicit\n\n    string Write<T>(T val)\n        where T : Enum\n    {\n        return val.ToString(); // ❌ generic\n    }\n}\n Another important aspect to be aware of is that the ToStringFast() implementation used in the interceptor is aware of the [Description] and [Display] attributes, and will preferentially use the values they provide over the simple name of the enum member. That means ToString and ToStringFast() may give different values in some cases: [EnumExtensions]\npublic enum Values\n{\n    First,\n    [Display(Name = \"2nd\")]\n    Second,\n    Third,\n}\n\nvar without = Values.Second.ToString(); // Returns \"Second\" when interception is disabled\nvar with = Values.Second.ToString(); // Returns \"2nd\" when interception is enabled\n So as you can see, on the one hand, interceptors can give you a \"free\" speed boost, without having to add ToStringFast() calls everywhere, but it won't work for all cases by a long shot. Future ideas I'd like to create a stable version of the package soon, but there are a couple of things I'd like to address first. First of all, I think it was an error adding the extra [Description]/[Display] behaviour to the default ToStringFast() method; that should have been added to overloads only. Depending on feedback one way or another, I may well make a breaking change and change the default behaviour. This would have the benefit of being a \"safer\" drop in replacement for ToString() in the interceptor scenario, and generally just maps better I think. In terms of interceptors, I don't like the fact that there are lots of ways to \"accidentally\" not use the interceptor. I was considering adding an analyzer suggesting that you call ToString() in certain situations. For example When you use an enum in an interpolated string then the ToString() call won't be intercepted. When you pass an enum to any method that takes an object or System.Enum then if the method serializes the enum, the call won't be intercepted. There's going to be trade-offs if I do add an analyzer for these though, so I'm not entirely sure they're worth doing. And I don't enjoy writing analyzers 😅 Nevertheless, I'd be interested to see what people thing about the experimental interceptor support, whether there's any obvious concerns with the current implementation (particularly the ToString()/ToStringFast() differences) or if anyone has further ideas. Please raise an issue on GitHub if you have any thoughts! Summary In this post, I described the new experimental interceptor support added to NetEscapades.EnumGenerators in 1.0.0-beta11. You can enable interception for supported enums by setting EnableEnumGeneratorInterceptor=true in your .csproj file. Interception is only enabled in the project where the enum is defined; if you want interception in other projects you need to add the [assembly:Interceptable<T>] attribute in those projects. You can disable interception for a specific enum by setting the IsInterceptable property on the [EnumExtensions] attribute. Please give the new version a try, see what you think, if you have any feedback, raise an issue on GitHub, thanks!"
  },
  {
    "itemId": "https://andrewlock.net/working-with-the-result-pattern-part-4-is-the-result-pattern-worth-it/",
    "raw": "<img src=\"https://andrewlock.net/content/images/2024/balance_scales.webp\" /><nav><p>This is the four post in the series: <a href=\"/series/working-with-the-result-pattern/\">Working with the result pattern</a>. </p> <ol class=\"list-none\"><li><a href=\"/working-with-the-result-pattern-part-1-replacing-exceptions-as-control-flow/\">Part 1 - Replacing Exceptions-as-flow-control with the result pattern</a></li><li><a href=\"/working-with-the-result-pattern-part-2-safety-and-simplicity-with-linq/\">Part 2 - Safety and simplicity with LINQ</a></li><li><a href=\"/working-with-the-result-pattern-part-3-adding-more-extensions/\">Part 3 - Adding more extensions to Result&lt;T&gt;</a></li><li>Part 4 - Is the result pattern worth it? (this post) </li></ol></nav><p>In this series I've been discussing one particular version of using the result pattern to replace exceptions as flow control, showing how <a href=\"/working-with-the-result-pattern-part-2-safety-and-simplicity-with-linq/\">using LINQ's query syntax</a> can dramatically improve the readability of your code.</p> <p>This post serves as somewhat of a conclusion to the series, addressing some of the comments and concerns about the pattern in general, the pattern as I discussed in this post, and the \"solution\" of using LINQ to avoid endless nested lambda methods.</p> <h2 id=\"the-different-types-of-result-pattern\" class=\"heading-with-anchor\"><a href=\"#the-different-types-of-result-pattern\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">The different types of result pattern</a></h2> <p>Some of the main take-aways I got from the discourse around (and tangential to) this series are:</p> <ul><li>People often mean quite different things when they say \"result pattern\"</li> <li>A <em>lot</em> of people have opinions on the result pattern that <em>they</em> are referring to</li> <li>Those opinions are visceral and strongly held 😅</li></ul> <p>The starting point for this series was <a href=\"https://x.com/jeremydmiller/status/1811385167765741943?ref_src=twsrc%5Etfw\">Jeremy Miller's tweet</a> in which he expressed a dislike for the result pattern in general.</p> <blockquote class=\"twitter-tweet\"><p lang=\"en\" dir=\"ltr\">Funny, I’m recommending a client start to rip this strategy out of their codebase because of the extra complexity, code noise, and overhead it adds. <a href=\"https://t.co/6BGSAF9sVS\">https://t.co/6BGSAF9sVS</a></p>— Jeremy D. Miller (@jeremydmiller) <a href=\"https://twitter.com/jeremydmiller/status/1811385167765741943?ref_src=twsrc%5Etfw\">July 11, 2024</a></blockquote><script async=\"\" src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script><p>His argument (expressed in various threads) is that the result pattern adds a lot of ceremony (and therefore complexity) which is unnecessary. A specific example he gives his where you have Mediator handlers calling <em>other</em> mediator handlers, where each nested handler is a \"step\" in the overall flow, each returning a result that needs to be checked and handled.</p> <p>That's an extremely \"heavy\" version of the result pattern, which is tied to all sorts of infrastructure, likely with onion architecture mechanics layered over it; I can totally see where the aversion comes from.</p> <blockquote> <p>If you're interested in which approach Jeremy <em>does</em> like, you should take a look at his <a href=\"https://wolverinefx.net/\">Wolverine framework</a> which is built around a philosophy of low ceremony and using code generation to fill in the gaps.</p> </blockquote> <p>At the other end of the spectrum, at around the same time, <a href=\"https://x.com/Aaronontheweb\">Aaron Stannard</a> was <a href=\"https://x.com/Aaronontheweb/status/1844456107756134807\">arguing <em>for</em> the result pattern</a>, but in this case a much more lightweight version:</p> <blockquote class=\"twitter-tweet\"><p lang=\"en\" dir=\"ltr\">I read this thread yesterday <a href=\"https://t.co/o333vEdype\">https://t.co/o333vEdype</a> and was blown away by <br><br>1. How many devs still use exceptions for flow control<br>2. Devs w/ this pattern _use a library_ for it instead of just defining a simple class<br>3. How many devs believe C# needs DUs to make this workable</p>— Aaron Stannard (@Aaronontheweb) <a href=\"https://twitter.com/Aaronontheweb/status/1844456107756134807?ref_src=twsrc%5Etfw\">October 10, 2024</a></blockquote><script async=\"\" src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script><p>Personally, what Aaron describes in his post is not what <em>I</em> typically think of when you say \"result pattern\". <a href=\"https://x.com/Aaronontheweb/status/1844458368708272595\">In his example</a> he essentially returns a \"status\" with the return value:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">QueryResponseStatus</span>\n<span class=\"token punctuation\">{</span>\n    Success<span class=\"token punctuation\">,</span>\n    NotFound<span class=\"token punctuation\">,</span>\n    Error<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">record</span> <span class=\"token generic-method\"><span class=\"token function\">QueryResponse</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">&gt;</span></span></span><span class=\"token punctuation\">(</span><span class=\"token class-name\">QueryResponseStatus</span> Status<span class=\"token punctuation\">,</span> <span class=\"token class-name\">T<span class=\"token punctuation\">?</span></span> Result<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> Message<span class=\"token punctuation\">)</span>\n</code></pre> <p>and then uses C# pattern matching to handle the statuses. Don't get me wrong, this is <em>absolutely</em> how I handle things in <em>most</em> of the code I write. In the vast majority of cases you don't <em>need</em> a framework, and something like this is absolutely good enough, and is arguably what you <em>should</em> be using.</p> <p>An important distinction between Aaron's version of the result pattern and the one I showed in this series is that Aaron uses a <code>Status</code> to describe the error, whereas I used a standard type <code>Result&lt;T&gt;</code> where the \"error\" type was <code>Exception</code>. I naturally took this approach as an obvious progression from \"exceptions as flow control\" (and because it makes the LINQ side easier to demonstrate) but in hindsight, this was probably detrimental to series overall.</p> <blockquote> <p>In my defence, <a href=\"/working-with-the-result-pattern-part-2-safety-and-simplicity-with-linq/#the-resultt-shown-in-these-posts-is-not-what-you-want\">I did mention several times in this series</a> that the <code>Result&lt;T&gt;</code> I was using is probably not what you would want to use in practice.</p> </blockquote> <p>As several people (me included, in the series) pointed out, using <code>Exception</code> as the error turns this result pattern into more of a glorified try-catch replacement. That's a lot less useful than having a real <em>union</em> of possibilities, as this makes it easier to handle different, non-error, states, as well as including additional information for the error case. Aaron's solution emulates unions, and handles simple cases just as well. But you can't even <em>hint</em> at unions without someone saying \"you should just use F#\".</p> <h2 id=\"why-not-just-use-f-\" class=\"heading-with-anchor\"><a href=\"#why-not-just-use-f-\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Why not \"just\" use F#?</a></h2> <p>Don't get me wrong, from what little knowledge I have of F#, I like it. I really enjoyed <a href=\"https://pragprog.com/titles/swdddf/domain-modeling-made-functional/\">Domain Modeling Made Functional</a> by Scott Wlaschin, and many of the \"result pattern\" concepts are explicitly described in that book. But suggesting that if you want to use something <em>resembling</em> the result pattern, then you should go and use F# seems somewhat excessive.</p> <p>Integrating <em>any</em> other programming language into your toolchain comes with overhead. There's cognitive overhead for all the C# programmers that now need to know F# to fully understand your app. There's an overhead around local tooling, as you need to learn how to build and debug the new language. There's an overhead around your build pipeline, which now needs to handle both C# and F#. There's an overhead in the interop boundaries between C# and F#; although it's all .NET those boundaries aren't as seamless as we'd like. All of this is likely a lot simpler than if you were trying to integrate a non-.NET language, but it's still a barrier.</p> <p>So without a doubt, F# can more elegantly express some of the patterns we're <em>emulating</em> in C#, but is it really worth throwing the baby out with the bathwater and moving to F#? I think that's going to be a hard sell.</p> <blockquote> <p>A lot of people, including Scott Wlaschin and others I believe, have described having an F# core domain, an area where F# really shines, with a C# outer shell. I do like the idea of this in principle, but I feel like the overhead argument will always mean it's restricted to niche code bases. I'd be interested to hear how many people have tried this and how they got on with it.</p> </blockquote> <p>At the other end of the spectrum we have people joking that C# programmers have finally found <code>Sequence()</code> and <code>Traverse()</code>. And I get it, they're elegant concepts, but the fact that you kind of <em>have</em> to learn about them to remove a bunch of the cruft in the patterns shown in this series is definitely a mark against the whole approach. While they may be standard tools for functional programmers, they're absolutely not for standard C# devs. Instead they're yet another confusingly-named concept to try to grasp.</p> <p>A common complaint people raised in this series is regarding the \"non-standard\" use of LINQ (although that was literally the <em>point</em> of this series 😅). Some of the complaints are valid; some are less so. I'll tackle some of these below.</p> <h2 id=\"addressing-misconceptions-and-misgivings-about-linq\" class=\"heading-with-anchor\"><a href=\"#addressing-misconceptions-and-misgivings-about-linq\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Addressing misconceptions and misgivings about LINQ</a></h2> <p>As a reminder, this post was primarily about showing how you can turn the common, ugly, nested-lambda style \"result pattern\" code into something much more readable. i.e. turning something like this:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">return</span> <span class=\"token function\">GetClaimValues</span><span class=\"token punctuation\">(</span>info<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">Switch</span><span class=\"token punctuation\">(</span>\n        <span class=\"token named-parameter punctuation\">onSuccess</span><span class=\"token punctuation\">:</span> claims <span class=\"token operator\">=&gt;</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">Result<span class=\"token punctuation\">&lt;</span>Claim<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&gt;</span></span> validatedClaimsResult <span class=\"token operator\">=</span> <span class=\"token function\">ValidateClaims</span><span class=\"token punctuation\">(</span>claims<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> validatedClaimsResult<span class=\"token punctuation\">.</span><span class=\"token function\">Switch</span><span class=\"token punctuation\">(</span>\n                <span class=\"token named-parameter punctuation\">onSuccess</span><span class=\"token punctuation\">:</span> validatedClaims <span class=\"token operator\">=&gt;</span>\n                <span class=\"token punctuation\">{</span>\n                    <span class=\"token class-name\">Result<span class=\"token punctuation\">&lt;</span>Guid<span class=\"token punctuation\">&gt;</span></span> tenantIdResult <span class=\"token operator\">=</span> <span class=\"token function\">GetTenantId</span><span class=\"token punctuation\">(</span>claims<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">return</span> tenantIdResult<span class=\"token punctuation\">.</span><span class=\"token function\">Switch</span><span class=\"token punctuation\">(</span>\n                        <span class=\"token named-parameter punctuation\">onSuccess</span><span class=\"token punctuation\">:</span> tenantId <span class=\"token operator\">=&gt;</span>\n                        <span class=\"token punctuation\">{</span>\n                            <span class=\"token class-name\">Result<span class=\"token punctuation\">&lt;</span>ProvisionUserRequest<span class=\"token punctuation\">&gt;</span></span> createRequestResult <span class=\"token operator\">=</span>\n                                <span class=\"token function\">CreateProvisionUserRequest</span><span class=\"token punctuation\">(</span>tenantId<span class=\"token punctuation\">,</span> validatedClaims<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                            <span class=\"token keyword\">return</span> createRequestResult<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">Switch</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>Result<span class=\"token punctuation\">&lt;</span>UserAccount<span class=\"token punctuation\">&gt;</span><span class=\"token punctuation\">&gt;</span></span></span><span class=\"token punctuation\">(</span>\n                                <span class=\"token named-parameter punctuation\">onSuccess</span><span class=\"token punctuation\">:</span> createRequest <span class=\"token operator\">=&gt;</span>\n                                <span class=\"token punctuation\">{</span>\n                                    <span class=\"token keyword\">return</span> createUserService<span class=\"token punctuation\">.</span><span class=\"token function\">GetOrCreateAccount</span><span class=\"token punctuation\">(</span>createRequest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n                                <span class=\"token named-parameter punctuation\">onFailure</span><span class=\"token punctuation\">:</span> ex <span class=\"token operator\">=&gt;</span> Result<span class=\"token operator\">&lt;</span>UserAccount<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">.</span><span class=\"token function\">Fail</span><span class=\"token punctuation\">(</span>ex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n                        <span class=\"token named-parameter punctuation\">onFailure</span><span class=\"token punctuation\">:</span> ex <span class=\"token operator\">=&gt;</span> Result<span class=\"token operator\">&lt;</span>UserAccount<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">.</span><span class=\"token function\">Fail</span><span class=\"token punctuation\">(</span>ex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n                <span class=\"token named-parameter punctuation\">onFailure</span><span class=\"token punctuation\">:</span> ex <span class=\"token operator\">=&gt;</span> Result<span class=\"token operator\">&lt;</span>UserAccount<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">.</span><span class=\"token function\">Fail</span><span class=\"token punctuation\">(</span>ex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token named-parameter punctuation\">onFailure</span><span class=\"token punctuation\">:</span> ex <span class=\"token operator\">=&gt;</span>  Result<span class=\"token operator\">&lt;</span>UserAccount<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">.</span><span class=\"token function\">Fail</span><span class=\"token punctuation\">(</span>ex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre> <p>into something like this:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">from</span> claims <span class=\"token keyword\">in</span> <span class=\"token function\">GetClaimValues</span><span class=\"token punctuation\">(</span>info<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">from</span> validatedClaims <span class=\"token keyword\">in</span> <span class=\"token function\">ValidateClaims</span><span class=\"token punctuation\">(</span>claims<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">from</span> tenantId <span class=\"token keyword\">in</span> <span class=\"token function\">GetTenantId</span><span class=\"token punctuation\">(</span>validatedClaims<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">from</span> createRequest <span class=\"token keyword\">in</span> <span class=\"token function\">CreateProvisionUserRequest</span><span class=\"token punctuation\">(</span>tenantId<span class=\"token punctuation\">,</span> validatedClaims<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">from</span> userAccount <span class=\"token keyword\">in</span> createUserService<span class=\"token punctuation\">.</span><span class=\"token function\">GetOrCreateAccount2</span><span class=\"token punctuation\">(</span>createRequest<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">select</span> userAccount<span class=\"token punctuation\">;</span>\n</code></pre> <p>If you genuinely have code like the former, then I <em>really</em> struggle to see <em>any</em> argument that it is \"better\" than the latter, on virtually any metric 😅 Functionality wise, the above two examples are identical.</p> <p>I think where people get hung up is in thinking that LINQ is used for SQL. Yes, that was obviously the origin, and it was designed to work <em>with</em> SQL, but it's not <em>tied</em> to SQL. So the above code has none of the \"N+1 issues\" or \"deferred evaluation\" that you might <em>associate</em> with LINQ and SQL.</p> <p>What I will absolutely grant, is that this <em>isn't</em> idiomatic C# or LINQ; you don't often see code like this in most code bases. When I first ran into it it I had to ask a teammate what was going on. That's <em>absolutely</em> going to happen, and it's going to happen for virtually <em>every</em> C# developer that runs into it. That's a big negative for it.</p> <p>On the other hand, it's very easy to explain to people who understand railway oriented programming: The LINQ operators \"unpack\" the <code>T</code> from the <code>Result&lt;T&gt;</code> for the success cases, and short-circuit with an error in the failure case. And you essentially read it as:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> claims <span class=\"token operator\">=</span> <span class=\"token function\">GetClaimValues</span><span class=\"token punctuation\">(</span>info<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> validatedClaims <span class=\"token operator\">=</span> <span class=\"token function\">ValidateClaims</span><span class=\"token punctuation\">(</span>claims<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> tenantId <span class=\"token operator\">=</span> <span class=\"token function\">GetTenantId</span><span class=\"token punctuation\">(</span>validatedClaims<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> createRequest <span class=\"token operator\">=</span> <span class=\"token function\">CreateProvisionUserRequest</span><span class=\"token punctuation\">(</span>tenantId<span class=\"token punctuation\">,</span> validatedClaims<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> userAccount <span class=\"token operator\">=</span> createUserService<span class=\"token punctuation\">.</span><span class=\"token function\">GetOrCreateAccount2</span><span class=\"token punctuation\">(</span>createRequest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">return</span> userAccount<span class=\"token punctuation\">;</span> <span class=\"token comment\">// or return error if anything above failed</span>\n</code></pre> <p>Sure it requires getting used to, but would you rather go back to the big nested lambdas? I think the best argument is that your answer should be \"I don't want either one\" (which is pretty much what Jeremy and Aaron have said).</p> <h2 id=\"the-big-question-to-resultt-or-not-to-resultt-\" class=\"heading-with-anchor\"><a href=\"#the-big-question-to-resultt-or-not-to-resultt-\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">The big question: to <code>Result&lt;T&gt;</code> or not to <code>Result&lt;T&gt;</code>?</a></h2> <p>At this point, I think it's worth taking a step back. The code in the previous section demonstrated a simple procedural (or functional, depending on your perspective)-style of method chaining, which I think it's safe to say is easy to read and understand. And more importantly it's easier to read than the nested lambda approach.</p> <p>However, <a href=\"/working-with-the-result-pattern-part-3-adding-more-extensions/\">in my previous post</a>, I showed that if you have anything remotely more complicated, such as <code>async</code>/<code>await</code> or collection of <code>Result&lt;T&gt;</code> to handle, then you end up in a whole world of additional complexity and confusion. The question is: when things start getting more complicated—mixed <code>Result&lt;T&gt;</code> and <code>T</code>, async <code>Task</code> code, <code>IEnumerable&lt;Result&lt;T&gt;&gt;</code> vs <code>Result&lt;IEnumerable&lt;T&gt;&gt;</code>—does the payoff <em>remain</em> worth it?</p> <p>The LINQ query syntax and the \"magic\" it uses undoubtedly simplifies the <em>reading</em> of the method, as everything is very regimented and easy to follow. But there's no denying it can be infuriating to write: errors often manifest as errors inferring types, and consequently the error messages are very often impenetrable, as you've seen:</p> <p><img src=\"/content/images/2024/result_01.png\" alt=\"Example of the LINQ code failing to compile because it can't infer types: The type arguments for method 'Result ResultExtensions. SelectMany<TSource,TMiddle,TResult>(this Result, Func<TSource,Result>, Func<TSource,TMiddle,TResult>)' cannot be inferred from the query\"></p> <p>That can mean that an apparent simple change to a dependent method, perhaps switching the method from returning a <code>T</code> to <code>Result&lt;T&gt;</code>, or vice versa, can lead you struggling to understand the changes you need to make in the calling LINQ code. Over time you can anticipate and understand the implications of your changes, but is it worth the effort?</p> <p>Fundamentally, I think we're left with the question \"is this code simple?\" I believe the actual LINQ code <em>is</em>, generally, simple. The infrastructure of extension methods and functional concepts (bind vs apply, monadic vs applicative, sequence vs traverse) are, I think, <em>not</em> simple to the average C# developer.</p> <blockquote> <p>Does the average C# developer <em>need</em> to understand these concepts? Maybe not. But it feels like a bad idea to not understand <em>why</em> your code compiles, and if you don't understand them, you're likely going to end up reinventing the wheel somewhere along the line.</p> </blockquote> <p>So where does all this musing leave us? I <em>still</em> think the LINQ code is preferable to the nested lambdas of the result pattern. And I <em>still</em> believe using exceptions as control flow is a bad idea. And I <em>still</em> thing Aaron's basic version of the \"result pattern\" is what you want most of the time.</p> <p>So I guess this series is probably more a musing on the things you <em>can</em> do with LINQ, rather than what you <em>should</em> do. Sorry to everyone that was hoping for something different😳😅</p> <h2 id=\"summary\" class=\"heading-with-anchor\"><a href=\"#summary\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Summary</a></h2> <p>The original intention of this series was to attempt to show how you use the result pattern to <em>reduce</em> boilerplate. I still believe that can be the case, but reminding myself of all the edge cases in the LINQ solution, as well as all the alternatives, really reinforced the fact that this doesn't mean you should use this style of result pattern <em>everywhere</em>. For the vast majority of cases, you can get a way with something much simpler!</p> ",
    "sanitized": "This is the four post in the series: Working with the result pattern.  Part 1 - Replacing Exceptions-as-flow-control with the result patternPart 2 - Safety and simplicity with LINQPart 3 - Adding more extensions to Result<T>Part 4 - Is the result pattern worth it? (this post) In this series I've been discussing one particular version of using the result pattern to replace exceptions as flow control, showing how using LINQ's query syntax can dramatically improve the readability of your code. This post serves as somewhat of a conclusion to the series, addressing some of the comments and concerns about the pattern in general, the pattern as I discussed in this post, and the \"solution\" of using LINQ to avoid endless nested lambda methods. The different types of result pattern Some of the main take-aways I got from the discourse around (and tangential to) this series are: People often mean quite different things when they say \"result pattern\" A lot of people have opinions on the result pattern that they are referring to Those opinions are visceral and strongly held 😅 The starting point for this series was Jeremy Miller's tweet in which he expressed a dislike for the result pattern in general. Funny, I’m recommending a client start to rip this strategy out of their codebase because of the extra complexity, code noise, and overhead it adds. https://t.co/6BGSAF9sVS— Jeremy D. Miller (@jeremydmiller) July 11, 2024His argument (expressed in various threads) is that the result pattern adds a lot of ceremony (and therefore complexity) which is unnecessary. A specific example he gives his where you have Mediator handlers calling other mediator handlers, where each nested handler is a \"step\" in the overall flow, each returning a result that needs to be checked and handled. That's an extremely \"heavy\" version of the result pattern, which is tied to all sorts of infrastructure, likely with onion architecture mechanics layered over it; I can totally see where the aversion comes from.  If you're interested in which approach Jeremy does like, you should take a look at his Wolverine framework which is built around a philosophy of low ceremony and using code generation to fill in the gaps.  At the other end of the spectrum, at around the same time, Aaron Stannard was arguing for the result pattern, but in this case a much more lightweight version: I read this thread yesterday https://t.co/o333vEdype and was blown away by 1. How many devs still use exceptions for flow control2. Devs w/ this pattern _use a library_ for it instead of just defining a simple class3. How many devs believe C# needs DUs to make this workable— Aaron Stannard (@Aaronontheweb) October 10, 2024Personally, what Aaron describes in his post is not what I typically think of when you say \"result pattern\". In his example he essentially returns a \"status\" with the return value: public enum QueryResponseStatus\n{\n    Success,\n    NotFound,\n    Error,\n}\n\npublic abstract record QueryResponse<T>(QueryResponseStatus Status, T? Result, string Message)\n and then uses C# pattern matching to handle the statuses. Don't get me wrong, this is absolutely how I handle things in most of the code I write. In the vast majority of cases you don't need a framework, and something like this is absolutely good enough, and is arguably what you should be using. An important distinction between Aaron's version of the result pattern and the one I showed in this series is that Aaron uses a Status to describe the error, whereas I used a standard type Result<T> where the \"error\" type was Exception. I naturally took this approach as an obvious progression from \"exceptions as flow control\" (and because it makes the LINQ side easier to demonstrate) but in hindsight, this was probably detrimental to series overall.  In my defence, I did mention several times in this series that the Result<T> I was using is probably not what you would want to use in practice.  As several people (me included, in the series) pointed out, using Exception as the error turns this result pattern into more of a glorified try-catch replacement. That's a lot less useful than having a real union of possibilities, as this makes it easier to handle different, non-error, states, as well as including additional information for the error case. Aaron's solution emulates unions, and handles simple cases just as well. But you can't even hint at unions without someone saying \"you should just use F#\". Why not \"just\" use F#? Don't get me wrong, from what little knowledge I have of F#, I like it. I really enjoyed Domain Modeling Made Functional by Scott Wlaschin, and many of the \"result pattern\" concepts are explicitly described in that book. But suggesting that if you want to use something resembling the result pattern, then you should go and use F# seems somewhat excessive. Integrating any other programming language into your toolchain comes with overhead. There's cognitive overhead for all the C# programmers that now need to know F# to fully understand your app. There's an overhead around local tooling, as you need to learn how to build and debug the new language. There's an overhead around your build pipeline, which now needs to handle both C# and F#. There's an overhead in the interop boundaries between C# and F#; although it's all .NET those boundaries aren't as seamless as we'd like. All of this is likely a lot simpler than if you were trying to integrate a non-.NET language, but it's still a barrier. So without a doubt, F# can more elegantly express some of the patterns we're emulating in C#, but is it really worth throwing the baby out with the bathwater and moving to F#? I think that's going to be a hard sell.  A lot of people, including Scott Wlaschin and others I believe, have described having an F# core domain, an area where F# really shines, with a C# outer shell. I do like the idea of this in principle, but I feel like the overhead argument will always mean it's restricted to niche code bases. I'd be interested to hear how many people have tried this and how they got on with it.  At the other end of the spectrum we have people joking that C# programmers have finally found Sequence() and Traverse(). And I get it, they're elegant concepts, but the fact that you kind of have to learn about them to remove a bunch of the cruft in the patterns shown in this series is definitely a mark against the whole approach. While they may be standard tools for functional programmers, they're absolutely not for standard C# devs. Instead they're yet another confusingly-named concept to try to grasp. A common complaint people raised in this series is regarding the \"non-standard\" use of LINQ (although that was literally the point of this series 😅). Some of the complaints are valid; some are less so. I'll tackle some of these below. Addressing misconceptions and misgivings about LINQ As a reminder, this post was primarily about showing how you can turn the common, ugly, nested-lambda style \"result pattern\" code into something much more readable. i.e. turning something like this: return GetClaimValues(info)\n    .Switch(\n        onSuccess: claims =>\n        {\n            Result<Claim[]> validatedClaimsResult = ValidateClaims(claims);\n            return validatedClaimsResult.Switch(\n                onSuccess: validatedClaims =>\n                {\n                    Result<Guid> tenantIdResult = GetTenantId(claims);\n                    return tenantIdResult.Switch(\n                        onSuccess: tenantId =>\n                        {\n                            Result<ProvisionUserRequest> createRequestResult =\n                                CreateProvisionUserRequest(tenantId, validatedClaims);\n                            return createRequestResult.Switch<Result<UserAccount>>(\n                                onSuccess: createRequest =>\n                                {\n                                    return createUserService.GetOrCreateAccount(createRequest);\n                                },\n                                onFailure: ex => Result<UserAccount>.Fail(ex));\n                        },\n                        onFailure: ex => Result<UserAccount>.Fail(ex));\n\n                },\n                onFailure: ex => Result<UserAccount>.Fail(ex));\n        },\n        onFailure: ex =>  Result<UserAccount>.Fail(ex));\n into something like this: from claims in GetClaimValues(info)\nfrom validatedClaims in ValidateClaims(claims)\nfrom tenantId in GetTenantId(validatedClaims)\nfrom createRequest in CreateProvisionUserRequest(tenantId, validatedClaims)\nfrom userAccount in createUserService.GetOrCreateAccount2(createRequest)\nselect userAccount;\n If you genuinely have code like the former, then I really struggle to see any argument that it is \"better\" than the latter, on virtually any metric 😅 Functionality wise, the above two examples are identical. I think where people get hung up is in thinking that LINQ is used for SQL. Yes, that was obviously the origin, and it was designed to work with SQL, but it's not tied to SQL. So the above code has none of the \"N+1 issues\" or \"deferred evaluation\" that you might associate with LINQ and SQL. What I will absolutely grant, is that this isn't idiomatic C# or LINQ; you don't often see code like this in most code bases. When I first ran into it it I had to ask a teammate what was going on. That's absolutely going to happen, and it's going to happen for virtually every C# developer that runs into it. That's a big negative for it. On the other hand, it's very easy to explain to people who understand railway oriented programming: The LINQ operators \"unpack\" the T from the Result<T> for the success cases, and short-circuit with an error in the failure case. And you essentially read it as: var claims = GetClaimValues(info);\nvar validatedClaims = ValidateClaims(claims);\nvar tenantId = GetTenantId(validatedClaims);\nvar createRequest = CreateProvisionUserRequest(tenantId, validatedClaims);\nvar userAccount = createUserService.GetOrCreateAccount2(createRequest);\nreturn userAccount; // or return error if anything above failed\n Sure it requires getting used to, but would you rather go back to the big nested lambdas? I think the best argument is that your answer should be \"I don't want either one\" (which is pretty much what Jeremy and Aaron have said). The big question: to Result<T> or not to Result<T>? At this point, I think it's worth taking a step back. The code in the previous section demonstrated a simple procedural (or functional, depending on your perspective)-style of method chaining, which I think it's safe to say is easy to read and understand. And more importantly it's easier to read than the nested lambda approach. However, in my previous post, I showed that if you have anything remotely more complicated, such as async/await or collection of Result<T> to handle, then you end up in a whole world of additional complexity and confusion. The question is: when things start getting more complicated—mixed Result<T> and T, async Task code, IEnumerable<Result<T>> vs Result<IEnumerable<T>>—does the payoff remain worth it? The LINQ query syntax and the \"magic\" it uses undoubtedly simplifies the reading of the method, as everything is very regimented and easy to follow. But there's no denying it can be infuriating to write: errors often manifest as errors inferring types, and consequently the error messages are very often impenetrable, as you've seen:  That can mean that an apparent simple change to a dependent method, perhaps switching the method from returning a T to Result<T>, or vice versa, can lead you struggling to understand the changes you need to make in the calling LINQ code. Over time you can anticipate and understand the implications of your changes, but is it worth the effort? Fundamentally, I think we're left with the question \"is this code simple?\" I believe the actual LINQ code is, generally, simple. The infrastructure of extension methods and functional concepts (bind vs apply, monadic vs applicative, sequence vs traverse) are, I think, not simple to the average C# developer.  Does the average C# developer need to understand these concepts? Maybe not. But it feels like a bad idea to not understand why your code compiles, and if you don't understand them, you're likely going to end up reinventing the wheel somewhere along the line.  So where does all this musing leave us? I still think the LINQ code is preferable to the nested lambdas of the result pattern. And I still believe using exceptions as control flow is a bad idea. And I still thing Aaron's basic version of the \"result pattern\" is what you want most of the time. So I guess this series is probably more a musing on the things you can do with LINQ, rather than what you should do. Sorry to everyone that was hoping for something different😳😅 Summary The original intention of this series was to attempt to show how you use the result pattern to reduce boilerplate. I still believe that can be the case, but reminding myself of all the edge cases in the LINQ solution, as well as all the alternatives, really reinforced the fact that this doesn't mean you should use this style of result pattern everywhere. For the vast majority of cases, you can get a way with something much simpler!"
  },
  {
    "itemId": "https://andrewlock.net/working-with-the-result-pattern-part-3-adding-more-extensions/",
    "raw": "<img src=\"https://andrewlock.net/content/images/2024/confused.png\" /><nav><p>This is the three post in the series: <a href=\"/series/working-with-the-result-pattern/\">Working with the result pattern</a>. </p> <ol class=\"list-none\"><li><a href=\"/working-with-the-result-pattern-part-1-replacing-exceptions-as-control-flow/\">Part 1 - Replacing Exceptions-as-flow-control with the result pattern</a></li><li><a href=\"/working-with-the-result-pattern-part-2-safety-and-simplicity-with-linq/\">Part 2 - Safety and simplicity with LINQ</a></li><li>Part 3 - Adding more extensions to Result&lt;T&gt; (this post) </li><li><a href=\"/working-with-the-result-pattern-part-4-is-the-result-pattern-worth-it/\">Part 4 - Is the result pattern worth it?</a></li></ol></nav><p>In this series I've been showing how you can tidy up code that uses the result pattern <a href=\"/working-with-the-result-pattern-part-2-safety-and-simplicity-with-linq/\">by taking advantage of LINQ</a> and related functional concepts. In this post we'll continue to iterate on the example from the last post, using <code>Result&lt;T&gt;</code> in more places, making some functions <code>async</code> and seeing how to handle that without the result code becoming a mess.</p> <blockquote> <p>This post builds directly on the previous posts, so I strongly recommend you read them first before digging in here.</p> </blockquote> <ul><li><a href=\"#background-where-we-left-offlinq-and-resultt\">Background: where we left off—LINQ and <code>Result&lt;T&gt;</code></a></li> <li><a href=\"#1-handling-cases-where-not-every-method-returns-resultt\">1. Handling cases where not every method returns <code>Result&lt;T&gt;</code></a></li> <li><a href=\"#2-converting-listresultt-into-resultlistt-using-sequence-\">2. Converting <code>List&lt;Result&lt;T&gt;&gt;</code> into <code>Result&lt;List&lt;T&gt;&gt;</code> using <code>Sequence()</code></a></li> <li><a href=\"#3-using-async-await-with-linq-query-syntax\">3. Using <code>async</code>/<code>await</code> with LINQ query syntax</a></li> <li><a href=\"#summary\">Summary</a></li></ul> <h2 id=\"background-where-we-left-offlinq-and-resultt\" class=\"heading-with-anchor\"><a href=\"#background-where-we-left-offlinq-and-resultt\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Background: where we left off—LINQ and <code>Result&lt;T&gt;</code></a></h2> <p>By the end of the last post, we had managed to refactor the <code>Result&lt;T&gt;</code>-based code used in <code>UserProvisioningService.ProvisionUser()</code> to the following, which uses <a href=\"https://learn.microsoft.com/en-us/dotnet/csharp/linq/get-started/write-linq-queries#example---query-syntax\">LINQ query syntax</a> to handle errors automatically very tersely:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserProvisioningService</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CreateUserService</span> createUserService<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">Result<span class=\"token punctuation\">&lt;</span>UserAccount<span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">ProvisionUser</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ExternalLoginInfo</span> info<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// Each call in the chain will \"shot circuit\" if an error occurs,</span>\n        <span class=\"token comment\">// returning an error to the caller without executing the rest of the method</span>\n        <span class=\"token keyword\">return</span>\n            <span class=\"token keyword\">from</span> claims <span class=\"token keyword\">in</span> <span class=\"token function\">GetClaimValues</span><span class=\"token punctuation\">(</span>info<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">from</span> validatedClaims <span class=\"token keyword\">in</span> <span class=\"token function\">ValidateClaims</span><span class=\"token punctuation\">(</span>claims<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">from</span> tenantId <span class=\"token keyword\">in</span> <span class=\"token function\">GetTenantId</span><span class=\"token punctuation\">(</span>validatedClaims<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">from</span> createRequest <span class=\"token keyword\">in</span> <span class=\"token function\">CreateProvisionUserRequest</span><span class=\"token punctuation\">(</span>tenantId<span class=\"token punctuation\">,</span> validatedClaims<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">from</span> userAccount <span class=\"token keyword\">in</span> createUserService<span class=\"token punctuation\">.</span><span class=\"token function\">GetOrCreateAccount2</span><span class=\"token punctuation\">(</span>createRequest<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">select</span> userAccount<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// Stub methods called by ProvisionUser</span>\n    <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\">Result<span class=\"token punctuation\">&lt;</span>Claim<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">GetClaimValues</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ExternalLoginInfo</span> loginInfo<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> Array<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">Empty</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>Claim<span class=\"token punctuation\">&gt;</span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\">Result<span class=\"token punctuation\">&lt;</span>Claim<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">ValidateClaims</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Claim<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> claims<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> claims<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\">Result<span class=\"token punctuation\">&lt;</span>Guid<span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">GetTenantId</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Claim<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> claims<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> Guid<span class=\"token punctuation\">.</span><span class=\"token function\">NewGuid</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\">Result<span class=\"token punctuation\">&lt;</span>ProvisionUserRequest<span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">CreateProvisionUserRequest</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Guid</span> employerId<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Claim<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> claims<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">ProvisionUserRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// External service</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CreateUserService</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">Result<span class=\"token punctuation\">&lt;</span>UserAccount<span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">GetOrCreateAccount</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ProvisionUserRequest</span> request<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>To achieve that terseness <a href=\"/working-with-the-result-pattern-part-2-safety-and-simplicity-with-linq/#adding-linq-support-to-resultt\">we simply implemented two extension methods</a> on <code>Result&lt;T&gt;</code>—<code>Select()</code> and <code>SelectMany()</code>—and the LINQ syntax support lit up.</p> <p>I think it's pretty hard to argue with the terseness of this, but things are rarely as simple as the example I've shown above. In the previous example, each of the \"stub\" methods is a synchronous method (there's no <code>async</code>/<code>await</code> here), and they all return <code>Result&lt;T&gt;</code> values. That's \"easy mode\"; for the rest of the post we'll add some complications and look at how to deal with them.</p> <h2 id=\"1-handling-cases-where-not-every-method-returns-resultt\" class=\"heading-with-anchor\"><a href=\"#1-handling-cases-where-not-every-method-returns-resultt\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">1. Handling cases where not every method returns <code>Result&lt;T&gt;</code></a></h2> <p>For our first example, let's imagine that returning a <code>Result&lt;T&gt;</code> doesn't make sense for all methods. For example, perhaps there's no \"failure\" path for <code>CreateProvisionUserRequest</code>; that might well be the case if this method is just performing a transform creating a DTO:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\">    <span class=\"token comment\">// 👇 Returns ProvisionUserRequest, not Result&lt;ProvisionUserRequest&gt;</span>\n<span class=\"token keyword\">private</span> <span class=\"token return-type class-name\">ProvisionUserRequest</span> <span class=\"token function\">CreateProvisionUserRequest</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Guid</span> employerId<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Claim<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> claims<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">ProvisionUserRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre> <p>Unfortunately, if you make this change, suddenly your LINQ code won't compile:</p> <p><img src=\"/content/images/2024/result_01.png\" alt=\"Example of the LINQ code failing to compile because it can't infer types: The type arguments for method 'Result ResultExtensions. SelectMany<TSource,TMiddle,TResult>(this Result, Func<TSource,Result>, Func<TSource,TMiddle,TResult>)' cannot be inferred from the query\"></p> <p>As is often the case with failures of this kind, the error is disappointingly opaque. Unless you're used to seeing errors like these, it's unlikely you'll spot the issue. The problem is that the <code>SelectMany()</code> extension method we wrote operates on <code>Result&lt;T&gt;</code>, that's why we can use this <code>from &lt;VAL&gt; in &lt;SOURCE&gt;</code> construct. If <code>&lt;source&gt;</code> is not a <code>Result&lt;T&gt;</code>, the compiler doesn't know what to do!</p> <p>One solution is to make sure that <code>&lt;SOURCE&gt;</code> <em>is</em> a <code>Result&lt;T&gt;</code> type. That doesn't mean the method we invoke has to <em>return</em> a <code>Result&lt;T&gt;</code>, it just means we need to create one. For example:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserProvisioningService</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CreateUserService</span> createUserService<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">Result<span class=\"token punctuation\">&lt;</span>UserAccount<span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">ProvisionUser</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ExternalLoginInfo</span> info<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span>\n            <span class=\"token keyword\">from</span> claims <span class=\"token keyword\">in</span> <span class=\"token function\">GetClaimValues</span><span class=\"token punctuation\">(</span>info<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">from</span> validatedClaims <span class=\"token keyword\">in</span> <span class=\"token function\">ValidateClaims</span><span class=\"token punctuation\">(</span>claims<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">from</span> tenantId <span class=\"token keyword\">in</span> <span class=\"token function\">GetTenantId</span><span class=\"token punctuation\">(</span>validatedClaims<span class=\"token punctuation\">)</span>\n            <span class=\"token comment\">// Explicitly wrap return value from CreateProvisionUserRequest() </span>\n            <span class=\"token comment\">// in a Result&lt;T&gt; object 👇</span>\n            <span class=\"token keyword\">from</span> createRequest <span class=\"token keyword\">in</span> Result<span class=\"token operator\">&lt;</span>ProvisionUserRequest<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">.</span><span class=\"token function\">Success</span><span class=\"token punctuation\">(</span><span class=\"token function\">CreateProvisionUserRequest</span><span class=\"token punctuation\">(</span>tenantId<span class=\"token punctuation\">,</span> validatedClaims<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">from</span> userAccount <span class=\"token keyword\">in</span> createUserService<span class=\"token punctuation\">.</span><span class=\"token function\">GetOrCreateAccount2</span><span class=\"token punctuation\">(</span>createRequest<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">select</span> userAccount<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>That's obviously somewhat ugly, so it's quite common to have an extension method to tidy things up</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ResultExtensions</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">Result<span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">&gt;</span></span> <span class=\"token generic-method\"><span class=\"token function\">ToResult</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">&gt;</span></span></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token class-name\">T</span> source<span class=\"token punctuation\">)</span>\n        <span class=\"token operator\">=&gt;</span> Result<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">.</span><span class=\"token function\">Success</span><span class=\"token punctuation\">(</span>source<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>With this simple extension, the code to convert any type to a \"success\" result is simpler:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserProvisioningService</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CreateUserService</span> createUserService<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">Result<span class=\"token punctuation\">&lt;</span>UserAccount<span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">ProvisionUser</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ExternalLoginInfo</span> info<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span>\n            <span class=\"token keyword\">from</span> claims <span class=\"token keyword\">in</span> <span class=\"token function\">GetClaimValues</span><span class=\"token punctuation\">(</span>info<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">from</span> validatedClaims <span class=\"token keyword\">in</span> <span class=\"token function\">ValidateClaims</span><span class=\"token punctuation\">(</span>claims<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">from</span> tenantId <span class=\"token keyword\">in</span> <span class=\"token function\">GetTenantId</span><span class=\"token punctuation\">(</span>validatedClaims<span class=\"token punctuation\">)</span>\n            <span class=\"token comment\">//                  Calling ToResult() on the result is shorter and cleaner👇</span>\n            <span class=\"token keyword\">from</span> createRequest <span class=\"token keyword\">in</span> <span class=\"token function\">CreateProvisionUserRequest</span><span class=\"token punctuation\">(</span>tenantId<span class=\"token punctuation\">,</span> validatedClaims<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ToResult</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">from</span> userAccount <span class=\"token keyword\">in</span> createUserService<span class=\"token punctuation\">.</span><span class=\"token function\">GetOrCreateAccount2</span><span class=\"token punctuation\">(</span>createRequest<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">select</span> userAccount<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>However, in this case, we don't actually <em>need</em> the <code>ToResult()</code>. Instead, you can use a construct built into the LINQ query syntax: <code>let</code>. You can use <a href=\"https://learn.microsoft.com/en-us/dotnet/csharp/linq/get-started/query-expression-basics#let-clause\">a <code>let</code> clause</a> to store the result of a method call into a new variable which is exactly what we want!</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserProvisioningService</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CreateUserService</span> createUserService<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">Result<span class=\"token punctuation\">&lt;</span>UserAccount<span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">ProvisionUser</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ExternalLoginInfo</span> info<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span>\n            <span class=\"token keyword\">from</span> claims <span class=\"token keyword\">in</span> <span class=\"token function\">GetClaimValues</span><span class=\"token punctuation\">(</span>info<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">from</span> validatedClaims <span class=\"token keyword\">in</span> <span class=\"token function\">ValidateClaims</span><span class=\"token punctuation\">(</span>claims<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">from</span> tenantId <span class=\"token keyword\">in</span> <span class=\"token function\">GetTenantId</span><span class=\"token punctuation\">(</span>validatedClaims<span class=\"token punctuation\">)</span>\n            <span class=\"token comment\">// 👇 Use `let x = y` instead of `from x in y` when the return value is not a Result&lt;T&gt;</span>\n            <span class=\"token keyword\">let</span> createRequest <span class=\"token operator\">=</span> <span class=\"token function\">CreateProvisionUserRequest</span><span class=\"token punctuation\">(</span>tenantId<span class=\"token punctuation\">,</span> validatedClaims<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">from</span> userAccount <span class=\"token keyword\">in</span> createUserService<span class=\"token punctuation\">.</span><span class=\"token function\">GetOrCreateAccount2</span><span class=\"token punctuation\">(</span>createRequest<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">select</span> userAccount<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>The lesson here is that not <em>everything</em> needs to be a <code>Result&lt;T&gt;</code> 😃</p> <h2 id=\"2-converting-listresultt-into-resultlistt-using-sequence-\" class=\"heading-with-anchor\"><a href=\"#2-converting-listresultt-into-resultlistt-using-sequence-\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">2. Converting <code>List&lt;Result&lt;T&gt;&gt;</code> into <code>Result&lt;List&lt;T&gt;&gt;</code> using <code>Sequence()</code></a></h2> <p>For our next challenge, we're going to focus on the <code>ValidateClaims()</code> method. Our stub version currently looks like this, for simplicity:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">private</span> <span class=\"token return-type class-name\">Result<span class=\"token punctuation\">&lt;</span>Claim<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">ValidateClaims</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Claim<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> claims<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> claims<span class=\"token punctuation\">;</span>\n</code></pre> <p>Lets imagine it's slightly more complicated than that. We'll imagine that this method operates by calling a helper method <code>ValidateClaim()</code>, which returns a <code>Result&lt;ValidatedClaim&gt;</code> object, something like this:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token comment\">// Stub helper method that operates on a single claim</span>\n<span class=\"token keyword\">private</span> <span class=\"token return-type class-name\">Result<span class=\"token punctuation\">&lt;</span>ValidatedClaim<span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">ValidateClaim</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Claim</span> claim<span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">ValidatedClaim</span><span class=\"token punctuation\">(</span>claim<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// The method we need to implement</span>\n<span class=\"token keyword\">private</span> <span class=\"token return-type class-name\">Result<span class=\"token punctuation\">&lt;</span>IEnumerable<span class=\"token punctuation\">&lt;</span>ValidatedClaim<span class=\"token punctuation\">&gt;</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">ValidateClaims</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Claim<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> claims<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ... TODO</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>I've left the method implementation blank for now. It's clear we need to call <code>ValidateClaim</code> with each of the <code>Claim</code> objects in <code>claims</code>, but <em>then</em> what? If we leverage LINQ again (<a href=\"https://learn.microsoft.com/en-us/dotnet/csharp/linq/get-started/write-linq-queries#example---method-syntax\">method syntax</a> this time), then we get:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">private</span> <span class=\"token return-type class-name\">Result<span class=\"token punctuation\">&lt;</span>IEnumerable<span class=\"token punctuation\">&lt;</span>ValidatedClaim<span class=\"token punctuation\">&gt;</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">ValidateClaims</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Claim<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> claims<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">IEnumerable<span class=\"token punctuation\">&lt;</span>Result<span class=\"token punctuation\">&lt;</span>ValidatedClaim<span class=\"token punctuation\">&gt;</span><span class=\"token punctuation\">&gt;</span></span> validationResults <span class=\"token operator\">=</span>\n        claims<span class=\"token punctuation\">.</span><span class=\"token function\">Select</span><span class=\"token punctuation\">(</span>c <span class=\"token operator\">=&gt;</span> <span class=\"token function\">ValidateClaim</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n \n    <span class=\"token comment\">// ... </span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>That gets us something that looks <em>close</em>: it gives us an <code>IEnumerable&lt;Result&lt;T&gt;&gt;</code>, but what we want is a <code>Result&lt;IEnumerable&lt;T&gt;&gt;</code>. If we think about how to make that translation, we need to:</p> <ul><li>Initialize an empty collection of <code>ValidatedClaim</code> to hold the results.</li> <li>Iterate through all of the <code>Result&lt;T&gt;</code> in <code>validationResults</code>. <ul><li>If the <code>Result&lt;T&gt;</code> is a <code>Fail</code> result, create a <code>Result&lt;IEnumerable&lt;T&gt;&gt;</code> from the failure, and return it.</li> <li>If the <code>Result&lt;T&gt;</code> is a success, append it to the collection of results</li></ul> </li> <li>After iterating through everything, you will either have a failed <code>Result&lt;IEnumerable&lt;T&gt;&gt;</code> containing the first failure, or a <code>Result&lt;IEnumerable&lt;T&gt;&gt;</code> containing all the valid results.</li></ul> <blockquote> <p>As mentioned previously, I don't want to get into the weeds of functional programming or the differences between <a href=\"https://fsharpforfunandprofit.com//posts/elevated-world-3/#example-validation-using-applicative-style-and-monadic-style\">monadic and applicative styles</a>, so I'm using the same monadic approach we have previously here!</p> </blockquote> <p>At a high level, that functionality is encapsulated by the <code>Linq</code> method <code>Aggregate()</code> (which is an the implementation of the functional concept <a href=\"https://en.wikipedia.org/wiki/Fold_(higher-order_function)\">left fold</a>). We can use <code>Aggregate()</code> (combined with a bit of LINQ query syntax for good measure) to implement our final <code>ValidateClaims()</code> method:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">private</span> <span class=\"token return-type class-name\">Result<span class=\"token punctuation\">&lt;</span>IEnumerable<span class=\"token punctuation\">&lt;</span>ValidatedClaim<span class=\"token punctuation\">&gt;</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">ValidateClaims</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Claim<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> claims<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">IEnumerable<span class=\"token punctuation\">&lt;</span>Result<span class=\"token punctuation\">&lt;</span>ValidatedClaim<span class=\"token punctuation\">&gt;</span><span class=\"token punctuation\">&gt;</span></span> validationResults <span class=\"token operator\">=</span> claims<span class=\"token punctuation\">.</span><span class=\"token function\">Select</span><span class=\"token punctuation\">(</span>ValidateClaim<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> zero <span class=\"token operator\">=</span> Result<span class=\"token operator\">&lt;</span>IEnumerable<span class=\"token operator\">&lt;</span>ValidatedClaim<span class=\"token operator\">&gt;&gt;</span><span class=\"token punctuation\">.</span><span class=\"token function\">Success</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> validationResults<span class=\"token punctuation\">.</span><span class=\"token function\">Aggregate</span><span class=\"token punctuation\">(</span>zero<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>accumulated<span class=\"token punctuation\">,</span> current<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span>\n        <span class=\"token keyword\">from</span> previouslyValidated <span class=\"token keyword\">in</span> accumulated    <span class=\"token comment\">// These ensure we return a failure </span>\n        <span class=\"token keyword\">from</span> claim <span class=\"token keyword\">in</span> current                      <span class=\"token comment\">// if there are any failures so far.</span>\n        <span class=\"token keyword\">select</span> previouslyValidated<span class=\"token punctuation\">.</span><span class=\"token function\">Append</span><span class=\"token punctuation\">(</span>claim<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// If no failures, append to the list</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>Personally I find anything that uses <code>Aggregate()</code> is complex to both read and write, so you definitely don't want to be writing this every time you need it. The good news is that we can easily create a generic extension method (<a href=\"https://fsharpforfunandprofit.com/posts/elevated-world-4/#sequence\">called <code>Sequence()</code> for historic reasons</a>) to help with this scenario:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ResultExtensions</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">Result<span class=\"token punctuation\">&lt;</span>IEnumerable<span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">&gt;</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token generic-method\"><span class=\"token function\">Sequence</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">&gt;</span></span></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token class-name\">IEnumerable<span class=\"token punctuation\">&lt;</span>Result<span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">&gt;</span><span class=\"token punctuation\">&gt;</span></span> results<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> zero <span class=\"token operator\">=</span> Result<span class=\"token operator\">&lt;</span>IEnumerable<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">&gt;&gt;</span><span class=\"token punctuation\">.</span><span class=\"token function\">Success</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> results<span class=\"token punctuation\">.</span><span class=\"token function\">Aggregate</span><span class=\"token punctuation\">(</span>zero<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>accumulated<span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span>\n            <span class=\"token keyword\">from</span> previous <span class=\"token keyword\">in</span> accumulated\n            <span class=\"token keyword\">from</span> next <span class=\"token keyword\">in</span> result\n            <span class=\"token keyword\">select</span> previous<span class=\"token punctuation\">.</span><span class=\"token function\">Append</span><span class=\"token punctuation\">(</span>next<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>You can hopefully recognise that this is essentially the same implementation, just updated to work with <code>T</code> instead of <code>Claim</code>. We can now rewrite the <code>ValidateClaims()</code> method to use this extension directly, so that the implementation becomes:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">private</span> <span class=\"token return-type class-name\">Result<span class=\"token punctuation\">&lt;</span>IEnumerable<span class=\"token punctuation\">&lt;</span>ValidatedClaim<span class=\"token punctuation\">&gt;</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">ValidateClaims</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Claim<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> claims<span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">=&gt;</span> claims<span class=\"token punctuation\">.</span><span class=\"token function\">Select</span><span class=\"token punctuation\">(</span>ValidateClaim<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Sequence</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre> <p>That's much better!</p> <h2 id=\"3-using-async-await-with-linq-query-syntax\" class=\"heading-with-anchor\"><a href=\"#3-using-async-await-with-linq-query-syntax\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">3. Using <code>async</code>/<code>await</code> with LINQ query syntax</a></h2> <p>In this section we'll look at a different common scenario: where some or all of the methods are asynchronous and return <code>Task&lt;Result&lt;T&gt;&gt;</code>. For our purposes we'll assume that several of the methods in our LINQ statement are <code>async</code>, for example:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">private</span> <span class=\"token return-type class-name\">Task<span class=\"token punctuation\">&lt;</span>Result<span class=\"token punctuation\">&lt;</span>IEnumerable<span class=\"token punctuation\">&lt;</span>Claim<span class=\"token punctuation\">&gt;</span><span class=\"token punctuation\">&gt;</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">ValidateClaims</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Claim<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> claims<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">private</span> <span class=\"token return-type class-name\">Task<span class=\"token punctuation\">&lt;</span>Result<span class=\"token punctuation\">&lt;</span>Guid<span class=\"token punctuation\">&gt;</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">GetTenantId</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IEnumerable<span class=\"token punctuation\">&lt;</span>Claim<span class=\"token punctuation\">&gt;</span></span> claims<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre> <p>Your first thought may be that you can simply call <code>await</code> inline for the <code>async</code> methods, but unfortunately, that gets you a compiler error:</p> <p><img src=\"/content/images/2024/result_02.png\" alt=\"Example of the LINQ code failing to compile because it can't infer types: The 'await' expression can only be used in a query expression within the first collection expression of the initial 'from' clause or within the collection expression of a 'join' clause\"></p> <p>Instead, we must provide a way for the LINQ statements to work with <code>Task&lt;Result&lt;T&gt;&gt;</code> values, and for that we're back to our old friend <code>SelectMany</code>. In <a href=\"/working-with-the-result-pattern-part-2-safety-and-simplicity-with-linq/\">the previous post</a> I showed how defining a <code>SelectMany()</code> extension method for <code>Result&lt;T&gt;</code> unlocked the LINQ query syntax we've been relying on. The following <code>SelectMany()</code> definition does the same thing for <code>Task&lt;Result&lt;T&gt;&gt;</code>:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TaskResultExtensions</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">async</span> <span class=\"token return-type class-name\">Task<span class=\"token punctuation\">&lt;</span>Result<span class=\"token punctuation\">&lt;</span>TResult<span class=\"token punctuation\">&gt;</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token generic-method\"><span class=\"token function\">SelectMany</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>TSource<span class=\"token punctuation\">,</span> TMiddle<span class=\"token punctuation\">,</span> TResult<span class=\"token punctuation\">&gt;</span></span></span><span class=\"token punctuation\">(</span>\n        <span class=\"token keyword\">this</span> <span class=\"token class-name\">Task<span class=\"token punctuation\">&lt;</span>Result<span class=\"token punctuation\">&lt;</span>TSource<span class=\"token punctuation\">&gt;</span><span class=\"token punctuation\">&gt;</span></span> source<span class=\"token punctuation\">,</span>\n        <span class=\"token class-name\">Func<span class=\"token punctuation\">&lt;</span>TSource<span class=\"token punctuation\">,</span> Task<span class=\"token punctuation\">&lt;</span>Result<span class=\"token punctuation\">&lt;</span>TMiddle<span class=\"token punctuation\">&gt;</span><span class=\"token punctuation\">&gt;</span><span class=\"token punctuation\">&gt;</span></span> collectionSelector<span class=\"token punctuation\">,</span>\n        <span class=\"token class-name\">Func<span class=\"token punctuation\">&lt;</span>TSource<span class=\"token punctuation\">,</span> TMiddle<span class=\"token punctuation\">,</span> TResult<span class=\"token punctuation\">&gt;</span></span> resultSelector<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// await the Task&lt;Result&lt;T&gt;&gt; to get the result</span>\n        <span class=\"token class-name\">Result<span class=\"token punctuation\">&lt;</span>TSource<span class=\"token punctuation\">&gt;</span></span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> source<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span>\n            <span class=\"token keyword\">await</span> result<span class=\"token punctuation\">.</span><span class=\"token function\">Switch</span><span class=\"token punctuation\">(</span>\n                <span class=\"token named-parameter punctuation\">onSuccess</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">async</span> r <span class=\"token operator\">=&gt;</span>\n                <span class=\"token punctuation\">{</span>\n                    <span class=\"token comment\">// we need a second await here</span>\n                    <span class=\"token class-name\">Result<span class=\"token punctuation\">&lt;</span>TMiddle<span class=\"token punctuation\">&gt;</span></span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">collectionSelector</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">.</span><span class=\"token function\">Select</span><span class=\"token punctuation\">(</span>v <span class=\"token operator\">=&gt;</span> <span class=\"token function\">resultSelector</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n                <span class=\"token comment\">// The failure path is synchronous, so wrap the failure in a `Task&lt;&gt;`</span>\n                onFailure<span class=\"token punctuation\">:</span> e <span class=\"token operator\">=&gt;</span> Task<span class=\"token punctuation\">.</span><span class=\"token function\">FromResult</span><span class=\"token punctuation\">(</span>Result<span class=\"token operator\">&lt;</span>TResult<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">.</span><span class=\"token function\">Fail</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n</code></pre> <p>With that addition, we can now handle <code>Task&lt;Result&lt;T&gt;&gt;</code> in LINQ statements. One caveat is that we need to ensure <em>every</em> <code>from</code> statement returns a <code>Task&lt;Result&lt;T&gt;&gt;</code>:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token comment\">// Returns a `Task&lt;Result&lt;T&gt;&gt;`</span>\n<span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">Task<span class=\"token punctuation\">&lt;</span>Result<span class=\"token punctuation\">&lt;</span>UserAccount<span class=\"token punctuation\">&gt;</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">ProvisionUser</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ExternalLoginInfo</span> info<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> \n        <span class=\"token comment\">// Every statment needs to return a Task, so you need to wrap non-async results with Task.FromResult()</span>\n        <span class=\"token keyword\">from</span> claims <span class=\"token keyword\">in</span> Task<span class=\"token punctuation\">.</span><span class=\"token function\">FromResult</span><span class=\"token punctuation\">(</span><span class=\"token function\">GetClaimValues</span><span class=\"token punctuation\">(</span>info<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 👈 Wrap the return value in Task&lt;&gt;</span>\n        <span class=\"token keyword\">from</span> validatedClaims <span class=\"token keyword\">in</span> <span class=\"token function\">ValidateClaims</span><span class=\"token punctuation\">(</span>claims<span class=\"token punctuation\">)</span> <span class=\"token comment\">// Returns Task&lt;Result&lt;T&gt;&gt;</span>\n        <span class=\"token keyword\">from</span> tenantId <span class=\"token keyword\">in</span> <span class=\"token function\">GetTenantId</span><span class=\"token punctuation\">(</span>validatedClaims<span class=\"token punctuation\">)</span> <span class=\"token comment\">// Returns Task&lt;Result&lt;T&gt;&gt;</span>\n        <span class=\"token keyword\">from</span> createRequest <span class=\"token keyword\">in</span> Task<span class=\"token punctuation\">.</span><span class=\"token function\">FromResult</span><span class=\"token punctuation\">(</span><span class=\"token function\">CreateProvisionUserRequest</span><span class=\"token punctuation\">(</span>tenantId<span class=\"token punctuation\">,</span> validatedClaims<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// Wrap the return value in Task&lt;&gt;</span>\n        <span class=\"token keyword\">from</span> userAccount <span class=\"token keyword\">in</span> createUserService<span class=\"token punctuation\">.</span><span class=\"token function\">GetOrCreateAccount</span><span class=\"token punctuation\">(</span>createRequest<span class=\"token punctuation\">)</span> <span class=\"token comment\">// Returns Task&lt;Result&lt;T&gt;&gt;</span>\n        <span class=\"token keyword\">select</span> userAccount<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>The requirement that every method returns the same \"type\" of value (whether that's a <code>Result&lt;T&gt;</code> or <code>Task&lt;Result&lt;T&gt;&gt;</code>) is just the beginning of where things <em>can</em> start to get mucky. We already have a couple of <code>Task.FromResult()</code> in the code above, and that's because those methods return <code>Result&lt;T&gt;</code>. If they returned <code>Task&lt;T&gt;</code>, things would be much more complicated, and that's where you have to start wondering: <em>is</em> this the right approach?</p> <p>In the next post I'll describe where I've ended up in my attitude to this style of result pattern, and discuss some of the comments and criticisms this series has received from various people.</p> <h2 id=\"summary\" class=\"heading-with-anchor\"><a href=\"#summary\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Summary</a></h2> <p>This post expands on the previous posts in the series in which I discuss using the result pattern in practice. In the previous post I showed that using LINQ features can dramatically simplify the amount of boilerplate code the result pattern requires by using LINQ. In this post I expanded the LINQ examples to demonstrate how to support async code, different return types, and collections of results.</p> <p>Each of these additional scenarios can be supported by leveraging LINQ features or providing additional extension methods, however it also raises the question as to whether this is worth the effort given the extra complexity this adds. In the next post in the series I'll discuss some of the pros and cons of this style of result pattern usage.</p> ",
    "sanitized": "This is the three post in the series: Working with the result pattern.  Part 1 - Replacing Exceptions-as-flow-control with the result patternPart 2 - Safety and simplicity with LINQPart 3 - Adding more extensions to Result<T> (this post) Part 4 - Is the result pattern worth it?In this series I've been showing how you can tidy up code that uses the result pattern by taking advantage of LINQ and related functional concepts. In this post we'll continue to iterate on the example from the last post, using Result<T> in more places, making some functions async and seeing how to handle that without the result code becoming a mess.  This post builds directly on the previous posts, so I strongly recommend you read them first before digging in here.  Background: where we left off—LINQ and Result<T> 1. Handling cases where not every method returns Result<T> 2. Converting List<Result<T>> into Result<List<T>> using Sequence() 3. Using async/await with LINQ query syntax Summary Background: where we left off—LINQ and Result<T> By the end of the last post, we had managed to refactor the Result<T>-based code used in UserProvisioningService.ProvisionUser() to the following, which uses LINQ query syntax to handle errors automatically very tersely: public class UserProvisioningService(CreateUserService createUserService)\n{\n    public Result<UserAccount> ProvisionUser(ExternalLoginInfo info)\n    {\n        // Each call in the chain will \"shot circuit\" if an error occurs,\n        // returning an error to the caller without executing the rest of the method\n        return\n            from claims in GetClaimValues(info)\n            from validatedClaims in ValidateClaims(claims)\n            from tenantId in GetTenantId(validatedClaims)\n            from createRequest in CreateProvisionUserRequest(tenantId, validatedClaims)\n            from userAccount in createUserService.GetOrCreateAccount2(createRequest)\n            select userAccount;\n    }\n\n    // Stub methods called by ProvisionUser\n    private Result<Claim[]> GetClaimValues(ExternalLoginInfo loginInfo) => Array.Empty<Claim>();\n    private Result<Claim[]> ValidateClaims(Claim[] claims) => claims;\n    private Result<Guid> GetTenantId(Claim[] claims) => Guid.NewGuid();\n    private Result<ProvisionUserRequest> CreateProvisionUserRequest(Guid employerId, Claim[] claims) => new ProvisionUserRequest();\n}\n\n// External service\npublic class CreateUserService\n{\n    public Result<UserAccount> GetOrCreateAccount(ProvisionUserRequest request) => new();\n}\n To achieve that terseness we simply implemented two extension methods on Result<T>—Select() and SelectMany()—and the LINQ syntax support lit up. I think it's pretty hard to argue with the terseness of this, but things are rarely as simple as the example I've shown above. In the previous example, each of the \"stub\" methods is a synchronous method (there's no async/await here), and they all return Result<T> values. That's \"easy mode\"; for the rest of the post we'll add some complications and look at how to deal with them. 1. Handling cases where not every method returns Result<T> For our first example, let's imagine that returning a Result<T> doesn't make sense for all methods. For example, perhaps there's no \"failure\" path for CreateProvisionUserRequest; that might well be the case if this method is just performing a transform creating a DTO:     // 👇 Returns ProvisionUserRequest, not Result<ProvisionUserRequest>\nprivate ProvisionUserRequest CreateProvisionUserRequest(Guid employerId, Claim[] claims) => new ProvisionUserRequest();\n Unfortunately, if you make this change, suddenly your LINQ code won't compile:  As is often the case with failures of this kind, the error is disappointingly opaque. Unless you're used to seeing errors like these, it's unlikely you'll spot the issue. The problem is that the SelectMany() extension method we wrote operates on Result<T>, that's why we can use this from <VAL> in <SOURCE> construct. If <source> is not a Result<T>, the compiler doesn't know what to do! One solution is to make sure that <SOURCE> is a Result<T> type. That doesn't mean the method we invoke has to return a Result<T>, it just means we need to create one. For example: public class UserProvisioningService(CreateUserService createUserService)\n{\n    public Result<UserAccount> ProvisionUser(ExternalLoginInfo info)\n    {\n        return\n            from claims in GetClaimValues(info)\n            from validatedClaims in ValidateClaims(claims)\n            from tenantId in GetTenantId(validatedClaims)\n            // Explicitly wrap return value from CreateProvisionUserRequest() \n            // in a Result<T> object 👇\n            from createRequest in Result<ProvisionUserRequest>.Success(CreateProvisionUserRequest(tenantId, validatedClaims))\n            from userAccount in createUserService.GetOrCreateAccount2(createRequest)\n            select userAccount;\n    }\n}\n That's obviously somewhat ugly, so it's quite common to have an extension method to tidy things up public static class ResultExtensions\n{\n    public static Result<T> ToResult<T>(this T source)\n        => Result<T>.Success(source);\n}\n With this simple extension, the code to convert any type to a \"success\" result is simpler: public class UserProvisioningService(CreateUserService createUserService)\n{\n    public Result<UserAccount> ProvisionUser(ExternalLoginInfo info)\n    {\n        return\n            from claims in GetClaimValues(info)\n            from validatedClaims in ValidateClaims(claims)\n            from tenantId in GetTenantId(validatedClaims)\n            //                  Calling ToResult() on the result is shorter and cleaner👇\n            from createRequest in CreateProvisionUserRequest(tenantId, validatedClaims).ToResult()\n            from userAccount in createUserService.GetOrCreateAccount2(createRequest)\n            select userAccount;\n    }\n}\n However, in this case, we don't actually need the ToResult(). Instead, you can use a construct built into the LINQ query syntax: let. You can use a let clause to store the result of a method call into a new variable which is exactly what we want! public class UserProvisioningService(CreateUserService createUserService)\n{\n    public Result<UserAccount> ProvisionUser(ExternalLoginInfo info)\n    {\n        return\n            from claims in GetClaimValues(info)\n            from validatedClaims in ValidateClaims(claims)\n            from tenantId in GetTenantId(validatedClaims)\n            // 👇 Use `let x = y` instead of `from x in y` when the return value is not a Result<T>\n            let createRequest = CreateProvisionUserRequest(tenantId, validatedClaims)\n            from userAccount in createUserService.GetOrCreateAccount2(createRequest)\n            select userAccount;\n    }\n}\n The lesson here is that not everything needs to be a Result<T> 😃 2. Converting List<Result<T>> into Result<List<T>> using Sequence() For our next challenge, we're going to focus on the ValidateClaims() method. Our stub version currently looks like this, for simplicity: private Result<Claim[]> ValidateClaims(Claim[] claims) => claims;\n Lets imagine it's slightly more complicated than that. We'll imagine that this method operates by calling a helper method ValidateClaim(), which returns a Result<ValidatedClaim> object, something like this: // Stub helper method that operates on a single claim\nprivate Result<ValidatedClaim> ValidateClaim(Claim claim)\n    => new ValidatedClaim(claim);\n\n// The method we need to implement\nprivate Result<IEnumerable<ValidatedClaim>> ValidateClaims(Claim[] claims)\n{\n    // ... TODO\n}\n I've left the method implementation blank for now. It's clear we need to call ValidateClaim with each of the Claim objects in claims, but then what? If we leverage LINQ again (method syntax this time), then we get: private Result<IEnumerable<ValidatedClaim>> ValidateClaims(Claim[] claims)\n{\n    IEnumerable<Result<ValidatedClaim>> validationResults =\n        claims.Select(c => ValidateClaim(c));\n \n    // ... \n}\n That gets us something that looks close: it gives us an IEnumerable<Result<T>>, but what we want is a Result<IEnumerable<T>>. If we think about how to make that translation, we need to: Initialize an empty collection of ValidatedClaim to hold the results. Iterate through all of the Result<T> in validationResults. If the Result<T> is a Fail result, create a Result<IEnumerable<T>> from the failure, and return it. If the Result<T> is a success, append it to the collection of results  After iterating through everything, you will either have a failed Result<IEnumerable<T>> containing the first failure, or a Result<IEnumerable<T>> containing all the valid results.  As mentioned previously, I don't want to get into the weeds of functional programming or the differences between monadic and applicative styles, so I'm using the same monadic approach we have previously here!  At a high level, that functionality is encapsulated by the Linq method Aggregate() (which is an the implementation of the functional concept left fold). We can use Aggregate() (combined with a bit of LINQ query syntax for good measure) to implement our final ValidateClaims() method: private Result<IEnumerable<ValidatedClaim>> ValidateClaims(Claim[] claims)\n{\n    IEnumerable<Result<ValidatedClaim>> validationResults = claims.Select(ValidateClaim);\n    var zero = Result<IEnumerable<ValidatedClaim>>.Success([]);\n    return validationResults.Aggregate(zero, (accumulated, current) =>\n        from previouslyValidated in accumulated    // These ensure we return a failure \n        from claim in current                      // if there are any failures so far.\n        select previouslyValidated.Append(claim)); // If no failures, append to the list\n}\n Personally I find anything that uses Aggregate() is complex to both read and write, so you definitely don't want to be writing this every time you need it. The good news is that we can easily create a generic extension method (called Sequence() for historic reasons) to help with this scenario: public static class ResultExtensions\n{\n    public static Result<IEnumerable<T>> Sequence<T>(this IEnumerable<Result<T>> results)\n    {\n        var zero = Result<IEnumerable<T>>.Success([]);\n        return results.Aggregate(zero, (accumulated, result) =>\n            from previous in accumulated\n            from next in result\n            select previous.Append(next));\n    }\n}\n You can hopefully recognise that this is essentially the same implementation, just updated to work with T instead of Claim. We can now rewrite the ValidateClaims() method to use this extension directly, so that the implementation becomes: private Result<IEnumerable<ValidatedClaim>> ValidateClaims(Claim[] claims)\n    => claims.Select(ValidateClaim).Sequence();\n That's much better! 3. Using async/await with LINQ query syntax In this section we'll look at a different common scenario: where some or all of the methods are asynchronous and return Task<Result<T>>. For our purposes we'll assume that several of the methods in our LINQ statement are async, for example: private Task<Result<IEnumerable<Claim>>> ValidateClaims(Claim[] claims);\nprivate Task<Result<Guid>> GetTenantId(IEnumerable<Claim> claims);\n Your first thought may be that you can simply call await inline for the async methods, but unfortunately, that gets you a compiler error:  Instead, we must provide a way for the LINQ statements to work with Task<Result<T>> values, and for that we're back to our old friend SelectMany. In the previous post I showed how defining a SelectMany() extension method for Result<T> unlocked the LINQ query syntax we've been relying on. The following SelectMany() definition does the same thing for Task<Result<T>>: public static class TaskResultExtensions\n{\n    public static async Task<Result<TResult>> SelectMany<TSource, TMiddle, TResult>(\n        this Task<Result<TSource>> source,\n        Func<TSource, Task<Result<TMiddle>>> collectionSelector,\n        Func<TSource, TMiddle, TResult> resultSelector)\n    {\n        // await the Task<Result<T>> to get the result\n        Result<TSource> result = await source;\n        return\n            await result.Switch(\n                onSuccess: async r =>\n                {\n                    // we need a second await here\n                    Result<TMiddle> result = await collectionSelector(r);\n                    return result.Select(v => resultSelector(r, v));\n                },\n                // The failure path is synchronous, so wrap the failure in a `Task<>`\n                onFailure: e => Task.FromResult(Result<TResult>.Fail(e)));\n    }\n\n With that addition, we can now handle Task<Result<T>> in LINQ statements. One caveat is that we need to ensure every from statement returns a Task<Result<T>>: // Returns a `Task<Result<T>>`\npublic Task<Result<UserAccount>> ProvisionUser(ExternalLoginInfo info)\n{\n    return \n        // Every statment needs to return a Task, so you need to wrap non-async results with Task.FromResult()\n        from claims in Task.FromResult(GetClaimValues(info)) // 👈 Wrap the return value in Task<>\n        from validatedClaims in ValidateClaims(claims) // Returns Task<Result<T>>\n        from tenantId in GetTenantId(validatedClaims) // Returns Task<Result<T>>\n        from createRequest in Task.FromResult(CreateProvisionUserRequest(tenantId, validatedClaims)) // Wrap the return value in Task<>\n        from userAccount in createUserService.GetOrCreateAccount(createRequest) // Returns Task<Result<T>>\n        select userAccount;\n}\n The requirement that every method returns the same \"type\" of value (whether that's a Result<T> or Task<Result<T>>) is just the beginning of where things can start to get mucky. We already have a couple of Task.FromResult() in the code above, and that's because those methods return Result<T>. If they returned Task<T>, things would be much more complicated, and that's where you have to start wondering: is this the right approach? In the next post I'll describe where I've ended up in my attitude to this style of result pattern, and discuss some of the comments and criticisms this series has received from various people. Summary This post expands on the previous posts in the series in which I discuss using the result pattern in practice. In the previous post I showed that using LINQ features can dramatically simplify the amount of boilerplate code the result pattern requires by using LINQ. In this post I expanded the LINQ examples to demonstrate how to support async code, different return types, and collections of results. Each of these additional scenarios can be supported by leveraging LINQ features or providing additional extension methods, however it also raises the question as to whether this is worth the effort given the extra complexity this adds. In the next post in the series I'll discuss some of the pros and cons of this style of result pattern usage."
  },
  {
    "itemId": "https://andrewlock.net/working-with-the-result-pattern-part-2-safety-and-simplicity-with-linq/",
    "raw": "<img src=\"https://andrewlock.net/content/images/2024/railway.jpg\" /><nav><p>This is the two post in the series: <a href=\"/series/working-with-the-result-pattern/\">Working with the result pattern</a>. </p> <ol class=\"list-none\"><li><a href=\"/working-with-the-result-pattern-part-1-replacing-exceptions-as-control-flow/\">Part 1 - Replacing Exceptions-as-flow-control with the result pattern</a></li><li>Part 2 - Safety and simplicity with LINQ (this post) </li><li><a href=\"/working-with-the-result-pattern-part-3-adding-more-extensions/\">Part 3 - Adding more extensions to Result&lt;T&gt;</a></li><li><a href=\"/working-with-the-result-pattern-part-4-is-the-result-pattern-worth-it/\">Part 4 - Is the result pattern worth it?</a></li></ol></nav><p>This post follows directly on from <a href=\"/working-with-the-result-pattern-part-1-replacing-exceptions-as-control-flow/\">the previous post</a> which demonstrated the first stage of replacing exceptions-as-flow-control with the result pattern, but ended with a very ugly final result based on the <code>Switch()</code> method.</p> <p>In this post we'll start by taking a detour to look at LINQ, before we look at how we can use it with our <code>Result&lt;T&gt;</code>. Finally we'll see how adding a couple of extension methods to our <code>Result&lt;T&gt;</code> type can dramatically improve the ergonomics of using the result pattern.</p> <blockquote> <p>This series was inspired by <a href=\"https://x.com/jeremydmiller/status/1811385167765741943?ref_src=twsrc%5Etfw\">a tweet from Jeremy Miller</a> in which he was advocating for not using the result pattern. It's important that you don't blindly apply patterns everywhere just because you <em>can</em>, try to understand where they will actually provide value in your code base.</p> </blockquote> <ul><li><a href=\"#background-where-we-left-off\">Background: where we left off</a></li> <li><a href=\"#linq-method-syntax-vs-query-syntax\">LINQ: method syntax vs query syntax</a></li> <li><a href=\"#selectmany-the-monadic-bind-of-c-\"><code>SelectMany()</code>: the monadic bind of C#</a></li> <li><a href=\"#adding-linq-support-to-resultt\">Adding LINQ support to <code>Result&lt;T&gt;</code></a> <ul><li><a href=\"#implementing-resultt-select-\">Implementing <code>Result&lt;T&gt;.Select()</code></a></li> <li><a href=\"#implementing-resultt-selectmany-\">Implementing <code>Result&lt;T&gt;.SelectMany()</code></a></li></ul> </li> <li><a href=\"#creating-readable-resultt-code-with-linq\">Creating readable <code>Result&lt;T&gt;</code> code with LINQ</a></li> <li><a href=\"#caveats-to-the-result-pattern-and-railway-oriented-programming\">Caveats to the result pattern and railway oriented programming</a> <ul><li><a href=\"#don-t-try-to-wrap-all-exceptions-in-a-resultt\">Don't try to wrap all exceptions in a <code>Result&lt;T&gt;</code></a></li> <li><a href=\"#the-resultt-shown-in-these-posts-is-not-what-you-want\">The <code>Result&lt;T&gt;</code> shown in these posts is not what you want</a></li> <li><a href=\"#consider-whether-you-need-resultt-at-all\">Consider whether you need <code>Result&lt;T&gt;</code> at all</a></li></ul> </li> <li><a href=\"#summary\">Summary</a></li></ul> <h2 id=\"background-where-we-left-off\" class=\"heading-with-anchor\"><a href=\"#background-where-we-left-off\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Background: where we left off</a></h2> <p>In the last post I showed an example of taking a simple method that was using exceptions for flow control, and refactored it to use the result pattern, where the resulting usage was \"safe\" (thanks to the <code>Switch()</code> method and hiding the direct <code>Value</code> or <code>Error</code> accessors), but which was verbose and cumbersome to read.</p> <p>It's our starting point for this post, so I've reproduced the important parts of the <code>Result&lt;T&gt;</code> implementation we ended with below:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Result<span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// We don't expose these publicly</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\">T<span class=\"token punctuation\">?</span></span> _value<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\">Exception<span class=\"token punctuation\">?</span></span> _error<span class=\"token punctuation\">;</span>\n    \n    <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">MemberNotNullWhen</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">nameof</span><span class=\"token punctuation\">(</span>_value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">MemberNotNullWhen</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">nameof</span><span class=\"token punctuation\">(</span>_error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">bool</span></span> IsSuccess <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">Result<span class=\"token punctuation\">&lt;</span>TReturn<span class=\"token punctuation\">&gt;</span></span> <span class=\"token generic-method\"><span class=\"token function\">Switch</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>TReturn<span class=\"token punctuation\">&gt;</span></span></span><span class=\"token punctuation\">(</span>\n        <span class=\"token class-name\">Func<span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">,</span> TReturn<span class=\"token punctuation\">&gt;</span></span> onSuccess<span class=\"token punctuation\">,</span>\n        <span class=\"token class-name\">Func<span class=\"token punctuation\">&lt;</span>Exception<span class=\"token punctuation\">,</span> Exception<span class=\"token punctuation\">&gt;</span></span> onFailure<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>IsSuccess<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token function\">onSuccess</span><span class=\"token punctuation\">(</span>_value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">else</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> err <span class=\"token operator\">=</span> <span class=\"token function\">onFailure</span><span class=\"token punctuation\">(</span>_error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> Result<span class=\"token operator\">&lt;</span>TReturn<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">.</span><span class=\"token function\">Fail</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">Result<span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">Success</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">Result<span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">Fail</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> error<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">implicit</span> <span class=\"token keyword\">operator</span> <span class=\"token generic-method\"><span class=\"token function\">Result</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">&gt;</span></span></span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">Success</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>By encapsulating the <code>_value</code>, <code>_error</code> and <code>IsSuccess</code> values, and only allowing access via the <code>Switch()</code> method, we ensure that callers <em>can't</em> misuse the <code>Result&lt;T&gt;</code> objects. Unfortunately, that can make for some very ugly code when you need to chain multiple method calls that each return a <code>Result&lt;T&gt;</code></p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserProvisioningService</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CreateUserService</span> createUserService<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">Result<span class=\"token punctuation\">&lt;</span>UserAccount<span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">ProvisionUser</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ExternalLoginInfo</span> info<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Result<span class=\"token punctuation\">&lt;</span>Claim<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&gt;</span></span> claimsResult <span class=\"token operator\">=</span> <span class=\"token function\">GetClaimValues</span><span class=\"token punctuation\">(</span>info<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">return</span> claimsResult<span class=\"token punctuation\">.</span><span class=\"token function\">Switch</span><span class=\"token punctuation\">(</span>\n            <span class=\"token named-parameter punctuation\">onSuccess</span><span class=\"token punctuation\">:</span> claims <span class=\"token operator\">=&gt;</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token class-name\">Result<span class=\"token punctuation\">&lt;</span>Claim<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&gt;</span></span> validatedClaimsResult <span class=\"token operator\">=</span> <span class=\"token function\">ValidateClaims</span><span class=\"token punctuation\">(</span>claims<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">return</span> validatedClaimsResult<span class=\"token punctuation\">.</span><span class=\"token function\">Switch</span><span class=\"token punctuation\">(</span>\n                    <span class=\"token named-parameter punctuation\">onSuccess</span><span class=\"token punctuation\">:</span> validatedClaims <span class=\"token operator\">=&gt;</span>\n                    <span class=\"token punctuation\">{</span>\n                        <span class=\"token class-name\">Result<span class=\"token punctuation\">&lt;</span>Guid<span class=\"token punctuation\">&gt;</span></span> tenantIdResult <span class=\"token operator\">=</span> <span class=\"token function\">GetTenantId</span><span class=\"token punctuation\">(</span>claims<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token keyword\">return</span> tenantIdResult<span class=\"token punctuation\">.</span><span class=\"token function\">Switch</span><span class=\"token punctuation\">(</span>\n                            <span class=\"token named-parameter punctuation\">onSuccess</span><span class=\"token punctuation\">:</span> tenantId <span class=\"token operator\">=&gt;</span>\n                            <span class=\"token punctuation\">{</span>\n                                <span class=\"token class-name\">Result<span class=\"token punctuation\">&lt;</span>ProvisionUserRequest<span class=\"token punctuation\">&gt;</span></span> createRequestResult <span class=\"token operator\">=</span>\n                                    <span class=\"token function\">CreateProvisionUserRequest</span><span class=\"token punctuation\">(</span>tenantId<span class=\"token punctuation\">,</span> validatedClaims<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                                <span class=\"token keyword\">return</span> createRequestResult<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">Switch</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>Result<span class=\"token punctuation\">&lt;</span>UserAccount<span class=\"token punctuation\">&gt;</span><span class=\"token punctuation\">&gt;</span></span></span><span class=\"token punctuation\">(</span>\n                                    <span class=\"token named-parameter punctuation\">onSuccess</span><span class=\"token punctuation\">:</span> createRequest <span class=\"token operator\">=&gt;</span>\n                                    <span class=\"token punctuation\">{</span>\n                                        <span class=\"token keyword\">return</span> createUserService<span class=\"token punctuation\">.</span><span class=\"token function\">GetOrCreateAccount</span><span class=\"token punctuation\">(</span>createRequest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                                    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n                                    <span class=\"token named-parameter punctuation\">onFailure</span><span class=\"token punctuation\">:</span> ex <span class=\"token operator\">=&gt;</span> Result<span class=\"token operator\">&lt;</span>UserAccount<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">.</span><span class=\"token function\">Fail</span><span class=\"token punctuation\">(</span>ex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n                            <span class=\"token named-parameter punctuation\">onFailure</span><span class=\"token punctuation\">:</span> ex <span class=\"token operator\">=&gt;</span> Result<span class=\"token operator\">&lt;</span>UserAccount<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">.</span><span class=\"token function\">Fail</span><span class=\"token punctuation\">(</span>ex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token named-parameter punctuation\">onFailure</span><span class=\"token punctuation\">:</span> ex <span class=\"token operator\">=&gt;</span> Result<span class=\"token operator\">&lt;</span>UserAccount<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">.</span><span class=\"token function\">Fail</span><span class=\"token punctuation\">(</span>ex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            <span class=\"token named-parameter punctuation\">onFailure</span><span class=\"token punctuation\">:</span> ex <span class=\"token operator\">=&gt;</span>  Result<span class=\"token operator\">&lt;</span>UserAccount<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">.</span><span class=\"token function\">Fail</span><span class=\"token punctuation\">(</span>ex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>This is clearly some really hard to understand code. If this is what code <em>always</em> looked like with the result pattern it would be <em>very</em> hard to recommend. Luckily there's something we can do to clean this up significantly. But first, we'll take a detour into LINQ.</p> <h2 id=\"linq-method-syntax-vs-query-syntax\" class=\"heading-with-anchor\"><a href=\"#linq-method-syntax-vs-query-syntax\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">LINQ: method syntax vs query syntax</a></h2> <p>When people talk about LINQ, they're typically talking about <a href=\"https://learn.microsoft.com/en-us/dotnet/csharp/linq/get-started/write-linq-queries#example---method-syntax\">method syntax</a>, where you're calling methods like <code>Where()</code> and <code>Select()</code> on <code>IEnumerable&lt;T&gt;</code>, to give code like this:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">IEnumerable<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">GetItemCounts</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IEnumerable<span class=\"token punctuation\">&lt;</span>OrderLine<span class=\"token punctuation\">&gt;</span></span> source<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span>\n    source\n        <span class=\"token punctuation\">.</span><span class=\"token function\">Where</span><span class=\"token punctuation\">(</span>line <span class=\"token operator\">=&gt;</span> <span class=\"token operator\">!</span>line<span class=\"token punctuation\">.</span>IsDeleted<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">Select</span><span class=\"token punctuation\">(</span>line <span class=\"token operator\">=&gt;</span> line<span class=\"token punctuation\">.</span>Quantity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">record</span> <span class=\"token class-name\">OrderLine</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> Quantity<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">bool</span></span> IsDeleted<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre> <p>But the original design of LINQ includes another syntax, <a href=\"https://learn.microsoft.com/en-us/dotnet/csharp/linq/get-started/write-linq-queries#example---query-syntax\">query syntax</a> which was intended to read more like SQL. Query syntax is generally interchangeable with the method syntax, so we could rewrite the above method to be functionally the same using the alternative syntax:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">IEnumerable<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">GetItemCounts</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IEnumerable<span class=\"token punctuation\">&lt;</span>OrderLine<span class=\"token punctuation\">&gt;</span></span> source<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span>\n    <span class=\"token keyword\">from</span> line <span class=\"token keyword\">in</span> source\n    <span class=\"token keyword\">where</span> <span class=\"token operator\">!</span>line<span class=\"token punctuation\">.</span>IsDeleted\n    <span class=\"token keyword\">select</span> line<span class=\"token punctuation\">.</span>Quantity<span class=\"token punctuation\">;</span>\n</code></pre> <p>This code does the same thing as the previous example, so which you choose is mostly a matter of taste, and people <em>generally</em> gravitate to the method syntax in my experience.</p> <p>But there's something neat about the query syntax; it uses \"duck typing\" to decide which types can be used with it. Technically <em>all</em> you need to provide is a single method with the right format: <code>SelectMany()</code></p> <h2 id=\"selectmany-the-monadic-bind-of-c-\" class=\"heading-with-anchor\"><a href=\"#selectmany-the-monadic-bind-of-c-\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\"><code>SelectMany()</code>: the monadic bind of C#</a></h2> <p>Depending on your proficiency with LINQ, you may or may not have run into <code>SelectMany()</code>. Either way, for most people <code>SelectMany()</code> is probably \"just\" the method you call to \"flatten\" a collection of elements. For example, if you have a collection of <code>Order</code>, and you want to enumerate through <em>all</em> the <code>OrderLine</code>s across <em>all</em> <code>Order</code> objects, you might have something like this:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">IEnumerable<span class=\"token punctuation\">&lt;</span>OrderLine<span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">GetAllLines</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IEnumerable<span class=\"token punctuation\">&lt;</span>Order<span class=\"token punctuation\">&gt;</span></span> orders<span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">=&gt;</span> orders<span class=\"token punctuation\">.</span><span class=\"token function\">SelectMany</span><span class=\"token punctuation\">(</span>order <span class=\"token operator\">=&gt;</span> order<span class=\"token punctuation\">.</span>Lines<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre> <p>If you were to write this all out as <code>foreach</code> statements, it would look something like this:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">IEnumerable<span class=\"token punctuation\">&lt;</span>OrderLine<span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">GetAllLines</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IEnumerable<span class=\"token punctuation\">&lt;</span>Order<span class=\"token punctuation\">&gt;</span></span> orders<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">foreach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> order <span class=\"token keyword\">in</span> orders<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> line <span class=\"token keyword\">in</span> order<span class=\"token punctuation\">.</span>Lines<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">yield</span> <span class=\"token keyword\">return</span> line<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>So <code>SelectMany()</code> might <em>seem</em> like a niche method in your LINQ arsenal. However, in practice, <code>SelectMany()</code> is probably the most important LINQ method of all as it implements the \"Bind\" operation, one of the most important operations in functional programming.</p> <blockquote> <p>No, I'm not going to talk about monads in this post. I'm not even going to talk about functional programming much. If either of those spark your interest, I strongly suggest looking at F#: <a href=\"https://fsharpforfunandprofit.com/\">https://fsharpforfunandprofit.com/</a> is a great place to start.</p> </blockquote> <p>There are lots of different overloads of <code>SelectMany()</code>, but the one we care about has two arguments, a \"collection selector\" and a \"result selector\". The following shows what the method looks like for the <code>IEnumerable&lt;T&gt;</code> extension method version, along with a basic implementation showing how it might be implemented:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">IEnumerable<span class=\"token punctuation\">&lt;</span>TResult<span class=\"token punctuation\">&gt;</span></span> <span class=\"token generic-method\"><span class=\"token function\">SelectMany</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>TSource<span class=\"token punctuation\">,</span> TCollection<span class=\"token punctuation\">,</span> TResult<span class=\"token punctuation\">&gt;</span></span></span><span class=\"token punctuation\">(</span>\n    <span class=\"token keyword\">this</span> <span class=\"token class-name\">IEnumerable<span class=\"token punctuation\">&lt;</span>TSource<span class=\"token punctuation\">&gt;</span></span> source<span class=\"token punctuation\">,</span>\n    <span class=\"token class-name\">Func<span class=\"token punctuation\">&lt;</span>TSource<span class=\"token punctuation\">,</span> IEnumerable<span class=\"token punctuation\">&lt;</span>TCollection<span class=\"token punctuation\">&gt;</span><span class=\"token punctuation\">&gt;</span></span> collectionSelector<span class=\"token punctuation\">,</span> \n    <span class=\"token class-name\">Func<span class=\"token punctuation\">&lt;</span>TSource<span class=\"token punctuation\">,</span> TCollection<span class=\"token punctuation\">,</span> TResult<span class=\"token punctuation\">&gt;</span></span> resultSelector<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// We loop through every element in the original source collection</span>\n    <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">TSource</span> ele <span class=\"token keyword\">in</span> source<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// Apply the collectionSelector function to each element,</span>\n        <span class=\"token comment\">// to get the collection value</span>\n        <span class=\"token class-name\">IEnumerable<span class=\"token punctuation\">&lt;</span>TCollection<span class=\"token punctuation\">&gt;</span></span> collection <span class=\"token operator\">=</span> <span class=\"token function\">collectionSelector</span><span class=\"token punctuation\">(</span>ele<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">TCollection</span> collectionEle <span class=\"token keyword\">in</span> collection<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// For each element in the selected collection, execute</span>\n            <span class=\"token comment\">// the resultSelector function, and return the result</span>\n            <span class=\"token class-name\">TResult</span> result <span class=\"token operator\">=</span> <span class=\"token function\">resultSelector</span><span class=\"token punctuation\">(</span>ele<span class=\"token punctuation\">,</span> collectionEle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">yield</span> <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>The example above is written in terms of <code>IEnumerable&lt;T&gt;</code>, but the <code>SelectMany()</code> pattern actually works for <em>any</em> type that implements a method like the above pattern. So let's see what that looks like for <code>Result&lt;T&gt;</code>.</p> <h2 id=\"adding-linq-support-to-resultt\" class=\"heading-with-anchor\"><a href=\"#adding-linq-support-to-resultt\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Adding LINQ support to <code>Result&lt;T&gt;</code></a></h2> <p>In this section we're going to implement <code>SelectMany()</code> for <code>Result&lt;T&gt;</code>. To simplify some things, we're also going to implement the equivalent of <code>Select()</code> too. Let's start with that.</p> <h3 id=\"implementing-resultt-select-\" class=\"heading-with-anchor\"><a href=\"#implementing-resultt-select-\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Implementing <code>Result&lt;T&gt;.Select()</code></a></h3> <p>So first of all we should think what would it even <em>mean</em> to implement <code>Select()</code>.</p> <p>If you have an <code>IEnumerable&lt;T&gt;</code>, then <code>Select()</code> maps from one type, <code>T</code> to another type <code>TResult</code>, based on a <code>Func&lt;T, TResult&gt;</code> selector function. We can achieve something similar for <code>Result&lt;T&gt;</code>:</p> <ul><li>If the <code>Result&lt;T&gt;</code> is a success, run the selector function on the <code>T</code>, and return a new <code>Result&lt;TResult&gt;</code>.</li> <li>If the <code>Result&lt;T&gt;</code> is a failure, return a <code>Result&lt;TResult&gt;</code> using the same original <code>Exception</code>.</li></ul> <p>We can easily implement that functionality using the <code>Switch()</code> method we defined earlier:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token comment\">// Creating these as extension methods to keep the Result&lt;T&gt; type small</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ResultExtensions</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">Result<span class=\"token punctuation\">&lt;</span>TResult<span class=\"token punctuation\">&gt;</span></span> <span class=\"token generic-method\"><span class=\"token function\">Select</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>TFrom<span class=\"token punctuation\">,</span> TResult<span class=\"token punctuation\">&gt;</span></span></span><span class=\"token punctuation\">(</span>\n        <span class=\"token keyword\">this</span> <span class=\"token class-name\">Result<span class=\"token punctuation\">&lt;</span>TFrom<span class=\"token punctuation\">&gt;</span></span> source<span class=\"token punctuation\">,</span> <span class=\"token comment\">// The target for the extension</span>\n        <span class=\"token class-name\">Func<span class=\"token punctuation\">&lt;</span>TFrom<span class=\"token punctuation\">,</span> TResult<span class=\"token punctuation\">&gt;</span></span> selector<span class=\"token punctuation\">)</span> <span class=\"token comment\">// The mapping/selector method</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> source<span class=\"token punctuation\">.</span><span class=\"token function\">Switch</span><span class=\"token punctuation\">(</span>\n            <span class=\"token named-parameter punctuation\">onSuccess</span><span class=\"token punctuation\">:</span> r <span class=\"token operator\">=&gt;</span> <span class=\"token function\">selector</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// success -&gt; run the selector and implicitly convert to Result&lt;TResult&gt;</span>\n            onFailure<span class=\"token punctuation\">:</span> e <span class=\"token operator\">=&gt;</span> Result<span class=\"token operator\">&lt;</span>TResult<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">.</span><span class=\"token function\">Fail</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// error -&gt; return a failed Result&lt;TResult&gt;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>So <code>Select()</code> is a simple mapping of the \"inner\" <code>TFrom</code> type to a <code>TResult</code>, converting a <code>Result&lt;TFrom&gt;</code> into a <code>Result&lt;TResult&gt;</code>. Now lets move on to <code>SelectMany()</code>.</p> <h3 id=\"implementing-resultt-selectmany-\" class=\"heading-with-anchor\"><a href=\"#implementing-resultt-selectmany-\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Implementing <code>Result&lt;T&gt;.SelectMany()</code></a></h3> <p>The <code>SelectMany()</code> method I showed earlier is a bit trickier to think about. The functionality we need is:</p> <ul><li>The \"collection selector\" is the function that runs against the <code>T</code> of a <code>Result&lt;T&gt;</code>, and should return a <code>Result&lt;TMiddle&gt;</code>. Note that this is different to the previous <code>Select()</code> case: <ul><li><code>Select()</code> uses a selector like this: <code>Func&lt;T, TMiddle&gt;</code></li> <li><code>SelectMany()</code> uses a selector like this: <code>Func&lt;T, Result&lt;TMiddle&gt;&gt;</code></li></ul> </li> <li>In addition, the overload of <code>SelectMany()</code> that we need to implement takes a select-like \"result selector\" that maps from a <code>T</code> <em>and</em> <code>TMiddle</code> pair to a <code>TResult</code>, to get the final value.</li></ul> <p>Putting all that together, our <code>SelectMany</code> implementation for <code>Result&lt;T&gt;</code> might look something like this:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token comment\">// The same extension class, Select() not shown for brevity</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ResultExtensions</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">Result<span class=\"token punctuation\">&lt;</span>TResult<span class=\"token punctuation\">&gt;</span></span> <span class=\"token generic-method\"><span class=\"token function\">SelectMany</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>TSource<span class=\"token punctuation\">,</span> TMiddle<span class=\"token punctuation\">,</span> TResult<span class=\"token punctuation\">&gt;</span></span></span><span class=\"token punctuation\">(</span>\n        <span class=\"token keyword\">this</span> <span class=\"token class-name\">Result<span class=\"token punctuation\">&lt;</span>TSource<span class=\"token punctuation\">&gt;</span></span> source<span class=\"token punctuation\">,</span> <span class=\"token comment\">// The target for the extension</span>\n        <span class=\"token class-name\">Func<span class=\"token punctuation\">&lt;</span>TSource<span class=\"token punctuation\">,</span> Result<span class=\"token punctuation\">&lt;</span>TMiddle<span class=\"token punctuation\">&gt;</span><span class=\"token punctuation\">&gt;</span></span> collectionSelector<span class=\"token punctuation\">,</span> <span class=\"token comment\">// How to map to the Result&lt;TMiddle&gt; type</span>\n        <span class=\"token class-name\">Func<span class=\"token punctuation\">&lt;</span>TSource<span class=\"token punctuation\">,</span> TMiddle<span class=\"token punctuation\">,</span> TResult<span class=\"token punctuation\">&gt;</span></span> resultSelector<span class=\"token punctuation\">)</span> <span class=\"token comment\">// How to map a TMiddle to a TResult</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> source<span class=\"token punctuation\">.</span><span class=\"token function\">Switch</span><span class=\"token punctuation\">(</span>\n            <span class=\"token named-parameter punctuation\">onSuccess</span><span class=\"token punctuation\">:</span> r <span class=\"token operator\">=&gt;</span> <span class=\"token comment\">// success -&gt; run the selectors</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token comment\">// First run the \"collection selector\"</span>\n                <span class=\"token class-name\">Result<span class=\"token punctuation\">&lt;</span>TMiddle<span class=\"token punctuation\">&gt;</span></span> result <span class=\"token operator\">=</span> <span class=\"token function\">collectionSelector</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                <span class=\"token comment\">// If result is a success, we run the \"result selector\" to</span>\n                <span class=\"token comment\">// get the final TResult. If it is not a success, then</span>\n                <span class=\"token comment\">// Select() just passes the error through as a failed Result&lt;TResult&gt;</span>\n                <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">.</span><span class=\"token function\">Select</span><span class=\"token punctuation\">(</span>v <span class=\"token operator\">=&gt;</span> <span class=\"token function\">resultSelector</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            <span class=\"token named-parameter punctuation\">onFailure</span><span class=\"token punctuation\">:</span> e <span class=\"token operator\">=&gt;</span> Result<span class=\"token operator\">&lt;</span>TResult<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">.</span><span class=\"token function\">Fail</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// error -&gt; return a failed Result&lt;TResult&gt;</span>\n    <span class=\"token punctuation\">}</span> \n<span class=\"token punctuation\">}</span>\n</code></pre> <p>If you're struggling to follow all those many generic types, don't worry, it <em>is</em> confusing 😅 The good news is that you only have to implement this once (or rather, preferably, the <em>library</em> you're using implements this for you).</p> <p>The <em>really</em> good news is that this is the last piece we need to get back to improving our nasty <code>Result&lt;T&gt;</code> based <code>ProvisionUser()</code> method!</p> <h2 id=\"creating-readable-resultt-code-with-linq\" class=\"heading-with-anchor\"><a href=\"#creating-readable-resultt-code-with-linq\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Creating readable <code>Result&lt;T&gt;</code> code with LINQ</a></h2> <p>For maximum effect, lets recap what our gnarly, but <em>safe</em>, <code>Result&lt;T&gt;</code>-based version of <code>ProvisionUser()</code> looks like (this is the same code I showed at the start of this post):</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserProvisioningService</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CreateUserService</span> createUserService<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">Result<span class=\"token punctuation\">&lt;</span>UserAccount<span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">ProvisionUser</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ExternalLoginInfo</span> info<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Result<span class=\"token punctuation\">&lt;</span>Claim<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&gt;</span></span> claimsResult <span class=\"token operator\">=</span> <span class=\"token function\">GetClaimValues</span><span class=\"token punctuation\">(</span>info<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">return</span> claimsResult<span class=\"token punctuation\">.</span><span class=\"token function\">Switch</span><span class=\"token punctuation\">(</span>\n            <span class=\"token named-parameter punctuation\">onSuccess</span><span class=\"token punctuation\">:</span> claims <span class=\"token operator\">=&gt;</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token class-name\">Result<span class=\"token punctuation\">&lt;</span>Claim<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&gt;</span></span> validatedClaimsResult <span class=\"token operator\">=</span> <span class=\"token function\">ValidateClaims</span><span class=\"token punctuation\">(</span>claims<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">return</span> validatedClaimsResult<span class=\"token punctuation\">.</span><span class=\"token function\">Switch</span><span class=\"token punctuation\">(</span>\n                    <span class=\"token named-parameter punctuation\">onSuccess</span><span class=\"token punctuation\">:</span> validatedClaims <span class=\"token operator\">=&gt;</span>\n                    <span class=\"token punctuation\">{</span>\n                        <span class=\"token class-name\">Result<span class=\"token punctuation\">&lt;</span>Guid<span class=\"token punctuation\">&gt;</span></span> tenantIdResult <span class=\"token operator\">=</span> <span class=\"token function\">GetTenantId</span><span class=\"token punctuation\">(</span>claims<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token keyword\">return</span> tenantIdResult<span class=\"token punctuation\">.</span><span class=\"token function\">Switch</span><span class=\"token punctuation\">(</span>\n                            <span class=\"token named-parameter punctuation\">onSuccess</span><span class=\"token punctuation\">:</span> tenantId <span class=\"token operator\">=&gt;</span>\n                            <span class=\"token punctuation\">{</span>\n                                <span class=\"token class-name\">Result<span class=\"token punctuation\">&lt;</span>ProvisionUserRequest<span class=\"token punctuation\">&gt;</span></span> createRequestResult <span class=\"token operator\">=</span>\n                                    <span class=\"token function\">CreateProvisionUserRequest</span><span class=\"token punctuation\">(</span>tenantId<span class=\"token punctuation\">,</span> validatedClaims<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                                <span class=\"token keyword\">return</span> createRequestResult<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">Switch</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>Result<span class=\"token punctuation\">&lt;</span>UserAccount<span class=\"token punctuation\">&gt;</span><span class=\"token punctuation\">&gt;</span></span></span><span class=\"token punctuation\">(</span>\n                                    <span class=\"token named-parameter punctuation\">onSuccess</span><span class=\"token punctuation\">:</span> createRequest <span class=\"token operator\">=&gt;</span>\n                                    <span class=\"token punctuation\">{</span>\n                                        <span class=\"token keyword\">return</span> createUserService<span class=\"token punctuation\">.</span><span class=\"token function\">GetOrCreateAccount</span><span class=\"token punctuation\">(</span>createRequest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                                    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n                                    <span class=\"token named-parameter punctuation\">onFailure</span><span class=\"token punctuation\">:</span> ex <span class=\"token operator\">=&gt;</span> Result<span class=\"token operator\">&lt;</span>UserAccount<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">.</span><span class=\"token function\">Fail</span><span class=\"token punctuation\">(</span>ex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n                            <span class=\"token named-parameter punctuation\">onFailure</span><span class=\"token punctuation\">:</span> ex <span class=\"token operator\">=&gt;</span> Result<span class=\"token operator\">&lt;</span>UserAccount<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">.</span><span class=\"token function\">Fail</span><span class=\"token punctuation\">(</span>ex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token named-parameter punctuation\">onFailure</span><span class=\"token punctuation\">:</span> ex <span class=\"token operator\">=&gt;</span> Result<span class=\"token operator\">&lt;</span>UserAccount<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">.</span><span class=\"token function\">Fail</span><span class=\"token punctuation\">(</span>ex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            <span class=\"token named-parameter punctuation\">onFailure</span><span class=\"token punctuation\">:</span> ex <span class=\"token operator\">=&gt;</span>  Result<span class=\"token operator\">&lt;</span>UserAccount<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">.</span><span class=\"token function\">Fail</span><span class=\"token punctuation\">(</span>ex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>This is nearly 30 lines of (very hard to read) code. 🙈</p> <p>But by adding the <code>SelectMany()</code> extension method, we've unlocked a superpower. We can remove all the duplication and verbosity in the above implementation, use the LINQ query expression syntax, and implement the <code>ProvisionUser()</code> method in a fraction of the amount of code.</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserProvisioningService</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CreateUserService</span> createUserService<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">Result<span class=\"token punctuation\">&lt;</span>UserAccount<span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">ProvisionUser</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ExternalLoginInfo</span> info<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span>\n            <span class=\"token keyword\">from</span> claims <span class=\"token keyword\">in</span> <span class=\"token function\">GetClaimValues</span><span class=\"token punctuation\">(</span>info<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">from</span> validatedClaims <span class=\"token keyword\">in</span> <span class=\"token function\">ValidateClaims</span><span class=\"token punctuation\">(</span>claims<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">from</span> tenantId <span class=\"token keyword\">in</span> <span class=\"token function\">GetTenantId</span><span class=\"token punctuation\">(</span>validatedClaims<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">from</span> createRequest <span class=\"token keyword\">in</span> <span class=\"token function\">CreateProvisionUserRequest</span><span class=\"token punctuation\">(</span>tenantId<span class=\"token punctuation\">,</span> validatedClaims<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">from</span> userAccount <span class=\"token keyword\">in</span> createUserService<span class=\"token punctuation\">.</span><span class=\"token function\">GetOrCreateAccount2</span><span class=\"token punctuation\">(</span>createRequest<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">select</span> userAccount<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>I think it's <em>really</em> hard to argue with the elegance, simplicity, and readability of this code. It almost reads like the procedural code we wrote way back at the start of the previous post, <em>before</em> we had error handling. But we actually <em>do</em> have error handling; any failure <code>Result&lt;T&gt;</code> returned by <code>GetClaimValues()</code>, <code>ValidateClaims()</code> etc will automatically short-circuit the chain of calls and return the error.</p> <blockquote> <p>This style of error handling is sometimes described as \"Railway Oriented Programming\", a term coined by <a href=\"https://twitter.com/ScottWlaschin\">Scott Wlaschin</a>. You can read more and find links to his various talks on the topic <a href=\"https://fsharpforfunandprofit.com/rop/\">here</a>.</p> </blockquote> <p>Before I close this post, I want to finish with a few warnings about taking this to the extreme.</p> <h2 id=\"caveats-to-the-result-pattern-and-railway-oriented-programming\" class=\"heading-with-anchor\"><a href=\"#caveats-to-the-result-pattern-and-railway-oriented-programming\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Caveats to the result pattern and railway oriented programming</a></h2> <p>Through this series, I've been using a really quite simple scenario, showing how you might add flow control to it \"incorrectly\" before refactoring to use <code>Result&lt;T&gt;</code> with LINQ. But it's easy to take things too far and use <code>Result&lt;T&gt;</code> in ways that you probably shouldn't, so this section describes a few caveats to be aware of (many of which are covered in <a href=\"https://fsharpforfunandprofit.com/posts/against-railway-oriented-programming/\">Scott's post</a>).</p> <h3 id=\"don-t-try-to-wrap-all-exceptions-in-a-resultt\" class=\"heading-with-anchor\"><a href=\"#don-t-try-to-wrap-all-exceptions-in-a-resultt\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Don't try to wrap all exceptions in a <code>Result&lt;T&gt;</code></a></h3> <p>When I introduced <code>Result&lt;T&gt;</code> it was as a way to replace the exceptions that were being used for flow control. But it's important to understand that it was <em>only</em> those flow-control exceptions I was trying to replace.</p> <p>Trying to catch <em>every</em> exception and return a <code>Result&lt;T&gt;</code> can end up adding a lot of complexity to your application. <code>Result&lt;T&gt;</code> is great for handling <em>flow control</em>; exceptions should typically be for <em>exceptional</em> situations.</p> <h3 id=\"the-resultt-shown-in-these-posts-is-not-what-you-want\" class=\"heading-with-anchor\"><a href=\"#the-resultt-shown-in-these-posts-is-not-what-you-want\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">The <code>Result&lt;T&gt;</code> shown in these posts is not what you want</a></h3> <p>In all the examples I've shown so far, I've used <code>Exception</code> as the error type of the <code>Result&lt;T&gt;</code>, but the reality is that might <em>not</em> what you want to do in practice. <code>Exception</code> in this post was a stand in for \"description of the error\", but it's a pretty indirect way of doing that.</p> <p>Another approach might be to define your result type like this:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Result<span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">,</span> TError<span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\">T<span class=\"token punctuation\">?</span></span> _value<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\">TError<span class=\"token punctuation\">?</span></span> _error<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>You could then also define a <code>UserProvisioningError</code></p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">UserProvisioningError</span>\n<span class=\"token punctuation\">{</span>\n    InvalidClaims<span class=\"token punctuation\">,</span>\n    MissingTennantId<span class=\"token punctuation\">,</span>\n    UnknownTenantId<span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>These could provide fine-grained reasons about why the method failed, and the method signature becomes something like this:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">Result<span class=\"token punctuation\">&lt;</span>UserAccount<span class=\"token punctuation\">,</span> UserProvisioningError<span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">ProvisionUser</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ExternalLoginInfo</span> info<span class=\"token punctuation\">)</span>\n</code></pre> <blockquote> <p>This is another case where F# really handles this more nicely, as you can attach arbitrary additional data to each of the error cases if useful. You <em>can</em> do that with some libraries in C# (such as <a href=\"https://github.com/mcintyre321/OneOf\">OneOf</a> for example) but it's more clunky than having support native to the language.</p> </blockquote> <p>If you're doing <a href=\"https://fsharpforfunandprofit.com/books\">domain modelling</a> then defining all these error cases can be very useful. But it's also easy to go <em>too</em> far with this approach.</p> <h3 id=\"consider-whether-you-need-resultt-at-all\" class=\"heading-with-anchor\"><a href=\"#consider-whether-you-need-resultt-at-all\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Consider whether you need <code>Result&lt;T&gt;</code> at all</a></h3> <p>Having argued throughout this series that we <em>can</em> use <code>Result&lt;T&gt;</code> without making our code horribly gnarly and verbose, I'm now going to ask you to think about whether this is <em>actually</em> better.</p> <p>Initially I was comparing to the case where we're throwing exceptions for flow control, and expecting the caller to handle all the different errors we might throw. I think the <code>Result&lt;T&gt;</code> approach shown here is clearly preferable.</p> <p>But that doesn't mean you need (or want) to use <code>Result&lt;T&gt;</code> <em>everywhere</em>. If you're just wrapping your method calls in <code>try</code>-<code>catch</code> statements and converting that to <code>Result&lt;T&gt;</code> then are you <em>actually</em> adding any value by using <code>Result&lt;T&gt;</code>? You've essentially just re-implemented exception handling!</p> <blockquote> <p>Internalising this is really difficult - when I first started exploring F# and functional programming I tried to make it so that exceptions would <em>never</em> escape a method, which meant <code>Result&lt;T&gt;</code> everywhere… and frankly it kinda sucked 😅</p> </blockquote> <p>On the other hand, if you are using exceptions for handling common situations (which aren't just due to programming-errors), then the result pattern can be very useful for codifying paths through your code.</p> <p>In the next post of this series I show some examples of how to handle some variations on this pattern, such as when the method's you're calling use <code>async</code> and <code>await</code>, or you want to manipulate <code>Result&lt;T&gt;</code> objects <em>without</em> \"unwrapping\" them.</p> <h2 id=\"summary\" class=\"heading-with-anchor\"><a href=\"#summary\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Summary</a></h2> <p>In this post I discussed LINQ, focusing on the <code>Select()</code> and <code>SelectMany()</code> methods, and how they can be used to enable LINQ's query syntax. Next I showed how you could implement these methods for a <code>Result&lt;T&gt;</code> type. Finally I refactored the gnarly result pattern code that used <code>Switch()</code> to use LINQ query syntax, and showed how this dramatically improves readability. Finally I discussed some reasons that you should consider <em>not</em> using the result pattern. In the next post, I show how you can take this LINQ support further, to support more situations.</p> ",
    "sanitized": "This is the two post in the series: Working with the result pattern.  Part 1 - Replacing Exceptions-as-flow-control with the result patternPart 2 - Safety and simplicity with LINQ (this post) Part 3 - Adding more extensions to Result<T>Part 4 - Is the result pattern worth it?This post follows directly on from the previous post which demonstrated the first stage of replacing exceptions-as-flow-control with the result pattern, but ended with a very ugly final result based on the Switch() method. In this post we'll start by taking a detour to look at LINQ, before we look at how we can use it with our Result<T>. Finally we'll see how adding a couple of extension methods to our Result<T> type can dramatically improve the ergonomics of using the result pattern.  This series was inspired by a tweet from Jeremy Miller in which he was advocating for not using the result pattern. It's important that you don't blindly apply patterns everywhere just because you can, try to understand where they will actually provide value in your code base.  Background: where we left off LINQ: method syntax vs query syntax SelectMany(): the monadic bind of C# Adding LINQ support to Result<T> Implementing Result<T>.Select() Implementing Result<T>.SelectMany()  Creating readable Result<T> code with LINQ Caveats to the result pattern and railway oriented programming Don't try to wrap all exceptions in a Result<T> The Result<T> shown in these posts is not what you want Consider whether you need Result<T> at all  Summary Background: where we left off In the last post I showed an example of taking a simple method that was using exceptions for flow control, and refactored it to use the result pattern, where the resulting usage was \"safe\" (thanks to the Switch() method and hiding the direct Value or Error accessors), but which was verbose and cumbersome to read. It's our starting point for this post, so I've reproduced the important parts of the Result<T> implementation we ended with below: public class Result<T>\n{\n    // We don't expose these publicly\n    private readonly T? _value;\n    private readonly Exception? _error;\n    \n    [MemberNotNullWhen(true, nameof(_value))]\n    [MemberNotNullWhen(false, nameof(_error))]\n    private bool IsSuccess { get; }\n\n    public Result<TReturn> Switch<TReturn>(\n        Func<T, TReturn> onSuccess,\n        Func<Exception, Exception> onFailure)\n    {\n        if (IsSuccess)\n        {\n            return onSuccess(_value);\n        }\n        else\n        {\n            var err = onFailure(_error);\n            return Result<TReturn>.Fail(err);\n        }\n    }\n\n    public static Result<T> Success(T value) => new(value);\n    public static Result<T> Fail(Exception error) => new(error);\n    public static implicit operator Result<T>(T value) => Success(value);\n}\n By encapsulating the _value, _error and IsSuccess values, and only allowing access via the Switch() method, we ensure that callers can't misuse the Result<T> objects. Unfortunately, that can make for some very ugly code when you need to chain multiple method calls that each return a Result<T> public class UserProvisioningService(CreateUserService createUserService)\n{\n    public Result<UserAccount> ProvisionUser(ExternalLoginInfo info)\n    {\n        Result<Claim[]> claimsResult = GetClaimValues(info);\n\n        return claimsResult.Switch(\n            onSuccess: claims =>\n            {\n                Result<Claim[]> validatedClaimsResult = ValidateClaims(claims);\n                return validatedClaimsResult.Switch(\n                    onSuccess: validatedClaims =>\n                    {\n                        Result<Guid> tenantIdResult = GetTenantId(claims);\n                        return tenantIdResult.Switch(\n                            onSuccess: tenantId =>\n                            {\n                                Result<ProvisionUserRequest> createRequestResult =\n                                    CreateProvisionUserRequest(tenantId, validatedClaims);\n                                return createRequestResult.Switch<Result<UserAccount>>(\n                                    onSuccess: createRequest =>\n                                    {\n                                        return createUserService.GetOrCreateAccount(createRequest);\n                                    },\n                                    onFailure: ex => Result<UserAccount>.Fail(ex));\n                            },\n                            onFailure: ex => Result<UserAccount>.Fail(ex));\n\n                    },\n                    onFailure: ex => Result<UserAccount>.Fail(ex));\n            },\n            onFailure: ex =>  Result<UserAccount>.Fail(ex));\n    }\n}\n This is clearly some really hard to understand code. If this is what code always looked like with the result pattern it would be very hard to recommend. Luckily there's something we can do to clean this up significantly. But first, we'll take a detour into LINQ. LINQ: method syntax vs query syntax When people talk about LINQ, they're typically talking about method syntax, where you're calling methods like Where() and Select() on IEnumerable<T>, to give code like this: public IEnumerable<int> GetItemCounts(IEnumerable<OrderLine> source) =>\n    source\n        .Where(line => !line.IsDeleted)\n        .Select(line => line.Quantity);\n\npublic record OrderLine(int Quantity, bool IsDeleted);\n But the original design of LINQ includes another syntax, query syntax which was intended to read more like SQL. Query syntax is generally interchangeable with the method syntax, so we could rewrite the above method to be functionally the same using the alternative syntax: public IEnumerable<int> GetItemCounts(IEnumerable<OrderLine> source) =>\n    from line in source\n    where !line.IsDeleted\n    select line.Quantity;\n This code does the same thing as the previous example, so which you choose is mostly a matter of taste, and people generally gravitate to the method syntax in my experience. But there's something neat about the query syntax; it uses \"duck typing\" to decide which types can be used with it. Technically all you need to provide is a single method with the right format: SelectMany() SelectMany(): the monadic bind of C# Depending on your proficiency with LINQ, you may or may not have run into SelectMany(). Either way, for most people SelectMany() is probably \"just\" the method you call to \"flatten\" a collection of elements. For example, if you have a collection of Order, and you want to enumerate through all the OrderLines across all Order objects, you might have something like this: public IEnumerable<OrderLine> GetAllLines(IEnumerable<Order> orders)\n    => orders.SelectMany(order => order.Lines);\n If you were to write this all out as foreach statements, it would look something like this: public IEnumerable<OrderLine> GetAllLines(IEnumerable<Order> orders)\n{\n    foreach(var order in orders)\n    {\n        foreach (var line in order.Lines)\n        {\n            yield return line;\n        }\n    }\n}\n So SelectMany() might seem like a niche method in your LINQ arsenal. However, in practice, SelectMany() is probably the most important LINQ method of all as it implements the \"Bind\" operation, one of the most important operations in functional programming.  No, I'm not going to talk about monads in this post. I'm not even going to talk about functional programming much. If either of those spark your interest, I strongly suggest looking at F#: https://fsharpforfunandprofit.com/ is a great place to start.  There are lots of different overloads of SelectMany(), but the one we care about has two arguments, a \"collection selector\" and a \"result selector\". The following shows what the method looks like for the IEnumerable<T> extension method version, along with a basic implementation showing how it might be implemented: public static IEnumerable<TResult> SelectMany<TSource, TCollection, TResult>(\n    this IEnumerable<TSource> source,\n    Func<TSource, IEnumerable<TCollection>> collectionSelector, \n    Func<TSource, TCollection, TResult> resultSelector)\n{\n    // We loop through every element in the original source collection\n    foreach (TSource ele in source)\n    {\n        // Apply the collectionSelector function to each element,\n        // to get the collection value\n        IEnumerable<TCollection> collection = collectionSelector(ele);\n        foreach (TCollection collectionEle in collection)\n        {\n            // For each element in the selected collection, execute\n            // the resultSelector function, and return the result\n            TResult result = resultSelector(ele, collectionEle);\n            yield return result;\n        }\n    }\n}\n The example above is written in terms of IEnumerable<T>, but the SelectMany() pattern actually works for any type that implements a method like the above pattern. So let's see what that looks like for Result<T>. Adding LINQ support to Result<T> In this section we're going to implement SelectMany() for Result<T>. To simplify some things, we're also going to implement the equivalent of Select() too. Let's start with that. Implementing Result<T>.Select() So first of all we should think what would it even mean to implement Select(). If you have an IEnumerable<T>, then Select() maps from one type, T to another type TResult, based on a Func<T, TResult> selector function. We can achieve something similar for Result<T>: If the Result<T> is a success, run the selector function on the T, and return a new Result<TResult>. If the Result<T> is a failure, return a Result<TResult> using the same original Exception. We can easily implement that functionality using the Switch() method we defined earlier: // Creating these as extension methods to keep the Result<T> type small\npublic static class ResultExtensions\n{\n    public static Result<TResult> Select<TFrom, TResult>(\n        this Result<TFrom> source, // The target for the extension\n        Func<TFrom, TResult> selector) // The mapping/selector method\n    {\n        return source.Switch(\n            onSuccess: r => selector(r), // success -> run the selector and implicitly convert to Result<TResult>\n            onFailure: e => Result<TResult>.Fail(e)); // error -> return a failed Result<TResult>\n    }\n}\n So Select() is a simple mapping of the \"inner\" TFrom type to a TResult, converting a Result<TFrom> into a Result<TResult>. Now lets move on to SelectMany(). Implementing Result<T>.SelectMany() The SelectMany() method I showed earlier is a bit trickier to think about. The functionality we need is: The \"collection selector\" is the function that runs against the T of a Result<T>, and should return a Result<TMiddle>. Note that this is different to the previous Select() case: Select() uses a selector like this: Func<T, TMiddle> SelectMany() uses a selector like this: Func<T, Result<TMiddle>>  In addition, the overload of SelectMany() that we need to implement takes a select-like \"result selector\" that maps from a T and TMiddle pair to a TResult, to get the final value. Putting all that together, our SelectMany implementation for Result<T> might look something like this: // The same extension class, Select() not shown for brevity\npublic static class ResultExtensions\n{\n    public static Result<TResult> SelectMany<TSource, TMiddle, TResult>(\n        this Result<TSource> source, // The target for the extension\n        Func<TSource, Result<TMiddle>> collectionSelector, // How to map to the Result<TMiddle> type\n        Func<TSource, TMiddle, TResult> resultSelector) // How to map a TMiddle to a TResult\n    {\n        return source.Switch(\n            onSuccess: r => // success -> run the selectors\n            {\n                // First run the \"collection selector\"\n                Result<TMiddle> result = collectionSelector(r);\n\n                // If result is a success, we run the \"result selector\" to\n                // get the final TResult. If it is not a success, then\n                // Select() just passes the error through as a failed Result<TResult>\n                return result.Select(v => resultSelector(r, v));\n            },\n            onFailure: e => Result<TResult>.Fail(e)); // error -> return a failed Result<TResult>\n    } \n}\n If you're struggling to follow all those many generic types, don't worry, it is confusing 😅 The good news is that you only have to implement this once (or rather, preferably, the library you're using implements this for you). The really good news is that this is the last piece we need to get back to improving our nasty Result<T> based ProvisionUser() method! Creating readable Result<T> code with LINQ For maximum effect, lets recap what our gnarly, but safe, Result<T>-based version of ProvisionUser() looks like (this is the same code I showed at the start of this post): public class UserProvisioningService(CreateUserService createUserService)\n{\n    public Result<UserAccount> ProvisionUser(ExternalLoginInfo info)\n    {\n        Result<Claim[]> claimsResult = GetClaimValues(info);\n\n        return claimsResult.Switch(\n            onSuccess: claims =>\n            {\n                Result<Claim[]> validatedClaimsResult = ValidateClaims(claims);\n                return validatedClaimsResult.Switch(\n                    onSuccess: validatedClaims =>\n                    {\n                        Result<Guid> tenantIdResult = GetTenantId(claims);\n                        return tenantIdResult.Switch(\n                            onSuccess: tenantId =>\n                            {\n                                Result<ProvisionUserRequest> createRequestResult =\n                                    CreateProvisionUserRequest(tenantId, validatedClaims);\n                                return createRequestResult.Switch<Result<UserAccount>>(\n                                    onSuccess: createRequest =>\n                                    {\n                                        return createUserService.GetOrCreateAccount(createRequest);\n                                    },\n                                    onFailure: ex => Result<UserAccount>.Fail(ex));\n                            },\n                            onFailure: ex => Result<UserAccount>.Fail(ex));\n\n                    },\n                    onFailure: ex => Result<UserAccount>.Fail(ex));\n            },\n            onFailure: ex =>  Result<UserAccount>.Fail(ex));\n    }\n}\n This is nearly 30 lines of (very hard to read) code. 🙈 But by adding the SelectMany() extension method, we've unlocked a superpower. We can remove all the duplication and verbosity in the above implementation, use the LINQ query expression syntax, and implement the ProvisionUser() method in a fraction of the amount of code. public class UserProvisioningService(CreateUserService createUserService)\n{\n    public Result<UserAccount> ProvisionUser(ExternalLoginInfo info)\n    {\n        return\n            from claims in GetClaimValues(info)\n            from validatedClaims in ValidateClaims(claims)\n            from tenantId in GetTenantId(validatedClaims)\n            from createRequest in CreateProvisionUserRequest(tenantId, validatedClaims)\n            from userAccount in createUserService.GetOrCreateAccount2(createRequest)\n            select userAccount;\n    }\n}\n I think it's really hard to argue with the elegance, simplicity, and readability of this code. It almost reads like the procedural code we wrote way back at the start of the previous post, before we had error handling. But we actually do have error handling; any failure Result<T> returned by GetClaimValues(), ValidateClaims() etc will automatically short-circuit the chain of calls and return the error.  This style of error handling is sometimes described as \"Railway Oriented Programming\", a term coined by Scott Wlaschin. You can read more and find links to his various talks on the topic here.  Before I close this post, I want to finish with a few warnings about taking this to the extreme. Caveats to the result pattern and railway oriented programming Through this series, I've been using a really quite simple scenario, showing how you might add flow control to it \"incorrectly\" before refactoring to use Result<T> with LINQ. But it's easy to take things too far and use Result<T> in ways that you probably shouldn't, so this section describes a few caveats to be aware of (many of which are covered in Scott's post). Don't try to wrap all exceptions in a Result<T> When I introduced Result<T> it was as a way to replace the exceptions that were being used for flow control. But it's important to understand that it was only those flow-control exceptions I was trying to replace. Trying to catch every exception and return a Result<T> can end up adding a lot of complexity to your application. Result<T> is great for handling flow control; exceptions should typically be for exceptional situations. The Result<T> shown in these posts is not what you want In all the examples I've shown so far, I've used Exception as the error type of the Result<T>, but the reality is that might not what you want to do in practice. Exception in this post was a stand in for \"description of the error\", but it's a pretty indirect way of doing that. Another approach might be to define your result type like this: public class Result<T, TError>\n{\n    private readonly T? _value;\n    private readonly TError? _error;\n}\n You could then also define a UserProvisioningError public enum UserProvisioningError\n{\n    InvalidClaims,\n    MissingTennantId,\n    UnknownTenantId,\n    // ...\n}\n These could provide fine-grained reasons about why the method failed, and the method signature becomes something like this: public Result<UserAccount, UserProvisioningError> ProvisionUser(ExternalLoginInfo info)\n  This is another case where F# really handles this more nicely, as you can attach arbitrary additional data to each of the error cases if useful. You can do that with some libraries in C# (such as OneOf for example) but it's more clunky than having support native to the language.  If you're doing domain modelling then defining all these error cases can be very useful. But it's also easy to go too far with this approach. Consider whether you need Result<T> at all Having argued throughout this series that we can use Result<T> without making our code horribly gnarly and verbose, I'm now going to ask you to think about whether this is actually better. Initially I was comparing to the case where we're throwing exceptions for flow control, and expecting the caller to handle all the different errors we might throw. I think the Result<T> approach shown here is clearly preferable. But that doesn't mean you need (or want) to use Result<T> everywhere. If you're just wrapping your method calls in try-catch statements and converting that to Result<T> then are you actually adding any value by using Result<T>? You've essentially just re-implemented exception handling!  Internalising this is really difficult - when I first started exploring F# and functional programming I tried to make it so that exceptions would never escape a method, which meant Result<T> everywhere… and frankly it kinda sucked 😅  On the other hand, if you are using exceptions for handling common situations (which aren't just due to programming-errors), then the result pattern can be very useful for codifying paths through your code. In the next post of this series I show some examples of how to handle some variations on this pattern, such as when the method's you're calling use async and await, or you want to manipulate Result<T> objects without \"unwrapping\" them. Summary In this post I discussed LINQ, focusing on the Select() and SelectMany() methods, and how they can be used to enable LINQ's query syntax. Next I showed how you could implement these methods for a Result<T> type. Finally I refactored the gnarly result pattern code that used Switch() to use LINQ query syntax, and showed how this dramatically improves readability. Finally I discussed some reasons that you should consider not using the result pattern. In the next post, I show how you can take this LINQ support further, to support more situations."
  },
  {
    "itemId": "https://andrewlock.net/working-with-the-result-pattern-part-1-replacing-exceptions-as-control-flow/",
    "raw": "<img src=\"https://andrewlock.net/content/images/2024/no_exceptions.png\" /><nav><p>This is the one post in the series: <a href=\"/series/working-with-the-result-pattern/\">Working with the result pattern</a>. </p> <ol class=\"list-none\"><li>Part 1 - Replacing Exceptions-as-flow-control with the result pattern (this post) </li><li><a href=\"/working-with-the-result-pattern-part-2-safety-and-simplicity-with-linq/\">Part 2 - Safety and simplicity with LINQ</a></li><li><a href=\"/working-with-the-result-pattern-part-3-adding-more-extensions/\">Part 3 - Adding more extensions to Result&lt;T&gt;</a></li><li><a href=\"/working-with-the-result-pattern-part-4-is-the-result-pattern-worth-it/\">Part 4 - Is the result pattern worth it?</a></li></ol></nav><p>In this post I provide a worked example of going from using exceptions for flow-control to using a result pattern to avoid throwing exceptions. There are lots of similar posts out there (such as <a href=\"https://www.milanjovanovic.tech/blog/functional-error-handling-in-dotnet-with-the-result-pattern\">this one from Milan Jovanović</a> or <a href=\"https://medium.com/@wgyxxbf/result-pattern-a01729f42f8c\">this one</a>), but this post is intended primarily as a prelude to the more interesting posts in the series about how to improve working with the result pattern in practice!</p> <ul><li><a href=\"#background-do-we-need-another-post-about-the-result-pattern-\">Background: do we need another post about the result pattern?</a></li> <li><a href=\"#the-starting-point-happy-path-handling-only\">The starting point: happy path handling only</a></li> <li><a href=\"#using-exceptions-for-flow-control\">Using exceptions for flow control</a></li> <li><a href=\"#using-a-basic-result-pattern\">Using a basic result pattern</a></li> <li><a href=\"#making-the-result-pattern-safer\">Making the result pattern safer</a></li> <li><a href=\"#summary\">Summary</a></li></ul> <h2 id=\"background-do-we-need-another-post-about-the-result-pattern-\" class=\"heading-with-anchor\"><a href=\"#background-do-we-need-another-post-about-the-result-pattern-\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Background: do we need another post about the result pattern?</a></h2> <p>A while back, I saw a tweet from <a href=\"https://x.com/jeremydmiller\">Jeremy Miller</a> describing how he doesn't like the \"<a href=\"https://www.milanjovanovic.tech/blog/functional-error-handling-in-dotnet-with-the-result-pattern\">Result pattern</a>\", and that he has been recommending people remove it from their codebase</p> <blockquote class=\"twitter-tweet\"><p lang=\"en\" dir=\"ltr\">Funny, I’m recommending a client start to rip this strategy out of their codebase because of the extra complexity, code noise, and overhead it adds. <a href=\"https://t.co/6BGSAF9sVS\">https://t.co/6BGSAF9sVS</a></p>— Jeremy D. Miller (@jeremydmiller) <a href=\"https://twitter.com/jeremydmiller/status/1811385167765741943?ref_src=twsrc%5Etfw\">July 11, 2024</a></blockquote><script async=\"\" src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script><p>Having followed Jeremy for a long time, and knowing his appreciation for minimal code and strong dislike of boilerplate code, I wasn't surprised. I can't deny I was a <em>little</em> disappointed though, as I've seen this pattern used to dramatically <em>simplify</em> code rather than introduce noise.</p> <blockquote> <p>Note that I'm obviously not suggesting that would always be the case, just that it <em>can</em>.</p> </blockquote> <p>Reading through Jeremy's replies there, his biggest gripe appears to be with people trying to thread <code>Result&lt;T&gt;</code> objects back through a mediator handler to then be interpreted by MVC (or similar) at a higher level, potentially adding a lot of additional abstraction and complexity on the way. I can't really comment on that, though I will point out that the <a href=\"https://www.nuget.org/packages/Ardalis.Result\">Ardalis.Result</a> and <a href=\"https://www.nuget.org/packages/Ardalis.Result.AspNetCore\">Ardalis.Result.AspNetCore</a> packages from <a href=\"https://ardalis.com/\">Steve Smith</a> take this approach and are very popular.</p> <p>For me, the main benefits of the result pattern are:</p> <ul><li>You don't need to use exceptions for normal control flow. Exceptions are relatively expensive performance-wise in .NET, so throwing thousands of exceptions is generally Bad™. You can still use exceptions for <em>exceptional</em> cases of course.</li> <li>Using a <code>Result</code> object can make the API failure conditions more explicit, and can therefore sometimes be easier to reason about, and reduce the chance of incorrect usages.</li></ul> <p>The accusation that <code>Result</code> increases verbosity certainly <em>can</em> be true, and until we get <a href=\"https://github.com/dotnet/csharplang/blob/main/proposals/TypeUnions.md#result\">native typed unions support in C#</a> that's probably <em>always</em> going to be true to an extent. But in this series, I'm hoping to show how you can use <code>Result</code> types with LINQ to actually <em>reduce</em> clutter.</p> <h2 id=\"the-starting-point-happy-path-handling-only\" class=\"heading-with-anchor\"><a href=\"#the-starting-point-happy-path-handling-only\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">The starting point: happy path handling only</a></h2> <p>For this post I'm going to slowly refactor a hypothetical simple API which takes a login request from an external provider, validates it, and gets or creates a new user in an application. The details aren't important here, I just wanted to work with a method that performs some significant work, so we can more easily see what's going on.</p> <p>The code below shows the <code>UserProvisioningService</code> which exposes the <code>ProvisionUser()</code> method. This method takes in some details that came from an external login request, and attempts to get or create a user account in the system. There's currently no error handling for now (and all the dependency methods are just stubs) but the method itself is pretty easy to read:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserProvisioningService</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CreateUserService</span> createUserService<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">UserAccount</span> <span class=\"token function\">ProvisionUser</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ExternalLoginInfo</span> info<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// Attempt to fetch the claims associated with the provided info</span>\n        <span class=\"token class-name\">Claim<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">?</span></span> claims <span class=\"token operator\">=</span> <span class=\"token function\">GetClaimValues</span><span class=\"token punctuation\">(</span>info<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// We've retrieved the claims based on the login info, but we can't</span>\n        <span class=\"token comment\">// necessarily trust that, so validate and sanitize the claims</span>\n        <span class=\"token class-name\">Claim<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">?</span></span> validatedClaims <span class=\"token operator\">=</span> <span class=\"token function\">ValidateClaims</span><span class=\"token punctuation\">(</span>claims<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// Now we have the claims, fetch the appropriate tenant ID based on the claims</span>\n        <span class=\"token class-name\">Guid</span> tenantId <span class=\"token operator\">=</span> <span class=\"token function\">GetTenantId</span><span class=\"token punctuation\">(</span>validatedClaims<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// Combine the tenantId and claims to create the provisioning request</span>\n        <span class=\"token class-name\">ProvisionUserRequest</span> createRequest <span class=\"token operator\">=</span> <span class=\"token function\">CreateProvisionUserRequest</span><span class=\"token punctuation\">(</span>tenantId<span class=\"token punctuation\">,</span> validatedClaims<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// Call the service to actually create the account.</span>\n        <span class=\"token comment\">// Maybe this calls a database, or something else </span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> identityResult <span class=\"token operator\">=</span> createUserService<span class=\"token punctuation\">.</span><span class=\"token function\">GetOrCreateAccount</span><span class=\"token punctuation\">(</span>createRequest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// Return the user</span>\n        <span class=\"token keyword\">return</span> identityResult<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// Helper methods (just stubs)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\">Claim<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">?</span></span> <span class=\"token function\">GetClaimValues</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ExternalLoginInfo</span> loginInfo<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\">Claim<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">?</span></span> <span class=\"token function\">ValidateClaims</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Claim<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">?</span></span> claims<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> claims<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\">Guid</span> <span class=\"token function\">GetTenantId</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Claim<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">?</span></span> claims<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> Guid<span class=\"token punctuation\">.</span><span class=\"token function\">NewGuid</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\">ProvisionUserRequest</span> <span class=\"token function\">CreateProvisionUserRequest</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Guid</span> employerId<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Claim<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">?</span></span> claims<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Helper types/services</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">record</span> <span class=\"token class-name\">ExternalLoginInfo</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">record</span> <span class=\"token class-name\">ProvisionUserRequest</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">record</span> <span class=\"token class-name\">UserAccount</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CreateUserService</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">UserAccount</span> <span class=\"token function\">GetOrCreateAccount</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ProvisionUserRequest</span> request<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>For the <em>most</em> part, this code just assumes everything will be fine, but there's some hidden behaviour in the way of exceptions. What if the <code>ValidateClaims</code> stage can't find any valid claims, should we continue with the process? If not, the only way to \"break out\" of the chain is to return null or throw an exception. Similarly, will <code>createUserService.GetOrCreateAccount()</code> always succeed? Or do we need to handle exceptions there? What do we do in that situation?</p> <h2 id=\"using-exceptions-for-flow-control\" class=\"heading-with-anchor\"><a href=\"#using-exceptions-for-flow-control\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Using exceptions for flow control</a></h2> <p>One of the common traps to fall into in this situation is using <code>Exception</code>s for flow control. This is where you throw an exception as a way of \"returning\" from a method but without returning a value, breaking out of the normal method execution.</p> <p>As an example, consider why you might add this to the previous example. What if the <code>validatedClaims</code> are empty, should we continue with the method? Probably not. Similarly, what if we can't retrieve a tenant ID, there's no point continuing right?</p> <blockquote> <p>Using exceptions for flow control can seem attractive because it means you can throw <em>different</em> exceptions for different types of errors, and handle those in the calling method. That differs to the approach of returning <code>null</code> (for example), which tells you that <em>something</em> went wrong, but not <em>what</em> went wrong.</p> </blockquote> <p>The following shows an example of how someone might address these concerns, using exceptions to break out of the normal method flow:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserProvisioningService</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CreateUserService</span> createUserService<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// No longer return UserAccount? as we throw if something is wrong</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">UserAccount</span> <span class=\"token function\">ProvisionUser</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ExternalLoginInfo</span> info<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Claim<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">?</span></span> claims <span class=\"token operator\">=</span> <span class=\"token function\">GetClaimValues</span><span class=\"token punctuation\">(</span>info<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>claims <span class=\"token keyword\">is</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// Throwing an exception instead of returning null</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">ValidationException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The info provided was not valid\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token class-name\">Claim<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> validatedClaims <span class=\"token operator\">=</span> <span class=\"token function\">ValidateClaims</span><span class=\"token punctuation\">(</span>claims<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>validatedClaims<span class=\"token punctuation\">.</span>Length <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// Throwing an exception instead of ignoring the issue</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">ValidationException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The claims provided were not valid\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> tenantId <span class=\"token operator\">=</span> <span class=\"token function\">GetTenantId</span><span class=\"token punctuation\">(</span>validatedClaims<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>tenantId <span class=\"token operator\">==</span> Guid<span class=\"token punctuation\">.</span>Empty<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// Using custom exceptions to \"describe\" the issue</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">UnknownTenantException</span><span class=\"token punctuation\">(</span>validatedClaims<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> createRequest <span class=\"token operator\">=</span> <span class=\"token function\">CreateProvisionUserRequest</span><span class=\"token punctuation\">(</span>tenantId<span class=\"token punctuation\">,</span> validatedClaims<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> identityResult <span class=\"token operator\">=</span> createUserService<span class=\"token punctuation\">.</span><span class=\"token function\">GetOrCreateAccount</span><span class=\"token punctuation\">(</span>createRequest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> identityResult<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>Using exceptions for flow control is \"easy\" to some extent:</p> <ul><li>You can throw an exception <em>anywhere</em>, arbitrarily \"deep\" into the method stacks.</li> <li>You can create specialised exceptions to describe the error (e.g. <code>UnknownTenantException</code> in the example above).</li> <li>You don't need to change your method signatures to use them.</li></ul> <p>There are downsides though:</p> <ul><li>Throwing exceptions for \"normal\" scenarios is expensive. When you throw an exception, the runtime has to do quite a lot of work to create the stack trace and to unwind the method stack as appropriate.</li> <li>You need to remember to handle the exceptions in the calling code, but it's not clear from the method signature <em>which</em> types of exceptions you will need to handle.</li> <li>Explicitly checking and throwing exceptions repeatedly is verbose.</li> <li>If you want to provide \"correct\" semantic exceptions (e.g. <code>UnknownTenantException</code>) then you might need to wrap each method call with an exception handler before throwing the correct exception.</li></ul> <p>To expand on that last point, if <code>GetTenantId()</code> could sometimes throw other types of exceptions, you might need to wrap the call something like this:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\">Guid</span> tenantId<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">try</span>\n<span class=\"token punctuation\">{</span>\n    tenantId <span class=\"token operator\">=</span> <span class=\"token function\">GetTenantId</span><span class=\"token punctuation\">(</span>validatedClaims<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> ex<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">UnknownTenantException</span><span class=\"token punctuation\">(</span>claims<span class=\"token punctuation\">,</span> ex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>Changing <em>every</em> method call inside <code>ProvisionUser</code> to use that pattern could get very verbose 😅</p> <p>The result pattern is a general solution to the first two issues, by making the error cases explicit in the method signature.</p> <h2 id=\"using-a-basic-result-pattern\" class=\"heading-with-anchor\"><a href=\"#using-a-basic-result-pattern\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Using a basic result pattern</a></h2> <p>Ok, in the next section I'm going to show pretty much the most basic version of a result pattern you could implement. Note that I'm <em>not</em> suggesting you roll your own <code>Result&lt;T&gt;</code> class; there's plenty of libraries out there that do this, and the .NET base class library might have <a href=\"https://github.com/dotnet/csharplang/blob/main/proposals/TypeUnions.md\">its own implementation</a> soon. This is purely so that you can see the basics of what it might look like to use the result pattern in place of exceptions.</p> <p>First of all we'll see the <code>Result&lt;T&gt;</code> class. This is a simple type that can be in one of two states:</p> <ul><li><code>IsSuccess: true</code>, in which case <code>Value</code> is defined and has a value, and <code>Error</code> is <code>null</code>.</li> <li><code>IsSuccess: false</code>, in which case <code>Value</code> is undefined and instead <code>Error</code> contains an exception.</li></ul> <p>A basic implementations might look something like this:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Result<span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Success constructor</span>\n    <span class=\"token keyword\">private</span> <span class=\"token function\">Result</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        IsSuccess <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        Value <span class=\"token operator\">=</span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">;</span>\n        Error <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// Failure constructor</span>\n    <span class=\"token keyword\">private</span> <span class=\"token function\">Result</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> error<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        IsSuccess <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        Value <span class=\"token operator\">=</span> <span class=\"token keyword\">default</span><span class=\"token punctuation\">;</span>\n        Error <span class=\"token operator\">=</span> error<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">MemberNotNullWhen</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">nameof</span><span class=\"token punctuation\">(</span>Value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">MemberNotNullWhen</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">nameof</span><span class=\"token punctuation\">(</span>Error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">bool</span></span> IsSuccess <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">T<span class=\"token punctuation\">?</span></span> Value <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">Exception<span class=\"token punctuation\">?</span></span> Error <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// Helper methods for constructing the `Result&lt;T&gt;`</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">Result<span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">Success</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">Result<span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">Fail</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> error<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token comment\">// Allow converting a T directly into Result&lt;T&gt;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">implicit</span> <span class=\"token keyword\">operator</span> <span class=\"token generic-method\"><span class=\"token function\">Result</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>TSuccess<span class=\"token punctuation\">&gt;</span></span></span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TSuccess</span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">Success</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>Most practical <code>Result&lt;T&gt;</code> types will have <em>way</em> more to them than this, but it's sufficient for showing the basics. The following code shows how you might convert the previous exception-based flow handling to use the above simple result type.</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserProvisioningService</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CreateUserService</span> createUserService<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Note 👇 The return type has changed</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">Result<span class=\"token punctuation\">&lt;</span>UserAccount<span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">ProvisionUser</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ExternalLoginInfo</span> info<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// Each of the methods returns a `Result&lt;T&gt;` type which we can inspect</span>\n        <span class=\"token class-name\">Result<span class=\"token punctuation\">&lt;</span>Claim<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&gt;</span></span> claims <span class=\"token operator\">=</span> <span class=\"token function\">GetClaimValues</span><span class=\"token punctuation\">(</span>info<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>claims<span class=\"token punctuation\">.</span>IsSuccess<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// If the method call wasn't successful, we can return a \"failed\" Result&lt;T&gt; </span>\n            <span class=\"token keyword\">return</span> Result<span class=\"token operator\">&lt;</span>UserAccount<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">.</span><span class=\"token function\">Fail</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">ValidationException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The info provided was not valid\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">// Using Value to extract the T from the Result&lt;T&gt;      👇</span>\n        <span class=\"token class-name\">Result<span class=\"token punctuation\">&lt;</span>Claim<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&gt;</span></span> validatedClaims <span class=\"token operator\">=</span> <span class=\"token function\">ValidateClaims</span><span class=\"token punctuation\">(</span>claims<span class=\"token punctuation\">.</span>Value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>validatedClaims<span class=\"token punctuation\">.</span>IsSuccess<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> Result<span class=\"token operator\">&lt;</span>UserAccount<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">.</span><span class=\"token function\">Fail</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">ValidationException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The claims provided were not valid\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> tenantId <span class=\"token operator\">=</span> <span class=\"token function\">GetTenantId</span><span class=\"token punctuation\">(</span>validatedClaims<span class=\"token punctuation\">.</span>Value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>tenantId<span class=\"token punctuation\">.</span>IsSuccess<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> Result<span class=\"token operator\">&lt;</span>UserAccount<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">.</span><span class=\"token function\">Fail</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">UnknownTenantException</span><span class=\"token punctuation\">(</span>validatedClaims<span class=\"token punctuation\">.</span>Value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> createRequest <span class=\"token operator\">=</span> <span class=\"token function\">CreateProvisionUserRequest</span><span class=\"token punctuation\">(</span>tenantId<span class=\"token punctuation\">.</span>Value<span class=\"token punctuation\">,</span> validatedClaims<span class=\"token punctuation\">.</span>Value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>createRequest<span class=\"token punctuation\">.</span>IsSuccess<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> Result<span class=\"token operator\">&lt;</span>UserAccount<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">.</span><span class=\"token function\">Fail</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">InvalidOperationException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Failed to create provision user request\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> createUserService<span class=\"token punctuation\">.</span><span class=\"token function\">GetOrCreateAccount</span><span class=\"token punctuation\">(</span>createRequest<span class=\"token punctuation\">.</span>Value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// Each of the methods we called return a Result&lt;T&gt; which we check</span>\n    <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\">Result<span class=\"token punctuation\">&lt;</span>Claim<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">GetClaimValues</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ExternalLoginInfo</span> loginInfo<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> Array<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">Empty</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>Claim<span class=\"token punctuation\">&gt;</span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\">Result<span class=\"token punctuation\">&lt;</span>Claim<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">ValidateClaims</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Claim<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> claims<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> claims<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\">Result<span class=\"token punctuation\">&lt;</span>Guid<span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">GetTenantId</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Claim<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> claims<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> Guid<span class=\"token punctuation\">.</span><span class=\"token function\">NewGuid</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\">Result<span class=\"token punctuation\">&lt;</span>ProvisionUserRequest<span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">CreateProvisionUserRequest</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Guid</span> employerId<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Claim<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> claims<span class=\"token punctuation\">)</span>\n        <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">ProvisionUserRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 👈 Relying on the implicit conversion from T to Result&lt;T&gt;</span>\n</code></pre> <p>The above code shows the basics of how a <code>Result&lt;T&gt;</code> type could replace using exceptions for flow handling, but it's not a great example of the pattern, for many reasons:</p> <ul><li>The overall flow of the code is still hard to follow, with lots of verbose \"check and return\" statements.</li> <li>The \"error\" type is still a generic \"Exception\" which is an unbounded possibility of values.</li> <li>We're checking <code>IsSuccess</code> before accessing <code>Value</code> in the above example, but there's nothing stopping you accessing <code>Value</code> <em>or</em> <code>Error</code> \"incorrectly\", at which point you will likely get a \"real\" <code>NullReferenceException</code>!</li></ul> <p>Frankly, the only real benefit we have here is that callers of <code>ProvisionUser</code> can easily see from the method signature that the method is \"expected\" to fail for some subset of cases, given that it now returns a <code>Result&lt;UserAccount&gt;</code> instead of <code>UserAccount</code>. Is that worth the tradeoff? Maybe, but probably not for this implementation. If this was what the result pattern always looked like, it would be very hard to recommend.</p> <p>But we don't have to stop here. With one small change we can address the final point above, and make our types \"safe\" so you can't accidentally call <code>Value</code> or <code>Error</code>.</p> <h2 id=\"making-the-result-pattern-safer\" class=\"heading-with-anchor\"><a href=\"#making-the-result-pattern-safer\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Making the result pattern safer</a></h2> <p>The <code>Result&lt;T&gt;</code> pattern in the previous section is slightly problematic in that it doesn't stop you trying to access the <code>Value</code> (or <code>Error</code>) property when you shouldn't. As a guard around this, many <code>Result&lt;T&gt;</code> implementations don't expose these properties directly. Instead, you have a <code>Switch()</code> method (sometimes called <code>Match()</code> or various other names).</p> <p>The <code>Switch()</code> method works a bit like a switch statement or switch expression; you provide a method to run in each possible case for a given <code>Result&lt;T&gt;</code> object:</p> <ul><li>If the <code>Result&lt;T&gt;</code> has a value, you provide a <code>Func&lt;T&gt;</code> which is passed the value</li> <li>If the <code>Result&lt;T&gt;</code> has an error, you provide a <code>Func&lt;Exception&gt;</code> which is passed the error.</li></ul> <p>There are also variations where you provide a <code>Func&lt;T, TReturn&gt;</code> and return a value. That's the version I show in the example below (the reason why will become clear soon):</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Result<span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// We don't expose these publicly any more</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\">T<span class=\"token punctuation\">?</span></span> _value<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\">Exception<span class=\"token punctuation\">?</span></span> _error<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Same constructors</span>\n    <span class=\"token keyword\">private</span> <span class=\"token function\">Result</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        IsSuccess <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        _value <span class=\"token operator\">=</span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">;</span>\n        _error <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token function\">Result</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> error<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        IsSuccess <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        _value <span class=\"token operator\">=</span> <span class=\"token keyword\">default</span><span class=\"token punctuation\">;</span>\n        _error <span class=\"token operator\">=</span> error<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">MemberNotNullWhen</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">nameof</span><span class=\"token punctuation\">(</span>_value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">MemberNotNullWhen</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">nameof</span><span class=\"token punctuation\">(</span>_error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">bool</span></span> IsSuccess <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// This Method takes two Func&lt;T&gt;, one for the success case and one for the error case</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">Result<span class=\"token punctuation\">&lt;</span>TReturn<span class=\"token punctuation\">&gt;</span></span> <span class=\"token generic-method\"><span class=\"token function\">Switch</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>TReturn<span class=\"token punctuation\">&gt;</span></span></span><span class=\"token punctuation\">(</span>\n        <span class=\"token class-name\">Func<span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">,</span> TReturn<span class=\"token punctuation\">&gt;</span></span> onSuccess<span class=\"token punctuation\">,</span>\n        <span class=\"token class-name\">Func<span class=\"token punctuation\">&lt;</span>Exception<span class=\"token punctuation\">,</span> Exception<span class=\"token punctuation\">&gt;</span></span> onFailure<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>IsSuccess<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// If this result has a value, run the success method,</span>\n            <span class=\"token comment\">// which returns a different value, and then we create a</span>\n            <span class=\"token comment\">// Result&lt;TReturn&gt; from it (implicitly)</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> result <span class=\"token operator\">=</span> <span class=\"token function\">onSuccess</span><span class=\"token punctuation\">(</span>_value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">else</span>\n        <span class=\"token punctuation\">{</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// If this result is an error, run the error method</span>\n            <span class=\"token comment\">// to allow the user to manipulate/inspect the error.</span>\n            <span class=\"token comment\">// We then create a new Result&lt;TReturn&gt; result object</span>\n            <span class=\"token comment\">// from the error it returns</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> err <span class=\"token operator\">=</span> <span class=\"token function\">onFailure</span><span class=\"token punctuation\">(</span>_error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> Result<span class=\"token operator\">&lt;</span>TReturn<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">.</span><span class=\"token function\">Fail</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">Result<span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">Success</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">Result<span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">Fail</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> error<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">implicit</span> <span class=\"token keyword\">operator</span> <span class=\"token generic-method\"><span class=\"token function\">Result</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">&gt;</span></span></span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">Success</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>Ok, we have our \"safe\" <code>Result&lt;T&gt;</code> class, which enforces that we can't access <code>Value</code> if it's not available. But what does it look like to use this in code?</p> <p>Well, the bad news is, it's kind of horrible 😅 I've annotated the below code best I can, but the reality is that even though the code is guaranteed to block certain types of errors by encapsulating the <code>IsSuccess</code> checking, it's just <em>awful</em> to read…</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserProvisioningService</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CreateUserService</span> createUserService<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">Result<span class=\"token punctuation\">&lt;</span>UserAccount<span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">ProvisionUser</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ExternalLoginInfo</span> info<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 1. Try to get the initial claim results</span>\n        <span class=\"token class-name\">Result<span class=\"token punctuation\">&lt;</span>Claim<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&gt;</span></span> claimsResult <span class=\"token operator\">=</span> <span class=\"token function\">GetClaimValues</span><span class=\"token punctuation\">(</span>info<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">return</span> claimsResult<span class=\"token punctuation\">.</span><span class=\"token function\">Switch</span><span class=\"token punctuation\">(</span>\n            <span class=\"token named-parameter punctuation\">onSuccess</span><span class=\"token punctuation\">:</span> claims <span class=\"token operator\">=&gt;</span> <span class=\"token comment\">// if the claims we retrieved successfully, run this function</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token comment\">// 2. Try to validate the claims</span>\n                <span class=\"token class-name\">Result<span class=\"token punctuation\">&lt;</span>Claim<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&gt;</span></span> validatedClaimsResult <span class=\"token operator\">=</span> <span class=\"token function\">ValidateClaims</span><span class=\"token punctuation\">(</span>claims<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">return</span> validatedClaimsResult<span class=\"token punctuation\">.</span><span class=\"token function\">Switch</span><span class=\"token punctuation\">(</span>\n                    <span class=\"token named-parameter punctuation\">onSuccess</span><span class=\"token punctuation\">:</span> validatedClaims <span class=\"token operator\">=&gt;</span>  <span class=\"token comment\">// validation was successful</span>\n                    <span class=\"token punctuation\">{</span>\n                        <span class=\"token comment\">// 3. Try to extract the tenant ID</span>\n                        <span class=\"token class-name\">Result<span class=\"token punctuation\">&lt;</span>Guid<span class=\"token punctuation\">&gt;</span></span> tenantIdResult <span class=\"token operator\">=</span> <span class=\"token function\">GetTenantId</span><span class=\"token punctuation\">(</span>claims<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token keyword\">return</span> tenantIdResult<span class=\"token punctuation\">.</span><span class=\"token function\">Switch</span><span class=\"token punctuation\">(</span>\n                            <span class=\"token named-parameter punctuation\">onSuccess</span><span class=\"token punctuation\">:</span> tenantId <span class=\"token operator\">=&gt;</span> <span class=\"token comment\">// extracted successfully</span>\n                            <span class=\"token punctuation\">{</span>\n                                <span class=\"token comment\">// 4. Create the ProvisionUserRequest object</span>\n                                <span class=\"token class-name\">Result<span class=\"token punctuation\">&lt;</span>ProvisionUserRequest<span class=\"token punctuation\">&gt;</span></span> createRequestResult <span class=\"token operator\">=</span>\n                                    <span class=\"token function\">CreateProvisionUserRequest</span><span class=\"token punctuation\">(</span>tenantId<span class=\"token punctuation\">,</span> validatedClaims<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                                <span class=\"token keyword\">return</span> createRequestResult<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">Switch</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>Result<span class=\"token punctuation\">&lt;</span>UserAccount<span class=\"token punctuation\">&gt;</span><span class=\"token punctuation\">&gt;</span></span></span><span class=\"token punctuation\">(</span>\n                                    <span class=\"token named-parameter punctuation\">onSuccess</span><span class=\"token punctuation\">:</span> createRequest <span class=\"token operator\">=&gt;</span> <span class=\"token comment\">// created the request successfully</span>\n                                    <span class=\"token punctuation\">{</span>\n                                        <span class=\"token comment\">// 5. Try to create the account, and return the Result&lt;UserAccount&gt;</span>\n                                        <span class=\"token keyword\">return</span> createUserService<span class=\"token punctuation\">.</span><span class=\"token function\">GetOrCreateAccount</span><span class=\"token punctuation\">(</span>createRequest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                                    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n                                    <span class=\"token named-parameter punctuation\">onFailure</span><span class=\"token punctuation\">:</span> ex <span class=\"token operator\">=&gt;</span> Result<span class=\"token operator\">&lt;</span>UserAccount<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">.</span><span class=\"token function\">Fail</span><span class=\"token punctuation\">(</span>ex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Step 4 failed, return the error </span>\n                            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n                            <span class=\"token named-parameter punctuation\">onFailure</span><span class=\"token punctuation\">:</span> ex <span class=\"token operator\">=&gt;</span> Result<span class=\"token operator\">&lt;</span>UserAccount<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">.</span><span class=\"token function\">Fail</span><span class=\"token punctuation\">(</span>ex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Step 3 failed, return the error </span>\n\n                    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token named-parameter punctuation\">onFailure</span><span class=\"token punctuation\">:</span> ex <span class=\"token operator\">=&gt;</span> Result<span class=\"token operator\">&lt;</span>UserAccount<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">.</span><span class=\"token function\">Fail</span><span class=\"token punctuation\">(</span>ex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Step 2 failed, return the error </span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            <span class=\"token named-parameter punctuation\">onFailure</span><span class=\"token punctuation\">:</span> ex <span class=\"token operator\">=&gt;</span>  Result<span class=\"token operator\">&lt;</span>UserAccount<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">.</span><span class=\"token function\">Fail</span><span class=\"token punctuation\">(</span>ex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Step 1 failed, return the error </span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\">Result<span class=\"token punctuation\">&lt;</span>Claim<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">GetClaimValues</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ExternalLoginInfo</span> loginInfo<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> Array<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">Empty</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>Claim<span class=\"token punctuation\">&gt;</span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\">Result<span class=\"token punctuation\">&lt;</span>Claim<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">ValidateClaims</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Claim<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> claims<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> claims<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\">Result<span class=\"token punctuation\">&lt;</span>Guid<span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">GetTenantId</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Claim<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> claims<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> Guid<span class=\"token punctuation\">.</span><span class=\"token function\">NewGuid</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\">Result<span class=\"token punctuation\">&lt;</span>ProvisionUserRequest<span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">CreateProvisionUserRequest</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Guid</span> employerId<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Claim<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> claims<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">ProvisionUserRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>This code is <em>really</em> hard to follow. There's the ever increasing indentation (<a href=\"https://en.wikipedia.org/wiki/Pyramid_of_doom_(programming)\">the pyramid of doom</a>) caused by (effectively) lots of nested <code>if</code> statements. The error case arguments (<code>onFailure</code>) are a <em>long</em> way from the matching (<code>onSuccess</code>) arguments, which makes it hard to match them up. And what's more, the error cases aren't doing anything other than re-wrapping the exception from a failed <code>Result&lt;T&gt;</code> type into a <code>Result&lt;TReturn&gt;</code>.</p> <blockquote> <p>Note that because they'll be built into the language, <a href=\"https://github.com/dotnet/csharplang/blob/main/proposals/TypeUnions.md\">the type-unions proposal</a> uses <code>switch</code> <em>statements</em> and <em>expressions</em> rather than a <code>Switch</code> method, but functionally it works in the same way.</p> </blockquote> <p>The very repetitive nature of the code above is exactly the sort of boilerplate and cruft that Jeremy Miller often rails against, and is the sort of thing I <em>hope</em> he's referring to in <a href=\"https://x.com/jeremydmiller/status/1811385167765741943?ref_src=twsrc%5Etfw\">his original post</a>. The good news is that we don't have to stop there—in the next post we'll make all that cruft disappear!</p> <h2 id=\"summary\" class=\"heading-with-anchor\"><a href=\"#summary\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Summary</a></h2> <p>In this post I provided a brief motivation for using the result pattern in applications to avoid using exceptions for flow control. I started with a simple implementation without any error checking, then added exceptions to handle error cases. Unfortunately using <code>Exception</code>s for common error cases can be very slow and means the caller has to remember to catch those exceptions.</p> <p>As a \"solution\" to exceptions, I replaced the <code>Exception</code>s with a <code>Result&lt;T&gt;</code> type and the result pattern. For safety, we enforced that you had to use a <code>Switch()</code> method to \"extract\" the result. Unfortunately, this made the final code incredibly cumbersome and verbose, so in the next post we'll see how we can simplify it significantly!</p> ",
    "sanitized": "This is the one post in the series: Working with the result pattern.  Part 1 - Replacing Exceptions-as-flow-control with the result pattern (this post) Part 2 - Safety and simplicity with LINQPart 3 - Adding more extensions to Result<T>Part 4 - Is the result pattern worth it?In this post I provide a worked example of going from using exceptions for flow-control to using a result pattern to avoid throwing exceptions. There are lots of similar posts out there (such as this one from Milan Jovanović or this one), but this post is intended primarily as a prelude to the more interesting posts in the series about how to improve working with the result pattern in practice! Background: do we need another post about the result pattern? The starting point: happy path handling only Using exceptions for flow control Using a basic result pattern Making the result pattern safer Summary Background: do we need another post about the result pattern? A while back, I saw a tweet from Jeremy Miller describing how he doesn't like the \"Result pattern\", and that he has been recommending people remove it from their codebase Funny, I’m recommending a client start to rip this strategy out of their codebase because of the extra complexity, code noise, and overhead it adds. https://t.co/6BGSAF9sVS— Jeremy D. Miller (@jeremydmiller) July 11, 2024Having followed Jeremy for a long time, and knowing his appreciation for minimal code and strong dislike of boilerplate code, I wasn't surprised. I can't deny I was a little disappointed though, as I've seen this pattern used to dramatically simplify code rather than introduce noise.  Note that I'm obviously not suggesting that would always be the case, just that it can.  Reading through Jeremy's replies there, his biggest gripe appears to be with people trying to thread Result<T> objects back through a mediator handler to then be interpreted by MVC (or similar) at a higher level, potentially adding a lot of additional abstraction and complexity on the way. I can't really comment on that, though I will point out that the Ardalis.Result and Ardalis.Result.AspNetCore packages from Steve Smith take this approach and are very popular. For me, the main benefits of the result pattern are: You don't need to use exceptions for normal control flow. Exceptions are relatively expensive performance-wise in .NET, so throwing thousands of exceptions is generally Bad™. You can still use exceptions for exceptional cases of course. Using a Result object can make the API failure conditions more explicit, and can therefore sometimes be easier to reason about, and reduce the chance of incorrect usages. The accusation that Result increases verbosity certainly can be true, and until we get native typed unions support in C# that's probably always going to be true to an extent. But in this series, I'm hoping to show how you can use Result types with LINQ to actually reduce clutter. The starting point: happy path handling only For this post I'm going to slowly refactor a hypothetical simple API which takes a login request from an external provider, validates it, and gets or creates a new user in an application. The details aren't important here, I just wanted to work with a method that performs some significant work, so we can more easily see what's going on. The code below shows the UserProvisioningService which exposes the ProvisionUser() method. This method takes in some details that came from an external login request, and attempts to get or create a user account in the system. There's currently no error handling for now (and all the dependency methods are just stubs) but the method itself is pretty easy to read: public class UserProvisioningService(CreateUserService createUserService)\n{\n    public UserAccount ProvisionUser(ExternalLoginInfo info)\n    {\n        // Attempt to fetch the claims associated with the provided info\n        Claim[]? claims = GetClaimValues(info);\n\n        // We've retrieved the claims based on the login info, but we can't\n        // necessarily trust that, so validate and sanitize the claims\n        Claim[]? validatedClaims = ValidateClaims(claims);\n\n        // Now we have the claims, fetch the appropriate tenant ID based on the claims\n        Guid tenantId = GetTenantId(validatedClaims);\n\n        // Combine the tenantId and claims to create the provisioning request\n        ProvisionUserRequest createRequest = CreateProvisionUserRequest(tenantId, validatedClaims);\n\n        // Call the service to actually create the account.\n        // Maybe this calls a database, or something else \n        var identityResult = createUserService.GetOrCreateAccount(createRequest);\n\n        // Return the user\n        return identityResult;\n    }\n\n    // Helper methods (just stubs)\n    private Claim[]? GetClaimValues(ExternalLoginInfo loginInfo) => null;\n    private Claim[]? ValidateClaims(Claim[]? claims) => claims;\n    private Guid GetTenantId(Claim[]? claims) => Guid.NewGuid();\n    private ProvisionUserRequest CreateProvisionUserRequest(Guid employerId, Claim[]? claims) => new();\n}\n\n// Helper types/services\npublic record ExternalLoginInfo;\npublic record ProvisionUserRequest;\npublic record UserAccount;\n\npublic class CreateUserService\n{\n    public UserAccount GetOrCreateAccount(ProvisionUserRequest request) => new();\n}\n For the most part, this code just assumes everything will be fine, but there's some hidden behaviour in the way of exceptions. What if the ValidateClaims stage can't find any valid claims, should we continue with the process? If not, the only way to \"break out\" of the chain is to return null or throw an exception. Similarly, will createUserService.GetOrCreateAccount() always succeed? Or do we need to handle exceptions there? What do we do in that situation? Using exceptions for flow control One of the common traps to fall into in this situation is using Exceptions for flow control. This is where you throw an exception as a way of \"returning\" from a method but without returning a value, breaking out of the normal method execution. As an example, consider why you might add this to the previous example. What if the validatedClaims are empty, should we continue with the method? Probably not. Similarly, what if we can't retrieve a tenant ID, there's no point continuing right?  Using exceptions for flow control can seem attractive because it means you can throw different exceptions for different types of errors, and handle those in the calling method. That differs to the approach of returning null (for example), which tells you that something went wrong, but not what went wrong.  The following shows an example of how someone might address these concerns, using exceptions to break out of the normal method flow: public class UserProvisioningService(CreateUserService createUserService)\n{\n    // No longer return UserAccount? as we throw if something is wrong\n    public UserAccount ProvisionUser(ExternalLoginInfo info)\n    {\n        Claim[]? claims = GetClaimValues(info);\n        if (claims is null)\n        {\n            // Throwing an exception instead of returning null\n            throw new ValidationException(\"The info provided was not valid\");\n        }\n\n        Claim[] validatedClaims = ValidateClaims(claims);\n        if (validatedClaims.Length == 0)\n        {\n            // Throwing an exception instead of ignoring the issue\n            throw new ValidationException(\"The claims provided were not valid\");\n        }\n\n        var tenantId = GetTenantId(validatedClaims);\n        if (tenantId == Guid.Empty)\n        {\n            // Using custom exceptions to \"describe\" the issue\n            throw new UnknownTenantException(validatedClaims);\n        }\n\n        var createRequest = CreateProvisionUserRequest(tenantId, validatedClaims);\n        var identityResult = createUserService.GetOrCreateAccount(createRequest);\n        return identityResult;\n    }\n}\n Using exceptions for flow control is \"easy\" to some extent: You can throw an exception anywhere, arbitrarily \"deep\" into the method stacks. You can create specialised exceptions to describe the error (e.g. UnknownTenantException in the example above). You don't need to change your method signatures to use them. There are downsides though: Throwing exceptions for \"normal\" scenarios is expensive. When you throw an exception, the runtime has to do quite a lot of work to create the stack trace and to unwind the method stack as appropriate. You need to remember to handle the exceptions in the calling code, but it's not clear from the method signature which types of exceptions you will need to handle. Explicitly checking and throwing exceptions repeatedly is verbose. If you want to provide \"correct\" semantic exceptions (e.g. UnknownTenantException) then you might need to wrap each method call with an exception handler before throwing the correct exception. To expand on that last point, if GetTenantId() could sometimes throw other types of exceptions, you might need to wrap the call something like this: Guid tenantId;\ntry\n{\n    tenantId = GetTenantId(validatedClaims);\n}\ncatch (Exception ex)\n{\n    throw new UnknownTenantException(claims, ex);\n}\n Changing every method call inside ProvisionUser to use that pattern could get very verbose 😅 The result pattern is a general solution to the first two issues, by making the error cases explicit in the method signature. Using a basic result pattern Ok, in the next section I'm going to show pretty much the most basic version of a result pattern you could implement. Note that I'm not suggesting you roll your own Result<T> class; there's plenty of libraries out there that do this, and the .NET base class library might have its own implementation soon. This is purely so that you can see the basics of what it might look like to use the result pattern in place of exceptions. First of all we'll see the Result<T> class. This is a simple type that can be in one of two states: IsSuccess: true, in which case Value is defined and has a value, and Error is null. IsSuccess: false, in which case Value is undefined and instead Error contains an exception. A basic implementations might look something like this: public class Result<T>\n{\n    // Success constructor\n    private Result(T value)\n    {\n        IsSuccess = true;\n        Value = value;\n        Error = null;\n    }\n\n    // Failure constructor\n    private Result(Exception error)\n    {\n        IsSuccess = false;\n        Value = default;\n        Error = error;\n    }\n\n    [MemberNotNullWhen(true, nameof(Value))]\n    [MemberNotNullWhen(false, nameof(Error))]\n    public bool IsSuccess { get; }\n    public T? Value { get; }\n    public Exception? Error { get; }\n\n    // Helper methods for constructing the `Result<T>`\n    public static Result<T> Success(T value) => new(value);\n    public static Result<T> Fail(Exception error) => new(error);\n    \n    // Allow converting a T directly into Result<T>\n    public static implicit operator Result<TSuccess>(TSuccess value) => Success(value);\n}\n Most practical Result<T> types will have way more to them than this, but it's sufficient for showing the basics. The following code shows how you might convert the previous exception-based flow handling to use the above simple result type. public class UserProvisioningService(CreateUserService createUserService)\n{\n    // Note 👇 The return type has changed\n    public Result<UserAccount> ProvisionUser(ExternalLoginInfo info)\n    {\n        // Each of the methods returns a `Result<T>` type which we can inspect\n        Result<Claim[]> claims = GetClaimValues(info);\n        if (!claims.IsSuccess)\n        {\n            // If the method call wasn't successful, we can return a \"failed\" Result<T> \n            return Result<UserAccount>.Fail(new ValidationException(\"The info provided was not valid\"));\n        }\n\n        // Using Value to extract the T from the Result<T>      👇\n        Result<Claim[]> validatedClaims = ValidateClaims(claims.Value);\n        if (!validatedClaims.IsSuccess)\n        {\n            return Result<UserAccount>.Fail(new ValidationException(\"The claims provided were not valid\"));\n        }\n\n        var tenantId = GetTenantId(validatedClaims.Value);\n        if (!tenantId.IsSuccess)\n        {\n            return Result<UserAccount>.Fail(new UnknownTenantException(validatedClaims.Value));\n        }\n\n        var createRequest = CreateProvisionUserRequest(tenantId.Value, validatedClaims.Value);\n        if (!createRequest.IsSuccess)\n        {\n            return Result<UserAccount>.Fail(new InvalidOperationException(\"Failed to create provision user request\"));\n        }\n\n        return createUserService.GetOrCreateAccount(createRequest.Value);\n    }\n\n    // Each of the methods we called return a Result<T> which we check\n    private Result<Claim[]> GetClaimValues(ExternalLoginInfo loginInfo) => Array.Empty<Claim>();\n    private Result<Claim[]> ValidateClaims(Claim[] claims) => claims;\n    private Result<Guid> GetTenantId(Claim[] claims) => Guid.NewGuid();\n    private Result<ProvisionUserRequest> CreateProvisionUserRequest(Guid employerId, Claim[] claims)\n        => new ProvisionUserRequest(); // 👈 Relying on the implicit conversion from T to Result<T>\n The above code shows the basics of how a Result<T> type could replace using exceptions for flow handling, but it's not a great example of the pattern, for many reasons: The overall flow of the code is still hard to follow, with lots of verbose \"check and return\" statements. The \"error\" type is still a generic \"Exception\" which is an unbounded possibility of values. We're checking IsSuccess before accessing Value in the above example, but there's nothing stopping you accessing Value or Error \"incorrectly\", at which point you will likely get a \"real\" NullReferenceException! Frankly, the only real benefit we have here is that callers of ProvisionUser can easily see from the method signature that the method is \"expected\" to fail for some subset of cases, given that it now returns a Result<UserAccount> instead of UserAccount. Is that worth the tradeoff? Maybe, but probably not for this implementation. If this was what the result pattern always looked like, it would be very hard to recommend. But we don't have to stop here. With one small change we can address the final point above, and make our types \"safe\" so you can't accidentally call Value or Error. Making the result pattern safer The Result<T> pattern in the previous section is slightly problematic in that it doesn't stop you trying to access the Value (or Error) property when you shouldn't. As a guard around this, many Result<T> implementations don't expose these properties directly. Instead, you have a Switch() method (sometimes called Match() or various other names). The Switch() method works a bit like a switch statement or switch expression; you provide a method to run in each possible case for a given Result<T> object: If the Result<T> has a value, you provide a Func<T> which is passed the value If the Result<T> has an error, you provide a Func<Exception> which is passed the error. There are also variations where you provide a Func<T, TReturn> and return a value. That's the version I show in the example below (the reason why will become clear soon): public class Result<T>\n{\n    // We don't expose these publicly any more\n    private readonly T? _value;\n    private readonly Exception? _error;\n\n    // Same constructors\n    private Result(T value)\n    {\n        IsSuccess = true;\n        _value = value;\n        _error = null;\n    }\n\n    private Result(Exception error)\n    {\n        IsSuccess = false;\n        _value = default;\n        _error = error;\n    }\n    \n    [MemberNotNullWhen(true, nameof(_value))]\n    [MemberNotNullWhen(false, nameof(_error))]\n    private bool IsSuccess { get; }\n\n    // This Method takes two Func<T>, one for the success case and one for the error case\n    public Result<TReturn> Switch<TReturn>(\n        Func<T, TReturn> onSuccess,\n        Func<Exception, Exception> onFailure)\n    {\n        if (IsSuccess)\n        {\n            // If this result has a value, run the success method,\n            // which returns a different value, and then we create a\n            // Result<TReturn> from it (implicitly)\n            var result = onSuccess(_value);\n            return result;\n        }\n        else\n        {\n        {\n            // If this result is an error, run the error method\n            // to allow the user to manipulate/inspect the error.\n            // We then create a new Result<TReturn> result object\n            // from the error it returns\n            var err = onFailure(_error);\n            return Result<TReturn>.Fail(err);\n        }\n    }\n\n    public static Result<T> Success(T value) => new(value);\n    public static Result<T> Fail(Exception error) => new(error);\n    public static implicit operator Result<T>(T value) => Success(value);\n}\n Ok, we have our \"safe\" Result<T> class, which enforces that we can't access Value if it's not available. But what does it look like to use this in code? Well, the bad news is, it's kind of horrible 😅 I've annotated the below code best I can, but the reality is that even though the code is guaranteed to block certain types of errors by encapsulating the IsSuccess checking, it's just awful to read… public class UserProvisioningService(CreateUserService createUserService)\n{\n    public Result<UserAccount> ProvisionUser(ExternalLoginInfo info)\n    {\n        // 1. Try to get the initial claim results\n        Result<Claim[]> claimsResult = GetClaimValues(info);\n\n        return claimsResult.Switch(\n            onSuccess: claims => // if the claims we retrieved successfully, run this function\n            {\n                // 2. Try to validate the claims\n                Result<Claim[]> validatedClaimsResult = ValidateClaims(claims);\n                return validatedClaimsResult.Switch(\n                    onSuccess: validatedClaims =>  // validation was successful\n                    {\n                        // 3. Try to extract the tenant ID\n                        Result<Guid> tenantIdResult = GetTenantId(claims);\n                        return tenantIdResult.Switch(\n                            onSuccess: tenantId => // extracted successfully\n                            {\n                                // 4. Create the ProvisionUserRequest object\n                                Result<ProvisionUserRequest> createRequestResult =\n                                    CreateProvisionUserRequest(tenantId, validatedClaims);\n                                return createRequestResult.Switch<Result<UserAccount>>(\n                                    onSuccess: createRequest => // created the request successfully\n                                    {\n                                        // 5. Try to create the account, and return the Result<UserAccount>\n                                        return createUserService.GetOrCreateAccount(createRequest);\n                                    },\n                                    onFailure: ex => Result<UserAccount>.Fail(ex)); // Step 4 failed, return the error \n                            },\n                            onFailure: ex => Result<UserAccount>.Fail(ex)); // Step 3 failed, return the error \n\n                    },\n                    onFailure: ex => Result<UserAccount>.Fail(ex)); // Step 2 failed, return the error \n            },\n            onFailure: ex =>  Result<UserAccount>.Fail(ex)); // Step 1 failed, return the error \n    }\n\n    private Result<Claim[]> GetClaimValues(ExternalLoginInfo loginInfo) => Array.Empty<Claim>();\n    private Result<Claim[]> ValidateClaims(Claim[] claims) => claims;\n    private Result<Guid> GetTenantId(Claim[] claims) => Guid.NewGuid();\n    private Result<ProvisionUserRequest> CreateProvisionUserRequest(Guid employerId, Claim[] claims) => new ProvisionUserRequest();\n}\n This code is really hard to follow. There's the ever increasing indentation (the pyramid of doom) caused by (effectively) lots of nested if statements. The error case arguments (onFailure) are a long way from the matching (onSuccess) arguments, which makes it hard to match them up. And what's more, the error cases aren't doing anything other than re-wrapping the exception from a failed Result<T> type into a Result<TReturn>.  Note that because they'll be built into the language, the type-unions proposal uses switch statements and expressions rather than a Switch method, but functionally it works in the same way.  The very repetitive nature of the code above is exactly the sort of boilerplate and cruft that Jeremy Miller often rails against, and is the sort of thing I hope he's referring to in his original post. The good news is that we don't have to stop there—in the next post we'll make all that cruft disappear! Summary In this post I provided a brief motivation for using the result pattern in applications to avoid using exceptions for flow control. I started with a simple implementation without any error checking, then added exceptions to handle error cases. Unfortunately using Exceptions for common error cases can be very slow and means the caller has to remember to catch those exceptions. As a \"solution\" to exceptions, I replaced the Exceptions with a Result<T> type and the result pattern. For safety, we enforced that you had to use a Switch() method to \"extract\" the result. Unfortunately, this made the final code incredibly cumbersome and verbose, so in the next post we'll see how we can simplify it significantly!"
  },
  {
    "itemId": "https://andrewlock.net/major-updates-to-netescapades-aspnetcore-security-headers/",
    "raw": "<img src=\"https://andrewlock.net/content/images/2024/securityheaders_banner.png\" /><p>In this post I provide an update on the <a href=\"https://github.com/andrewlock/NetEscapades.AspNetCore.SecurityHeaders\"><em>NetEscapades.AspNetCore.SecurityHeaders</em></a> project. I've just released a preview version of <code>1.0.0</code>, which addresses some longstanding requests for extra functionality, updates the supported target frameworks, and more. In this post I provide a quick overview of the library, and then discuss the major changes made in this first preview.</p> <ul><li><a href=\"#what-are-security-headers-\">What are security headers?</a></li> <li><a href=\"#adding-security-headers-to-your-app\">Adding security headers to your app</a></li> <li><a href=\"#major-changes-in-1-0-0-preview-1\">Major changes in <code>1.0.0-preview.1</code></a> <ul><li><a href=\"#changes-to-the-supported-frameworks\">Changes to the supported frameworks</a></li> <li><a href=\"#changes-to-headers\">Changes to headers</a> <ul><li><a href=\"#changes-to-the-default-headers\">Changes to the default headers</a></li> <li><a href=\"#x-xss-protection-1-mode-block-is-no-longer-recommended\"><code>X-XSS-Protection=1; mode-block</code> is no longer recommended</a></li> <li><a href=\"#expect-ct-is-no-longer-recommended\"><code>Expect-CT</code> is no longer recommended</a></li> <li><a href=\"#new-permisionspolicybuilder-adddefaultsecuredirectives-method\">New <code>PermisionsPolicyBuilder.AddDefaultSecureDirectives()</code> method</a></li> <li><a href=\"#new-adddefaultapisecurityheaders-method\">New <code>AddDefaultApiSecurityHeaders()</code> method</a></li> <li><a href=\"#feature-policy-is-marked-obsolete\"><code>Feature-Policy</code> is marked obsolete</a></li></ul> </li> <li><a href=\"#applying-different-headers-to-some-endpoints\">Applying different headers to some endpoints</a></li> <li><a href=\"#customizing-the-headers-completely\">Customizing the headers completely</a></li> <li><a href=\"#document-headers-functionality-has-been-removed\">\"Document headers\" functionality has been removed</a></li> <li><a href=\"#changes-to-nonce-generation\">Changes to nonce generation</a></li></ul> </li> <li><a href=\"#summary\">Summary</a></li></ul> <h2 id=\"what-are-security-headers-\" class=\"heading-with-anchor\"><a href=\"#what-are-security-headers-\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">What are security headers?</a></h2> <p>Security headers are headers that you can return in your HTTP responses which improve the overall security of your application. The headers instruct browsers to activate or disable various features, with the overall goal of hardening your application and reducing your attack surface area.</p> <p>Some of <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Strict-Transport-Security\">these headers</a> apply to all HTTP responses, while <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Permissions-Policy\">others</a> only really make sense for HTML responses. Nevertheless, it <em>can</em> make sense to apply theoretically-HTML-only headers to non-HTML responses as part of a defence-in-depth approach, <a href=\"https://cheatsheetseries.owasp.org/cheatsheets/REST_Security_Cheat_Sheet.html#security-headers\">as described by OWASP</a>.</p> <p>The main problem with security headers is that there are <a href=\"https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Headers_Cheat_Sheet.html#security-headers\">a <em>lot</em> of them</a>, and the list is generally growing and evolving, with new headers being introduced and others being retired. What's more, different headers use different patterns for lists—some use <code>;</code> separators, others use <code>,</code>, and others use a space—so it's easy to set them up incorrectly.</p> <p>The <a href=\"https://github.com/andrewlock/NetEscapades.AspNetCore.SecurityHeaders\"><em>NetEscapades.AspNetCore.SecurityHeaders</em></a> package aims to help you set up security headers for your ASP.NET Core app. It provides sensible defaults, with a fluent builder pattern for customizing and configuring the headers for your specific application requirements.</p> <h2 id=\"adding-security-headers-to-your-app\" class=\"heading-with-anchor\"><a href=\"#adding-security-headers-to-your-app\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Adding security headers to your app</a></h2> <p>In this section I show the quickest was to get started with <a href=\"https://github.com/andrewlock/NetEscapades.AspNetCore.SecurityHeaders\"><em>NetEscapades.AspNetCore.SecurityHeaders</em></a> and to start adding security headers to your application.</p> <p>First, add the package to your app:</p> <pre class=\"language-bash\"><code class=\"language-bash\">dotnet <span class=\"token function\">add</span> package NetEscapades.AspNetCore.SecurityHeaders <span class=\"token parameter variable\">--version</span> <span class=\"token number\">1.0</span>.0-preview.1\n</code></pre> <p>Alternatively, add the package to your <em>.csproj</em> directly</p> <pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Project</span> <span class=\"token attr-name\">Sdk</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Microsoft.NET.Sdk.Web<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>PropertyGroup</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>TargetFramework</span><span class=\"token punctuation\">&gt;</span></span>net8.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>TargetFramework</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>PropertyGroup</span><span class=\"token punctuation\">&gt;</span></span>\n\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ItemGroup</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token comment\">&lt;!-- 👇 Add the package --&gt;</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>PackageReference</span> <span class=\"token attr-name\">Include</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>NetEscapades.AspNetCore.SecurityHeaders<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">Version</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>1.0.0-preview.1<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ItemGroup</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Project</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre> <p>Finally, add the security headers middleware to the start of your middleware pipeline with the <code>UseSecurityHeaders()</code> extension method. For example:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> builder <span class=\"token operator\">=</span> WebApplication<span class=\"token punctuation\">.</span><span class=\"token function\">CreateBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> app <span class=\"token operator\">=</span> builder<span class=\"token punctuation\">.</span><span class=\"token function\">Build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 👇 Add the security headers to the start of the pipeline</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">UseSecurityHeaders</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">MapGet</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token string\">\"Hello world!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">Run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre> <p>The <code>SecurityHeadersMiddleware</code> registers a callback that adds several headers to all responses. By default, the middleware adds the following header to your responses:</p> <ul><li><code>X-Content-Type-Options: nosniff</code></li> <li><code>X-Frame-Options: Deny</code></li> <li><code>Referrer-Policy: strict-origin-when-cross-origin</code></li> <li><code>Content-Security-Policy: object-src 'none'; form-action 'self'; frame-ancestors 'none'</code></li> <li><code>Cross-Origin-Opener-Policy: same-origin</code></li> <li><code>Strict-Transport-Security: max-age=31536000; includeSubDomains</code> - <em>only applied to HTTPS responses</em></li></ul> <p>These headers were chosen based on <a href=\"https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Headers_Cheat_Sheet.html#security-headers\">guidance from OWASP</a> to provide security hardening benefits, while being broadly applicable to most applications.</p> <blockquote> <p>These headers don't represent the <em>most</em> secure set you could choose, but rather a \"generally safe\" set for most applications. Ideally you should customise these headers to add a more secure (and more restrictive) set.</p> </blockquote> <p>If you want to change the headers that are applied, you can create an instance of <code>HeaderPolicyCollection</code>, and use the fluent builder interface to customize the added headers. The following shows an example which specifically adds all the default headers independently.</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> policyCollection <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">HeaderPolicyCollection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">AddFrameOptionsDeny</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">AddContentTypeOptionsNoSniff</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">AddStrictTransportSecurityMaxAgeIncludeSubDomains</span><span class=\"token punctuation\">(</span><span class=\"token named-parameter punctuation\">maxAgeInSeconds</span><span class=\"token punctuation\">:</span> <span class=\"token number\">60</span> <span class=\"token operator\">*</span> <span class=\"token number\">60</span> <span class=\"token operator\">*</span> <span class=\"token number\">24</span> <span class=\"token operator\">*</span> <span class=\"token number\">365</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// maxage = one year in seconds</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">AddReferrerPolicyStrictOriginWhenCrossOrigin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">RemoveServerHeader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">AddContentSecurityPolicy</span><span class=\"token punctuation\">(</span>builder <span class=\"token operator\">=&gt;</span>\n    <span class=\"token punctuation\">{</span>\n        builder<span class=\"token punctuation\">.</span><span class=\"token function\">AddObjectSrc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">None</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        builder<span class=\"token punctuation\">.</span><span class=\"token function\">AddFormAction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Self</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        builder<span class=\"token punctuation\">.</span><span class=\"token function\">AddFrameAncestors</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">None</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">AddCustomHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"X-My-Test-Header\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Header value\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">UseSecurityHeaders</span><span class=\"token punctuation\">(</span>policyCollection<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre> <p>For most of the history of <em>NetEscapades.AspNetCore.SecurityHeaders</em>, this was been the only way to configure the security headers for your application. The advantage is that it's <em>simple</em>—there's no services to add, nothing to \"reason\" about—whatever headers you configure, are added.</p> <p>However, some people wanted more control, for example to be able to add different headers to different endpoints in their application, or to customize the headers on a request-by-request basis. That flexibility is largely what the changes in <code>1.0.0</code> are about, but as this is a major version, I took the opportunity to make some other larger changes too.</p> <p>For the rest of this post I'll describe some of the biggest changes in <code>1.0.0-preview.1</code>.</p> <h2 id=\"major-changes-in-1-0-0-preview-1\" class=\"heading-with-anchor\"><a href=\"#major-changes-in-1-0-0-preview-1\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Major changes in <code>1.0.0-preview.1</code></a></h2> <p>The following sections describe the high level changes and features included in <code>1.0.0-preview.1</code>. These aren't guaranteed to make it into the final <code>1.0.0</code> release, so do let me know what you think about them!</p> <p>Before we get started, the first thing to note is that <em>NetEscapades.AspNetCore.SecurityHeaders</em> finally <a href=\"https://github.com/andrewlock/NetEscapades.AspNetCore.SecurityHeaders/issues/194\">has a logo</a>:</p> <p><img src=\"/content/images/2024/headers_logo.png\" alt=\"NetEscapades.AspNetCore.SecurityHeaders\"></p> <p>A big thanks to <a href=\"https://hachyderm.io/@khalidabuhakmeh@mastodon.social\">Khalid</a> for putting that together <a href=\"https://hachyderm.io/@khalidabuhakmeh@mastodon.social/113205536777140020\">so quickly</a>! Now lets look at the new features and breaking changes.</p> <h3 id=\"changes-to-the-supported-frameworks\" class=\"heading-with-anchor\"><a href=\"#changes-to-the-supported-frameworks\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Changes to the supported frameworks</a></h3> <p>I first created <em>NetEscapades.AspNetCore.SecurityHeaders</em> way back in 2016, when ASP.NET Core was just being released. Back then, ASP.NET Core could <em>also</em> be run on .NET Framework. The original thought was that this mode would serve as a migration path from ASP.NET to ASP.NET Core.</p> <p>That path is rarely recommended these days, and instead, <a href=\"https://learn.microsoft.com/en-us/aspnet/core/migration/inc/overview\">a \"strangler fig\" pattern is recommended</a>. ASP.NET Core has not been supported on .NET Framework since version 2.1, and as such <code>1.0.0-preview.1</code> of <em>NetEscapades.AspNetCore.SecurityHeaders</em> finally drops support for .NET Framework too, by <a href=\"https://github.com/andrewlock/NetEscapades.AspNetCore.SecurityHeaders/pull/167\">dropping support for <code>netstandard2.0</code></a> and everything prior to .NET Core 3.1.</p> <p>Given the package still supports .NET Core 3.1+ it's <em>very</em> unlikely you'll be impacted by this change unless you're on a (very) unsupported version of .NET Core. And if you are, I would strongly advise you to update anyway!</p> <h3 id=\"changes-to-headers\" class=\"heading-with-anchor\"><a href=\"#changes-to-headers\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Changes to headers</a></h3> <p>In the next section I describe some of the changes to specific security headers, including changes to default values, new APIs, and deprecated methods.</p> <h4 id=\"changes-to-the-default-headers\" class=\"heading-with-anchor\"><a href=\"#changes-to-the-default-headers\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Changes to the default headers</a></h4> <p>When you don't specify a custom <code>HeaderPolicyCollection</code>, <em>NetEscapades.AspNetCore.SecurityHeaders</em> applies a default set of headers, as I described previously. These headers are encapsulated in the <code>AddDefaultSecurityHeaders()</code> extension method, so the following are equivalent:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\">app<span class=\"token punctuation\">.</span><span class=\"token function\">UseSecurityHeaders</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 👈 This...</span>\n\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> policies <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">HeaderPolicyCollection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">AddDefaultSecurityHeaders</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">UseSecurityHeaders</span><span class=\"token punctuation\">(</span>policies<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 👈 ..is equivalent to this.</span>\n</code></pre> <p>In <code>1.0.0-preview.1</code> the headers that are applied have changed slightly:</p> <ul><li><code>Cross-Origin-Opener-Policy=same-origin</code> is now added.</li> <li><code>X-XSS-Protection=1; mode-block</code> is no longer added.</li></ul> <p>The full set of headers added by default are now:</p> <ul><li><code>X-Content-Type-Options: nosniff</code></li> <li><code>X-Frame-Options: Deny</code></li> <li><code>Referrer-Policy: strict-origin-when-cross-origin</code></li> <li><code>Content-Security-Policy: object-src 'none'; form-action 'self'; frame-ancestors 'none'</code></li> <li><code>Cross-Origin-Opener-Policy: same-origin</code></li> <li><code>Strict-Transport-Security: max-age=31536000; includeSubDomains</code> - <em>HTTPS responses only</em></li></ul> <p>If you don't want this change, you can simply create a custom <code>HeaderPolicyCollection</code> configured as it was previously:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">HeaderPolicyCollection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">AddFrameOptionsDeny</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">AddXssProtectionBlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// This is no longer included by default</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">AddContentTypeOptionsNoSniff</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">AddStrictTransportSecurityMaxAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">AddReferrerPolicyStrictOriginWhenCrossOrigin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">RemoveServerHeader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">AddContentSecurityPolicy</span><span class=\"token punctuation\">(</span>builder <span class=\"token operator\">=&gt;</span>\n  <span class=\"token punctuation\">{</span>\n      builder<span class=\"token punctuation\">.</span><span class=\"token function\">AddObjectSrc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">None</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      builder<span class=\"token punctuation\">.</span><span class=\"token function\">AddFormAction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Self</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      builder<span class=\"token punctuation\">.</span><span class=\"token function\">AddFrameAncestors</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">None</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre> <h4 id=\"x-xss-protection-1-mode-block-is-no-longer-recommended\" class=\"heading-with-anchor\"><a href=\"#x-xss-protection-1-mode-block-is-no-longer-recommended\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\"><code>X-XSS-Protection=1; mode-block</code> is no longer recommended</a></h4> <p>You may wonder why <code>X-XSS-Protection</code> was removed from the default headers. The <code>X-XSS-Protection</code> header is interesting in that it's a security header that <em>used</em> to be recommended to add to your applications to improve security. However these days it's <em>not</em> recommended, because, as described on <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-XSS-Protection\">MDN</a>:</p> <blockquote> <p>The <code>X-XSS-Protection</code> header \"can create XSS vulnerabilities in otherwise safe websites\"</p> </blockquote> <p>That's clearly not an example of a good header to add by default, so <a href=\"https://github.com/andrewlock/NetEscapades.AspNetCore.SecurityHeaders/pull/168\">it's been removed</a> from the default set of security headers and <a href=\"https://github.com/andrewlock/NetEscapades.AspNetCore.SecurityHeaders/pull/191\">marked obsolete</a>. You can still add it to your application if you want to, it's just not recommended unless you understand the risks.</p> <h4 id=\"expect-ct-is-no-longer-recommended\" class=\"heading-with-anchor\"><a href=\"#expect-ct-is-no-longer-recommended\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\"><code>Expect-CT</code> is no longer recommended</a></h4> <p>The <code>Expect-CT</code> header lets sites opt-in to <a href=\"https://developer.mozilla.org/en-US/docs/Web/Security/Certificate_Transparency\">certificate transparency</a> requirements, but only Chrome and other Chromium-based browsers implemented Expect-CT, On top of that, Chromium deprecated the header in version 107 (Oct 2022), because <a href=\"https://chromestatus.com/feature/6244547273687040\">Chromium now enforces CT by default</a>.</p> <p>Given the header is deprecated and <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Expect-CT\">no longer recommended</a>, it's <a href=\"https://github.com/andrewlock/NetEscapades.AspNetCore.SecurityHeaders/pull/197\">now marked obsolete in <em>NetEscapades.AspNetCore.SecurityHeaders</em></a>.</p> <h4 id=\"new-permisionspolicybuilder-adddefaultsecuredirectives-method\" class=\"heading-with-anchor\"><a href=\"#new-permisionspolicybuilder-adddefaultsecuredirectives-method\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">New <code>PermisionsPolicyBuilder.AddDefaultSecureDirectives()</code> method</a></h4> <p>The <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Permissions-Policy\"><code>Permissions-Policy</code> header</a> provides a way to allow or deny the browser from using various features, such as the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Bluetooth_API\">Web Bluetooth API</a> or the <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Permissions-Policy/camera\">Camera</a>. Support for <code>Permissions-Policy</code> has been available for some time (with <a href=\"https://github.com/andrewlock/NetEscapades.AspNetCore.SecurityHeaders/pull/177\">many new policies added recently</a>).</p> <p>One slight annoyance with building up a <code>Permissions-Policy</code> is that there are so <em>many</em> policies. If you're building a JSON API (for example) then you'll likely want to disable <a href=\"https://cheatsheetseries.owasp.org/cheatsheets/REST_Security_Cheat_Sheet.html#security-headers\">essentially all of them</a>, at which point you're calling a <em>lot</em> of methods.</p> <p><code>1.0.0-preview.1</code> adds two new convenience method that add (most) of <a href=\"https://cheatsheetseries.owasp.org/cheatsheets/REST_Security_Cheat_Sheet.html#security-headers\">the headers recommended by OWASP for REST endpoints</a>. If you just want to add the default set of directives you can call <code>AddPermissionsPolicyWithDefaultSecureDirectives()</code> directly on <code>HeaderPolicyCollection</code>:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> policies <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">HeaderPolicyCollection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">AddPermissionsPolicyWithDefaultSecureDirectives</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre> <p>Alternatively, if you want to customize the <code>Permissions-Policy</code>, you can call <code>PermissionsPolicyBuilder.AddDefaultSecureDirectives()</code>, and then add (or override) additional directives:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> policies <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">HeaderPolicyCollection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">AddPermissionsPolicy</span><span class=\"token punctuation\">(</span>p <span class=\"token operator\">=&gt;</span> \n    <span class=\"token punctuation\">{</span>\n      p<span class=\"token punctuation\">.</span><span class=\"token function\">AddDefaultSecureDirectives</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Add the default directives</span>\n      p<span class=\"token punctuation\">.</span><span class=\"token function\">AddAttributionReporting</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">None</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Additional customization</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre> <p>In both cases the default secure directives added are equivalent to:</p> <pre class=\"language-http\"><code class=\"language-http\">accelerometer=(), ambient-light-sensor=(), autoplay=(), camera=(), display-capture=(),\nencrypted-media=(), fullscreen=(), geolocation=(), gyroscope=(), magnetometer=(),\nmicrophone=(), midi=(), payment=(), picture-in-picture=(), publickey-credentials-get=(),\nscreen-wake-lock=(), sync-xhr=(), usb=(), web-share=(), xr-spatial-tracking=()\n</code></pre> <p>Note that this isn't quite the same set of headers <a href=\"https://cheatsheetseries.owasp.org/cheatsheets/REST_Security_Cheat_Sheet.html#security-headers\">as suggested by OWASP</a>, because <em>NetEscapades.AspNetCore.SecurityHeaders</em> doesn't include experimental features (to limit the scope and avoid too many breaking changes), but if you want to replicate those directives, you can always use the <code>AddCustomDirective()</code> helper.</p> <h4 id=\"new-adddefaultapisecurityheaders-method\" class=\"heading-with-anchor\"><a href=\"#new-adddefaultapisecurityheaders-method\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">New <code>AddDefaultApiSecurityHeaders()</code> method</a></h4> <p>The set of security headers added by <code>AddDefaultSecurityHeaders()</code> was chosen to provide a good balance between security and applicability for a basic ASP.NET Core website that's serving HTML. But many apps <em>only</em> serve JSON and are never expected to be loaded directly in the browser. In those scenarios we can apply a more \"aggressive\" set of headers.</p> <p>The new <code>AddDefaultApiSecurityHeaders()</code> extension method is designed for applying to APIs, and is based on <a href=\"https://cheatsheetseries.owasp.org/cheatsheets/REST_Security_Cheat_Sheet.html#security-headers\">the recommendation from OWASP</a>. It adds the following headers (I've also highlighted any differences with <code>AddDefaultSecurityHeaders()</code>):</p> <ul><li><code>X-Content-Type-Options: nosniff</code></li> <li><code>X-Frame-Options: Deny</code></li> <li><code>Referrer-Policy: no-referrer</code> <ul><li>Compared to <code>strict-origin-when-cross-origin</code> for <code>AddDefaultSecurityHeaders()</code></li></ul> </li> <li><code>Content-Security-Policy: default-src 'none'; frame-ancestors 'none'</code> <ul><li>Compared to <code>object-src 'none'; form-action 'self'; frame-ancestors 'none'</code> for <code>AddDefaultSecurityHeaders()</code></li></ul> </li> <li><code>Permissions-Policy: accelerometer=(), ambient-light-sensor=(), autoplay=(), camera=(), display-capture=(), encrypted-media=(), fullscreen=(), geolocation=(), gyroscope=(), magnetometer=(), microphone=(), midi=(), payment=(), picture-in-picture=(), publickey-credentials-get=(), screen-wake-lock=(), sync-xhr=(), usb=(), web-share=(), xr-spatial-tracking=()</code> <ul><li>Not included in <code>AddDefaultSecurityHeaders()</code></li></ul> </li> <li><code>Strict-Transport-Security: max-age=31536000; includeSubDomains</code> - <em>HTTPS responses only</em></li></ul> <p>You can use <code>AddDefaultApiSecurityHeaders()</code> in your application by applying it to a <code>HeaderPolicyCollection</code>, for example:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> builder <span class=\"token operator\">=</span> WebApplication<span class=\"token punctuation\">.</span><span class=\"token function\">CreateBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> app <span class=\"token operator\">=</span> builder<span class=\"token punctuation\">.</span><span class=\"token function\">Build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 👇 Configure to use the API security headers</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">UseSecurityHeaders</span><span class=\"token punctuation\">(</span>p <span class=\"token operator\">=&gt;</span> p<span class=\"token punctuation\">.</span><span class=\"token function\">AddDefaultApiSecurityHeaders</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">MapGet</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token string\">\"Hello world!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">Run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre> <p>It's worth noting that <a href=\"https://cheatsheetseries.owasp.org/cheatsheets/REST_Security_Cheat_Sheet.html#security-headers\">OWASP recommends</a> always adding other non-security headers to API responses, such as <code>Cache-Control: no-store</code> and <code>Content-Type</code>.</p> <h4 id=\"feature-policy-is-marked-obsolete\" class=\"heading-with-anchor\"><a href=\"#feature-policy-is-marked-obsolete\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\"><code>Feature-Policy</code> is marked obsolete</a></h4> <p><code>Feature-Policy</code> is a now-obsolete name for the <code>Permissions-Policy</code> header. The header has been deprecated, and as such the extension methods for adding <code>Feature-Policy</code> to your header collection have been marked <code>[Obsolete]</code>. You're recommended to switch to using <code>Permissions-Policy</code> instead.</p> <h3 id=\"applying-different-headers-to-some-endpoints\" class=\"heading-with-anchor\"><a href=\"#applying-different-headers-to-some-endpoints\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Applying different headers to some endpoints</a></h3> <p>The biggest feature by far in <code>1.0.0-preview.1</code> is the ability to apply different headers to different endpoints. This can be particularly useful if you want to maximally lock down your site, for example by applying a more restrictive <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP\"><code>Content-Security-Policy</code></a> on certain pages, and relaxing it only when necessary.</p> <p>Let's say, for example, that your application contains both HTML and JSON endpoints. Perhaps you're serving HTML via Razor Pages, but you have some API endpoints that are also available. You would want to:</p> <ul><li>Apply the default security headers to all responses by default</li> <li>For the API endpoints, apply the headers added by <code>AddDefaultApiSecurityHeaders()</code></li></ul> <p>Prior to <code>1.0.0-preview.1</code>, that wasn't possible, but now it is! 🎉 To achieve this we need to do 3 things:</p> <ol><li>Configure default and named policies for the application.</li> <li>Add the middleware using <code>UseSecurityHeaders()</code> (as before).</li> <li>Apply custom policies to endpoints.</li></ol> <p>The following example shows all of those steps</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> builder <span class=\"token operator\">=</span> WebApplication<span class=\"token punctuation\">.</span><span class=\"token function\">CreateBuilder</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nbuilder<span class=\"token punctuation\">.</span>Services<span class=\"token punctuation\">.</span><span class=\"token function\">AddRazorPages</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 1. 👇 Configure the policies for the application</span>\nbuilder<span class=\"token punctuation\">.</span>Services<span class=\"token punctuation\">.</span><span class=\"token function\">AddSecurityHeaderPolicies</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">SetDefaultPolicy</span><span class=\"token punctuation\">(</span>p <span class=\"token operator\">=&gt;</span> p<span class=\"token punctuation\">.</span><span class=\"token function\">AddDefaultSecurityHeaders</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 👈 Configure the default policy</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">AddPolicy</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"API\"</span><span class=\"token punctuation\">,</span> p <span class=\"token operator\">=&gt;</span> p<span class=\"token punctuation\">.</span><span class=\"token function\">AddDefaultApiSecurityHeaders</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 👈 Configure named policies</span>\n\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> app <span class=\"token operator\">=</span> builder<span class=\"token punctuation\">.</span><span class=\"token function\">Build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 2. 👇 Add the security headers middleware</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">UseSecurityHeaders</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">UseHttpsRedirection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">UseStaticFiles</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">UseRouting</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">UseAuthorization</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">MapRazorPages</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">MapGet</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/api\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token string\">\"Hello world\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">WithSecurityHeadersPolicy</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"API\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 3. 👈 Apply a named policy to the endpoint</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">Run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre> <p>In the example above, the default security headers are applied to all responses <em>except</em> when the <code>/api</code> endpoint is invoked, in which case the named policy <code>\"API\"</code> is applied (which adds the <code>AddDefaultApiSecurityHeaders()</code> headers).</p> <blockquote> <p>If you're working with MVC controllers or Razor Pages, you can apply a named policy to an endpoint using the <code>[SecurityHeadersPolicyAttribute]</code> header.</p> </blockquote> <p>This should cater to the vast majority of cases where you need to apply multiple policies in an application, but if you really need it, you can now completely customise the policy that's applied, as you'll see in the next section.</p> <h3 id=\"customizing-the-headers-completely\" class=\"heading-with-anchor\"><a href=\"#customizing-the-headers-completely\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Customizing the headers completely</a></h3> <p>Applying different policies to different endpoints works well when you have a fixed number of policies to apply. However, in some cases you need to completely customise the headers for a given request. This might be the case if, for example, you are running a multi-tenant application, and the headers need to be matched to the incoming request.</p> <p>In <code>1.0.0-preview.1</code>, you can now completely customize the headers that will be applied by providing a lambda method that is executed just before the headers are applied, and by returning the <code>HeaderPolicyCollection</code> to apply.</p> <p>For example, lets imagine that you want to apply a different set of headers for some requests. You can call the <code>SetPolicySelector()</code> as shown below and provide a function to execute whenever a policy is about to be applied:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> builder <span class=\"token operator\">=</span> WebApplication<span class=\"token punctuation\">.</span><span class=\"token function\">CreateBuilder</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nbuilder<span class=\"token punctuation\">.</span>Services<span class=\"token punctuation\">.</span><span class=\"token function\">AddSecurityHeaderPolicies</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">SetPolicySelector</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">PolicySelectorContext</span> ctx<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span>\n  <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// TODO: anything you need to build the HeaderPolicyCollection</span>\n      <span class=\"token comment\">// e.g. use services from the DI container (if you need to)</span>\n      <span class=\"token class-name\">IServiceProvider</span> services <span class=\"token operator\">=</span> ctx<span class=\"token punctuation\">.</span>HttpContext<span class=\"token punctuation\">.</span>RequestServices<span class=\"token punctuation\">;</span> \n\n      <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> selector <span class=\"token operator\">=</span> services<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">GetService</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>TenantHeaderPolicyCollectionSelector<span class=\"token punctuation\">&gt;</span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> tenant <span class=\"token operator\">=</span> services<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">GetService</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>ITenant<span class=\"token punctuation\">&gt;</span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token class-name\">HeaderPolicyCollection</span> policy <span class=\"token operator\">=</span> selector<span class=\"token punctuation\">.</span><span class=\"token function\">GetPolicyForTenant</span><span class=\"token punctuation\">(</span>tenant<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> policy<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 👈 This is the policy that is applied</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> app <span class=\"token operator\">=</span> builder<span class=\"token punctuation\">.</span><span class=\"token function\">Build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">UseSecurityHeaders</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">MapGet</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/api\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token string\">\"Hello world\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">Run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre> <p>The lambda/method you pass to <code>SetPolicySelector()</code> is provided a <code>PolicySelectorContext</code>, which includes all the information you might need to decide which policy to apply:</p> <ul><li><code>HttpContext HttpContext</code>—The current <code>HttpContext</code> for the request.</li> <li><code>IReadOnlyDictionary&lt;string, IReadOnlyHeaderPolicyCollection&gt; ConfiguredPolicies</code>—The named policies configured for the application.</li> <li><code>IReadOnlyHeaderPolicyCollection DefaultPolicy</code>—The default policy that applies to the request.</li> <li><code>string? EndpointPolicyName</code>—The name of the endpoint policy that applies to the request, if any.</li> <li><code>IReadOnlyHeaderPolicyCollection? EndpointPolicy</code>—The endpoint policy that applies to the request, if any. If no endpoint-specific policy applies to the request, returns <code>null</code>.</li> <li><code>IReadOnlyHeaderPolicyCollection SelectedPolicy</code>—The policy that would be applied to the endpoint by default: equivalent to <code>EndpointPolicy</code> if available, otherwise <code>DefaultPolicy</code>.</li></ul> <p>Your policy selector <em>must</em> return a policy collection. If you don't want to customise the policy for the request, return <code>ctx.SelectedPolicy</code>.</p> <blockquote> <p>Note that you should avoid building a new <code>HeaderPolicyCollection</code> on every request for performance reasons. Where possible, cache and reuse <code>HeaderPolicyCollection</code> instances. If you do need to create a new <code>HeaderPolicyCollection</code> from a <code>IReadOnlyHeaderPolicyCollection</code>, you can call <code>Copy()</code> to return a mutable instance.</p> </blockquote> <p>With the combination of endpoint-specific policies and the customisation available in <code>SetPolicySelector()</code>, I hope that people will now be able to customise their applications more easily, without needing to resort to hacking the internals of the library!</p> <h3 id=\"document-headers-functionality-has-been-removed\" class=\"heading-with-anchor\"><a href=\"#document-headers-functionality-has-been-removed\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">\"Document headers\" functionality has been removed</a></h3> <p>One consequence of the additional customisation possible with <code>SetPolicySelector()</code> and endpoint policies is that <a href=\"https://github.com/andrewlock/NetEscapades.AspNetCore.SecurityHeaders/pull/186\">the concept of \"document headers\" have been removed</a>. The <code>ApplyDocumentHeadersToContentTypes()</code> and <code>ApplyDocumentHeadersToAllResponses()</code> extension methods have now been marked <code>[Obsolete]</code> and are no-ops.</p> <p>These methods were originally added because some security headers don't really make <em>sense</em> when applied to passive content like JSON responses compared to HTML responses. Consequently, by default, some security headers (such as <code>Content-Security-Policy</code>) would be omitted unless the response was HTML or JavaScript.</p> <p>The only real benefit to this approach was that it reduced the size of the response (by omitting some headers). The down-side was that it added confusion and an additional configuration knob people had to consider. What's more <a href=\"https://cheatsheetseries.owasp.org/cheatsheets/REST_Security_Cheat_Sheet.html#security-headers\">OWASP actually recommends you <em>do</em> send these headers</a> even if you have no intention of returning HTML, as part of a defence-in-depth approach. What's more, some of the headers that were previously considered \"document/HTML only\" actually <em>should</em> be added to all responses to protect against <a href=\"https://www.w3.org/Security/wiki/Clickjacking_Threats#Drag_and_drop_attacks\">drag-and-drop style clickjacking attacks</a>.</p> <p>So in <code>1.0.0-preview.1</code> the concept of a <code>DocumentHeaderPolicy</code> has been removed, and headers are <em>always</em> applied to <em>all</em> requests regardless of the response content type.</p> <blockquote> <p>Mostly…some headers only apply to HTTPS requests for example, or should not be applied to <code>localhost</code> requests. But the \"document header\" concept is no more.</p> </blockquote> <p>If you want to re-instate the \"document header\" functionality for some reason, you can recreate something similar with <code>SetPolicySelector()</code>. There are lots of different ways you could achieve it, but here's one example:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> builder <span class=\"token operator\">=</span> WebApplication<span class=\"token punctuation\">.</span><span class=\"token function\">CreateBuilder</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// The mime types considered \"documents\"</span>\n<span class=\"token class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> documentTypes <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">\"text/html\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"application/javascript\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"text/javascript\"</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> documentPolicy <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">HeaderPolicyCollection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">AddDefaultSecurityHeaders</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nbuilder<span class=\"token punctuation\">.</span>Services<span class=\"token punctuation\">.</span><span class=\"token function\">AddSecurityHeaderPolicies</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">SetDefaultPolicy</span><span class=\"token punctuation\">(</span>p <span class=\"token operator\">=&gt;</span> p<span class=\"token punctuation\">.</span><span class=\"token function\">AddDefaultApiSecurityHeaders</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">SetPolicySelector</span><span class=\"token punctuation\">(</span>ctx <span class=\"token operator\">=&gt;</span>\n  <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// If the response is one of the \"document\" types...</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>documentTypes<span class=\"token punctuation\">.</span><span class=\"token function\">Contains</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">.</span>HttpContext<span class=\"token punctuation\">.</span>Response<span class=\"token punctuation\">.</span>ContentType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">{</span>\n          <span class=\"token comment\">// ... then return the \"document\" policy</span>\n          <span class=\"token keyword\">return</span> documentPolicy<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n\n      <span class=\"token comment\">// Otherwise return the original selected policy</span>\n      <span class=\"token keyword\">return</span> ctx<span class=\"token punctuation\">.</span>SelectedPolicy<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> app <span class=\"token operator\">=</span> builder<span class=\"token punctuation\">.</span><span class=\"token function\">Build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">UseSecurityHeaders</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">MapGet</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/api\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token string\">\"Hello world\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">Run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre> <p>As I've already said, I don't recommend you do this, but the point is you <em>can</em> now, which is why I chose to remove the document headers functionality.</p> <h3 id=\"changes-to-nonce-generation\" class=\"heading-with-anchor\"><a href=\"#changes-to-nonce-generation\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Changes to nonce generation</a></h3> <p>In previous versions of <em>NetEscapades.AspNetCore.SecurityHeaders</em> a <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/nonce\">nonce (number used once)</a> was generated at the start of a request only when required by a <code>Content-Security-Policy</code>. However, with the changes in <code>1.0.0-preview.1</code> it's no longer possible to know ahead of time that a nonce will be required (because the header policies can change later in the request, due to a named endpoint policy for example).</p> <p>As a result, the nonce is no longer generated at the <em>start</em> of the request. Instead, it's generated lazily when you call <code>HttpContext.GetNonce()</code>. The end result is the same as before—a single nonce is generated per-request, and only when it's required. The slight breaking change is the fact that you now <em>must</em> call <code>GetNonce()</code> to retrieve the nonce. Previously you <em>could</em> have retrieved the nonce directly from <code>HttpContext.Items</code> (even though you <em>shouldn't</em>); in <code>1.0.0-preview.1</code> that's no longer possible.</p> <p>That covers the majority of the major changes made between versions <code>0.24.0</code> and <code>1.0.0-preview.1</code>. You can find the <a href=\"https://github.com/andrewlock/NetEscapades.AspNetCore.SecurityHeaders/compare/v0.24.0...v1.0.0-preview.1\">full diff here</a>, including an API diff (using <a href=\"/preventing-breaking-changes-in-public-apis-with-publicapigenerator/\">the workflow I described in a previous post</a>).</p> <h2 id=\"summary\" class=\"heading-with-anchor\"><a href=\"#summary\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Summary</a></h2> <p>Adding <a href=\"https://owasp.org/www-project-secure-headers/\">security-related headers</a> to your HTTP responses is an easy way to harden your application against attacks. <a href=\"https://github.com/andrewlock/NetEscapades.AspNetCore.SecurityHeaders\"><em>NetEscapades.AspNetCore.SecurityHeaders</em></a> provides an easy way to do this, and has recently been through some major changes that I'm looking for feedback on before releasing the final stable version.</p> <p>In summary, the major changes are:</p> <ul><li>Support for .NET Core 3.1+ only</li> <li>Updates to headers <ul><li>Changes to the default headers</li> <li>New utility methods for adding API-related security headers and a locked-down <code>Permissions-Policy</code> header</li> <li><code>X-XSS-Protection</code>, <code>Expect-CT</code>, and <code>Feature-Policy</code> are now obsolete</li></ul> </li> <li>Support for applying different header policies to different endpoints</li> <li>Support for customizing the header policy per-request</li> <li>Removal of \"document header\" concept</li> <li>Changes to nonce generation.</li></ul> <p>If you can, please give <code>1.0.0-preview.1</code> a try, especially if you're currently relying on workarounds for any of the customisation functionality, and let me know what you think by <a href=\"https://github.com/andrewlock/NetEscapades.AspNetCore.SecurityHeaders/issues\">opening an issue on GitHub</a>. Thanks!</p> ",
    "sanitized": "In this post I provide an update on the NetEscapades.AspNetCore.SecurityHeaders project. I've just released a preview version of 1.0.0, which addresses some longstanding requests for extra functionality, updates the supported target frameworks, and more. In this post I provide a quick overview of the library, and then discuss the major changes made in this first preview. What are security headers? Adding security headers to your app Major changes in 1.0.0-preview.1 Changes to the supported frameworks Changes to headers Changes to the default headers X-XSS-Protection=1; mode-block is no longer recommended Expect-CT is no longer recommended New PermisionsPolicyBuilder.AddDefaultSecureDirectives() method New AddDefaultApiSecurityHeaders() method Feature-Policy is marked obsolete  Applying different headers to some endpoints Customizing the headers completely \"Document headers\" functionality has been removed Changes to nonce generation  Summary What are security headers? Security headers are headers that you can return in your HTTP responses which improve the overall security of your application. The headers instruct browsers to activate or disable various features, with the overall goal of hardening your application and reducing your attack surface area. Some of these headers apply to all HTTP responses, while others only really make sense for HTML responses. Nevertheless, it can make sense to apply theoretically-HTML-only headers to non-HTML responses as part of a defence-in-depth approach, as described by OWASP. The main problem with security headers is that there are a lot of them, and the list is generally growing and evolving, with new headers being introduced and others being retired. What's more, different headers use different patterns for lists—some use ; separators, others use ,, and others use a space—so it's easy to set them up incorrectly. The NetEscapades.AspNetCore.SecurityHeaders package aims to help you set up security headers for your ASP.NET Core app. It provides sensible defaults, with a fluent builder pattern for customizing and configuring the headers for your specific application requirements. Adding security headers to your app In this section I show the quickest was to get started with NetEscapades.AspNetCore.SecurityHeaders and to start adding security headers to your application. First, add the package to your app: dotnet add package NetEscapades.AspNetCore.SecurityHeaders --version 1.0.0-preview.1\n Alternatively, add the package to your .csproj directly <Project Sdk=\"Microsoft.NET.Sdk.Web\">\n  <PropertyGroup>\n    <TargetFramework>net8.0</TargetFramework>\n  </PropertyGroup>\n\n  <ItemGroup>\n    <!-- 👇 Add the package -->\n    <PackageReference Include=\"NetEscapades.AspNetCore.SecurityHeaders\" Version=\"1.0.0-preview.1\" />\n  </ItemGroup>\n</Project>\n Finally, add the security headers middleware to the start of your middleware pipeline with the UseSecurityHeaders() extension method. For example: var builder = WebApplication.CreateBuilder();\n\nvar app = builder.Build();\n\n// 👇 Add the security headers to the start of the pipeline\napp.UseSecurityHeaders();\n\napp.MapGet(\"/\", () => \"Hello world!\");\n\napp.Run();\n The SecurityHeadersMiddleware registers a callback that adds several headers to all responses. By default, the middleware adds the following header to your responses: X-Content-Type-Options: nosniff X-Frame-Options: Deny Referrer-Policy: strict-origin-when-cross-origin Content-Security-Policy: object-src 'none'; form-action 'self'; frame-ancestors 'none' Cross-Origin-Opener-Policy: same-origin Strict-Transport-Security: max-age=31536000; includeSubDomains - only applied to HTTPS responses These headers were chosen based on guidance from OWASP to provide security hardening benefits, while being broadly applicable to most applications.  These headers don't represent the most secure set you could choose, but rather a \"generally safe\" set for most applications. Ideally you should customise these headers to add a more secure (and more restrictive) set.  If you want to change the headers that are applied, you can create an instance of HeaderPolicyCollection, and use the fluent builder interface to customize the added headers. The following shows an example which specifically adds all the default headers independently. var policyCollection = new HeaderPolicyCollection()\n    .AddFrameOptionsDeny()\n    .AddContentTypeOptionsNoSniff()\n    .AddStrictTransportSecurityMaxAgeIncludeSubDomains(maxAgeInSeconds: 60 * 60 * 24 * 365) // maxage = one year in seconds\n    .AddReferrerPolicyStrictOriginWhenCrossOrigin()\n    .RemoveServerHeader()\n    .AddContentSecurityPolicy(builder =>\n    {\n        builder.AddObjectSrc().None();\n        builder.AddFormAction().Self();\n        builder.AddFrameAncestors().None();\n    })\n    .AddCustomHeader(\"X-My-Test-Header\", \"Header value\");\n\napp.UseSecurityHeaders(policyCollection);\n For most of the history of NetEscapades.AspNetCore.SecurityHeaders, this was been the only way to configure the security headers for your application. The advantage is that it's simple—there's no services to add, nothing to \"reason\" about—whatever headers you configure, are added. However, some people wanted more control, for example to be able to add different headers to different endpoints in their application, or to customize the headers on a request-by-request basis. That flexibility is largely what the changes in 1.0.0 are about, but as this is a major version, I took the opportunity to make some other larger changes too. For the rest of this post I'll describe some of the biggest changes in 1.0.0-preview.1. Major changes in 1.0.0-preview.1 The following sections describe the high level changes and features included in 1.0.0-preview.1. These aren't guaranteed to make it into the final 1.0.0 release, so do let me know what you think about them! Before we get started, the first thing to note is that NetEscapades.AspNetCore.SecurityHeaders finally has a logo:  A big thanks to Khalid for putting that together so quickly! Now lets look at the new features and breaking changes. Changes to the supported frameworks I first created NetEscapades.AspNetCore.SecurityHeaders way back in 2016, when ASP.NET Core was just being released. Back then, ASP.NET Core could also be run on .NET Framework. The original thought was that this mode would serve as a migration path from ASP.NET to ASP.NET Core. That path is rarely recommended these days, and instead, a \"strangler fig\" pattern is recommended. ASP.NET Core has not been supported on .NET Framework since version 2.1, and as such 1.0.0-preview.1 of NetEscapades.AspNetCore.SecurityHeaders finally drops support for .NET Framework too, by dropping support for netstandard2.0 and everything prior to .NET Core 3.1. Given the package still supports .NET Core 3.1+ it's very unlikely you'll be impacted by this change unless you're on a (very) unsupported version of .NET Core. And if you are, I would strongly advise you to update anyway! Changes to headers In the next section I describe some of the changes to specific security headers, including changes to default values, new APIs, and deprecated methods. Changes to the default headers When you don't specify a custom HeaderPolicyCollection, NetEscapades.AspNetCore.SecurityHeaders applies a default set of headers, as I described previously. These headers are encapsulated in the AddDefaultSecurityHeaders() extension method, so the following are equivalent: app.UseSecurityHeaders(); // 👈 This...\n\nvar policies = new HeaderPolicyCollection()\n    .AddDefaultSecurityHeaders();\napp.UseSecurityHeaders(policies); // 👈 ..is equivalent to this.\n In 1.0.0-preview.1 the headers that are applied have changed slightly: Cross-Origin-Opener-Policy=same-origin is now added. X-XSS-Protection=1; mode-block is no longer added. The full set of headers added by default are now: X-Content-Type-Options: nosniff X-Frame-Options: Deny Referrer-Policy: strict-origin-when-cross-origin Content-Security-Policy: object-src 'none'; form-action 'self'; frame-ancestors 'none' Cross-Origin-Opener-Policy: same-origin Strict-Transport-Security: max-age=31536000; includeSubDomains - HTTPS responses only If you don't want this change, you can simply create a custom HeaderPolicyCollection configured as it was previously: new HeaderPolicyCollection()\n  .AddFrameOptionsDeny()\n  .AddXssProtectionBlock() // This is no longer included by default\n  .AddContentTypeOptionsNoSniff()\n  .AddStrictTransportSecurityMaxAge()\n  .AddReferrerPolicyStrictOriginWhenCrossOrigin()\n  .RemoveServerHeader()\n  .AddContentSecurityPolicy(builder =>\n  {\n      builder.AddObjectSrc().None();\n      builder.AddFormAction().Self();\n      builder.AddFrameAncestors().None();\n  });\n X-XSS-Protection=1; mode-block is no longer recommended You may wonder why X-XSS-Protection was removed from the default headers. The X-XSS-Protection header is interesting in that it's a security header that used to be recommended to add to your applications to improve security. However these days it's not recommended, because, as described on MDN:  The X-XSS-Protection header \"can create XSS vulnerabilities in otherwise safe websites\"  That's clearly not an example of a good header to add by default, so it's been removed from the default set of security headers and marked obsolete. You can still add it to your application if you want to, it's just not recommended unless you understand the risks. Expect-CT is no longer recommended The Expect-CT header lets sites opt-in to certificate transparency requirements, but only Chrome and other Chromium-based browsers implemented Expect-CT, On top of that, Chromium deprecated the header in version 107 (Oct 2022), because Chromium now enforces CT by default. Given the header is deprecated and no longer recommended, it's now marked obsolete in NetEscapades.AspNetCore.SecurityHeaders. New PermisionsPolicyBuilder.AddDefaultSecureDirectives() method The Permissions-Policy header provides a way to allow or deny the browser from using various features, such as the Web Bluetooth API or the Camera. Support for Permissions-Policy has been available for some time (with many new policies added recently). One slight annoyance with building up a Permissions-Policy is that there are so many policies. If you're building a JSON API (for example) then you'll likely want to disable essentially all of them, at which point you're calling a lot of methods. 1.0.0-preview.1 adds two new convenience method that add (most) of the headers recommended by OWASP for REST endpoints. If you just want to add the default set of directives you can call AddPermissionsPolicyWithDefaultSecureDirectives() directly on HeaderPolicyCollection: var policies = new HeaderPolicyCollection()\n    .AddPermissionsPolicyWithDefaultSecureDirectives();\n Alternatively, if you want to customize the Permissions-Policy, you can call PermissionsPolicyBuilder.AddDefaultSecureDirectives(), and then add (or override) additional directives: var policies = new HeaderPolicyCollection()\n    .AddPermissionsPolicy(p => \n    {\n      p.AddDefaultSecureDirectives(); // Add the default directives\n      p.AddAttributionReporting().None(); // Additional customization\n    });\n In both cases the default secure directives added are equivalent to: accelerometer=(), ambient-light-sensor=(), autoplay=(), camera=(), display-capture=(),\nencrypted-media=(), fullscreen=(), geolocation=(), gyroscope=(), magnetometer=(),\nmicrophone=(), midi=(), payment=(), picture-in-picture=(), publickey-credentials-get=(),\nscreen-wake-lock=(), sync-xhr=(), usb=(), web-share=(), xr-spatial-tracking=()\n Note that this isn't quite the same set of headers as suggested by OWASP, because NetEscapades.AspNetCore.SecurityHeaders doesn't include experimental features (to limit the scope and avoid too many breaking changes), but if you want to replicate those directives, you can always use the AddCustomDirective() helper. New AddDefaultApiSecurityHeaders() method The set of security headers added by AddDefaultSecurityHeaders() was chosen to provide a good balance between security and applicability for a basic ASP.NET Core website that's serving HTML. But many apps only serve JSON and are never expected to be loaded directly in the browser. In those scenarios we can apply a more \"aggressive\" set of headers. The new AddDefaultApiSecurityHeaders() extension method is designed for applying to APIs, and is based on the recommendation from OWASP. It adds the following headers (I've also highlighted any differences with AddDefaultSecurityHeaders()): X-Content-Type-Options: nosniff X-Frame-Options: Deny Referrer-Policy: no-referrer Compared to strict-origin-when-cross-origin for AddDefaultSecurityHeaders()  Content-Security-Policy: default-src 'none'; frame-ancestors 'none' Compared to object-src 'none'; form-action 'self'; frame-ancestors 'none' for AddDefaultSecurityHeaders()  Permissions-Policy: accelerometer=(), ambient-light-sensor=(), autoplay=(), camera=(), display-capture=(), encrypted-media=(), fullscreen=(), geolocation=(), gyroscope=(), magnetometer=(), microphone=(), midi=(), payment=(), picture-in-picture=(), publickey-credentials-get=(), screen-wake-lock=(), sync-xhr=(), usb=(), web-share=(), xr-spatial-tracking=() Not included in AddDefaultSecurityHeaders()  Strict-Transport-Security: max-age=31536000; includeSubDomains - HTTPS responses only You can use AddDefaultApiSecurityHeaders() in your application by applying it to a HeaderPolicyCollection, for example: var builder = WebApplication.CreateBuilder();\nvar app = builder.Build();\n\n// 👇 Configure to use the API security headers\napp.UseSecurityHeaders(p => p.AddDefaultApiSecurityHeaders());\n\napp.MapGet(\"/\", () => \"Hello world!\");\napp.Run();\n It's worth noting that OWASP recommends always adding other non-security headers to API responses, such as Cache-Control: no-store and Content-Type. Feature-Policy is marked obsolete Feature-Policy is a now-obsolete name for the Permissions-Policy header. The header has been deprecated, and as such the extension methods for adding Feature-Policy to your header collection have been marked [Obsolete]. You're recommended to switch to using Permissions-Policy instead. Applying different headers to some endpoints The biggest feature by far in 1.0.0-preview.1 is the ability to apply different headers to different endpoints. This can be particularly useful if you want to maximally lock down your site, for example by applying a more restrictive Content-Security-Policy on certain pages, and relaxing it only when necessary. Let's say, for example, that your application contains both HTML and JSON endpoints. Perhaps you're serving HTML via Razor Pages, but you have some API endpoints that are also available. You would want to: Apply the default security headers to all responses by default For the API endpoints, apply the headers added by AddDefaultApiSecurityHeaders() Prior to 1.0.0-preview.1, that wasn't possible, but now it is! 🎉 To achieve this we need to do 3 things: Configure default and named policies for the application. Add the middleware using UseSecurityHeaders() (as before). Apply custom policies to endpoints. The following example shows all of those steps var builder = WebApplication.CreateBuilder(args);\n\nbuilder.Services.AddRazorPages();\n\n// 1. 👇 Configure the policies for the application\nbuilder.Services.AddSecurityHeaderPolicies()\n  .SetDefaultPolicy(p => p.AddDefaultSecurityHeaders()) // 👈 Configure the default policy\n  .AddPolicy(\"API\", p => p.AddDefaultApiSecurityHeaders()); // 👈 Configure named policies\n\nvar app = builder.Build();\n\n// 2. 👇 Add the security headers middleware\napp.UseSecurityHeaders();\n\napp.UseHttpsRedirection();\napp.UseStaticFiles();\napp.UseRouting();\napp.UseAuthorization();\n\napp.MapRazorPages();\napp.MapGet(\"/api\", () => \"Hello world\")\n  .WithSecurityHeadersPolicy(\"API\"); // 3. 👈 Apply a named policy to the endpoint\n\napp.Run();\n In the example above, the default security headers are applied to all responses except when the /api endpoint is invoked, in which case the named policy \"API\" is applied (which adds the AddDefaultApiSecurityHeaders() headers).  If you're working with MVC controllers or Razor Pages, you can apply a named policy to an endpoint using the [SecurityHeadersPolicyAttribute] header.  This should cater to the vast majority of cases where you need to apply multiple policies in an application, but if you really need it, you can now completely customise the policy that's applied, as you'll see in the next section. Customizing the headers completely Applying different policies to different endpoints works well when you have a fixed number of policies to apply. However, in some cases you need to completely customise the headers for a given request. This might be the case if, for example, you are running a multi-tenant application, and the headers need to be matched to the incoming request. In 1.0.0-preview.1, you can now completely customize the headers that will be applied by providing a lambda method that is executed just before the headers are applied, and by returning the HeaderPolicyCollection to apply. For example, lets imagine that you want to apply a different set of headers for some requests. You can call the SetPolicySelector() as shown below and provide a function to execute whenever a policy is about to be applied: var builder = WebApplication.CreateBuilder(args);\n\nbuilder.Services.AddSecurityHeaderPolicies()\n  .SetPolicySelector((PolicySelectorContext ctx) =>\n  {\n      // TODO: anything you need to build the HeaderPolicyCollection\n      // e.g. use services from the DI container (if you need to)\n      IServiceProvider services = ctx.HttpContext.RequestServices; \n\n      var selector = services.GetService<TenantHeaderPolicyCollectionSelector>();\n      var tenant = services.GetService<ITenant>();\n\n      HeaderPolicyCollection policy = selector.GetPolicyForTenant(tenant);\n      return policy; // 👈 This is the policy that is applied\n  });\n\nvar app = builder.Build();\n\napp.UseSecurityHeaders();\napp.MapGet(\"/api\", () => \"Hello world\");\napp.Run();\n The lambda/method you pass to SetPolicySelector() is provided a PolicySelectorContext, which includes all the information you might need to decide which policy to apply: HttpContext HttpContext—The current HttpContext for the request. IReadOnlyDictionary<string, IReadOnlyHeaderPolicyCollection> ConfiguredPolicies—The named policies configured for the application. IReadOnlyHeaderPolicyCollection DefaultPolicy—The default policy that applies to the request. string? EndpointPolicyName—The name of the endpoint policy that applies to the request, if any. IReadOnlyHeaderPolicyCollection? EndpointPolicy—The endpoint policy that applies to the request, if any. If no endpoint-specific policy applies to the request, returns null. IReadOnlyHeaderPolicyCollection SelectedPolicy—The policy that would be applied to the endpoint by default: equivalent to EndpointPolicy if available, otherwise DefaultPolicy. Your policy selector must return a policy collection. If you don't want to customise the policy for the request, return ctx.SelectedPolicy.  Note that you should avoid building a new HeaderPolicyCollection on every request for performance reasons. Where possible, cache and reuse HeaderPolicyCollection instances. If you do need to create a new HeaderPolicyCollection from a IReadOnlyHeaderPolicyCollection, you can call Copy() to return a mutable instance.  With the combination of endpoint-specific policies and the customisation available in SetPolicySelector(), I hope that people will now be able to customise their applications more easily, without needing to resort to hacking the internals of the library! \"Document headers\" functionality has been removed One consequence of the additional customisation possible with SetPolicySelector() and endpoint policies is that the concept of \"document headers\" have been removed. The ApplyDocumentHeadersToContentTypes() and ApplyDocumentHeadersToAllResponses() extension methods have now been marked [Obsolete] and are no-ops. These methods were originally added because some security headers don't really make sense when applied to passive content like JSON responses compared to HTML responses. Consequently, by default, some security headers (such as Content-Security-Policy) would be omitted unless the response was HTML or JavaScript. The only real benefit to this approach was that it reduced the size of the response (by omitting some headers). The down-side was that it added confusion and an additional configuration knob people had to consider. What's more OWASP actually recommends you do send these headers even if you have no intention of returning HTML, as part of a defence-in-depth approach. What's more, some of the headers that were previously considered \"document/HTML only\" actually should be added to all responses to protect against drag-and-drop style clickjacking attacks. So in 1.0.0-preview.1 the concept of a DocumentHeaderPolicy has been removed, and headers are always applied to all requests regardless of the response content type.  Mostly…some headers only apply to HTTPS requests for example, or should not be applied to localhost requests. But the \"document header\" concept is no more.  If you want to re-instate the \"document header\" functionality for some reason, you can recreate something similar with SetPolicySelector(). There are lots of different ways you could achieve it, but here's one example: var builder = WebApplication.CreateBuilder(args);\n\n// The mime types considered \"documents\"\nstring[] documentTypes = [ \"text/html\", \"application/javascript\", \"text/javascript\" ];\nvar documentPolicy = new HeaderPolicyCollection().AddDefaultSecurityHeaders();\n\nbuilder.Services.AddSecurityHeaderPolicies()\n  .SetDefaultPolicy(p => p.AddDefaultApiSecurityHeaders())\n  .SetPolicySelector(ctx =>\n  {\n      // If the response is one of the \"document\" types...\n      if (documentTypes.Contains(ctx.HttpContext.Response.ContentType))\n      {\n          // ... then return the \"document\" policy\n          return documentPolicy;\n      }\n\n      // Otherwise return the original selected policy\n      return ctx.SelectedPolicy;\n  });\n\nvar app = builder.Build();\n\napp.UseSecurityHeaders();\napp.MapGet(\"/api\", () => \"Hello world\");\napp.Run();\n As I've already said, I don't recommend you do this, but the point is you can now, which is why I chose to remove the document headers functionality. Changes to nonce generation In previous versions of NetEscapades.AspNetCore.SecurityHeaders a nonce (number used once) was generated at the start of a request only when required by a Content-Security-Policy. However, with the changes in 1.0.0-preview.1 it's no longer possible to know ahead of time that a nonce will be required (because the header policies can change later in the request, due to a named endpoint policy for example). As a result, the nonce is no longer generated at the start of the request. Instead, it's generated lazily when you call HttpContext.GetNonce(). The end result is the same as before—a single nonce is generated per-request, and only when it's required. The slight breaking change is the fact that you now must call GetNonce() to retrieve the nonce. Previously you could have retrieved the nonce directly from HttpContext.Items (even though you shouldn't); in 1.0.0-preview.1 that's no longer possible. That covers the majority of the major changes made between versions 0.24.0 and 1.0.0-preview.1. You can find the full diff here, including an API diff (using the workflow I described in a previous post). Summary Adding security-related headers to your HTTP responses is an easy way to harden your application against attacks. NetEscapades.AspNetCore.SecurityHeaders provides an easy way to do this, and has recently been through some major changes that I'm looking for feedback on before releasing the final stable version. In summary, the major changes are: Support for .NET Core 3.1+ only Updates to headers Changes to the default headers New utility methods for adding API-related security headers and a locked-down Permissions-Policy header X-XSS-Protection, Expect-CT, and Feature-Policy are now obsolete  Support for applying different header policies to different endpoints Support for customizing the header policy per-request Removal of \"document header\" concept Changes to nonce generation. If you can, please give 1.0.0-preview.1 a try, especially if you're currently relying on workarounds for any of the customisation functionality, and let me know what you think by opening an issue on GitHub. Thanks!"
  },
  {
    "itemId": "https://andrewlock.net/fixing-max_path-issues-in-gitlab/",
    "raw": "<img src=\"https://andrewlock.net/content/images/2024/old_man_yells_at_max_path.webp\" /><p>This post is a short reminder for my future self, for when I next have to fight with <code>MAX_PATH</code> issues and GitLab.</p> <p>Yes, it's 2024, and I'm still being sabotaged by Window's archaic <code>MAX_PATH</code> restriction.</p> <h2 id=\"window-s-maximum-path-length-limitation-\" class=\"heading-with-anchor\"><a href=\"#window-s-maximum-path-length-limitation-\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Window's maximum path length limitation.</a></h2> <p>In the much of the Windows API, <a href=\"https://learn.microsoft.com/en-us/windows/win32/fileio/maximum-file-path-limitation?tabs=powershell\">the maximum length for a path is <code>MAX_PATH</code></a>, which is defined as 260 characters. In this day and age that is uncomfortably small, and so in Windows 10, version 1607 most <code>MAX_PATH</code> restrictions were removed from file and directory functions.</p> <p>However, Microsoft are dedicated to backwards compatibility, almost to a fault. So even though the <code>MAX_PATH</code> restriction doesn't need to be there any more, it's <em>still</em> enforced, for back-compat reasons. If you want to create paths with more than 260 characters you'll need to set a value in the registry <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\FileSystem LongPathsEnabled (Type: REG_DWORD)</code> to <code>1</code>. You can do this using powershell, for example:</p> <pre class=\"language-powershell\"><code class=\"language-powershell\"><span class=\"token function\">New-ItemProperty</span> <span class=\"token operator\">-</span>Path <span class=\"token string\">\"HKLM:\\SYSTEM\\CurrentControlSet\\Control\\FileSystem\"</span> <span class=\"token operator\">-</span>Name <span class=\"token string\">\"LongPathsEnabled\"</span> <span class=\"token operator\">-</span>Value 1 <span class=\"token operator\">-</span>PropertyType DWORD <span class=\"token operator\">-</span>Force\n</code></pre> <p>or it can be enabled through group policy, with the policy <code>Enable Win32 long paths</code>.</p> <p>Of course, even if you do that, you still can't open and edit paths using Windows File Explorer. 8 years after the limitation was removed. That would be too much to ask. Yes, I'm feeling snarky.</p> <h2 id=\"git-s-long-path-support\" class=\"heading-with-anchor\"><a href=\"#git-s-long-path-support\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Git's long-path support</a></h2> <p>I ran into a MAX_PATH error that was happening in our GitLab builds at work recently, after a repository was moved to a different group. Doing so added an additional prefix to the checkout path, and suddenly 💥, GitLab could no longer check-out the repository:</p> <pre class=\"language-bash\"><code class=\"language-bash\">error: unable to create <span class=\"token function\">file</span> tracer/test/snapshots/\nSecurity.AspNetCore5AutoUserEvents.SecurityOff.\n<span class=\"token assign-left variable\">extendedmode.TestUserLoginEvent_eventName</span><span class=\"token operator\">=</span>login.auto.\n<span class=\"token assign-left variable\">failure_bodyString</span><span class=\"token operator\">=</span>Input.UserName<span class=\"token operator\">=</span>NoSuchUser<span class=\"token operator\">&amp;</span>\n<span class=\"token assign-left variable\">Input.Password</span><span class=\"token operator\">=</span>test.verified.txt: Filename too long\n</code></pre> <p>Now, granted, that filename kind of <em>is</em> too long, but that's beside the point 😅</p> <p>Luckily Git <em>does</em> have support for bypassing the <code>MAX_PATH</code> Windows issue. You can enable support for long paths by setting the <code>core.longpaths</code> setting to <code>true</code>. For example:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\">git config <span class=\"token operator\">--</span><span class=\"token keyword\">global</span> core<span class=\"token punctuation\">.</span>longpaths <span class=\"token boolean\">true</span>\n</code></pre> <p>Interestingly this works <em>regardless</em> of whether you've set the <code>LongPathsEnabled</code> registry key from the previous section. How can that be?</p> <p>You can see the explanation for how it works <a href=\"https://github.com/git/git/commit/0f634d0ca3ce9345affc6e817a8c057b60d87f0f\">in the commit</a> that introduced the <code>core.longpaths</code> setting:</p> <blockquote> <p>Many Windows wide char APIs support longer than <code>MAX_PATH</code> paths through the file namespace prefix (<code>\\\\?\\</code> or <code>\\\\?\\UNC\\</code>) followed by an absolute path…(We) introduce a function to optionally expand long paths using the <code>\\\\?\\</code> file namespace prefix…Contrary to MSDN docs, the <code>GetFullPathNameW</code> function doesn't seem to be limited to <code>MAX_PATH</code>, so we can use it to do the heavy lifting of the conversion (translate <code>/</code> to <code>\\</code>, eliminate <code>.</code> and <code>..</code>, and make an absolute path).</p> </blockquote> <p>So Git checks the length of any paths when it needs to perform a file operation. If the path is short, it just uses the standard APIs. If the path exceeds the <code>MAX_PATH</code> limitation and the <code>core.longpaths</code> setting is enabled then it converts the (potentially relative path) to an absolute path using <code>GetFullPathNameW()</code> and prepends <code>\\\\?\\</code>. The resulting path can then be used to interact with the Windows APIs. Magic!</p> <p>The really nice part of this is that it means you <em>don't</em> need to have admin access to the machine to checkout a git repo that has long paths. You can simply add the setting and bypass the issue.</p> <h2 id=\"running-scripts-before-git-clone-in-gitlab\" class=\"heading-with-anchor\"><a href=\"#running-scripts-before-git-clone-in-gitlab\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Running scripts before <code>git clone</code> in GitLab</a></h2> <p>Which brings us to the crux of the solution: how to add that setting to a GitLab runner. If you have access to the configuration of the runner itself, that's no problem, you can just add the setting in the runner and your job is done.</p> <p>However, if you <em>don't</em> have access to the runner, you'll need to make sure you add the setting <em>before</em> your repository is cloned.</p> <p>My first thought was to add the setting in the <code>before_script</code> section:</p> <pre class=\"language-diff\"><code class=\"language-diff\">build:\n<span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> stage: build\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> tags: [\"windowsversion:1809\"]\n</span></span><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span><span class=\"token line\"> before_script:\n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\">   - git config --system core.longpaths true\n</span></span><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> script:\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">   - if (Test-Path build-out) { remove-item -recurse -force build-out }\n</span></span></code></pre> <p>Unfortunately, that doesn't work. <code>before_script</code> runs before the job <code>script</code> executes (obviously) but <a href=\"https://docs.gitlab.com/ee/ci/yaml/#before_script\"><em>after</em> the repository has been cloned and the artifacts have been restored</a>.</p> <p>After a bit more googling, I came across <a href=\"https://archives.docs.gitlab.com/15.11/runner/configuration/advanced-configuration.html#the-runners-section\">the <code>pre_clone_script</code> option</a>: the name sounds pretty promising! Unfortunately, this is configuration that goes in your <em>runner</em> configuration, <em>not</em> in your <code>.gitlab-ci.yml</code>. But there <em>is</em> a way to modify it—if you add a build variable to your <code>.gitlab-ci.yml</code> called <code>CI_PRE_CLONE_SCRIPT</code> you can use that to \"pass through\" to the runner. But that only appears to be on GitLab's SaaS runners, <em>and</em> it's deprecated in version 16. <em>sigh</em>.</p> <p><em>Finally</em> I came to the all important answer <code>hooks:pre_get_sources_script</code>. <a href=\"https://docs.gitlab.com/ee/ci/yaml/#hookspre_get_sources_script\">This hook is exactly what we need</a>:</p> <blockquote> <p>Use <code>hooks:pre_get_sources_script</code> to specify a list of commands to execute on the runner before cloning the Git repository and any submodules.</p> </blockquote> <p>Adjusting our initial attempt to use <code>hooks:pre_get_sources_script</code> looks something like this:</p> <pre class=\"language-diff\"><code class=\"language-diff\">build:\n<span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> stage: build\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> tags: [\"windowsversion:1809\"]\n</span></span><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span><span class=\"token line\"> hooks:\n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\">   pre_get_sources_script\n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\">     - git config --system core.longpaths true\n</span></span><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> script:\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">   - if (Test-Path build-out) { remove-item -recurse -force build-out }\n</span></span></code></pre> <p>And voila, we have success!</p> <pre class=\"language-bash\"><code class=\"language-bash\">Cloning into <span class=\"token string\">'dd-trace-dotnet'</span><span class=\"token punctuation\">..</span>.\nremote: Enumerating objects: <span class=\"token number\">168336</span>, done.\nremote: Counting objects: <span class=\"token number\">100</span>% <span class=\"token punctuation\">(</span><span class=\"token number\">5289</span>/5289<span class=\"token punctuation\">)</span>, done.\nremote: Compressing objects: <span class=\"token number\">100</span>% <span class=\"token punctuation\">(</span><span class=\"token number\">2112</span>/2112<span class=\"token punctuation\">)</span>, done.\nremote: Total <span class=\"token number\">168336</span> <span class=\"token punctuation\">(</span>delta <span class=\"token number\">4074</span><span class=\"token punctuation\">)</span>, reused <span class=\"token number\">4071</span> <span class=\"token punctuation\">(</span>delta <span class=\"token number\">3152</span><span class=\"token punctuation\">)</span>, pack-reused <span class=\"token number\">163047</span> <span class=\"token punctuation\">(</span>from <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\nReceiving objects: <span class=\"token number\">100</span>% <span class=\"token punctuation\">(</span><span class=\"token number\">168336</span>/168336<span class=\"token punctuation\">)</span>, <span class=\"token number\">133.06</span> MiB <span class=\"token operator\">|</span> <span class=\"token number\">24.91</span> MiB/s, done.\nResolving deltas: <span class=\"token number\">100</span>% <span class=\"token punctuation\">(</span><span class=\"token number\">135723</span>/135723<span class=\"token punctuation\">)</span>, done.\nUpdating files: <span class=\"token number\">100</span>% <span class=\"token punctuation\">(</span><span class=\"token number\">11458</span>/11458<span class=\"token punctuation\">)</span>, done.\n</code></pre> <h2 id=\"summary\" class=\"heading-with-anchor\"><a href=\"#summary\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Summary</a></h2> <p>In this short post I gave a brief description of the <code>MAX_PATH</code> limitation in Windows that restricts valid path lengths to 260 characters and showed how you can add support for long paths in Windows by setting a registry key. Git has its own long path support that can be enabled independently by setting <code>core.longpaths=true</code>, by running <code>git config --global core.longpaths true</code> for example.</p> <p>If you're using GitLab, you need to make sure this setting is updated before running Git operations such as cloning the repository. You should use the <code>hooks:pre_get_sources_script</code> for this in GitLab 16+.</p> ",
    "sanitized": "This post is a short reminder for my future self, for when I next have to fight with MAX_PATH issues and GitLab. Yes, it's 2024, and I'm still being sabotaged by Window's archaic MAX_PATH restriction. Window's maximum path length limitation. In the much of the Windows API, the maximum length for a path is MAX_PATH, which is defined as 260 characters. In this day and age that is uncomfortably small, and so in Windows 10, version 1607 most MAX_PATH restrictions were removed from file and directory functions. However, Microsoft are dedicated to backwards compatibility, almost to a fault. So even though the MAX_PATH restriction doesn't need to be there any more, it's still enforced, for back-compat reasons. If you want to create paths with more than 260 characters you'll need to set a value in the registry HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\FileSystem LongPathsEnabled (Type: REG_DWORD) to 1. You can do this using powershell, for example: New-ItemProperty -Path \"HKLM:\\SYSTEM\\CurrentControlSet\\Control\\FileSystem\" -Name \"LongPathsEnabled\" -Value 1 -PropertyType DWORD -Force\n or it can be enabled through group policy, with the policy Enable Win32 long paths. Of course, even if you do that, you still can't open and edit paths using Windows File Explorer. 8 years after the limitation was removed. That would be too much to ask. Yes, I'm feeling snarky. Git's long-path support I ran into a MAX_PATH error that was happening in our GitLab builds at work recently, after a repository was moved to a different group. Doing so added an additional prefix to the checkout path, and suddenly 💥, GitLab could no longer check-out the repository: error: unable to create file tracer/test/snapshots/\nSecurity.AspNetCore5AutoUserEvents.SecurityOff.\nextendedmode.TestUserLoginEvent_eventName=login.auto.\nfailure_bodyString=Input.UserName=NoSuchUser&\nInput.Password=test.verified.txt: Filename too long\n Now, granted, that filename kind of is too long, but that's beside the point 😅 Luckily Git does have support for bypassing the MAX_PATH Windows issue. You can enable support for long paths by setting the core.longpaths setting to true. For example: git config --global core.longpaths true\n Interestingly this works regardless of whether you've set the LongPathsEnabled registry key from the previous section. How can that be? You can see the explanation for how it works in the commit that introduced the core.longpaths setting:  Many Windows wide char APIs support longer than MAX_PATH paths through the file namespace prefix (\\\\?\\ or \\\\?\\UNC\\) followed by an absolute path…(We) introduce a function to optionally expand long paths using the \\\\?\\ file namespace prefix…Contrary to MSDN docs, the GetFullPathNameW function doesn't seem to be limited to MAX_PATH, so we can use it to do the heavy lifting of the conversion (translate / to \\, eliminate . and .., and make an absolute path).  So Git checks the length of any paths when it needs to perform a file operation. If the path is short, it just uses the standard APIs. If the path exceeds the MAX_PATH limitation and the core.longpaths setting is enabled then it converts the (potentially relative path) to an absolute path using GetFullPathNameW() and prepends \\\\?\\. The resulting path can then be used to interact with the Windows APIs. Magic! The really nice part of this is that it means you don't need to have admin access to the machine to checkout a git repo that has long paths. You can simply add the setting and bypass the issue. Running scripts before git clone in GitLab Which brings us to the crux of the solution: how to add that setting to a GitLab runner. If you have access to the configuration of the runner itself, that's no problem, you can just add the setting in the runner and your job is done. However, if you don't have access to the runner, you'll need to make sure you add the setting before your repository is cloned. My first thought was to add the setting in the before_script section: build:\n  stage: build\n  tags: [\"windowsversion:1809\"]\n+ before_script:\n+   - git config --system core.longpaths true\n  script:\n    - if (Test-Path build-out) { remove-item -recurse -force build-out }\n Unfortunately, that doesn't work. before_script runs before the job script executes (obviously) but after the repository has been cloned and the artifacts have been restored. After a bit more googling, I came across the pre_clone_script option: the name sounds pretty promising! Unfortunately, this is configuration that goes in your runner configuration, not in your .gitlab-ci.yml. But there is a way to modify it—if you add a build variable to your .gitlab-ci.yml called CI_PRE_CLONE_SCRIPT you can use that to \"pass through\" to the runner. But that only appears to be on GitLab's SaaS runners, and it's deprecated in version 16. sigh. Finally I came to the all important answer hooks:pre_get_sources_script. This hook is exactly what we need:  Use hooks:pre_get_sources_script to specify a list of commands to execute on the runner before cloning the Git repository and any submodules.  Adjusting our initial attempt to use hooks:pre_get_sources_script looks something like this: build:\n  stage: build\n  tags: [\"windowsversion:1809\"]\n+ hooks:\n+   pre_get_sources_script\n+     - git config --system core.longpaths true\n  script:\n    - if (Test-Path build-out) { remove-item -recurse -force build-out }\n And voila, we have success! Cloning into 'dd-trace-dotnet'...\nremote: Enumerating objects: 168336, done.\nremote: Counting objects: 100% (5289/5289), done.\nremote: Compressing objects: 100% (2112/2112), done.\nremote: Total 168336 (delta 4074), reused 4071 (delta 3152), pack-reused 163047 (from 1)\nReceiving objects: 100% (168336/168336), 133.06 MiB | 24.91 MiB/s, done.\nResolving deltas: 100% (135723/135723), done.\nUpdating files: 100% (11458/11458), done.\n Summary In this short post I gave a brief description of the MAX_PATH limitation in Windows that restricts valid path lengths to 260 characters and showed how you can add support for long paths in Windows by setting a registry key. Git has its own long path support that can be enabled independently by setting core.longpaths=true, by running git config --global core.longpaths true for example. If you're using GitLab, you need to make sure this setting is updated before running Git operations such as cloning the repository. You should use the hooks:pre_get_sources_script for this in GitLab 16+."
  },
  {
    "itemId": "https://andrewlock.net/preventing-breaking-changes-in-public-apis-with-publicapigenerator/",
    "raw": "<img src=\"https://andrewlock.net/content/images/2024/breaking_changes.jpg\" /><p>In this post I show how to use two open source libraries to keep track of the public API surface of any NuGet libraries (or any other code) you create. The approach shown in this post uses a unit test to enforce that changes to your public API are documented and don't change unexpectedly.</p> <h2 id=\"why-do-you-need-to-track-your-public-api-surface-\" class=\"heading-with-anchor\"><a href=\"#why-do-you-need-to-track-your-public-api-surface-\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Why do you need to track your public API surface?</a></h2> <p>When you're creating a .NET library for public consumption on NuGet you need to be very careful about what APIs you expose. NuGet libraries generally use <a href=\"https://semver.org/\">semantic versioning</a> which means that breaking/incompatible changes to your public API should only occur in major version bumps.</p> <blockquote> <p>\"What is a breaking change?\" is, unfortunately, rather more nebulous than this rule. Changes to method and type signatures are generally breaking, but <em>behavioural</em> changes could also be breaking, even if the exposed types and methods don't change.</p> </blockquote> <p>The public APIs (types/methods) that your library exposes and which consumers interact with are the most obvious thing that you need to be careful about how you change. Introducing a new <code>public</code> method on a type would <em>generally</em> not be considered a breaking change, whereas <em>removing</em> a method definitely <em>would</em> be a breaking change.</p> <p>The rules of semver are such that you need to really <em>think</em> about the changes to your public API. Unfortunately, if you have a big library, keeping track of what your public API <em>is</em> can be easier said than done.</p> <p>Luckily, there are various tools you can use for tracking your public API, and alerting you to changes, so that you don't change it accidentally.</p> <h2 id=\"using-an-analyzer-to-document-your-public-api\" class=\"heading-with-anchor\"><a href=\"#using-an-analyzer-to-document-your-public-api\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Using an analyzer to document your public API</a></h2> <p>Microsoft is the creator of a huge number of public libraries (the base class library in the .NET runtime!) and so need a way of keeping track of these APIs themselves. They therefore have <a href=\"https://github.com/dotnet/roslyn-analyzers/blob/main/src/PublicApiAnalyzers/PublicApiAnalyzers.Help.md\">an analyzer</a>, which helps document this for you.</p> <p>To use the analyzer, add the <code>Microsoft.CodeAnalysis.PublicApiAnalyzers</code> package to your project, for example by running</p> <pre class=\"language-bash\"><code class=\"language-bash\">dotnet <span class=\"token function\">add</span> package Microsoft.CodeAnalysis.PublicApiAnalyzers\n</code></pre> <p>After you do this, your whole project will be <em>covered</em> in errors, and your build will be filled with issues:</p> <pre class=\"language-bash\"><code class=\"language-bash\">Error RS0016 <span class=\"token builtin class-name\">:</span> Symbol <span class=\"token string\">'HeaderPolicyCollectionExtensions'</span> is not part of the declared public API <span class=\"token punctuation\">(</span>https://github.com/dotnet/roslyn-analyzers/blob/main/src/PublicApiAnalyzers/PublicApiAnalyzers.Help.md<span class=\"token punctuation\">)</span>\nError RS0016 <span class=\"token builtin class-name\">:</span> Symbol <span class=\"token string\">'ContentSecurityPolicyHeaderExtensions'</span> is not part of the declared public API <span class=\"token punctuation\">(</span>https://github.com/dotnet/roslyn-analyzers/blob/main/src/PublicApiAnalyzers/PublicApiAnalyzers.Help.md<span class=\"token punctuation\">)</span>\nError RS0016 <span class=\"token builtin class-name\">:</span> Symbol <span class=\"token string\">'HeaderPolicyCollection'</span> is not part of the declared public API <span class=\"token punctuation\">(</span>https://github.com/dotnet/roslyn-analyzers/blob/main/src/PublicApiAnalyzers/PublicApiAnalyzers.Help.md<span class=\"token punctuation\">)</span>\nError RS0016 <span class=\"token builtin class-name\">:</span> Symbol <span class=\"token string\">'implicit constructor for '</span>HeaderPolicyCollection<span class=\"token string\">''</span> is not part of the declared public API <span class=\"token punctuation\">(</span>https://github.com/dotnet/roslyn-analyzers/blob/main/src/PublicApiAnalyzers/PublicApiAnalyzers.Help.md<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">..</span>.\n</code></pre> <p>These errors all indicate that you haven't recorded the public API in the public API document. To do that, create two files in your project:</p> <ul><li><em>PublicAPI.Shipped.txt</em></li> <li><em>PublicAPI.Unshipped.txt</em></li></ul> <p>You can then use the code-fix for the analyzer action on a public API to add it to the documented APIs:</p> <p><img src=\"/content/images/2024/publicapi.png\" alt=\"A public API that needs to be documented in Rider\"></p> <p>If you're using Visual Studio, you can use the \"fix all in solution\" option to move <em>all</em> your current public APIs into the documentation files, but unfortunately <a href=\"https://youtrack.jetbrains.com/issue/RIDER-18372/Roslyn-quick-fix-does-not-provide-an-option-to-fix-the-issue-in-file-solution\">that doesn't work in Rider</a> 🙁. As a workaround (or if you're using the command line) you can run the following, and it will do the same thing.</p> <pre class=\"language-bash\"><code class=\"language-bash\">dotnet <span class=\"token function\">format</span> analyzers <span class=\"token parameter variable\">--diagnostics</span><span class=\"token operator\">=</span>RS0016\n</code></pre> <p>The end result is that <em>PublicAPI.Unshipped.txt</em> will contain a list of all your public APIs, for example:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">abstract</span> NetEscapades<span class=\"token punctuation\">.</span>AspNetCore<span class=\"token punctuation\">.</span>SecurityHeaders<span class=\"token punctuation\">.</span>Headers<span class=\"token punctuation\">.</span>HeaderPolicyBase<span class=\"token punctuation\">.</span><span class=\"token function\">GetValue</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Microsoft<span class=\"token punctuation\">.</span>AspNetCore<span class=\"token punctuation\">.</span>Http<span class=\"token punctuation\">.</span>HttpContext</span> context<span class=\"token punctuation\">)</span> <span class=\"token operator\">-&gt;</span> <span class=\"token keyword\">string</span>\n<span class=\"token keyword\">abstract</span> NetEscapades<span class=\"token punctuation\">.</span>AspNetCore<span class=\"token punctuation\">.</span>SecurityHeaders<span class=\"token punctuation\">.</span>Headers<span class=\"token punctuation\">.</span>HeaderPolicyBase<span class=\"token punctuation\">.</span>Header<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span> <span class=\"token operator\">-&gt;</span> <span class=\"token keyword\">string</span>\n<span class=\"token keyword\">const</span> NetEscapades<span class=\"token punctuation\">.</span>AspNetCore<span class=\"token punctuation\">.</span>SecurityHeaders<span class=\"token punctuation\">.</span>Headers<span class=\"token punctuation\">.</span>StrictTransportSecurityHeader<span class=\"token punctuation\">.</span>OneYearInSeconds <span class=\"token operator\">=</span> <span class=\"token number\">31536000</span> <span class=\"token operator\">-&gt;</span> <span class=\"token keyword\">int</span>\nMicrosoft<span class=\"token punctuation\">.</span>AspNetCore<span class=\"token punctuation\">.</span>Builder<span class=\"token punctuation\">.</span>ContentSecurityPolicyHeaderExtensions\n<span class=\"token return-type class-name\">Microsoft<span class=\"token punctuation\">.</span>AspNetCore<span class=\"token punctuation\">.</span>Builder<span class=\"token punctuation\">.</span>CrossOriginEmbedderPolicyBuilder</span>\nMicrosoft<span class=\"token punctuation\">.</span>AspNetCore<span class=\"token punctuation\">.</span>Builder<span class=\"token punctuation\">.</span>CrossOriginEmbedderPolicyBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">Credentialless</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-&gt;</span> <span class=\"token return-type class-name\">NetEscapades<span class=\"token punctuation\">.</span>AspNetCore<span class=\"token punctuation\">.</span>SecurityHeaders<span class=\"token punctuation\">.</span>Headers<span class=\"token punctuation\">.</span>CrossOriginPolicies<span class=\"token punctuation\">.</span>EmbedderPolicy<span class=\"token punctuation\">.</span>CredentiallessDirectiveBuilder</span>\nMicrosoft<span class=\"token punctuation\">.</span>AspNetCore<span class=\"token punctuation\">.</span>Builder<span class=\"token punctuation\">.</span>CrossOriginEmbedderPolicyBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">CrossOriginEmbedderPolicyBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-&gt;</span> <span class=\"token keyword\">void</span>\n</code></pre> <p>By default, the analyzer adds APIs to <em>PublicAPI.Unshipped.txt</em>. It's the developer's responsibility to move the APIs across to <em>PublicAPI.Shipped.txt</em> when they're actually shipped to customers.</p> <p>I've covered this approach quite briefly because, basically, I don't like it. 😅 I have a variety of gripes with it:</p> <ul><li>I find it tedious that the analyzer breaks the build <em>every</em> time I add a public type, even if I'm just trying something out. I either have to add the API to the documentation file (even if I haven't decided what it should like yet) or I have to explicitly make it internal. <ul><li>There are obviously other workarounds: you could set the diagnostic to be warning or information only when running locally and only break the build in CI but I'm still not a fan of that friction.</li></ul> </li> <li>Having \"Shipped\" and \"Unshipped\" APIs seems completely unnecessary to me, especially when everything is versioned in Git. Maybe this makes sense for a system as complex as the ASP.NET Core libraries, but I just don't see the need, and again, it adds confusion and friction.</li> <li>The format of the API files just bugs me 😅 Why invent a whole new format for APIs? We have C# method signatures, can't we just use them?</li></ul> <p>Obviously the `Microsoft.CodeAnalysis.PublicApiAnalyzers1 package is very popular (despite my grumbling). The fact that it's used by Microsoft directly is a big endorsement, so if you want to learn more, I found <a href=\"https://medium.com/workleap/preventing-breaking-changes-in-net-class-libraries-e61ae93b1b46\">this post</a> about it a good start.</p> <p>For the rest of this post I'm going to describe a different approach, one that I personally prefer.</p> <h2 id=\"using-the-publicapigenerator-package\" class=\"heading-with-anchor\"><a href=\"#using-the-publicapigenerator-package\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Using the PublicApiGenerator package</a></h2> <p>The <a href=\"https://github.com/PublicApiGenerator/PublicApiGenerator\"><em>PublicApiGenerator</em></a> library is an open source package that does what it says: it creates a string containing the public API of your library. From there, you can do anything you like with the string, but I like to use <a href=\"https://github.com/VerifyTests/Verify\">Verify</a> (another open source project) to perform snapshot approvals of the generated API.</p> <p>Overall, the process looks a bit like this:</p> <ul><li>Generate the public API for the library using <em>PublicApiGenerator</em> as a <code>string</code>.</li> <li>Use <em>Verify</em> to persist the public API as a file in your test suite.</li> <li>Create a unit test that verifies the public API has not changed.</li></ul> <p>As with all snapshot testing, the test fails if something has changed, and it's up to you to either accept the change (if the public API was <em>supposed</em> to change) or fix your code so as to not change the public API.</p> <p>This addresses all my previous complaints about the analyzer approach:</p> <ul><li>You can run the unit test whenever you like. It doesn't stop you iterating on your APIs until you <em>want</em> it to. You can easily test locally by running the unit test, and CI will catch any issues automatically.</li> <li>There's one set of Public APIs, versioned along with the code directly, so no concept of \"Shipped\" vs \"Unshipped\"</li> <li>The output looks a lot like C#, with methods grouped inside types.</li></ul> <p>To give you more of an idea of how it works, I'll show how I quickly added <em>PublicApiGenerator</em> to one of my open source projects.</p> <h3 id=\"1-add-the-necessary-packages\" class=\"heading-with-anchor\"><a href=\"#1-add-the-necessary-packages\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">1. Add the necessary packages</a></h3> <p>First we need to add the required NuGet packages to our test project. <a href=\"https://www.nuget.org/packages/PublicApiGenerator\">The <em>PublicApiGenerator</em> package</a> has very few dependencies, so it probably won't cause you any dependency issues:</p> <pre class=\"language-bash\"><code class=\"language-bash\">dotnet <span class=\"token function\">add</span> package PublicApiGenerator\n</code></pre> <p>I like to use Verify for my snapshot testing, and as we're going to use xunit for testing, we'll add the Verify.Xunit package:</p> <pre class=\"language-bash\"><code class=\"language-bash\">dotnet <span class=\"token function\">add</span> package Verify.Xunit\n</code></pre> <blockquote> <p>Depending on what target frameworks your library supports, you may have some issues with dependencies here. Verify has been quite aggressive with updating dependencies and target frameworks, so I often find I need to install an old version to resolve all the conflicts (I'm using 18.4.0 for example, when the latest is 26.3.1!). That said, the Verify usage is entirely optional, you can easily roll-your-own if you need to, <a href=\"https://github.com/DataDog/dd-trace-dotnet/blob/master/tracer/test/Datadog.Trace.TestHelpers/PublicApiTestsBase.cs#L126-L138\">as I have previously</a>.</p> </blockquote> <p>Once we've added the dependencies, our test project <em>.csproj</em> should look something like this:</p> <pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Project</span> <span class=\"token attr-name\">Sdk</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Microsoft.NET.Sdk<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>PropertyGroup</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>TargetFrameworks</span><span class=\"token punctuation\">&gt;</span></span>net6.0;net8.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>TargetFrameworks</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>PropertyGroup</span><span class=\"token punctuation\">&gt;</span></span>\n\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ItemGroup</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>PackageReference</span> <span class=\"token attr-name\">Include</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>PublicApiGenerator<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">Version</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>11.1.0<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>PackageReference</span> <span class=\"token attr-name\">Include</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Verify.Xunit<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">Version</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>18.4.0<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>PackageReference</span> <span class=\"token attr-name\">Include</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>xunit<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">Version</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>2.4.2<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>PackageReference</span> <span class=\"token attr-name\">Include</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>xunit.runner.visualstudio<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">Version</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>2.4.5<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>PackageReference</span> <span class=\"token attr-name\">Include</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Microsoft.NET.Test.Sdk<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">Version</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>15.3.0<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ItemGroup</span><span class=\"token punctuation\">&gt;</span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Project</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre> <p>Now we can create the test itself.</p> <h3 id=\"2-create-the-unit-test\" class=\"heading-with-anchor\"><a href=\"#2-create-the-unit-test\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">2. Create the unit test</a></h3> <p>The simplest version of our unit test looks something like the following:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Threading<span class=\"token punctuation\">.</span>Tasks</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">PublicApiGenerator</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">VerifyXunit</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">Xunit</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">UsesVerify</span></span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">PublicApiTest</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">Fact</span></span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">Task</span> <span class=\"token function\">PublicApiHasNotChanged</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// Get the assembly for the library we want to document</span>\n        <span class=\"token class-name\">Assembly</span> assembly <span class=\"token operator\">=</span> <span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span><span class=\"token type-expression class-name\">MyType</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>Assembly<span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// Retreive the public API for all types in the assembly</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> publicApi <span class=\"token operator\">=</span> assembly<span class=\"token punctuation\">.</span><span class=\"token function\">GeneratePublicApi</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// Run a snapshot test on the returned string</span>\n        <span class=\"token keyword\">return</span> Verifier<span class=\"token punctuation\">.</span><span class=\"token function\">Verify</span><span class=\"token punctuation\">(</span>publicApi<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>This example is hopefully easy to follow. We start with a \"marker\" type as a way of retrieving an instance of the <code>Assembly</code> we want to document. We then call <code>GeneratePublicApi()</code> to retrieve the <code>string</code> representation of the API. Finally, we use Verify to perform a snapshot test of this value.</p> <p>The first time the test runs, Verify creates a file called <em>PublicApiTest.PublicApiHasNotChanged.verified.txt</em>, based on the name of the test. As this is empty, the test fails, but you can <a href=\"https://github.com/VerifyTests/Verify?tab=readme-ov-file#snapshot-management\">use Verify's various tools</a> to update the snapshot. When you re-run the test it will pass.</p> <p>If you open up the <em>PublicApiTest.PublicApiHasNotChanged.verified.txt</em> file, you'll see that it looks a lot like \"normal\" C#, but with all the method bodies stripped out, for example:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token target keyword\">assembly</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">System<span class=\"token punctuation\">.</span>Reflection<span class=\"token punctuation\">.</span>AssemblyMetadata</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token string\">\"RepositoryUrl\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"https://github.com/andrewlock/NetEscapades.AspNetCore.SecurityHeaders\"</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token target keyword\">assembly</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">System<span class=\"token punctuation\">.</span>Resources<span class=\"token punctuation\">.</span>NeutralResourcesLanguage</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token string\">\"en-GB\"</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token target keyword\">assembly</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">System<span class=\"token punctuation\">.</span>Runtime<span class=\"token punctuation\">.</span>CompilerServices<span class=\"token punctuation\">.</span>InternalsVisibleTo</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token string\">\"NetEscapades.AspNetCore.SecurityHeaders.TagHelpers.Test\"</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token target keyword\">assembly</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">System<span class=\"token punctuation\">.</span>Runtime<span class=\"token punctuation\">.</span>CompilerServices<span class=\"token punctuation\">.</span>InternalsVisibleTo</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token string\">\"NetEscapades.AspNetCore.SecurityHeaders.Test\"</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token target keyword\">assembly</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">System<span class=\"token punctuation\">.</span>Runtime<span class=\"token punctuation\">.</span>Versioning<span class=\"token punctuation\">.</span>TargetFramework</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token string\">\".NETCoreApp,Version=v3.0\"</span><span class=\"token punctuation\">,</span> FrameworkDisplayName<span class=\"token operator\">=</span><span class=\"token string\">\".NET Core 3.0\"</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">namespace</span> <span class=\"token namespace\">NetEscapades<span class=\"token punctuation\">.</span>AspNetCore<span class=\"token punctuation\">.</span>SecurityHeaders<span class=\"token punctuation\">.</span>Headers<span class=\"token punctuation\">.</span>ContentSecurityPolicy</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BaseUriDirectiveBuilder</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">NetEscapades<span class=\"token punctuation\">.</span>AspNetCore<span class=\"token punctuation\">.</span>SecurityHeaders<span class=\"token punctuation\">.</span>Headers<span class=\"token punctuation\">.</span>ContentSecurityPolicy<span class=\"token punctuation\">.</span>CspDirectiveBuilder</span></span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">public</span> <span class=\"token function\">BaseUriDirectiveBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BlockAllMixedContentDirectiveBuilder</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">NetEscapades<span class=\"token punctuation\">.</span>AspNetCore<span class=\"token punctuation\">.</span>SecurityHeaders<span class=\"token punctuation\">.</span>Headers<span class=\"token punctuation\">.</span>ContentSecurityPolicy<span class=\"token punctuation\">.</span>CspDirectiveBuilderBase</span></span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">public</span> <span class=\"token function\">BlockAllMixedContentDirectiveBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ConnectSourceDirectiveBuilder</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">NetEscapades<span class=\"token punctuation\">.</span>AspNetCore<span class=\"token punctuation\">.</span>SecurityHeaders<span class=\"token punctuation\">.</span>Headers<span class=\"token punctuation\">.</span>ContentSecurityPolicy<span class=\"token punctuation\">.</span>CspDirectiveBuilder</span></span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">public</span> <span class=\"token function\">ConnectSourceDirectiveBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CspDirectiveBuilder</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">NetEscapades<span class=\"token punctuation\">.</span>AspNetCore<span class=\"token punctuation\">.</span>SecurityHeaders<span class=\"token punctuation\">.</span>Headers<span class=\"token punctuation\">.</span>ContentSecurityPolicy<span class=\"token punctuation\">.</span>CspDirectiveBuilderBase</span></span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">public</span> <span class=\"token function\">CspDirectiveBuilder</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> directive<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">bool</span></span> BlockResources <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">System<span class=\"token punctuation\">.</span>Collections<span class=\"token punctuation\">.</span>Generic<span class=\"token punctuation\">.</span>List<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">&gt;</span></span> Sources <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>This is just part of the public API for <a href=\"https://github.com/andrewlock/NetEscapades.AspNetCore.SecurityHeaders\"><em>NetEscapades.AspNetCore.SecurityHeaders</em></a>, but as you can see it looks a lot like \"normal\" C#.</p> <p>If you make a change to the public API, then when you run the test Verify will fail, and shows you a diff with exactly what changed:</p> <p><img src=\"/content/images/2024/publicapigenerator_diff.png\" alt=\"An example of a diff of the image when something changes\"></p> <p>That's basically all there is to it. You can use the public API <code>string</code> in any way that makes sense. I like to use it as a sense-check on the changes that I'm making. It doesn't differentiate between breaking or non-breaking changes, but it makes it very apparent if you've removed or changed anything, which is typically good enough (and is the same functionality the analyzer provides).</p> <h2 id=\"customizing-what-counts-as-your-public-api\" class=\"heading-with-anchor\"><a href=\"#customizing-what-counts-as-your-public-api\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Customizing what counts as your public API</a></h2> <p>You may notice at the top of the snapshot in the previous section there's a number of \"standard\" attributes that are <em>technically</em> part of your public API, but which you probably don't think of as such, as they're applied to the assembly:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token target keyword\">assembly</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">System<span class=\"token punctuation\">.</span>Reflection<span class=\"token punctuation\">.</span>AssemblyMetadata</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token string\">\"RepositoryUrl\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"https://github.com/andrewlock/NetEscapades.AspNetCore.SecurityHeaders\"</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token target keyword\">assembly</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">System<span class=\"token punctuation\">.</span>Resources<span class=\"token punctuation\">.</span>NeutralResourcesLanguage</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token string\">\"en-GB\"</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token target keyword\">assembly</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">System<span class=\"token punctuation\">.</span>Runtime<span class=\"token punctuation\">.</span>CompilerServices<span class=\"token punctuation\">.</span>InternalsVisibleTo</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token string\">\"NetEscapades.AspNetCore.SecurityHeaders.TagHelpers.Test\"</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token target keyword\">assembly</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">System<span class=\"token punctuation\">.</span>Runtime<span class=\"token punctuation\">.</span>CompilerServices<span class=\"token punctuation\">.</span>InternalsVisibleTo</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token string\">\"NetEscapades.AspNetCore.SecurityHeaders.Test\"</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token target keyword\">assembly</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">System<span class=\"token punctuation\">.</span>Runtime<span class=\"token punctuation\">.</span>Versioning<span class=\"token punctuation\">.</span>TargetFramework</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token string\">\".NETCoreApp,Version=v3.0\"</span><span class=\"token punctuation\">,</span> FrameworkDisplayName<span class=\"token operator\">=</span><span class=\"token string\">\".NET Core 3.0\"</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span>\n</code></pre> <p>The <code>[InternalsVisibleTo]</code> and <code>[TargetFramework]</code> attributes in particular can be annoying. The former tends to change if you want to expose APIs for test purposes to other test projects. The latter is added automatically by the compiler, and means that if you're compiling for multiple TargetFrameworks, then you won't be able to share snapshot files, even if your APIs are otherwise identical.</p> <blockquote> <p>If you intend to have different public APIs for different framework, you'll need to use the <code>UniqueForRuntime()</code> option on Verify, so that each target framework test run gets a different snapshot.</p> </blockquote> <p><em>PublicApiGenerator</em> lets you completely customize which attributes to include or exclude, and even lets you specify exactly which types should be considered as part of your public API. By default, for example, <em>PublicApiGenerator</em> <em>excludes</em> any types declared in your assembly that are in a <code>Microsoft</code> or <code>System</code> namespace.</p> <blockquote> <p>In general you probably shouldn't declare types in <code>Microsoft</code> or <code>System</code> namespaces, but early in ASP.NET Core's lifetime a convention emerged of putting extensions on <code>IServiceCollection</code> or <code>IApplicationBuilder</code>, to improve discoverability. By default, <em>PublicApiGenerator</em> <em>excludes</em> these from your public API.</p> </blockquote> <p>For example, the following code shows how you can remove some of those annoying assembly attributes, and also ensure that <em>all</em> the types in your assembly are included, regardless of the namespace.</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">Fact</span></span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">Task</span> <span class=\"token function\">PublicApiHasNotChanged</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> assembly <span class=\"token operator\">=</span> <span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span><span class=\"token type-expression class-name\">HeaderPolicyCollection</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>Assembly<span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> options <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">ApiGeneratorOptions</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// These attributes won't be included in the public API</span>\n        ExcludeAttributes <span class=\"token operator\">=</span>\n        <span class=\"token punctuation\">[</span>\n            <span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span><span class=\"token type-expression class-name\">InternalsVisibleToAttribute</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>FullName<span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"System.Runtime.CompilerServices.IsByRefLike\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span><span class=\"token type-expression class-name\">TargetFrameworkAttribute</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>FullName<span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        <span class=\"token comment\">// By default types found in Microsoft or System </span>\n        <span class=\"token comment\">// namespaces are not treated as part of the public API.</span>\n        <span class=\"token comment\">// By passing an empty array, we ensure they're all </span>\n        DenyNamespacePrefixes <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> publicApi <span class=\"token operator\">=</span> assembly<span class=\"token punctuation\">.</span><span class=\"token function\">GeneratePublicApi</span><span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> Verifier<span class=\"token punctuation\">.</span><span class=\"token function\">Verify</span><span class=\"token punctuation\">(</span>publicApi<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>Another example of a tweak I have made in some cases is where types <em>need</em> to be public for technical reasons, but we don't want them to be visible to consumers of the library. A somewhat crude approach (that nevertheless works well enough) is to decorate the types with <code>[Browsable]</code> and <code>[EditorBrowsable]</code> attributes:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">Browsable</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">EditorBrowsable</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span>EditorBrowsableState<span class=\"token punctuation\">.</span>Never<span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">PublicButHiddenType</span>\n<span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>These types won't show up in Intellisense, so for most purposes, they're <em>not</em> public. If you wanted to exclude them from the generated public API, you could do it something like this:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">Fact</span></span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">Task</span> <span class=\"token function\">PublicApiHasNotChanged</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> assembly <span class=\"token operator\">=</span> <span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span><span class=\"token type-expression class-name\">HeaderPolicyCollection</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>Assembly<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// get all the types in the assembly, and filter out the hidden items</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> types <span class=\"token operator\">=</span> assembly<span class=\"token punctuation\">.</span><span class=\"token function\">GetTypes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">.</span><span class=\"token function\">Where</span><span class=\"token punctuation\">(</span>t <span class=\"token operator\">=&gt;</span> <span class=\"token function\">IsVisibleToIntelliSense</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">.</span><span class=\"token function\">ToArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> options <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">ApiGeneratorOptions</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// These attributes won't be included in the public API</span>\n        ExcludeAttributes <span class=\"token operator\">=</span>\n        <span class=\"token punctuation\">[</span>\n            <span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span><span class=\"token type-expression class-name\">InternalsVisibleToAttribute</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>FullName<span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"System.Runtime.CompilerServices.IsByRefLike\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span><span class=\"token type-expression class-name\">TargetFrameworkAttribute</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>FullName<span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        <span class=\"token comment\">// Only use these types, but apply filtering from the other</span>\n        <span class=\"token comment\">// options</span>\n        IncludeTypes <span class=\"token operator\">=</span> types\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> publicApi <span class=\"token operator\">=</span> assembly<span class=\"token punctuation\">.</span><span class=\"token function\">GeneratePublicApi</span><span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> Verifier<span class=\"token punctuation\">.</span><span class=\"token function\">Verify</span><span class=\"token punctuation\">(</span>publicApi<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">bool</span></span> <span class=\"token function\">IsVisibleToIntelliSense</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Type</span> type<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> browsable <span class=\"token operator\">=</span> type<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">GetCustomAttribute</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>BrowsableAttribute<span class=\"token punctuation\">&gt;</span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>browsable <span class=\"token keyword\">is</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> browsable<span class=\"token punctuation\">.</span>Browsable<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// It doesn't have the browsable attribute, or it is Browsable == true</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> editorBrowsable <span class=\"token operator\">=</span> type<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">GetCustomAttribute</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>EditorBrowsableAttribute<span class=\"token punctuation\">&gt;</span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>editorBrowsable <span class=\"token keyword\">is</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> editorBrowsable<span class=\"token punctuation\">.</span>State <span class=\"token operator\">!=</span> EditorBrowsableState<span class=\"token punctuation\">.</span>Never<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// It doesn't have the browsable attribute, or it has a visible state</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// The type won't be visible to consumers</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>Note that when you set <code>IncludeTypes</code> as above, it defines the initial set of types to consider. Further types may be excluded from this list depending on other options, such as <code>ExcludeAttributes</code> and <code>DenyNamespacePrefixes</code>.</p> <p>And there you have it, two ways to keep track of your public API: you can use Microsoft's analyzer; or you could use my preferred approach, <a href=\"https://github.com/PublicApiGenerator/PublicApiGenerator\"><em>PublicApiGenerator</em></a>.</p> <h2 id=\"summary\" class=\"heading-with-anchor\"><a href=\"#summary\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Summary</a></h2> <p>In this post I showed how Microsoft documents their public API using <a href=\"https://github.com/dotnet/roslyn-analyzers/blob/main/src/PublicApiAnalyzers/PublicApiAnalyzers.Help.md\">the Microsoft.CodeAnalysis.PublicApiAnalyzers</a> package, recording the APIs in <em>PublicApi.Shipped.txt</em> and <em>PublicApi.Unshipped.txt</em> files. I then discussed some of the reasons I'm not a big fan of it for small projects.</p> <p>Next I described an approach I prefer, using an open source project called <a href=\"https://github.com/PublicApiGenerator/PublicApiGenerator\"><em>PublicApiGenerator</em></a> to document the public API, and using <a href=\"https://github.com/VerifyTests/Verify\">Verify</a> to create a snapshot test to keep track of when your public API changes. I showed how to create the test, and some of the options you can use to customise what's documented.</p> <p>Neither of these approaches will <em>prevent</em> breaking changes to your API, but they both provide a way for you to document and track what your public API <em>is</em>, which is the first step to avoiding changing it accidentally.</p> ",
    "sanitized": "In this post I show how to use two open source libraries to keep track of the public API surface of any NuGet libraries (or any other code) you create. The approach shown in this post uses a unit test to enforce that changes to your public API are documented and don't change unexpectedly. Why do you need to track your public API surface? When you're creating a .NET library for public consumption on NuGet you need to be very careful about what APIs you expose. NuGet libraries generally use semantic versioning which means that breaking/incompatible changes to your public API should only occur in major version bumps.  \"What is a breaking change?\" is, unfortunately, rather more nebulous than this rule. Changes to method and type signatures are generally breaking, but behavioural changes could also be breaking, even if the exposed types and methods don't change.  The public APIs (types/methods) that your library exposes and which consumers interact with are the most obvious thing that you need to be careful about how you change. Introducing a new public method on a type would generally not be considered a breaking change, whereas removing a method definitely would be a breaking change. The rules of semver are such that you need to really think about the changes to your public API. Unfortunately, if you have a big library, keeping track of what your public API is can be easier said than done. Luckily, there are various tools you can use for tracking your public API, and alerting you to changes, so that you don't change it accidentally. Using an analyzer to document your public API Microsoft is the creator of a huge number of public libraries (the base class library in the .NET runtime!) and so need a way of keeping track of these APIs themselves. They therefore have an analyzer, which helps document this for you. To use the analyzer, add the Microsoft.CodeAnalysis.PublicApiAnalyzers package to your project, for example by running dotnet add package Microsoft.CodeAnalysis.PublicApiAnalyzers\n After you do this, your whole project will be covered in errors, and your build will be filled with issues: Error RS0016 : Symbol 'HeaderPolicyCollectionExtensions' is not part of the declared public API (https://github.com/dotnet/roslyn-analyzers/blob/main/src/PublicApiAnalyzers/PublicApiAnalyzers.Help.md)\nError RS0016 : Symbol 'ContentSecurityPolicyHeaderExtensions' is not part of the declared public API (https://github.com/dotnet/roslyn-analyzers/blob/main/src/PublicApiAnalyzers/PublicApiAnalyzers.Help.md)\nError RS0016 : Symbol 'HeaderPolicyCollection' is not part of the declared public API (https://github.com/dotnet/roslyn-analyzers/blob/main/src/PublicApiAnalyzers/PublicApiAnalyzers.Help.md)\nError RS0016 : Symbol 'implicit constructor for 'HeaderPolicyCollection'' is not part of the declared public API (https://github.com/dotnet/roslyn-analyzers/blob/main/src/PublicApiAnalyzers/PublicApiAnalyzers.Help.md)\n...\n These errors all indicate that you haven't recorded the public API in the public API document. To do that, create two files in your project: PublicAPI.Shipped.txt PublicAPI.Unshipped.txt You can then use the code-fix for the analyzer action on a public API to add it to the documented APIs:  If you're using Visual Studio, you can use the \"fix all in solution\" option to move all your current public APIs into the documentation files, but unfortunately that doesn't work in Rider 🙁. As a workaround (or if you're using the command line) you can run the following, and it will do the same thing. dotnet format analyzers --diagnostics=RS0016\n The end result is that PublicAPI.Unshipped.txt will contain a list of all your public APIs, for example: abstract NetEscapades.AspNetCore.SecurityHeaders.Headers.HeaderPolicyBase.GetValue(Microsoft.AspNetCore.Http.HttpContext context) -> string\nabstract NetEscapades.AspNetCore.SecurityHeaders.Headers.HeaderPolicyBase.Header.get -> string\nconst NetEscapades.AspNetCore.SecurityHeaders.Headers.StrictTransportSecurityHeader.OneYearInSeconds = 31536000 -> int\nMicrosoft.AspNetCore.Builder.ContentSecurityPolicyHeaderExtensions\nMicrosoft.AspNetCore.Builder.CrossOriginEmbedderPolicyBuilder\nMicrosoft.AspNetCore.Builder.CrossOriginEmbedderPolicyBuilder.Credentialless() -> NetEscapades.AspNetCore.SecurityHeaders.Headers.CrossOriginPolicies.EmbedderPolicy.CredentiallessDirectiveBuilder\nMicrosoft.AspNetCore.Builder.CrossOriginEmbedderPolicyBuilder.CrossOriginEmbedderPolicyBuilder() -> void\n By default, the analyzer adds APIs to PublicAPI.Unshipped.txt. It's the developer's responsibility to move the APIs across to PublicAPI.Shipped.txt when they're actually shipped to customers. I've covered this approach quite briefly because, basically, I don't like it. 😅 I have a variety of gripes with it: I find it tedious that the analyzer breaks the build every time I add a public type, even if I'm just trying something out. I either have to add the API to the documentation file (even if I haven't decided what it should like yet) or I have to explicitly make it internal. There are obviously other workarounds: you could set the diagnostic to be warning or information only when running locally and only break the build in CI but I'm still not a fan of that friction.  Having \"Shipped\" and \"Unshipped\" APIs seems completely unnecessary to me, especially when everything is versioned in Git. Maybe this makes sense for a system as complex as the ASP.NET Core libraries, but I just don't see the need, and again, it adds confusion and friction. The format of the API files just bugs me 😅 Why invent a whole new format for APIs? We have C# method signatures, can't we just use them? Obviously the `Microsoft.CodeAnalysis.PublicApiAnalyzers1 package is very popular (despite my grumbling). The fact that it's used by Microsoft directly is a big endorsement, so if you want to learn more, I found this post about it a good start. For the rest of this post I'm going to describe a different approach, one that I personally prefer. Using the PublicApiGenerator package The PublicApiGenerator library is an open source package that does what it says: it creates a string containing the public API of your library. From there, you can do anything you like with the string, but I like to use Verify (another open source project) to perform snapshot approvals of the generated API. Overall, the process looks a bit like this: Generate the public API for the library using PublicApiGenerator as a string. Use Verify to persist the public API as a file in your test suite. Create a unit test that verifies the public API has not changed. As with all snapshot testing, the test fails if something has changed, and it's up to you to either accept the change (if the public API was supposed to change) or fix your code so as to not change the public API. This addresses all my previous complaints about the analyzer approach: You can run the unit test whenever you like. It doesn't stop you iterating on your APIs until you want it to. You can easily test locally by running the unit test, and CI will catch any issues automatically. There's one set of Public APIs, versioned along with the code directly, so no concept of \"Shipped\" vs \"Unshipped\" The output looks a lot like C#, with methods grouped inside types. To give you more of an idea of how it works, I'll show how I quickly added PublicApiGenerator to one of my open source projects. 1. Add the necessary packages First we need to add the required NuGet packages to our test project. The PublicApiGenerator package has very few dependencies, so it probably won't cause you any dependency issues: dotnet add package PublicApiGenerator\n I like to use Verify for my snapshot testing, and as we're going to use xunit for testing, we'll add the Verify.Xunit package: dotnet add package Verify.Xunit\n  Depending on what target frameworks your library supports, you may have some issues with dependencies here. Verify has been quite aggressive with updating dependencies and target frameworks, so I often find I need to install an old version to resolve all the conflicts (I'm using 18.4.0 for example, when the latest is 26.3.1!). That said, the Verify usage is entirely optional, you can easily roll-your-own if you need to, as I have previously.  Once we've added the dependencies, our test project .csproj should look something like this: <Project Sdk=\"Microsoft.NET.Sdk\">\n\n  <PropertyGroup>\n    <TargetFrameworks>net6.0;net8.0</TargetFrameworks>\n  </PropertyGroup>\n\n  <ItemGroup>\n    <PackageReference Include=\"PublicApiGenerator\" Version=\"11.1.0\" />\n    <PackageReference Include=\"Verify.Xunit\" Version=\"18.4.0\" />\n    <PackageReference Include=\"xunit\" Version=\"2.4.2\" />\n    <PackageReference Include=\"xunit.runner.visualstudio\" Version=\"2.4.5\" />\n    <PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"15.3.0\" />\n  </ItemGroup>\n\n</Project>\n Now we can create the test itself. 2. Create the unit test The simplest version of our unit test looks something like the following: using System.Threading.Tasks;\nusing PublicApiGenerator;\nusing VerifyXunit;\nusing Xunit;\n\n[UsesVerify]\npublic class PublicApiTest\n{\n    [Fact]\n    public Task PublicApiHasNotChanged()\n    {\n        // Get the assembly for the library we want to document\n        Assembly assembly = typeof(MyType).Assembly;\n\n        // Retreive the public API for all types in the assembly\n        string publicApi = assembly.GeneratePublicApi();\n\n        // Run a snapshot test on the returned string\n        return Verifier.Verify(publicApi);\n    }\n}\n This example is hopefully easy to follow. We start with a \"marker\" type as a way of retrieving an instance of the Assembly we want to document. We then call GeneratePublicApi() to retrieve the string representation of the API. Finally, we use Verify to perform a snapshot test of this value. The first time the test runs, Verify creates a file called PublicApiTest.PublicApiHasNotChanged.verified.txt, based on the name of the test. As this is empty, the test fails, but you can use Verify's various tools to update the snapshot. When you re-run the test it will pass. If you open up the PublicApiTest.PublicApiHasNotChanged.verified.txt file, you'll see that it looks a lot like \"normal\" C#, but with all the method bodies stripped out, for example: [assembly: System.Reflection.AssemblyMetadata(\"RepositoryUrl\", \"https://github.com/andrewlock/NetEscapades.AspNetCore.SecurityHeaders\")]\n[assembly: System.Resources.NeutralResourcesLanguage(\"en-GB\")]\n[assembly: System.Runtime.CompilerServices.InternalsVisibleTo(\"NetEscapades.AspNetCore.SecurityHeaders.TagHelpers.Test\")]\n[assembly: System.Runtime.CompilerServices.InternalsVisibleTo(\"NetEscapades.AspNetCore.SecurityHeaders.Test\")]\n[assembly: System.Runtime.Versioning.TargetFramework(\".NETCoreApp,Version=v3.0\", FrameworkDisplayName=\".NET Core 3.0\")]\nnamespace NetEscapades.AspNetCore.SecurityHeaders.Headers.ContentSecurityPolicy\n{\n    public class BaseUriDirectiveBuilder : NetEscapades.AspNetCore.SecurityHeaders.Headers.ContentSecurityPolicy.CspDirectiveBuilder\n    {\n        public BaseUriDirectiveBuilder() { }\n    }\n    public class BlockAllMixedContentDirectiveBuilder : NetEscapades.AspNetCore.SecurityHeaders.Headers.ContentSecurityPolicy.CspDirectiveBuilderBase\n    {\n        public BlockAllMixedContentDirectiveBuilder() { }\n    }\n    public class ConnectSourceDirectiveBuilder : NetEscapades.AspNetCore.SecurityHeaders.Headers.ContentSecurityPolicy.CspDirectiveBuilder\n    {\n        public ConnectSourceDirectiveBuilder() { }\n    }\n    public class CspDirectiveBuilder : NetEscapades.AspNetCore.SecurityHeaders.Headers.ContentSecurityPolicy.CspDirectiveBuilderBase\n    {\n        public CspDirectiveBuilder(string directive) { }\n        public bool BlockResources { get; set; }\n        public System.Collections.Generic.List<string> Sources { get; }\n    }\n}\n This is just part of the public API for NetEscapades.AspNetCore.SecurityHeaders, but as you can see it looks a lot like \"normal\" C#. If you make a change to the public API, then when you run the test Verify will fail, and shows you a diff with exactly what changed:  That's basically all there is to it. You can use the public API string in any way that makes sense. I like to use it as a sense-check on the changes that I'm making. It doesn't differentiate between breaking or non-breaking changes, but it makes it very apparent if you've removed or changed anything, which is typically good enough (and is the same functionality the analyzer provides). Customizing what counts as your public API You may notice at the top of the snapshot in the previous section there's a number of \"standard\" attributes that are technically part of your public API, but which you probably don't think of as such, as they're applied to the assembly: [assembly: System.Reflection.AssemblyMetadata(\"RepositoryUrl\", \"https://github.com/andrewlock/NetEscapades.AspNetCore.SecurityHeaders\")]\n[assembly: System.Resources.NeutralResourcesLanguage(\"en-GB\")]\n[assembly: System.Runtime.CompilerServices.InternalsVisibleTo(\"NetEscapades.AspNetCore.SecurityHeaders.TagHelpers.Test\")]\n[assembly: System.Runtime.CompilerServices.InternalsVisibleTo(\"NetEscapades.AspNetCore.SecurityHeaders.Test\")]\n[assembly: System.Runtime.Versioning.TargetFramework(\".NETCoreApp,Version=v3.0\", FrameworkDisplayName=\".NET Core 3.0\")]\n The [InternalsVisibleTo] and [TargetFramework] attributes in particular can be annoying. The former tends to change if you want to expose APIs for test purposes to other test projects. The latter is added automatically by the compiler, and means that if you're compiling for multiple TargetFrameworks, then you won't be able to share snapshot files, even if your APIs are otherwise identical.  If you intend to have different public APIs for different framework, you'll need to use the UniqueForRuntime() option on Verify, so that each target framework test run gets a different snapshot.  PublicApiGenerator lets you completely customize which attributes to include or exclude, and even lets you specify exactly which types should be considered as part of your public API. By default, for example, PublicApiGenerator excludes any types declared in your assembly that are in a Microsoft or System namespace.  In general you probably shouldn't declare types in Microsoft or System namespaces, but early in ASP.NET Core's lifetime a convention emerged of putting extensions on IServiceCollection or IApplicationBuilder, to improve discoverability. By default, PublicApiGenerator excludes these from your public API.  For example, the following code shows how you can remove some of those annoying assembly attributes, and also ensure that all the types in your assembly are included, regardless of the namespace. [Fact]\npublic Task PublicApiHasNotChanged()\n{\n    var assembly = typeof(HeaderPolicyCollection).Assembly;\n    var options = new ApiGeneratorOptions\n    {\n        // These attributes won't be included in the public API\n        ExcludeAttributes =\n        [\n            typeof(InternalsVisibleToAttribute).FullName,\n            \"System.Runtime.CompilerServices.IsByRefLike\",\n            typeof(TargetFrameworkAttribute).FullName,\n        ],\n        // By default types found in Microsoft or System \n        // namespaces are not treated as part of the public API.\n        // By passing an empty array, we ensure they're all \n        DenyNamespacePrefixes = []\n    };\n\n    var publicApi = assembly.GeneratePublicApi(options);\n\n    return Verifier.Verify(publicApi);\n}\n Another example of a tweak I have made in some cases is where types need to be public for technical reasons, but we don't want them to be visible to consumers of the library. A somewhat crude approach (that nevertheless works well enough) is to decorate the types with [Browsable] and [EditorBrowsable] attributes: [Browsable(false)]\n[EditorBrowsable(EditorBrowsableState.Never)]\npublic class PublicButHiddenType\n{\n}\n These types won't show up in Intellisense, so for most purposes, they're not public. If you wanted to exclude them from the generated public API, you could do it something like this: [Fact]\npublic Task PublicApiHasNotChanged()\n{\n    var assembly = typeof(HeaderPolicyCollection).Assembly;\n    // get all the types in the assembly, and filter out the hidden items\n    var types = assembly.GetTypes();\n                    .Where(t => IsVisibleToIntelliSense(t))\n                    .ToArray();\n\n    var options = new ApiGeneratorOptions\n    {\n        // These attributes won't be included in the public API\n        ExcludeAttributes =\n        [\n            typeof(InternalsVisibleToAttribute).FullName,\n            \"System.Runtime.CompilerServices.IsByRefLike\",\n            typeof(TargetFrameworkAttribute).FullName,\n        ],\n        // Only use these types, but apply filtering from the other\n        // options\n        IncludeTypes = types\n    };\n\n    var publicApi = assembly.GeneratePublicApi(options);\n\n    return Verifier.Verify(publicApi);\n}\n\nprivate static bool IsVisibleToIntelliSense(Type type)\n{\n    var browsable = type.GetCustomAttribute<BrowsableAttribute>();\n    if (browsable is null || browsable.Browsable)\n    {\n        // It doesn't have the browsable attribute, or it is Browsable == true\n        return true;\n    }\n\n    var editorBrowsable = type.GetCustomAttribute<EditorBrowsableAttribute>();\n    if (editorBrowsable is null || editorBrowsable.State != EditorBrowsableState.Never)\n    {\n        // It doesn't have the browsable attribute, or it has a visible state\n        return true;\n    }\n\n    // The type won't be visible to consumers\n    return false;\n}\n Note that when you set IncludeTypes as above, it defines the initial set of types to consider. Further types may be excluded from this list depending on other options, such as ExcludeAttributes and DenyNamespacePrefixes. And there you have it, two ways to keep track of your public API: you can use Microsoft's analyzer; or you could use my preferred approach, PublicApiGenerator. Summary In this post I showed how Microsoft documents their public API using the Microsoft.CodeAnalysis.PublicApiAnalyzers package, recording the APIs in PublicApi.Shipped.txt and PublicApi.Unshipped.txt files. I then discussed some of the reasons I'm not a big fan of it for small projects. Next I described an approach I prefer, using an open source project called PublicApiGenerator to document the public API, and using Verify to create a snapshot test to keep track of when your public API changes. I showed how to create the test, and some of the options you can use to customise what's documented. Neither of these approaches will prevent breaking changes to your API, but they both provide a way for you to document and track what your public API is, which is the first step to avoiding changing it accidentally."
  },
  {
    "itemId": "https://andrewlock.net/working-with-tar-files-in-dotnet/",
    "raw": "<img src=\"https://andrewlock.net/content/images/2024/tar_banner.webp\" /><p>Back in 2022 .NET 7 gained support for natively working with <code>tar</code> files in the base class library. In this post I describe how to perform some basic operations on tar files, how I typically use the <code>tar</code> command-line utility for doing them, and how to instead use the support built-in to .NET. I then discuss the various limitations of the existing support.</p> <ul><li><a href=\"#what-is-a-tar-file-\">What is a tar file?</a></li> <li><a href=\"#creating-a-tar-gz-archive\">Creating a <code>.tar.gz</code> archive</a> <ul><li><a href=\"#creating-a-tar-gz-archive-using-tar\">Creating a <code>.tar.gz</code> archive using <code>tar</code></a></li> <li><a href=\"#creating-a-tar-gz-archive-using-net\">Creating a <code>.tar.gz</code> archive using .NET</a></li></ul> </li> <li><a href=\"#extracting-a-tar-gz-archive\">Extracting a <code>.tar.gz</code> archive</a> <ul><li><a href=\"#extracting-a-tar-gz-archive-using-tar\">Extracting a <code>.tar.gz</code> archive using <code>tar</code></a></li> <li><a href=\"#extracting-a-tar-gz-archive-using-net\">Extracting a <code>.tar.gz</code> archive using .NET</a></li></ul> </li> <li><a href=\"#extracting-a-single-file-from-a-tar-gz-archive\">Extracting a single file from a <code>.tar.gz</code> archive</a> <ul><li><a href=\"#extracting-a-single-file-from-a-tar-gz-archive-using-tar\">Extracting a single file from a <code>.tar.gz</code> archive using <code>tar</code></a></li> <li><a href=\"#extracting-a-single-file-from-a-tar-gz-archive-using-net\">Extracting a single file from a <code>.tar.gz</code> archive using .NET</a></li></ul> </li> <li><a href=\"#listing-all-the-files-in-a-tar-gz-without-extraction\">Listing all the files in a <code>.tar.gz</code> without extraction</a> <ul><li><a href=\"#listing-all-the-files-in-a-tar-gz-using-tar\">Listing all the files in a <code>.tar.gz</code> using <code>tar</code></a></li> <li><a href=\"#listing-all-the-files-in-a-tar-gz-using-net\">Listing all the files in a <code>.tar.gz</code> using .NET</a></li></ul> </li> <li><a href=\"#caveats-missing-features-and-bugs\">Caveats, missing features, and bugs</a> <ul><li><a href=\"#-net-can-t-create-hardlinks-in-tar-archives\">.NET can't create hardlinks in <code>.tar</code> archives</a></li> <li><a href=\"#-net-can-t-control-ownership-during-extraction\">.NET can't control ownership during extraction</a></li> <li><a href=\"#-net-can-t-handle-absolute-paths\">.NET can't handle absolute paths</a></li></ul> </li></ul> <h2 id=\"what-is-a-tar-file-\" class=\"heading-with-anchor\"><a href=\"#what-is-a-tar-file-\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">What is a tar file?</a></h2> <p><a href=\"https://en.wikipedia.org/wiki/Tar_(computing)\">A <em>tar</em> file</a> (often called a <em>tarball</em>) is a file (typically with the suffix <code>.tar</code>) that combines multiple files into a single file. Tar files are very common in Linux and other *nix based OSs for distributing multiple files or for archiving/backing up files. On Windows it's more common <a href=\"https://en.wikipedia.org/wiki/ZIP_(file_format)\">to see <code>.zip</code> files</a> used for these purposes (though Windows now also has native support for tar files).</p> <p>Unlike <code>.zip</code> files, <code>.tar</code> files don't natively have compression, so it's extremely common to see <code>.tar.gz</code> files. These files are \"normal\" <code>.tar</code> files that have been subsequently compressed using <a href=\"https://en.wikipedia.org/wiki/Gzip\"><code>gzip</code></a> (which is based on the same <a href=\"https://en.wikipedia.org/wiki/DEFLATE\">DEFLATE</a> algorithm as ZIP files).</p> <p>Creating a <code>tar</code> from a directory can preserve many of the attributes of the files on the file system, such as:</p> <ul><li>Directory structure</li> <li>File names (normally relative, but you <em>can</em> create absolute paths)</li> <li>Permissions (<a href=\"https://en.wikipedia.org/wiki/Unix_file_types#Representations\">POSIX-style</a>)</li> <li>Modification date</li> <li>Owner IDs</li> <li><a href=\"https://www.redhat.com/sysadmin/linking-linux-explained\">Symbolic and Hard links</a></li></ul> <p>Working with tar files in .NET prior to .NET 7 had always required a third-party library. There are a bunch of options available on NuGet:</p> <ul><li><a href=\"https://github.com/icsharpcode/SharpZipLib\">SharpZipLib</a> (Open source)</li> <li><a href=\"https://github.com/adamhathcock/sharpcompress\">SharpCompress</a> (Open source)</li> <li><a href=\"https://products.aspose.com/zip/net/\">Aspose.ZIP</a> (Commercial)</li></ul> <p>In .NET 7, basic support for working with tar files was added to the base class library. For the rest of this post I show how to use these APIs to perform common functions on tar files.</p> <blockquote> <p>Note that while the APIs I use in this post all exist in .NET 7 as well, .NET 8 includes a variety of bug fixes and support for more tar file features and formats, and is what I'm using in this post.</p> </blockquote> <p>All the examples of using the <code>tar</code> command-line are shown running on Linux, but the .NET code should work on any OS.</p> <h2 id=\"creating-a-tar-gz-archive\" class=\"heading-with-anchor\"><a href=\"#creating-a-tar-gz-archive\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Creating a <code>.tar.gz</code> archive</a></h2> <p>We'll start with the most obvious place, <em>creating</em> a tar file from an existing directory. Lets imagine you have a directory of files in your home directory, in <code>~/my-files</code>, which you want to distribute. This also includes a symbolic link (<code>myapp.so</code>) and a hard link (<code>someother.so</code>):</p> <pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">ls</span> <span class=\"token parameter variable\">-lR</span> ~/my-files\n/home/andrewlock/my-files:\ntotal <span class=\"token number\">1420</span>\ndrwxr-xr-x <span class=\"token number\">2</span> root root    <span class=\"token number\">4096</span> Aug <span class=\"token number\">11</span> <span class=\"token number\">16</span>:00 bin\ndrwxr-xr-x <span class=\"token number\">2</span> root root    <span class=\"token number\">4096</span> Aug <span class=\"token number\">11</span> <span class=\"token number\">15</span>:57 docs\nlrwxrwxrwx <span class=\"token number\">1</span> root root      <span class=\"token number\">17</span> Aug <span class=\"token number\">11</span> <span class=\"token number\">16</span>:01 myapp.so -<span class=\"token operator\">&gt;</span> ./bin/myapp.so\n-rw-r--r-- <span class=\"token number\">2</span> root root <span class=\"token number\">1443232</span> Aug <span class=\"token number\">11</span> <span class=\"token number\">15</span>:56 someother.so\n\n/home/andrewlock/my-files/bin:\ntotal <span class=\"token number\">3756</span>\n-rw-r--r-- <span class=\"token number\">1</span> root root <span class=\"token number\">2399608</span> Aug <span class=\"token number\">11</span> <span class=\"token number\">15</span>:55 myapp.so\n-rw-r--r-- <span class=\"token number\">2</span> root root <span class=\"token number\">1443232</span> Aug <span class=\"token number\">11</span> <span class=\"token number\">15</span>:56 someother.so\n\n/home/andrewlock/my-files/docs:\ntotal <span class=\"token number\">5896</span>\n-rw-r--r-- <span class=\"token number\">1</span> root root      <span class=\"token number\">10</span> Aug <span class=\"token number\">11</span> <span class=\"token number\">15</span>:57 README\n-rw-r--r-- <span class=\"token number\">1</span> root root <span class=\"token number\">6027280</span> Aug <span class=\"token number\">11</span> <span class=\"token number\">15</span>:57 someother.xml\n</code></pre> <h3 id=\"creating-a-tar-gz-archive-using-tar\" class=\"heading-with-anchor\"><a href=\"#creating-a-tar-gz-archive-using-tar\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Creating a <code>.tar.gz</code> archive using <code>tar</code></a></h3> <p>A common command to create a tarball of these files called <code>myarchive.tar.gz</code> in the home directory would be:</p> <pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">cd</span> ~/my-files \n<span class=\"token function\">tar</span> <span class=\"token parameter variable\">-czvf</span> ~/myarchive.tar.gz <span class=\"token builtin class-name\">.</span>\n</code></pre> <p>In this example we change the working directory to <code>~/my-files</code> (if we were running from <code>~</code>, <code>tar</code> would include <code>my-files</code> as a prefix to the path names in the tar directory). The flags passed to the <code>tar</code> command mean:</p> <ul><li><code>-c</code> Create a new archive</li> <li><code>-z</code> Compress the resulting <code>tar</code> file with <code>gzip</code></li> <li><code>-v</code> List the files being processed (optional)</li> <li><code>-f &lt;FILE&gt;</code> Output the archive to file <code>&lt;FILE&gt;</code></li></ul> <p>Note that if you omit the <code>-z</code> flag, <code>tar</code> creates a <code>tar</code> file which is <em>not</em> compressed.</p> <h3 id=\"creating-a-tar-gz-archive-using-net\" class=\"heading-with-anchor\"><a href=\"#creating-a-tar-gz-archive-using-net\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Creating a <code>.tar.gz</code> archive using .NET</a></h3> <p>So how can we achieve this in .NET? .NET 7 added <a href=\"https://learn.microsoft.com/en-us/dotnet/api/system.formats.tar.tarfile?view=net-8.0\">the <code>TarFile</code> class</a> which includes <a href=\"https://learn.microsoft.com/en-us/dotnet/api/system.formats.tar.tarfile.createfromdirectory\">static methods for creating a tar archive</a>, so you might think you could do something like this:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Formats<span class=\"token punctuation\">.</span>Tar</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\"><span class=\"token keyword\">string</span></span> sourceDir <span class=\"token operator\">=</span> <span class=\"token string\">\"./my-files\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword\">string</span></span> outputFile <span class=\"token operator\">=</span> <span class=\"token string\">\"./myarchive.tar\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// note this _doesn't_ create a valid .tar.gz file</span>\n\nTarFile<span class=\"token punctuation\">.</span><span class=\"token function\">CreateFromDirectory</span><span class=\"token punctuation\">(</span>sourceDir<span class=\"token punctuation\">,</span> outputFile<span class=\"token punctuation\">,</span> <span class=\"token named-parameter punctuation\">includeBaseDirectory</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre> <p>The problem is that the <code>TarFile</code> utility <em>only</em> handles the <code>tar</code> format, it <em>doesn't</em> include the <code>gzip</code> handling which is so ubiquitous when working with tar files. Luckily, it's not too hard to add support for that using <code>GZipStream</code> and handling the file and stream creation ourselves:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Formats<span class=\"token punctuation\">.</span>Tar</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>IO<span class=\"token punctuation\">.</span>Compression</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\"><span class=\"token keyword\">string</span></span> sourceDir <span class=\"token operator\">=</span> <span class=\"token string\">\"./my-files\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword\">string</span></span> outputFile <span class=\"token operator\">=</span> <span class=\"token string\">\"./myarchive.tar.gz\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">using</span> <span class=\"token class-name\">FileStream</span> fs <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span>outputFile<span class=\"token punctuation\">,</span> FileMode<span class=\"token punctuation\">.</span>CreateNew<span class=\"token punctuation\">,</span> FileAccess<span class=\"token punctuation\">.</span>Write<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token class-name\">GZipStream</span> gz <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span>fs<span class=\"token punctuation\">,</span> CompressionMode<span class=\"token punctuation\">.</span>Compress<span class=\"token punctuation\">,</span> <span class=\"token named-parameter punctuation\">leaveOpen</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nTarFile<span class=\"token punctuation\">.</span><span class=\"token function\">CreateFromDirectory</span><span class=\"token punctuation\">(</span>sourceDir<span class=\"token punctuation\">,</span> gz<span class=\"token punctuation\">,</span> <span class=\"token named-parameter punctuation\">includeBaseDirectory</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre> <p>When you run this you'll get a similar gzipped tarball to the one produced by the <code>tar</code> command!</p> <blockquote> <p>Note that the <em>details</em> matter here, so the resulting file may not be the <em>same</em> as the one produced by <code>tar</code>. I discuss more about that at the end of the post.</p> </blockquote> <p>The <code>includeBaseDirectory</code> argument specifies whether you want the paths in the tarball to include initial base segments relative to the current working directory. If it was set to <code>true</code> in the above example, the paths would be prefixed with <code>my-files/</code>.</p> <p>So we can create <code>.tar.gz</code> files using .NET, now lets looks at how to extract them.</p> <h2 id=\"extracting-a-tar-gz-archive\" class=\"heading-with-anchor\"><a href=\"#extracting-a-tar-gz-archive\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Extracting a <code>.tar.gz</code> archive</a></h2> <p>As I mentioned previously, one of the features of <code>tar</code> files is supporting permissions, hard/symbolic links, owners etc. That inevitably means there are a lot of options available to you when you extract an archive, based on what you want to preserve and what you want to ignore for example. For the purposes of this section, I'm only looking at very simple examples.</p> <h3 id=\"extracting-a-tar-gz-archive-using-tar\" class=\"heading-with-anchor\"><a href=\"#extracting-a-tar-gz-archive-using-tar\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Extracting a <code>.tar.gz</code> archive using <code>tar</code></a></h3> <p>To extract an archive into the current working directory with the <code>tar</code> utility, you would use a command something like this:</p> <pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">tar</span> <span class=\"token parameter variable\">-xzvf</span> ~/my_archive.tar.gz\n</code></pre> <p>where the options mean:</p> <ul><li><code>-x</code> Extract the archive</li> <li><code>-z</code> Decompress the file with <code>gzip</code> before processing</li> <li><code>-v</code> List the files being processed (optional)</li> <li><code>-f &lt;FILE&gt;</code> Output the archive to file <code>&lt;FILE&gt;</code></li></ul> <p>If you want to output the files to a different directory you need to use an additional argument <code>-C &lt;DIR&gt;</code>, for example:</p> <pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">tar</span> <span class=\"token parameter variable\">-xzvf</span> ~/my_archive.tar.gz <span class=\"token parameter variable\">-C</span> /path/to/dir\n</code></pre> <p>Now lets see how we can do this with .NET.</p> <h3 id=\"extracting-a-tar-gz-archive-using-net\" class=\"heading-with-anchor\"><a href=\"#extracting-a-tar-gz-archive-using-net\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Extracting a <code>.tar.gz</code> archive using .NET</a></h3> <p>As before, the <a href=\"https://learn.microsoft.com/en-us/dotnet/api/system.formats.tar.tarfile?view=net-8.0\">the <code>TarFile</code> class</a> has a helpful <code>ExtractToDirectory</code> method, but once again it works only with <code>tar</code> files, not <code>tar.gz</code> files that are also compressed. But yet again, we can work around this using the <code>GZipStream</code> class, giving very similar code to before:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Formats<span class=\"token punctuation\">.</span>Tar</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\"><span class=\"token keyword\">string</span></span> sourceTar <span class=\"token operator\">=</span> <span class=\"token string\">\"./myarchive.tar.gz\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword\">string</span></span> extractTo <span class=\"token operator\">=</span> <span class=\"token string\">\"/path/to/dir\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">using</span> <span class=\"token class-name\">FileStream</span> fs <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span>sourceTar<span class=\"token punctuation\">,</span> FileMode<span class=\"token punctuation\">.</span>Open<span class=\"token punctuation\">,</span> FileAccess<span class=\"token punctuation\">.</span>Read<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token class-name\">GZipStream</span> gz <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span>fs<span class=\"token punctuation\">,</span> CompressionMode<span class=\"token punctuation\">.</span>Decompress<span class=\"token punctuation\">,</span> <span class=\"token named-parameter punctuation\">leaveOpen</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nTarFile<span class=\"token punctuation\">.</span><span class=\"token function\">ExtractToDirectory</span><span class=\"token punctuation\">(</span>gz<span class=\"token punctuation\">,</span> extractTo<span class=\"token punctuation\">,</span> <span class=\"token named-parameter punctuation\">overwriteFiles</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre> <p>The only option available in the .NET code here is <code>overwriteFiles</code>; if a file exists during extraction and <code>overwriteFiles</code> is not <code>true</code>, this throws an <code>IOException</code>.</p> <p>The .NET implementation of extraction generally performs similarly to the <code>tar</code> utility, but there are some differences such as <a href=\"https://github.com/dotnet/runtime/issues/74135\">extracting absolute paths</a> and <a href=\"https://github.com/dotnet/runtime/issues/69780\">preserving ownership</a> which I'll discuss later.</p> <h2 id=\"extracting-a-single-file-from-a-tar-gz-archive\" class=\"heading-with-anchor\"><a href=\"#extracting-a-single-file-from-a-tar-gz-archive\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Extracting a single file from a <code>.tar.gz</code> archive</a></h2> <p>Sometimes you only want to extract a <em>single</em> file from an archive instead of extracting the whole archive. That's particularly important when you have very large archives that would be difficult or impossible to fully extract.</p> <h3 id=\"extracting-a-single-file-from-a-tar-gz-archive-using-tar\" class=\"heading-with-anchor\"><a href=\"#extracting-a-single-file-from-a-tar-gz-archive-using-tar\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Extracting a single file from a <code>.tar.gz</code> archive using <code>tar</code></a></h3> <p>To extract a single file from an archive using <code>tar</code>, you can just add the path to the file at the end of the command. The following command extracts the file with the path <code>./bin/someother.so</code> <em>inside</em> the archive and writes it to the current directory:</p> <pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">tar</span> <span class=\"token parameter variable\">-xzvf</span> ~/my_archive.tar.gz ./bin/someother.so\n</code></pre> <p>The options for this are the same as described in the full extraction, so I won't repeat them here.</p> <h3 id=\"extracting-a-single-file-from-a-tar-gz-archive-using-net\" class=\"heading-with-anchor\"><a href=\"#extracting-a-single-file-from-a-tar-gz-archive-using-net\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Extracting a single file from a <code>.tar.gz</code> archive using .NET</a></h3> <p>Unfortunately, we don't have any more high-level helpers for .NET to handle this requirement, so we're going to fallback to using the slightly lower APIs of <code>TarReader</code> and <code>TarEntry</code>.</p> <p>In the following code we open an existing <code>.tar.gz</code> file as a <code>FileStream</code> and decompress it using <code>GZipStream</code>, as we have in the previous examples. We then pass this stream to an instance of <code>TarReader</code> and iterate through each <code>TarEntry</code> it finds. When we find an entry with the correct name, we extract the file and exit.</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> sourceTar <span class=\"token operator\">=</span> <span class=\"token string\">\"./my_archive.tar.gz\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword\">string</span></span> pathInTar <span class=\"token operator\">=</span> <span class=\"token string\">\"./bin/someother.so\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword\">string</span></span> destination <span class=\"token operator\">=</span> <span class=\"token string\">\"./extractedFile.so\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Open the source tar file, decompress, and pass stream to TarReader</span>\n<span class=\"token keyword\">using</span> <span class=\"token class-name\">FileStream</span> fs <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span>sourceTar<span class=\"token punctuation\">,</span> FileMode<span class=\"token punctuation\">.</span>Open<span class=\"token punctuation\">,</span> FileAccess<span class=\"token punctuation\">.</span>Read<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token class-name\">GZipStream</span> gz <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span>fs<span class=\"token punctuation\">,</span> CompressionMode<span class=\"token punctuation\">.</span>Decompress<span class=\"token punctuation\">,</span> <span class=\"token named-parameter punctuation\">leaveOpen</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> reader <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">TarReader</span><span class=\"token punctuation\">(</span>gz<span class=\"token punctuation\">,</span> <span class=\"token named-parameter punctuation\">leaveOpen</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Loop through all the entries in the tar</span>\n<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>reader<span class=\"token punctuation\">.</span><span class=\"token function\">GetNextEntry</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">is</span> <span class=\"token class-name\">TarEntry</span> entry<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// If the entry matches the required path, extract the file</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>entry<span class=\"token punctuation\">.</span>Name <span class=\"token operator\">==</span> pathInTar<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"Found '</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">pathInTar</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">', extracting to '</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">destination</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        entry<span class=\"token punctuation\">.</span><span class=\"token function\">ExtractToFile</span><span class=\"token punctuation\">(</span>destination<span class=\"token punctuation\">,</span> <span class=\"token named-parameter punctuation\">overwrite</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// all done</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// If we get here, we didn't find the file</span>\n</code></pre> <p>The <code>ExtractToFile</code> helper can extract both files and directories, but it won't extract symbolic links or hard links; those are only extracted if you extract the <em>whole</em> archive.</p> <h2 id=\"listing-all-the-files-in-a-tar-gz-without-extraction\" class=\"heading-with-anchor\"><a href=\"#listing-all-the-files-in-a-tar-gz-without-extraction\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Listing all the files in a <code>.tar.gz</code> without extraction</a></h2> <p>Sometimes you don't actually need to extract anything from the file, you just want to look at the files contained inside. This section shows how to do that both with <code>tar</code> and using .NET.</p> <h3 id=\"listing-all-the-files-in-a-tar-gz-using-tar\" class=\"heading-with-anchor\"><a href=\"#listing-all-the-files-in-a-tar-gz-using-tar\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Listing all the files in a <code>.tar.gz</code> using <code>tar</code></a></h3> <p>To list all the files in an archive using <code>tar</code>, you can use the following:</p> <pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">tar</span> <span class=\"token parameter variable\">-tzvf</span> ~/myarchive.tar.gz\n</code></pre> <p>Most of these options</p> <ul><li><code>-t</code> List the contents of an archive</li> <li><code>-z</code> Decompress the file with <code>gzip</code> before processing</li> <li><code>-v</code> List the files verbosely (optional)</li> <li><code>-f &lt;FILE&gt;</code> Output the archive to file <code>&lt;FILE&gt;</code></li></ul> <p>The <code>-v</code> option is not required, but adding it outputs additional information about each entry, similar to <code>ls -l</code>:</p> <pre class=\"language-bash\"><code class=\"language-bash\">drwxr-xr-x root/root         <span class=\"token number\">0</span> <span class=\"token number\">2024</span>-08-11 <span class=\"token number\">16</span>:02 ./\nlrwxrwxrwx root/root         <span class=\"token number\">0</span> <span class=\"token number\">2024</span>-08-11 <span class=\"token number\">16</span>:01 ./myapp.so -<span class=\"token operator\">&gt;</span> ./bin/myapp.so\ndrwxr-xr-x root/root         <span class=\"token number\">0</span> <span class=\"token number\">2024</span>-08-11 <span class=\"token number\">15</span>:57 ./docs/\n-rw-r--r-- root/root        <span class=\"token number\">10</span> <span class=\"token number\">2024</span>-08-11 <span class=\"token number\">15</span>:57 ./docs/README\n-rw-r--r-- root/root   <span class=\"token number\">6027280</span> <span class=\"token number\">2024</span>-08-11 <span class=\"token number\">15</span>:57 ./docs/someother.xml\n-rw-r--r-- root/root   <span class=\"token number\">1443232</span> <span class=\"token number\">2024</span>-08-11 <span class=\"token number\">15</span>:56 ./someother.so\ndrwxr-xr-x root/root         <span class=\"token number\">0</span> <span class=\"token number\">2024</span>-08-11 <span class=\"token number\">16</span>:00 ./bin/\n-rw-r--r-- root/root   <span class=\"token number\">2399608</span> <span class=\"token number\">2024</span>-08-11 <span class=\"token number\">15</span>:55 ./bin/myapp.so\nhrw-r--r-- root/root         <span class=\"token number\">0</span> <span class=\"token number\">2024</span>-08-11 <span class=\"token number\">15</span>:56 ./bin/someother.so <span class=\"token function\">link</span> to ./someother.so\n</code></pre> <p>You can read the full spec for <code>ls -l</code> <a href=\"https://pubs.opengroup.org/onlinepubs/9699919799/utilities/ls.html\">here</a> but in summary, this shows:</p> <ul><li>The type of entry (<code>d</code> for directory, <code>-</code> for file, <code>l</code> for symbolic link, <code>h</code> for hard link)</li> <li>The <a href=\"https://en.wikipedia.org/wiki/Unix_file_types#Representations\">permissions</a> for the entry</li> <li>The owner</li> <li>The size of the entry (in bytes)</li> <li>The modification time</li> <li>The path (and link location for symbolic and hard links)</li></ul> <h3 id=\"listing-all-the-files-in-a-tar-gz-using-net\" class=\"heading-with-anchor\"><a href=\"#listing-all-the-files-in-a-tar-gz-using-net\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Listing all the files in a <code>.tar.gz</code> using .NET</a></h3> <p>As you might expect, there's no built-in method helper for printing this information with .NET. Writing one is a little annoying, but not very difficult; all the information contained in the tar entry is exposed on <code>TarEntry</code>.</p> <p>The following code <em>mostly</em> emulates the display format of <code>tar</code>'s <code>-tzvf</code> format shown above:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Formats<span class=\"token punctuation\">.</span>Tar</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Globalization</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>IO<span class=\"token punctuation\">.</span>Compression</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\"><span class=\"token keyword\">string</span></span> sourceTar <span class=\"token operator\">=</span> <span class=\"token string\">\"./myarchive.tar.gz\"</span>\n\n<span class=\"token comment\">// read the tar and loop through the entries</span>\n<span class=\"token keyword\">using</span> <span class=\"token class-name\">FileStream</span> fs <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span>sourceTar<span class=\"token punctuation\">,</span> FileMode<span class=\"token punctuation\">.</span>Open<span class=\"token punctuation\">,</span> FileAccess<span class=\"token punctuation\">.</span>Read<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token class-name\">GZipStream</span> gz <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span>fs<span class=\"token punctuation\">,</span> CompressionMode<span class=\"token punctuation\">.</span>Decompress<span class=\"token punctuation\">,</span> <span class=\"token named-parameter punctuation\">leaveOpen</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> reader <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">TarReader</span><span class=\"token punctuation\">(</span>gz<span class=\"token punctuation\">,</span> <span class=\"token named-parameter punctuation\">leaveOpen</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>reader<span class=\"token punctuation\">.</span><span class=\"token function\">GetNextEntry</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">is</span> <span class=\"token class-name\">TarEntry</span> entry<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Get the file descriptor</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">char</span></span> type <span class=\"token operator\">=</span> entry<span class=\"token punctuation\">.</span>EntryType <span class=\"token keyword\">switch</span>\n    <span class=\"token punctuation\">{</span>\n        TarEntryType<span class=\"token punctuation\">.</span>Directory <span class=\"token operator\">=&gt;</span> <span class=\"token char\">'d'</span><span class=\"token punctuation\">,</span>\n        TarEntryType<span class=\"token punctuation\">.</span>HardLink <span class=\"token operator\">=&gt;</span> <span class=\"token char\">'h'</span><span class=\"token punctuation\">,</span>\n        TarEntryType<span class=\"token punctuation\">.</span>SymbolicLink <span class=\"token operator\">=&gt;</span> <span class=\"token char\">'l'</span><span class=\"token punctuation\">,</span>\n        _ <span class=\"token operator\">=&gt;</span> <span class=\"token char\">'-'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Construct the permissions e.g. rwxr-xr-x</span>\n    <span class=\"token comment\">// Moved to a separate function just because it's a bit verbose</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> permissions <span class=\"token operator\">=</span> <span class=\"token function\">GetPermissions</span><span class=\"token punctuation\">(</span>entry<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Display the owner info. 0 is special (root) but .NET doesn't</span>\n    <span class=\"token comment\">// expose the mappings for these IDs natively, so ignoring for now </span>\n    <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> ownerUser <span class=\"token operator\">=</span> entry<span class=\"token punctuation\">.</span>Uid <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">?</span> <span class=\"token string\">\"root\"</span> <span class=\"token punctuation\">:</span> entry<span class=\"token punctuation\">.</span>Uid<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span>CultureInfo<span class=\"token punctuation\">.</span>InvariantCulture<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> ownerGroup <span class=\"token operator\">=</span> entry<span class=\"token punctuation\">.</span>Gid <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">?</span> <span class=\"token string\">\"root\"</span> <span class=\"token punctuation\">:</span> entry<span class=\"token punctuation\">.</span>Gid<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span>CultureInfo<span class=\"token punctuation\">.</span>InvariantCulture<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// The length of the data and the modification date in bytes</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">long</span></span> size <span class=\"token operator\">=</span> entry<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">DateTimeOffset</span> date <span class=\"token operator\">=</span> entry<span class=\"token punctuation\">.</span>ModificationTime<span class=\"token punctuation\">.</span>UtcDateTime<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Match the display format used by tar -tzvf </span>\n    <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> path <span class=\"token operator\">=</span> entry<span class=\"token punctuation\">.</span>EntryType <span class=\"token keyword\">switch</span>\n    <span class=\"token punctuation\">{</span>\n        TarEntryType<span class=\"token punctuation\">.</span>HardLink <span class=\"token operator\">=&gt;</span> <span class=\"token interpolation-string\"><span class=\"token string\">$\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">entry<span class=\"token punctuation\">.</span>Name</span><span class=\"token punctuation\">}</span></span><span class=\"token string\"> link to </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">entry<span class=\"token punctuation\">.</span>LinkName</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">,</span>\n        TarEntryType<span class=\"token punctuation\">.</span>SymbolicLink <span class=\"token operator\">=&gt;</span> <span class=\"token interpolation-string\"><span class=\"token string\">$\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">entry<span class=\"token punctuation\">.</span>Name</span><span class=\"token punctuation\">}</span></span><span class=\"token string\"> -&gt; </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">entry<span class=\"token punctuation\">.</span>LinkName</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">,</span>\n        _ <span class=\"token operator\">=&gt;</span> entry<span class=\"token punctuation\">.</span>Name<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Write the entry!</span>\n    Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">type</span><span class=\"token punctuation\">}</span></span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">permissions</span><span class=\"token punctuation\">}</span></span><span class=\"token string\"> </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">ownerUser</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">/</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">ownerGroup</span><span class=\"token punctuation\">}</span></span><span class=\"token string\"> </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">size<span class=\"token punctuation\">,</span><span class=\"token number\">9</span></span><span class=\"token punctuation\">}</span></span><span class=\"token string\"> </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">date</span><span class=\"token format-string\"><span class=\"token punctuation\">:</span>yyyy-MM-dd hh:mm</span><span class=\"token punctuation\">}</span></span><span class=\"token string\"> </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">path</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Construct the permissions</span>\n<span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> <span class=\"token function\">GetPermissions</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TarEntry</span> entry<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> userRead <span class=\"token operator\">=</span> entry<span class=\"token punctuation\">.</span>Mode<span class=\"token punctuation\">.</span><span class=\"token function\">HasFlag</span><span class=\"token punctuation\">(</span>UnixFileMode<span class=\"token punctuation\">.</span>UserRead<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">?</span> <span class=\"token char\">'r'</span> <span class=\"token punctuation\">:</span> <span class=\"token char\">'-'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> userWrite <span class=\"token operator\">=</span> entry<span class=\"token punctuation\">.</span>Mode<span class=\"token punctuation\">.</span><span class=\"token function\">HasFlag</span><span class=\"token punctuation\">(</span>UnixFileMode<span class=\"token punctuation\">.</span>UserWrite<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">?</span> <span class=\"token char\">'w'</span> <span class=\"token punctuation\">:</span> <span class=\"token char\">'-'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> userExecute <span class=\"token operator\">=</span> entry<span class=\"token punctuation\">.</span>Mode<span class=\"token punctuation\">.</span><span class=\"token function\">HasFlag</span><span class=\"token punctuation\">(</span>UnixFileMode<span class=\"token punctuation\">.</span>UserExecute<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">?</span> <span class=\"token char\">'x'</span> <span class=\"token punctuation\">:</span> <span class=\"token char\">'-'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> groupRead <span class=\"token operator\">=</span> entry<span class=\"token punctuation\">.</span>Mode<span class=\"token punctuation\">.</span><span class=\"token function\">HasFlag</span><span class=\"token punctuation\">(</span>UnixFileMode<span class=\"token punctuation\">.</span>GroupRead<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">?</span> <span class=\"token char\">'r'</span> <span class=\"token punctuation\">:</span> <span class=\"token char\">'-'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> groupWrite <span class=\"token operator\">=</span> entry<span class=\"token punctuation\">.</span>Mode<span class=\"token punctuation\">.</span><span class=\"token function\">HasFlag</span><span class=\"token punctuation\">(</span>UnixFileMode<span class=\"token punctuation\">.</span>GroupWrite<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">?</span> <span class=\"token char\">'w'</span> <span class=\"token punctuation\">:</span> <span class=\"token char\">'-'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> groupExecute <span class=\"token operator\">=</span> entry<span class=\"token punctuation\">.</span>Mode<span class=\"token punctuation\">.</span><span class=\"token function\">HasFlag</span><span class=\"token punctuation\">(</span>UnixFileMode<span class=\"token punctuation\">.</span>GroupExecute<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">?</span> <span class=\"token char\">'x'</span> <span class=\"token punctuation\">:</span> <span class=\"token char\">'-'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> otherRead <span class=\"token operator\">=</span> entry<span class=\"token punctuation\">.</span>Mode<span class=\"token punctuation\">.</span><span class=\"token function\">HasFlag</span><span class=\"token punctuation\">(</span>UnixFileMode<span class=\"token punctuation\">.</span>OtherRead<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">?</span> <span class=\"token char\">'r'</span> <span class=\"token punctuation\">:</span> <span class=\"token char\">'-'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> otherWrite <span class=\"token operator\">=</span> entry<span class=\"token punctuation\">.</span>Mode<span class=\"token punctuation\">.</span><span class=\"token function\">HasFlag</span><span class=\"token punctuation\">(</span>UnixFileMode<span class=\"token punctuation\">.</span>OtherWrite<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">?</span> <span class=\"token char\">'w'</span> <span class=\"token punctuation\">:</span> <span class=\"token char\">'-'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> otherExecute <span class=\"token operator\">=</span> entry<span class=\"token punctuation\">.</span>Mode<span class=\"token punctuation\">.</span><span class=\"token function\">HasFlag</span><span class=\"token punctuation\">(</span>UnixFileMode<span class=\"token punctuation\">.</span>OtherExecute<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">?</span> <span class=\"token char\">'x'</span> <span class=\"token punctuation\">:</span> <span class=\"token char\">'-'</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">return</span> <span class=\"token interpolation-string\"><span class=\"token string\">$\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">userRead</span><span class=\"token punctuation\">}</span></span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">userWrite</span><span class=\"token punctuation\">}</span></span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">userExecute</span><span class=\"token punctuation\">}</span></span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">groupRead</span><span class=\"token punctuation\">}</span></span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">groupWrite</span><span class=\"token punctuation\">}</span></span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">groupExecute</span><span class=\"token punctuation\">}</span></span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">otherRead</span><span class=\"token punctuation\">}</span></span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">otherWrite</span><span class=\"token punctuation\">}</span></span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">otherExecute</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>When you run the above, you get pretty much the same output as <code>tar -tzvf</code>:</p> <pre class=\"language-bash\"><code class=\"language-bash\">drwxr-xr-x root/root         <span class=\"token number\">0</span> <span class=\"token number\">2024</span>-08-11 <span class=\"token number\">15</span>:02 ./\nlrwxrwxrwx root/root         <span class=\"token number\">0</span> <span class=\"token number\">2024</span>-08-11 <span class=\"token number\">15</span>:01 ./myapp.so -<span class=\"token operator\">&gt;</span> ./bin/myapp.so\ndrwxr-xr-x root/root         <span class=\"token number\">0</span> <span class=\"token number\">2024</span>-08-11 <span class=\"token number\">14</span>:57 ./docs/\n-rw-r--r-- root/root        <span class=\"token number\">10</span> <span class=\"token number\">2024</span>-08-11 <span class=\"token number\">14</span>:57 ./docs/README\n-rw-r--r-- root/root   <span class=\"token number\">6027280</span> <span class=\"token number\">2024</span>-08-11 <span class=\"token number\">14</span>:57 ./docs/someother.xml\n-rw-r--r-- root/root   <span class=\"token number\">1443232</span> <span class=\"token number\">2024</span>-08-11 <span class=\"token number\">14</span>:56 ./someother.so\ndrwxr-xr-x root/root         <span class=\"token number\">0</span> <span class=\"token number\">2024</span>-08-11 <span class=\"token number\">15</span>:00 ./bin/\n-rw-r--r-- root/root   <span class=\"token number\">2399608</span> <span class=\"token number\">2024</span>-08-11 <span class=\"token number\">14</span>:55 ./bin/myapp.so\nhrw-r--r-- root/root         <span class=\"token number\">0</span> <span class=\"token number\">2024</span>-08-11 <span class=\"token number\">14</span>:56 ./bin/someother.so <span class=\"token function\">link</span> to ./someother.so\n</code></pre> <p>Pretty neat 🙂 There's just a couple of things to note here:</p> <ul><li>The owners are stored in the <code>.tar</code> archive as IDs of the current user and group. <code>root</code> is a well known value (<code>0</code>) so we can decode that one easily, but you can't easily get the names of the other users from .NET (you need to invoke <code>id</code> or read the <code>/etc/passwd</code> file for example).</li> <li>The output of <code>tar -tzvf</code> displays modification time in <em>local</em> time, whereas I used UTC because, you know, why not 😄</li></ul> <p>That covers the main operations I want to talk about in this post.</p> <h2 id=\"caveats-missing-features-and-bugs\" class=\"heading-with-anchor\"><a href=\"#caveats-missing-features-and-bugs\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Caveats, missing features, and bugs</a></h2> <p>In the final section of this post I describe some of the limitations and differences from <code>tar</code> that I've run into.</p> <h3 id=\"-net-can-t-create-hardlinks-in-tar-archives\" class=\"heading-with-anchor\"><a href=\"#-net-can-t-create-hardlinks-in-tar-archives\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">.NET can't create hardlinks in <code>.tar</code> archives</a></h3> <p>One of the biggest problems I ran into (which ended up being a blocker for me to use it) was that .NET currently <em>can't</em> create hardlinks in <code>tar</code> archives, unlike the <code>tar</code> utility.</p> <p><a href=\"https://www.redhat.com/sysadmin/linking-linux-explained\">Hardlinks in Linux</a> are relatively simple: a hard link is the link between the <em>filename</em> and the actual <em>data</em> of the file. Every file you create starts with one hardlink, but you can create additional hard links, so multiple filenames point to the same underlying data.</p> <blockquote> <p>The other type of link is a <em>symbolic</em> link. The advantage of hard links is that they mostly appear like completely normal files to applications, whereas applications need to specifically handle symbolic links.</p> </blockquote> <p>I wanted to use hardlinks to de-duplicate files inside a <code>tar</code> file. The <code>tar</code> utility (and archive format) both handle this perfectly well, preserving the hard link, but .NET currently does not preserve the link when creating an archive. Any hardlinks will be <em>duplicated</em> as additional data in the resulting <code>.tar</code> file, increasing the size of the archive <em>and</em> the size of the expanded data after extraction.</p> <p>You can see this in practice comparing an archive created using <code>tar</code> directly compared to .NET when the directory contains a hard link:</p> <pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># For the `tar` utility 👇</span>\n$ <span class=\"token function\">tar</span> <span class=\"token parameter variable\">-vtzf</span> ./myarchive.tar.gz\ndrwxr-xr-x root/root         <span class=\"token number\">0</span> <span class=\"token number\">2024</span>-08-11 <span class=\"token number\">16</span>:02 ./\n-rw-r--r-- root/root   <span class=\"token number\">1443232</span> <span class=\"token number\">2024</span>-08-11 <span class=\"token number\">15</span>:56 ./someother.so\ndrwxr-xr-x root/root         <span class=\"token number\">0</span> <span class=\"token number\">2024</span>-08-11 <span class=\"token number\">16</span>:00 ./bin/\nhrw-r--r-- root/root         <span class=\"token number\">0</span> <span class=\"token number\">2024</span>-08-11 <span class=\"token number\">15</span>:56 ./bin/someother.so <span class=\"token function\">link</span> to ./someother.so\n👆<span class=\"token comment\"># Note the 'h'</span>\n\n<span class=\"token comment\"># For the .NET archive 👇</span>\n$ <span class=\"token function\">tar</span> <span class=\"token parameter variable\">-vtzf</span> ./myarchive.tar.gz\n-rw-r--r-- root/root   <span class=\"token number\">1443232</span> <span class=\"token number\">2024</span>-08-11 <span class=\"token number\">15</span>:56 someother.so\ndrwxr-xr-x root/root         <span class=\"token number\">0</span> <span class=\"token number\">2024</span>-08-11 <span class=\"token number\">16</span>:00 bin/\n-rw-r--r-- root/root   <span class=\"token number\">1443232</span> <span class=\"token number\">2024</span>-08-11 <span class=\"token number\">15</span>:56 bin/someother.so\n👆<span class=\"token comment\"># Normal file, not a hardlink</span>\n</code></pre> <blockquote> <p>Note that .NET <em>will</em> preserve any hardlinks in the <code>.tar</code> archive when <em>expanding</em> an archive. It just can't currently <em>create</em> those hardlinks in the <code>.tar</code> archive in the first place.</p> </blockquote> <p>There's already <a href=\"https://github.com/dotnet/runtime/issues/74404\">a two year old issue about the behaviour</a>, but it's not getting much love by the looks of it. Hopefully it does soon 🤞</p> <h3 id=\"-net-can-t-control-ownership-during-extraction\" class=\"heading-with-anchor\"><a href=\"#-net-can-t-control-ownership-during-extraction\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">.NET can't control ownership during extraction</a></h3> <p>The <code>tar</code> utility has a <em>huge</em> number of options and flags, but one I often use is <code>--same-owner</code> (implicitly, by extracting using <code>sudo</code>) when I want to make sure that files marked as <code>root</code> in the archive <em>remain</em> that way after extraction.</p> <p>Unfortunately there's no way to do this currently in .NET. You <em>might</em> be able to hack around it yourself by \"fixing\" the permissions manually, but it really feels like this should just be an explicit built-in option. Speaking of which, there's <a href=\"https://github.com/dotnet/runtime/issues/69780\">an old issue</a> about adding additional options to the implementation, and controlling the owner/group is one of the explicit missing features mentioned.</p> <h3 id=\"-net-can-t-handle-absolute-paths\" class=\"heading-with-anchor\"><a href=\"#-net-can-t-handle-absolute-paths\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">.NET can't handle absolute paths</a></h3> <p>In general, it's not recommended to use absolute paths in tar files, but you <em>can</em> if you want to. The <code>tar</code> utility automatically converts any absolute paths to relative paths, but also provides an option to extract to the \"real\" path using <code>--absolute-names</code>.</p> <blockquote> <p>You should be very careful extracting with <code>--absolute-names</code> as expanding the tar file could overwrite practically anywhere on your system.</p> </blockquote> <p>Unfortunately .NET flat out refuses to expand a tar that has absolute paths. Instead it throws an <code>IOException</code>:</p> <pre class=\"language-bash\"><code class=\"language-bash\">Unhandled exception. System.IO.IOException: Extracting the Tar entry <span class=\"token string\">'/bin/busybox'</span> would have resulted <span class=\"token keyword\">in</span> a <span class=\"token function\">link</span> target outside the specified destination directory: <span class=\"token string\">'/tmp/extracted-alpine'</span>\n</code></pre> <p>There's <a href=\"https://github.com/dotnet/runtime/issues/74135\">an issue raised</a> about this one too.</p> <p>In general it feels like what's currently available built in to .NET should be good enough for most simple cases, but unfortunately you're likely to run up against the edges once you break outside the 80% common cases.</p> <h2 id=\"summary\" class=\"heading-with-anchor\"><a href=\"#summary\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Summary</a></h2> <p>In this post I described how to perform some of common operations on <code>.tar.gz</code> files using the built-in .NET support. I show how to compress a directory into a <code>.tar.gz</code> file, how to expand a <code>.tar.gz</code> file into a directory, how to extract a single file from the directory, and how to list the contents of the directory without extracting the files. Finally I discuss some of the limitations in the current .NET implementations.</p> ",
    "sanitized": "Back in 2022 .NET 7 gained support for natively working with tar files in the base class library. In this post I describe how to perform some basic operations on tar files, how I typically use the tar command-line utility for doing them, and how to instead use the support built-in to .NET. I then discuss the various limitations of the existing support. What is a tar file? Creating a .tar.gz archive Creating a .tar.gz archive using tar Creating a .tar.gz archive using .NET  Extracting a .tar.gz archive Extracting a .tar.gz archive using tar Extracting a .tar.gz archive using .NET  Extracting a single file from a .tar.gz archive Extracting a single file from a .tar.gz archive using tar Extracting a single file from a .tar.gz archive using .NET  Listing all the files in a .tar.gz without extraction Listing all the files in a .tar.gz using tar Listing all the files in a .tar.gz using .NET  Caveats, missing features, and bugs .NET can't create hardlinks in .tar archives .NET can't control ownership during extraction .NET can't handle absolute paths  What is a tar file? A tar file (often called a tarball) is a file (typically with the suffix .tar) that combines multiple files into a single file. Tar files are very common in Linux and other *nix based OSs for distributing multiple files or for archiving/backing up files. On Windows it's more common to see .zip files used for these purposes (though Windows now also has native support for tar files). Unlike .zip files, .tar files don't natively have compression, so it's extremely common to see .tar.gz files. These files are \"normal\" .tar files that have been subsequently compressed using gzip (which is based on the same DEFLATE algorithm as ZIP files). Creating a tar from a directory can preserve many of the attributes of the files on the file system, such as: Directory structure File names (normally relative, but you can create absolute paths) Permissions (POSIX-style) Modification date Owner IDs Symbolic and Hard links Working with tar files in .NET prior to .NET 7 had always required a third-party library. There are a bunch of options available on NuGet: SharpZipLib (Open source) SharpCompress (Open source) Aspose.ZIP (Commercial) In .NET 7, basic support for working with tar files was added to the base class library. For the rest of this post I show how to use these APIs to perform common functions on tar files.  Note that while the APIs I use in this post all exist in .NET 7 as well, .NET 8 includes a variety of bug fixes and support for more tar file features and formats, and is what I'm using in this post.  All the examples of using the tar command-line are shown running on Linux, but the .NET code should work on any OS. Creating a .tar.gz archive We'll start with the most obvious place, creating a tar file from an existing directory. Lets imagine you have a directory of files in your home directory, in ~/my-files, which you want to distribute. This also includes a symbolic link (myapp.so) and a hard link (someother.so): $ ls -lR ~/my-files\n/home/andrewlock/my-files:\ntotal 1420\ndrwxr-xr-x 2 root root    4096 Aug 11 16:00 bin\ndrwxr-xr-x 2 root root    4096 Aug 11 15:57 docs\nlrwxrwxrwx 1 root root      17 Aug 11 16:01 myapp.so -> ./bin/myapp.so\n-rw-r--r-- 2 root root 1443232 Aug 11 15:56 someother.so\n\n/home/andrewlock/my-files/bin:\ntotal 3756\n-rw-r--r-- 1 root root 2399608 Aug 11 15:55 myapp.so\n-rw-r--r-- 2 root root 1443232 Aug 11 15:56 someother.so\n\n/home/andrewlock/my-files/docs:\ntotal 5896\n-rw-r--r-- 1 root root      10 Aug 11 15:57 README\n-rw-r--r-- 1 root root 6027280 Aug 11 15:57 someother.xml\n Creating a .tar.gz archive using tar A common command to create a tarball of these files called myarchive.tar.gz in the home directory would be: cd ~/my-files \ntar -czvf ~/myarchive.tar.gz .\n In this example we change the working directory to ~/my-files (if we were running from ~, tar would include my-files as a prefix to the path names in the tar directory). The flags passed to the tar command mean: -c Create a new archive -z Compress the resulting tar file with gzip -v List the files being processed (optional) -f <FILE> Output the archive to file <FILE> Note that if you omit the -z flag, tar creates a tar file which is not compressed. Creating a .tar.gz archive using .NET So how can we achieve this in .NET? .NET 7 added the TarFile class which includes static methods for creating a tar archive, so you might think you could do something like this: using System.Formats.Tar;\n\nstring sourceDir = \"./my-files\";\nstring outputFile = \"./myarchive.tar\"; // note this _doesn't_ create a valid .tar.gz file\n\nTarFile.CreateFromDirectory(sourceDir, outputFile, includeBaseDirectory: false);\n The problem is that the TarFile utility only handles the tar format, it doesn't include the gzip handling which is so ubiquitous when working with tar files. Luckily, it's not too hard to add support for that using GZipStream and handling the file and stream creation ourselves: using System.Formats.Tar;\nusing System.IO.Compression;\n\nstring sourceDir = \"./my-files\";\nstring outputFile = \"./myarchive.tar.gz\";\n\nusing FileStream fs = new(outputFile, FileMode.CreateNew, FileAccess.Write);\nusing GZipStream gz = new(fs, CompressionMode.Compress, leaveOpen: true);\n\nTarFile.CreateFromDirectory(sourceDir, gz, includeBaseDirectory: false);\n When you run this you'll get a similar gzipped tarball to the one produced by the tar command!  Note that the details matter here, so the resulting file may not be the same as the one produced by tar. I discuss more about that at the end of the post.  The includeBaseDirectory argument specifies whether you want the paths in the tarball to include initial base segments relative to the current working directory. If it was set to true in the above example, the paths would be prefixed with my-files/. So we can create .tar.gz files using .NET, now lets looks at how to extract them. Extracting a .tar.gz archive As I mentioned previously, one of the features of tar files is supporting permissions, hard/symbolic links, owners etc. That inevitably means there are a lot of options available to you when you extract an archive, based on what you want to preserve and what you want to ignore for example. For the purposes of this section, I'm only looking at very simple examples. Extracting a .tar.gz archive using tar To extract an archive into the current working directory with the tar utility, you would use a command something like this: tar -xzvf ~/my_archive.tar.gz\n where the options mean: -x Extract the archive -z Decompress the file with gzip before processing -v List the files being processed (optional) -f <FILE> Output the archive to file <FILE> If you want to output the files to a different directory you need to use an additional argument -C <DIR>, for example: tar -xzvf ~/my_archive.tar.gz -C /path/to/dir\n Now lets see how we can do this with .NET. Extracting a .tar.gz archive using .NET As before, the the TarFile class has a helpful ExtractToDirectory method, but once again it works only with tar files, not tar.gz files that are also compressed. But yet again, we can work around this using the GZipStream class, giving very similar code to before: using System.Formats.Tar;\n\nstring sourceTar = \"./myarchive.tar.gz\";\nstring extractTo = \"/path/to/dir\";\n\nusing FileStream fs = new(sourceTar, FileMode.Open, FileAccess.Read);\nusing GZipStream gz = new(fs, CompressionMode.Decompress, leaveOpen: true);\n\nTarFile.ExtractToDirectory(gz, extractTo, overwriteFiles: false);\n The only option available in the .NET code here is overwriteFiles; if a file exists during extraction and overwriteFiles is not true, this throws an IOException. The .NET implementation of extraction generally performs similarly to the tar utility, but there are some differences such as extracting absolute paths and preserving ownership which I'll discuss later. Extracting a single file from a .tar.gz archive Sometimes you only want to extract a single file from an archive instead of extracting the whole archive. That's particularly important when you have very large archives that would be difficult or impossible to fully extract. Extracting a single file from a .tar.gz archive using tar To extract a single file from an archive using tar, you can just add the path to the file at the end of the command. The following command extracts the file with the path ./bin/someother.so inside the archive and writes it to the current directory: tar -xzvf ~/my_archive.tar.gz ./bin/someother.so\n The options for this are the same as described in the full extraction, so I won't repeat them here. Extracting a single file from a .tar.gz archive using .NET Unfortunately, we don't have any more high-level helpers for .NET to handle this requirement, so we're going to fallback to using the slightly lower APIs of TarReader and TarEntry. In the following code we open an existing .tar.gz file as a FileStream and decompress it using GZipStream, as we have in the previous examples. We then pass this stream to an instance of TarReader and iterate through each TarEntry it finds. When we find an entry with the correct name, we extract the file and exit. string sourceTar = \"./my_archive.tar.gz\";\nstring pathInTar = \"./bin/someother.so\";\nstring destination = \"./extractedFile.so\";\n\n// Open the source tar file, decompress, and pass stream to TarReader\nusing FileStream fs = new(sourceTar, FileMode.Open, FileAccess.Read);\nusing GZipStream gz = new(fs, CompressionMode.Decompress, leaveOpen: true);\nusing var reader = new TarReader(gz, leaveOpen: true);\n\n// Loop through all the entries in the tar\nwhile (reader.GetNextEntry() is TarEntry entry)\n{\n    // If the entry matches the required path, extract the file\n    if (entry.Name == pathInTar)\n    {\n        Console.WriteLine($\"Found '{pathInTar}', extracting to '{destination}\");\n        entry.ExtractToFile(destination, overwrite: false);\n        return; // all done\n    }\n}\n\n// If we get here, we didn't find the file\n The ExtractToFile helper can extract both files and directories, but it won't extract symbolic links or hard links; those are only extracted if you extract the whole archive. Listing all the files in a .tar.gz without extraction Sometimes you don't actually need to extract anything from the file, you just want to look at the files contained inside. This section shows how to do that both with tar and using .NET. Listing all the files in a .tar.gz using tar To list all the files in an archive using tar, you can use the following: tar -tzvf ~/myarchive.tar.gz\n Most of these options -t List the contents of an archive -z Decompress the file with gzip before processing -v List the files verbosely (optional) -f <FILE> Output the archive to file <FILE> The -v option is not required, but adding it outputs additional information about each entry, similar to ls -l: drwxr-xr-x root/root         0 2024-08-11 16:02 ./\nlrwxrwxrwx root/root         0 2024-08-11 16:01 ./myapp.so -> ./bin/myapp.so\ndrwxr-xr-x root/root         0 2024-08-11 15:57 ./docs/\n-rw-r--r-- root/root        10 2024-08-11 15:57 ./docs/README\n-rw-r--r-- root/root   6027280 2024-08-11 15:57 ./docs/someother.xml\n-rw-r--r-- root/root   1443232 2024-08-11 15:56 ./someother.so\ndrwxr-xr-x root/root         0 2024-08-11 16:00 ./bin/\n-rw-r--r-- root/root   2399608 2024-08-11 15:55 ./bin/myapp.so\nhrw-r--r-- root/root         0 2024-08-11 15:56 ./bin/someother.so link to ./someother.so\n You can read the full spec for ls -l here but in summary, this shows: The type of entry (d for directory, - for file, l for symbolic link, h for hard link) The permissions for the entry The owner The size of the entry (in bytes) The modification time The path (and link location for symbolic and hard links) Listing all the files in a .tar.gz using .NET As you might expect, there's no built-in method helper for printing this information with .NET. Writing one is a little annoying, but not very difficult; all the information contained in the tar entry is exposed on TarEntry. The following code mostly emulates the display format of tar's -tzvf format shown above: using System.Formats.Tar;\nusing System.Globalization;\nusing System.IO.Compression;\n\nstring sourceTar = \"./myarchive.tar.gz\"\n\n// read the tar and loop through the entries\nusing FileStream fs = new(sourceTar, FileMode.Open, FileAccess.Read);\nusing GZipStream gz = new(fs, CompressionMode.Decompress, leaveOpen: true);\nusing var reader = new TarReader(gz, leaveOpen: true);\n\nwhile (reader.GetNextEntry() is TarEntry entry)\n{\n    // Get the file descriptor\n    char type = entry.EntryType switch\n    {\n        TarEntryType.Directory => 'd',\n        TarEntryType.HardLink => 'h',\n        TarEntryType.SymbolicLink => 'l',\n        _ => '-',\n    };\n\n    // Construct the permissions e.g. rwxr-xr-x\n    // Moved to a separate function just because it's a bit verbose\n    string permissions = GetPermissions(entry);\n\n    // Display the owner info. 0 is special (root) but .NET doesn't\n    // expose the mappings for these IDs natively, so ignoring for now \n    string ownerUser = entry.Uid == 0 ? \"root\" : entry.Uid.ToString(CultureInfo.InvariantCulture);\n    string ownerGroup = entry.Gid == 0 ? \"root\" : entry.Gid.ToString(CultureInfo.InvariantCulture);\n\n    // The length of the data and the modification date in bytes\n    long size = entry.Length;\n    DateTimeOffset date = entry.ModificationTime.UtcDateTime;\n\n    // Match the display format used by tar -tzvf \n    string path = entry.EntryType switch\n    {\n        TarEntryType.HardLink => $\"{entry.Name} link to {entry.LinkName}\",\n        TarEntryType.SymbolicLink => $\"{entry.Name} -> {entry.LinkName}\",\n        _ => entry.Name,\n    };\n\n    // Write the entry!\n    Console.WriteLine($\"{type}{permissions} {ownerUser}/{ownerGroup} {size,9} {date:yyyy-MM-dd hh:mm} {path}\");\n}\n\n// Construct the permissions\nstatic string GetPermissions(TarEntry entry)\n{\n    var userRead = entry.Mode.HasFlag(UnixFileMode.UserRead) ? 'r' : '-';\n    var userWrite = entry.Mode.HasFlag(UnixFileMode.UserWrite) ? 'w' : '-';\n    var userExecute = entry.Mode.HasFlag(UnixFileMode.UserExecute) ? 'x' : '-';\n    var groupRead = entry.Mode.HasFlag(UnixFileMode.GroupRead) ? 'r' : '-';\n    var groupWrite = entry.Mode.HasFlag(UnixFileMode.GroupWrite) ? 'w' : '-';\n    var groupExecute = entry.Mode.HasFlag(UnixFileMode.GroupExecute) ? 'x' : '-';\n    var otherRead = entry.Mode.HasFlag(UnixFileMode.OtherRead) ? 'r' : '-';\n    var otherWrite = entry.Mode.HasFlag(UnixFileMode.OtherWrite) ? 'w' : '-';\n    var otherExecute = entry.Mode.HasFlag(UnixFileMode.OtherExecute) ? 'x' : '-';\n    \n    return $\"{userRead}{userWrite}{userExecute}{groupRead}{groupWrite}{groupExecute}{otherRead}{otherWrite}{otherExecute}\";\n}\n When you run the above, you get pretty much the same output as tar -tzvf: drwxr-xr-x root/root         0 2024-08-11 15:02 ./\nlrwxrwxrwx root/root         0 2024-08-11 15:01 ./myapp.so -> ./bin/myapp.so\ndrwxr-xr-x root/root         0 2024-08-11 14:57 ./docs/\n-rw-r--r-- root/root        10 2024-08-11 14:57 ./docs/README\n-rw-r--r-- root/root   6027280 2024-08-11 14:57 ./docs/someother.xml\n-rw-r--r-- root/root   1443232 2024-08-11 14:56 ./someother.so\ndrwxr-xr-x root/root         0 2024-08-11 15:00 ./bin/\n-rw-r--r-- root/root   2399608 2024-08-11 14:55 ./bin/myapp.so\nhrw-r--r-- root/root         0 2024-08-11 14:56 ./bin/someother.so link to ./someother.so\n Pretty neat 🙂 There's just a couple of things to note here: The owners are stored in the .tar archive as IDs of the current user and group. root is a well known value (0) so we can decode that one easily, but you can't easily get the names of the other users from .NET (you need to invoke id or read the /etc/passwd file for example). The output of tar -tzvf displays modification time in local time, whereas I used UTC because, you know, why not 😄 That covers the main operations I want to talk about in this post. Caveats, missing features, and bugs In the final section of this post I describe some of the limitations and differences from tar that I've run into. .NET can't create hardlinks in .tar archives One of the biggest problems I ran into (which ended up being a blocker for me to use it) was that .NET currently can't create hardlinks in tar archives, unlike the tar utility. Hardlinks in Linux are relatively simple: a hard link is the link between the filename and the actual data of the file. Every file you create starts with one hardlink, but you can create additional hard links, so multiple filenames point to the same underlying data.  The other type of link is a symbolic link. The advantage of hard links is that they mostly appear like completely normal files to applications, whereas applications need to specifically handle symbolic links.  I wanted to use hardlinks to de-duplicate files inside a tar file. The tar utility (and archive format) both handle this perfectly well, preserving the hard link, but .NET currently does not preserve the link when creating an archive. Any hardlinks will be duplicated as additional data in the resulting .tar file, increasing the size of the archive and the size of the expanded data after extraction. You can see this in practice comparing an archive created using tar directly compared to .NET when the directory contains a hard link: # For the `tar` utility 👇\n$ tar -vtzf ./myarchive.tar.gz\ndrwxr-xr-x root/root         0 2024-08-11 16:02 ./\n-rw-r--r-- root/root   1443232 2024-08-11 15:56 ./someother.so\ndrwxr-xr-x root/root         0 2024-08-11 16:00 ./bin/\nhrw-r--r-- root/root         0 2024-08-11 15:56 ./bin/someother.so link to ./someother.so\n👆# Note the 'h'\n\n# For the .NET archive 👇\n$ tar -vtzf ./myarchive.tar.gz\n-rw-r--r-- root/root   1443232 2024-08-11 15:56 someother.so\ndrwxr-xr-x root/root         0 2024-08-11 16:00 bin/\n-rw-r--r-- root/root   1443232 2024-08-11 15:56 bin/someother.so\n👆# Normal file, not a hardlink\n  Note that .NET will preserve any hardlinks in the .tar archive when expanding an archive. It just can't currently create those hardlinks in the .tar archive in the first place.  There's already a two year old issue about the behaviour, but it's not getting much love by the looks of it. Hopefully it does soon 🤞 .NET can't control ownership during extraction The tar utility has a huge number of options and flags, but one I often use is --same-owner (implicitly, by extracting using sudo) when I want to make sure that files marked as root in the archive remain that way after extraction. Unfortunately there's no way to do this currently in .NET. You might be able to hack around it yourself by \"fixing\" the permissions manually, but it really feels like this should just be an explicit built-in option. Speaking of which, there's an old issue about adding additional options to the implementation, and controlling the owner/group is one of the explicit missing features mentioned. .NET can't handle absolute paths In general, it's not recommended to use absolute paths in tar files, but you can if you want to. The tar utility automatically converts any absolute paths to relative paths, but also provides an option to extract to the \"real\" path using --absolute-names.  You should be very careful extracting with --absolute-names as expanding the tar file could overwrite practically anywhere on your system.  Unfortunately .NET flat out refuses to expand a tar that has absolute paths. Instead it throws an IOException: Unhandled exception. System.IO.IOException: Extracting the Tar entry '/bin/busybox' would have resulted in a link target outside the specified destination directory: '/tmp/extracted-alpine'\n There's an issue raised about this one too. In general it feels like what's currently available built in to .NET should be good enough for most simple cases, but unfortunately you're likely to run up against the edges once you break outside the 80% common cases. Summary In this post I described how to perform some of common operations on .tar.gz files using the built-in .NET support. I show how to compress a directory into a .tar.gz file, how to expand a .tar.gz file into a directory, how to extract a single file from the directory, and how to list the contents of the directory without extracting the files. Finally I discuss some of the limitations in the current .NET implementations."
  },
  {
    "itemId": "https://andrewlock.net/using-azure-storage-queues-with-azure-functions-and-queuetrigger/",
    "raw": "<img src=\"https://andrewlock.net/content/images/2024/azure_storage_queue_banner.webp\" /><p>In this post I discuss the differences between the Azure Storage Queue message queue service and how it compares to Azure Service Bus in terms of functionality. After comparing the services, I describe when you might want to choose the simpler Storage Queue.</p> <p>In the second half of the post I show how you can read messages from an Azure Storage Queue using Azure Functions and the <code>[QueueTrigger]</code> queue extension. I describe the various types you can bind to, why I favour <code>QueueMessage</code>, and how to configure a connection string. Finally I describe how the Functions app processes your messages, and how you can customize that behaviour.</p> <p>Before we get to the Azure Functions, we'll start by looking at Azure Storage Queue: what is it, how does it compare to Azure Service Bus, and when should you use it?</p> <h2 id=\"azure-storage-queue-vs-azure-service-bus\" class=\"heading-with-anchor\"><a href=\"#azure-storage-queue-vs-azure-service-bus\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Azure Storage Queue vs. Azure Service Bus</a></h2> <p><a href=\"https://learn.microsoft.com/en-us/azure/storage/queues/storage-queues-introduction\">Azure Storage Queue</a> is an Azure service for storing large number of messages which can then be retrieved and processed by HTTP/HTTPS and processed asynchronously. Azure Storage Queue is focused on storing <em>relatively</em> small messages (a maximum of 64KB) but <em>millions</em> of them (up to 500TB!). You can think of this as a simple queue where senders can write messages, and receivers can compete to pull messages off the queue for processing.</p> <p><img src=\"/content/images/2024/azure_storage_queue.svg\" alt=\"Diagram of Azure Storage Queue\"></p> <p>The main \"competing\" service in Azure that performs a similar role is <a href=\"https://learn.microsoft.com/en-us/azure/service-bus-messaging/service-bus-messaging-overview\">Azure Service Bus</a>, which is an enterprise message broker with message queues (for point-to-point communication, like Azure Storage Queues) and publish-subscribe (pub-sub) topics (for multiple subscribers). The following shows how the pub-sub behaviour works, where each subscriber can see and process all the messages that are sent to a topic:</p> <p><img src=\"/content/images/2024/azure_service_bus.svg\" alt=\"Diagram of Azure Service Bus with topics and subscriptions\"></p> <p>Azure Service Bus also has features such as automatic dead-lettering, duplicate detection, and strict First-In-First-Out (FIFO) ordering guarantees.</p> <blockquote> <p>One of the bug struggles whenever you have a green-field application is deciding which of the many similar services to choose. For example, Azure has <em>many</em> different messaging services—Storage Queues, Service Bus, Event Grid, Event Hubs, the list goes on! Thankfully the Azure documentation does include <a href=\"https://learn.microsoft.com/en-us/azure/service-bus-messaging/compare-messaging-services#comparison-of-services\">comparison pages</a> to help you understand the difference between the various options!</p> </blockquote> <p>Azure Storage Queue and Azure Service Bus are the main \"traditional\" message queue products in Azure, so it's worth taking some time to decide which is best for your application. The documentation <a href=\"https://learn.microsoft.com/en-us/azure/service-bus-messaging/service-bus-azure-and-service-bus-queues-compared-contrasted\">breaks down all the differences</a> between the two services, but that's a 3000 word document to read and try to understand 😅</p> <p>For me, I tried to just consider it from a high level. There are some obvious key differences between the two technologies:</p> <table><thead><tr><th style=\"text-align:left\"></th><th style=\"text-align:center\">Storage Queue</th><th style=\"text-align:center\">Service Bus</th></tr></thead><tbody><tr><td style=\"text-align:left\">Communication</td><td style=\"text-align:center\">HTTP/HTTPS</td><td style=\"text-align:center\"><a href=\"https://learn.microsoft.com/en-us/azure/service-bus-messaging/service-bus-amqp-overview\">AMPQ</a></td></tr><tr><td style=\"text-align:left\">Pub-Sub support</td><td style=\"text-align:center\">No</td><td style=\"text-align:center\">Yes (Topics/Subscriptions)</td></tr><tr><td style=\"text-align:left\">Ordering guarantees</td><td style=\"text-align:center\">No</td><td style=\"text-align:center\">Yes FIFO</td></tr><tr><td style=\"text-align:left\">Maximum queue size</td><td style=\"text-align:center\">500 TB</td><td style=\"text-align:center\">80GB</td></tr><tr><td style=\"text-align:left\">Atomic multi-message transactions</td><td style=\"text-align:center\">No</td><td style=\"text-align:center\">Yes</td></tr><tr><td style=\"text-align:left\">Duplicate detection</td><td style=\"text-align:center\">No</td><td style=\"text-align:center\">Yes</td></tr></tbody></table> <p>Even from this <em>massively</em> simplified comparison, you can tell that Azure Service Bus has <em>many</em> more capabilities than Azure Storage Queue. Atomic transactions (so you can mark a message as handled <em>and</em> send a new message atomically) and pub-sub support stand out to me; if you need those features from your queue, then the choice is obvious.</p> <p>However, if you <em>don't</em> need all those \"message broker\" features, then Azure Storage Queue <em>may</em> be a better option. One thing in Azure Storage Queue's favour is the pricing. For storage queue it's relatively simple (for Azure):</p> <ul><li>You pay for the storage you use (e.g. $0.0462 per GB per month)</li> <li>You pay for the number of API operations you make ($0.04 per million)</li></ul> <p>For Azure Service Bus, you have to opt in to <em>tiers</em> depending on which features you want, and then how you're billed <em>varies</em> per tier. The \"basic\" tier is the most similar to Azure Storage Queue (in that it doesn't support transactions/topics etc), but even that likely works out more expensive generally ($0.05 per million operations). So in that case, you might be better off just using Storage Queues for their simplicity.</p> <h2 id=\"an-obvious-storage-queue-use-case-processing-email-status-messages\" class=\"heading-with-anchor\"><a href=\"#an-obvious-storage-queue-use-case-processing-email-status-messages\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">An obvious Storage Queue use case: processing email status messages</a></h2> <p>I had a use case that involved handling and processing email status notifications. The result of an \"email send\" operation would be added to a queue, and I needed my application to process the message and act accordingly (e.g. mark a subscriber as \"unsubscribed\" if the email bounced, was marked as spam, or couldn't be sent).</p> <p>This example seemed like a perfect use case for Azure Storage Queue:</p> <ul><li>The order that the messages are processed doesn't matter.</li> <li>Each message only needs to be processed by a single consumer, so no need for pub-sub features.</li> <li>No specific requirements around TTL or other advanced features.</li></ul> <p>For this use case, the basic features of the Azure Storage Queue are perfectly adequate. Additionally, creating and managing a storage queue is significantly easier and cheaper than Azure Service Bus, so the choice is obvious.</p> <h2 id=\"reading-messages-from-azure-storage-queue-with-azure-functions\" class=\"heading-with-anchor\"><a href=\"#reading-messages-from-azure-storage-queue-with-azure-functions\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Reading messages from Azure Storage Queue with Azure Functions</a></h2> <p>I've spent a lot of time talking about Azure Storage Queues in general. In this section we'll look at some code for reading messages from a queue using Azure Functions' <a href=\"https://learn.microsoft.com/en-us/azure/azure-functions/functions-bindings-storage-queue-trigger?tabs=python-v2%2Cisolated-process%2Cnodejs-v4%2Cextensionv5&amp;pivots=programming-language-csharp\">storage queue trigger</a>.</p> <blockquote> <p>All of the examples I show in this post use the <a href=\"https://learn.microsoft.com/en-us/azure/azure-functions/dotnet-isolated-process-guide\">isolated-process model</a> instead of the <a href=\"https://learn.microsoft.com/en-us/azure/azure-functions/functions-dotnet-class-library\">in-process model</a>, as <a href=\"https://aka.ms/azure-functions-retirements/in-process-model\">support for the in-process model ends in 2026</a>.</p> </blockquote> <p>As with most Azure Functions trigger types, you can register a trigger by creating a function, referencing the required NuGet packages, adding a specific attribute to one of your function parameters, and configuring your connection string.</p> <p>I walk through each of those steps in the following section. I don't discuss creating the Azure Functions project, so if you don't yet have an app, follow the instructions to create one in the documentation <a href=\"https://learn.microsoft.com/en-us/azure/azure-functions/functions-create-your-first-function-visual-studio\">using Visual Studio</a>, <a href=\"https://learn.microsoft.com/en-us/azure/azure-functions/create-first-function-vs-code-csharp\">Visual Studio Code</a>, or the<a href=\"https://learn.microsoft.com/en-us/azure/azure-functions/create-first-function-cli-csharp?tabs=windows%2Cazure-cli\"> Azure Functions Core Tools command line</a>.</p> <h3 id=\"1-reference-the-required-nuget-packages\" class=\"heading-with-anchor\"><a href=\"#1-reference-the-required-nuget-packages\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">1. Reference the required NuGet packages</a></h3> <p>To access the queue storage trigger attribute, add a reference to the <em>Microsoft.Azure.Functions.Worker.Extensions.Storage.Queues</em> package, for example using:</p> <pre class=\"language-bash\"><code class=\"language-bash\">dotnet <span class=\"token function\">add</span> package Microsoft.Azure.Functions.Worker.Extensions.Storage.Queues\n</code></pre> <p>This adds the package to your <em>.csproj</em> project file, which should look something like this:</p> <pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Project</span> <span class=\"token attr-name\">Sdk</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Microsoft.NET.Sdk<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>PropertyGroup</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>OutputType</span><span class=\"token punctuation\">&gt;</span></span>Exe<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>OutputType</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>TargetFramework</span><span class=\"token punctuation\">&gt;</span></span>net8.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>TargetFramework</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>AzureFunctionsVersion</span><span class=\"token punctuation\">&gt;</span></span>v4<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>AzureFunctionsVersion</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Nullable</span><span class=\"token punctuation\">&gt;</span></span>enable<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Nullable</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>LangVersion</span><span class=\"token punctuation\">&gt;</span></span>latest<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>LangVersion</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>PropertyGroup</span><span class=\"token punctuation\">&gt;</span></span>\n\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ItemGroup</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token comment\">&lt;!-- Required packages for the isolated-process functions --&gt;</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>PackageReference</span> <span class=\"token attr-name\">Include</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Microsoft.Azure.Functions.Worker<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">Version</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>1.22.0<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>PackageReference</span> <span class=\"token attr-name\">Include</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Microsoft.Azure.Functions.Worker.Sdk<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">Version</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>1.17.2<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n    <span class=\"token comment\">&lt;!-- 👇Add this to enable storage queue triggers--&gt;</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>PackageReference</span> <span class=\"token attr-name\">Include</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Microsoft.Azure.Functions.Worker.Extensions.Storage.Queues<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">Version</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>5.4.0<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ItemGroup</span><span class=\"token punctuation\">&gt;</span></span>\n\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ItemGroup</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>None</span> <span class=\"token attr-name\">Update</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>host.json<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>CopyToOutputDirectory</span><span class=\"token punctuation\">&gt;</span></span>PreserveNewest<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>CopyToOutputDirectory</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>None</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>None</span> <span class=\"token attr-name\">Update</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>local.settings.json<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>CopyToOutputDirectory</span><span class=\"token punctuation\">&gt;</span></span>PreserveNewest<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>CopyToOutputDirectory</span><span class=\"token punctuation\">&gt;</span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>CopyToPublishDirectory</span><span class=\"token punctuation\">&gt;</span></span>Never<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>CopyToPublishDirectory</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>None</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ItemGroup</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Project</span><span class=\"token punctuation\">&gt;</span></span>\n\n</code></pre> <p>With this package added, the <code>QueueTrigger</code> attribute becomes available.</p> <h3 id=\"2-create-a-function-and-use-the-queuetrigger-attribute\" class=\"heading-with-anchor\"><a href=\"#2-create-a-function-and-use-the-queuetrigger-attribute\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">2. Create a function and use the <code>[QueueTrigger]</code> attribute</a></h3> <p>Create an Azure Function, and include a parameter with the <code>[QueueTrigger]</code> attribute. The type of that parameter can be one of several different values, and will give you various different aspects of the message:</p> <ul><li><code>string</code>. The message content as a string. Use when the message is simple text.</li> <li><code>byte[]</code>. The raw bytes of the message.</li> <li><code>BinaryData</code>. The raw bytes of the message, wrapped in a helper type.</li> <li><code>QueueMessage</code>. The \"full\" message from the queue, including metadata about the message.</li> <li>Any serializable POCO object. When a queue message contains JSON data, Functions tries to deserialize the JSON data into a plain-old CLR object (POCO) type.</li></ul> <p>Depending on what the message contains and what you want to <em>do</em> with it, the final two options make the most sense to me. I chose to use the high level <code>QueueMessage</code>, as it includes all the additional metadata for the queue message, but more importantly, it gives more control over the deserialization.</p> <blockquote> <p>I found this particularly important, as I had multiple messages being sent to the same queue, so I couldn't use a single POCO object and rely on the framework to deserialize it for me.</p> </blockquote> <p>The following shows an example signature of an Azure Function that receives <code>QueueMessage</code> instances, by decorating the <code>message</code> parameter with the <code>[QueueTrigger]</code> attribute.</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">Function</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token string\">\"handle-email-report\"</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span>  <span class=\"token comment\">// 👈 The name of the function</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">async</span> <span class=\"token return-type class-name\">Task</span> <span class=\"token function\">HandleEmailReport</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">QueueTrigger</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token string\">\"my-queue\"</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span> <span class=\"token class-name\">QueueMessage</span> message<span class=\"token punctuation\">)</span>\n                <span class=\"token comment\">//  The name of the queue to read ☝</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>In the above example I create an Azure Function called <code>handle-email-report</code>, which reads from the Azure storage queue called <code>my-queue</code> using the \"default\" Azure connection.</p> <h3 id=\"3-configure-the-connection-string\" class=\"heading-with-anchor\"><a href=\"#3-configure-the-connection-string\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">3. Configure the connection string</a></h3> <p>If you use the <code>[QueueTrigger]</code> as I have above, the Functions app tries to read the environment configuration value called <code>AzureWebJobsStorage</code>. Locally, that means it uses the value stored in local.settings.json at <code>Values.AzureWebJobsStorage</code>. For example, for local development you might have this:</p> <pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"IsEncrypted\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"Values\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"AzureWebJobsStorage\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"UseDevelopmentStorage=true\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>If you want to use a different connection, you can specify that using the <code>Connection</code> property of the [QueueTrigger]` attribute. For example, if you use this:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">Function</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token string\">\"handle-email-report\"</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">async</span> <span class=\"token return-type class-name\">Task</span> <span class=\"token function\">HandleEmailReport</span><span class=\"token punctuation\">(</span>\n    <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">QueueTrigger</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token string\">\"my-queue\"</span><span class=\"token punctuation\">,</span> Connection <span class=\"token operator\">=</span> <span class=\"token string\">\"MyConnection\"</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span> <span class=\"token class-name\">QueueMessage</span> message<span class=\"token punctuation\">)</span>\n                              <span class=\"token comment\">// ☝ Specify alternative connection</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>The functions app will look for a configuration called <code>MyConnection</code> (and <em>also</em> <code>AzureWebJobsMyConnection</code>; I'm not sure what the order of preference is there). For example</p> <pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"IsEncrypted\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"Values\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"AzureWebJobsStorage\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"UseDevelopmentStorage=true\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"MyConnection\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"my-connection-string\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>In recent versions of the Storage Queue extensions NuGet package, you can alternatively use a Microsoft Entra ID instead of storing a connection string in the configuration. Unfortunately, <a href=\"https://learn.microsoft.com/en-us/azure/azure-functions/functions-bindings-storage-queue-trigger?tabs=python-v2%2Cisolated-process%2Cnodejs-v4%2Cextensionv5&amp;pivots=programming-language-csharp#identity-based-connections\">I've read the documentation about that several times</a> and I still have no idea what it's talking about, so I'll leave someone else to explain that 😅</p> <blockquote> <p>Clearly <a href=\"https://learn.microsoft.com/en-us/azure/role-based-access-control/role-assignments-steps\">using RBAC</a> is the \"right\" thing to do rather than storing arbitrary secrets in each of your apps. But my gosh it's <em>so</em> much harder to get working than dropping a connection string into a config variable 🙈</p> </blockquote> <p>Assuming you have configured your connection correctly, your Azure Function should start receiving messages!</p> <h2 id=\"how-does-the-function-process-your-messages-\" class=\"heading-with-anchor\"><a href=\"#how-does-the-function-process-your-messages-\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">How does the function process your messages?</a></h2> <p>When it starts up, your Functions app starts polling for and receiving messages, as described <a href=\"https://learn.microsoft.com/en-us/azure/azure-functions/functions-bindings-storage-queue-trigger#polling-algorithm\">in the polling section</a> of the documentation. The Azure Function checks for messages using an exponential back-off algorithm, ranging from 100ms up to 1 minute.</p> <p>If the Functions app finds multiple messages in the queue, it retrieves a batch of 16 messages, and runs multiple instances of your function concurrently to process them. Once 8 of the functions have completed, the Functions app polls and tries to receive another batch of 16, so a single instance of the app can process up to 24 (16 + 8) messages concurrently.</p> <p>The Functions app uses a \"peek-lock\" pattern to retrieve messages. This automatically marks messages as \"invisible\" when they're retrieved, so they can't be seen by other queue consumers. Then, one of 3 things happens:</p> <ul><li>The function completes successfully. In this case, the message is deleted from the queue.</li> <li>The function execution fails (throws an exception). The message is not deleted, and its visibility is updated to make it visible to consumers again. You can optionally add a delay to this, so that failed messages remain invisible for 30s, for example.</li> <li>The Functions app crashes. The message cannot be updated (because your app crashed!) but the message automatically becomes visible again after 10 minutes. This behaviour is built into Azure Storage Queues and can't be changed by your app.</li></ul> <p>So if the function completes successfully, the message is deemed to have been \"handled\", and is deleted from the queue. If your function throws an exception, the message is made visible in the queue again (with an optional delay). The Functions app will retry processing the message a further 4 times (i.e. 5 attempts in total).</p> <p><a href=\"https://learn.microsoft.com/en-us/azure/azure-functions/functions-bindings-storage-queue-trigger?tabs=python-v2%2Cisolated-process%2Cnodejs-v4%2Cextensionv5&amp;pivots=programming-language-csharp#poison-messages\">If a message fails processing 5 times it's moved to a \"poison messages\" queue</a>, called <code>&lt;queuename&gt;-poison</code>. You can process the messages added to this queue as you would any other queue. You might want to simply log and discard them for example, or you might want to allow moving them back to the original queue after you've fixed bugs in the original function.</p> <h2 id=\"changing-the-configuration-of-the-storage-queue-trigger-with-host-json\" class=\"heading-with-anchor\"><a href=\"#changing-the-configuration-of-the-storage-queue-trigger-with-host-json\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Changing the configuration of the Storage Queue trigger with host.json</a></h2> <p>Some of the behaviour of the Functions app can be customised by changing properties in your app's <em>host.json</em> file, as described <a href=\"https://learn.microsoft.com/en-us/azure/azure-functions/functions-bindings-storage-queue?tabs=isolated-process%2Cextensionv5%2Cextensionv3&amp;pivots=programming-language-csharp#host-json\">in the documentation</a>. Not everything can be customised, for example the 10 minute visibility timeout when your app crashes is performed by the storage queue itself, so you can't customise it for your app.</p> <p>The following shows a host.json file that customizes the storage queue trigger. The JSON below shows the default values:</p> <pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"version\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"2.0\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"extensions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"queues\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"maxPollingInterval\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"00:01:00\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"visibilityTimeout\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"00:00:00\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"maxDequeueCount\"</span><span class=\"token operator\">:</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"batchSize\"</span><span class=\"token operator\">:</span> <span class=\"token number\">16</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"newBatchThreshold\"</span><span class=\"token operator\">:</span> <span class=\"token number\">8</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>These values control various aspects of the <code>[QueueTrigger]</code> behaviour:</p> <ul><li><code>maxPollingInterval</code>—The maximum polling interval the Functions app will use. The minimum interval is always 100ms (and <code>maxPollingInterval</code> cannot be shorter than this), but there's no maximum interval.</li> <li><code>visibilityTimeout</code>—Controls how long a message should remain invisible after a failed execution.</li> <li><code>maxDequeueCount</code>—The maximum number of times to try to handle a message before it should be placed on the poison queue.</li> <li><code>batchSize</code>—The maximum number of messages the Functions app should try to retrieve and processes in parallel. The maximum size is 32.</li> <li><code>newBatchThreshold</code>—When the number of remaining messages being processed from a batch reaches this value, a new batch is retrieved.</li></ul> <p>These are all the settings you can change to control how you consume Storage Queue messages, but <a href=\"https://learn.microsoft.com/en-us/azure/azure-functions/functions-host-json\">there are many other settings</a> you can change to control overall execution of your Azure Functions app.</p> <h2 id=\"summary\" class=\"heading-with-anchor\"><a href=\"#summary\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Summary</a></h2> <p>In this post I discussed the differences between the Azure Storage Queue message queue service and how it compares to Azure Service Bus in terms of functionality. After comparing the services, I described an example of processing email bounce notifications as a good candidate for choosing the simpler Storage Queue service.</p> <p>In the second half of the post I showed how to read messages from an Azure Storage Queue using Azure Functions and the <code>[QueueTrigger]</code> queue extension. Finally I described how the Functions app processes your messages, and how you can customize that behaviour.</p> ",
    "sanitized": "In this post I discuss the differences between the Azure Storage Queue message queue service and how it compares to Azure Service Bus in terms of functionality. After comparing the services, I describe when you might want to choose the simpler Storage Queue. In the second half of the post I show how you can read messages from an Azure Storage Queue using Azure Functions and the [QueueTrigger] queue extension. I describe the various types you can bind to, why I favour QueueMessage, and how to configure a connection string. Finally I describe how the Functions app processes your messages, and how you can customize that behaviour. Before we get to the Azure Functions, we'll start by looking at Azure Storage Queue: what is it, how does it compare to Azure Service Bus, and when should you use it? Azure Storage Queue vs. Azure Service Bus Azure Storage Queue is an Azure service for storing large number of messages which can then be retrieved and processed by HTTP/HTTPS and processed asynchronously. Azure Storage Queue is focused on storing relatively small messages (a maximum of 64KB) but millions of them (up to 500TB!). You can think of this as a simple queue where senders can write messages, and receivers can compete to pull messages off the queue for processing.  The main \"competing\" service in Azure that performs a similar role is Azure Service Bus, which is an enterprise message broker with message queues (for point-to-point communication, like Azure Storage Queues) and publish-subscribe (pub-sub) topics (for multiple subscribers). The following shows how the pub-sub behaviour works, where each subscriber can see and process all the messages that are sent to a topic:  Azure Service Bus also has features such as automatic dead-lettering, duplicate detection, and strict First-In-First-Out (FIFO) ordering guarantees.  One of the bug struggles whenever you have a green-field application is deciding which of the many similar services to choose. For example, Azure has many different messaging services—Storage Queues, Service Bus, Event Grid, Event Hubs, the list goes on! Thankfully the Azure documentation does include comparison pages to help you understand the difference between the various options!  Azure Storage Queue and Azure Service Bus are the main \"traditional\" message queue products in Azure, so it's worth taking some time to decide which is best for your application. The documentation breaks down all the differences between the two services, but that's a 3000 word document to read and try to understand 😅 For me, I tried to just consider it from a high level. There are some obvious key differences between the two technologies: Storage QueueService BusCommunicationHTTP/HTTPSAMPQPub-Sub supportNoYes (Topics/Subscriptions)Ordering guaranteesNoYes FIFOMaximum queue size500 TB80GBAtomic multi-message transactionsNoYesDuplicate detectionNoYes Even from this massively simplified comparison, you can tell that Azure Service Bus has many more capabilities than Azure Storage Queue. Atomic transactions (so you can mark a message as handled and send a new message atomically) and pub-sub support stand out to me; if you need those features from your queue, then the choice is obvious. However, if you don't need all those \"message broker\" features, then Azure Storage Queue may be a better option. One thing in Azure Storage Queue's favour is the pricing. For storage queue it's relatively simple (for Azure): You pay for the storage you use (e.g. $0.0462 per GB per month) You pay for the number of API operations you make ($0.04 per million) For Azure Service Bus, you have to opt in to tiers depending on which features you want, and then how you're billed varies per tier. The \"basic\" tier is the most similar to Azure Storage Queue (in that it doesn't support transactions/topics etc), but even that likely works out more expensive generally ($0.05 per million operations). So in that case, you might be better off just using Storage Queues for their simplicity. An obvious Storage Queue use case: processing email status messages I had a use case that involved handling and processing email status notifications. The result of an \"email send\" operation would be added to a queue, and I needed my application to process the message and act accordingly (e.g. mark a subscriber as \"unsubscribed\" if the email bounced, was marked as spam, or couldn't be sent). This example seemed like a perfect use case for Azure Storage Queue: The order that the messages are processed doesn't matter. Each message only needs to be processed by a single consumer, so no need for pub-sub features. No specific requirements around TTL or other advanced features. For this use case, the basic features of the Azure Storage Queue are perfectly adequate. Additionally, creating and managing a storage queue is significantly easier and cheaper than Azure Service Bus, so the choice is obvious. Reading messages from Azure Storage Queue with Azure Functions I've spent a lot of time talking about Azure Storage Queues in general. In this section we'll look at some code for reading messages from a queue using Azure Functions' storage queue trigger.  All of the examples I show in this post use the isolated-process model instead of the in-process model, as support for the in-process model ends in 2026.  As with most Azure Functions trigger types, you can register a trigger by creating a function, referencing the required NuGet packages, adding a specific attribute to one of your function parameters, and configuring your connection string. I walk through each of those steps in the following section. I don't discuss creating the Azure Functions project, so if you don't yet have an app, follow the instructions to create one in the documentation using Visual Studio, Visual Studio Code, or the Azure Functions Core Tools command line. 1. Reference the required NuGet packages To access the queue storage trigger attribute, add a reference to the Microsoft.Azure.Functions.Worker.Extensions.Storage.Queues package, for example using: dotnet add package Microsoft.Azure.Functions.Worker.Extensions.Storage.Queues\n This adds the package to your .csproj project file, which should look something like this: <Project Sdk=\"Microsoft.NET.Sdk\">\n  <PropertyGroup>\n    <OutputType>Exe</OutputType>\n    <TargetFramework>net8.0</TargetFramework>\n    <AzureFunctionsVersion>v4</AzureFunctionsVersion>\n    <Nullable>enable</Nullable>\n    <LangVersion>latest</LangVersion>\n  </PropertyGroup>\n\n  <ItemGroup>\n    <!-- Required packages for the isolated-process functions -->\n    <PackageReference Include=\"Microsoft.Azure.Functions.Worker\" Version=\"1.22.0\" />\n    <PackageReference Include=\"Microsoft.Azure.Functions.Worker.Sdk\" Version=\"1.17.2\" />\n    <!-- 👇Add this to enable storage queue triggers-->\n    <PackageReference Include=\"Microsoft.Azure.Functions.Worker.Extensions.Storage.Queues\" Version=\"5.4.0\" />\n  </ItemGroup>\n\n  <ItemGroup>\n    <None Update=\"host.json\">\n      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>\n    </None>\n    <None Update=\"local.settings.json\">\n      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>\n      <CopyToPublishDirectory>Never</CopyToPublishDirectory>\n    </None>\n  </ItemGroup>\n</Project>\n\n With this package added, the QueueTrigger attribute becomes available. 2. Create a function and use the [QueueTrigger] attribute Create an Azure Function, and include a parameter with the [QueueTrigger] attribute. The type of that parameter can be one of several different values, and will give you various different aspects of the message: string. The message content as a string. Use when the message is simple text. byte[]. The raw bytes of the message. BinaryData. The raw bytes of the message, wrapped in a helper type. QueueMessage. The \"full\" message from the queue, including metadata about the message. Any serializable POCO object. When a queue message contains JSON data, Functions tries to deserialize the JSON data into a plain-old CLR object (POCO) type. Depending on what the message contains and what you want to do with it, the final two options make the most sense to me. I chose to use the high level QueueMessage, as it includes all the additional metadata for the queue message, but more importantly, it gives more control over the deserialization.  I found this particularly important, as I had multiple messages being sent to the same queue, so I couldn't use a single POCO object and rely on the framework to deserialize it for me.  The following shows an example signature of an Azure Function that receives QueueMessage instances, by decorating the message parameter with the [QueueTrigger] attribute. [Function(\"handle-email-report\")]  // 👈 The name of the function\npublic async Task HandleEmailReport([QueueTrigger(\"my-queue\")] QueueMessage message)\n                //  The name of the queue to read ☝\n{\n    // ...\n}\n In the above example I create an Azure Function called handle-email-report, which reads from the Azure storage queue called my-queue using the \"default\" Azure connection. 3. Configure the connection string If you use the [QueueTrigger] as I have above, the Functions app tries to read the environment configuration value called AzureWebJobsStorage. Locally, that means it uses the value stored in local.settings.json at Values.AzureWebJobsStorage. For example, for local development you might have this: {\n  \"IsEncrypted\": false,\n  \"Values\": {\n    \"AzureWebJobsStorage\": \"UseDevelopmentStorage=true\"\n  }\n}\n If you want to use a different connection, you can specify that using the Connection property of the [QueueTrigger]` attribute. For example, if you use this: [Function(\"handle-email-report\")]\npublic async Task HandleEmailReport(\n    [QueueTrigger(\"my-queue\", Connection = \"MyConnection\")] QueueMessage message)\n                              // ☝ Specify alternative connection\n{\n    // ...\n}\n The functions app will look for a configuration called MyConnection (and also AzureWebJobsMyConnection; I'm not sure what the order of preference is there). For example {\n  \"IsEncrypted\": false,\n  \"Values\": {\n    \"AzureWebJobsStorage\": \"UseDevelopmentStorage=true\",\n    \"MyConnection\": \"my-connection-string\"\n  }\n}\n In recent versions of the Storage Queue extensions NuGet package, you can alternatively use a Microsoft Entra ID instead of storing a connection string in the configuration. Unfortunately, I've read the documentation about that several times and I still have no idea what it's talking about, so I'll leave someone else to explain that 😅  Clearly using RBAC is the \"right\" thing to do rather than storing arbitrary secrets in each of your apps. But my gosh it's so much harder to get working than dropping a connection string into a config variable 🙈  Assuming you have configured your connection correctly, your Azure Function should start receiving messages! How does the function process your messages? When it starts up, your Functions app starts polling for and receiving messages, as described in the polling section of the documentation. The Azure Function checks for messages using an exponential back-off algorithm, ranging from 100ms up to 1 minute. If the Functions app finds multiple messages in the queue, it retrieves a batch of 16 messages, and runs multiple instances of your function concurrently to process them. Once 8 of the functions have completed, the Functions app polls and tries to receive another batch of 16, so a single instance of the app can process up to 24 (16 + 8) messages concurrently. The Functions app uses a \"peek-lock\" pattern to retrieve messages. This automatically marks messages as \"invisible\" when they're retrieved, so they can't be seen by other queue consumers. Then, one of 3 things happens: The function completes successfully. In this case, the message is deleted from the queue. The function execution fails (throws an exception). The message is not deleted, and its visibility is updated to make it visible to consumers again. You can optionally add a delay to this, so that failed messages remain invisible for 30s, for example. The Functions app crashes. The message cannot be updated (because your app crashed!) but the message automatically becomes visible again after 10 minutes. This behaviour is built into Azure Storage Queues and can't be changed by your app. So if the function completes successfully, the message is deemed to have been \"handled\", and is deleted from the queue. If your function throws an exception, the message is made visible in the queue again (with an optional delay). The Functions app will retry processing the message a further 4 times (i.e. 5 attempts in total). If a message fails processing 5 times it's moved to a \"poison messages\" queue, called <queuename>-poison. You can process the messages added to this queue as you would any other queue. You might want to simply log and discard them for example, or you might want to allow moving them back to the original queue after you've fixed bugs in the original function. Changing the configuration of the Storage Queue trigger with host.json Some of the behaviour of the Functions app can be customised by changing properties in your app's host.json file, as described in the documentation. Not everything can be customised, for example the 10 minute visibility timeout when your app crashes is performed by the storage queue itself, so you can't customise it for your app. The following shows a host.json file that customizes the storage queue trigger. The JSON below shows the default values: {\n  \"version\": \"2.0\",\n  \"extensions\": {\n    \"queues\": {\n      \"maxPollingInterval\": \"00:01:00\",\n      \"visibilityTimeout\" : \"00:00:00\",\n      \"maxDequeueCount\": 5,\n      \"batchSize\": 16,\n      \"newBatchThreshold\": 8\n    }\n  }\n}\n These values control various aspects of the [QueueTrigger] behaviour: maxPollingInterval—The maximum polling interval the Functions app will use. The minimum interval is always 100ms (and maxPollingInterval cannot be shorter than this), but there's no maximum interval. visibilityTimeout—Controls how long a message should remain invisible after a failed execution. maxDequeueCount—The maximum number of times to try to handle a message before it should be placed on the poison queue. batchSize—The maximum number of messages the Functions app should try to retrieve and processes in parallel. The maximum size is 32. newBatchThreshold—When the number of remaining messages being processed from a batch reaches this value, a new batch is retrieved. These are all the settings you can change to control how you consume Storage Queue messages, but there are many other settings you can change to control overall execution of your Azure Functions app. Summary In this post I discussed the differences between the Azure Storage Queue message queue service and how it compares to Azure Service Bus in terms of functionality. After comparing the services, I described an example of processing email bounce notifications as a good candidate for choosing the simpler Storage Queue service. In the second half of the post I showed how to read messages from an Azure Storage Queue using Azure Functions and the [QueueTrigger] queue extension. Finally I described how the Functions app processes your messages, and how you can customize that behaviour."
  }
]
