[
  {
    "itemId": "https://andrewlock.net/converting-an-xna-game-to-monogame/",
    "raw": "<img src=\"https://andrewlock.net/content/images/2025/trash_banner.webp\" /><p>In this post I describe how I took a <a href=\"https://en.wikipedia.org/wiki/Microsoft_XNA\">Microsoft XNA Framework</a> 3.1 game, written over 15 years in 2009, and updated it to run using <a href=\"https://monogame.net/\">MonoGame</a>, on .NET 8, in just a few hours. This is a follow on from <a href=\"/creating-your-first-sample-game-with-monogame/\">my previous post</a> in which I took a brief look at the history of XNA and MonoGame and the getting started story. This post continues on where that post left off, starting from the MonoGame sample app to describe the steps I took to port my XNA game to MonoGame.</p> <h2 id=\"background-porting-a-game-from-xna-to-monogame\" class=\"heading-with-anchor\"><a href=\"#background-porting-a-game-from-xna-to-monogame\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Background: Porting a game from XNA to MonoGame</a></h2> <p>MonoGame was one of those technologies I had vaguely heard of, but never paid much attention to, and certainly didn't know any of the history or capabilities around it. It came to my attention a couple of weeks ago when James Montemagno and Frank Kruegar were talking about \"vibe coding a MonoGame game from scratch\" on an episode of <a href=\"https://www.mergeconflict.fm/457\">Merge Conflict</a>. When James mentioned that MonoGame was an implementation of XNA, it really piqued my interest.</p> <p>I was interested because back in 2009, when I was trying to decide whether to work on a PhD or get a job, I dabbled with the idea of getting into game development. I really didn't pursue the gaming side at all, but I worked on a small game as a way of trying it out, and sure enough I used the XNA framework! So I wondered: how easy would it be to port the game I wrote all those years ago to use MonoGame instead?</p> <p>As you'll see in this post, the answer is actually really quite easy. The main issues I ran into were due to the fact that the game I wrote targeted version 3.1 of the XNA framework (and .NET Framework 3.5!😮), whereas MonoGame is based on the 4.0 version of XNA.</p> <p>The game I wrote was a clone of \"Trash\", which was <a href=\"https://www.lemonamiga.com/games/details.php?id=2820\">a game I had for the Amiga 600</a> that I spent <em>hours</em> playing with my Dad when I was a kid:</p> <p><img src=\"/content/images/2025/trash.png\" alt=\"Screenshot of Trash\"></p> <p>Trash was itself a shameless clone of Nintendo's <a href=\"https://en.wikipedia.org/wiki/Dr._Mario\">Dr. Mario</a>, so when I was learning the ropes, it seemed like a good game to clone to get my bearings. The end result was definitely <em>not</em> polished (including crudely built models and sprites using a copy of <a href=\"https://en.wikipedia.org/wiki/Autodesk_3ds_Max\">3DS Max</a> of…questionable provenance), but it worked:</p> <p><img src=\"/content/images/2025/trash_02.webp\" alt=\"Screenshot of my Trash clone\"></p> <p>So that's the history of my Trash clone. I still had the files knocking around, and after I heard about MonoGame, I decided to give myself an evening to see if I could port the game to MonoGame. Not to actually <em>develop</em> the app or to do anything more with it; just to see if I <em>could</em> update it to MonoGame. I decided my general approach would be:</p> <ol><li>Get a basic MonoGame sample running locally.</li> <li>Replace the content of the MonoGame sample with my Trash source code.</li> <li>Fix any issues that arose.</li></ol> <p>I had no interest in distributing or improving the code. And I have to say, looking back at code I wrote 15 years ago was a horrifying experience 😂</p> <h2 id=\"creating-the-basic-monogame-sample\" class=\"heading-with-anchor\"><a href=\"#creating-the-basic-monogame-sample\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Creating the basic MonoGame sample</a></h2> <p>As in my previous post, I started with the \"MonoGame Cross-Platform Desktop Application\" sample application and used <a href=\"https://devblogs.microsoft.com/dotnet/introducing-slnx-support-dotnet-cli/\">the new slnx format</a> for the solution file.</p> <pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># Create the new sln file</span>\ndotnet new sln\n<span class=\"token comment\"># Convert the sln file to a slnx file</span>\ndotnet sln migrate\n<span class=\"token comment\"># Delete the original sln file</span>\n<span class=\"token function\">rm</span> *.sln\n</code></pre> <p>Next I created a \"MonoGame Cross-Platform Desktop Application\" using the <code>mgdesktopgl</code> template:</p> <pre class=\"language-powershell\"><code class=\"language-powershell\"><span class=\"token comment\"># Create the template in a \"Trash\" subfolder</span>\ndotnet new mgdesktopgl <span class=\"token operator\">--</span>output Trash\n<span class=\"token comment\"># Add the new project to the template</span>\ndotnet sln add <span class=\"token punctuation\">.</span><span class=\"token operator\">/</span>Trash/\n</code></pre> <p>If you run the app at this point, you'll get a Cornflower Blue \"game\":</p> <p><img src=\"/content/images/2025/monogame_00.png\" alt=\"The default MonoGame sample 'game'\"></p> <p>This serves as the starting point for porting Trash.</p> <h2 id=\"porting-an-existing-xna-game-to-monogame\" class=\"heading-with-anchor\"><a href=\"#porting-an-existing-xna-game-to-monogame\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Porting an existing XNA game to MonoGame</a></h2> <p>The MonoGame sample supports .NET 8 and targets the Microsoft XNA 4.0 API, but my game targeted XNA 3.1 and <em>.NET Framework 3.5</em>, as you can see from the (ugly, non-SDK) project file:</p> <pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>TargetFrameworkVersion</span><span class=\"token punctuation\">&gt;</span></span>v3.5<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>TargetFrameworkVersion</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>XnaFrameworkVersion</span><span class=\"token punctuation\">&gt;</span></span>v3.1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>XnaFrameworkVersion</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre> <p>As best as I can tell, the fact that my old app targets .NET Framework 3.5 really didn't factor in to the port much; the only issues I had were related to MonoGame using version 4.0 of the XNA API rather than 3.1.</p> <p>For the remainder of this post I'll walk through the steps I took updating the app</p> <h3 id=\"1-copying-the-files-across\" class=\"heading-with-anchor\"><a href=\"#1-copying-the-files-across\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">1. Copying the files across</a></h3> <p>The first step was a basic one, I simply copied all the files across from the old project to the new one. That included both <em>.cs</em> files and all the content files like <em>.wav</em> sound files and <em>.png</em> sprite files. The only files I initially left out were:</p> <ul><li>The <em>.csproj</em> file. I used the MonoGame generated file instead.</li> <li>The <em>AssemblyInfo.cs</em> file. The assembly attributes in this file such as <code>[AssemblyTitle]</code> are generated automatically by the default SDK instead.</li></ul> <p>At this point I optimistically tried to build and… not quite.</p> <h3 id=\"2-fixing-3-1-to-4-0-conversion-issues\" class=\"heading-with-anchor\"><a href=\"#2-fixing-3-1-to-4-0-conversion-issues\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">2. Fixing 3.1 to 4.0 conversion issues</a></h3> <p>After copying across the old files, I (amazingly) only had a single build error:</p> <pre class=\"language-bash\"><code class=\"language-bash\">Error CS1061 <span class=\"token builtin class-name\">:</span> <span class=\"token string\">'GraphicsDevice'</span> does not contain a definition <span class=\"token keyword\">for</span> <span class=\"token string\">'RenderState'</span>\nand no accessible extension method <span class=\"token string\">'RenderState'</span> accepting a first argument of\n<span class=\"token builtin class-name\">type</span> <span class=\"token string\">'GraphicsDevice'</span> could be found <span class=\"token punctuation\">(</span>are you missing a using directive or an\nassembly reference?<span class=\"token punctuation\">)</span>\n</code></pre> <p>A very quick googleing of the error led to <a href=\"https://stackoverflow.com/questions/44442303/monogame-whats-the-new-code-for-monogame-for-graphicsdevice\">this SO post</a> indicating that this was a breaking change in the move from XNA 3.1 to XNA 4.0: <code>RenderState</code> was removed in favour of <code>RasterizerState</code>, so to fix the build issue, I simply need to replace these calls. For example</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token comment\">// Before                                               👇</span>\n<span class=\"token class-name\"><span class=\"token keyword\">bool</span></span> defaultUseScissorTest <span class=\"token operator\">=</span> spriteBatch<span class=\"token punctuation\">.</span>GraphicsDevice<span class=\"token punctuation\">.</span>RenderState<span class=\"token punctuation\">.</span>ScissorTestEnable<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// After                                                👇</span>\n<span class=\"token class-name\"><span class=\"token keyword\">bool</span></span> defaultUseScissorTest <span class=\"token operator\">=</span> spriteBatch<span class=\"token punctuation\">.</span>GraphicsDevice<span class=\"token punctuation\">.</span>RasterizerState<span class=\"token punctuation\">.</span>ScissorTestEnable<span class=\"token punctuation\">;</span>\n</code></pre> <p>The fact that this was the only initial build error is a testament to Microsoft's general commitment to compatibility. But even more impressive in my eyes is how seamless MonoGame's support is for the XNA API. I didn't even have to rename any namespaces or anything, the code just compiled. Very neat.</p> <blockquote> <p>MonoGame doesn't actually support <em>all</em> the APIs include in XNA 4.0. Most notably, the <a href=\"https://github.com/MonoGame/MonoGame/issues/4311\"><code>.Storage</code></a> and <code>.Net</code> namespaces are not included. The storage and multi-platofrm APIs were deemed too tricky to port to be multiplatform in their original format.</p> </blockquote> <p>So with those changes the game compiled. Time to try running it!</p> <h3 id=\"3-fixing-the-content-pipeline\" class=\"heading-with-anchor\"><a href=\"#3-fixing-the-content-pipeline\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">3. Fixing the content pipeline</a></h3> <p>Unfortunately, even though the game compiled, as soon as I ran it, it crashed with a <code>FileNotFound</code> exception:</p> <p><img src=\"/content/images/2025/monogame_04.png\" alt=\"System.IO.FileNotFoundException: Could not find file 'D:\\repos\\TrashMonoGame\\artifacts\\bin\\Trash\\debug\\Content\\Audio\\Trash.xgs'.\"></p> <p>When the app is initializing, it attempts to create an instance of <code>AudioEngine</code>, but the file it's looking for, <code>Content\\Audio\\Trash.xgs</code> doesn't exist. The <em>.xgs</em> format is a XACT Game Studio file that contains the details of the audio files. This file is normally generated by the XNA content pipeline, but as far as I can tell, MonoGame doesn't use the same process.</p> <p>Rather than try to force MonoGame to use the <code>AudioEngine</code>, <code>WaveBank</code>, and <code>SoundBank</code> types that I was using originally, I decided it would make more sense to switch to <a href=\"https://docs.monogame.net/articles/getting_to_know/howto/audio/HowTo_PlayASound.html\">the \"typical\" MonoGame approach</a> to playing sound effects and music. In the simplest case this looks like the following:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\">SoundEffect</span> soundEffect <span class=\"token operator\">=</span> Content<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">Load</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>SoundEffect<span class=\"token punctuation\">&gt;</span></span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"path_to_sound.wav\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nsoundEffect<span class=\"token punctuation\">.</span><span class=\"token function\">Play</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre> <p>Or for looping effects:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\">SoundEffect</span> effect <span class=\"token operator\">=</span> Content<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">Load</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>SoundEffect<span class=\"token punctuation\">&gt;</span></span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"path_to_sound.wav\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">SoundEffectInstance</span> instance <span class=\"token operator\">=</span> effect<span class=\"token punctuation\">.</span><span class=\"token function\">CreateInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ninstance<span class=\"token punctuation\">.</span>IsLooped <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\ninstance<span class=\"token punctuation\">.</span><span class=\"token function\">Play</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre> <p>and for music:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\">Song</span> song <span class=\"token operator\">=</span> Content<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">Load</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>Song<span class=\"token punctuation\">&gt;</span></span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"rock_loop_stereo.wav\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>MediaPlayer<span class=\"token punctuation\">.</span>State <span class=\"token operator\">!=</span> MediaState<span class=\"token punctuation\">.</span>Stopped<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    MediaPlayer<span class=\"token punctuation\">.</span><span class=\"token function\">Stop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nMediaPlayer<span class=\"token punctuation\">.</span><span class=\"token function\">Play</span><span class=\"token punctuation\">(</span>song<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre> <p>In the example above, <code>Content</code> is an <a href=\"https://docs.monogame.net/api/Microsoft.Xna.Framework.Content.ContentManager.html\">instance of <code>ContentManager</code></a>, which relies on <a href=\"https://docs.monogame.net/articles/getting_to_know/howto/content_pipeline/\">the MonoGame content pipeline</a> to load content. This in turn relies on the MonoGame Content Builder (MGCB) tools to process the assets and make them available to the game at runtime.</p> <p>To run the MGCB content editor and to import all your assets, you can run the .NET tool that's <a href=\"/creating-your-first-sample-game-with-monogame/#exploring-the-default-monogame-template\">installed as part of the manifest</a>:</p> <pre class=\"language-bash\"><code class=\"language-bash\">dotnet mgcb-editor\n</code></pre> <p>This runs the graphical content editor that you can use to add content to MonoGame. You can open the <em>.mgcb</em> file that's included in the default template, add your content (<em>.wav</em> files and sprite textures etc), and build the pipeline.</p> <p><img src=\"/content/images/2025/monogame_02.png\" alt=\"The MGCB Editor\"></p> <p>After adding all of the content, the MGCB editor managed to process <em>most</em> of the content, however there was one file in particular that it <em>couldn't</em> process: a <em>.xap</em> file. This file is an XACT Audio Project, which defines how audio content is handled and processed, but the <code>XactImporter</code> and <code>XactProcessor</code> it requires <a href=\"https://github.com/MonoGame/MonoGame/issues/2661\">is not supported in MonoGame yet</a>.</p> <p>Luckily, the <em>.xap</em> file is easily readable in a text editor, for example:</p> <pre class=\"language-json\"><code class=\"language-json\">Cue\n<span class=\"token punctuation\">{</span>\n    Name = Navigate;\n\n    Variation\n    <span class=\"token punctuation\">{</span>\n        Variation Type = <span class=\"token number\">3</span>;\n        Variation Table Type = <span class=\"token number\">1</span>;\n        New Variation on Loop = <span class=\"token number\">0</span>;\n    <span class=\"token punctuation\">}</span>\n\n    Sound Entry\n    <span class=\"token punctuation\">{</span>\n        Name = Navigate;\n        Index = <span class=\"token number\">1</span>;\n        Weight Min = <span class=\"token number\">0</span>;\n        Weight Max = <span class=\"token number\">255</span>;\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>Using this file as a basis, the MGCB editor to process the existing <em>.wav</em> files, and the <code>SoundEffect</code> and <code>SoundEffectInstance</code> types to load the sounds in the game, I replaced the previous sound handling with <a href=\"https://stackoverflow.com/questions/16289951/xna-monogame-is-there-an-alternative-to-xact\">the updated MonoGame approach</a>. With the sound loading issue fixed, I tried building and running the app again and…nope, still not quite there,</p> <h3 id=\"4-adding-a-missing-font\" class=\"heading-with-anchor\"><a href=\"#4-adding-a-missing-font\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">4. Adding a missing font</a></h3> <p>The next issue I ran into actually was a broken build after using the MGCB editor to add all my content files. When trying to build I would get the following error:</p> <pre class=\"language-txt\"><code class=\"language-txt\">Narkisim Italic.spritefont: Error  : Processor 'FontDescriptionProcessor' had unexpected failure!. System.IO.FileNotFoundException: Could not find \"Narkisim\" font file.\n   at Microsoft.Xna.Framework.Content.Pipeline.Processors.FontDescriptionProcessor.Process(FontDescription input, ContentProcessorContext context) in /home/runner/work/MonoGame/MonoGame/MonoGame.Framework.Content.Pipeline/Processors/FontDescriptionProcessor.cs:line 67\n   at Microsoft.Xna.Framework.Content.Pipeline.ContentProcessor`2.Microsoft.Xna.Framework.Content.Pipeline.IContentProcessor.Process(Object input, ContentProcessorContext context) in /home/runner/work/MonoGame/MonoGame/MonoGame.Framework.Content.Pipeline/ContentProcessor.cs:line 60\n   at MonoGame.Framework.Content.Pipeline.Builder.PipelineManager.ProcessContent(PipelineBuildEvent pipelineEvent) in /home/runner/work/MonoGame/MonoGame/MonoGame.Framework.Content.Pipeline/Builder/PipelineManager.cs:line 846\nD:/repos/TrashMonoGame/Trash/Content/Fonts/Narkisim_16.spritefont\n</code></pre> <p>This shows that the MonoGame content builder couldn't process the <em>Narkisim_16.spritefont</em> content, because it can't find the <code>Narkisim</code> font that the spritefont is using. And sure enough, on my Windows 11 machine, the font isn't installed by default. As it turns out, that's because <code>Narkisim</code> is an optional font, that's installed as part of the Hebrew language pack.</p> <blockquote> <p>No, I'm not exactly sure why I chose to use a Hebrew font😅 I'm guessing it's because it was the closest match I could fine to the original Trash font.</p> </blockquote> <p>I could have chosen to use a different font, but instead I chose to simply <a href=\"https://learn.microsoft.com/en-us/windows/deployment/windows-missing-fonts?pivots=windows-11\">install the missing font</a> using Windows update. After installing <code>Narkisim</code>, the build finally worked!</p> <p>Unfortunately, we're not out of the woods yet.</p> <h3 id=\"5-fixing-the-rasterizerstate-behaviour\" class=\"heading-with-anchor\"><a href=\"#5-fixing-the-rasterizerstate-behaviour\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">5. Fixing the <code>RasterizerState</code> behaviour</a></h3> <p>After installing the missing font, the game builds, and the splash screen even displays:</p> <p><img src=\"/content/images/2025/monogame_01.webp\" alt=\"The Trash splash screen\"></p> <p>However, if you press any key as it says, the app immediately crashes with an exception:</p> <pre class=\"language-txt\"><code class=\"language-txt\">Unhandled exception. System.InvalidOperationException: You cannot modify a default rasterizer state object.\n   at Microsoft.Xna.Framework.Graphics.RasterizerState.ThrowIfBound()\n   at Microsoft.Xna.Framework.Graphics.RasterizerState.set_ScissorTestEnable(Boolean value)\n   at Trash.ScrollingFont.DrawScissored(GameTime gameTime) in D:\\repos\\TrashMonoGame\\Trash\\ScrollingObject.cs:line 250\n   at Trash.ScrollingFont.Draw(GameTime gameTime) in D:\\repos\\TrashMonoGame\\Trash\\ScrollingObject.cs:line 222\n   at Trash.CreditsScreen.Draw(GameTime gameTime) in D:\\repos\\TrashMonoGame\\Trash\\CreditsScreen.cs:line 96\n   at Microsoft.Xna.Framework.Game.SortingFilteringCollection`1.ForEachFilteredItem[TUserData](Action`2 action, TUserData userData)\n   at Trash.TrashGame.Draw(GameTime gameTime) in D:\\repos\\TrashMonoGame\\Trash\\TrashGame.cs:line 105\n   at Microsoft.Xna.Framework.Game.DoDraw(GameTime gameTime)\n   at Microsoft.Xna.Framework.Game.Tick()\n   at Microsoft.Xna.Framework.SdlGamePlatform.RunLoop()\n   at Microsoft.Xna.Framework.Game.Run(GameRunBehavior runBehavior)\n   at Program.&lt;Main&gt;$(String[] args) in D:\\repos\\TrashMonoGame\\Trash\\Program.cs:line 2\n</code></pre> <p>The mistake here is using code like this to enable \"<a href=\"https://learn.microsoft.com/en-us/windows/win32/direct3d9/scissor-test\">scissor testing</a>\":</p> <pre class=\"language-csharp\"><code class=\"language-csharp\">spriteBatch<span class=\"token punctuation\">.</span>GraphicsDevice<span class=\"token punctuation\">.</span>RasterizerState<span class=\"token punctuation\">.</span>ScissorTestEnable <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n</code></pre> <p>Instead, you need to create a new <code>RasterizerState</code> object and set it on the <code>GraphicsDevice</code>:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\">spriteBatch<span class=\"token punctuation\">.</span>GraphicsDevice<span class=\"token punctuation\">.</span>RasterizerState <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> ScissorTestEnable <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre> <p>After making the change above, the game finally runs! But it doesn't quite run <em>correctly</em>…</p> <h3 id=\"6-fixing-the-scissor-test\" class=\"heading-with-anchor\"><a href=\"#6-fixing-the-scissor-test\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">6. Fixing the scissor test</a></h3> <p>After the previous change, the app runs, but the \"scrolling object\" code that was setting <code>ScissorTestEnable=true</code> originally doesn't work as expected. The scrolling content is meant to be \"constrained\" by the pill bottle, but as you can see in the screenshot below, the scrolling text isn't constrained at all i.e. the scissor test isn't working.</p> <p><img src=\"/content/images/2025/monogame_05.webp\" alt=\"The scrolling text is not constrained by the pill bottle\"></p> <p>The mistake I made in the code was attempting to set <code>RaterizerState</code> <em>after</em> calling <code>ResizedSpriteBatch.Begin()</code>. Instead, you must pass the <code>ResizedSpriteBatch</code> object into the <code>Begin()</code> call:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token comment\">// Pass the RaterizerState into the Begin() call</span>\nspriteBatch<span class=\"token punctuation\">.</span><span class=\"token function\">Begin</span><span class=\"token punctuation\">(</span><span class=\"token named-parameter punctuation\">rasterizerState</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">RaterizerState</span> <span class=\"token punctuation\">{</span> ScissorTestEnable <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre> <p>And with that final change, the scissor test works as expected, and the game runs!</p> <p><img src=\"/content/images/2025/monogame_06.webp\" alt=\"The scrolling text is correctly constrained and the game runs as expected\"></p> <p>And there we have it, the conversion of an XNA 3.1 game to MonoGame in just a couple of hours!</p> <p>As I said at the start of this post, the original Trash clone I wrote was just a proof of concept to try out the XNA framework, so it's very rough and ready. The graphics are clearly dubious at best, but the game contains all the gameplay elements of the original. I've put the code <a href=\"https://github.com/andrewlock/Trash\">on GitHub</a>, but I have no intention of developing it any further at this stage. I haven't even fixed the horrendous coding style I apparently had 15 years ago so don't judge me! 🙈</p> <h2 id=\"summary\" class=\"heading-with-anchor\"><a href=\"#summary\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Summary</a></h2> <p>In this post I describe how I took a 15 year old, .NET Framework 3.5 game built using Microsoft's XNA 3.1 framework, and updated it to use MonoGame instead. In <a href=\"/creating-your-first-sample-game-with-monogame/\">the previous post</a> I described some of the history of MonoGame and explored the getting started template. By using that post as a starter, and copying in all my old files, I managed to convert my old codebase in just a few hours.</p> <p>I ran into a few issues during the conversion, mostly stemming from the fact that MonoGame targets the XNA 4.0 API, but most of the issues were fixable relatively easily. The main issue was the lack of <code>XactProcessor</code> support in MonoGame, so I resorted to rewriting the sound processing to use <code>SoundEffect</code> instead. Ultimately this didn't require too many changes, thanks to existing abstractions in my code. Once all the issues were fixed, the game ran great!</p> ",
    "sanitized": "In this post I describe how I took a Microsoft XNA Framework 3.1 game, written over 15 years in 2009, and updated it to run using MonoGame, on .NET 8, in just a few hours. This is a follow on from my previous post in which I took a brief look at the history of XNA and MonoGame and the getting started story. This post continues on where that post left off, starting from the MonoGame sample app to describe the steps I took to port my XNA game to MonoGame. Background: Porting a game from XNA to MonoGame MonoGame was one of those technologies I had vaguely heard of, but never paid much attention to, and certainly didn't know any of the history or capabilities around it. It came to my attention a couple of weeks ago when James Montemagno and Frank Kruegar were talking about \"vibe coding a MonoGame game from scratch\" on an episode of Merge Conflict. When James mentioned that MonoGame was an implementation of XNA, it really piqued my interest. I was interested because back in 2009, when I was trying to decide whether to work on a PhD or get a job, I dabbled with the idea of getting into game development. I really didn't pursue the gaming side at all, but I worked on a small game as a way of trying it out, and sure enough I used the XNA framework! So I wondered: how easy would it be to port the game I wrote all those years ago to use MonoGame instead? As you'll see in this post, the answer is actually really quite easy. The main issues I ran into were due to the fact that the game I wrote targeted version 3.1 of the XNA framework (and .NET Framework 3.5!😮), whereas MonoGame is based on the 4.0 version of XNA. The game I wrote was a clone of \"Trash\", which was a game I had for the Amiga 600 that I spent hours playing with my Dad when I was a kid:  Trash was itself a shameless clone of Nintendo's Dr. Mario, so when I was learning the ropes, it seemed like a good game to clone to get my bearings. The end result was definitely not polished (including crudely built models and sprites using a copy of 3DS Max of…questionable provenance), but it worked:  So that's the history of my Trash clone. I still had the files knocking around, and after I heard about MonoGame, I decided to give myself an evening to see if I could port the game to MonoGame. Not to actually develop the app or to do anything more with it; just to see if I could update it to MonoGame. I decided my general approach would be: Get a basic MonoGame sample running locally. Replace the content of the MonoGame sample with my Trash source code. Fix any issues that arose. I had no interest in distributing or improving the code. And I have to say, looking back at code I wrote 15 years ago was a horrifying experience 😂 Creating the basic MonoGame sample As in my previous post, I started with the \"MonoGame Cross-Platform Desktop Application\" sample application and used the new slnx format for the solution file. # Create the new sln file\ndotnet new sln\n# Convert the sln file to a slnx file\ndotnet sln migrate\n# Delete the original sln file\nrm *.sln\n Next I created a \"MonoGame Cross-Platform Desktop Application\" using the mgdesktopgl template: # Create the template in a \"Trash\" subfolder\ndotnet new mgdesktopgl --output Trash\n# Add the new project to the template\ndotnet sln add ./Trash/\n If you run the app at this point, you'll get a Cornflower Blue \"game\":  This serves as the starting point for porting Trash. Porting an existing XNA game to MonoGame The MonoGame sample supports .NET 8 and targets the Microsoft XNA 4.0 API, but my game targeted XNA 3.1 and .NET Framework 3.5, as you can see from the (ugly, non-SDK) project file: <TargetFrameworkVersion>v3.5</TargetFrameworkVersion>\n<XnaFrameworkVersion>v3.1</XnaFrameworkVersion>\n As best as I can tell, the fact that my old app targets .NET Framework 3.5 really didn't factor in to the port much; the only issues I had were related to MonoGame using version 4.0 of the XNA API rather than 3.1. For the remainder of this post I'll walk through the steps I took updating the app 1. Copying the files across The first step was a basic one, I simply copied all the files across from the old project to the new one. That included both .cs files and all the content files like .wav sound files and .png sprite files. The only files I initially left out were: The .csproj file. I used the MonoGame generated file instead. The AssemblyInfo.cs file. The assembly attributes in this file such as [AssemblyTitle] are generated automatically by the default SDK instead. At this point I optimistically tried to build and… not quite. 2. Fixing 3.1 to 4.0 conversion issues After copying across the old files, I (amazingly) only had a single build error: Error CS1061 : 'GraphicsDevice' does not contain a definition for 'RenderState'\nand no accessible extension method 'RenderState' accepting a first argument of\ntype 'GraphicsDevice' could be found (are you missing a using directive or an\nassembly reference?)\n A very quick googleing of the error led to this SO post indicating that this was a breaking change in the move from XNA 3.1 to XNA 4.0: RenderState was removed in favour of RasterizerState, so to fix the build issue, I simply need to replace these calls. For example // Before                                               👇\nbool defaultUseScissorTest = spriteBatch.GraphicsDevice.RenderState.ScissorTestEnable;\n\n// After                                                👇\nbool defaultUseScissorTest = spriteBatch.GraphicsDevice.RasterizerState.ScissorTestEnable;\n The fact that this was the only initial build error is a testament to Microsoft's general commitment to compatibility. But even more impressive in my eyes is how seamless MonoGame's support is for the XNA API. I didn't even have to rename any namespaces or anything, the code just compiled. Very neat.  MonoGame doesn't actually support all the APIs include in XNA 4.0. Most notably, the .Storage and .Net namespaces are not included. The storage and multi-platofrm APIs were deemed too tricky to port to be multiplatform in their original format.  So with those changes the game compiled. Time to try running it! 3. Fixing the content pipeline Unfortunately, even though the game compiled, as soon as I ran it, it crashed with a FileNotFound exception:  When the app is initializing, it attempts to create an instance of AudioEngine, but the file it's looking for, Content\\Audio\\Trash.xgs doesn't exist. The .xgs format is a XACT Game Studio file that contains the details of the audio files. This file is normally generated by the XNA content pipeline, but as far as I can tell, MonoGame doesn't use the same process. Rather than try to force MonoGame to use the AudioEngine, WaveBank, and SoundBank types that I was using originally, I decided it would make more sense to switch to the \"typical\" MonoGame approach to playing sound effects and music. In the simplest case this looks like the following: SoundEffect soundEffect = Content.Load<SoundEffect>(\"path_to_sound.wav\");\nsoundEffect.Play();\n Or for looping effects: SoundEffect effect = Content.Load<SoundEffect>(\"path_to_sound.wav\");\nSoundEffectInstance instance = effect.CreateInstance();\ninstance.IsLooped = true;\ninstance.Play();\n and for music: Song song = Content.Load<Song>(\"rock_loop_stereo.wav\");\nif(MediaPlayer.State != MediaState.Stopped)\n{\n    MediaPlayer.Stop();\n}\n\nMediaPlayer.Play(song);\n In the example above, Content is an instance of ContentManager, which relies on the MonoGame content pipeline to load content. This in turn relies on the MonoGame Content Builder (MGCB) tools to process the assets and make them available to the game at runtime. To run the MGCB content editor and to import all your assets, you can run the .NET tool that's installed as part of the manifest: dotnet mgcb-editor\n This runs the graphical content editor that you can use to add content to MonoGame. You can open the .mgcb file that's included in the default template, add your content (.wav files and sprite textures etc), and build the pipeline.  After adding all of the content, the MGCB editor managed to process most of the content, however there was one file in particular that it couldn't process: a .xap file. This file is an XACT Audio Project, which defines how audio content is handled and processed, but the XactImporter and XactProcessor it requires is not supported in MonoGame yet. Luckily, the .xap file is easily readable in a text editor, for example: Cue\n{\n    Name = Navigate;\n\n    Variation\n    {\n        Variation Type = 3;\n        Variation Table Type = 1;\n        New Variation on Loop = 0;\n    }\n\n    Sound Entry\n    {\n        Name = Navigate;\n        Index = 1;\n        Weight Min = 0;\n        Weight Max = 255;\n    }\n}\n Using this file as a basis, the MGCB editor to process the existing .wav files, and the SoundEffect and SoundEffectInstance types to load the sounds in the game, I replaced the previous sound handling with the updated MonoGame approach. With the sound loading issue fixed, I tried building and running the app again and…nope, still not quite there, 4. Adding a missing font The next issue I ran into actually was a broken build after using the MGCB editor to add all my content files. When trying to build I would get the following error: Narkisim Italic.spritefont: Error  : Processor 'FontDescriptionProcessor' had unexpected failure!. System.IO.FileNotFoundException: Could not find \"Narkisim\" font file.\n   at Microsoft.Xna.Framework.Content.Pipeline.Processors.FontDescriptionProcessor.Process(FontDescription input, ContentProcessorContext context) in /home/runner/work/MonoGame/MonoGame/MonoGame.Framework.Content.Pipeline/Processors/FontDescriptionProcessor.cs:line 67\n   at Microsoft.Xna.Framework.Content.Pipeline.ContentProcessor`2.Microsoft.Xna.Framework.Content.Pipeline.IContentProcessor.Process(Object input, ContentProcessorContext context) in /home/runner/work/MonoGame/MonoGame/MonoGame.Framework.Content.Pipeline/ContentProcessor.cs:line 60\n   at MonoGame.Framework.Content.Pipeline.Builder.PipelineManager.ProcessContent(PipelineBuildEvent pipelineEvent) in /home/runner/work/MonoGame/MonoGame/MonoGame.Framework.Content.Pipeline/Builder/PipelineManager.cs:line 846\nD:/repos/TrashMonoGame/Trash/Content/Fonts/Narkisim_16.spritefont\n This shows that the MonoGame content builder couldn't process the Narkisim_16.spritefont content, because it can't find the Narkisim font that the spritefont is using. And sure enough, on my Windows 11 machine, the font isn't installed by default. As it turns out, that's because Narkisim is an optional font, that's installed as part of the Hebrew language pack.  No, I'm not exactly sure why I chose to use a Hebrew font😅 I'm guessing it's because it was the closest match I could fine to the original Trash font.  I could have chosen to use a different font, but instead I chose to simply install the missing font using Windows update. After installing Narkisim, the build finally worked! Unfortunately, we're not out of the woods yet. 5. Fixing the RasterizerState behaviour After installing the missing font, the game builds, and the splash screen even displays:  However, if you press any key as it says, the app immediately crashes with an exception: Unhandled exception. System.InvalidOperationException: You cannot modify a default rasterizer state object.\n   at Microsoft.Xna.Framework.Graphics.RasterizerState.ThrowIfBound()\n   at Microsoft.Xna.Framework.Graphics.RasterizerState.set_ScissorTestEnable(Boolean value)\n   at Trash.ScrollingFont.DrawScissored(GameTime gameTime) in D:\\repos\\TrashMonoGame\\Trash\\ScrollingObject.cs:line 250\n   at Trash.ScrollingFont.Draw(GameTime gameTime) in D:\\repos\\TrashMonoGame\\Trash\\ScrollingObject.cs:line 222\n   at Trash.CreditsScreen.Draw(GameTime gameTime) in D:\\repos\\TrashMonoGame\\Trash\\CreditsScreen.cs:line 96\n   at Microsoft.Xna.Framework.Game.SortingFilteringCollection`1.ForEachFilteredItem[TUserData](Action`2 action, TUserData userData)\n   at Trash.TrashGame.Draw(GameTime gameTime) in D:\\repos\\TrashMonoGame\\Trash\\TrashGame.cs:line 105\n   at Microsoft.Xna.Framework.Game.DoDraw(GameTime gameTime)\n   at Microsoft.Xna.Framework.Game.Tick()\n   at Microsoft.Xna.Framework.SdlGamePlatform.RunLoop()\n   at Microsoft.Xna.Framework.Game.Run(GameRunBehavior runBehavior)\n   at Program.<Main>$(String[] args) in D:\\repos\\TrashMonoGame\\Trash\\Program.cs:line 2\n The mistake here is using code like this to enable \"scissor testing\": spriteBatch.GraphicsDevice.RasterizerState.ScissorTestEnable = true;\n Instead, you need to create a new RasterizerState object and set it on the GraphicsDevice: spriteBatch.GraphicsDevice.RasterizerState = new () { ScissorTestEnable = true };\n After making the change above, the game finally runs! But it doesn't quite run correctly… 6. Fixing the scissor test After the previous change, the app runs, but the \"scrolling object\" code that was setting ScissorTestEnable=true originally doesn't work as expected. The scrolling content is meant to be \"constrained\" by the pill bottle, but as you can see in the screenshot below, the scrolling text isn't constrained at all i.e. the scissor test isn't working.  The mistake I made in the code was attempting to set RaterizerState after calling ResizedSpriteBatch.Begin(). Instead, you must pass the ResizedSpriteBatch object into the Begin() call: // Pass the RaterizerState into the Begin() call\nspriteBatch.Begin(rasterizerState: new RaterizerState { ScissorTestEnable = true });\n And with that final change, the scissor test works as expected, and the game runs!  And there we have it, the conversion of an XNA 3.1 game to MonoGame in just a couple of hours! As I said at the start of this post, the original Trash clone I wrote was just a proof of concept to try out the XNA framework, so it's very rough and ready. The graphics are clearly dubious at best, but the game contains all the gameplay elements of the original. I've put the code on GitHub, but I have no intention of developing it any further at this stage. I haven't even fixed the horrendous coding style I apparently had 15 years ago so don't judge me! 🙈 Summary In this post I describe how I took a 15 year old, .NET Framework 3.5 game built using Microsoft's XNA 3.1 framework, and updated it to use MonoGame instead. In the previous post I described some of the history of MonoGame and explored the getting started template. By using that post as a starter, and copying in all my old files, I managed to convert my old codebase in just a few hours. I ran into a few issues during the conversion, mostly stemming from the fact that MonoGame targets the XNA 4.0 API, but most of the issues were fixable relatively easily. The main issue was the lack of XactProcessor support in MonoGame, so I resorted to rewriting the sound processing to use SoundEffect instead. Ultimately this didn't require too many changes, thanks to existing abstractions in my code. Once all the issues were fixed, the game ran great!"
  },
  {
    "itemId": "https://andrewlock.net/creating-your-first-sample-game-with-monogame/",
    "raw": "<img src=\"https://andrewlock.net/content/images/2025/mono_banner.webp\" /><p>In this post I provide an introduction to the <a href=\"https://monogame.net/\">MonoGame</a> framework. I start by looking at the history of MonoGame and the XNA framework and then show how to get started with MonoGame. Finally we take a look at a default sample app. In my next post I will show how I used MonoGame to port a Microsoft XNA game from 2009 to run on .NET 8 in just a few hours.</p> <h2 id=\"background-a-brief-history-of-microsoft-xna-and-monogame\" class=\"heading-with-anchor\"><a href=\"#background-a-brief-history-of-microsoft-xna-and-monogame\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Background: A brief history of Microsoft XNA and MonoGame</a></h2> <p>Microsoft's XNA framework was first announced back in 2004 (and first released in preview in 2006) as a set of tools for building video games that would run on Windows and Xbox 360 (and later, Windows phone). The Microsoft XNA framework was originally based on .NET Framework 2.0 on Windows and <a href=\"https://en.wikipedia.org/wiki/.NET_Compact_Framework\">.NET Compact Framework</a> on Xbox 360, with this later being updated to support .NET Framework 3.5.</p> <p><img src=\"/content/images/2025/Microsoft_XNA_logo.svg\" alt=\"The XNA logo\"></p> <p>The XNA framework was meant to provide an easy way of writing games that focused on the content, rather than having to think about all the minutia that would change between platforms. It had a big focus on indie games, where gameplay is the key attraction, rather than the focus being the highest performance or the best graphics. XNA didn't provide a full game engine, instead providing lower-level abstractions, as well as a collection of tools for building content-pipelines and such.</p> <p>Shortly after the XNA framework was released and was heavily promoted by Microsoft, a project called <a href=\"https://web.archive.org/web/20120620235417/http://www.monoxna.org/node/4\">Mono.XNA</a> was created. Much as <a href=\"https://en.wikipedia.org/wiki/Mono_(software)\">Mono</a> was intended as an open-source cross-platform version of .NET Framework, so Mono.XNA was conceived as an open-source cross-platform version of Microsoft XNA, enabling users to build games that would run on Windows, Mac, and Linux, using OpenGL for rendering. At around the same time, Bill Reiss started a project called <a href=\"https://web.archive.org/web/20090317075046/http://silversprite.codeplex.com:80/\">SilverSprite</a>, with the goal of running XNA games in the browser, using Silverlight 2.0, and later 3.0.</p> <p>In 2009 <a href=\"https://github.com/jalf\">José Antonio Leal de Farias</a>, <a href=\"https://monogame.net/presskit/#history\">started an open-source project</a> called <a href=\"https://web.archive.org/web/20140225023450/https://monogame.codeplex.com/releases/view/36738\">XNA.Touch</a>, with the goal of porting simple 2D XNA games to mobile. XNA.Touch used code primarily from SilverSprite and some parts from Mono.XNA to create a framework that enabled running XNA games on the iPhone. This culminated in 2010 with multiple games being released to the Apple App Store.</p> <p>In 2011, XNA.Touch was renamed to <a href=\"https://monogame.net/\">MonoGame</a>. MonoGame added support for Android, Mac, Linux, Windows (using OpenGL) in the same year; they added support for DirectX 11, Windows 8, and Windows 8 Phone in 2012; and then in 2013 they added support for the PlayStation 4. Today, MonoGame even supports PlayStation 5 and Nintendo Switch.</p> <figure> <picture> <img src=\"/content/images/2025/mono_arch.png\"> </picture><figcaption>The architecture of the various MonoGame options, from <a href=\"https://monogame.net/\">MonoGame</a>.</figcaption></figure> <p>Today, MonoGame implements the Microsoft XNA 4.0 API. Just as for XNA, MonoGame provides the <em>building blocks</em> to build your own engine and tools, but it isn't quite an engine itself. It also provides a bunch of tools for working with content (similar to the tools XNA provided).</p> <h2 id=\"getting-started-with-monogame\" class=\"heading-with-anchor\"><a href=\"#getting-started-with-monogame\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Getting started with MonoGame</a></h2> <p><a href=\"https://docs.monogame.net/articles/getting_started/index.html\">Getting started with MonoGame</a> is incredibly simple if you're already a .NET developer. There are basically only two steps:</p> <ol><li>Install the .NET 8 SDK (or newer)</li> <li>Install the MonoGame templates</li></ol> <p>I obviously already had the .NET 9 SDK installed, so all that remained was to install the MonoGame templates with:</p> <pre class=\"language-bash\"><code class=\"language-bash\">dotnet new <span class=\"token function\">install</span> MonoGame.Templates.CSharp\n</code></pre> <p>After installing the templates you have a bunch of templates available:</p> <pre class=\"language-txt\"><code class=\"language-txt\">The following template packages will be installed:\n   MonoGame.Templates.CSharp\n\nSuccess: MonoGame.Templates.CSharp::3.8.3 installed the following templates:\nTemplate Name                Short Name         Language  Tags\n---------------------------  -----------------  --------  -------------------------------------------------------------\nMonoGame 2D StartKit                          mg2dstartkit                [C#]        MonoGame/Games/Mobile/Android/iOS/Desktop/Windows/Linux/macOS\nMonoGame Android Application                  mgandroid                   [C#]        MonoGame/Games/Mobile/Android\nMonoGame Blank 2D StartKit                    mgblank2dstartkit           [C#]        MonoGame/Games/Mobile/Android/iOS/Desktop/Windows/Linux/macOS\nMonoGame Content Pipeline Extension           mgpipeline                  [C#]        MonoGame/Games/Extensions\nMonoGame Cross-Platform Desktop Application   mgdesktopgl                 [C#]        MonoGame/Games/Desktop/Windows/Linux/macOS\nMonoGame Game Library                         mglib                       [C#]        MonoGame/Games/Library\nMonoGame iOS Application                      mgios                       [C#]        MonoGame/Games/Mobile/iOS\nMonoGame Shared Library Project               mgshared                    [C#]        MonoGame/Games/Library\nMonoGame Windows Desktop Application          mgwindowsdx                 [C#]        MonoGame/Games/Desktop/Windows/Linux/macOS\n</code></pre> <p>MonoGame supports all the IDEs you would expect (Visual Studio, VS Code, and <a href=\"https://docs.monogame.net/articles/getting_started/2_choosing_your_ide_rider.html\">Rider</a>). I was just going to use the OpenGL-based application, so as far as I could tell, I didn't need to install any additional components. If you're using one of the other templates, then you may need to install additional components using Visual Studio or the dotnet CLI, <a href=\"https://docs.monogame.net/articles/getting_started/2_choosing_your_ide_visual_studio.html\">as described in the documentation</a>.</p> <p>With the templates installed, I set about creating my first MonoGame application.</p> <h2 id=\"creating-my-first-monogame-application\" class=\"heading-with-anchor\"><a href=\"#creating-my-first-monogame-application\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Creating my first MonoGame application</a></h2> <p>Before creating the MonoGame project, I created a solution to hold the project. Just to try it out, I decided to use <a href=\"https://devblogs.microsoft.com/dotnet/introducing-slnx-support-dotnet-cli/\">the new slnx format</a> seeing as <a href=\"https://blog.jetbrains.com/dotnet/2024/10/04/support-for-slnx-solution-files/\">Rider supports it</a>.</p> <p>As far as I can tell, you can't create a slnx file <em>directly</em> using the .NET CLI, so I created a new sln file, and converted it instead:</p> <pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># Create the new sln file</span>\ndotnet new sln\n<span class=\"token comment\"># Convert the sln file to a slnx file</span>\ndotnet sln migrate\n<span class=\"token comment\"># Delete the original sln file</span>\n<span class=\"token function\">rm</span> *.sln\n</code></pre> <p>Next I created a \"MonoGame Cross-Platform Desktop Application\" using the <code>mgdesktopgl</code> template:</p> <p>Create the project</p> <pre class=\"language-powershell\"><code class=\"language-powershell\"><span class=\"token comment\"># Create the template in a \"MyGame\" subfolder</span>\ndotnet new mgdesktopgl <span class=\"token operator\">--</span>output MyGame\n<span class=\"token comment\"># Add the new project to the template</span>\ndotnet sln add <span class=\"token punctuation\">.</span><span class=\"token operator\">/</span>MyGame/\n</code></pre> <p>We now have our sample application. Before testing it out, let's take a look at some of the files it includes.</p> <h2 id=\"exploring-the-default-monogame-template\" class=\"heading-with-anchor\"><a href=\"#exploring-the-default-monogame-template\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Exploring the default MonoGame template</a></h2> <p>We'll start by looking at the project template. As you can see below, the project is a .NET 8 app, which adds a couple of embedded resources for the app icon. It references two NuGet packages:</p> <ul><li><code>MonoGame.Framework.DesktopGL</code>—This is the \"main\" MonoGame NuGet package for the sample that includes the required implementation for creating a cross-platform desktop application based on OpenGL. There are other packages for other MonoGame targets.</li> <li><code>MonoGame.Content.Builder.Task</code>—<a href=\"https://nuget.info/packages/MonoGame.Content.Builder.Task\">This small package</a> contains MSBuild properties and tasks for running MonoGame's content pipeline.</li></ul> <pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Project</span> <span class=\"token attr-name\">Sdk</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Microsoft.NET.Sdk<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>PropertyGroup</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>OutputType</span><span class=\"token punctuation\">&gt;</span></span>WinExe<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>OutputType</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>TargetFramework</span><span class=\"token punctuation\">&gt;</span></span>net8.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>TargetFramework</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>RollForward</span><span class=\"token punctuation\">&gt;</span></span>Major<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>RollForward</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>PublishReadyToRun</span><span class=\"token punctuation\">&gt;</span></span>false<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>PublishReadyToRun</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>TieredCompilation</span><span class=\"token punctuation\">&gt;</span></span>false<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>TieredCompilation</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>PropertyGroup</span><span class=\"token punctuation\">&gt;</span></span>\n\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>PropertyGroup</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ApplicationManifest</span><span class=\"token punctuation\">&gt;</span></span>app.manifest<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ApplicationManifest</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ApplicationIcon</span><span class=\"token punctuation\">&gt;</span></span>Icon.ico<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ApplicationIcon</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>PropertyGroup</span><span class=\"token punctuation\">&gt;</span></span>\n  \n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ItemGroup</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>None</span> <span class=\"token attr-name\">Remove</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Icon.ico<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>None</span> <span class=\"token attr-name\">Remove</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Icon.bmp<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ItemGroup</span><span class=\"token punctuation\">&gt;</span></span>\n  \n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ItemGroup</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>EmbeddedResource</span> <span class=\"token attr-name\">Include</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Icon.ico<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>LogicalName</span><span class=\"token punctuation\">&gt;</span></span>Icon.ico<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>LogicalName</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>EmbeddedResource</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>EmbeddedResource</span> <span class=\"token attr-name\">Include</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Icon.bmp<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>LogicalName</span><span class=\"token punctuation\">&gt;</span></span>Icon.bmp<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>LogicalName</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>EmbeddedResource</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ItemGroup</span><span class=\"token punctuation\">&gt;</span></span>\n\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ItemGroup</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>PackageReference</span> <span class=\"token attr-name\">Include</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>MonoGame.Framework.DesktopGL<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">Version</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>3.8.*<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>PackageReference</span> <span class=\"token attr-name\">Include</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>MonoGame.Content.Builder.Task<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">Version</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>3.8.*<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ItemGroup</span><span class=\"token punctuation\">&gt;</span></span>\n\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Target</span> <span class=\"token attr-name\">Name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>RestoreDotnetTools<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">BeforeTargets</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Restore<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Message</span> <span class=\"token attr-name\">Text</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Restoring dotnet tools<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">Importance</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>High<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Exec</span> <span class=\"token attr-name\">Command</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>dotnet tool restore<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Target</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Project</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre> <p>Another interesting point is the additional MSBuild target <code>RestoreDotnetTools</code> which runs <code>dotnet tool restore</code> just before restoring NuGet packages. This restores the various <code>mgcb</code> dotnet tools that are included as part of the manifest in <em>.config/dotnet-tools.json</em>. These are the MonoGame Content Builder (MGCB) tools which provide graphical and command-line tools for editing and optimising your content for processing:</p> <pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"version\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"isRoot\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"tools\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"dotnet-mgcb\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"version\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"3.8.3\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"commands\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">\"mgcb\"</span> <span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"dotnet-mgcb-editor\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"version\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"3.8.3\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"commands\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">\"mgcb-editor\"</span> <span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"dotnet-mgcb-editor-linux\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"version\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"3.8.3\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"commands\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">\"mgcb-editor-linux\"</span> <span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"dotnet-mgcb-editor-windows\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"version\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"3.8.3\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"commands\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">\"mgcb-editor-windows\"</span> <span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"dotnet-mgcb-editor-mac\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"version\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"3.8.3\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"commands\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">\"mgcb-editor-mac\"</span> <span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>The manifest includes 5 different tools:</p> <ul><li><code>dotnet-mgcb</code>—<a href=\"https://www.nuget.org/packages/dotnet-mgcb\">The MonoGame Content Builder (MGCB) command line tool</a> is used for optimizing content for runtime use.</li> <li><code>dotnet-mgcb-editor</code>—<a href=\"https://www.nuget.org/packages/dotnet-mgcb-editor\">The MonoGame Framework Content Builder Editor (MGCB-Editor)</a> is a graphical tool used for editing your content projects ready for processing. There are Windows/Linux/Mac specific versions of the tool, but as far as I can tell, you can just run the generic tool.</li></ul> <p>Finally, we come to the code. The <em>Program.cs</em> file leverages all the modern .NET goodness to be just two lines:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> game <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">MyGame<span class=\"token punctuation\">.</span>Game1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ngame<span class=\"token punctuation\">.</span><span class=\"token function\">Run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre> <p>Finally, we can see the <code>Game1</code> class itself. This very simple example includes the basics—creating a <code>GraphicsDeviceManager</code> and a <code>SpriteBatch</code>—but mostly highlights the different stages in the XNA/MonoGame game loop that you should override to create your own game.</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">Microsoft<span class=\"token punctuation\">.</span>Xna<span class=\"token punctuation\">.</span>Framework</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">Microsoft<span class=\"token punctuation\">.</span>Xna<span class=\"token punctuation\">.</span>Framework<span class=\"token punctuation\">.</span>Graphics</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">Microsoft<span class=\"token punctuation\">.</span>Xna<span class=\"token punctuation\">.</span>Framework<span class=\"token punctuation\">.</span>Input</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token namespace\">MyGame</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Game1</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">Game</span></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">GraphicsDeviceManager</span> _graphics<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">SpriteBatch</span> _spriteBatch<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token function\">Game1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        _graphics <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">GraphicsDeviceManager</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        Content<span class=\"token punctuation\">.</span>RootDirectory <span class=\"token operator\">=</span> <span class=\"token string\">\"Content\"</span><span class=\"token punctuation\">;</span>\n        IsMouseVisible <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Initialize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// TODO: Add your initialization logic here</span>\n\n        <span class=\"token keyword\">base</span><span class=\"token punctuation\">.</span><span class=\"token function\">Initialize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">LoadContent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        _spriteBatch <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">SpriteBatch</span><span class=\"token punctuation\">(</span>GraphicsDevice<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// TODO: use this.Content to load your game content here</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Update</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">GameTime</span> gameTime<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>GamePad<span class=\"token punctuation\">.</span><span class=\"token function\">GetState</span><span class=\"token punctuation\">(</span>PlayerIndex<span class=\"token punctuation\">.</span>One<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>Buttons<span class=\"token punctuation\">.</span>Back <span class=\"token operator\">==</span> ButtonState<span class=\"token punctuation\">.</span>Pressed <span class=\"token operator\">||</span> Keyboard<span class=\"token punctuation\">.</span><span class=\"token function\">GetState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">IsKeyDown</span><span class=\"token punctuation\">(</span>Keys<span class=\"token punctuation\">.</span>Escape<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token function\">Exit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// TODO: Add your update logic here</span>\n\n        <span class=\"token keyword\">base</span><span class=\"token punctuation\">.</span><span class=\"token function\">Update</span><span class=\"token punctuation\">(</span>gameTime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Draw</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">GameTime</span> gameTime<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        GraphicsDevice<span class=\"token punctuation\">.</span><span class=\"token function\">Clear</span><span class=\"token punctuation\">(</span>Color<span class=\"token punctuation\">.</span>CornflowerBlue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// TODO: Add your drawing code here</span>\n\n        <span class=\"token keyword\">base</span><span class=\"token punctuation\">.</span><span class=\"token function\">Draw</span><span class=\"token punctuation\">(</span>gameTime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>Aside from some basic setup, the sample game essentially contains just two behaviours:</p> <ul><li>Listen for the <kbd>Escape</kbd> key on the keyboard, or the <kbd>Back</kbd> button on a keypad, and exit the game if they're pressed.</li> <li>Paint the colour Cornflower Blue as the game background.</li></ul> <p>And that's essentially all there is to it. You can run the template using <code>dotnet run</code>, or by pushing <kbd>F5</kbd> in your IDE. The resulting \"game\" just shows a blue screen until you hit exit:</p> <p><img src=\"/content/images/2025/monogame_00.png\" alt=\"The default MonoGame sample 'game'\"></p> <p>And that's all there is to it. In the next post I'll show how I started from this sample to port a Microsoft XNA game from 2009 to run on .NET 8 in just a few hours.</p> <h2 id=\"summary\" class=\"heading-with-anchor\"><a href=\"#summary\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Summary</a></h2> <p>In this post I described a brief history of the Microsoft XNA framework and the creation of MonoGame as an open-source implementation of the Microsoft XNA 4.0 API. I then discussed the basic requirements for building a MonoGame Windows application: the .NET 8 SDK and the .NET CLI templates. Finally, we took a tour of the sample app to see the relevant NuGet packages, tools, and code that the sample uses. In the next post I'll show how I started from this sample to port a Microsoft XNA game to MonoGame in just a few hours.</p> ",
    "sanitized": "In this post I provide an introduction to the MonoGame framework. I start by looking at the history of MonoGame and the XNA framework and then show how to get started with MonoGame. Finally we take a look at a default sample app. In my next post I will show how I used MonoGame to port a Microsoft XNA game from 2009 to run on .NET 8 in just a few hours. Background: A brief history of Microsoft XNA and MonoGame Microsoft's XNA framework was first announced back in 2004 (and first released in preview in 2006) as a set of tools for building video games that would run on Windows and Xbox 360 (and later, Windows phone). The Microsoft XNA framework was originally based on .NET Framework 2.0 on Windows and .NET Compact Framework on Xbox 360, with this later being updated to support .NET Framework 3.5.  The XNA framework was meant to provide an easy way of writing games that focused on the content, rather than having to think about all the minutia that would change between platforms. It had a big focus on indie games, where gameplay is the key attraction, rather than the focus being the highest performance or the best graphics. XNA didn't provide a full game engine, instead providing lower-level abstractions, as well as a collection of tools for building content-pipelines and such. Shortly after the XNA framework was released and was heavily promoted by Microsoft, a project called Mono.XNA was created. Much as Mono was intended as an open-source cross-platform version of .NET Framework, so Mono.XNA was conceived as an open-source cross-platform version of Microsoft XNA, enabling users to build games that would run on Windows, Mac, and Linux, using OpenGL for rendering. At around the same time, Bill Reiss started a project called SilverSprite, with the goal of running XNA games in the browser, using Silverlight 2.0, and later 3.0. In 2009 José Antonio Leal de Farias, started an open-source project called XNA.Touch, with the goal of porting simple 2D XNA games to mobile. XNA.Touch used code primarily from SilverSprite and some parts from Mono.XNA to create a framework that enabled running XNA games on the iPhone. This culminated in 2010 with multiple games being released to the Apple App Store. In 2011, XNA.Touch was renamed to MonoGame. MonoGame added support for Android, Mac, Linux, Windows (using OpenGL) in the same year; they added support for DirectX 11, Windows 8, and Windows 8 Phone in 2012; and then in 2013 they added support for the PlayStation 4. Today, MonoGame even supports PlayStation 5 and Nintendo Switch.    The architecture of the various MonoGame options, from MonoGame. Today, MonoGame implements the Microsoft XNA 4.0 API. Just as for XNA, MonoGame provides the building blocks to build your own engine and tools, but it isn't quite an engine itself. It also provides a bunch of tools for working with content (similar to the tools XNA provided). Getting started with MonoGame Getting started with MonoGame is incredibly simple if you're already a .NET developer. There are basically only two steps: Install the .NET 8 SDK (or newer) Install the MonoGame templates I obviously already had the .NET 9 SDK installed, so all that remained was to install the MonoGame templates with: dotnet new install MonoGame.Templates.CSharp\n After installing the templates you have a bunch of templates available: The following template packages will be installed:\n   MonoGame.Templates.CSharp\n\nSuccess: MonoGame.Templates.CSharp::3.8.3 installed the following templates:\nTemplate Name                Short Name         Language  Tags\n---------------------------  -----------------  --------  -------------------------------------------------------------\nMonoGame 2D StartKit                          mg2dstartkit                [C#]        MonoGame/Games/Mobile/Android/iOS/Desktop/Windows/Linux/macOS\nMonoGame Android Application                  mgandroid                   [C#]        MonoGame/Games/Mobile/Android\nMonoGame Blank 2D StartKit                    mgblank2dstartkit           [C#]        MonoGame/Games/Mobile/Android/iOS/Desktop/Windows/Linux/macOS\nMonoGame Content Pipeline Extension           mgpipeline                  [C#]        MonoGame/Games/Extensions\nMonoGame Cross-Platform Desktop Application   mgdesktopgl                 [C#]        MonoGame/Games/Desktop/Windows/Linux/macOS\nMonoGame Game Library                         mglib                       [C#]        MonoGame/Games/Library\nMonoGame iOS Application                      mgios                       [C#]        MonoGame/Games/Mobile/iOS\nMonoGame Shared Library Project               mgshared                    [C#]        MonoGame/Games/Library\nMonoGame Windows Desktop Application          mgwindowsdx                 [C#]        MonoGame/Games/Desktop/Windows/Linux/macOS\n MonoGame supports all the IDEs you would expect (Visual Studio, VS Code, and Rider). I was just going to use the OpenGL-based application, so as far as I could tell, I didn't need to install any additional components. If you're using one of the other templates, then you may need to install additional components using Visual Studio or the dotnet CLI, as described in the documentation. With the templates installed, I set about creating my first MonoGame application. Creating my first MonoGame application Before creating the MonoGame project, I created a solution to hold the project. Just to try it out, I decided to use the new slnx format seeing as Rider supports it. As far as I can tell, you can't create a slnx file directly using the .NET CLI, so I created a new sln file, and converted it instead: # Create the new sln file\ndotnet new sln\n# Convert the sln file to a slnx file\ndotnet sln migrate\n# Delete the original sln file\nrm *.sln\n Next I created a \"MonoGame Cross-Platform Desktop Application\" using the mgdesktopgl template: Create the project # Create the template in a \"MyGame\" subfolder\ndotnet new mgdesktopgl --output MyGame\n# Add the new project to the template\ndotnet sln add ./MyGame/\n We now have our sample application. Before testing it out, let's take a look at some of the files it includes. Exploring the default MonoGame template We'll start by looking at the project template. As you can see below, the project is a .NET 8 app, which adds a couple of embedded resources for the app icon. It references two NuGet packages: MonoGame.Framework.DesktopGL—This is the \"main\" MonoGame NuGet package for the sample that includes the required implementation for creating a cross-platform desktop application based on OpenGL. There are other packages for other MonoGame targets. MonoGame.Content.Builder.Task—This small package contains MSBuild properties and tasks for running MonoGame's content pipeline. <Project Sdk=\"Microsoft.NET.Sdk\">\n  <PropertyGroup>\n    <OutputType>WinExe</OutputType>\n    <TargetFramework>net8.0</TargetFramework>\n    <RollForward>Major</RollForward>\n    <PublishReadyToRun>false</PublishReadyToRun>\n    <TieredCompilation>false</TieredCompilation>\n  </PropertyGroup>\n\n  <PropertyGroup>\n    <ApplicationManifest>app.manifest</ApplicationManifest>\n    <ApplicationIcon>Icon.ico</ApplicationIcon>\n  </PropertyGroup>\n  \n  <ItemGroup>\n    <None Remove=\"Icon.ico\" />\n    <None Remove=\"Icon.bmp\" />\n  </ItemGroup>\n  \n  <ItemGroup>\n    <EmbeddedResource Include=\"Icon.ico\">\n      <LogicalName>Icon.ico</LogicalName>\n    </EmbeddedResource>\n    <EmbeddedResource Include=\"Icon.bmp\">\n      <LogicalName>Icon.bmp</LogicalName>\n    </EmbeddedResource>\n  </ItemGroup>\n\n  <ItemGroup>\n    <PackageReference Include=\"MonoGame.Framework.DesktopGL\" Version=\"3.8.*\" />\n    <PackageReference Include=\"MonoGame.Content.Builder.Task\" Version=\"3.8.*\" />\n  </ItemGroup>\n\n  <Target Name=\"RestoreDotnetTools\" BeforeTargets=\"Restore\">\n    <Message Text=\"Restoring dotnet tools\" Importance=\"High\" />\n    <Exec Command=\"dotnet tool restore\" />\n  </Target>\n</Project>\n Another interesting point is the additional MSBuild target RestoreDotnetTools which runs dotnet tool restore just before restoring NuGet packages. This restores the various mgcb dotnet tools that are included as part of the manifest in .config/dotnet-tools.json. These are the MonoGame Content Builder (MGCB) tools which provide graphical and command-line tools for editing and optimising your content for processing: {\n  \"version\": 1,\n  \"isRoot\": true,\n  \"tools\": {\n    \"dotnet-mgcb\": {\n      \"version\": \"3.8.3\",\n      \"commands\": [ \"mgcb\" ]\n    },\n    \"dotnet-mgcb-editor\": {\n      \"version\": \"3.8.3\",\n      \"commands\": [ \"mgcb-editor\" ]\n    },\n    \"dotnet-mgcb-editor-linux\": {\n      \"version\": \"3.8.3\",\n      \"commands\": [ \"mgcb-editor-linux\" ]\n    },\n    \"dotnet-mgcb-editor-windows\": {\n      \"version\": \"3.8.3\",\n      \"commands\": [ \"mgcb-editor-windows\" ]\n    },\n    \"dotnet-mgcb-editor-mac\": {\n      \"version\": \"3.8.3\",\n      \"commands\": [ \"mgcb-editor-mac\" ]\n    }\n  }\n}\n The manifest includes 5 different tools: dotnet-mgcb—The MonoGame Content Builder (MGCB) command line tool is used for optimizing content for runtime use. dotnet-mgcb-editor—The MonoGame Framework Content Builder Editor (MGCB-Editor) is a graphical tool used for editing your content projects ready for processing. There are Windows/Linux/Mac specific versions of the tool, but as far as I can tell, you can just run the generic tool. Finally, we come to the code. The Program.cs file leverages all the modern .NET goodness to be just two lines: using var game = new MyGame.Game1();\ngame.Run();\n Finally, we can see the Game1 class itself. This very simple example includes the basics—creating a GraphicsDeviceManager and a SpriteBatch—but mostly highlights the different stages in the XNA/MonoGame game loop that you should override to create your own game. using Microsoft.Xna.Framework;\nusing Microsoft.Xna.Framework.Graphics;\nusing Microsoft.Xna.Framework.Input;\n\nnamespace MyGame;\n\npublic class Game1 : Game\n{\n    private GraphicsDeviceManager _graphics;\n    private SpriteBatch _spriteBatch;\n\n    public Game1()\n    {\n        _graphics = new GraphicsDeviceManager(this);\n        Content.RootDirectory = \"Content\";\n        IsMouseVisible = true;\n    }\n\n    protected override void Initialize()\n    {\n        // TODO: Add your initialization logic here\n\n        base.Initialize();\n    }\n\n    protected override void LoadContent()\n    {\n        _spriteBatch = new SpriteBatch(GraphicsDevice);\n\n        // TODO: use this.Content to load your game content here\n    }\n\n    protected override void Update(GameTime gameTime)\n    {\n        if (GamePad.GetState(PlayerIndex.One).Buttons.Back == ButtonState.Pressed || Keyboard.GetState().IsKeyDown(Keys.Escape))\n            Exit();\n\n        // TODO: Add your update logic here\n\n        base.Update(gameTime);\n    }\n\n    protected override void Draw(GameTime gameTime)\n    {\n        GraphicsDevice.Clear(Color.CornflowerBlue);\n\n        // TODO: Add your drawing code here\n\n        base.Draw(gameTime);\n    }\n}\n Aside from some basic setup, the sample game essentially contains just two behaviours: Listen for the Escape key on the keyboard, or the Back button on a keypad, and exit the game if they're pressed. Paint the colour Cornflower Blue as the game background. And that's essentially all there is to it. You can run the template using dotnet run, or by pushing F5 in your IDE. The resulting \"game\" just shows a blue screen until you hit exit:  And that's all there is to it. In the next post I'll show how I started from this sample to port a Microsoft XNA game from 2009 to run on .NET 8 in just a few hours. Summary In this post I described a brief history of the Microsoft XNA framework and the creation of MonoGame as an open-source implementation of the Microsoft XNA 4.0 API. I then discussed the basic requirements for building a MonoGame Windows application: the .NET 8 SDK and the .NET CLI templates. Finally, we took a tour of the sample app to see the relevant NuGet packages, tools, and code that the sample uses. In the next post I'll show how I started from this sample to port a Microsoft XNA game to MonoGame in just a few hours."
  },
  {
    "itemId": "https://andrewlock.net/converting-a-docker-compose-file-to-aspire/",
    "raw": "<img src=\"https://andrewlock.net/content/images/2025/listmonk_banner.png\" /><p>In this post, I take a <em>docker-compose.yml</em> file for <a href=\"https://listmonk.app/\">the open-source mailing list manager listmonk</a>, and rewrite it to use .NET Aspire. Functionally, this results in the same app, but as an app directly modelled in .NET it's (theoretically) easier to both run the stack locally with your IDE <em>and</em> to generate \"publish\" artifacts for deploying the app. To prove the app is modelled as expected I subsequently <em>publish</em> the app again as a <em>docker-compose.yml</em> file, and compare the output.</p> <blockquote> <p>Note that I have only dabbled with Aspire, not used it in anger, and I haven't got my head around all of the intricacies yet. If you see something weird in this post—I'm not doing something in the best way, or something doesn't work as I <em>think</em> it does—please do leave a comment and correct me!</p> </blockquote> <p>I start by giving a high-level overview of .NET Aspire and why you might want to use it. I then describe the listmonk app, and show the docker-compose setup we're seeking to implement. Piece by piece, we'll convert the standard <em>docker-compose.yml</em> file to an Aspire app host. Finally, we'll add a publisher which allows aspire to generate a <em>docker-compose.yml</em> file <em>from</em> the app host project, and see how it compares to the original.</p> <h2 id=\"what-is-net-aspire-\" class=\"heading-with-anchor\"><a href=\"#what-is-net-aspire-\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">What is .NET Aspire?</a></h2> <p>According to <a href=\"https://learn.microsoft.com/en-us/dotnet/aspire/get-started/aspire-overview\">the documentation</a>:</p> <blockquote> <p>.NET Aspire provides tools, templates, and packages to help you build observable, production-ready apps. Delivered through NuGet packages, .NET Aspire simplifies common challenges in modern app development.</p> </blockquote> <p>The primary focus of .NET Aspire is the <em>local</em> development experience. It's intended to simplify the interconnections (and associated configuration) that are often required to connect various parts of your system.</p> <p>For example, most apps require a database. When you're working locally, maybe you spin up a PostgreSQL Docker container, or perhaps you rely on a local SQL Server installation. Either way, there are usernames, passwords, ports, connection strings, database names… all things that you need to feed both into the configuration of the database, but <em>also</em> into any apps and services that <em>use</em> the database.</p> <p>Inherently, this configuration isn't <em>hard</em>. After all, we've been doing it for decades. But it <em>is</em> annoying and somewhat error prone. What's more, if someone new starts trying to work on the same project, they have to decode all these requirements for running the app before they can get started. With .NET Aspire the goal is to simplify that process.</p> <p>.NET Aspire has many different parts to it, but at its core, it has an app host project. This is a .NET project which describes and models all the interconnections between your apps. This is where you declare that you need <em>this</em> database with <em>that</em> password, and so on.</p> <p>There's a lot more to .NET Aspire, especially if you're building .NET applications—you can ensure your .NET apps are automatically injected with connection strings, for example—but the app host <em>isn't</em> strictly tied to .NET. The app <em>itself</em> is .NET, but that's just the language for modelling the interconnections between services. It can be used to model <em>any</em> applications, very similar to how a <em>docker-compose.yml</em> file can model any docker-based applications.</p> <h2 id=\"what-is-listmonk-\" class=\"heading-with-anchor\"><a href=\"#what-is-listmonk-\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">What is listmonk?</a></h2> <p><a href=\"https://listmonk.app/\">Listmonk</a> is a self-hosted newsletter and mailing list manager. It doesn't handle sending emails itself, it relies on third-party services for that. Rather, listmonk handles designing email campaigns, managing subscribers, and performing analytics.</p> <p><img src=\"/content/images/2025/lismonk.png\" alt=\"The listmonk app\"></p> <p>Listmonk is written in Go, using a Vue frontend with Buefy for UI, and is free and open source software licensed under AGPLv3. Being Go, you can run listmonk <a href=\"https://listmonk.app/docs/installation/#binary\">as a single binary</a>, but there's <a href=\"https://listmonk.app/docs/installation/#docker\">also a suggested <em>docker-compose.yml</em></a> for running the application.</p> <p>For this post, I'm not going to be looking into the listmonk app itself at all. All I'm interested in is whether it's possible to create a .NET aspire app host project for running listmonk using the same suggested setup as the docker-compose file.</p> <p>For reference, I'm using <a href=\"https://github.com/knadh/listmonk/blob/86f808bc77ccded66a42bc19d96ebbd8d5e199ff/docker-compose.yml\">the docker-compose file</a> at the time of the v5.0.1 release, reproduced below. This file only contains two services:</p> <ul><li><code>app</code>. The listmonk app itself, running as a docker container.</li> <li><code>db</code>. A PostgreSQL database, again running as a docker container.</li></ul> <p>There's a bunch of shared configuration between the two apps, some volumes and bind mounts, and various other docker-compose specific configuration. For the rest of the app we'll aim to convert this entirely to an Aspire app.</p> <p>For completeness, <a href=\"https://github.com/knadh/listmonk/blob/86f808bc77ccded66a42bc19d96ebbd8d5e199ff/docker-compose.yml\">this is the original <em>docker-compose.yml</em> file</a> we're converting:</p> <pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">x-db-credentials</span><span class=\"token punctuation\">:</span> <span class=\"token important\">&amp;db-credentials</span>                             <span class=\"token comment\"># Use the default POSTGRES_ credentials if they're available or simply default to \"listmonk\"</span>\n  <span class=\"token key atrule\">POSTGRES_USER</span><span class=\"token punctuation\">:</span> <span class=\"token important\">&amp;db-user</span> listmonk                            <span class=\"token comment\"># for database user, password, and database name</span>\n  <span class=\"token key atrule\">POSTGRES_PASSWORD</span><span class=\"token punctuation\">:</span> <span class=\"token important\">&amp;db-password</span> listmonk\n  <span class=\"token key atrule\">POSTGRES_DB</span><span class=\"token punctuation\">:</span> <span class=\"token important\">&amp;db-name</span> listmonk\n\n<span class=\"token key atrule\">services</span><span class=\"token punctuation\">:</span>\n  <span class=\"token comment\"># listmonk app</span>\n  <span class=\"token key atrule\">app</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> listmonk/listmonk<span class=\"token punctuation\">:</span>latest\n    <span class=\"token key atrule\">container_name</span><span class=\"token punctuation\">:</span> listmonk_app\n    <span class=\"token key atrule\">restart</span><span class=\"token punctuation\">:</span> unless<span class=\"token punctuation\">-</span>stopped\n    <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token string\">\"9000:9000\"</span>                                           <span class=\"token comment\"># To change the externally exposed port, change to: $custom_port:9000</span>\n    <span class=\"token key atrule\">networks</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> listmonk\n    <span class=\"token key atrule\">hostname</span><span class=\"token punctuation\">:</span> listmonk.example.com                            <span class=\"token comment\"># Recommend using FQDN for hostname</span>\n    <span class=\"token key atrule\">depends_on</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> db\n    <span class=\"token key atrule\">command</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>sh<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">-</span>c<span class=\"token punctuation\">,</span> <span class=\"token string\">\"./listmonk --install --idempotent --yes --config '' &amp;&amp; ./listmonk --upgrade --yes --config '' &amp;&amp; ./listmonk --config ''\"</span><span class=\"token punctuation\">]</span>\n                                                              <span class=\"token comment\"># --config (file) param is set to empty so that listmonk only uses the env vars (below) for config.</span>\n                                                              <span class=\"token comment\"># --install --idempotent ensures that DB installation happens only once on an empty DB, on the first ever start.</span>\n                                                              <span class=\"token comment\"># --upgrade automatically runs any DB migrations when a new image is pulled.</span>\n\n    <span class=\"token key atrule\">environment</span><span class=\"token punctuation\">:</span>                                              <span class=\"token comment\"># The same params as in config.toml are passed as env vars here.</span>\n      <span class=\"token key atrule\">LISTMONK_app__address</span><span class=\"token punctuation\">:</span> 0.0.0.0<span class=\"token punctuation\">:</span><span class=\"token number\">9000</span>\n      <span class=\"token key atrule\">LISTMONK_db__user</span><span class=\"token punctuation\">:</span> <span class=\"token important\">*db-user</span>\n      <span class=\"token key atrule\">LISTMONK_db__password</span><span class=\"token punctuation\">:</span> <span class=\"token important\">*db-password</span>\n      <span class=\"token key atrule\">LISTMONK_db__database</span><span class=\"token punctuation\">:</span> <span class=\"token important\">*db-name</span>\n      <span class=\"token key atrule\">LISTMONK_db__host</span><span class=\"token punctuation\">:</span> listmonk_db\n      <span class=\"token key atrule\">LISTMONK_db__port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">5432</span>\n      <span class=\"token key atrule\">LISTMONK_db__ssl_mode</span><span class=\"token punctuation\">:</span> disable\n      <span class=\"token key atrule\">LISTMONK_db__max_open</span><span class=\"token punctuation\">:</span> <span class=\"token number\">25</span>\n      <span class=\"token key atrule\">LISTMONK_db__max_idle</span><span class=\"token punctuation\">:</span> <span class=\"token number\">25</span>\n      <span class=\"token key atrule\">LISTMONK_db__max_lifetime</span><span class=\"token punctuation\">:</span> 300s\n      <span class=\"token key atrule\">TZ</span><span class=\"token punctuation\">:</span> Etc/UTC\n      <span class=\"token key atrule\">LISTMONK_ADMIN_USER</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span>LISTMONK_ADMIN_USER<span class=\"token punctuation\">:</span><span class=\"token punctuation\">-</span><span class=\"token punctuation\">}</span>           <span class=\"token comment\"># If these (optional) are set during the first `docker compose up`, then the Super Admin user is automatically created.</span>\n      <span class=\"token key atrule\">LISTMONK_ADMIN_PASSWORD</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span>LISTMONK_ADMIN_PASSWORD<span class=\"token punctuation\">:</span><span class=\"token punctuation\">-</span><span class=\"token punctuation\">}</span>   <span class=\"token comment\"># Otherwise, the user can be setup on the web app after the first visit to http://localhost:9000</span>\n    <span class=\"token key atrule\">volumes</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> ./uploads<span class=\"token punctuation\">:</span>/listmonk/uploads<span class=\"token punctuation\">:</span>rw                        <span class=\"token comment\"># Mount an uploads directory on the host to /listmonk/uploads inside the container.</span>\n                                                              <span class=\"token comment\"># To use this, change directory path in Admin -&gt; Settings -&gt; Media to /listmonk/uploads</span>\n\n  <span class=\"token comment\"># Postgres database</span>\n  <span class=\"token key atrule\">db</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> postgres<span class=\"token punctuation\">:</span>17<span class=\"token punctuation\">-</span>alpine\n    <span class=\"token key atrule\">container_name</span><span class=\"token punctuation\">:</span> listmonk_db\n    <span class=\"token key atrule\">restart</span><span class=\"token punctuation\">:</span> unless<span class=\"token punctuation\">-</span>stopped\n    <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token string\">\"127.0.0.1:5432:5432\"</span>                                 <span class=\"token comment\"># Only bind on the local interface. To connect to Postgres externally, change this to 0.0.0.0</span>\n    <span class=\"token key atrule\">networks</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> listmonk\n    <span class=\"token key atrule\">environment</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">&lt;&lt;</span><span class=\"token punctuation\">:</span> <span class=\"token important\">*db-credentials</span>\n    <span class=\"token key atrule\">healthcheck</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">test</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"CMD-SHELL\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"pg_isready -U listmonk\"</span><span class=\"token punctuation\">]</span>\n      <span class=\"token key atrule\">interval</span><span class=\"token punctuation\">:</span> 10s\n      <span class=\"token key atrule\">timeout</span><span class=\"token punctuation\">:</span> 5s\n      <span class=\"token key atrule\">retries</span><span class=\"token punctuation\">:</span> <span class=\"token number\">6</span>\n    <span class=\"token key atrule\">volumes</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">type</span><span class=\"token punctuation\">:</span> volume\n        <span class=\"token key atrule\">source</span><span class=\"token punctuation\">:</span> listmonk<span class=\"token punctuation\">-</span>data\n        <span class=\"token key atrule\">target</span><span class=\"token punctuation\">:</span> /var/lib/postgresql/data\n\n<span class=\"token key atrule\">networks</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">listmonk</span><span class=\"token punctuation\">:</span>\n\n<span class=\"token key atrule\">volumes</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">listmonk-data</span><span class=\"token punctuation\">:</span>\n</code></pre> <p>Before we can get started on the conversion, we'll install the prerequisites for Aspire.</p> <h2 id=\"getting-started-with-aspire\" class=\"heading-with-anchor\"><a href=\"#getting-started-with-aspire\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Getting started with Aspire</a></h2> <p>To work with Aspire, I first made sure I had <a href=\"https://learn.microsoft.com/en-us/dotnet/aspire/fundamentals/setup-tooling?tabs=windows&amp;pivots=dotnet-cli#install-net-aspire-prerequisites\">installed the prerequisites</a>:</p> <ul><li>.NET 9 SDK (you can also use .NET 8)</li> <li>Docker Desktop for Windows (you can also use other OCI runtimes like Podman)</li></ul> <p>It's <em>very</em> likely you already have those if you're a .NET developer, which is nice. I primarily used <a href=\"https://blog.jetbrains.com/dotnet/2024/02/19/jetbrains-rider-and-the-net-aspire-plugin/\">JetBrains Rider</a> to work on the app, but for this post I primarily use the .NET CLI.</p> <p>Once you have the prerequisites, it's best to install the Aspire project templates. This makes it easy to create new projects. Install the templates with <code>dotnet new install Aspire.ProjectTemplates</code>:</p> <pre class=\"language-bash\"><code class=\"language-bash\">$ dotnet new <span class=\"token function\">install</span> Aspire.ProjectTemplates\nThe following template packages will be installed:\n   Aspire.ProjectTemplates\n\nSuccess: Aspire.ProjectTemplates::9.3.0 installed the following templates:\nTemplate Name                  Short Name              Language  Tags\n-----------------------------  ----------------------  --------  -------------------------------------------------------------------------------\n.NET Aspire App Host           aspire-apphost          <span class=\"token punctuation\">[</span>C<span class=\"token comment\">#]      Common/.NET Aspire/Cloud</span>\n.NET Aspire Empty App          aspire                  <span class=\"token punctuation\">[</span>C<span class=\"token comment\">#]      Common/.NET Aspire/Cloud/Web/Web API/API/Service</span>\n.NET Aspire Service Defaults   aspire-servicedefaults  <span class=\"token punctuation\">[</span>C<span class=\"token comment\">#]      Common/.NET Aspire/Cloud/Web/Web API/API/Service</span>\n.NET Aspire Starter App        aspire-starter          <span class=\"token punctuation\">[</span>C<span class=\"token comment\">#]      Common/.NET Aspire/Blazor/Web/Web API/API/Service/Cloud/Test/MSTest/NUnit/xUnit</span>\n.NET Aspire Test Project <span class=\"token punctuation\">(</span><span class=\"token punctuation\">..</span>.  aspire-mstest           <span class=\"token punctuation\">[</span>C<span class=\"token comment\">#]      Common/.NET Aspire/Cloud/Web/Web API/API/Service/Test/MSTest</span>\n.NET Aspire Test Project <span class=\"token punctuation\">(</span><span class=\"token punctuation\">..</span>.  aspire-nunit            <span class=\"token punctuation\">[</span>C<span class=\"token comment\">#]      Common/.NET Aspire/Cloud/Web/Web API/API/Service/Test/NUnit</span>\n.NET Aspire Test Project <span class=\"token punctuation\">(</span><span class=\"token punctuation\">..</span>.  aspire-xunit            <span class=\"token punctuation\">[</span>C<span class=\"token comment\">#]      Common/.NET Aspire/Cloud/Web/Web API/API/Service/Test/xUnit</span>\n</code></pre> <p>The template I wanted was <code>aspire-apphost</code>. This creates <em>just</em> the app host project, without creating associated .NET apps or class libraries. I created a new folder, and then created the new project inside it:</p> <pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">mkdir</span> LismonkAspire\n<span class=\"token builtin class-name\">cd</span> LismonkAspire\ndotnet new aspire-apphost\n</code></pre> <p>This created a .NET 9 Aspire 9.3 app host project. The <em>AppHost.cs</em> project contained the following code; effectively an empty app host project:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> builder <span class=\"token operator\">=</span> DistributedApplication<span class=\"token punctuation\">.</span><span class=\"token function\">CreateBuilder</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nbuilder<span class=\"token punctuation\">.</span><span class=\"token function\">Build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre> <p>There's a bunch of additional files, but for now, this was what I was interested in, so I set about modelling the listmonk services in this file. I started with the PostgreSQL database, seeing as the listmonk app depends on it.</p> <h2 id=\"modelling-the-database-in-aspire\" class=\"heading-with-anchor\"><a href=\"#modelling-the-database-in-aspire\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Modelling the database in Aspire</a></h2> <p>The base Aspire app host project includes the ability to <a href=\"https://learn.microsoft.com/en-us/dotnet/aspire/fundamentals/app-host-overview#built-in-resource-types\">model various resources</a>, such as executables, .NET apps, and docker containers. However there are also various <a href=\"https://learn.microsoft.com/en-us/dotnet/aspire/get-started/aspire-overview#net-aspire-integrations\"><em>integrations</em></a>, which are NuGet package \"plugins\", intended to simplify connecting to common services or platforms. There is just such a package for PostgreSQL.</p> <p>To install the integration, simply install <a href=\"https://www.nuget.org/packages/Aspire.Hosting.PostgreSQL#readme-body-tab\">the relevant NuGet package</a>:</p> <pre class=\"language-bash\"><code class=\"language-bash\">dotnet <span class=\"token function\">add</span> package Aspire.Hosting.PostgreSQL\n</code></pre> <p>This installs v9.3.0 of the NuGet package in the project and makes the <code>AddPostgres()</code> extension method available. The section of the docker-compose we need to model is this:</p> <pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">x-db-credentials</span><span class=\"token punctuation\">:</span> <span class=\"token important\">&amp;db-credentials</span>                             <span class=\"token comment\"># Use the default POSTGRES_ credentials if they're available or simply default to \"listmonk\"</span>\n  <span class=\"token key atrule\">POSTGRES_USER</span><span class=\"token punctuation\">:</span> <span class=\"token important\">&amp;db-user</span> listmonk                            <span class=\"token comment\"># for database user, password, and database name</span>\n  <span class=\"token key atrule\">POSTGRES_PASSWORD</span><span class=\"token punctuation\">:</span> <span class=\"token important\">&amp;db-password</span> listmonk\n  <span class=\"token key atrule\">POSTGRES_DB</span><span class=\"token punctuation\">:</span> <span class=\"token important\">&amp;db-name</span> listmonk\n\n<span class=\"token key atrule\">services</span><span class=\"token punctuation\">:</span>\n  <span class=\"token comment\"># Postgres database</span>\n  <span class=\"token key atrule\">db</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> postgres<span class=\"token punctuation\">:</span>17<span class=\"token punctuation\">-</span>alpine\n    <span class=\"token key atrule\">container_name</span><span class=\"token punctuation\">:</span> listmonk_db\n    <span class=\"token key atrule\">restart</span><span class=\"token punctuation\">:</span> unless<span class=\"token punctuation\">-</span>stopped\n    <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token string\">\"127.0.0.1:5432:5432\"</span>                                 <span class=\"token comment\"># Only bind on the local interface. To connect to Postgres externally, change this to 0.0.0.0</span>\n    <span class=\"token key atrule\">networks</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> listmonk\n    <span class=\"token key atrule\">environment</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">&lt;&lt;</span><span class=\"token punctuation\">:</span> <span class=\"token important\">*db-credentials</span>\n    <span class=\"token key atrule\">healthcheck</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">test</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"CMD-SHELL\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"pg_isready -U listmonk\"</span><span class=\"token punctuation\">]</span>\n      <span class=\"token key atrule\">interval</span><span class=\"token punctuation\">:</span> 10s\n      <span class=\"token key atrule\">timeout</span><span class=\"token punctuation\">:</span> 5s\n      <span class=\"token key atrule\">retries</span><span class=\"token punctuation\">:</span> <span class=\"token number\">6</span>\n    <span class=\"token key atrule\">volumes</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">type</span><span class=\"token punctuation\">:</span> volume\n        <span class=\"token key atrule\">source</span><span class=\"token punctuation\">:</span> listmonk<span class=\"token punctuation\">-</span>data\n        <span class=\"token key atrule\">target</span><span class=\"token punctuation\">:</span> /var/lib/postgresql/data\n</code></pre> <p>The first part of this, the <code>x-db-credentials</code> section, may be unfamiliar to you. It's a way of getting some \"code-reuse\" in YAML. I'm not going to go into it in detail here. For now, it's enough to know that the <code>db</code> service <em>effectively</em> has the following environment variables defined:</p> <pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">environment</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">POSTGRES_USER</span><span class=\"token punctuation\">:</span> listmonk\n  <span class=\"token key atrule\">POSTGRES_PASSWORD</span><span class=\"token punctuation\">:</span> listmonk\n  <span class=\"token key atrule\">POSTGRES_DB</span><span class=\"token punctuation\">:</span> listmonk\n</code></pre> <p>With that in mind, we'll now model this service in Aspire. I've opted for a close-to direct representation, with some exceptions, which I'll describe later. I've annotated the code below to explain what's going on:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> builder <span class=\"token operator\">=</span> DistributedApplication<span class=\"token punctuation\">.</span><span class=\"token function\">CreateBuilder</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Create these values as secrets</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> postgresUser <span class=\"token operator\">=</span> builder<span class=\"token punctuation\">.</span><span class=\"token function\">AddParameter</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"db-user\"</span><span class=\"token punctuation\">,</span> <span class=\"token named-parameter punctuation\">secret</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> postgresPassword <span class=\"token operator\">=</span> builder<span class=\"token punctuation\">.</span><span class=\"token function\">AddParameter</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"db-password\"</span><span class=\"token punctuation\">,</span> <span class=\"token named-parameter punctuation\">secret</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Add a default for the database name </span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> postgresDbName <span class=\"token operator\">=</span> builder<span class=\"token punctuation\">.</span><span class=\"token function\">AddParameter</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"db-name\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"listmonk\"</span><span class=\"token punctuation\">,</span> <span class=\"token named-parameter punctuation\">publishValueAsDefault</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Create these as variables to be used elsewhere</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> dbPort <span class=\"token operator\">=</span> <span class=\"token number\">5432</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> dbContainerName <span class=\"token operator\">=</span> <span class=\"token string\">\"listmonk_db\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Sets the POSTGRES_USER and POSTGRES_PASSWORD implicitly</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> db <span class=\"token operator\">=</span> builder<span class=\"token punctuation\">.</span><span class=\"token function\">AddPostgres</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"db\"</span><span class=\"token punctuation\">,</span> postgresUser<span class=\"token punctuation\">,</span> postgresPassword<span class=\"token punctuation\">,</span> <span class=\"token named-parameter punctuation\">port</span><span class=\"token punctuation\">:</span> dbPort<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">WithImage</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"postgres\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"17-alpine\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// Ensure we use the same image as docker-compose</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">WithContainerName</span><span class=\"token punctuation\">(</span>dbContainerName<span class=\"token punctuation\">)</span> <span class=\"token comment\">// Use a fixed container name</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">WithLifetime</span><span class=\"token punctuation\">(</span>ContainerLifetime<span class=\"token punctuation\">.</span>Persistent<span class=\"token punctuation\">)</span> <span class=\"token comment\">// Don't tear-down the container when we stop Aspire</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">WithDataVolume</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"listmonk-data\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// Wire up the PostgreSQL data volume</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">WithEnvironment</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"POSTGRES_DB\"</span><span class=\"token punctuation\">,</span> postgresDbName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Explicitly set this value, so that it's auto-created</span>\n</code></pre> <p>One big advantage of .NET Aspire over YAML is that creating \"variables\" to share in multiple places is simple and intuitive. Instead of having to create YAML \"anchors\" and reference them elsewhere, we simply create values and pass them around.</p> <p>What's more, by using <code>AddParameter()</code> we can declare that a value should be provided <em>externally</em>, as it is above for <code>db-user</code> and <code>db-password</code>. What's more, we can mark the fact that these should be secrets, so that if we publish our Aspire app, Aspire can handle the fact they contain sensitive data.</p> <p>There's a few things from the <em>docker-compose.yml</em> that <em>aren't</em> modelled in Aspire, namely the \"restart behaviour\" and the healthcheck. I left these out, as the <code>AddPostgres()</code> integration adds its own health check, and these are fundamentally specific to docker-compose; we'll look at them again later when we configure a Docker publisher.</p> <h2 id=\"modelling-the-app-in-aspire\" class=\"heading-with-anchor\"><a href=\"#modelling-the-app-in-aspire\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Modelling the app in Aspire</a></h2> <p>With the database implemented, we move on to the listmonk app itself. This, again, is implemented as a Docker container, but there's no helpful integration or extension method for it; we'll have to model this one ourselves. Luckily, there's not much to configure; we're mostly just setting a bunch of environment variables, exposing the app over port 9000, and changing the command used to run the app:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token comment\">// Optional initial super-user configuration</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> listmonkSuperUser <span class=\"token operator\">=</span> builder<span class=\"token punctuation\">.</span><span class=\"token function\">AddParameter</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"listmonk-admin-user\"</span><span class=\"token punctuation\">,</span> <span class=\"token named-parameter punctuation\">secret</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> listmonkSuperUserPassword <span class=\"token operator\">=</span> builder<span class=\"token punctuation\">.</span><span class=\"token function\">AddParameter</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"listmonk-admin-password\"</span><span class=\"token punctuation\">,</span> <span class=\"token named-parameter punctuation\">secret</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> publicPort <span class=\"token operator\">=</span> <span class=\"token number\">9000</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// The port to access the app from the browser</span>\n\nbuilder<span class=\"token punctuation\">.</span><span class=\"token function\">AddContainer</span><span class=\"token punctuation\">(</span><span class=\"token named-parameter punctuation\">name</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"listmonk\"</span><span class=\"token punctuation\">,</span> <span class=\"token named-parameter punctuation\">image</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"listmonk/listmonk\"</span><span class=\"token punctuation\">,</span> <span class=\"token named-parameter punctuation\">tag</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"latest\"</span><span class=\"token punctuation\">)</span> \n    <span class=\"token punctuation\">.</span><span class=\"token function\">WaitFor</span><span class=\"token punctuation\">(</span>db<span class=\"token punctuation\">)</span> <span class=\"token comment\">// The app depends on the db, so wait for it to be healthy</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">WithHttpEndpoint</span><span class=\"token punctuation\">(</span><span class=\"token named-parameter punctuation\">port</span><span class=\"token punctuation\">:</span> publicPort<span class=\"token punctuation\">,</span> <span class=\"token named-parameter punctuation\">targetPort</span><span class=\"token punctuation\">:</span> <span class=\"token number\">9000</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// Expose port 9000 in the container as \"publicPort\"</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">WithExternalHttpEndpoints</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// The HTTP endpoint should be publicly accessibly</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">WithArgs</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sh\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"-c\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"./listmonk --install --idempotent --yes --config '' &amp;&amp; ./listmonk --upgrade --yes --config '' &amp;&amp; ./listmonk --config ''\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">WithBindMount</span><span class=\"token punctuation\">(</span><span class=\"token named-parameter punctuation\">source</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"./uploads\"</span><span class=\"token punctuation\">,</span> <span class=\"token named-parameter punctuation\">target</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"/listmonk/uploads\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// mount the folder ./uploads on the host into the container </span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">WithEnvironment</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"LISTMONK_app__address\"</span><span class=\"token punctuation\">,</span> <span class=\"token interpolation-string\"><span class=\"token string\">$\"0.0.0.0:</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">publicPort<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// This points to the app itself (used in emails)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">WithEnvironment</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"LISTMONK_db__user\"</span><span class=\"token punctuation\">,</span> postgresUser<span class=\"token punctuation\">)</span> <span class=\"token comment\">// Database connection settings</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">WithEnvironment</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"LISTMONK_db__password\"</span><span class=\"token punctuation\">,</span> postgresPassword<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">WithEnvironment</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"LISTMONK_db__database\"</span><span class=\"token punctuation\">,</span> postgresDbName<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">WithEnvironment</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"LISTMONK_db__host\"</span><span class=\"token punctuation\">,</span> dbContainerName<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">WithEnvironment</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"LISTMONK_db__port\"</span><span class=\"token punctuation\">,</span> dbPort<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">WithEnvironment</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"LISTMONK_db__ssl_mode\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"disable\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">WithEnvironment</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"LISTMONK_db__max_open\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"25\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">WithEnvironment</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"LISTMONK_db__max_idle\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"25\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">WithEnvironment</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"LISTMONK_db__max_lifetime\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"300s\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">WithEnvironment</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"TZ\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Etc/UTC\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">WithEnvironment</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"LISTMONK_ADMIN_USER\"</span><span class=\"token punctuation\">,</span> listmonkSuperUser<span class=\"token punctuation\">)</span> <span class=\"token comment\">// Optional super-user</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">WithEnvironment</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"LISTMONK_ADMIN_PASSWORD\"</span><span class=\"token punctuation\">,</span> listmonkSuperUserPassword<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre> <p>Most of the variables we set are values that are mirrored in the <code>db</code> configuration. Using variables means we can easily flow the values to both places, which highlights one of the benefits of Aspire.</p> <blockquote> <p>There's a number of things I'm fairly sure I'm not doing \"correctly\" here. For example, the <code>dbContainerName</code> and <code>dbPort</code>; I hard-coded those as variables when configuring the <code>db</code> service and re-used them here. Is that reasonable? Is that a problem if I (for example) later decide to run my PostgreSQL instance as a service instead of a Docker container? Probably, but that's always something I could address later I guess.</p> <p>Another example is the public port: I hardcoded it to <code>9000</code>, because that's what the docker-compose file does, but I would probably <em>like</em> to just be able to have Aspire choose the host port automatically and then have that flow through. That <em>almost</em> works, but I couldn't see an easy way to have it set the <code>LISTMONK_app__address</code> environment variable to include the host <code>0.0.0.0</code> the way I need it to, without manually creating an <code>EnvironmentCallbackAnnotation</code>. And that just got too ugly.</p> </blockquote> <p>Ignoring the caveats above, theoretically we've now converted the app and can take it for a spin!</p> <h2 id=\"testing-it-out\" class=\"heading-with-anchor\"><a href=\"#testing-it-out\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Testing it out</a></h2> <p>Before we can run the app, we first need to set the values for the parameters we defined in our app host. Given that many of these are marked as secrets, we should probably do this using <a href=\"https://learn.microsoft.com/en-us/aspnet/core/security/app-secrets?view=aspnetcore-9.0&amp;tabs=windows\">user-secrets</a> when running locally. You can edit the user-secrets for your app host using the IDE, or alternatively, set the values using the command line. I opted for the latter, setting some \"super-secret\" values.</p> <pre class=\"language-bash\"><code class=\"language-bash\">dotnet user-secrets <span class=\"token builtin class-name\">set</span> <span class=\"token string\">\"Parameters:db-user\"</span> <span class=\"token string\">\"listmonk\"</span>\ndotnet user-secrets <span class=\"token builtin class-name\">set</span> <span class=\"token string\">\"Parameters:db-password\"</span> <span class=\"token string\">\"listmonk\"</span>\ndotnet user-secrets <span class=\"token builtin class-name\">set</span> <span class=\"token string\">\"Parameters:listmonk-admin-user\"</span> <span class=\"token string\">\"admin-user\"</span>\ndotnet user-secrets <span class=\"token builtin class-name\">set</span> <span class=\"token string\">\"Parameters:listmonk-admin-password\"</span> <span class=\"token string\">\"admin-password\"</span>\n</code></pre> <p>Note that the secrets are all nested under the <code>Parameters</code> key, by prefixing the values with <code>Parameters:</code>. We can now run the app. Either hit F5 in your IDE or type <code>dotnet run</code>, and the app starts up. The Aspire app host starts <a href=\"https://learn.microsoft.com/en-us/dotnet/aspire/fundamentals/dashboard/overview?tabs=bash\">the Aspire dashboard</a>, showing our apps. From there we can view the logs, environment, and various other aspects of our apps:</p> <p><img src=\"/content/images/2025/listmonk_aspire.png\" alt=\"The Aspire dashboard for our listmonk app\"></p> <p>We can also see a link to our listmonk app at http://localhost:9000. Clicking the link opens the app, where we can login with our Admin username and password. And there we have it, our listmonk app, running in Aspire!</p> <p><img src=\"/content/images/2025/listmonk_aspire_2.png\" alt=\"The listmonk app running in Aspire\"></p> <p>With the app modelled in Aspire, I decided to see what it would like if we went the other way: creating the <em>docker-compose.yml</em> file <em>from</em> the Aspire app host.</p> <h2 id=\"publishing-the-app-host-as-a-docker-compose-yml-file\" class=\"heading-with-anchor\"><a href=\"#publishing-the-app-host-as-a-docker-compose-yml-file\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Publishing the app host as a docker-compose.yml file</a></h2> <p>My reason for re-creating the <em>docker-compose.yml</em> file was to see if the <em>generated</em> file looked the same as the <em>source</em> file. If so, then I could be pretty comfortable that Aspire was doing what I intended, at the modelling worked correctly. To do this, I needed to configure an Aspire <a href=\"https://learn.microsoft.com/en-us/dotnet/aspire/whats-new/dotnet-aspire-9.3#deployment--publish\"><em>publisher</em></a>.</p> <p>A publisher takes your Aspire app host and spits out a bunch of artifacts that can be used by other tools. This could be a <em>docker-compose.yml</em> file, which is what I wanted, but it could also be Kubernetes Helm charts, it could be Azure ARM/Bicep templates, or anything really. This part of the Aspire experience is less mature than the local-dev-loop, but with 9.3 it's looking much more promising.</p> <p>I started by installing the preview package of <a href=\"https://www.nuget.org/packages/Aspire.Hosting.Docker/9.3.0-preview.1.25265.20#readme-body-tab\">the <em>Aspire.Hosting.Docker</em> NuGet package</a>. This provides publishing capabilities for the app host:</p> <pre class=\"language-bash\"><code class=\"language-bash\">dotnet <span class=\"token function\">add</span> package Aspire.Hosting.Docker <span class=\"token parameter variable\">--version</span> <span class=\"token number\">9.3</span>.0-preview.1.25265.20\n</code></pre> <p>Next, we enable the publisher by adding the following to our app host:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\">builder<span class=\"token punctuation\">.</span><span class=\"token function\">AddDockerComposeEnvironment</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"docker-compose\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre> <p>That's all we <em>need</em> to do, but I decided to make a few tweaks to the app host, to ensure we more closely replicate the final docker-compose file.</p> <p>First, for the <code>listmonk</code> app, I used the <code>PublishAsDockerComposeService()</code> extension to add the <code>restart: unless-stopped</code> setting to the output <em>docker-compose.yml</em> file.</p> <pre class=\"language-csharp\"><code class=\"language-csharp\">builder<span class=\"token punctuation\">.</span><span class=\"token function\">AddContainer</span><span class=\"token punctuation\">(</span><span class=\"token named-parameter punctuation\">name</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"listmonk\"</span><span class=\"token punctuation\">,</span> <span class=\"token named-parameter punctuation\">image</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"listmonk/listmonk\"</span><span class=\"token punctuation\">,</span> <span class=\"token named-parameter punctuation\">tag</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"latest\"</span><span class=\"token punctuation\">)</span> \n    <span class=\"token comment\">// ... other config not shown</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">PublishAsDockerComposeService</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>resource<span class=\"token punctuation\">,</span> service<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span>\n    <span class=\"token punctuation\">{</span>\n        service<span class=\"token punctuation\">.</span>Restart <span class=\"token operator\">=</span> <span class=\"token string\">\"unless-stopped\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre> <p>Similarly, for the database service, I used the same method to set the <code>restart</code> setting and provide the same <code>healthcheck</code> as the original docker-compose file used:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> db <span class=\"token operator\">=</span> builder<span class=\"token punctuation\">.</span><span class=\"token function\">AddPostgres</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"db\"</span><span class=\"token punctuation\">,</span> postgresUser<span class=\"token punctuation\">,</span> postgresPassword<span class=\"token punctuation\">,</span> <span class=\"token named-parameter punctuation\">port</span><span class=\"token punctuation\">:</span> dbPort<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// ... other config not shown</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">PublishAsDockerComposeService</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>resource<span class=\"token punctuation\">,</span> service<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span>\n    <span class=\"token punctuation\">{</span>\n        service<span class=\"token punctuation\">.</span>Restart <span class=\"token operator\">=</span> <span class=\"token string\">\"unless-stopped\"</span><span class=\"token punctuation\">;</span>\n        service<span class=\"token punctuation\">.</span>Healthcheck <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            Interval <span class=\"token operator\">=</span> <span class=\"token string\">\"10s\"</span><span class=\"token punctuation\">,</span>\n            Timeout <span class=\"token operator\">=</span> <span class=\"token string\">\"5s\"</span><span class=\"token punctuation\">,</span>\n            Retries <span class=\"token operator\">=</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span>\n            StartPeriod <span class=\"token operator\">=</span> <span class=\"token string\">\"0s\"</span><span class=\"token punctuation\">,</span> \n            Test <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"CMD-SHELL\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"pg_isready -U listmonk\"</span><span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre> <p>Note that these settings are <em>only</em> applied when <em>publishing</em> the app, they don't really make sense when running locally.</p> <p>To use the publisher it seems I needed to install <a href=\"https://learn.microsoft.com/en-gb/dotnet/aspire/whats-new/dotnet-aspire-9.2#-aspire-cli-preview\">the Aspire CLI</a>. This is still in preview at the moment, but I couldn't see a way of invoking the publisher without it:</p> <pre class=\"language-bash\"><code class=\"language-bash\">$ dotnet tool <span class=\"token function\">install</span> <span class=\"token parameter variable\">--global</span> aspire.cli <span class=\"token parameter variable\">--prerelease</span>\nYou can invoke the tool using the following command: aspire\nTool <span class=\"token string\">'aspire.cli'</span> <span class=\"token punctuation\">(</span>version <span class=\"token string\">'9.3.0-preview.1.25265.20'</span><span class=\"token punctuation\">)</span> was successfully installed.\n</code></pre> <p>With the tool installed you can run <code>aspire publish</code>, and the CLI will publish the app host as a <em>.env</em> file and a <em>docker-compose.yml</em> file:</p> <pre class=\"language-ps\"><code class=\"language-ps\">&gt; aspire publish -o publish\n🛠  Generating artifacts...\n                                           \n✔  Publishing artifacts ━━━━━━━━━━ 00:00:00\n\n👍  Successfully published artifacts to: D:\\repos\\ListmonkAspire\\publish\n</code></pre> <p>The files produced are shown below. First of all, we have the <em>.env</em> file, which is where all the parameters that we set in user-secrets are set when running in a docker-compose deployment:</p> <pre class=\"language-ini\"><code class=\"language-ini\"><span class=\"token comment\"># Parameter db-user</span>\n<span class=\"token key attr-name\">DB_USER</span><span class=\"token punctuation\">=</span>\n\n<span class=\"token comment\"># Parameter db-password</span>\n<span class=\"token key attr-name\">DB_PASSWORD</span><span class=\"token punctuation\">=</span>\n\n<span class=\"token comment\"># Parameter db-name</span>\n<span class=\"token key attr-name\">DB_NAME</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">listmonk</span>\n\n<span class=\"token comment\"># Parameter listmonk-admin-user</span>\n<span class=\"token key attr-name\">LISTMONK_ADMIN_USER</span><span class=\"token punctuation\">=</span>\n\n<span class=\"token comment\"># Parameter listmonk-admin-password</span>\n<span class=\"token key attr-name\">LISTMONK_ADMIN_PASSWORD</span><span class=\"token punctuation\">=</span>\n</code></pre> <p>Then we have the <em>docker-compose.yml</em> itself. That file is reproduced below</p> <pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">services</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">db</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"docker.io/postgres:17-alpine\"</span>\n    <span class=\"token key atrule\">container_name</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"listmonk_db\"</span>\n    <span class=\"token key atrule\">environment</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">POSTGRES_HOST_AUTH_METHOD</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"scram-sha-256\"</span>\n      <span class=\"token key atrule\">POSTGRES_INITDB_ARGS</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"--auth-host=scram-sha-256 --auth-local=scram-sha-256\"</span>\n      <span class=\"token key atrule\">POSTGRES_USER</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"${DB_USER}\"</span>\n      <span class=\"token key atrule\">POSTGRES_PASSWORD</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"${DB_PASSWORD}\"</span>\n      <span class=\"token key atrule\">POSTGRES_DB</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"${DB_NAME}\"</span>\n    <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token string\">\"5432:5432\"</span>\n    <span class=\"token key atrule\">volumes</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">type</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"volume\"</span>\n        <span class=\"token key atrule\">target</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"/var/lib/postgresql/data\"</span>\n        <span class=\"token key atrule\">source</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"listmonk-data\"</span>\n        <span class=\"token key atrule\">read_only</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span>\n    <span class=\"token key atrule\">networks</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token string\">\"aspire\"</span>\n    <span class=\"token key atrule\">restart</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"unless-stopped\"</span>\n    <span class=\"token key atrule\">healthcheck</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">test</span><span class=\"token punctuation\">:</span>\n        <span class=\"token punctuation\">-</span> <span class=\"token string\">\"CMD-SHELL\"</span>\n        <span class=\"token punctuation\">-</span> <span class=\"token string\">\"pg_isready -U listmonk\"</span>\n      <span class=\"token key atrule\">interval</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"10s\"</span>\n      <span class=\"token key atrule\">timeout</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"5s\"</span>\n      <span class=\"token key atrule\">retries</span><span class=\"token punctuation\">:</span> <span class=\"token number\">6</span>\n      <span class=\"token key atrule\">start_period</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"0s\"</span>\n  <span class=\"token key atrule\">listmonk</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"listmonk/listmonk:latest\"</span>\n    <span class=\"token key atrule\">command</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token string\">\"sh\"</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token string\">\"-c\"</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token string\">\"./listmonk --install --idempotent --yes --config '' &amp;&amp; ./listmonk --upgrade --yes --config '' &amp;&amp; ./listmonk --config ''\"</span>\n    <span class=\"token key atrule\">environment</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">LISTMONK_app__address</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"0.0.0.0:9000\"</span>\n      <span class=\"token key atrule\">LISTMONK_db__user</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"${DB_USER}\"</span>\n      <span class=\"token key atrule\">LISTMONK_db__password</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"${DB_PASSWORD}\"</span>\n      <span class=\"token key atrule\">LISTMONK_db__database</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"${DB_NAME}\"</span>\n      <span class=\"token key atrule\">LISTMONK_db__host</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"listmonk_db\"</span>\n      <span class=\"token key atrule\">LISTMONK_db__port</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"5432\"</span>\n      <span class=\"token key atrule\">LISTMONK_db__ssl_mode</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"disable\"</span>\n      <span class=\"token key atrule\">LISTMONK_db__max_open</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"25\"</span>\n      <span class=\"token key atrule\">LISTMONK_db__max_idle</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"25\"</span>\n      <span class=\"token key atrule\">LISTMONK_db__max_lifetime</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"300s\"</span>\n      <span class=\"token key atrule\">TZ</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Etc/UTC\"</span>\n      <span class=\"token key atrule\">LISTMONK_ADMIN_USER</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"${LISTMONK_ADMIN_USER}\"</span>\n      <span class=\"token key atrule\">LISTMONK_ADMIN_PASSWORD</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"${LISTMONK_ADMIN_PASSWORD}\"</span>\n    <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token string\">\"9000:9000\"</span>\n    <span class=\"token key atrule\">volumes</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">type</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"bind\"</span>\n        <span class=\"token key atrule\">target</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"/listmonk/uploads\"</span>\n        <span class=\"token key atrule\">source</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"D:\\\\repos\\\\blog-examples\\\\ListmonkAspire\\\\uploads\"</span>\n        <span class=\"token key atrule\">read_only</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span>\n    <span class=\"token key atrule\">depends_on</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">db</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">condition</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"service_started\"</span>\n    <span class=\"token key atrule\">networks</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token string\">\"aspire\"</span>\n    <span class=\"token key atrule\">restart</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"unless-stopped\"</span>\n<span class=\"token key atrule\">networks</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">aspire</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">driver</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"bridge\"</span>\n<span class=\"token key atrule\">volumes</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">listmonk-data</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">driver</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"local\"</span>\n</code></pre> <p>There's a few cosmetic differences between this generated file and the original, but for the <em>most</em> part they seem functionally equivalent to me! With a bit more work I'm sure I could make them identical, but they're close-enough for me for this experiment. Overall, I'd say it was a success!</p> <h2 id=\"summary\" class=\"heading-with-anchor\"><a href=\"#summary\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Summary</a></h2> <p>In this post I described .NET Aspire and the open-source mailing-list manager <a href=\"https://listmonk.app/\">listmonk</a>. Listmonk provides a <em>docker-compose.yml</em> file as a suggested approach to deployment, and I wanted to see how easy it would be to convert the project to run as a .NET Aspire app host instead. The listmonk app runs a PostgreSQL docker container as the database and a separate Docker container as the main app.</p> <p>After the conversion, I used the Aspire CLI and the Docker publisher to export the Aspire app as a <em>docker-compose.yml</em> file, to see how close the conversion was. Overall I think the experiment was a success, though I'm sure there are things I could do better in the Aspire app (let me know in the comments if you have suggestions!)</p> ",
    "sanitized": "In this post, I take a docker-compose.yml file for the open-source mailing list manager listmonk, and rewrite it to use .NET Aspire. Functionally, this results in the same app, but as an app directly modelled in .NET it's (theoretically) easier to both run the stack locally with your IDE and to generate \"publish\" artifacts for deploying the app. To prove the app is modelled as expected I subsequently publish the app again as a docker-compose.yml file, and compare the output.  Note that I have only dabbled with Aspire, not used it in anger, and I haven't got my head around all of the intricacies yet. If you see something weird in this post—I'm not doing something in the best way, or something doesn't work as I think it does—please do leave a comment and correct me!  I start by giving a high-level overview of .NET Aspire and why you might want to use it. I then describe the listmonk app, and show the docker-compose setup we're seeking to implement. Piece by piece, we'll convert the standard docker-compose.yml file to an Aspire app host. Finally, we'll add a publisher which allows aspire to generate a docker-compose.yml file from the app host project, and see how it compares to the original. What is .NET Aspire? According to the documentation:  .NET Aspire provides tools, templates, and packages to help you build observable, production-ready apps. Delivered through NuGet packages, .NET Aspire simplifies common challenges in modern app development.  The primary focus of .NET Aspire is the local development experience. It's intended to simplify the interconnections (and associated configuration) that are often required to connect various parts of your system. For example, most apps require a database. When you're working locally, maybe you spin up a PostgreSQL Docker container, or perhaps you rely on a local SQL Server installation. Either way, there are usernames, passwords, ports, connection strings, database names… all things that you need to feed both into the configuration of the database, but also into any apps and services that use the database. Inherently, this configuration isn't hard. After all, we've been doing it for decades. But it is annoying and somewhat error prone. What's more, if someone new starts trying to work on the same project, they have to decode all these requirements for running the app before they can get started. With .NET Aspire the goal is to simplify that process. .NET Aspire has many different parts to it, but at its core, it has an app host project. This is a .NET project which describes and models all the interconnections between your apps. This is where you declare that you need this database with that password, and so on. There's a lot more to .NET Aspire, especially if you're building .NET applications—you can ensure your .NET apps are automatically injected with connection strings, for example—but the app host isn't strictly tied to .NET. The app itself is .NET, but that's just the language for modelling the interconnections between services. It can be used to model any applications, very similar to how a docker-compose.yml file can model any docker-based applications. What is listmonk? Listmonk is a self-hosted newsletter and mailing list manager. It doesn't handle sending emails itself, it relies on third-party services for that. Rather, listmonk handles designing email campaigns, managing subscribers, and performing analytics.  Listmonk is written in Go, using a Vue frontend with Buefy for UI, and is free and open source software licensed under AGPLv3. Being Go, you can run listmonk as a single binary, but there's also a suggested docker-compose.yml for running the application. For this post, I'm not going to be looking into the listmonk app itself at all. All I'm interested in is whether it's possible to create a .NET aspire app host project for running listmonk using the same suggested setup as the docker-compose file. For reference, I'm using the docker-compose file at the time of the v5.0.1 release, reproduced below. This file only contains two services: app. The listmonk app itself, running as a docker container. db. A PostgreSQL database, again running as a docker container. There's a bunch of shared configuration between the two apps, some volumes and bind mounts, and various other docker-compose specific configuration. For the rest of the app we'll aim to convert this entirely to an Aspire app. For completeness, this is the original docker-compose.yml file we're converting: x-db-credentials: &db-credentials                             # Use the default POSTGRES_ credentials if they're available or simply default to \"listmonk\"\n  POSTGRES_USER: &db-user listmonk                            # for database user, password, and database name\n  POSTGRES_PASSWORD: &db-password listmonk\n  POSTGRES_DB: &db-name listmonk\n\nservices:\n  # listmonk app\n  app:\n    image: listmonk/listmonk:latest\n    container_name: listmonk_app\n    restart: unless-stopped\n    ports:\n      - \"9000:9000\"                                           # To change the externally exposed port, change to: $custom_port:9000\n    networks:\n      - listmonk\n    hostname: listmonk.example.com                            # Recommend using FQDN for hostname\n    depends_on:\n      - db\n    command: [sh, -c, \"./listmonk --install --idempotent --yes --config '' && ./listmonk --upgrade --yes --config '' && ./listmonk --config ''\"]\n                                                              # --config (file) param is set to empty so that listmonk only uses the env vars (below) for config.\n                                                              # --install --idempotent ensures that DB installation happens only once on an empty DB, on the first ever start.\n                                                              # --upgrade automatically runs any DB migrations when a new image is pulled.\n\n    environment:                                              # The same params as in config.toml are passed as env vars here.\n      LISTMONK_app__address: 0.0.0.0:9000\n      LISTMONK_db__user: *db-user\n      LISTMONK_db__password: *db-password\n      LISTMONK_db__database: *db-name\n      LISTMONK_db__host: listmonk_db\n      LISTMONK_db__port: 5432\n      LISTMONK_db__ssl_mode: disable\n      LISTMONK_db__max_open: 25\n      LISTMONK_db__max_idle: 25\n      LISTMONK_db__max_lifetime: 300s\n      TZ: Etc/UTC\n      LISTMONK_ADMIN_USER: ${LISTMONK_ADMIN_USER:-}           # If these (optional) are set during the first `docker compose up`, then the Super Admin user is automatically created.\n      LISTMONK_ADMIN_PASSWORD: ${LISTMONK_ADMIN_PASSWORD:-}   # Otherwise, the user can be setup on the web app after the first visit to http://localhost:9000\n    volumes:\n      - ./uploads:/listmonk/uploads:rw                        # Mount an uploads directory on the host to /listmonk/uploads inside the container.\n                                                              # To use this, change directory path in Admin -> Settings -> Media to /listmonk/uploads\n\n  # Postgres database\n  db:\n    image: postgres:17-alpine\n    container_name: listmonk_db\n    restart: unless-stopped\n    ports:\n      - \"127.0.0.1:5432:5432\"                                 # Only bind on the local interface. To connect to Postgres externally, change this to 0.0.0.0\n    networks:\n      - listmonk\n    environment:\n      <<: *db-credentials\n    healthcheck:\n      test: [\"CMD-SHELL\", \"pg_isready -U listmonk\"]\n      interval: 10s\n      timeout: 5s\n      retries: 6\n    volumes:\n      - type: volume\n        source: listmonk-data\n        target: /var/lib/postgresql/data\n\nnetworks:\n  listmonk:\n\nvolumes:\n  listmonk-data:\n Before we can get started on the conversion, we'll install the prerequisites for Aspire. Getting started with Aspire To work with Aspire, I first made sure I had installed the prerequisites: .NET 9 SDK (you can also use .NET 8) Docker Desktop for Windows (you can also use other OCI runtimes like Podman) It's very likely you already have those if you're a .NET developer, which is nice. I primarily used JetBrains Rider to work on the app, but for this post I primarily use the .NET CLI. Once you have the prerequisites, it's best to install the Aspire project templates. This makes it easy to create new projects. Install the templates with dotnet new install Aspire.ProjectTemplates: $ dotnet new install Aspire.ProjectTemplates\nThe following template packages will be installed:\n   Aspire.ProjectTemplates\n\nSuccess: Aspire.ProjectTemplates::9.3.0 installed the following templates:\nTemplate Name                  Short Name              Language  Tags\n-----------------------------  ----------------------  --------  -------------------------------------------------------------------------------\n.NET Aspire App Host           aspire-apphost          [C#]      Common/.NET Aspire/Cloud\n.NET Aspire Empty App          aspire                  [C#]      Common/.NET Aspire/Cloud/Web/Web API/API/Service\n.NET Aspire Service Defaults   aspire-servicedefaults  [C#]      Common/.NET Aspire/Cloud/Web/Web API/API/Service\n.NET Aspire Starter App        aspire-starter          [C#]      Common/.NET Aspire/Blazor/Web/Web API/API/Service/Cloud/Test/MSTest/NUnit/xUnit\n.NET Aspire Test Project (...  aspire-mstest           [C#]      Common/.NET Aspire/Cloud/Web/Web API/API/Service/Test/MSTest\n.NET Aspire Test Project (...  aspire-nunit            [C#]      Common/.NET Aspire/Cloud/Web/Web API/API/Service/Test/NUnit\n.NET Aspire Test Project (...  aspire-xunit            [C#]      Common/.NET Aspire/Cloud/Web/Web API/API/Service/Test/xUnit\n The template I wanted was aspire-apphost. This creates just the app host project, without creating associated .NET apps or class libraries. I created a new folder, and then created the new project inside it: mkdir LismonkAspire\ncd LismonkAspire\ndotnet new aspire-apphost\n This created a .NET 9 Aspire 9.3 app host project. The AppHost.cs project contained the following code; effectively an empty app host project: var builder = DistributedApplication.CreateBuilder(args);\n\nbuilder.Build().Run();\n There's a bunch of additional files, but for now, this was what I was interested in, so I set about modelling the listmonk services in this file. I started with the PostgreSQL database, seeing as the listmonk app depends on it. Modelling the database in Aspire The base Aspire app host project includes the ability to model various resources, such as executables, .NET apps, and docker containers. However there are also various integrations, which are NuGet package \"plugins\", intended to simplify connecting to common services or platforms. There is just such a package for PostgreSQL. To install the integration, simply install the relevant NuGet package: dotnet add package Aspire.Hosting.PostgreSQL\n This installs v9.3.0 of the NuGet package in the project and makes the AddPostgres() extension method available. The section of the docker-compose we need to model is this: x-db-credentials: &db-credentials                             # Use the default POSTGRES_ credentials if they're available or simply default to \"listmonk\"\n  POSTGRES_USER: &db-user listmonk                            # for database user, password, and database name\n  POSTGRES_PASSWORD: &db-password listmonk\n  POSTGRES_DB: &db-name listmonk\n\nservices:\n  # Postgres database\n  db:\n    image: postgres:17-alpine\n    container_name: listmonk_db\n    restart: unless-stopped\n    ports:\n      - \"127.0.0.1:5432:5432\"                                 # Only bind on the local interface. To connect to Postgres externally, change this to 0.0.0.0\n    networks:\n      - listmonk\n    environment:\n      <<: *db-credentials\n    healthcheck:\n      test: [\"CMD-SHELL\", \"pg_isready -U listmonk\"]\n      interval: 10s\n      timeout: 5s\n      retries: 6\n    volumes:\n      - type: volume\n        source: listmonk-data\n        target: /var/lib/postgresql/data\n The first part of this, the x-db-credentials section, may be unfamiliar to you. It's a way of getting some \"code-reuse\" in YAML. I'm not going to go into it in detail here. For now, it's enough to know that the db service effectively has the following environment variables defined: environment:\n  POSTGRES_USER: listmonk\n  POSTGRES_PASSWORD: listmonk\n  POSTGRES_DB: listmonk\n With that in mind, we'll now model this service in Aspire. I've opted for a close-to direct representation, with some exceptions, which I'll describe later. I've annotated the code below to explain what's going on: var builder = DistributedApplication.CreateBuilder(args);\n\n// Create these values as secrets\nvar postgresUser = builder.AddParameter(\"db-user\", secret: true);\nvar postgresPassword = builder.AddParameter(\"db-password\", secret: true);\n\n// Add a default for the database name \nvar postgresDbName = builder.AddParameter(\"db-name\", \"listmonk\", publishValueAsDefault: true);\n\n// Create these as variables to be used elsewhere\nvar dbPort = 5432;\nvar dbContainerName = \"listmonk_db\";\n\n// Sets the POSTGRES_USER and POSTGRES_PASSWORD implicitly\nvar db = builder.AddPostgres(\"db\", postgresUser, postgresPassword, port: dbPort)\n    .WithImage(\"postgres\", \"17-alpine\") // Ensure we use the same image as docker-compose\n    .WithContainerName(dbContainerName) // Use a fixed container name\n    .WithLifetime(ContainerLifetime.Persistent) // Don't tear-down the container when we stop Aspire\n    .WithDataVolume(\"listmonk-data\") // Wire up the PostgreSQL data volume\n    .WithEnvironment(\"POSTGRES_DB\", postgresDbName); // Explicitly set this value, so that it's auto-created\n One big advantage of .NET Aspire over YAML is that creating \"variables\" to share in multiple places is simple and intuitive. Instead of having to create YAML \"anchors\" and reference them elsewhere, we simply create values and pass them around. What's more, by using AddParameter() we can declare that a value should be provided externally, as it is above for db-user and db-password. What's more, we can mark the fact that these should be secrets, so that if we publish our Aspire app, Aspire can handle the fact they contain sensitive data. There's a few things from the docker-compose.yml that aren't modelled in Aspire, namely the \"restart behaviour\" and the healthcheck. I left these out, as the AddPostgres() integration adds its own health check, and these are fundamentally specific to docker-compose; we'll look at them again later when we configure a Docker publisher. Modelling the app in Aspire With the database implemented, we move on to the listmonk app itself. This, again, is implemented as a Docker container, but there's no helpful integration or extension method for it; we'll have to model this one ourselves. Luckily, there's not much to configure; we're mostly just setting a bunch of environment variables, exposing the app over port 9000, and changing the command used to run the app: // Optional initial super-user configuration\nvar listmonkSuperUser = builder.AddParameter(\"listmonk-admin-user\", secret: true);\nvar listmonkSuperUserPassword = builder.AddParameter(\"listmonk-admin-password\", secret: true);\n\nvar publicPort = 9000; // The port to access the app from the browser\n\nbuilder.AddContainer(name: \"listmonk\", image: \"listmonk/listmonk\", tag: \"latest\") \n    .WaitFor(db) // The app depends on the db, so wait for it to be healthy\n    .WithHttpEndpoint(port: publicPort, targetPort: 9000) // Expose port 9000 in the container as \"publicPort\"\n    .WithExternalHttpEndpoints() // The HTTP endpoint should be publicly accessibly\n    .WithArgs(\"sh\", \"-c\", \"./listmonk --install --idempotent --yes --config '' && ./listmonk --upgrade --yes --config '' && ./listmonk --config ''\")\n    .WithBindMount(source: \"./uploads\", target: \"/listmonk/uploads\") // mount the folder ./uploads on the host into the container \n    .WithEnvironment(\"LISTMONK_app__address\", $\"0.0.0.0:{publicPort.ToString()}\") // This points to the app itself (used in emails)\n    .WithEnvironment(\"LISTMONK_db__user\", postgresUser) // Database connection settings\n    .WithEnvironment(\"LISTMONK_db__password\", postgresPassword)\n    .WithEnvironment(\"LISTMONK_db__database\", postgresDbName)\n    .WithEnvironment(\"LISTMONK_db__host\", dbContainerName)\n    .WithEnvironment(\"LISTMONK_db__port\", dbPort.ToString())\n    .WithEnvironment(\"LISTMONK_db__ssl_mode\", \"disable\")\n    .WithEnvironment(\"LISTMONK_db__max_open\", \"25\")\n    .WithEnvironment(\"LISTMONK_db__max_idle\", \"25\")\n    .WithEnvironment(\"LISTMONK_db__max_lifetime\", \"300s\")\n    .WithEnvironment(\"TZ\", \"Etc/UTC\")\n    .WithEnvironment(\"LISTMONK_ADMIN_USER\", listmonkSuperUser) // Optional super-user\n    .WithEnvironment(\"LISTMONK_ADMIN_PASSWORD\", listmonkSuperUserPassword);\n Most of the variables we set are values that are mirrored in the db configuration. Using variables means we can easily flow the values to both places, which highlights one of the benefits of Aspire.  There's a number of things I'm fairly sure I'm not doing \"correctly\" here. For example, the dbContainerName and dbPort; I hard-coded those as variables when configuring the db service and re-used them here. Is that reasonable? Is that a problem if I (for example) later decide to run my PostgreSQL instance as a service instead of a Docker container? Probably, but that's always something I could address later I guess. Another example is the public port: I hardcoded it to 9000, because that's what the docker-compose file does, but I would probably like to just be able to have Aspire choose the host port automatically and then have that flow through. That almost works, but I couldn't see an easy way to have it set the LISTMONK_app__address environment variable to include the host 0.0.0.0 the way I need it to, without manually creating an EnvironmentCallbackAnnotation. And that just got too ugly.  Ignoring the caveats above, theoretically we've now converted the app and can take it for a spin! Testing it out Before we can run the app, we first need to set the values for the parameters we defined in our app host. Given that many of these are marked as secrets, we should probably do this using user-secrets when running locally. You can edit the user-secrets for your app host using the IDE, or alternatively, set the values using the command line. I opted for the latter, setting some \"super-secret\" values. dotnet user-secrets set \"Parameters:db-user\" \"listmonk\"\ndotnet user-secrets set \"Parameters:db-password\" \"listmonk\"\ndotnet user-secrets set \"Parameters:listmonk-admin-user\" \"admin-user\"\ndotnet user-secrets set \"Parameters:listmonk-admin-password\" \"admin-password\"\n Note that the secrets are all nested under the Parameters key, by prefixing the values with Parameters:. We can now run the app. Either hit F5 in your IDE or type dotnet run, and the app starts up. The Aspire app host starts the Aspire dashboard, showing our apps. From there we can view the logs, environment, and various other aspects of our apps:  We can also see a link to our listmonk app at http://localhost:9000. Clicking the link opens the app, where we can login with our Admin username and password. And there we have it, our listmonk app, running in Aspire!  With the app modelled in Aspire, I decided to see what it would like if we went the other way: creating the docker-compose.yml file from the Aspire app host. Publishing the app host as a docker-compose.yml file My reason for re-creating the docker-compose.yml file was to see if the generated file looked the same as the source file. If so, then I could be pretty comfortable that Aspire was doing what I intended, at the modelling worked correctly. To do this, I needed to configure an Aspire publisher. A publisher takes your Aspire app host and spits out a bunch of artifacts that can be used by other tools. This could be a docker-compose.yml file, which is what I wanted, but it could also be Kubernetes Helm charts, it could be Azure ARM/Bicep templates, or anything really. This part of the Aspire experience is less mature than the local-dev-loop, but with 9.3 it's looking much more promising. I started by installing the preview package of the Aspire.Hosting.Docker NuGet package. This provides publishing capabilities for the app host: dotnet add package Aspire.Hosting.Docker --version 9.3.0-preview.1.25265.20\n Next, we enable the publisher by adding the following to our app host: builder.AddDockerComposeEnvironment(\"docker-compose\");\n That's all we need to do, but I decided to make a few tweaks to the app host, to ensure we more closely replicate the final docker-compose file. First, for the listmonk app, I used the PublishAsDockerComposeService() extension to add the restart: unless-stopped setting to the output docker-compose.yml file. builder.AddContainer(name: \"listmonk\", image: \"listmonk/listmonk\", tag: \"latest\") \n    // ... other config not shown\n    .PublishAsDockerComposeService((resource, service) =>\n    {\n        service.Restart = \"unless-stopped\";\n    });\n Similarly, for the database service, I used the same method to set the restart setting and provide the same healthcheck as the original docker-compose file used: var db = builder.AddPostgres(\"db\", postgresUser, postgresPassword, port: dbPort)\n    // ... other config not shown\n    .PublishAsDockerComposeService((resource, service) =>\n    {\n        service.Restart = \"unless-stopped\";\n        service.Healthcheck = new()\n        {\n            Interval = \"10s\",\n            Timeout = \"5s\",\n            Retries = 6,\n            StartPeriod = \"0s\", \n            Test = [\"CMD-SHELL\", \"pg_isready -U listmonk\"]\n        };\n    });\n Note that these settings are only applied when publishing the app, they don't really make sense when running locally. To use the publisher it seems I needed to install the Aspire CLI. This is still in preview at the moment, but I couldn't see a way of invoking the publisher without it: $ dotnet tool install --global aspire.cli --prerelease\nYou can invoke the tool using the following command: aspire\nTool 'aspire.cli' (version '9.3.0-preview.1.25265.20') was successfully installed.\n With the tool installed you can run aspire publish, and the CLI will publish the app host as a .env file and a docker-compose.yml file: > aspire publish -o publish\n🛠  Generating artifacts...\n                                           \n✔  Publishing artifacts ━━━━━━━━━━ 00:00:00\n\n👍  Successfully published artifacts to: D:\\repos\\ListmonkAspire\\publish\n The files produced are shown below. First of all, we have the .env file, which is where all the parameters that we set in user-secrets are set when running in a docker-compose deployment: # Parameter db-user\nDB_USER=\n\n# Parameter db-password\nDB_PASSWORD=\n\n# Parameter db-name\nDB_NAME=listmonk\n\n# Parameter listmonk-admin-user\nLISTMONK_ADMIN_USER=\n\n# Parameter listmonk-admin-password\nLISTMONK_ADMIN_PASSWORD=\n Then we have the docker-compose.yml itself. That file is reproduced below services:\n  db:\n    image: \"docker.io/postgres:17-alpine\"\n    container_name: \"listmonk_db\"\n    environment:\n      POSTGRES_HOST_AUTH_METHOD: \"scram-sha-256\"\n      POSTGRES_INITDB_ARGS: \"--auth-host=scram-sha-256 --auth-local=scram-sha-256\"\n      POSTGRES_USER: \"${DB_USER}\"\n      POSTGRES_PASSWORD: \"${DB_PASSWORD}\"\n      POSTGRES_DB: \"${DB_NAME}\"\n    ports:\n      - \"5432:5432\"\n    volumes:\n      - type: \"volume\"\n        target: \"/var/lib/postgresql/data\"\n        source: \"listmonk-data\"\n        read_only: false\n    networks:\n      - \"aspire\"\n    restart: \"unless-stopped\"\n    healthcheck:\n      test:\n        - \"CMD-SHELL\"\n        - \"pg_isready -U listmonk\"\n      interval: \"10s\"\n      timeout: \"5s\"\n      retries: 6\n      start_period: \"0s\"\n  listmonk:\n    image: \"listmonk/listmonk:latest\"\n    command:\n      - \"sh\"\n      - \"-c\"\n      - \"./listmonk --install --idempotent --yes --config '' && ./listmonk --upgrade --yes --config '' && ./listmonk --config ''\"\n    environment:\n      LISTMONK_app__address: \"0.0.0.0:9000\"\n      LISTMONK_db__user: \"${DB_USER}\"\n      LISTMONK_db__password: \"${DB_PASSWORD}\"\n      LISTMONK_db__database: \"${DB_NAME}\"\n      LISTMONK_db__host: \"listmonk_db\"\n      LISTMONK_db__port: \"5432\"\n      LISTMONK_db__ssl_mode: \"disable\"\n      LISTMONK_db__max_open: \"25\"\n      LISTMONK_db__max_idle: \"25\"\n      LISTMONK_db__max_lifetime: \"300s\"\n      TZ: \"Etc/UTC\"\n      LISTMONK_ADMIN_USER: \"${LISTMONK_ADMIN_USER}\"\n      LISTMONK_ADMIN_PASSWORD: \"${LISTMONK_ADMIN_PASSWORD}\"\n    ports:\n      - \"9000:9000\"\n    volumes:\n      - type: \"bind\"\n        target: \"/listmonk/uploads\"\n        source: \"D:\\\\repos\\\\blog-examples\\\\ListmonkAspire\\\\uploads\"\n        read_only: false\n    depends_on:\n      db:\n        condition: \"service_started\"\n    networks:\n      - \"aspire\"\n    restart: \"unless-stopped\"\nnetworks:\n  aspire:\n    driver: \"bridge\"\nvolumes:\n  listmonk-data:\n    driver: \"local\"\n There's a few cosmetic differences between this generated file and the original, but for the most part they seem functionally equivalent to me! With a bit more work I'm sure I could make them identical, but they're close-enough for me for this experiment. Overall, I'd say it was a success! Summary In this post I described .NET Aspire and the open-source mailing-list manager listmonk. Listmonk provides a docker-compose.yml file as a suggested approach to deployment, and I wanted to see how easy it would be to convert the project to run as a .NET Aspire app host instead. The listmonk app runs a PostgreSQL docker container as the database and a separate Docker container as the main app. After the conversion, I used the Aspire CLI and the Docker publisher to export the Aspire app as a docker-compose.yml file, to see how close the conversion was. Overall I think the experiment was a success, though I'm sure there are things I could do better in the Aspire app (let me know in the comments if you have suggestions!)"
  },
  {
    "itemId": "https://andrewlock.net/pushing-a-whole-stack-of-branches-with-a-single-git-command/",
    "raw": "<img src=\"https://andrewlock.net/content/images/2025/push_stack_banner.webp\" /><p>In this post I show how you can push a whole stack of branches with a single command. This is particularly useful when you're working with stacked branches, and want to push all the branches in the stack at once. In this post I show the git aliases I have created that make doing this a single, simple command.</p> <h2 id=\"what-are-stacked-branches-\" class=\"heading-with-anchor\"><a href=\"#what-are-stacked-branches-\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">What are stacked branches?</a></h2> <p>I'm a big fan of creating small git commits. <em>Especially</em> when you're creating a big feature. I like to create a \"story\" with my commits, adding bits of a larger feature commit by commit. The idea is to make it as simple as possible for <em>others</em> to review by walking through a commit at a time.</p> <p>As an extension to that, I often create separate PRs for each couple of commits in a feature. This, again, is to make it easier for people to review. GitHub's PR review pages really don't cope well with large PRs, even if you have \"incremental\" commits. Creating separate branches and PRs for each unit of functionality makes it easier for people to consume and follow the \"story\" of the commits.</p> <blockquote> <p>To be clear, creating small commits and PRs is often <em>harder</em> than just creating a big PR at the end. Nevertheless, I argue it's worth the effort. Small PRs are easier to review, therefore you're likely to get <em>better</em> reviews than for big commits. Also, it's just polite, as it optimizes the <em>reviewer's</em> time over your own.</p> </blockquote> <p>This approach, where you have lots of separate branches/PRs which build on top of one another, is called <em>stacked branches/PRs</em>. This makes sense when you think of the git graph of the branches: each branch is \"stacked\" on top of the previous one.</p> <p>For example, in the following repo I have 6 commits as part of a feature, <code>feature-xyz</code>, and have broken those down into 3 logical units, with a branch for each. I can then create a PR for each of those branches:</p> <p><img src=\"/content/images/2022/stacked_branches.png\" alt=\"Stacked branches in a feature\"></p> <p>For the first PR, for branch <code>andrew/feature-xyz/part-1</code>, I would create a PR requesting to merge to <code>dev</code> (in this example). For the second PR, for branch <code>andrew/feature-xyz/part-2</code>, I would create a PR requesting to merge to <code>andrew/feature-xyz/part-1</code>, and for the <code>part-3</code> branch the PR would request to merge into <code>part-2</code>:</p> <p><img src=\"/content/images/2022/stacked_branches_02.png\" alt=\"Stacked branches in a feature\"></p> <p>Each PR only includes the commits specific to that branch, which makes for a much nicer reviewing experience.</p> <p>I firmly believe working with stacked branches for medium-large features is the best way to work if you're optimizing for reviewability and for remaining unblocked. However, there's no denying working with stacked branches requires more Git finesse than typical single-branch workflows.</p> <h2 id=\"pushing-a-whole-stack-of-branches-with-a-single-git-command\" class=\"heading-with-anchor\"><a href=\"#pushing-a-whole-stack-of-branches-with-a-single-git-command\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Pushing a whole stack of branches with a single Git command</a></h2> <p>One of the pain points typically comes up shortly after espousing stacked branches to my teammates. The problem is how to handle the case where you have made changes to multiple branches in a stack and you want to push <em>all</em> the branches in the stack to a remote repository. The sad truth is that I didn't have a good way until recently. My solution was simply doing something like this:</p> <pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> push origin --force-with-lease feature/part-1<span class=\"token punctuation\">;</span>\n<span class=\"token function\">git</span> push origin --force-with-lease feature/part-2<span class=\"token punctuation\">;</span>\n<span class=\"token function\">git</span> push origin --force-with-lease feature/part-3<span class=\"token punctuation\">;</span>\n</code></pre> <p>Pretty ugly, but I just lived with it 😅</p> <blockquote> <p>Actually, I had an alias <code>pof</code> configured to make this <em>slightly</em> less ugly using <code>git config --global alias.pof \"push origin --force-with-lease\"</code>. That way I could type <code>git pof &lt;BRANCH&gt;</code> which at least saves some key strokes.</p> </blockquote> <p>Recently I was working with a particularly big stack of branches, and this finally irritated me enough to actually look into it further. This was also partially inspired <a href=\"https://github.com/andrewlock/blog-comments/discussions/75#discussioncomment-12876326\">by a discussion</a> in the comments section of <a href=\"/working-with-stacked-branches-in-git-is-easier-with-update-refs/\">another of my posts</a> about stacked branches.</p> <p>As a toy example, imagine we have the following stack of branches:</p> <p><img src=\"/content/images/2025/gitstack_08.png\" alt=\"The initial stack of branches\"></p> <p>The repository currently has the following features:</p> <ul><li>The default branch is <code>main</code> and it tracks the default branch on the default remote <code>origin</code>.</li> <li>There is a stack of three branches that make up the <code>feature/</code> stack.</li> <li>The <code>feature/*</code> stack has not yet been pushed to the upstream.</li> <li>The <code>feature/part-3</code> branch at the top of the stack is currently checked out.</li></ul> <p>Our goal is to push <code>feature/part-1</code>, <code>feature/part-2</code>, and <code>feature/part-3</code> to the remote repository as simply as possible. We'll start by running <code>git stack</code>, which simply lists <em>which</em> branches are part of the stack and will be pushed:</p> <pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">git</span> stack\nfeature/part-3\nfeature/part-2\nfeature/part-1\n</code></pre> <p>This lists all of the branches to be pushed. This looks correct, so we run <code>git push-stack</code>:</p> <pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">git</span> push-stack\nEnumerating objects: <span class=\"token number\">5</span>, done.\nCounting objects: <span class=\"token number\">100</span>% <span class=\"token punctuation\">(</span><span class=\"token number\">5</span>/5<span class=\"token punctuation\">)</span>, done.\nDelta compression using up to <span class=\"token number\">20</span> threads\nCompressing objects: <span class=\"token number\">100</span>% <span class=\"token punctuation\">(</span><span class=\"token number\">5</span>/5<span class=\"token punctuation\">)</span>, done.\nWriting objects: <span class=\"token number\">100</span>% <span class=\"token punctuation\">(</span><span class=\"token number\">5</span>/5<span class=\"token punctuation\">)</span>, <span class=\"token number\">1.14</span> KiB <span class=\"token operator\">|</span> <span class=\"token number\">1.14</span> MiB/s, done.\nTotal <span class=\"token number\">5</span> <span class=\"token punctuation\">(</span>delta <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>, reused <span class=\"token number\">0</span> <span class=\"token punctuation\">(</span>delta <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>, pack-reused <span class=\"token number\">0</span> <span class=\"token punctuation\">(</span>from <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\nTo C:<span class=\"token punctuation\">\\</span>repos<span class=\"token punctuation\">\\</span>temp<span class=\"token punctuation\">\\</span>temp69\n * <span class=\"token punctuation\">[</span>new branch<span class=\"token punctuation\">]</span>      feature/part-3 -<span class=\"token operator\">&gt;</span> feature/part-3\nTotal <span class=\"token number\">0</span> <span class=\"token punctuation\">(</span>delta <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>, reused <span class=\"token number\">0</span> <span class=\"token punctuation\">(</span>delta <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>, pack-reused <span class=\"token number\">0</span> <span class=\"token punctuation\">(</span>from <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\nTo C:<span class=\"token punctuation\">\\</span>repos<span class=\"token punctuation\">\\</span>temp<span class=\"token punctuation\">\\</span>temp69\n * <span class=\"token punctuation\">[</span>new branch<span class=\"token punctuation\">]</span>      feature/part-2 -<span class=\"token operator\">&gt;</span> feature/part-2\nTotal <span class=\"token number\">0</span> <span class=\"token punctuation\">(</span>delta <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>, reused <span class=\"token number\">0</span> <span class=\"token punctuation\">(</span>delta <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>, pack-reused <span class=\"token number\">0</span> <span class=\"token punctuation\">(</span>from <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\nTo C:<span class=\"token punctuation\">\\</span>repos<span class=\"token punctuation\">\\</span>temp<span class=\"token punctuation\">\\</span>temp69\n * <span class=\"token punctuation\">[</span>new branch<span class=\"token punctuation\">]</span>      feature/part-1 -<span class=\"token operator\">&gt;</span> feature/part-1\n</code></pre> <p>This pushes all the branches in our stack to our remote repository:</p> <p><img src=\"/content/images/2025/gitstack_09.png\" alt=\"All the branches pushed to the remote repository\"></p> <p>And voila, it works! This basic functionality is what I've wanted for a long time, but there's a few extra \"features\" available for the command too.</p> <h2 id=\"pushing-part-of-the-stack-with-git-push-stack\" class=\"heading-with-anchor\"><a href=\"#pushing-part-of-the-stack-with-git-push-stack\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Pushing part of the stack with <code>git push-stack</code></a></h2> <p>We'll look in detail at how <code>git push-stack</code> is implemented shortly, but first we'll look at a couple of different ways you can use it.</p> <p>The simplest approach, <code>git push-stack</code> you've already seen, and is used when you already have the top-most branch of the stack checked out, <code>feature/part-3</code> in the example above.</p> <p>If you only wanted to push <em>part</em> of the stack, you have a couple of options</p> <ul><li>Checkout the top-most branch of the stack that you wish to push, or</li> <li>Explicitly specify the top-most branch of the stack that you wish to push</li></ul> <p>For example, imagine you <em>only</em> want to push <code>feature/part-1</code> and <code>feature/part-2</code>, but not <code>feature/part-3</code>. You have two options:</p> <pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># Checkout feature/part-2</span>\n<span class=\"token function\">git</span> checkout feature/part-2\n<span class=\"token comment\"># List the branches that would be pushed</span>\n<span class=\"token function\">git</span> stack\n<span class=\"token comment\"># Prints:</span>\n<span class=\"token comment\">#  feature/part-2</span>\n<span class=\"token comment\">#  feature/part-1</span>\n</code></pre> <p>Alternatively:</p> <pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># Specify the top-most branch explicitly</span>\n<span class=\"token function\">git</span> stack feature/part-2\n<span class=\"token comment\"># Prints:</span>\n<span class=\"token comment\">#  feature/part-2</span>\n<span class=\"token comment\">#  feature/part-1</span>\n</code></pre> <p>Which of these options is the most useful depends on what you're doing: if you already have <code>feature/part-2</code> checked out, then the first option is easier, otherwise use the second option.</p> <blockquote> <p>I have used <code>git stack</code> here simply to show what <em>would</em> be pushed. Using <code>git push-stack</code> instead would directly push these branches instead of just printing the branches to push.</p> </blockquote> <p>Another aspect to acknowledge is that <code>git stack</code> \"intelligently\" determines which branches to push based on the remote default branch, i.e. <code>origin/main</code>. So for example, imagine we now have the following local repository:</p> <p><img src=\"/content/images/2025/gitstack_10.png\" alt=\"The repository after feature/part-1 was merged\"></p> <p>In this scenario</p> <ul><li>The <code>feature/part-1</code> branch was merged to <code>origin/main</code> (likely via a pull request) and the remote branch has been deleted.</li> <li>The local branch <code>feature/part-1</code> has not yet been deleted.</li> <li>The local default branch <code>main</code> has not yet been updated to track <code>origin/main</code>.</li></ul> <p>If we run <code>git stack</code> in this scenario then we get the expected results:</p> <pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># We don't need to specify the head branch, but specified for clarity</span>\n<span class=\"token function\">git</span> stack feature/part-3\n<span class=\"token comment\"># Prints:</span>\n<span class=\"token comment\">#  feature/part-3</span>\n<span class=\"token comment\">#  feature/part-2</span>\n</code></pre> <p>We only push the branches which <em>need</em> to be, and we rely on the <em>remote</em> default branch <code>origin/main</code> for that calculation, rather than the <em>local</em> default <code>main</code>.</p> <p>I'm sure there's more features we could add, but this has been sufficient for me for now. For the rest of the post, I'll describe how you can create the <code>git push-stack</code> command.</p> <h2 id=\"implementing-git-push-stack\" class=\"heading-with-anchor\"><a href=\"#implementing-git-push-stack\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Implementing <code>git push-stack</code></a></h2> <p>The <code>git-push stack</code> command consists of four steps:</p> <ul><li>Calculate the default branch (<code>origin/main</code>).</li> <li>Calculate the \"merge base\" of the stack i.e. the bottom of the stack.</li> <li>Calculate the branches between the merge base and the tip of the stack.</li> <li>Push all the branches calculated in the previous step.</li></ul> <p>To make things easy to test and more composable, I created a Git alias for each of these steps, so we'll walk through them one by one.</p> <h3 id=\"assumptions\" class=\"heading-with-anchor\"><a href=\"#assumptions\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Assumptions</a></h3> <p>Before we start, it's worth highlighting a couple of assumptions in these aliases:</p> <ul><li><code>origin</code> is the default remote.</li> <li>You cloned the local repository from a remote, <em>or</em> you have set the default remote branch.</li></ul> <p>These days, the default remote is almost always called <code>origin</code>, but it <em>could</em> be called <code>upstream</code> or anything else. In the aliases I provide here, I assume that you're using <code>origin</code>. Tweaking these to assume <code>origin</code> by default but allowing you to change them would not be difficult, but I haven't done it, for simplicity.</p> <blockquote> <p>That's mostly because I dislike having more than one positional-parameter—would it be <code>git stack origin mybranch</code> or <code>git stack mybranch origin</code>🤔—and it's not at all easy to have <em>named</em> parameters in git aliases as far as I know. I'm happy to share updated scripts if this is something you <em>do</em> want.</p> </blockquote> <p>The second point won't <em>normally</em> be a problem. If you cloned a repository from GitHub for example, then you're probably fine. However, if the remote does <em>not</em> set it for some reason, you can set the default branch using:</p> <pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> remote set-head origin <span class=\"token parameter variable\">--auto</span>\n</code></pre> <p>I discuss this more in the following section, so let's look at the various steps we need to create the <code>git push-stack</code> command.</p> <h3 id=\"calculating-the-default-branch\" class=\"heading-with-anchor\"><a href=\"#calculating-the-default-branch\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Calculating the default branch</a></h3> <p>When you create a new Git repository, whether locally or on GitHub, you need to specify the default branch. This was <code>master</code> for a long time, but these days it's typically <code>main</code>. Technically though it could be anything. Rather than make assumptions, I have a command that tries to determine the <em>actual</em> default branch used by the remote repository.</p> <blockquote> <p>This isn't revelatory, a lot of people creating custom Git aliases create a similar alias. I most recently saw this approach in <a href=\"https://haacked.com/archive/2025/04/17/git-gone/\">a post by Phil Haack</a>.</p> </blockquote> <p>When you clone a repository, Git automatically checks out the \"default\" branch (unless you explicitly specify a different branch). Git creates a <code>symbolic-ref</code> in the local repository at <code>refs/remotes/origin/HEAD</code> to point to the default branch of the remote. This ref is updated based on what the remote defines as its <code>HEAD</code>—for GitHub, that’s the branch shown as \"default\" in the UI.</p> <p>You can read the value of this reference with <code>git symbolic-ref refs/remotes/origin/HEAD</code> which prints the remote reference:</p> <pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">git</span> symbolic-ref refs/remotes/origin/HEAD\nrefs/remotes/origin/main\n</code></pre> <p>We only need the final <code>main</code> part of the output, so we create an alias to extract that using <code>sed</code>. I call the alias <code>git default-branch</code>, and define it like this:</p> <pre class=\"language-ini\"><code class=\"language-ini\"><span class=\"token section\"><span class=\"token punctuation\">[</span><span class=\"token section-name selector\">alias</span><span class=\"token punctuation\">]</span></span>\n    <span class=\"token key attr-name\">default-branch</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">\"<span class=\"token inner-value\">!git symbolic-ref refs/remotes/origin/HEAD | sed 's@^refs/remotes/origin/@@'</span>\"</span>\n</code></pre> <p>If you run this in a repository it should print the remote you expect:</p> <pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">git</span> default-branch\nmain\n</code></pre> <p>In some cases, you <em>may</em> get an error when you run this:</p> <pre class=\"language-bash\"><code class=\"language-bash\">fatal: ref refs/remotes/origin/HEAD is not a symbolic ref\n</code></pre> <p>This indicates that the default branch for <code>origin</code> hasn't been set. This generally won't happen if you cloned the repository from GitHub, but it could happen if you have only setup the repository locally, or for some configurations. To fix it, run:</p> <pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> remote set-head origin <span class=\"token parameter variable\">--auto</span>\n</code></pre> <p>This queries the remote and updates the local symbolic link to point to the correct branch. Now we know the default remote branch, we can calculate the <code>merge-base</code> for the stack</p> <h3 id=\"calculating-the-merge-base-for-the-stack\" class=\"heading-with-anchor\"><a href=\"#calculating-the-merge-base-for-the-stack\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Calculating the <code>merge-base</code> for the stack</a></h3> <p>Per the documentation, the <code>merge-base</code> between two commits is:</p> <blockquote> <p>…the best common ancestor(s) between two commits to use in a three-way merge. One common ancestor is <strong>better</strong> than another common ancestor if the latter is an ancestor of the former. A common ancestor that does not have any better common ancestor is a <strong>best common ancestor</strong>, i.e. a <strong>merge base</strong>.</p> </blockquote> <p>I think <code>merge-base</code> is easiest to visualize, so considering this simple graph:</p> <pre><code>         o---o---o---B---o---o---C\n        /\n---o---1---o---o---o---o---o---A\n</code></pre> <p>The merge base of commits <code>A</code> and <code>B</code> is marked <code>1</code>. Similarly, the merge base of commits <code>A</code> and <code>C</code> is <code>1</code>. The merge base of <code>B</code> and <code>C</code> is is <code>B</code>.</p> <p>When we're calculating our stack, we don't want to require that you've already rebased your stack on top of <code>origin/main</code>, so instead we need to calculate the <code>merge-base</code> between the top-most branch of our stack and the default branch. Luckily Git already has the <code>git merge-base</code> command that does this for us:</p> <pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> merge-base <span class=\"token operator\">&lt;</span>commit<span class=\"token operator\"><span class=\"token file-descriptor important\">1</span>&gt;</span> <span class=\"token operator\">&lt;</span>commit<span class=\"token operator\"><span class=\"token file-descriptor important\">2</span>&gt;</span> \n</code></pre> <p>We define an alias called <code>merge-base-origin</code> that runs the above command using the <code>default-branch</code> and <em>either</em> the <code>HEAD</code> (for the currently-checked branch) or a parameter specified by the caller, which prints out the commit. For example, if we had checked out branch <code>C</code> and <code>A</code> was <code>origin/main</code>, then <code>git merge-base-origin</code> would print out the SHA of commit <code>1</code></p> <p>The Git configuration below shows the <code>merge-base-origin</code> command, and how we embed a call to the <code>git default-branch</code> alias in there:</p> <pre class=\"language-ini\"><code class=\"language-ini\"><span class=\"token section\"><span class=\"token punctuation\">[</span><span class=\"token section-name selector\">alias</span><span class=\"token punctuation\">]</span></span>\n    <span class=\"token key attr-name\">merge-base-origin</span> <span class=\"token punctuation\">=</span><span class=\"token value attr-value\">\"<span class=\"token inner-value\">!f() { git merge-base ${1-HEAD} origin/$(git default-branch); };f </span>\"</span>\n</code></pre> <p>An interesting part of this command is the bash <code>${1-HEAD}</code>. This says:</p> <ul><li>If there is a user-supplied parameter, place it here.</li> <li>If not, use <code>HEAD</code>.</li></ul> <p>That means we can do things like:</p> <pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># Use HEAD and origin/main</span>\n$ <span class=\"token function\">git</span> merge-base-origin\n7257e92c016e017fc95e763302ac31c32d78c2b8\n\n<span class=\"token comment\"># Use feature/part-2 and origin/main</span>\n$ <span class=\"token function\">git</span> merge-base-origin feature/part-2\n7257e92c016e017fc95e763302ac31c32d78c2b8\n</code></pre> <p>The next step is the hard one: listing all the branches between the merge-base and our target branch.</p> <h3 id=\"listing-the-branches\" class=\"heading-with-anchor\"><a href=\"#listing-the-branches\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Listing the branches</a></h3> <p>The next step, listing all the branches to push, is the tricky part, and I was <em>heavily</em> inspired <a href=\"https://github.com/andrewlock/blog-comments/discussions/75#discussioncomment-12876326\">by the discussion</a> on my previous post! The general approach is to use <code>git log</code> to list all the branches between two commits, but it requires quite a bit of playing with the format. I'll build it up bit-by-bit in this section to get to the final command.</p> <p>We start by running <code>git log --pretty=%D</code> and passing in the two commits we want to compare (manually set to <code>HEAD</code> and <code>main</code> at the moment for simplicity). I'm running these commands on the repository we saw previously:</p> <p><img src=\"/content/images/2025/gitstack_10.png\" alt=\"The repository after feature/part-1 was merged\"></p> <p>The <code>%D</code> format ensures that for each commit, we only print out the references pointed to:</p> <pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">git</span> log <span class=\"token parameter variable\">--pretty</span><span class=\"token operator\">=</span>%D main<span class=\"token punctuation\">..</span>HEAD\nHEAD -<span class=\"token operator\">&gt;</span> feature/part-3, origin/feature/part-3\n\norigin/feature/part-2, feature/part-2\norigin/main, origin/HEAD, feature/part-1\n\n</code></pre> <p>OK, you can see the outline of what we need there. There's a lot of extra noise by way of the <em>remote</em> branches (<code>origin/feature/part-3</code> etc) and the <code>HEAD</code>, plus empty commits, but it's a good start.</p> <p>We'll start by getting rid of the empty lines. We can do that using <code>--simplify-by-decoration</code>:</p> <pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">git</span> log <span class=\"token parameter variable\">--pretty</span><span class=\"token operator\">=</span>%D --simplify-by-decoration main<span class=\"token punctuation\">..</span>HEAD\nHEAD -<span class=\"token operator\">&gt;</span> feature/part-3, origin/feature/part-3\norigin/feature/part-2, feature/part-2\norigin/main, origin/HEAD, feature/part-1\n</code></pre> <p>Great. Now we need to get rid of the remote references and the <code>HEAD</code>. We'll use <code>--decorate-refs</code> for that, and specify only the refs we care about, local branches:</p> <pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token variable\">$git</span> log <span class=\"token parameter variable\">--pretty</span><span class=\"token operator\">=</span>%D --simplify-by-decoration --decorate-refs<span class=\"token operator\">=</span>refs/heads main<span class=\"token punctuation\">..</span>HEAD\nfeature/part-3\nfeature/part-2\nfeature/part-1\n</code></pre> <p>Perfect! This almost looks perfect, but there's a slight issue that's not obviously apparent. We can see this if we create another branch:</p> <pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># Just for clarity</span>\n<span class=\"token function\">git</span> checkout feature/part-3\n<span class=\"token comment\"># Create a new branch on the same commit as feature/part-3</span>\n<span class=\"token comment\"># but don't add any commits</span>\n<span class=\"token function\">git</span> branch feature/part-4\n</code></pre> <p>If we run the above command again, we get:</p> <pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">git</span> log <span class=\"token parameter variable\">--pretty</span><span class=\"token operator\">=</span>%D --simplify-by-decoration --decorate-refs<span class=\"token operator\">=</span>refs/heads main<span class=\"token punctuation\">..</span>HEAD\nfeature/part-4, feature/part-3\nfeature/part-2\nfeature/part-1\n</code></pre> <p>This shows the problem: the <code>%D</code> pretty format places the two branches on the same line, separated by a comma. We want each branch to be listed on its own line, so we define our own pretty format instead, using <code>%n</code> as the separator to place each branch on its own line.</p> <pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">git</span> log <span class=\"token parameter variable\">--pretty</span><span class=\"token operator\">=</span>format:<span class=\"token string\">\"%(decorate:prefix=,suffix=,tag=,separator=%n)\"</span> --simplify-by-decoration --decorate-refs<span class=\"token operator\">=</span>refs/heads main<span class=\"token punctuation\">..</span>HEAD\nfeature/part-4\nfeature/part-3\nfeature/part-2\nfeature/part-1\n</code></pre> <p>And there we have it, success! All that remains is to update the hardcoded <code>main</code> and <code>HEAD</code> to support providing a specific branch, and to calculate the <code>merge-base</code> dynamically, and our alias is complete.</p> <pre class=\"language-ini\"><code class=\"language-ini\"><span class=\"token section\"><span class=\"token punctuation\">[</span><span class=\"token section-name selector\">alias</span><span class=\"token punctuation\">]</span></span>\n  <span class=\"token key attr-name\">stack</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">\"!f() { \\</span>\n    <span class=\"token key attr-name\">BRANCH</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">${1-HEAD}; \\</span>\n    <span class=\"token key attr-name\">MERGE_BASE</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">$(git merge-base-origin $BRANCH); \\</span>\n    <span class=\"token key attr-name\">git log --decorate-refs</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">refs/heads --simplify-by-decoration --pretty=format:\\\"%(decorate:prefix=,suffix=,tag=,separator=%n)\\\" $MERGE_BASE..$BRANCH; \\</span>\n  };f \"\n</code></pre> <p>For simplicity, I separated the <code>BRANCH</code> and <code>MERGE_BASE</code> variables out. As in the <code>merge-base-orgin</code> alias, <code>BRANCH</code> is defined as either <code>HEAD</code> or the user-provided branch. <code>MERGE_BASE</code> is the output of running <code>git merge-base-origin</code> with the calculated <code>$BRANCH</code>, and then finally, we run the <code>git log</code> command.</p> <p>With the <code>git stack</code> alias complete, we can now run</p> <pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">git</span> stack\nfeature/part-4\nfeature/part-3\nfeature/part-2\n\n<span class=\"token comment\"># or, for example</span>\n$ <span class=\"token function\">git</span> stack feature/part-2\nfeature/part-2\n</code></pre> <p>All that remains is to implement the <code>git push-stack</code> command.</p> <h3 id=\"pushing-all-the-branches\" class=\"heading-with-anchor\"><a href=\"#pushing-all-the-branches\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Pushing all the branches</a></h3> <p>With the <code>git stack</code> command implemented, <code>git push-stack</code> simply needs to invoke <code>git stack</code> and then call <code>git push origin --force-with-lease</code> for each of the values returned. The easiest way to do this is with <code>xargs</code>. We can simply pipe the output of <code>git stack</code> to <code>xargs</code>, and it will run the command for each of the provided branches:</p> <pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> stack <span class=\"token operator\">|</span> <span class=\"token function\">xargs</span> <span class=\"token parameter variable\">-I</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token function\">git</span> push --force-with-lease origin <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n</code></pre> <p>The <code>-I {}</code> part means \"replace <code>{}</code> in the following command with the actual parameter\", where the parameter is the value returned from <code>git stack</code>, split by lines. So this runs <code>git push</code> on each of the branches returned by <code>git stack</code>.</p> <p>The definition in git is almost as simple as this, I just defined the <code>$BRANCH</code> variable again to allow passing a different value down to <code>git stack</code></p> <pre class=\"language-ini\"><code class=\"language-ini\"><span class=\"token section\"><span class=\"token punctuation\">[</span><span class=\"token section-name selector\">alias</span><span class=\"token punctuation\">]</span></span>\n\t<span class=\"token key attr-name\">push-stack</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">\"!f() { \\</span>\n\t\t<span class=\"token key attr-name\">BRANCH</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">${1-HEAD}; \\</span>\n\t\tgit stack $BRANCH | xargs -I {} git push --force-with-lease origin {}; \\\n\t};f \"\n</code></pre> <p>That's the final piece of the puzzle, so now we can put it all together and look at our final set of aliases.</p> <h3 id=\"putting-it-all-together\" class=\"heading-with-anchor\"><a href=\"#putting-it-all-together\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Putting it all together</a></h3> <p>The final set of aliases, as defined in my <em>.gitconfig</em> file is as follows:</p> <pre class=\"language-ini\"><code class=\"language-ini\"><span class=\"token section\"><span class=\"token punctuation\">[</span><span class=\"token section-name selector\">alias</span><span class=\"token punctuation\">]</span></span>\n\t<span class=\"token key attr-name\">default-branch</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">\"<span class=\"token inner-value\">!git symbolic-ref refs/remotes/origin/HEAD | sed 's@^refs/remotes/origin/@@'</span>\"</span>\n\t<span class=\"token key attr-name\">merge-base-origin</span> <span class=\"token punctuation\">=</span><span class=\"token value attr-value\">\"<span class=\"token inner-value\">!f() { git merge-base ${1-HEAD} origin/$(git default-branch); };f </span>\"</span>\n\t<span class=\"token key attr-name\">stack</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">\"!f() { \\</span>\n\t\t<span class=\"token key attr-name\">BRANCH</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">${1-HEAD}; \\</span>\n\t\t<span class=\"token key attr-name\">MERGE_BASE</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">$(git merge-base-origin $BRANCH); \\</span>\n\t\t<span class=\"token key attr-name\">git log --decorate-refs</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">refs/heads --simplify-by-decoration --pretty=format:\\\"%(decorate:prefix=,suffix=,tag=,separator=%n)\\\" $MERGE_BASE..$BRANCH; \\</span>\n\t};f \"\n\t<span class=\"token key attr-name\">push-stack</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">\"!f() { \\</span>\n\t\t<span class=\"token key attr-name\">BRANCH</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">${1-HEAD}; \\</span>\n\t\tgit stack $BRANCH | xargs -I {} git push --force-with-lease origin {}; \\\n\t};f \"\n</code></pre> <p>You can simply copy-paste those into your own Git config (e.g. by running <code>git config --global --edit</code> to open your editor).</p> <blockquote> <p>One thing you might wonder is why there are so many cases of <code>${1-HEAD}</code> duplicated throughout. This is primarily so that each of these aliases can be called independently.</p> </blockquote> <p>Alternatively, you can run the following at the command line to add them automatically:</p> <pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> config <span class=\"token parameter variable\">--global</span> alias.default-branch <span class=\"token string\">\"!git symbolic-ref refs/remotes/origin/HEAD | sed 's@^refs/remotes/origin/@@'\"</span>\n<span class=\"token function\">git</span> config <span class=\"token parameter variable\">--global</span> alias.merge-base-origin <span class=\"token string\">'!f() { git merge-base ${1-HEAD} origin/$(git default-branch); };f '</span>\n<span class=\"token function\">git</span> config <span class=\"token parameter variable\">--global</span> alias.stack <span class=\"token string\">'!f() { BRANCH=${1-HEAD}; MERGE_BASE=$(git merge-base-origin $BRANCH); git log --decorate-refs=refs/heads --simplify-by-decoration --pretty=format:\\\"%(decorate:prefix=,suffix=,tag=,separator=%n)\\\" $MERGE_BASE..$BRANCH; };f '</span>\n<span class=\"token function\">git</span> config <span class=\"token parameter variable\">--global</span> alias.push-stack <span class=\"token string\">'!f() { BRANCH=${1-HEAD};  git stack $BRANCH | xargs -I {} git push --force-with-lease origin {}; };f '</span>\n</code></pre> <p>And there you have it: simple pushing of an entire Git stack of branches with a single command. If you've been handling this manually like I was for years, then I hope this helps! If not, then I'd be interested to see what scripts you're using: reply in the comments if you're happy sharing!</p> <h2 id=\"summary\" class=\"heading-with-anchor\"><a href=\"#summary\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Summary</a></h2> <p>In this post I described stacked branches in Git and how they can simplify the review process for PRs. However, it can be a pain when you need to push a whole stack of PRs to a remote. In this post I showed how I created a Git alias that allows you to run <code>git push-stack</code> to push an entire stack of branches in a single command. I showed how I built this alias out of multiple other aliases, such as <code>git stack</code>, and added customisation options. I hope this makes managing stacks of branches easier for everyone!</p> ",
    "sanitized": "In this post I show how you can push a whole stack of branches with a single command. This is particularly useful when you're working with stacked branches, and want to push all the branches in the stack at once. In this post I show the git aliases I have created that make doing this a single, simple command. What are stacked branches? I'm a big fan of creating small git commits. Especially when you're creating a big feature. I like to create a \"story\" with my commits, adding bits of a larger feature commit by commit. The idea is to make it as simple as possible for others to review by walking through a commit at a time. As an extension to that, I often create separate PRs for each couple of commits in a feature. This, again, is to make it easier for people to review. GitHub's PR review pages really don't cope well with large PRs, even if you have \"incremental\" commits. Creating separate branches and PRs for each unit of functionality makes it easier for people to consume and follow the \"story\" of the commits.  To be clear, creating small commits and PRs is often harder than just creating a big PR at the end. Nevertheless, I argue it's worth the effort. Small PRs are easier to review, therefore you're likely to get better reviews than for big commits. Also, it's just polite, as it optimizes the reviewer's time over your own.  This approach, where you have lots of separate branches/PRs which build on top of one another, is called stacked branches/PRs. This makes sense when you think of the git graph of the branches: each branch is \"stacked\" on top of the previous one. For example, in the following repo I have 6 commits as part of a feature, feature-xyz, and have broken those down into 3 logical units, with a branch for each. I can then create a PR for each of those branches:  For the first PR, for branch andrew/feature-xyz/part-1, I would create a PR requesting to merge to dev (in this example). For the second PR, for branch andrew/feature-xyz/part-2, I would create a PR requesting to merge to andrew/feature-xyz/part-1, and for the part-3 branch the PR would request to merge into part-2:  Each PR only includes the commits specific to that branch, which makes for a much nicer reviewing experience. I firmly believe working with stacked branches for medium-large features is the best way to work if you're optimizing for reviewability and for remaining unblocked. However, there's no denying working with stacked branches requires more Git finesse than typical single-branch workflows. Pushing a whole stack of branches with a single Git command One of the pain points typically comes up shortly after espousing stacked branches to my teammates. The problem is how to handle the case where you have made changes to multiple branches in a stack and you want to push all the branches in the stack to a remote repository. The sad truth is that I didn't have a good way until recently. My solution was simply doing something like this: git push origin --force-with-lease feature/part-1;\ngit push origin --force-with-lease feature/part-2;\ngit push origin --force-with-lease feature/part-3;\n Pretty ugly, but I just lived with it 😅  Actually, I had an alias pof configured to make this slightly less ugly using git config --global alias.pof \"push origin --force-with-lease\". That way I could type git pof <BRANCH> which at least saves some key strokes.  Recently I was working with a particularly big stack of branches, and this finally irritated me enough to actually look into it further. This was also partially inspired by a discussion in the comments section of another of my posts about stacked branches. As a toy example, imagine we have the following stack of branches:  The repository currently has the following features: The default branch is main and it tracks the default branch on the default remote origin. There is a stack of three branches that make up the feature/ stack. The feature/* stack has not yet been pushed to the upstream. The feature/part-3 branch at the top of the stack is currently checked out. Our goal is to push feature/part-1, feature/part-2, and feature/part-3 to the remote repository as simply as possible. We'll start by running git stack, which simply lists which branches are part of the stack and will be pushed: $ git stack\nfeature/part-3\nfeature/part-2\nfeature/part-1\n This lists all of the branches to be pushed. This looks correct, so we run git push-stack: $ git push-stack\nEnumerating objects: 5, done.\nCounting objects: 100% (5/5), done.\nDelta compression using up to 20 threads\nCompressing objects: 100% (5/5), done.\nWriting objects: 100% (5/5), 1.14 KiB | 1.14 MiB/s, done.\nTotal 5 (delta 4), reused 0 (delta 0), pack-reused 0 (from 0)\nTo C:\\repos\\temp\\temp69\n * [new branch]      feature/part-3 -> feature/part-3\nTotal 0 (delta 0), reused 0 (delta 0), pack-reused 0 (from 0)\nTo C:\\repos\\temp\\temp69\n * [new branch]      feature/part-2 -> feature/part-2\nTotal 0 (delta 0), reused 0 (delta 0), pack-reused 0 (from 0)\nTo C:\\repos\\temp\\temp69\n * [new branch]      feature/part-1 -> feature/part-1\n This pushes all the branches in our stack to our remote repository:  And voila, it works! This basic functionality is what I've wanted for a long time, but there's a few extra \"features\" available for the command too. Pushing part of the stack with git push-stack We'll look in detail at how git push-stack is implemented shortly, but first we'll look at a couple of different ways you can use it. The simplest approach, git push-stack you've already seen, and is used when you already have the top-most branch of the stack checked out, feature/part-3 in the example above. If you only wanted to push part of the stack, you have a couple of options Checkout the top-most branch of the stack that you wish to push, or Explicitly specify the top-most branch of the stack that you wish to push For example, imagine you only want to push feature/part-1 and feature/part-2, but not feature/part-3. You have two options: # Checkout feature/part-2\ngit checkout feature/part-2\n# List the branches that would be pushed\ngit stack\n# Prints:\n#  feature/part-2\n#  feature/part-1\n Alternatively: # Specify the top-most branch explicitly\ngit stack feature/part-2\n# Prints:\n#  feature/part-2\n#  feature/part-1\n Which of these options is the most useful depends on what you're doing: if you already have feature/part-2 checked out, then the first option is easier, otherwise use the second option.  I have used git stack here simply to show what would be pushed. Using git push-stack instead would directly push these branches instead of just printing the branches to push.  Another aspect to acknowledge is that git stack \"intelligently\" determines which branches to push based on the remote default branch, i.e. origin/main. So for example, imagine we now have the following local repository:  In this scenario The feature/part-1 branch was merged to origin/main (likely via a pull request) and the remote branch has been deleted. The local branch feature/part-1 has not yet been deleted. The local default branch main has not yet been updated to track origin/main. If we run git stack in this scenario then we get the expected results: # We don't need to specify the head branch, but specified for clarity\ngit stack feature/part-3\n# Prints:\n#  feature/part-3\n#  feature/part-2\n We only push the branches which need to be, and we rely on the remote default branch origin/main for that calculation, rather than the local default main. I'm sure there's more features we could add, but this has been sufficient for me for now. For the rest of the post, I'll describe how you can create the git push-stack command. Implementing git push-stack The git-push stack command consists of four steps: Calculate the default branch (origin/main). Calculate the \"merge base\" of the stack i.e. the bottom of the stack. Calculate the branches between the merge base and the tip of the stack. Push all the branches calculated in the previous step. To make things easy to test and more composable, I created a Git alias for each of these steps, so we'll walk through them one by one. Assumptions Before we start, it's worth highlighting a couple of assumptions in these aliases: origin is the default remote. You cloned the local repository from a remote, or you have set the default remote branch. These days, the default remote is almost always called origin, but it could be called upstream or anything else. In the aliases I provide here, I assume that you're using origin. Tweaking these to assume origin by default but allowing you to change them would not be difficult, but I haven't done it, for simplicity.  That's mostly because I dislike having more than one positional-parameter—would it be git stack origin mybranch or git stack mybranch origin🤔—and it's not at all easy to have named parameters in git aliases as far as I know. I'm happy to share updated scripts if this is something you do want.  The second point won't normally be a problem. If you cloned a repository from GitHub for example, then you're probably fine. However, if the remote does not set it for some reason, you can set the default branch using: git remote set-head origin --auto\n I discuss this more in the following section, so let's look at the various steps we need to create the git push-stack command. Calculating the default branch When you create a new Git repository, whether locally or on GitHub, you need to specify the default branch. This was master for a long time, but these days it's typically main. Technically though it could be anything. Rather than make assumptions, I have a command that tries to determine the actual default branch used by the remote repository.  This isn't revelatory, a lot of people creating custom Git aliases create a similar alias. I most recently saw this approach in a post by Phil Haack.  When you clone a repository, Git automatically checks out the \"default\" branch (unless you explicitly specify a different branch). Git creates a symbolic-ref in the local repository at refs/remotes/origin/HEAD to point to the default branch of the remote. This ref is updated based on what the remote defines as its HEAD—for GitHub, that’s the branch shown as \"default\" in the UI. You can read the value of this reference with git symbolic-ref refs/remotes/origin/HEAD which prints the remote reference: $ git symbolic-ref refs/remotes/origin/HEAD\nrefs/remotes/origin/main\n We only need the final main part of the output, so we create an alias to extract that using sed. I call the alias git default-branch, and define it like this: [alias]\n    default-branch = \"!git symbolic-ref refs/remotes/origin/HEAD | sed 's@^refs/remotes/origin/@@'\"\n If you run this in a repository it should print the remote you expect: $ git default-branch\nmain\n In some cases, you may get an error when you run this: fatal: ref refs/remotes/origin/HEAD is not a symbolic ref\n This indicates that the default branch for origin hasn't been set. This generally won't happen if you cloned the repository from GitHub, but it could happen if you have only setup the repository locally, or for some configurations. To fix it, run: git remote set-head origin --auto\n This queries the remote and updates the local symbolic link to point to the correct branch. Now we know the default remote branch, we can calculate the merge-base for the stack Calculating the merge-base for the stack Per the documentation, the merge-base between two commits is:  …the best common ancestor(s) between two commits to use in a three-way merge. One common ancestor is better than another common ancestor if the latter is an ancestor of the former. A common ancestor that does not have any better common ancestor is a best common ancestor, i.e. a merge base.  I think merge-base is easiest to visualize, so considering this simple graph:          o---o---o---B---o---o---C\n        /\n---o---1---o---o---o---o---o---A\n The merge base of commits A and B is marked 1. Similarly, the merge base of commits A and C is 1. The merge base of B and C is is B. When we're calculating our stack, we don't want to require that you've already rebased your stack on top of origin/main, so instead we need to calculate the merge-base between the top-most branch of our stack and the default branch. Luckily Git already has the git merge-base command that does this for us: git merge-base <commit1> <commit2> \n We define an alias called merge-base-origin that runs the above command using the default-branch and either the HEAD (for the currently-checked branch) or a parameter specified by the caller, which prints out the commit. For example, if we had checked out branch C and A was origin/main, then git merge-base-origin would print out the SHA of commit 1 The Git configuration below shows the merge-base-origin command, and how we embed a call to the git default-branch alias in there: [alias]\n    merge-base-origin =\"!f() { git merge-base ${1-HEAD} origin/$(git default-branch); };f \"\n An interesting part of this command is the bash ${1-HEAD}. This says: If there is a user-supplied parameter, place it here. If not, use HEAD. That means we can do things like: # Use HEAD and origin/main\n$ git merge-base-origin\n7257e92c016e017fc95e763302ac31c32d78c2b8\n\n# Use feature/part-2 and origin/main\n$ git merge-base-origin feature/part-2\n7257e92c016e017fc95e763302ac31c32d78c2b8\n The next step is the hard one: listing all the branches between the merge-base and our target branch. Listing the branches The next step, listing all the branches to push, is the tricky part, and I was heavily inspired by the discussion on my previous post! The general approach is to use git log to list all the branches between two commits, but it requires quite a bit of playing with the format. I'll build it up bit-by-bit in this section to get to the final command. We start by running git log --pretty=%D and passing in the two commits we want to compare (manually set to HEAD and main at the moment for simplicity). I'm running these commands on the repository we saw previously:  The %D format ensures that for each commit, we only print out the references pointed to: $ git log --pretty=%D main..HEAD\nHEAD -> feature/part-3, origin/feature/part-3\n\norigin/feature/part-2, feature/part-2\norigin/main, origin/HEAD, feature/part-1\n\n OK, you can see the outline of what we need there. There's a lot of extra noise by way of the remote branches (origin/feature/part-3 etc) and the HEAD, plus empty commits, but it's a good start. We'll start by getting rid of the empty lines. We can do that using --simplify-by-decoration: $ git log --pretty=%D --simplify-by-decoration main..HEAD\nHEAD -> feature/part-3, origin/feature/part-3\norigin/feature/part-2, feature/part-2\norigin/main, origin/HEAD, feature/part-1\n Great. Now we need to get rid of the remote references and the HEAD. We'll use --decorate-refs for that, and specify only the refs we care about, local branches: $git log --pretty=%D --simplify-by-decoration --decorate-refs=refs/heads main..HEAD\nfeature/part-3\nfeature/part-2\nfeature/part-1\n Perfect! This almost looks perfect, but there's a slight issue that's not obviously apparent. We can see this if we create another branch: # Just for clarity\ngit checkout feature/part-3\n# Create a new branch on the same commit as feature/part-3\n# but don't add any commits\ngit branch feature/part-4\n If we run the above command again, we get: $ git log --pretty=%D --simplify-by-decoration --decorate-refs=refs/heads main..HEAD\nfeature/part-4, feature/part-3\nfeature/part-2\nfeature/part-1\n This shows the problem: the %D pretty format places the two branches on the same line, separated by a comma. We want each branch to be listed on its own line, so we define our own pretty format instead, using %n as the separator to place each branch on its own line. $ git log --pretty=format:\"%(decorate:prefix=,suffix=,tag=,separator=%n)\" --simplify-by-decoration --decorate-refs=refs/heads main..HEAD\nfeature/part-4\nfeature/part-3\nfeature/part-2\nfeature/part-1\n And there we have it, success! All that remains is to update the hardcoded main and HEAD to support providing a specific branch, and to calculate the merge-base dynamically, and our alias is complete. [alias]\n  stack = \"!f() { \\\n    BRANCH=${1-HEAD}; \\\n    MERGE_BASE=$(git merge-base-origin $BRANCH); \\\n    git log --decorate-refs=refs/heads --simplify-by-decoration --pretty=format:\\\"%(decorate:prefix=,suffix=,tag=,separator=%n)\\\" $MERGE_BASE..$BRANCH; \\\n  };f \"\n For simplicity, I separated the BRANCH and MERGE_BASE variables out. As in the merge-base-orgin alias, BRANCH is defined as either HEAD or the user-provided branch. MERGE_BASE is the output of running git merge-base-origin with the calculated $BRANCH, and then finally, we run the git log command. With the git stack alias complete, we can now run $ git stack\nfeature/part-4\nfeature/part-3\nfeature/part-2\n\n# or, for example\n$ git stack feature/part-2\nfeature/part-2\n All that remains is to implement the git push-stack command. Pushing all the branches With the git stack command implemented, git push-stack simply needs to invoke git stack and then call git push origin --force-with-lease for each of the values returned. The easiest way to do this is with xargs. We can simply pipe the output of git stack to xargs, and it will run the command for each of the provided branches: git stack | xargs -I {} git push --force-with-lease origin {}\n The -I {} part means \"replace {} in the following command with the actual parameter\", where the parameter is the value returned from git stack, split by lines. So this runs git push on each of the branches returned by git stack. The definition in git is almost as simple as this, I just defined the $BRANCH variable again to allow passing a different value down to git stack [alias]\n\tpush-stack = \"!f() { \\\n\t\tBRANCH=${1-HEAD}; \\\n\t\tgit stack $BRANCH | xargs -I {} git push --force-with-lease origin {}; \\\n\t};f \"\n That's the final piece of the puzzle, so now we can put it all together and look at our final set of aliases. Putting it all together The final set of aliases, as defined in my .gitconfig file is as follows: [alias]\n\tdefault-branch = \"!git symbolic-ref refs/remotes/origin/HEAD | sed 's@^refs/remotes/origin/@@'\"\n\tmerge-base-origin =\"!f() { git merge-base ${1-HEAD} origin/$(git default-branch); };f \"\n\tstack = \"!f() { \\\n\t\tBRANCH=${1-HEAD}; \\\n\t\tMERGE_BASE=$(git merge-base-origin $BRANCH); \\\n\t\tgit log --decorate-refs=refs/heads --simplify-by-decoration --pretty=format:\\\"%(decorate:prefix=,suffix=,tag=,separator=%n)\\\" $MERGE_BASE..$BRANCH; \\\n\t};f \"\n\tpush-stack = \"!f() { \\\n\t\tBRANCH=${1-HEAD}; \\\n\t\tgit stack $BRANCH | xargs -I {} git push --force-with-lease origin {}; \\\n\t};f \"\n You can simply copy-paste those into your own Git config (e.g. by running git config --global --edit to open your editor).  One thing you might wonder is why there are so many cases of ${1-HEAD} duplicated throughout. This is primarily so that each of these aliases can be called independently.  Alternatively, you can run the following at the command line to add them automatically: git config --global alias.default-branch \"!git symbolic-ref refs/remotes/origin/HEAD | sed 's@^refs/remotes/origin/@@'\"\ngit config --global alias.merge-base-origin '!f() { git merge-base ${1-HEAD} origin/$(git default-branch); };f '\ngit config --global alias.stack '!f() { BRANCH=${1-HEAD}; MERGE_BASE=$(git merge-base-origin $BRANCH); git log --decorate-refs=refs/heads --simplify-by-decoration --pretty=format:\\\"%(decorate:prefix=,suffix=,tag=,separator=%n)\\\" $MERGE_BASE..$BRANCH; };f '\ngit config --global alias.push-stack '!f() { BRANCH=${1-HEAD};  git stack $BRANCH | xargs -I {} git push --force-with-lease origin {}; };f '\n And there you have it: simple pushing of an entire Git stack of branches with a single command. If you've been handling this manually like I was for years, then I hope this helps! If not, then I'd be interested to see what scripts you're using: reply in the comments if you're happy sharing! Summary In this post I described stacked branches in Git and how they can simplify the review process for PRs. However, it can be a pain when you need to push a whole stack of PRs to a remote. In this post I showed how I created a Git alias that allows you to run git push-stack to push an entire stack of branches in a single command. I showed how I built this alias out of multiple other aliases, such as git stack, and added customisation options. I hope this makes managing stacks of branches easier for everyone!"
  },
  {
    "itemId": "https://andrewlock.net/using-the-new-ai-template-to-create-a-chatbot-about-a-website/",
    "raw": "<img src=\"https://andrewlock.net/content/images/2025/githubmodels_banner.png\" /><p>In this post I use <a href=\"https://devblogs.microsoft.com/dotnet/announcing-dotnet-ai-template-preview2/\">the new .NET AI Chat Web App template (currently in preview)</a> to create a chat application that ingests the contents of a website (<a href=\"https://dotnetcore.show/\">The Modern .NET Show</a>) and uses that data to answer questions in the chat.</p> <p>This post was partly inspired by a conversation I had with <a href=\"https://bsky.app/profile/gaprogman.com\">Jamie Taylor</a> at the MVP summit in which he was exploring ways to do exactly this: have a chatbot for discussing the contents of his podcast, <a href=\"https://dotnetcore.show/\">The Modern .NET Show</a>. Seeing as Jamie already has full transcripts for the podcast on his website, this scenario seemed like a perfect use case for the new AI template!</p> <h2 id=\"the-new-net-ai-chat-web-app-template\" class=\"heading-with-anchor\"><a href=\"#the-new-net-ai-chat-web-app-template\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">The new .NET AI Chat Web App template</a></h2> <p>In <a href=\"/exploring-the-new-ai-chat-template/\">the previous post</a>, I explored <a href=\"https://devblogs.microsoft.com/dotnet/announcing-dotnet-ai-template-preview2/\">the new .NET AI Chat Web App template (currently in preview)</a>, walked through the getting started experience, and explored the code it includes.</p> <p>To install the AI template, you can run the following command</p> <pre class=\"language-bash\"><code class=\"language-bash\">dotnet new <span class=\"token function\">install</span> Microsoft.Extensions.AI.Templates\n</code></pre> <p>You can then create the template by running <code>aichatweb</code>, and providing the required parameters:</p> <pre class=\"language-bash\"><code class=\"language-bash\">dotnet new aichatweb <span class=\"token punctuation\">\\</span>\n    -- output ModernDotNetShowChat\n    <span class=\"token parameter variable\">--provider</span> githubmodels <span class=\"token punctuation\">\\</span>\n    --vector-store <span class=\"token builtin class-name\">local</span> <span class=\"token punctuation\">\\</span>\n    <span class=\"token parameter variable\">--aspire</span> <span class=\"token boolean\">true</span>\n</code></pre> <p>I describe these various options in the previous post, as well as how to configure GitHub models to allow free access for prototyping applications using large language models (LLMs) from OpenAI and others. The generated solution looks like the following:</p> <p><img src=\"/content/images/2025/githubmodels_01.png\" alt=\"The solution layout\"></p> <p>Inside the solution folder is a <em>README.md</em> file that describes the remaining configuration, such as how to configure the required connection string for GitHub Models:</p> <pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">cd</span> ModernDotNetShowChat.AppHost\ndotnet user-secrets <span class=\"token builtin class-name\">set</span> ConnectionStrings:openai <span class=\"token string\">\"Endpoint=https://models.inference.ai.azure.com;Key=YOUR-API-KEY\"</span>\n</code></pre> <p>Finally, I showed the working chat application. You run the app by running the Aspire AppHost project. This starts the web app (and passes in all the required connection strings). The web app then runs an \"ingestion\" process against 2 pdf files (about watches) that are available in the content folder. More on this later.</p> <p>The web app is a \"traditional\" chat application, just like you've seen with ChatGPT or GitHub Copilot Chat. This interface lets you ask questions about the PDFs that were ingested. In the example below I asked the question \"Which watches are available\":</p> <p><img src=\"/content/images/2025/githubmodels_02.png\" alt=\"Trying out the default template\"></p> <p>The chat assistant interprets your question and decides what phrases to search for in the documents. It then answers your question based on the details it finds in the documents, and even provides a link to the file that contains the answer.</p> <blockquote> <p>This general technique of providing \"sources\" for the LLM to use, instead of relying on the built-in knowledge is called retrieval-augmented generation (RAG), and is one way to try to ensure that the LLM provides answers grounded in facts. It involves ingesting source data, encoding it as vectors in a vector store, and making this store available to the LLM.</p> </blockquote> <p>In <a href=\"/exploring-the-new-ai-chat-template/\">the previous post</a> I explore the template in more detail, but in this post I take a different approach and customise the template for a slightly different purpose.</p> <h2 id=\"modifying-the-website-to-chat-about-a-website\" class=\"heading-with-anchor\"><a href=\"#modifying-the-website-to-chat-about-a-website\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Modifying the website to chat about a website</a></h2> <p>As I mentioned at the start of this post, when I saw this template, I immediately thought of a conversation I had with <a href=\"https://bsky.app/profile/gaprogman.com\">Jamie Taylor</a> at the MVP summit in which he was exploring ways to do exactly this: have a chatbot for discussing the contents of his podcast, <a href=\"https://dotnetcore.show/\">The Modern .NET Show</a>. Jamie already has full transcripts for the podcast on his website, so all we should need to do is tweak the data ingestion details.</p> <blockquote> <p>I also had to make various tweaks to the UI to show links to URLs instead of PDFs, but those are less interesting so I don't discuss them here. You can see the updated project <a href=\"https://github.com/andrewlock/ModernDotNetShowChat\">on GitHub</a> (the modifications are all <a href=\"https://github.com/andrewlock/ModernDotNetShowChat/commit/a2e9b4fe3b9e2dbef4dceecd62b53bca7393ecbf\">in this commit</a>).</p> </blockquote> <h3 id=\"creating-a-new-ingestion-source\" class=\"heading-with-anchor\"><a href=\"#creating-a-new-ingestion-source\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Creating a new ingestion source</a></h3> <p>Other than UI changes, the main change needed is to the ingestion code. Instead of ingesting PDF files, the app will ingest web pages from <a href=\"https://dotnetcore.show/\">The Modern .NET Show</a> website. To do that, you can implement the <code>IIngestionSource</code> interface which is part of the template:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">IIngestionSource</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> SourceId <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n    <span class=\"token return-type class-name\">Task<span class=\"token punctuation\">&lt;</span>IEnumerable<span class=\"token punctuation\">&lt;</span>IngestedDocument<span class=\"token punctuation\">&gt;</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">GetNewOrModifiedDocumentsAsync</span><span class=\"token punctuation\">(</span>\n        <span class=\"token class-name\">IQueryable<span class=\"token punctuation\">&lt;</span>IngestedDocument<span class=\"token punctuation\">&gt;</span></span> existingDocuments<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token return-type class-name\">Task<span class=\"token punctuation\">&lt;</span>IEnumerable<span class=\"token punctuation\">&lt;</span>IngestedDocument<span class=\"token punctuation\">&gt;</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">GetDeletedDocumentsAsync</span><span class=\"token punctuation\">(</span>\n        <span class=\"token class-name\">IQueryable<span class=\"token punctuation\">&lt;</span>IngestedDocument<span class=\"token punctuation\">&gt;</span></span> existingDocuments<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token return-type class-name\">Task<span class=\"token punctuation\">&lt;</span>IEnumerable<span class=\"token punctuation\">&lt;</span>SemanticSearchRecord<span class=\"token punctuation\">&gt;</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">CreateRecordsForDocumentAsync</span><span class=\"token punctuation\">(</span>\n        <span class=\"token class-name\">IEmbeddingGenerator<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">,</span> Embedding<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">&gt;</span><span class=\"token punctuation\">&gt;</span></span> embeddingGenerator<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> documentId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>As you can see, there are three methods that need implementing, and a property that gives the ingestion source a unique ID. The property is the easy part, so we'll start there. We'll also create an <code>HttpClient</code> instance that we'll use to retrieve data from the website:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">WebIngestionSource</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">IIngestionSource</span></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\">HttpClient</span> _httpClient<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token function\">WebIngestionSource</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> url<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// Create a unique source ID based on the type name and the provided URL</span>\n        SourceId <span class=\"token operator\">=</span> <span class=\"token interpolation-string\"><span class=\"token string\">$\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\"><span class=\"token keyword\">nameof</span><span class=\"token punctuation\">(</span>WebIngestionSource<span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">}</span></span><span class=\"token string\">:</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">url</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">;</span>\n        _httpClient <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">HttpClient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            BaseAddress <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Uri</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> SourceId <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>We have the initial basis of our type, so now we can start implementing the required methods. We'll start by implementing the function that lists all the possible pages of the site.</p> <h3 id=\"finding-all-the-pages-in-the-site\" class=\"heading-with-anchor\"><a href=\"#finding-all-the-pages-in-the-site\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Finding all the pages in the site</a></h3> <p>To find all the pages on a website you can basically take two options:</p> <ul><li>Crawl the website to find all possible pages.</li> <li>Use a <em>sitemap.xml</em> file if the site provides one.</li></ul> <p>Luckily for us, the Modern .NET show site includes <a href=\"https://dotnetcore.show/sitemap.xml\">a <em>sitemap.xml</em> file</a>, so we can take the easy route and parse that. The following basic code parses the sitemap.xml file using the <code>XmlSerializer</code>, parsing out only the values we're interested in (the location (url) and the date it was last modified):</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">async</span> <span class=\"token return-type class-name\">Task<span class=\"token punctuation\">&lt;</span>Sitemap<span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">GetSitemap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> serializer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">XmlSerializer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span><span class=\"token type-expression class-name\">Sitemap</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">await</span> <span class=\"token keyword\">using</span> <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> stream <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> _httpClient<span class=\"token punctuation\">.</span><span class=\"token function\">GetStreamAsync</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sitemap.xml\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> sitemap <span class=\"token operator\">=</span> serializer<span class=\"token punctuation\">.</span><span class=\"token function\">Deserialize</span><span class=\"token punctuation\">(</span>stream<span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> <span class=\"token class-name\">Sitemap</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sitemap <span class=\"token keyword\">is</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Exception</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Unable to read sitemap\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> sitemap<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">XmlRoot</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token string\">\"urlset\"</span><span class=\"token punctuation\">,</span> Namespace <span class=\"token operator\">=</span> <span class=\"token string\">\"http://www.sitemaps.org/schemas/sitemap/0.9\"</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Sitemap</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">XmlElement</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token string\">\"url\"</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">public</span> required <span class=\"token return-type class-name\">List<span class=\"token punctuation\">&lt;</span>Entry<span class=\"token punctuation\">&gt;</span></span> Entries <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Entry</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">XmlElement</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token string\">\"loc\"</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">public</span> required <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> Location <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n        <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">XmlElement</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token string\">\"lastmod\"</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">public</span> required <span class=\"token return-type class-name\">DateTime</span> LastModified <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>From this method we get a <code>SiteMap</code> object, that includes all the pages available on the site. We'll use that in the <code>GetNewOrModifiedDocumentsAsync()</code> method that is called by the data ingestion code. This method is provided a collection of <code>IngestedDocument</code> which are the previously ingested pages from previous executions of the app. Any <code>IngestedDocument</code> that you return from the method are queued for subsequent ingestion; this method doesn't do the ingestion itself, it's just finding <em>which</em> pages to ingest:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">async</span> <span class=\"token return-type class-name\">Task<span class=\"token punctuation\">&lt;</span>IEnumerable<span class=\"token punctuation\">&lt;</span>IngestedDocument<span class=\"token punctuation\">&gt;</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">GetNewOrModifiedDocumentsAsync</span><span class=\"token punctuation\">(</span>\n    <span class=\"token class-name\">IQueryable<span class=\"token punctuation\">&lt;</span>IngestedDocument<span class=\"token punctuation\">&gt;</span></span> existingDocuments<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Fetch the sitemap for the website</span>\n    <span class=\"token class-name\">Sitemap</span> sitemap <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">GetSitemap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> results <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">List<span class=\"token punctuation\">&lt;</span>IngestedDocument<span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Loop through all of the entries in the sitemap</span>\n    <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> entry <span class=\"token keyword\">in</span> sitemap<span class=\"token punctuation\">.</span>Entries<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// The \"ID\" for the page, which is the URL of the page</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> sourceFileId <span class=\"token operator\">=</span> entry<span class=\"token punctuation\">.</span>Location<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// The \"version\" for the page, which is the last modified time</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> sourceFileVersion <span class=\"token operator\">=</span> entry<span class=\"token punctuation\">.</span>LastModified<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"o\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// Try to see if we have ingested this page before</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> existingDocument <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> existingDocuments\n            <span class=\"token punctuation\">.</span><span class=\"token function\">Where</span><span class=\"token punctuation\">(</span>d <span class=\"token operator\">=&gt;</span> d<span class=\"token punctuation\">.</span>SourceId <span class=\"token operator\">==</span> SourceId <span class=\"token operator\">&amp;&amp;</span> d<span class=\"token punctuation\">.</span>Id <span class=\"token operator\">==</span> sourceFileId<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">FirstOrDefaultAsync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>existingDocument <span class=\"token keyword\">is</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// If there's no matching document, add this page to the ingestion list</span>\n            results<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> Id <span class=\"token operator\">=</span> sourceFileId<span class=\"token punctuation\">,</span> Version <span class=\"token operator\">=</span> sourceFileVersion<span class=\"token punctuation\">,</span> SourceId <span class=\"token operator\">=</span> SourceId <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>existingDocument<span class=\"token punctuation\">.</span>Version <span class=\"token operator\">!=</span> sourceFileVersion<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// If we have already ingested this page, but the last modified date has changed,</span>\n            <span class=\"token comment\">// then update the version and add it to the ingestion list</span>\n            existingDocument<span class=\"token punctuation\">.</span>Version <span class=\"token operator\">=</span> sourceFileVersion<span class=\"token punctuation\">;</span>\n            results<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>existingDocument<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">// Otherwise we have already ingested this version of the document</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> results<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>After the method is called, all the documents returned are ready to be ingested.</p> <h3 id=\"ingesting-new-and-modified-pages\" class=\"heading-with-anchor\"><a href=\"#ingesting-new-and-modified-pages\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Ingesting new and modified pages</a></h3> <p>Ingesting a page involves several steps:</p> <ol><li>Download the page from the website</li> <li>Parse the HTML for the page</li> <li>Convert the HTML into plain-text, so that it can be more easily understood by the LLM</li> <li>Split the page into paragraphs</li> <li>Generate vector-embeddings for performing RAG for each paragraph</li></ol> <p>Step 1 is easy, as we can use <code>HttpClient</code>. For step 2, I chose to use <a href=\"https://github.com/AngleSharp/AngleSharp\">AngleSharp</a>, a .NET library for parsing HTML, and my go-to for this kind of thing. For step 3, converting the HTML to plain-text, a quick bit of googling found <a href=\"https://github.com/matteocontrini/Textify\">this small package called Textify</a> which seemed to do exactly what I needed, converting an AngleSharp <code>IDocument</code> to markdown.</p> <p>Step 4 comes courtesy of a utility called <code>TextChunker</code> that's currently built into the <a href=\"https://learn.microsoft.com/en-us/semantic-kernel/overview/\">Semantic Kernel</a> packages (though I expect these will end up pushed to other abstraction libraries in the future). Step 5 is handled by the template and abstraction libraries provided by Microsoft and OpenAI, in particular the <em>Microsoft.Extensions.AI.Abstractions</em> and implementation libraries.</p> <p>The code below shows how we I achieved all this relatively simply using the abstractions provided by the template:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">async</span> <span class=\"token return-type class-name\">Task<span class=\"token punctuation\">&lt;</span>IEnumerable<span class=\"token punctuation\">&lt;</span>SemanticSearchRecord<span class=\"token punctuation\">&gt;</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">CreateRecordsForDocumentAsync</span><span class=\"token punctuation\">(</span>\n    <span class=\"token class-name\">IEmbeddingGenerator<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">,</span> Embedding<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">&gt;</span><span class=\"token punctuation\">&gt;</span></span> embeddingGenerator<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> documentId<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Request the page body for the provided ID (url)</span>\n    <span class=\"token keyword\">await</span> <span class=\"token keyword\">using</span> <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> stream <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> _httpClient<span class=\"token punctuation\">.</span><span class=\"token function\">GetStreamAsync</span><span class=\"token punctuation\">(</span>documentId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Use AngleSharp to read and parse the HTML document </span>\n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> config <span class=\"token operator\">=</span> Configuration<span class=\"token punctuation\">.</span>Default<span class=\"token punctuation\">.</span><span class=\"token function\">WithDefaultLoader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> context <span class=\"token operator\">=</span> BrowsingContext<span class=\"token punctuation\">.</span><span class=\"token function\">New</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">IDocument</span> document <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">OpenAsync</span><span class=\"token punctuation\">(</span>documentId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Use Textify to convert the HTML to a markdown document </span>\n    <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> pageText <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">HtmlToTextConverter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Convert</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Split the document into paragraphs using the experimental type from SemanticKernel</span>\n<span class=\"token preprocessor property\">#<span class=\"token directive keyword\">pragma</span> warning disable SKEXP0050 </span><span class=\"token comment\">// Type is for evaluation purposes only</span>\n    <span class=\"token class-name\">List<span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> IndexOnPage<span class=\"token punctuation\">,</span> <span class=\"token keyword\">string</span> Text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&gt;</span></span> paragraphs <span class=\"token operator\">=</span>\n        TextChunker<span class=\"token punctuation\">.</span><span class=\"token function\">SplitPlainTextParagraphs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">pageText</span></span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token named-parameter punctuation\">maxTokensPerParagraph</span><span class=\"token punctuation\">:</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">Select</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">,</span> text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">ToList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token preprocessor property\">#<span class=\"token directive keyword\">pragma</span> warning restore SKEXP0050 </span><span class=\"token comment\">// Type is for evaluation purposes only</span>\n\n    <span class=\"token comment\">// Generate embeddings for all the paragraphs</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> embeddings <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> embeddingGenerator<span class=\"token punctuation\">.</span><span class=\"token function\">GenerateAsync</span><span class=\"token punctuation\">(</span>paragraphs<span class=\"token punctuation\">.</span><span class=\"token function\">Select</span><span class=\"token punctuation\">(</span>c <span class=\"token operator\">=&gt;</span> c<span class=\"token punctuation\">.</span>Text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Combine the paragraphs and embeddings, to return a collection of SemanticSearchRecords</span>\n    <span class=\"token keyword\">return</span> paragraphs<span class=\"token punctuation\">.</span><span class=\"token function\">Zip</span><span class=\"token punctuation\">(</span>embeddings<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Select</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>pair<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">SemanticSearchRecord</span>\n    <span class=\"token punctuation\">{</span>\n        Key <span class=\"token operator\">=</span> <span class=\"token interpolation-string\"><span class=\"token string\">$\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">documentId</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">_</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">pair<span class=\"token punctuation\">.</span>First<span class=\"token punctuation\">.</span>IndexOnPage</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">,</span>\n        Url <span class=\"token operator\">=</span> documentId<span class=\"token punctuation\">,</span>\n        Text <span class=\"token operator\">=</span> pair<span class=\"token punctuation\">.</span>First<span class=\"token punctuation\">.</span>Text<span class=\"token punctuation\">,</span>\n        Vector <span class=\"token operator\">=</span> pair<span class=\"token punctuation\">.</span>Second<span class=\"token punctuation\">.</span>Vector<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>That's the most complex method, the final required implementation is handling record deletion.</p> <h3 id=\"finding-records-to-delete\" class=\"heading-with-anchor\"><a href=\"#finding-records-to-delete\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Finding records to delete</a></h3> <p>The final method we need to implement is <code>GetDeletedDocumentsAsync()</code> which returns a list of documents that we previously ingested, which we should remove from the dataset. In the implementation below we again read the <em>sitemap.xml</em> and extract all the URLs to a <code>HashSet</code>. We then loop through all the existing documents; if the document ID is not in the set, we keep it, and return it from the method. These documents will be removed from the vector store.</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">async</span> <span class=\"token return-type class-name\">Task<span class=\"token punctuation\">&lt;</span>IEnumerable<span class=\"token punctuation\">&lt;</span>IngestedDocument<span class=\"token punctuation\">&gt;</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">GetDeletedDocumentsAsync</span><span class=\"token punctuation\">(</span>\n    <span class=\"token class-name\">IQueryable<span class=\"token punctuation\">&lt;</span>IngestedDocument<span class=\"token punctuation\">&gt;</span></span> existingDocuments<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">Sitemap</span> sitemap <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">GetSitemap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> urls <span class=\"token operator\">=</span> sitemap<span class=\"token punctuation\">.</span>Entries<span class=\"token punctuation\">.</span><span class=\"token function\">Select</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">=&gt;</span> x<span class=\"token punctuation\">.</span>Location<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ToHashSet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">await</span> existingDocuments\n        <span class=\"token punctuation\">.</span><span class=\"token function\">Where</span><span class=\"token punctuation\">(</span>doc <span class=\"token operator\">=&gt;</span> <span class=\"token operator\">!</span>urls<span class=\"token punctuation\">.</span><span class=\"token function\">Contains</span><span class=\"token punctuation\">(</span>doc<span class=\"token punctuation\">.</span>Id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">ToListAsync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>And with that, we've tackled the majority of the implementation. Note that I made a couple of tweaks to the <code>SemanticSearchRecord</code> type to replace the <code>Filename</code> property with <code>Url</code> and removed the <code>PageNumber</code> property, to better match our case of ingesting webpages instead of files.</p> <h3 id=\"configuring-the-app-to-use-the-new-ingestion-source\" class=\"heading-with-anchor\"><a href=\"#configuring-the-app-to-use-the-new-ingestion-source\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Configuring the app to use the new ingestion source</a></h3> <p>The final step we need to take is to update the actual ingestion. This occurs in <em>Program.cs</em> of the web app, just before calling <code>app.Run()</code>:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token comment\">// ... existing setup</span>\n\n<span class=\"token comment\">// Use the provided DataIngestor, but pass in </span>\n<span class=\"token comment\">// our custom IIngestionSource, the WebIngestionSource</span>\n<span class=\"token keyword\">await</span> DataIngestor<span class=\"token punctuation\">.</span><span class=\"token function\">IngestDataAsync</span><span class=\"token punctuation\">(</span>\n    app<span class=\"token punctuation\">.</span>Services<span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">WebIngestionSource</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"https://dotnetcore.show\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">Run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre> <p>With that, we're finished. Time to take it for a spin!</p> <h2 id=\"trying-out-the-new-chat-app\" class=\"heading-with-anchor\"><a href=\"#trying-out-the-new-chat-app\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Trying out the new chat app</a></h2> <p>We can try out our new app by hitting F5, or running <code>dotnet run</code> on the aspire app. This starts the ingestion process, first running <code>GetNewOrModifiedDocumentsAsync()</code> and <code>GetDeletedDocumentsAsync()</code> to find the pages to ingest, and then running <code>CreateRecordsForDocumentAsync()</code> to ingest the pages, for example:</p> <pre class=\"language-bash\"><code class=\"language-bash\">info: ModernDotNetShowChat.Web.Services.Ingestion.DataIngestor<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n      Processing https://dotnetcore.show/episodes/\ninfo: ModernDotNetShowChat.Web.Services.Ingestion.DataIngestor<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n      Processing https://dotnetcore.show/season-7/jonathan-peppers-unleashes-code-chaos-how-dotnet-meets-the-nes/\ninfo: ModernDotNetShowChat.Web.Services.Ingestion.DataIngestor<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n      Processing https://dotnetcore.show/\ninfo: ModernDotNetShowChat.Web.Services.Ingestion.DataIngestor<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n      Processing https://dotnetcore.show/season-7/google-gemini-in-net-the-ultimate-guide-with-jochen-kirstaetter/\n<span class=\"token punctuation\">..</span>.\n</code></pre> <p>This takes a <em>long</em> time (more on that later) but once it's finished, the app starts and we can ask questions about The Modern .NET Show:</p> <p><img src=\"/content/images/2025/githubmodels_04.png\" alt=\"Trying out the new app\"></p> <p>Just as for the original template, the chatbot includes citations for its answers, including links to the page that contained the answer, and a quote from the page.</p> <p>There are obviously a lot of tweaks that you could make to the template and the site in general. For example, I increased the size of the quote that the chatbot can include in it's citations. I didn't play around with the template much more than that, as the proof of concept seemed to work!</p> <h2 id=\"ingesting-web-pages-is-slow\" class=\"heading-with-anchor\"><a href=\"#ingesting-web-pages-is-slow\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Ingesting web pages is slow</a></h2> <p>One observation I found is that the ingestion process was <em>very</em> slow. It took an average of about 10 seconds to ingest a <em>single</em> page. And when there's ~250 pages to ingest, that adds up to roughly 40 minutes of ingestion time! 😅 I haven't dug into this too deeply to understand where it's so slow, but I'd be willing to put money on it being the actual embedding step. We generate an embedding for every paragraph in the page, and seeing as that requires a network call, it seems reasonable to think that's the source of the problem.</p> <p>Another aspect that's a little annoying is that the <code>DataIngestor</code> that ships with the template calls <code>CreateRecordsForDocumentAsync()</code> for all of the pages but doesn't <em>save</em> the results until after it's run for <em>every</em> document. That means that if you interrupt the process for some reason (because it's taking 40 mins perhaps 😉) then you have to start from the beginning again the next time you run the app. To work around that I made a small change to the <code>DataIngestor</code> to save after every 20 documents instead.</p> <p>The final issue is that by default, the template uses a random file path for the SQLite ingestion cache every time the app starts up. That means it redoes <em>all</em> that ingestion work every time it starts up. The simple solution to that is to provide a path and filename for the database file. That way the database isn't re-created every time your app starts, and you can instead incrementally update the embeddings:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> ingestionCache <span class=\"token operator\">=</span> builder<span class=\"token punctuation\">.</span><span class=\"token function\">AddSqlite</span><span class=\"token punctuation\">(</span>\n    <span class=\"token string\">\"ingestionCache\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token named-parameter punctuation\">databasePath</span><span class=\"token punctuation\">:</span> <span class=\"token string\">@\"D:\\repos\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token named-parameter punctuation\">databaseFileName</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"modern_dotnetshow_embeddings.db\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre> <p>That simple change makes the app much more usable. Obviously, for production you likely wouldn't be using a SQLite database and JSON file for your vectors, so it wouldn't be a problem anyway.</p> <p>Overall, I think this makes an interesting proof of concept, although how useful it is in practice will remain to be seen I think.</p> <h2 id=\"summary\" class=\"heading-with-anchor\"><a href=\"#summary\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Summary</a></h2> <p>In this post I showed how you can use <a href=\"https://devblogs.microsoft.com/dotnet/announcing-dotnet-ai-template-preview2/\">the new .NET AI Chat Web App template (currently in preview)</a> to create a custom <code>IIngestionSource</code> to ingest data about a website, so that you can chat with an LLM about the site. The resulting chat app provides quotes and citations from the website when answering your questions. You can find the source code for this demo app <a href=\"https://github.com/andrewlock/ModernDotNetShowChat\">on GitHub</a>.</p> ",
    "sanitized": "In this post I use the new .NET AI Chat Web App template (currently in preview) to create a chat application that ingests the contents of a website (The Modern .NET Show) and uses that data to answer questions in the chat. This post was partly inspired by a conversation I had with Jamie Taylor at the MVP summit in which he was exploring ways to do exactly this: have a chatbot for discussing the contents of his podcast, The Modern .NET Show. Seeing as Jamie already has full transcripts for the podcast on his website, this scenario seemed like a perfect use case for the new AI template! The new .NET AI Chat Web App template In the previous post, I explored the new .NET AI Chat Web App template (currently in preview), walked through the getting started experience, and explored the code it includes. To install the AI template, you can run the following command dotnet new install Microsoft.Extensions.AI.Templates\n You can then create the template by running aichatweb, and providing the required parameters: dotnet new aichatweb \\\n    -- output ModernDotNetShowChat\n    --provider githubmodels \\\n    --vector-store local \\\n    --aspire true\n I describe these various options in the previous post, as well as how to configure GitHub models to allow free access for prototyping applications using large language models (LLMs) from OpenAI and others. The generated solution looks like the following:  Inside the solution folder is a README.md file that describes the remaining configuration, such as how to configure the required connection string for GitHub Models: cd ModernDotNetShowChat.AppHost\ndotnet user-secrets set ConnectionStrings:openai \"Endpoint=https://models.inference.ai.azure.com;Key=YOUR-API-KEY\"\n Finally, I showed the working chat application. You run the app by running the Aspire AppHost project. This starts the web app (and passes in all the required connection strings). The web app then runs an \"ingestion\" process against 2 pdf files (about watches) that are available in the content folder. More on this later. The web app is a \"traditional\" chat application, just like you've seen with ChatGPT or GitHub Copilot Chat. This interface lets you ask questions about the PDFs that were ingested. In the example below I asked the question \"Which watches are available\":  The chat assistant interprets your question and decides what phrases to search for in the documents. It then answers your question based on the details it finds in the documents, and even provides a link to the file that contains the answer.  This general technique of providing \"sources\" for the LLM to use, instead of relying on the built-in knowledge is called retrieval-augmented generation (RAG), and is one way to try to ensure that the LLM provides answers grounded in facts. It involves ingesting source data, encoding it as vectors in a vector store, and making this store available to the LLM.  In the previous post I explore the template in more detail, but in this post I take a different approach and customise the template for a slightly different purpose. Modifying the website to chat about a website As I mentioned at the start of this post, when I saw this template, I immediately thought of a conversation I had with Jamie Taylor at the MVP summit in which he was exploring ways to do exactly this: have a chatbot for discussing the contents of his podcast, The Modern .NET Show. Jamie already has full transcripts for the podcast on his website, so all we should need to do is tweak the data ingestion details.  I also had to make various tweaks to the UI to show links to URLs instead of PDFs, but those are less interesting so I don't discuss them here. You can see the updated project on GitHub (the modifications are all in this commit).  Creating a new ingestion source Other than UI changes, the main change needed is to the ingestion code. Instead of ingesting PDF files, the app will ingest web pages from The Modern .NET Show website. To do that, you can implement the IIngestionSource interface which is part of the template: public interface IIngestionSource\n{\n    string SourceId { get; }\n\n    Task<IEnumerable<IngestedDocument>> GetNewOrModifiedDocumentsAsync(\n        IQueryable<IngestedDocument> existingDocuments);\n\n    Task<IEnumerable<IngestedDocument>> GetDeletedDocumentsAsync(\n        IQueryable<IngestedDocument> existingDocuments);\n\n    Task<IEnumerable<SemanticSearchRecord>> CreateRecordsForDocumentAsync(\n        IEmbeddingGenerator<string, Embedding<float>> embeddingGenerator, string documentId);\n}\n As you can see, there are three methods that need implementing, and a property that gives the ingestion source a unique ID. The property is the easy part, so we'll start there. We'll also create an HttpClient instance that we'll use to retrieve data from the website: public class WebIngestionSource : IIngestionSource\n{\n    private readonly HttpClient _httpClient;\n\n    public WebIngestionSource(string url)\n    {\n        // Create a unique source ID based on the type name and the provided URL\n        SourceId = $\"{nameof(WebIngestionSource)}:{url}\";\n        _httpClient = new HttpClient()\n        {\n            BaseAddress = new Uri(url),\n        };\n    }\n\n    public string SourceId { get; }\n\n    // ...\n}\n We have the initial basis of our type, so now we can start implementing the required methods. We'll start by implementing the function that lists all the possible pages of the site. Finding all the pages in the site To find all the pages on a website you can basically take two options: Crawl the website to find all possible pages. Use a sitemap.xml file if the site provides one. Luckily for us, the Modern .NET show site includes a sitemap.xml file, so we can take the easy route and parse that. The following basic code parses the sitemap.xml file using the XmlSerializer, parsing out only the values we're interested in (the location (url) and the date it was last modified): private async Task<Sitemap> GetSitemap()\n{\n    var serializer = new XmlSerializer(typeof(Sitemap));\n    await using var stream = await _httpClient.GetStreamAsync(\"sitemap.xml\");\n    var sitemap = serializer.Deserialize(stream) as Sitemap;\n    if (sitemap is null)\n    {\n        throw new Exception(\"Unable to read sitemap\");\n    }\n\n    return sitemap;\n}\n\n[XmlRoot(\"urlset\", Namespace = \"http://www.sitemaps.org/schemas/sitemap/0.9\")]\npublic class Sitemap\n{\n    [XmlElement(\"url\")]\n    public required List<Entry> Entries { get; set; }\n\n    public class Entry\n    {\n        [XmlElement(\"loc\")]\n        public required string Location { get; set; }\n\n        [XmlElement(\"lastmod\")]\n        public required DateTime LastModified { get; set; }\n    }\n}\n From this method we get a SiteMap object, that includes all the pages available on the site. We'll use that in the GetNewOrModifiedDocumentsAsync() method that is called by the data ingestion code. This method is provided a collection of IngestedDocument which are the previously ingested pages from previous executions of the app. Any IngestedDocument that you return from the method are queued for subsequent ingestion; this method doesn't do the ingestion itself, it's just finding which pages to ingest: public async Task<IEnumerable<IngestedDocument>> GetNewOrModifiedDocumentsAsync(\n    IQueryable<IngestedDocument> existingDocuments)\n{\n    // Fetch the sitemap for the website\n    Sitemap sitemap = await GetSitemap();\n    var results = new List<IngestedDocument>();\n\n    // Loop through all of the entries in the sitemap\n    foreach (var entry in sitemap.Entries)\n    {\n        // The \"ID\" for the page, which is the URL of the page\n        string sourceFileId = entry.Location;\n        // The \"version\" for the page, which is the last modified time\n        string sourceFileVersion = entry.LastModified.ToString(\"o\");\n\n        // Try to see if we have ingested this page before\n        var existingDocument = await existingDocuments\n            .Where(d => d.SourceId == SourceId && d.Id == sourceFileId)\n            .FirstOrDefaultAsync();\n\n        if (existingDocument is null)\n        {\n            // If there's no matching document, add this page to the ingestion list\n            results.Add(new() { Id = sourceFileId, Version = sourceFileVersion, SourceId = SourceId });\n        }\n        else if (existingDocument.Version != sourceFileVersion)\n        {\n            // If we have already ingested this page, but the last modified date has changed,\n            // then update the version and add it to the ingestion list\n            existingDocument.Version = sourceFileVersion;\n            results.Add(existingDocument);\n        }\n        // Otherwise we have already ingested this version of the document\n    }\n\n    return results;\n}\n After the method is called, all the documents returned are ready to be ingested. Ingesting new and modified pages Ingesting a page involves several steps: Download the page from the website Parse the HTML for the page Convert the HTML into plain-text, so that it can be more easily understood by the LLM Split the page into paragraphs Generate vector-embeddings for performing RAG for each paragraph Step 1 is easy, as we can use HttpClient. For step 2, I chose to use AngleSharp, a .NET library for parsing HTML, and my go-to for this kind of thing. For step 3, converting the HTML to plain-text, a quick bit of googling found this small package called Textify which seemed to do exactly what I needed, converting an AngleSharp IDocument to markdown. Step 4 comes courtesy of a utility called TextChunker that's currently built into the Semantic Kernel packages (though I expect these will end up pushed to other abstraction libraries in the future). Step 5 is handled by the template and abstraction libraries provided by Microsoft and OpenAI, in particular the Microsoft.Extensions.AI.Abstractions and implementation libraries. The code below shows how we I achieved all this relatively simply using the abstractions provided by the template: public async Task<IEnumerable<SemanticSearchRecord>> CreateRecordsForDocumentAsync(\n    IEmbeddingGenerator<string, Embedding<float>> embeddingGenerator, string documentId)\n{\n    // Request the page body for the provided ID (url)\n    await using var stream = await _httpClient.GetStreamAsync(documentId);\n\n    // Use AngleSharp to read and parse the HTML document \n    var config = Configuration.Default.WithDefaultLoader();\n    var context = BrowsingContext.New(config);\n    IDocument document = await context.OpenAsync(documentId);\n\n    // Use Textify to convert the HTML to a markdown document \n    string pageText = new HtmlToTextConverter().Convert(document);\n\n    // Split the document into paragraphs using the experimental type from SemanticKernel\n#pragma warning disable SKEXP0050 // Type is for evaluation purposes only\n    List<(int IndexOnPage, string Text)> paragraphs =\n        TextChunker.SplitPlainTextParagraphs([pageText], maxTokensPerParagraph: 200)\n            .Select((text, index) => (index, text))\n            .ToList();\n#pragma warning restore SKEXP0050 // Type is for evaluation purposes only\n\n    // Generate embeddings for all the paragraphs\n    var embeddings = await embeddingGenerator.GenerateAsync(paragraphs.Select(c => c.Text));\n\n    // Combine the paragraphs and embeddings, to return a collection of SemanticSearchRecords\n    return paragraphs.Zip(embeddings).Select((pair, index) => new SemanticSearchRecord\n    {\n        Key = $\"{documentId}_{pair.First.IndexOnPage}\",\n        Url = documentId,\n        Text = pair.First.Text,\n        Vector = pair.Second.Vector,\n    });\n}\n That's the most complex method, the final required implementation is handling record deletion. Finding records to delete The final method we need to implement is GetDeletedDocumentsAsync() which returns a list of documents that we previously ingested, which we should remove from the dataset. In the implementation below we again read the sitemap.xml and extract all the URLs to a HashSet. We then loop through all the existing documents; if the document ID is not in the set, we keep it, and return it from the method. These documents will be removed from the vector store. public async Task<IEnumerable<IngestedDocument>> GetDeletedDocumentsAsync(\n    IQueryable<IngestedDocument> existingDocuments)\n{\n    Sitemap sitemap = await GetSitemap();\n    var urls = sitemap.Entries.Select(x => x.Location).ToHashSet();\n    return await existingDocuments\n        .Where(doc => !urls.Contains(doc.Id))\n        .ToListAsync();\n}\n And with that, we've tackled the majority of the implementation. Note that I made a couple of tweaks to the SemanticSearchRecord type to replace the Filename property with Url and removed the PageNumber property, to better match our case of ingesting webpages instead of files. Configuring the app to use the new ingestion source The final step we need to take is to update the actual ingestion. This occurs in Program.cs of the web app, just before calling app.Run(): // ... existing setup\n\n// Use the provided DataIngestor, but pass in \n// our custom IIngestionSource, the WebIngestionSource\nawait DataIngestor.IngestDataAsync(\n    app.Services,\n    new WebIngestionSource(\"https://dotnetcore.show\"));\n\napp.Run();\n With that, we're finished. Time to take it for a spin! Trying out the new chat app We can try out our new app by hitting F5, or running dotnet run on the aspire app. This starts the ingestion process, first running GetNewOrModifiedDocumentsAsync() and GetDeletedDocumentsAsync() to find the pages to ingest, and then running CreateRecordsForDocumentAsync() to ingest the pages, for example: info: ModernDotNetShowChat.Web.Services.Ingestion.DataIngestor[0]\n      Processing https://dotnetcore.show/episodes/\ninfo: ModernDotNetShowChat.Web.Services.Ingestion.DataIngestor[0]\n      Processing https://dotnetcore.show/season-7/jonathan-peppers-unleashes-code-chaos-how-dotnet-meets-the-nes/\ninfo: ModernDotNetShowChat.Web.Services.Ingestion.DataIngestor[0]\n      Processing https://dotnetcore.show/\ninfo: ModernDotNetShowChat.Web.Services.Ingestion.DataIngestor[0]\n      Processing https://dotnetcore.show/season-7/google-gemini-in-net-the-ultimate-guide-with-jochen-kirstaetter/\n...\n This takes a long time (more on that later) but once it's finished, the app starts and we can ask questions about The Modern .NET Show:  Just as for the original template, the chatbot includes citations for its answers, including links to the page that contained the answer, and a quote from the page. There are obviously a lot of tweaks that you could make to the template and the site in general. For example, I increased the size of the quote that the chatbot can include in it's citations. I didn't play around with the template much more than that, as the proof of concept seemed to work! Ingesting web pages is slow One observation I found is that the ingestion process was very slow. It took an average of about 10 seconds to ingest a single page. And when there's ~250 pages to ingest, that adds up to roughly 40 minutes of ingestion time! 😅 I haven't dug into this too deeply to understand where it's so slow, but I'd be willing to put money on it being the actual embedding step. We generate an embedding for every paragraph in the page, and seeing as that requires a network call, it seems reasonable to think that's the source of the problem. Another aspect that's a little annoying is that the DataIngestor that ships with the template calls CreateRecordsForDocumentAsync() for all of the pages but doesn't save the results until after it's run for every document. That means that if you interrupt the process for some reason (because it's taking 40 mins perhaps 😉) then you have to start from the beginning again the next time you run the app. To work around that I made a small change to the DataIngestor to save after every 20 documents instead. The final issue is that by default, the template uses a random file path for the SQLite ingestion cache every time the app starts up. That means it redoes all that ingestion work every time it starts up. The simple solution to that is to provide a path and filename for the database file. That way the database isn't re-created every time your app starts, and you can instead incrementally update the embeddings: var ingestionCache = builder.AddSqlite(\n    \"ingestionCache\",\n    databasePath: @\"D:\\repos\",\n    databaseFileName: \"modern_dotnetshow_embeddings.db\");\n That simple change makes the app much more usable. Obviously, for production you likely wouldn't be using a SQLite database and JSON file for your vectors, so it wouldn't be a problem anyway. Overall, I think this makes an interesting proof of concept, although how useful it is in practice will remain to be seen I think. Summary In this post I showed how you can use the new .NET AI Chat Web App template (currently in preview) to create a custom IIngestionSource to ingest data about a website, so that you can chat with an LLM about the site. The resulting chat app provides quotes and citations from the website when answering your questions. You can find the source code for this demo app on GitHub."
  },
  {
    "itemId": "https://andrewlock.net/exploring-the-new-ai-chat-template/",
    "raw": "<img src=\"https://andrewlock.net/content/images/2025/ai_banner.png\" /><p>In this post I explore <a href=\"https://devblogs.microsoft.com/dotnet/announcing-dotnet-ai-template-preview2/\">the new .NET AI Chat Web App template (currently in preview)</a> to create a chat application and take a brief look at everything it provides. In the next post I then customize the app so that instead of ingesting PDFs, it ingests the contents of a website and uses that data to answer questions in the chat.</p> <h2 id=\"getting-started-with-the-new-net-ai-chat-web-app-template\" class=\"heading-with-anchor\"><a href=\"#getting-started-with-the-new-net-ai-chat-web-app-template\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Getting started with the new .NET AI Chat Web App template</a></h2> <p>The .NET AI Chat Web App is a new template that shows how to get started building a chat style application backed by a large language model (LLM). Chat apps are one of the most prolific use cases for AI (obviously heavily popularised by ChatGPT), and while they're not always the best way to \"add AI\" to your app, they can have their uses.</p> <p>To install the AI template, you can run the following command</p> <pre class=\"language-bash\"><code class=\"language-bash\">dotnet new <span class=\"token function\">install</span> Microsoft.Extensions.AI.Templates\n</code></pre> <p>This installs the template, making the AI Chat Web App template available using name <code>aichatweb</code>:</p> <pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token operator\">&gt;</span> dotnet new <span class=\"token function\">install</span> Microsoft.Extensions.AI.Templates\nThe following template packages will be installed:\n   Microsoft.Extensions.AI.Templates\n\nSuccess: Microsoft.Extensions.AI.Templates::9.4.0-preview.2.25216.9 installed the following templates:\nTemplate Name    Short Name  Language  Tags\n---------------  ----------  --------  --------------------------------\nAI Chat Web App  aichatweb   <span class=\"token punctuation\">[</span>C<span class=\"token comment\">#]      Common/AI/Web/Blazor/.NET Aspire</span>\n</code></pre> <p>The template includes various options to control how it works, but there are three main aspects to consider:</p> <ul><li>Do you want the app configured to use Aspire? Yes, of course you do 😉</li> <li>Which LLM provider do you want to use to power the chat interface: <ul><li><a href=\"https://docs.github.com/en/github-models\"><strong>GitHub Models</strong></a>. This is a great getting-started option, as it's free for developers, and is what I use in this post.</li> <li><strong>OpenAI</strong>. Uses the <a href=\"https://openai.com/api/\">OpenAI API Platform</a>.</li> <li><strong>Azure OpenAI</strong>. Uses the <a href=\"https://azure.microsoft.com/en-us/products/ai-services/openai-service\">Azure OpenAI Service</a>.</li> <li><strong>Ollama</strong>. Runs locally on your machine, using <a href=\"https://ollama.com/\">Ollama</a> with the llama3.2 and all-minilm models.</li></ul> </li> <li>Which vector embedding store do you want to use for ingesting the data: <ul><li><strong>Local</strong>. Uses a JSON file on disk, which is great for prototyping.</li> <li><strong>Azure AI Search</strong>. Uses Azure AI Search, which manages the data ingestion automatically.</li> <li><strong>Qdrant</strong>. Runs the <a href=\"https://qdrant.tech/\">Qdrant</a> vector database in a docker container.</li></ul> </li></ul> <p>If you're new to LLMs and AI then that might all be a bit overwhelming, but there's basically two different concepts to understand here:</p> <ul><li>The LLM provider is what provides the AI interface that powers the chat.</li> <li>The Vector embedding is how the LLM model \"ingests\" data. For each document you provide it, the LLM provides an array of numbers that you store in a database (or in a JSON file in the <code>local</code> case). The LLM can then run queries against the database and find \"similar\" data.</li></ul> <p>For this post, I chose to use GitHub Models for the LLM provider, as it's free and very easy to get up and running (as I'll show shortly). For the vector store I chose to store the data locally.</p> <blockquote> <p>These are the default values for the template for good reason, as they're pretty much the quickest way to get up and running. You wouldn't choose these options for production, but they're ideal for prototyping.</p> </blockquote> <p>To install the template, you can either use your IDE, or you can use the .NET CLI like so:</p> <pre class=\"language-bash\"><code class=\"language-bash\">dotnet new aichatweb <span class=\"token punctuation\">\\</span>\n    -- output ModernDotNetShowChat\n    <span class=\"token parameter variable\">--provider</span> githubmodels <span class=\"token punctuation\">\\</span>\n    --vector-store <span class=\"token builtin class-name\">local</span> <span class=\"token punctuation\">\\</span>\n    <span class=\"token parameter variable\">--aspire</span> <span class=\"token boolean\">true</span>\n</code></pre> <p>This creates a full solution consisting of:</p> <ul><li>A Web project containing the chat app</li> <li>A \"Service Defaults\" project—A suggested best practice for creating Aspire applications these days</li> <li>An \"App Host\" project—The Aspire host project, that wires up the dependencies</li></ul> <p>There's also a <em>.sln</em> file you can open in your IDE:</p> <p><img src=\"/content/images/2025/githubmodels_01.png\" alt=\"The solution layout\"></p> <p>Inside the solution folder is a <em>README.md</em> file that describes the remaining configuration. For our setup, there's just one step we need to take: configuring GitHub Models.</p> <h2 id=\"using-github-models\" class=\"heading-with-anchor\"><a href=\"#using-github-models\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Using GitHub Models</a></h2> <p>The <em>README.md</em> file contains instructions for getting started with GitHub Models:</p> <blockquote> <p>To use models hosted by GitHub Models, you will need to create a GitHub personal access token. The token should not have any scopes or permissions. See <a href=\"https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/managing-your-personal-access-tokens\">Managing your personal access tokens</a>.</p> </blockquote> <p><a href=\"https://docs.github.com/en/github-models/prototyping-with-ai-models\">GitHub Models</a> is a service from GitHub that provides developers an easy way to prototype with LLMs and Generative AI. All that you need is a GitHub account, and you can be running against all the latest models from OpenAI and others <em>without</em> having to sign up to those services directly.</p> <blockquote> <p>GitHub Models is strictly for \"prototyping\" so it comes with some hefty usage limits and <a href=\"https://azure.microsoft.com/en-us/products/ai-services/ai-content-safety\">content filters</a>.</p> </blockquote> <p>To get started with GitHub models you just need to choose a model and retrieve a token:</p> <ol><li>Go to <a href=\"https://github.com/marketplace/models\">github.com/marketplace/models</a>.</li> <li>Click <strong>Model: Select a Model</strong> at the top left of the page.</li> <li>Choose a model from the dropdown menu.</li></ol> <p>After selecting a model, you'll see the screen below. As you can see, you can get SDK details and see various other configuration options:</p> <p><img src=\"/content/images/2025/githubmodels.png\" alt=\"The getting started page from GitHub models\"></p> <p>We don't need any to worry about any of that SDK information, as that's already handled by the .NET NuGet packages and the template. All you need is a personal access token (PAT):</p> <ul><li>Click <strong>Get developer key</strong> on the above screen</li> <li>This redirects to GitHub's token management page: <a href=\"https://github.com/settings/tokens\">https://github.com/settings/tokens</a></li> <li>Click <strong>Generate new token</strong>, and generate a fine grained token (not classic)</li> <li>Enter a name for the token, and an expiry ~~but do not add any permissions or roles.~~ Note that <a href=\"https://github.blog/changelog/2025-05-15-modelsread-now-required-for-github-models-access/\">as of May 15 2025</a>, your fine-grained GitHub Models tokens must now have the <code>model:read</code> permission.</li></ul> <p>After creating the token, you can add it as a secret to your application. You need to add the token as a connection string inside the Aspire AppHost project. You can do that using the IDE editor integration in Visual Studio or Rider, or you can use the command line. For example, for my app, I ran the following (replacing <code>YOUR-API-KEY</code> with the token value):</p> <pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">cd</span> ModernDotNetShowChat.AppHost\ndotnet user-secrets <span class=\"token builtin class-name\">set</span> ConnectionStrings:openai <span class=\"token string\">\"Endpoint=https://models.inference.ai.azure.com;Key=YOUR-API-KEY\"</span>\n</code></pre> <p>As you can probably tell from the above setting, GitHub Models runs using <a href=\"https://azure.microsoft.com/en-us/products/ai-services/openai-service\">Azure OpenAI Service</a>, hence the reference to Azure in the connection string. If you choose a different LLM provider then these settings will be different.</p> <p>With the secret added, everything is ready to take the template for a spin.</p> <h2 id=\"briefly-trying-out-the-template\" class=\"heading-with-anchor\"><a href=\"#briefly-trying-out-the-template\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Briefly trying out the template</a></h2> <p>Before we dig in further, we'll take the standard template for a spin.</p> <blockquote> <p>You can read more about getting started in <a href=\"https://devblogs.microsoft.com/dotnet/announcing-dotnet-ai-template-preview2/\">the Preview 2 announcement post</a> for the template.</p> </blockquote> <p>You run the app by running the Aspire AppHost project. This starts the web app (and passes in all the required connection strings). The web app then runs an \"ingestion\" process against 2 pdf files (about watches) that are available in the content folder. More on this later.</p> <p>The web app is a \"traditional\" chat application, just like you've seen with ChatGPT or GitHub Copilot Chat. This interface lets you ask questions about the PDFs that were ingested. In the example below I asked the question \"Which watches are available\":</p> <p><img src=\"/content/images/2025/githubmodels_02.png\" alt=\"Trying out the default template\"></p> <p>The chat assistant interprets your question and decides what phrases to search for in the documents. It then answers your question based on the details it finds in the documents, and even provides a link to the file that contains the answer.</p> <blockquote> <p>This general technique of providing \"sources\" for the LLM to use, instead of relying on the built-in knowledge is called retrieval-augmented generation (RAG), and is one way to try to ensure that the LLM provides answers grounded in facts. It involves ingesting source data, encoding it as vectors in a vector store, and making this store available to the LLM.</p> </blockquote> <p>That's pretty much all there is to the app, but it provides a powerful template that you can extend and modify to work for your own application. For the remainder of the post I look at a couple of points of interest about the template.</p> <h2 id=\"the-aspire-app-host\" class=\"heading-with-anchor\"><a href=\"#the-aspire-app-host\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">The Aspire App Host</a></h2> <p>We'll start by looking at the Aspire App Host. This is where the general architecture of the app is defined, and which reveals that there are essentially three components:</p> <ul><li>The OpenAI (via GitHub models) connection</li> <li>The Blazor web app</li> <li>A SQLite database as a cache for the generated embeddings</li></ul> <p>You can see all this configured in the <em>Program.cs</em> file:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> builder <span class=\"token operator\">=</span> DistributedApplication<span class=\"token punctuation\">.</span><span class=\"token function\">CreateBuilder</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> openai <span class=\"token operator\">=</span> builder<span class=\"token punctuation\">.</span><span class=\"token function\">AddConnectionString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"openai\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> ingestionCache <span class=\"token operator\">=</span> builder<span class=\"token punctuation\">.</span><span class=\"token function\">AddSqlite</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ingestionCache\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> webApp <span class=\"token operator\">=</span> builder<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">AddProject</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>Projects<span class=\"token punctuation\">.</span>ModernDotNetShowChat_Web<span class=\"token punctuation\">&gt;</span></span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"aichatweb-app\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nwebApp<span class=\"token punctuation\">.</span><span class=\"token function\">WithReference</span><span class=\"token punctuation\">(</span>openai<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nwebApp\n    <span class=\"token punctuation\">.</span><span class=\"token function\">WithReference</span><span class=\"token punctuation\">(</span>ingestionCache<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">WaitFor</span><span class=\"token punctuation\">(</span>ingestionCache<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nbuilder<span class=\"token punctuation\">.</span><span class=\"token function\">Build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre> <p>When you run the AppHost, Aspire initializes the SQLite database and starts the web app, passing in the connection strings.</p> <h2 id=\"the-web-app\" class=\"heading-with-anchor\"><a href=\"#the-web-app\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">The web app</a></h2> <p>The main application is a Blazor Server app. In addition to the standard Blazor and ASP.NET Core services, it contains three main components:</p> <ul><li>The GitHub Models/OpenAI chat client. This is the core infrastructure for interacting with the OpenAI service using the OpenAI NuGet package and Microsoft.Extensions.AI abstractions. This also registers an embedding generator for OpenAI for converting the ingested documents into vectors that can later be serialised.</li> <li>The vector store is responsible for persisting the generated embeddings, and for providing the mechanism for OpenAI to search the store as required.</li> <li>The ingestion cache is an EF Core <code>DbContext</code> that keeps track of which documents have been ingested into the vector store. This allows the app to avoid ingesting the same documents multiple times as well as to remove documents that are no longer available.</li></ul> <p>The configuration of these services all happens in the <em>Program.cs</em> file of the web app, as shown below. I haven't reproduced the whole file here, just the configuration related to the above components:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> builder <span class=\"token operator\">=</span> WebApplication<span class=\"token punctuation\">.</span><span class=\"token function\">CreateBuilder</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Add the OpenAI chat client to the container</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> openai <span class=\"token operator\">=</span> builder<span class=\"token punctuation\">.</span><span class=\"token function\">AddAzureOpenAIClient</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"openai\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nopenai<span class=\"token punctuation\">.</span><span class=\"token function\">AddChatClient</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"gpt-4o-mini\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// Use the ChatGPT 4o mini model</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">UseFunctionInvocation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// Allow the LLM to call local functions in your app</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">UseOpenTelemetry</span><span class=\"token punctuation\">(</span><span class=\"token named-parameter punctuation\">configure</span><span class=\"token punctuation\">:</span> c <span class=\"token operator\">=&gt;</span> <span class=\"token comment\">// Configure OTel for </span>\n        c<span class=\"token punctuation\">.</span>EnableSensitiveData <span class=\"token operator\">=</span> builder<span class=\"token punctuation\">.</span>Environment<span class=\"token punctuation\">.</span><span class=\"token function\">IsDevelopment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nopenai<span class=\"token punctuation\">.</span><span class=\"token function\">AddEmbeddingGenerator</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"text-embedding-3-small\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Allow generating text embeddings</span>\n\n<span class=\"token comment\">// Add an IVectorStore implementation that stores the embeddings in a JSON file</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> vectorStore <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">JsonVectorStore</span><span class=\"token punctuation\">(</span>Path<span class=\"token punctuation\">.</span><span class=\"token function\">Combine</span><span class=\"token punctuation\">(</span>AppContext<span class=\"token punctuation\">.</span>BaseDirectory<span class=\"token punctuation\">,</span> <span class=\"token string\">\"vector-store\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nbuilder<span class=\"token punctuation\">.</span>Services<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">AddSingleton</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>IVectorStore<span class=\"token punctuation\">&gt;</span></span></span><span class=\"token punctuation\">(</span>vectorStore<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nbuilder<span class=\"token punctuation\">.</span>Services<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">AddScoped</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>DataIngestor<span class=\"token punctuation\">&gt;</span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Used to ingest embeddings</span>\nbuilder<span class=\"token punctuation\">.</span>Services<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">AddSingleton</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>SemanticSearch<span class=\"token punctuation\">&gt;</span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Used to search embeddings</span>\n\n<span class=\"token comment\">// Add the EF Core DbContext for tracking which files have been ingested</span>\nbuilder<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">AddSqliteDbContext</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>IngestionCacheDbContext<span class=\"token punctuation\">&gt;</span></span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ingestionCache\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre> <p>When the app starts, it ensures the SQLite database has been created, starts the web app, and then starts the data ingestion:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">await</span> DataIngestor<span class=\"token punctuation\">.</span><span class=\"token function\">IngestDataAsync</span><span class=\"token punctuation\">(</span>\n    app<span class=\"token punctuation\">.</span>Services<span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">PDFDirectorySource</span><span class=\"token punctuation\">(</span>Path<span class=\"token punctuation\">.</span><span class=\"token function\">Combine</span><span class=\"token punctuation\">(</span>builder<span class=\"token punctuation\">.</span>Environment<span class=\"token punctuation\">.</span>WebRootPath<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Data\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre> <p>Much of the chat application uses standard NuGet packages for interacting with the LLM, however the <code>DataIngestor</code> and <code>PdfDirectorySource</code> implementations are specific to the template, and show a general approach to generating text embeddings.</p> <h2 id=\"ingesting-data-and-generating-embeddings\" class=\"heading-with-anchor\"><a href=\"#ingesting-data-and-generating-embeddings\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Ingesting data and generating embeddings</a></h2> <p>The <code>DataIngestor</code> implementation defined in the template manages the storing of text embedding vectors in an <code>IVectorStore</code> based on the implementation in an <code>IIngestionSource</code>, using the <code>IngestionCacheDbContext</code> to track which documents have been previously ingested.</p> <p>The implementation, reproduced below, is pretty self-explanatory, but I've added a few extra comments for clarity:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DataIngestor</span><span class=\"token punctuation\">(</span>\n    <span class=\"token class-name\">ILogger<span class=\"token punctuation\">&lt;</span>DataIngestor<span class=\"token punctuation\">&gt;</span></span> logger<span class=\"token punctuation\">,</span>\n    <span class=\"token class-name\">IEmbeddingGenerator<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">,</span> Embedding<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">&gt;</span><span class=\"token punctuation\">&gt;</span></span> embeddingGenerator<span class=\"token punctuation\">,</span>\n    <span class=\"token class-name\">IVectorStore</span> vectorStore<span class=\"token punctuation\">,</span>\n    <span class=\"token class-name\">IngestionCacheDbContext</span> ingestionCacheDb<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">async</span> <span class=\"token return-type class-name\">Task</span> <span class=\"token function\">IngestDataAsync</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IIngestionSource</span> source<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// Get or create the \"collection\" for holding the embeddings in the vector store</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> vectorCollection <span class=\"token operator\">=</span> vectorStore<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">GetCollection</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">,</span> SemanticSearchRecord<span class=\"token punctuation\">&gt;</span></span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"data-moderndotnetshowchat-ingested\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">await</span> vectorCollection<span class=\"token punctuation\">.</span><span class=\"token function\">CreateCollectionIfNotExistsAsync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// Read which documents have already been ingested from the SQLite cache</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> documentsForSource <span class=\"token operator\">=</span> ingestionCacheDb<span class=\"token punctuation\">.</span>Documents\n            <span class=\"token punctuation\">.</span><span class=\"token function\">Where</span><span class=\"token punctuation\">(</span>d <span class=\"token operator\">=&gt;</span> d<span class=\"token punctuation\">.</span>SourceId <span class=\"token operator\">==</span> source<span class=\"token punctuation\">.</span>SourceId<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">Include</span><span class=\"token punctuation\">(</span>d <span class=\"token operator\">=&gt;</span> d<span class=\"token punctuation\">.</span>Records<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// Ask the IIngestionSource for a list of files to delete</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> deletedFiles <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> source<span class=\"token punctuation\">.</span><span class=\"token function\">GetDeletedDocumentsAsync</span><span class=\"token punctuation\">(</span>documentsForSource<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// Delete the removed files from the IVectorStore and the SQLite cache</span>\n        <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> deletedFile <span class=\"token keyword\">in</span> deletedFiles<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            logger<span class=\"token punctuation\">.</span><span class=\"token function\">LogInformation</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Removing ingested data for {file}\"</span><span class=\"token punctuation\">,</span> deletedFile<span class=\"token punctuation\">.</span>Id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">await</span> vectorCollection<span class=\"token punctuation\">.</span><span class=\"token function\">DeleteBatchAsync</span><span class=\"token punctuation\">(</span>deletedFile<span class=\"token punctuation\">.</span>Records<span class=\"token punctuation\">.</span><span class=\"token function\">Select</span><span class=\"token punctuation\">(</span>r <span class=\"token operator\">=&gt;</span> r<span class=\"token punctuation\">.</span>Id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            ingestionCacheDb<span class=\"token punctuation\">.</span>Documents<span class=\"token punctuation\">.</span><span class=\"token function\">Remove</span><span class=\"token punctuation\">(</span>deletedFile<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">await</span> ingestionCacheDb<span class=\"token punctuation\">.</span><span class=\"token function\">SaveChangesAsync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// Ask the IIngestionSource for a list of new or modified files to ingest</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> modifiedDocs <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> source<span class=\"token punctuation\">.</span><span class=\"token function\">GetNewOrModifiedDocumentsAsync</span><span class=\"token punctuation\">(</span>documentsForSource<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// For each new/modified document:</span>\n        <span class=\"token comment\">// - Delete the embeddings if they already exist (changed files)</span>\n        <span class=\"token comment\">// - Generate the embeddings for the document</span>\n        <span class=\"token comment\">// - Save the embeddings in the IVectorStore</span>\n        <span class=\"token comment\">// - Record the updated status in the SQLite cache</span>\n        <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> modifiedDoc <span class=\"token keyword\">in</span> modifiedDocs<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            logger<span class=\"token punctuation\">.</span><span class=\"token function\">LogInformation</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Processing {file}\"</span><span class=\"token punctuation\">,</span> modifiedDoc<span class=\"token punctuation\">.</span>Id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>modifiedDoc<span class=\"token punctuation\">.</span>Records<span class=\"token punctuation\">.</span>Count <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">await</span> vectorCollection<span class=\"token punctuation\">.</span><span class=\"token function\">DeleteBatchAsync</span><span class=\"token punctuation\">(</span>modifiedDoc<span class=\"token punctuation\">.</span>Records<span class=\"token punctuation\">.</span><span class=\"token function\">Select</span><span class=\"token punctuation\">(</span>r <span class=\"token operator\">=&gt;</span> r<span class=\"token punctuation\">.</span>Id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> newRecords <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> source<span class=\"token punctuation\">.</span><span class=\"token function\">CreateRecordsForDocumentAsync</span><span class=\"token punctuation\">(</span>embeddingGenerator<span class=\"token punctuation\">,</span> modifiedDoc<span class=\"token punctuation\">.</span>Id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">await</span> <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> id <span class=\"token keyword\">in</span> vectorCollection<span class=\"token punctuation\">.</span><span class=\"token function\">UpsertBatchAsync</span><span class=\"token punctuation\">(</span>newRecords<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span>\n\n            modifiedDoc<span class=\"token punctuation\">.</span>Records<span class=\"token punctuation\">.</span><span class=\"token function\">Clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            modifiedDoc<span class=\"token punctuation\">.</span>Records<span class=\"token punctuation\">.</span><span class=\"token function\">AddRange</span><span class=\"token punctuation\">(</span>newRecords<span class=\"token punctuation\">.</span><span class=\"token function\">Select</span><span class=\"token punctuation\">(</span>r <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">IngestedRecord</span> <span class=\"token punctuation\">{</span> Id <span class=\"token operator\">=</span> r<span class=\"token punctuation\">.</span>Key<span class=\"token punctuation\">,</span> DocumentId <span class=\"token operator\">=</span> modifiedDoc<span class=\"token punctuation\">.</span>Id <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ingestionCacheDb<span class=\"token punctuation\">.</span><span class=\"token function\">Entry</span><span class=\"token punctuation\">(</span>modifiedDoc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>State <span class=\"token operator\">==</span> EntityState<span class=\"token punctuation\">.</span>Detached<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                ingestionCacheDb<span class=\"token punctuation\">.</span>Documents<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>modifiedDoc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">await</span> ingestionCacheDb<span class=\"token punctuation\">.</span><span class=\"token function\">SaveChangesAsync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        logger<span class=\"token punctuation\">.</span><span class=\"token function\">LogInformation</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Ingestion is up-to-date\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>I won't dive into the <code>IIngestionSource</code> implementation in this post, as I'll take a closer look at an alternative implementation in the next post. At a high level, the <code>PDFDirectorySource</code>:</p> <ul><li>Reads the list of <em>.pdf</em> files available in the source directory.</li> <li>Uses the last write time for the file to determine whether it has been modified or not.</li> <li>Uses <a href=\"https://github.com/UglyToad/PdfPig\">the PdfPig library</a> to read the text of the PDF document.</li> <li>Generates an embedding for each paragraph, of each file.</li></ul> <h2 id=\"the-chat-flow-and-embeddings\" class=\"heading-with-anchor\"><a href=\"#the-chat-flow-and-embeddings\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">The chat flow and embeddings</a></h2> <p>So how does this all come together?</p> <p>The core of the implementation is in the <code>Chat.razor</code> component. This component configures the <code>IChatClient</code> with a system prompt and a tool/function invocator which the LLM can use to search the local embeddings by invoking <code>SearchAsync()</code>.</p> <p>The system prompt and tool are provided as follows:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">const</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> SystemPrompt <span class=\"token operator\">=</span> <span class=\"token string\">@\"\n    You are an assistant who answers questions about information you retrieve.\n    Do not answer questions about anything else.\n    Use only simple markdown to format your responses.\n\n    Use the search tool to find relevant information. When you do this, end your\n    reply with citations in the special XML format:\n\n    &lt;citation filename='string' page_number='number'&gt;exact quote here&lt;/citation&gt;\n\n    Always include the citation in your response if there are results.\n\n    The quote must be max 5 words, taken word-for-word from the search result, and is the basis for why the citation is relevant.\n    Don't refer to the presence of citations; just emit these tags right at the end, with no surrounding text.\n    \"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\">ChatOptions</span> chatOptions <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\">List<span class=\"token punctuation\">&lt;</span>ChatMessage<span class=\"token punctuation\">&gt;</span></span> messages <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">protected</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">OnInitialized</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    messages<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span>ChatRole<span class=\"token punctuation\">.</span>System<span class=\"token punctuation\">,</span> SystemPrompt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    chatOptions<span class=\"token punctuation\">.</span>Tools <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">AIFunctionFactory<span class=\"token punctuation\">.</span>Create</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span>SearchAsync<span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">Description</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token string\">\"Searches for information using a phrase or keyword\"</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">async</span> <span class=\"token return-type class-name\">Task<span class=\"token punctuation\">&lt;</span>IEnumerable<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">&gt;</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">SearchAsync</span><span class=\"token punctuation\">(</span>\n    <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">Description</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token string\">\"The phrase to search for.\"</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> searchPhrase<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">Description</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token string\">\"If possible, specify the filename to search that file only. If not provided or empty, the search includes all files.\"</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">?</span></span> filenameFilter <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">await</span> <span class=\"token function\">InvokeAsync</span><span class=\"token punctuation\">(</span>StateHasChanged<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">IReadOnlyList<span class=\"token punctuation\">&lt;</span>SemanticSearchRecord<span class=\"token punctuation\">&gt;</span></span> results <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> Search<span class=\"token punctuation\">.</span><span class=\"token function\">SearchAsync</span><span class=\"token punctuation\">(</span>searchPhrase<span class=\"token punctuation\">,</span> filenameFilter<span class=\"token punctuation\">,</span> <span class=\"token named-parameter punctuation\">maxResults</span><span class=\"token punctuation\">:</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> results<span class=\"token punctuation\">.</span><span class=\"token function\">Select</span><span class=\"token punctuation\">(</span>result <span class=\"token operator\">=&gt;</span>\n        <span class=\"token interpolation-string\"><span class=\"token string\">$\"&lt;result filename=\\\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">result<span class=\"token punctuation\">.</span>FileName</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\\\" page_number=\\\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">result<span class=\"token punctuation\">.</span>PageNumber</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\\\"&gt;</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">result<span class=\"token punctuation\">.</span>Text</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">&lt;/result&gt;\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>The system prompt here is interesting; it shows how the prompt tries very hard to restrict the LLM to <em>only</em> producing facts based on the files provided rather than the inherent \"knowledge\" it has. From what I've seen from my testing, this seems to work pretty well!</p> <p>That's as far as I'm going to go in this post. In the next post I describe an experiment which starts from this template and modifies it to ingest data from a website instead, so that you can chat and ask questions about the website instead.</p> <h2 id=\"summary\" class=\"heading-with-anchor\"><a href=\"#summary\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Summary</a></h2> <p>In this post I introduced <a href=\"https://devblogs.microsoft.com/dotnet/announcing-dotnet-ai-template-preview2/\">the new .NET AI Chat Web App template (currently in preview)</a> and showed the default experience of chatting about PDF files. I then described the basic mechanics of the template, and showed some of the code and services around the core features of data ingestion and embedding generation. In the next post I show how you can modify the template to ingest data from a website instead.</p> ",
    "sanitized": "In this post I explore the new .NET AI Chat Web App template (currently in preview) to create a chat application and take a brief look at everything it provides. In the next post I then customize the app so that instead of ingesting PDFs, it ingests the contents of a website and uses that data to answer questions in the chat. Getting started with the new .NET AI Chat Web App template The .NET AI Chat Web App is a new template that shows how to get started building a chat style application backed by a large language model (LLM). Chat apps are one of the most prolific use cases for AI (obviously heavily popularised by ChatGPT), and while they're not always the best way to \"add AI\" to your app, they can have their uses. To install the AI template, you can run the following command dotnet new install Microsoft.Extensions.AI.Templates\n This installs the template, making the AI Chat Web App template available using name aichatweb: > dotnet new install Microsoft.Extensions.AI.Templates\nThe following template packages will be installed:\n   Microsoft.Extensions.AI.Templates\n\nSuccess: Microsoft.Extensions.AI.Templates::9.4.0-preview.2.25216.9 installed the following templates:\nTemplate Name    Short Name  Language  Tags\n---------------  ----------  --------  --------------------------------\nAI Chat Web App  aichatweb   [C#]      Common/AI/Web/Blazor/.NET Aspire\n The template includes various options to control how it works, but there are three main aspects to consider: Do you want the app configured to use Aspire? Yes, of course you do 😉 Which LLM provider do you want to use to power the chat interface: GitHub Models. This is a great getting-started option, as it's free for developers, and is what I use in this post. OpenAI. Uses the OpenAI API Platform. Azure OpenAI. Uses the Azure OpenAI Service. Ollama. Runs locally on your machine, using Ollama with the llama3.2 and all-minilm models.  Which vector embedding store do you want to use for ingesting the data: Local. Uses a JSON file on disk, which is great for prototyping. Azure AI Search. Uses Azure AI Search, which manages the data ingestion automatically. Qdrant. Runs the Qdrant vector database in a docker container.  If you're new to LLMs and AI then that might all be a bit overwhelming, but there's basically two different concepts to understand here: The LLM provider is what provides the AI interface that powers the chat. The Vector embedding is how the LLM model \"ingests\" data. For each document you provide it, the LLM provides an array of numbers that you store in a database (or in a JSON file in the local case). The LLM can then run queries against the database and find \"similar\" data. For this post, I chose to use GitHub Models for the LLM provider, as it's free and very easy to get up and running (as I'll show shortly). For the vector store I chose to store the data locally.  These are the default values for the template for good reason, as they're pretty much the quickest way to get up and running. You wouldn't choose these options for production, but they're ideal for prototyping.  To install the template, you can either use your IDE, or you can use the .NET CLI like so: dotnet new aichatweb \\\n    -- output ModernDotNetShowChat\n    --provider githubmodels \\\n    --vector-store local \\\n    --aspire true\n This creates a full solution consisting of: A Web project containing the chat app A \"Service Defaults\" project—A suggested best practice for creating Aspire applications these days An \"App Host\" project—The Aspire host project, that wires up the dependencies There's also a .sln file you can open in your IDE:  Inside the solution folder is a README.md file that describes the remaining configuration. For our setup, there's just one step we need to take: configuring GitHub Models. Using GitHub Models The README.md file contains instructions for getting started with GitHub Models:  To use models hosted by GitHub Models, you will need to create a GitHub personal access token. The token should not have any scopes or permissions. See Managing your personal access tokens.  GitHub Models is a service from GitHub that provides developers an easy way to prototype with LLMs and Generative AI. All that you need is a GitHub account, and you can be running against all the latest models from OpenAI and others without having to sign up to those services directly.  GitHub Models is strictly for \"prototyping\" so it comes with some hefty usage limits and content filters.  To get started with GitHub models you just need to choose a model and retrieve a token: Go to github.com/marketplace/models. Click Model: Select a Model at the top left of the page. Choose a model from the dropdown menu. After selecting a model, you'll see the screen below. As you can see, you can get SDK details and see various other configuration options:  We don't need any to worry about any of that SDK information, as that's already handled by the .NET NuGet packages and the template. All you need is a personal access token (PAT): Click Get developer key on the above screen This redirects to GitHub's token management page: https://github.com/settings/tokens Click Generate new token, and generate a fine grained token (not classic) Enter a name for the token, and an expiry ~~but do not add any permissions or roles.~~ Note that as of May 15 2025, your fine-grained GitHub Models tokens must now have the model:read permission. After creating the token, you can add it as a secret to your application. You need to add the token as a connection string inside the Aspire AppHost project. You can do that using the IDE editor integration in Visual Studio or Rider, or you can use the command line. For example, for my app, I ran the following (replacing YOUR-API-KEY with the token value): cd ModernDotNetShowChat.AppHost\ndotnet user-secrets set ConnectionStrings:openai \"Endpoint=https://models.inference.ai.azure.com;Key=YOUR-API-KEY\"\n As you can probably tell from the above setting, GitHub Models runs using Azure OpenAI Service, hence the reference to Azure in the connection string. If you choose a different LLM provider then these settings will be different. With the secret added, everything is ready to take the template for a spin. Briefly trying out the template Before we dig in further, we'll take the standard template for a spin.  You can read more about getting started in the Preview 2 announcement post for the template.  You run the app by running the Aspire AppHost project. This starts the web app (and passes in all the required connection strings). The web app then runs an \"ingestion\" process against 2 pdf files (about watches) that are available in the content folder. More on this later. The web app is a \"traditional\" chat application, just like you've seen with ChatGPT or GitHub Copilot Chat. This interface lets you ask questions about the PDFs that were ingested. In the example below I asked the question \"Which watches are available\":  The chat assistant interprets your question and decides what phrases to search for in the documents. It then answers your question based on the details it finds in the documents, and even provides a link to the file that contains the answer.  This general technique of providing \"sources\" for the LLM to use, instead of relying on the built-in knowledge is called retrieval-augmented generation (RAG), and is one way to try to ensure that the LLM provides answers grounded in facts. It involves ingesting source data, encoding it as vectors in a vector store, and making this store available to the LLM.  That's pretty much all there is to the app, but it provides a powerful template that you can extend and modify to work for your own application. For the remainder of the post I look at a couple of points of interest about the template. The Aspire App Host We'll start by looking at the Aspire App Host. This is where the general architecture of the app is defined, and which reveals that there are essentially three components: The OpenAI (via GitHub models) connection The Blazor web app A SQLite database as a cache for the generated embeddings You can see all this configured in the Program.cs file: var builder = DistributedApplication.CreateBuilder(args);\n\nvar openai = builder.AddConnectionString(\"openai\");\n\nvar ingestionCache = builder.AddSqlite(\"ingestionCache\");\n\nvar webApp = builder.AddProject<Projects.ModernDotNetShowChat_Web>(\"aichatweb-app\");\nwebApp.WithReference(openai);\nwebApp\n    .WithReference(ingestionCache)\n    .WaitFor(ingestionCache);\n\nbuilder.Build().Run();\n When you run the AppHost, Aspire initializes the SQLite database and starts the web app, passing in the connection strings. The web app The main application is a Blazor Server app. In addition to the standard Blazor and ASP.NET Core services, it contains three main components: The GitHub Models/OpenAI chat client. This is the core infrastructure for interacting with the OpenAI service using the OpenAI NuGet package and Microsoft.Extensions.AI abstractions. This also registers an embedding generator for OpenAI for converting the ingested documents into vectors that can later be serialised. The vector store is responsible for persisting the generated embeddings, and for providing the mechanism for OpenAI to search the store as required. The ingestion cache is an EF Core DbContext that keeps track of which documents have been ingested into the vector store. This allows the app to avoid ingesting the same documents multiple times as well as to remove documents that are no longer available. The configuration of these services all happens in the Program.cs file of the web app, as shown below. I haven't reproduced the whole file here, just the configuration related to the above components: var builder = WebApplication.CreateBuilder(args);\n\n// Add the OpenAI chat client to the container\nvar openai = builder.AddAzureOpenAIClient(\"openai\");\nopenai.AddChatClient(\"gpt-4o-mini\") // Use the ChatGPT 4o mini model\n    .UseFunctionInvocation()  // Allow the LLM to call local functions in your app\n    .UseOpenTelemetry(configure: c => // Configure OTel for \n        c.EnableSensitiveData = builder.Environment.IsDevelopment());\nopenai.AddEmbeddingGenerator(\"text-embedding-3-small\"); // Allow generating text embeddings\n\n// Add an IVectorStore implementation that stores the embeddings in a JSON file\nvar vectorStore = new JsonVectorStore(Path.Combine(AppContext.BaseDirectory, \"vector-store\"));\nbuilder.Services.AddSingleton<IVectorStore>(vectorStore);\nbuilder.Services.AddScoped<DataIngestor>(); // Used to ingest embeddings\nbuilder.Services.AddSingleton<SemanticSearch>(); // Used to search embeddings\n\n// Add the EF Core DbContext for tracking which files have been ingested\nbuilder.AddSqliteDbContext<IngestionCacheDbContext>(\"ingestionCache\");\n When the app starts, it ensures the SQLite database has been created, starts the web app, and then starts the data ingestion: await DataIngestor.IngestDataAsync(\n    app.Services,\n    new PDFDirectorySource(Path.Combine(builder.Environment.WebRootPath, \"Data\")));\n Much of the chat application uses standard NuGet packages for interacting with the LLM, however the DataIngestor and PdfDirectorySource implementations are specific to the template, and show a general approach to generating text embeddings. Ingesting data and generating embeddings The DataIngestor implementation defined in the template manages the storing of text embedding vectors in an IVectorStore based on the implementation in an IIngestionSource, using the IngestionCacheDbContext to track which documents have been previously ingested. The implementation, reproduced below, is pretty self-explanatory, but I've added a few extra comments for clarity: public class DataIngestor(\n    ILogger<DataIngestor> logger,\n    IEmbeddingGenerator<string, Embedding<float>> embeddingGenerator,\n    IVectorStore vectorStore,\n    IngestionCacheDbContext ingestionCacheDb)\n{\n    public async Task IngestDataAsync(IIngestionSource source)\n    {\n        // Get or create the \"collection\" for holding the embeddings in the vector store\n        var vectorCollection = vectorStore.GetCollection<string, SemanticSearchRecord>(\"data-moderndotnetshowchat-ingested\");\n        await vectorCollection.CreateCollectionIfNotExistsAsync();\n\n        // Read which documents have already been ingested from the SQLite cache\n        var documentsForSource = ingestionCacheDb.Documents\n            .Where(d => d.SourceId == source.SourceId)\n            .Include(d => d.Records);\n\n        // Ask the IIngestionSource for a list of files to delete\n        var deletedFiles = await source.GetDeletedDocumentsAsync(documentsForSource);\n\n        // Delete the removed files from the IVectorStore and the SQLite cache\n        foreach (var deletedFile in deletedFiles)\n        {\n            logger.LogInformation(\"Removing ingested data for {file}\", deletedFile.Id);\n            await vectorCollection.DeleteBatchAsync(deletedFile.Records.Select(r => r.Id));\n            ingestionCacheDb.Documents.Remove(deletedFile);\n        }\n        await ingestionCacheDb.SaveChangesAsync();\n\n        // Ask the IIngestionSource for a list of new or modified files to ingest\n        var modifiedDocs = await source.GetNewOrModifiedDocumentsAsync(documentsForSource);\n\n        // For each new/modified document:\n        // - Delete the embeddings if they already exist (changed files)\n        // - Generate the embeddings for the document\n        // - Save the embeddings in the IVectorStore\n        // - Record the updated status in the SQLite cache\n        foreach (var modifiedDoc in modifiedDocs)\n        {\n            logger.LogInformation(\"Processing {file}\", modifiedDoc.Id);\n\n            if (modifiedDoc.Records.Count > 0)\n            {\n                await vectorCollection.DeleteBatchAsync(modifiedDoc.Records.Select(r => r.Id));\n            }\n\n            var newRecords = await source.CreateRecordsForDocumentAsync(embeddingGenerator, modifiedDoc.Id);\n            await foreach (var id in vectorCollection.UpsertBatchAsync(newRecords)) { }\n\n            modifiedDoc.Records.Clear();\n            modifiedDoc.Records.AddRange(newRecords.Select(r => new IngestedRecord { Id = r.Key, DocumentId = modifiedDoc.Id }));\n\n            if (ingestionCacheDb.Entry(modifiedDoc).State == EntityState.Detached)\n            {\n                ingestionCacheDb.Documents.Add(modifiedDoc);\n            }\n        }\n\n        await ingestionCacheDb.SaveChangesAsync();\n        logger.LogInformation(\"Ingestion is up-to-date\");\n    }\n}\n I won't dive into the IIngestionSource implementation in this post, as I'll take a closer look at an alternative implementation in the next post. At a high level, the PDFDirectorySource: Reads the list of .pdf files available in the source directory. Uses the last write time for the file to determine whether it has been modified or not. Uses the PdfPig library to read the text of the PDF document. Generates an embedding for each paragraph, of each file. The chat flow and embeddings So how does this all come together? The core of the implementation is in the Chat.razor component. This component configures the IChatClient with a system prompt and a tool/function invocator which the LLM can use to search the local embeddings by invoking SearchAsync(). The system prompt and tool are provided as follows: private const string SystemPrompt = @\"\n    You are an assistant who answers questions about information you retrieve.\n    Do not answer questions about anything else.\n    Use only simple markdown to format your responses.\n\n    Use the search tool to find relevant information. When you do this, end your\n    reply with citations in the special XML format:\n\n    <citation filename='string' page_number='number'>exact quote here</citation>\n\n    Always include the citation in your response if there are results.\n\n    The quote must be max 5 words, taken word-for-word from the search result, and is the basis for why the citation is relevant.\n    Don't refer to the presence of citations; just emit these tags right at the end, with no surrounding text.\n    \";\n\nprivate readonly ChatOptions chatOptions = new();\nprivate readonly List<ChatMessage> messages = new();\n\nprotected override void OnInitialized()\n{\n    messages.Add(new(ChatRole.System, SystemPrompt));\n    chatOptions.Tools = [AIFunctionFactory.Create(SearchAsync)];\n}\n\n[Description(\"Searches for information using a phrase or keyword\")]\nprivate async Task<IEnumerable<string>> SearchAsync(\n    [Description(\"The phrase to search for.\")] string searchPhrase,\n    [Description(\"If possible, specify the filename to search that file only. If not provided or empty, the search includes all files.\")] string? filenameFilter = null)\n{\n    await InvokeAsync(StateHasChanged);\n    IReadOnlyList<SemanticSearchRecord> results = await Search.SearchAsync(searchPhrase, filenameFilter, maxResults: 5);\n    return results.Select(result =>\n        $\"<result filename=\\\"{result.FileName}\\\" page_number=\\\"{result.PageNumber}\\\">{result.Text}</result>\");\n}\n The system prompt here is interesting; it shows how the prompt tries very hard to restrict the LLM to only producing facts based on the files provided rather than the inherent \"knowledge\" it has. From what I've seen from my testing, this seems to work pretty well! That's as far as I'm going to go in this post. In the next post I describe an experiment which starts from this template and modifies it to ingest data from a website instead, so that you can chat and ask questions about the website instead. Summary In this post I introduced the new .NET AI Chat Web App template (currently in preview) and showed the default experience of chatting about PDF files. I then described the basic mechanics of the template, and showed some of the code and services around the core features of data ingestion and embedding generation. In the next post I show how you can modify the template to ingest data from a website instead."
  },
  {
    "itemId": "https://andrewlock.net/creating-a-pooled-dependency-injection-lifetime/",
    "raw": "<img src=\"https://andrewlock.net/content/images/2025/pooling.webp\" /><p>This post follows on from <a href=\"/going-beyond-singleton-scoped-and-transient-lifetimes/\">my previous post</a>, in which I discussed some theoretical/experimental dependency-injection lifetimes, based on the discussion in an episode of <a href=\"https://www.breakpoint.show/podcast/episode-036-episode-of-a-lifetime/\">The Breakpoint Show</a>. In the previous post I provided an overview of the built-in Dependency Injection lifetimes, and described the additional proposed lifetimes: tenant, pooled, and drifter.</p> <p>The previous post provided a overview of each of these proposed lifetimes, and an implementation of the drifter (time-based) lifetime. In this post I provide an example of the \"pooled\" lifetime.</p> <h2 id=\"dependency-injection-lifetimes\" class=\"heading-with-anchor\"><a href=\"#dependency-injection-lifetimes\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Dependency injection lifetimes</a></h2> <p>This post is intended as a direct follow-on from the <a href=\"/going-beyond-singleton-scoped-and-transient-lifetimes/\">previous post</a> in which I provide the full context, but I'll provide a brief outline of the premise here. When you register services in the .NET Core DI container, you choose one of three different lifetimes.</p> <ul><li>Singleton</li> <li>Scoped</li> <li>Transient</li></ul> <p>The lifetime you specify controls how and when the DI container chooses to create a new instance of a given service, and when it instead returns an already-existing instance of the service:</p> <ul><li>Singleton—only a single instance is ever created</li> <li>Scoped—a new instance is created once per \"scope\" (typically per request)</li> <li>Transient—a new instance is created every time it's needed</li></ul> <blockquote> <p>For a full introduction to dependency injection in .NET Core, see <a href=\"https://learn.microsoft.com/en-us/aspnet/core/fundamentals/dependency-injection\">the Microsoft documentation</a>, or <a href=\"https://livebook.manning.com/book/asp-net-core-in-action-third-edition/chapter-8/\">chapters 8</a> <a href=\"https://livebook.manning.com/book/asp-net-core-in-action-third-edition/chapter-9/\">and 9</a> of my book.</p> </blockquote> <p>In <a href=\"https://www.breakpoint.show/podcast/episode-036-episode-of-a-lifetime/\">episode 36 of The Breakpoint Show</a>, Khalid, Maarten, and Woody discuss the three lifetimes I described above, providing some examples of when you might choose each one, problems to watch out for, and other things to consider.</p> <p>Throughout the show, they also discuss the desire for three \"additional\" types of services, which didn't quite fit into the standard lifetimes:</p> <ul><li>Tenant-scoped services—effectively per-tenant singletons</li> <li>Time-based (drifter) services—singleton services that are replaced periodically</li> <li>Pooled services—reuses a \"pool\" of services</li></ul> <p>You can read one way to implement tenant-scoped services <a href=\"https://michael-mckenna.com/multi-tenant-asp-dot-net-8-tenant-resolution/\">in this blog series</a> from Michael McKenna and I showed an implementation of the time-based/drifter lifetime <a href=\"/going-beyond-singleton-scoped-and-transient-lifetimes/#implementing-a-simple-time-based-lifetime-service\">in my previous post</a>. In this post I look at one possible implementation of a pooled lifetime.</p> <h2 id=\"pooled-lifetime-requirements\" class=\"heading-with-anchor\"><a href=\"#pooled-lifetime-requirements\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Pooled lifetime requirements</a></h2> <p>Woody mentioned pooling in <a href=\"https://www.breakpoint.show/podcast/episode-036-episode-of-a-lifetime/\">the podcast episode</a> as a way to reduce allocations and thereby improve performance. The pooled lifetime (inspired by <a href=\"https://learn.microsoft.com/en-us/ef/core/performance/advanced-performance-topics?tabs=with-di%2Cexpression-api-with-constant#dbcontext-pooling\">EF Core's <code>DbContext</code> pooling feature</a>) would make this capability a general DI feature, allowing pooling of \"arbitrary\" services.</p> <p>In general, I considered the requirements for this feature to be:</p> <ul><li>Pooled services should have \"scoped\" semantics, i.e. when a pooled instance is used, it should be used for the whole request scope, and should not be used by parallel requests.</li> <li>When a pooled service is requested, the DI should use a pooled instance first, if available. If no pooled instances are available, the DI container should create a new instance.</li> <li>When the scope is disposed, pooled services should be returned to the pool.</li> <li>The DI container should pool a maximum of <code>N</code> instances of the service. When an instance is returned, if there are already <code>N</code> instances in the pool, the returned instance should be discarded (calling <code>Dispose()</code> if required).</li> <li>Pooled services must implement the <code>IResettableService</code> interface, which contains a single <code>Reset</code> method.</li> <li>When an instance is returned to the pool, the pool should call <code>Reset()</code> on the instance. This must reset the instance, so that it's safe to reuse in another request.</li> <li>Other than <code>IResettableService</code>, there should be no other \"additional\" requirements on the pooled service.</li> <li>If a service implements <code>IDisposable</code>, it must be disposed if it is not returned to the pool.</li></ul> <p>I considered those to be the main requirements, but to make my proof of concept implementation a bit easier, I added a few anti-requirements:</p> <ul><li>It's permissible to return a \"wrapper\" type to access the pooled service (similar to how the <code>IOptions&lt;&gt;</code> abstraction works in ASP.NET Core).</li> <li>Ignore <code>async</code> requirements for now i.e. no need for a <code>ResetAsync()</code> or supporting <code>IAsyncDisposable</code>.</li> <li>Don't worry about configuration of the pool i.e. allow a \"fixed\" maximum size for the pool.</li></ul> <p>That covers the majority of the important behaviour points. In the next section, I'll show an example implementation that meets all of these.</p> <blockquote> <p>Note that I chose <em>not</em> to use <code>ObjectPool&lt;T&gt;</code> to explore this. Not for any principled reason, I was just hoping to have a slightly different API. You can see a similar implementation that uses <code>ObjectPool&lt;T&gt;</code> in <a href=\"https://learn.microsoft.com/en-us/aspnet/core/performance/objectpool?view=aspnetcore-9.0\">the Microsoft docs</a>.</p> </blockquote> <h2 id=\"implementing-a-pooled-lifetime-service\" class=\"heading-with-anchor\"><a href=\"#implementing-a-pooled-lifetime-service\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Implementing a pooled lifetime service</a></h2> <p>There are 5 different moving parts in the implementation:</p> <ul><li><code>IResettableService</code>—The interface that resettable services must implement</li> <li><code>IPooledService&lt;T&gt;</code>—The interface used to access an instance of item <code>T</code> (analogous to <code>IOptions&lt;T&gt;</code>)</li> <li><code>PooledService&lt;T&gt;</code>—The internal implementation of <code>IPooledService&lt;T&gt;</code></li> <li><code>DependencyPool&lt;T&gt;</code>—The pooling implementation, responsible for the rent and return of <code>IPooledService&lt;T&gt;</code></li> <li><code>PoolingExtensions</code>—Helper methods for adding the required services to the DI container.</li></ul> <p>Now let's look at each of these in turn</p> <h3 id=\"iresettableservice\" class=\"heading-with-anchor\"><a href=\"#iresettableservice\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\"><code>IResettableService</code></a></h3> <p>This is the only requirement on the pooled service itself, and there's only one method to implement, <code>Reset()</code>:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">IResettableService</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Reset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>When called, <code>Reset()</code> should reset the service to its \"original\" state, so that it can be reused when it's removed from the pool. If we compare this to <code>DbContext</code> (the original inspiration for the pooling idea), this is where the change tracking would be reset, for example.</p> <h3 id=\"ipooledservicet\" class=\"heading-with-anchor\"><a href=\"#ipooledservicet\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\"><code>IPooledService&lt;T&gt;</code></a></h3> <p>The <code>IPooledService&lt;T&gt;</code> interface is how the application primarily retrieves instances of a pooled service <code>T</code>. It's the type that you inject into your service constructors, and it's how you access instances of <code>T</code>, similar to how <code>IOptions&lt;T&gt;</code> works for configuration:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">IPooledService<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">out</span> T<span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token keyword\">where</span> <span class=\"token class-name\">T</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">IResettableService</span></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token return-type class-name\">T</span> Value <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>As you can see from the above, the service <code>T</code> must implement <code>IResettableService</code> and can be accessed via the <code>Value</code> property. For example, you might use it in a dependent service like this:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DependentService</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\">IMyService</span> _myService<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token function\">DependentService</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IPooledService<span class=\"token punctuation\">&lt;</span>IMyService<span class=\"token punctuation\">&gt;</span></span> pooled<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// Extract the value from the IPooledService&lt;T&gt;</span>\n        _myService <span class=\"token operator\">=</span> pooled<span class=\"token punctuation\">.</span>Value<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>This level of indirection is a bit annoying from a practical point of view, but I found it to be a necessary evil to create a <em>generalised</em> pooling lifetime. All the alternatives I could come up with that wouldn't require <code>IPooledService&lt;T&gt;</code> instead required the <code>IResettableService</code> to do a lot more work, which I wanted to avoid for this implementation.</p> <h3 id=\"pooledservicet\" class=\"heading-with-anchor\"><a href=\"#pooledservicet\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\"><code>PooledService&lt;T&gt;</code></a></h3> <p><code>PooledService&lt;T&gt;</code> is the <code>internal</code> implementation of <code>IPooledService&lt;T&gt;</code>:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">internal</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">PooledService<span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">&gt;</span></span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">IPooledService<span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">IDisposable</span></span>\n    <span class=\"token keyword\">where</span> <span class=\"token class-name\">T</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">IResettableService</span></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\">DependencyPool<span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">&gt;</span></span> _pool<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token function\">PooledService</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">DependencyPool<span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">&gt;</span></span> pool<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        _pool <span class=\"token operator\">=</span> pool<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// Rent a service from the pool</span>\n        Value <span class=\"token operator\">=</span> _pool<span class=\"token punctuation\">.</span><span class=\"token function\">Rent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">T</span> Value <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n    <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> IDisposable<span class=\"token punctuation\">.</span><span class=\"token function\">Dispose</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// When the PooledService&lt;T&gt; is disposed,</span>\n        <span class=\"token comment\">// the service is returned to the pool</span>\n        _pool<span class=\"token punctuation\">.</span><span class=\"token function\">Return</span><span class=\"token punctuation\">(</span>Value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>As you can see from the code above, the <code>PooledService&lt;T&gt;</code> implementation depends on the <code>DependencyPool&lt;T&gt;</code>, which we'll look into in detail shortly. The service rents an instance of <code>T</code> from the pool in the constructor. The DI container will then automatically dispose the <code>PooledService&lt;T&gt;</code> when the service scope ends, which returns the service <code>T</code> to the pool.</p> <h3 id=\"dependencypoolt\" class=\"heading-with-anchor\"><a href=\"#dependencypoolt\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\"><code>DependencyPool&lt;T&gt;</code></a></h3> <p>The <code>DependencyPool&lt;T&gt;</code> instance is where the bulk of the work happens for the implementation. The <code>DependencyPool&lt;T&gt;</code> is responsible for:</p> <ul><li>Creating new instances of the service <code>&lt;T&gt;</code> if there are none in the pool.</li> <li>Adding returned services to the pool.</li> <li>Returning pooled services when available.</li> <li>Disposing services that can't be added to the pool.</li></ul> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">internal</span> <span class=\"token keyword\">class</span> <span class=\"token generic-method\"><span class=\"token function\">DependencyPool</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">&gt;</span></span></span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IServiceProvider</span> provider<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> IDisposable\n    <span class=\"token keyword\">where</span> <span class=\"token class-name\">T</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">IResettableService</span></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> _count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// The number of instances in the pool</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> _maxPoolSize <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// TODO: Set via options</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\">ConcurrentQueue<span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">&gt;</span></span> _pool <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\">Func<span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">&gt;</span></span> _factory <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> ActivatorUtilities<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">CreateInstance</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">&gt;</span></span></span><span class=\"token punctuation\">(</span>provider<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">T</span> <span class=\"token function\">Rent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// Try to retrieve an item from the pool</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>_pool<span class=\"token punctuation\">.</span><span class=\"token function\">TryDequeue</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">out</span> <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> service<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// the </span>\n            Interlocked<span class=\"token punctuation\">.</span><span class=\"token function\">Decrement</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">ref</span> _count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> service<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">// No services in the pool</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">_factory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Return</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> service<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Interlocked<span class=\"token punctuation\">.</span><span class=\"token function\">Increment</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">ref</span> _count<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;=</span> _maxPoolSize<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// there was space in the pool, so reset and return the service</span>\n            service<span class=\"token punctuation\">.</span><span class=\"token function\">Reset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            _pool<span class=\"token punctuation\">.</span><span class=\"token function\">Enqueue</span><span class=\"token punctuation\">(</span>service<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">else</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// The maximum pool size has been exceeded</span>\n            <span class=\"token comment\">// We incremented when attempting to return, so reverse that </span>\n            Interlocked<span class=\"token punctuation\">.</span><span class=\"token function\">Decrement</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">ref</span> _count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">(</span>service <span class=\"token keyword\">as</span> <span class=\"token class-name\">IDisposable</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">?.</span><span class=\"token function\">Dispose</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Dispose</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// If the pool itself is disposed, dispose all the pooled services</span>\n        _maxPoolSize <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>_pool<span class=\"token punctuation\">.</span><span class=\"token function\">TryDequeue</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">out</span> <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> service<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token punctuation\">(</span>service <span class=\"token keyword\">as</span> <span class=\"token class-name\">IDisposable</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">?.</span><span class=\"token function\">Dispose</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>The implementation is relatively simple, but with a couple of interesting points:</p> <ul><li>An <code>IServiceProvider</code> is passed in the constructor, and is used with <code>ActivatorUtilities.CreateInstance()</code> to create a \"factory\" <code>Func&lt;T&gt;</code> for creating instances of the service <code>T</code>.</li> <li>The number of pooled instances is stored in <code>_count</code> and is stored separately from <code>ConcurrentQueue&lt;T&gt;</code>. The use of <code>Interlocked.Increment()</code> and <code>Interlocked.Decrement()</code> ensure we don't exceed the maximum pool size.</li> <li>The maximum pool size in the above implementation is fixed at <code>3</code> but that could easily be made configurable.</li> <li>When the <code>DependencyPool&lt;T&gt;</code> itself is disposed, the pool ensures no more instances can be rented, and disposes all currently pooled instances.</li></ul> <h3 id=\"poolingextensions\" class=\"heading-with-anchor\"><a href=\"#poolingextensions\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\"><code>PoolingExtensions</code></a></h3> <p>We've pretty much covered all the moving parts now, the one last step is to register everything in the DI container. We only have two services we need to register here, <code>DependencyPool&lt;T&gt;</code> and <code>IPooledService&lt;T&gt;</code></p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">PoolingExtensions</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">IServiceCollection</span> <span class=\"token generic-method\"><span class=\"token function\">AddScopedPooling</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">&gt;</span></span></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token class-name\">IServiceCollection</span> services<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">where</span> <span class=\"token class-name\">T</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">IResettableService</span></span>\n    <span class=\"token punctuation\">{</span>\n        services<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">TryAddSingleton</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>DependencyPool<span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">&gt;</span><span class=\"token punctuation\">&gt;</span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        services<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">TryAddScoped</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>IPooledService<span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">&gt;</span><span class=\"token punctuation\">,</span> PooledService<span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">&gt;</span><span class=\"token punctuation\">&gt;</span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">return</span> services<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>Note that we <em>don't</em> register <code>T</code> itself as a service that you can directly pull from the container; you always need to retrieve an <code>IPooledService&lt;T&gt;</code> and access the <code>T</code> by calling <code>Value</code>. You <em>might</em> think that you could handle this automatically in the container, doing something like the following:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\">services<span class=\"token punctuation\">.</span><span class=\"token function\">AddScoped</span><span class=\"token punctuation\">(</span>s <span class=\"token operator\">=&gt;</span> s<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">GetRequiredService</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>IPooledService<span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">&gt;</span><span class=\"token punctuation\">&gt;</span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>Value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre> <p>But unfortunately, that doesn't work. By having the DI container return the <code>T</code> directly, the DI container will automatically dispose the <code>T</code> when the scope ends. That's not what we want for pooled services—the pooled service will be handed out again, and we don't want it to be <em>disposed</em>, we rather want it to be <em>reset</em>.</p> <blockquote> <p>A reminder that an alternative to this implementation would be to use the <code>ObjectPool&lt;T&gt;</code> implementation, as described in <a href=\"https://learn.microsoft.com/en-us/aspnet/core/performance/objectpool?view=aspnetcore-9.0\">the Microsoft docs</a>.</p> </blockquote> <p>Ok, we have a complete implementation, time to take it for a spin!</p> <h2 id=\"testing-the-implementation\" class=\"heading-with-anchor\"><a href=\"#testing-the-implementation\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Testing the implementation</a></h2> <p>To test the service I'm using a similar test service as I used <a href=\"/going-beyond-singleton-scoped-and-transient-lifetimes/#testing-out-the-timed-dependencies\">in the previous post</a>, where each instance gets a different ID for its lifetime, so that we can easily see when new instances are created:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestService</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">IResettableService</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">IDisposable</span></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> _id <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">int</span></span> Id <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> Interlocked<span class=\"token punctuation\">.</span><span class=\"token function\">Increment</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">ref</span> _id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Dispose</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"Disposing service: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">Id</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Reset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"Resetting service: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">Id</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>In addition, I've added some basic logs to the <code>Reset()</code> and <code>Dispose()</code> methods so we can more easily track what's going on.</p> <p>To test it out, I created a small console app. The app creates a <code>ServiceCollection</code>, builds an <code>IServiceProvider</code> and then generates a bunch of scopes in parallel. For each scope, it retrieves a <code>TestService</code> instance, and print its <code>Id</code>. It then disposes all the scopes. We then run the same sequence again:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> collection <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">ServiceCollection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ncollection<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">AddScopedPooling</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>TestService<span class=\"token punctuation\">&gt;</span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> services <span class=\"token operator\">=</span> collection<span class=\"token punctuation\">.</span><span class=\"token function\">BuildServiceProvider</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nConsole<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Generating scopes A\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">GenerateScopes</span><span class=\"token punctuation\">(</span>services<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nConsole<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nConsole<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Generating scopes B\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">GenerateScopes</span><span class=\"token punctuation\">(</span>services<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">GenerateScopes</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IServiceProvider</span> services<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> count <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">List<span class=\"token punctuation\">&lt;</span>IServiceScope<span class=\"token punctuation\">&gt;</span></span> scopes <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Simulate 5 parallel requests</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> count<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// Create a scope, but don't dispose it yet</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> scope <span class=\"token operator\">=</span> services<span class=\"token punctuation\">.</span><span class=\"token function\">CreateScope</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        scopes<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>scope<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// Retrieve an instance of the pooled service</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> service <span class=\"token operator\">=</span> scope<span class=\"token punctuation\">.</span>ServiceProvider<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">GetRequiredService</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>IPooledService<span class=\"token punctuation\">&lt;</span>TestService<span class=\"token punctuation\">&gt;</span><span class=\"token punctuation\">&gt;</span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>Value<span class=\"token punctuation\">;</span>\n        Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"Received service: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">service<span class=\"token punctuation\">.</span>Id</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> scope <span class=\"token keyword\">in</span> scopes<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        scope<span class=\"token punctuation\">.</span><span class=\"token function\">Dispose</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>When we run this code, we get the following sequence:</p> <pre class=\"language-bash\"><code class=\"language-bash\">Generating scopes A\nReceived value: <span class=\"token number\">1</span>\nReceived value: <span class=\"token number\">2</span>\nReceived value: <span class=\"token number\">3</span>\nReceived value: <span class=\"token number\">4</span>\nReceived value: <span class=\"token number\">5</span>\nResetting service: <span class=\"token number\">1</span>\nResetting service: <span class=\"token number\">2</span>\nResetting service: <span class=\"token number\">3</span>\nDisposing service: <span class=\"token number\">4</span>\nDisposing service: <span class=\"token number\">5</span>\n\nGenerating scopes B\nReceived value: <span class=\"token number\">1</span>\nReceived value: <span class=\"token number\">2</span>\nReceived value: <span class=\"token number\">3</span>\nReceived value: <span class=\"token number\">6</span>\nReceived value: <span class=\"token number\">7</span>\nResetting service: <span class=\"token number\">1</span>\nResetting service: <span class=\"token number\">2</span>\nResetting service: <span class=\"token number\">3</span>\nDisposing service: <span class=\"token number\">6</span>\nDisposing service: <span class=\"token number\">7</span>\n</code></pre> <p>By looking at the Ids printed, we can see this works as expected:</p> <ul><li>5 new instances are created to satisfy the 5 parallel scopes.</li> <li>When the scopes are disposed, the maximum 3 instances are reset and stored in the pool. The remaining two services are disposed as they can't be pooled.</li> <li>When the sequence is run again, the first 3 requests use pooled instances. The remaining two instances must be created, giving Ids <code>6</code> and <code>7</code>.</li> <li>When the scopes are disposed, again the 3 instances are pooled, and the remaining 2 are disposed.</li></ul> <p>So it seems the implementation is working as expected, but I think it's worth thinking about the limitations and considering whether you <em>should</em> use something like this.</p> <h2 id=\"limitations-in-the-pooled-lifetime-implementation\" class=\"heading-with-anchor\"><a href=\"#limitations-in-the-pooled-lifetime-implementation\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Limitations in the pooled lifetime implementation</a></h2> <p>The inspiration for the pooling lifetime was EF Core's pooling of <code>DbContext</code>, but the above implementation is fundamentally a bit different. The <code>DbContext</code> was designed to \"know\" about pooling, and its internal implementation has knowledge of <code>DbContextLease</code> which tracks the origin of <code>DbContext</code> instances etc. That stands in contrast to the above implementation in which the implementation class doesn't need to know about the pooling details (other than providing a <code>Reset()</code> implementation).</p> <p>The net result of the <code>DbContext</code> implementation is that the <em>usage</em> of <code>DbContext</code> is identical, whether or not you use pooling. That again contrasts with the implementation in this post, in which you must use the <code>IPooledService&lt;T&gt;</code> intermediate abstraction.</p> <p>Another thing to consider in the above implementation is that your pooled services <em>can't</em> depend on scoped services, even though the services behave somewhat like scoped services themselves. That's because the instances \"live\" longer than a single service scope, so the only lifetime that really makes sense for dependencies is singleton, or possibly transient.</p> <p>Yet another aspect to consider is that the pool is very simplistic. It's first-come first-served in both renting and return. Once the items are in the pool, they're there to stay until they rented again. You <em>could</em> improve all that of course, but as you make things more complicated, you risk removing the benefits that pooling could bring.</p> <h2 id=\"is-pooling-actually-useful-\" class=\"heading-with-anchor\"><a href=\"#is-pooling-actually-useful-\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Is pooling actually useful?</a></h2> <p>The original inspiration for the pooling lifetime was EF Core's <code>DbContext</code> pooling, for which a <a href=\"https://github.com/dotnet/EntityFramework.Docs/tree/main/samples/core/Benchmarks/ContextPooling.cs\">single-threaded benchmark</a> shows that pooling can improve performance and reduce allocation:</p> <table><thead><tr><th>Method</th><th style=\"text-align:right\">NumBlogs</th><th style=\"text-align:right\">Mean</th><th style=\"text-align:right\">Error</th><th style=\"text-align:right\">StdDev</th><th style=\"text-align:right\">Gen 0</th><th style=\"text-align:right\">Gen 1</th><th style=\"text-align:right\">Gen 2</th><th style=\"text-align:right\">Allocated</th></tr></thead><tbody><tr><td>WithoutContextPooling</td><td style=\"text-align:right\">1</td><td style=\"text-align:right\">701.6 us</td><td style=\"text-align:right\">26.62 us</td><td style=\"text-align:right\">78.48 us</td><td style=\"text-align:right\">11.7188</td><td style=\"text-align:right\">-</td><td style=\"text-align:right\">-</td><td style=\"text-align:right\">50.38 KB</td></tr><tr><td>WithContextPooling</td><td style=\"text-align:right\">1</td><td style=\"text-align:right\">350.1 us</td><td style=\"text-align:right\">6.80 us</td><td style=\"text-align:right\">14.64 us</td><td style=\"text-align:right\">0.9766</td><td style=\"text-align:right\">-</td><td style=\"text-align:right\">-</td><td style=\"text-align:right\">4.63 KB</td></tr></tbody></table> <p>However, just because it is beneficial overall for EF Core, doesn't <em>necessarily</em> mean it will always be beneficial. This is explicitly called out by Microsoft in <a href=\"https://devblogs.microsoft.com/dotnet/async-valuetask-pooling-in-net-5/\">a blog post discussing pooling of <code>ValueTask</code> instances</a>, back in .NET 5</p> <blockquote> <p>In employing such a pool, the developer is betting that they can implement a custom allocator (which is really what a pool is) that’s better than the general-purpose GC allocator. Beating the GC is not trivial. But, a developer might be able to, given knowledge they have of their specific scenario.</p> </blockquote> <p>Memory allocation in .NET is very efficient; the runtime is <em>fast</em> at allocating memory and is even quick at cleaning up small objects. So although pooling means the allocator generally doesn't need to run as much, that's not really where you're getting performance improvements.</p> <p>One possible source of performance improvements from pooling can come when the objects being allocated are large. Large objects are generally more expensive for the GC, because the more memory allocated, the more often the GC has to run, and the more work it has to do (to zero out the memory etc).</p> <p>Pooling can also provide an advantage if constructing the objects is expensive. This could be because the constructor itself does a bunch of work. It could also be because the DI container doesn't need to calculate and reconstruct the full dependency graph for the object every time it's requested. Or it could be because you need to use a limited OS resource.</p> <p>However, there are interesting problems to think about here, which <em>could</em> undermine any garbage collection improvements you might expect to see from pooling.</p> <p>First of all, if the <code>Reset()</code> method has to do more work than the GC would in collecting it, then you've immediately lost any advantage you could expect to get from pooling. But there's an even more subtle issue.</p> <p>The .NET GC is a generational garbage collector. Newly allocated objects are placed in Gen 0, and can typically be quickly cleaned up. If a given object survives a garbage collection because it is still in use, it is promoted to Gen 1. The longest living objects are eventually promoted to Gen 2.</p> <p>In general, the higher the GC generation, the more expensive it is to clean up. Ideally the GC tries to scan all the Gen 0 objects to see if they're still alive. This works well because generally Gen 0 objects reference <em>other</em> Gen 0 objects. Where things get tricky is if a Gen <strong>2</strong> object has a reference to a Gen 0 object. Then suddenly the GC needs to check the Gen 2 objects to find out if that Gen 0 object can be collected. And that's a <em>lot</em> more expensive.</p> <p>And what does pooling do? It makes objects live longer, so they end up in Gen 2. If those objects hold references to short-lived objects…then suddenly you've made GCs <em>much</em> more expensive.😬</p> <blockquote> <p>These issues (and others) are discussed by Stephen Toub with Scott Hanselman in <a href=\"https://learn.microsoft.com/en-us/shows/on-dotnet/lets-build-our-own-arraypool-deep-dotnet-with-stephen-scott#time=39m51s\">the Deep .NET video on ArrayPool</a>.</p> </blockquote> <p>So in conclusion: should you use this? Probably not, but I enjoyed exploring it 😀</p> <h2 id=\"summary\" class=\"heading-with-anchor\"><a href=\"#summary\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Summary</a></h2> <p>This post followed on from <a href=\"/going-beyond-singleton-scoped-and-transient-lifetimes/\">my previous post</a>, in which I discussed some theoretical/experimental dependency-injection lifetimes, based on the discussion in an episode of <a href=\"https://www.breakpoint.show/podcast/episode-036-episode-of-a-lifetime/\">The Breakpoint Show</a>. In this post I presented a possible implementation of a \"pooled\" lifetime, which could be used with arbitrary services. The implementation has a bunch of limitations that I dig into, and use it as an excuse to discuss whether pooling of generic objects makes sense or not.</p> ",
    "sanitized": "This post follows on from my previous post, in which I discussed some theoretical/experimental dependency-injection lifetimes, based on the discussion in an episode of The Breakpoint Show. In the previous post I provided an overview of the built-in Dependency Injection lifetimes, and described the additional proposed lifetimes: tenant, pooled, and drifter. The previous post provided a overview of each of these proposed lifetimes, and an implementation of the drifter (time-based) lifetime. In this post I provide an example of the \"pooled\" lifetime. Dependency injection lifetimes This post is intended as a direct follow-on from the previous post in which I provide the full context, but I'll provide a brief outline of the premise here. When you register services in the .NET Core DI container, you choose one of three different lifetimes. Singleton Scoped Transient The lifetime you specify controls how and when the DI container chooses to create a new instance of a given service, and when it instead returns an already-existing instance of the service: Singleton—only a single instance is ever created Scoped—a new instance is created once per \"scope\" (typically per request) Transient—a new instance is created every time it's needed  For a full introduction to dependency injection in .NET Core, see the Microsoft documentation, or chapters 8 and 9 of my book.  In episode 36 of The Breakpoint Show, Khalid, Maarten, and Woody discuss the three lifetimes I described above, providing some examples of when you might choose each one, problems to watch out for, and other things to consider. Throughout the show, they also discuss the desire for three \"additional\" types of services, which didn't quite fit into the standard lifetimes: Tenant-scoped services—effectively per-tenant singletons Time-based (drifter) services—singleton services that are replaced periodically Pooled services—reuses a \"pool\" of services You can read one way to implement tenant-scoped services in this blog series from Michael McKenna and I showed an implementation of the time-based/drifter lifetime in my previous post. In this post I look at one possible implementation of a pooled lifetime. Pooled lifetime requirements Woody mentioned pooling in the podcast episode as a way to reduce allocations and thereby improve performance. The pooled lifetime (inspired by EF Core's DbContext pooling feature) would make this capability a general DI feature, allowing pooling of \"arbitrary\" services. In general, I considered the requirements for this feature to be: Pooled services should have \"scoped\" semantics, i.e. when a pooled instance is used, it should be used for the whole request scope, and should not be used by parallel requests. When a pooled service is requested, the DI should use a pooled instance first, if available. If no pooled instances are available, the DI container should create a new instance. When the scope is disposed, pooled services should be returned to the pool. The DI container should pool a maximum of N instances of the service. When an instance is returned, if there are already N instances in the pool, the returned instance should be discarded (calling Dispose() if required). Pooled services must implement the IResettableService interface, which contains a single Reset method. When an instance is returned to the pool, the pool should call Reset() on the instance. This must reset the instance, so that it's safe to reuse in another request. Other than IResettableService, there should be no other \"additional\" requirements on the pooled service. If a service implements IDisposable, it must be disposed if it is not returned to the pool. I considered those to be the main requirements, but to make my proof of concept implementation a bit easier, I added a few anti-requirements: It's permissible to return a \"wrapper\" type to access the pooled service (similar to how the IOptions<> abstraction works in ASP.NET Core). Ignore async requirements for now i.e. no need for a ResetAsync() or supporting IAsyncDisposable. Don't worry about configuration of the pool i.e. allow a \"fixed\" maximum size for the pool. That covers the majority of the important behaviour points. In the next section, I'll show an example implementation that meets all of these.  Note that I chose not to use ObjectPool<T> to explore this. Not for any principled reason, I was just hoping to have a slightly different API. You can see a similar implementation that uses ObjectPool<T> in the Microsoft docs.  Implementing a pooled lifetime service There are 5 different moving parts in the implementation: IResettableService—The interface that resettable services must implement IPooledService<T>—The interface used to access an instance of item T (analogous to IOptions<T>) PooledService<T>—The internal implementation of IPooledService<T> DependencyPool<T>—The pooling implementation, responsible for the rent and return of IPooledService<T> PoolingExtensions—Helper methods for adding the required services to the DI container. Now let's look at each of these in turn IResettableService This is the only requirement on the pooled service itself, and there's only one method to implement, Reset(): public interface IResettableService\n{\n    void Reset();\n}\n When called, Reset() should reset the service to its \"original\" state, so that it can be reused when it's removed from the pool. If we compare this to DbContext (the original inspiration for the pooling idea), this is where the change tracking would be reset, for example. IPooledService<T> The IPooledService<T> interface is how the application primarily retrieves instances of a pooled service T. It's the type that you inject into your service constructors, and it's how you access instances of T, similar to how IOptions<T> works for configuration: public interface IPooledService<out T>\n    where T : IResettableService\n{\n    T Value { get; }\n}\n As you can see from the above, the service T must implement IResettableService and can be accessed via the Value property. For example, you might use it in a dependent service like this: public class DependentService\n{\n    private readonly IMyService _myService;\n    public DependentService(IPooledService<IMyService> pooled)\n    {\n        // Extract the value from the IPooledService<T>\n        _myService = pooled.Value;\n    }\n}\n This level of indirection is a bit annoying from a practical point of view, but I found it to be a necessary evil to create a generalised pooling lifetime. All the alternatives I could come up with that wouldn't require IPooledService<T> instead required the IResettableService to do a lot more work, which I wanted to avoid for this implementation. PooledService<T> PooledService<T> is the internal implementation of IPooledService<T>: internal class PooledService<T> : IPooledService<T>, IDisposable\n    where T : IResettableService\n{\n    private readonly DependencyPool<T> _pool;\n\n    public PooledService(DependencyPool<T> pool)\n    {\n        _pool = pool;\n        // Rent a service from the pool\n        Value = _pool.Rent();\n    }\n\n    public T Value { get; }\n\n    void IDisposable.Dispose()\n    {\n        // When the PooledService<T> is disposed,\n        // the service is returned to the pool\n        _pool.Return(Value);\n    }\n}\n As you can see from the code above, the PooledService<T> implementation depends on the DependencyPool<T>, which we'll look into in detail shortly. The service rents an instance of T from the pool in the constructor. The DI container will then automatically dispose the PooledService<T> when the service scope ends, which returns the service T to the pool. DependencyPool<T> The DependencyPool<T> instance is where the bulk of the work happens for the implementation. The DependencyPool<T> is responsible for: Creating new instances of the service <T> if there are none in the pool. Adding returned services to the pool. Returning pooled services when available. Disposing services that can't be added to the pool. internal class DependencyPool<T>(IServiceProvider provider) : IDisposable\n    where T : IResettableService\n{\n    private int _count = 0; // The number of instances in the pool\n    private int _maxPoolSize = 3; // TODO: Set via options\n    private readonly ConcurrentQueue<T> _pool = new();\n    private readonly Func<T> _factory = () => ActivatorUtilities.CreateInstance<T>(provider);\n\n    public T Rent()\n    {\n        // Try to retrieve an item from the pool\n        if (_pool.TryDequeue(out var service))\n        {\n            // the \n            Interlocked.Decrement(ref _count);\n            return service;\n        }\n\n        // No services in the pool\n        return _factory();\n    }\n\n    public void Return(T service)\n    {\n        if (Interlocked.Increment(ref _count) <= _maxPoolSize)\n        {\n            // there was space in the pool, so reset and return the service\n            service.Reset();\n            _pool.Enqueue(service);\n        }\n        else\n        {\n            // The maximum pool size has been exceeded\n            // We incremented when attempting to return, so reverse that \n            Interlocked.Decrement(ref _count);\n            (service as IDisposable)?.Dispose();\n        }\n    }\n\n    public void Dispose()\n    {\n        // If the pool itself is disposed, dispose all the pooled services\n        _maxPoolSize = 0;\n\n        while (_pool.TryDequeue(out var service))\n        {\n            (service as IDisposable)?.Dispose();\n        }\n    }\n}\n The implementation is relatively simple, but with a couple of interesting points: An IServiceProvider is passed in the constructor, and is used with ActivatorUtilities.CreateInstance() to create a \"factory\" Func<T> for creating instances of the service T. The number of pooled instances is stored in _count and is stored separately from ConcurrentQueue<T>. The use of Interlocked.Increment() and Interlocked.Decrement() ensure we don't exceed the maximum pool size. The maximum pool size in the above implementation is fixed at 3 but that could easily be made configurable. When the DependencyPool<T> itself is disposed, the pool ensures no more instances can be rented, and disposes all currently pooled instances. PoolingExtensions We've pretty much covered all the moving parts now, the one last step is to register everything in the DI container. We only have two services we need to register here, DependencyPool<T> and IPooledService<T> public static class PoolingExtensions\n{\n    public static IServiceCollection AddScopedPooling<T>(this IServiceCollection services)\n        where T : class, IResettableService\n    {\n        services.TryAddSingleton<DependencyPool<T>>();\n        services.TryAddScoped<IPooledService<T>, PooledService<T>>();\n\n        return services;\n    }\n}\n Note that we don't register T itself as a service that you can directly pull from the container; you always need to retrieve an IPooledService<T> and access the T by calling Value. You might think that you could handle this automatically in the container, doing something like the following: services.AddScoped(s => s.GetRequiredService<IPooledService<T>>().Value);\n But unfortunately, that doesn't work. By having the DI container return the T directly, the DI container will automatically dispose the T when the scope ends. That's not what we want for pooled services—the pooled service will be handed out again, and we don't want it to be disposed, we rather want it to be reset.  A reminder that an alternative to this implementation would be to use the ObjectPool<T> implementation, as described in the Microsoft docs.  Ok, we have a complete implementation, time to take it for a spin! Testing the implementation To test the service I'm using a similar test service as I used in the previous post, where each instance gets a different ID for its lifetime, so that we can easily see when new instances are created: public class TestService : IResettableService, IDisposable\n{\n    private static int _id = 0;\n\n    public int Id { get; } = Interlocked.Increment(ref _id);\n\n    public void Dispose() => Console.WriteLine($\"Disposing service: {Id}\");\n\n    public void Reset() => Console.WriteLine($\"Resetting service: {Id}\");\n}\n In addition, I've added some basic logs to the Reset() and Dispose() methods so we can more easily track what's going on. To test it out, I created a small console app. The app creates a ServiceCollection, builds an IServiceProvider and then generates a bunch of scopes in parallel. For each scope, it retrieves a TestService instance, and print its Id. It then disposes all the scopes. We then run the same sequence again: var collection = new ServiceCollection();\ncollection.AddScopedPooling<TestService>();\nvar services = collection.BuildServiceProvider();\n\nConsole.WriteLine(\"Generating scopes A\")\nGenerateScopes(services);\nConsole.WriteLine()\nConsole.WriteLine(\"Generating scopes B\")\nGenerateScopes(services);\n\nstatic void GenerateScopes(IServiceProvider services)\n{\n    var count = 5;\n    List<IServiceScope> scopes = new(count);\n\n    // Simulate 5 parallel requests\n    for (int i = 0; i < count; i++)\n    {\n        // Create a scope, but don't dispose it yet\n        var scope = services.CreateScope();\n        scopes.Add(scope);\n        // Retrieve an instance of the pooled service\n        var service = scope.ServiceProvider.GetRequiredService<IPooledService<TestService>>().Value;\n        Console.WriteLine($\"Received service: {service.Id}\");\n    }\n\n    foreach (var scope in scopes)\n    {\n        scope.Dispose();\n    }\n}\n When we run this code, we get the following sequence: Generating scopes A\nReceived value: 1\nReceived value: 2\nReceived value: 3\nReceived value: 4\nReceived value: 5\nResetting service: 1\nResetting service: 2\nResetting service: 3\nDisposing service: 4\nDisposing service: 5\n\nGenerating scopes B\nReceived value: 1\nReceived value: 2\nReceived value: 3\nReceived value: 6\nReceived value: 7\nResetting service: 1\nResetting service: 2\nResetting service: 3\nDisposing service: 6\nDisposing service: 7\n By looking at the Ids printed, we can see this works as expected: 5 new instances are created to satisfy the 5 parallel scopes. When the scopes are disposed, the maximum 3 instances are reset and stored in the pool. The remaining two services are disposed as they can't be pooled. When the sequence is run again, the first 3 requests use pooled instances. The remaining two instances must be created, giving Ids 6 and 7. When the scopes are disposed, again the 3 instances are pooled, and the remaining 2 are disposed. So it seems the implementation is working as expected, but I think it's worth thinking about the limitations and considering whether you should use something like this. Limitations in the pooled lifetime implementation The inspiration for the pooling lifetime was EF Core's pooling of DbContext, but the above implementation is fundamentally a bit different. The DbContext was designed to \"know\" about pooling, and its internal implementation has knowledge of DbContextLease which tracks the origin of DbContext instances etc. That stands in contrast to the above implementation in which the implementation class doesn't need to know about the pooling details (other than providing a Reset() implementation). The net result of the DbContext implementation is that the usage of DbContext is identical, whether or not you use pooling. That again contrasts with the implementation in this post, in which you must use the IPooledService<T> intermediate abstraction. Another thing to consider in the above implementation is that your pooled services can't depend on scoped services, even though the services behave somewhat like scoped services themselves. That's because the instances \"live\" longer than a single service scope, so the only lifetime that really makes sense for dependencies is singleton, or possibly transient. Yet another aspect to consider is that the pool is very simplistic. It's first-come first-served in both renting and return. Once the items are in the pool, they're there to stay until they rented again. You could improve all that of course, but as you make things more complicated, you risk removing the benefits that pooling could bring. Is pooling actually useful? The original inspiration for the pooling lifetime was EF Core's DbContext pooling, for which a single-threaded benchmark shows that pooling can improve performance and reduce allocation: MethodNumBlogsMeanErrorStdDevGen 0Gen 1Gen 2AllocatedWithoutContextPooling1701.6 us26.62 us78.48 us11.7188--50.38 KBWithContextPooling1350.1 us6.80 us14.64 us0.9766--4.63 KB However, just because it is beneficial overall for EF Core, doesn't necessarily mean it will always be beneficial. This is explicitly called out by Microsoft in a blog post discussing pooling of ValueTask instances, back in .NET 5  In employing such a pool, the developer is betting that they can implement a custom allocator (which is really what a pool is) that’s better than the general-purpose GC allocator. Beating the GC is not trivial. But, a developer might be able to, given knowledge they have of their specific scenario.  Memory allocation in .NET is very efficient; the runtime is fast at allocating memory and is even quick at cleaning up small objects. So although pooling means the allocator generally doesn't need to run as much, that's not really where you're getting performance improvements. One possible source of performance improvements from pooling can come when the objects being allocated are large. Large objects are generally more expensive for the GC, because the more memory allocated, the more often the GC has to run, and the more work it has to do (to zero out the memory etc). Pooling can also provide an advantage if constructing the objects is expensive. This could be because the constructor itself does a bunch of work. It could also be because the DI container doesn't need to calculate and reconstruct the full dependency graph for the object every time it's requested. Or it could be because you need to use a limited OS resource. However, there are interesting problems to think about here, which could undermine any garbage collection improvements you might expect to see from pooling. First of all, if the Reset() method has to do more work than the GC would in collecting it, then you've immediately lost any advantage you could expect to get from pooling. But there's an even more subtle issue. The .NET GC is a generational garbage collector. Newly allocated objects are placed in Gen 0, and can typically be quickly cleaned up. If a given object survives a garbage collection because it is still in use, it is promoted to Gen 1. The longest living objects are eventually promoted to Gen 2. In general, the higher the GC generation, the more expensive it is to clean up. Ideally the GC tries to scan all the Gen 0 objects to see if they're still alive. This works well because generally Gen 0 objects reference other Gen 0 objects. Where things get tricky is if a Gen 2 object has a reference to a Gen 0 object. Then suddenly the GC needs to check the Gen 2 objects to find out if that Gen 0 object can be collected. And that's a lot more expensive. And what does pooling do? It makes objects live longer, so they end up in Gen 2. If those objects hold references to short-lived objects…then suddenly you've made GCs much more expensive.😬  These issues (and others) are discussed by Stephen Toub with Scott Hanselman in the Deep .NET video on ArrayPool.  So in conclusion: should you use this? Probably not, but I enjoyed exploring it 😀 Summary This post followed on from my previous post, in which I discussed some theoretical/experimental dependency-injection lifetimes, based on the discussion in an episode of The Breakpoint Show. In this post I presented a possible implementation of a \"pooled\" lifetime, which could be used with arbitrary services. The implementation has a bunch of limitations that I dig into, and use it as an excuse to discuss whether pooling of generic objects makes sense or not."
  },
  {
    "itemId": "https://andrewlock.net/going-beyond-singleton-scoped-and-transient-lifetimes/",
    "raw": "<img src=\"https://andrewlock.net/content/images/2025/lifetimes_banner.webp\" /><p>This is the first of two posts, and is largely a result of being nerd-sniped while listening to an episode of <a href=\"https://www.breakpoint.show/podcast/episode-036-episode-of-a-lifetime/\">The Breakpoint Show</a> which discussed dependency injection (DI) and the possible service lifetimes available. At various points Khalid, Maarten, and Woody discussed hypothetical \"additional\" lifetimes. This got me wondering how feasible it would be to create practical versions of those lifetimes.</p> <p>In this post I first briefly describe the standard lifetimes available in the .NET DI container. I then briefly describe the three hypothetical lifetimes described in the podcast. Finally, I show how you could implement one of these lifetimes in practice. In the next post I show a possible implementation for the remaining lifetime.</p> <h2 id=\"service-lifetimes-available-in-the-net-core-di-container\" class=\"heading-with-anchor\"><a href=\"#service-lifetimes-available-in-the-net-core-di-container\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Service lifetimes available in the .NET Core DI container</a></h2> <p>Before we look at these additional hypothetical service scopes, let's make sure we understand the <em>existing</em> lifetime scopes that are available in .NET Core.</p> <blockquote> <p>This post isn't meant to be a full introduction to dependency injection in .NET Core. If you'd like to learn more, the Microsoft documentation contains <a href=\"https://learn.microsoft.com/en-us/aspnet/core/fundamentals/dependency-injection\">an introduction to dependency injection</a>. Alternatively, <a href=\"https://livebook.manning.com/book/asp-net-core-in-action-third-edition/chapter-8/\">chapters 8</a> <a href=\"https://livebook.manning.com/book/asp-net-core-in-action-third-edition/chapter-9/\">and 9</a> of my book contain a longer introduction to dependency injection in general, as well as the standard DI lifetimes.</p> </blockquote> <p>When you register services in the .NET Core DI container, you choose one of three different lifetimes.</p> <ul><li>Singleton</li> <li>Scoped</li> <li>Transient</li></ul> <p>The lifetime you specify controls how and when the DI container chooses to create a new instance of a given service, and when it instead returns an already-existing instance of the service.</p> <h3 id=\"singleton-services\" class=\"heading-with-anchor\"><a href=\"#singleton-services\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Singleton services</a></h3> <p>Singleton is the simplest lifetime you can give a service. Singleton services are only ever created once. When you register a service as a singleton you can either explicitly provide the instance the DI container should always return, or you can tell the DI container to create an instance, but then always reuse it.</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> builder <span class=\"token operator\">=</span> WebApplication<span class=\"token punctuation\">.</span><span class=\"token function\">CreateBuilder</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Providing an explicit instance of SingletonClass1 to use</span>\nbuilder<span class=\"token punctuation\">.</span>Services<span class=\"token punctuation\">.</span><span class=\"token function\">AddSingleton</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">SingletonClass1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Or, allowing the DI container to create the SingletonClass2</span>\nbuilder<span class=\"token punctuation\">.</span>Services<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">AddSingleton</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>SingletonClass2<span class=\"token punctuation\">&gt;</span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Or, providing a \"factory function\" for the the container to use to create the instance</span>\nbuilder<span class=\"token punctuation\">.</span>Services<span class=\"token punctuation\">.</span><span class=\"token function\">AddSingleton</span><span class=\"token punctuation\">(</span>serviceProvider <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">SingletonClass3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre> <p>In the first registration method above, the instance of <code>SingletonClass1</code> is explicitly provided to the DI container. The container then uses this instance whenever it needs an instance of the type, and will not create a new version itself.</p> <p>In the second registration method shown above, the DI container is responsible for creating the instance of <code>SingletonClass2</code>. The first time the <code>SingletonClass2</code> is requested, the DI container creates an instance. It then reuses the same instance every time it needs an instance of the type.</p> <p>The final method shown above works pretty much the same as the second method, the only difference is that you're providing an explicit \"factory\" lambda method which the container invokes to create an instance of <code>SingletonClass3</code>.</p> <p>The key point is that in all cases, the container creates a maximum of a single instance, and this same instance is used to fulfil any requests for the type.</p> <h3 id=\"scoped-services\" class=\"heading-with-anchor\"><a href=\"#scoped-services\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Scoped services</a></h3> <p>Scoped services are arguably the most confusing of the service lifetimes. This is primarily due to the introduction of the concept of a new concept: scope. I think the easiest way to understand the scope concept is to see it in action:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> builder <span class=\"token operator\">=</span> WebApplication<span class=\"token punctuation\">.</span><span class=\"token function\">CreateBuilder</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Allowing the DI container to create the ScopedClass</span>\nbuilder<span class=\"token punctuation\">.</span>Services<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">AddScoped</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>ScopedClass<span class=\"token punctuation\">&gt;</span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Alternatively, providing a \"factory function\" for the the container to use to create the instance</span>\nbuilder<span class=\"token punctuation\">.</span>Services<span class=\"token punctuation\">.</span><span class=\"token function\">AddScoped</span><span class=\"token punctuation\">(</span>serviceProvider <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">ScopedClass2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> app <span class=\"token operator\">=</span> builder<span class=\"token punctuation\">.</span><span class=\"token function\">Build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Hold a reference to the object _outside_ of the scope, for demo purposes only</span>\n<span class=\"token comment\">// WARNING: you shouldn't do this normally, as the service is disposed when the scope ends</span>\n<span class=\"token class-name\">ScopedClass</span> service<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// create a scope</span>\n<span class=\"token keyword\">using</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> scope <span class=\"token operator\">=</span> app<span class=\"token punctuation\">.</span>Services<span class=\"token punctuation\">.</span><span class=\"token function\">CreateScope</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Retreive the first instance</span>\n    service <span class=\"token operator\">=</span> scope<span class=\"token punctuation\">.</span>ServiceProvider<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">GetRequiredService</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>ScopedClass<span class=\"token punctuation\">&gt;</span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n\n    <span class=\"token comment\">// Request another instance of the ScopedClass</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> other <span class=\"token operator\">=</span> scope<span class=\"token punctuation\">.</span>ServiceProvider<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">GetRequiredService</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>ScopedClass<span class=\"token punctuation\">&gt;</span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// The DI container returns the same instance in both cases</span>\n    Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>service <span class=\"token operator\">==</span> other<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">using</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> scope <span class=\"token operator\">=</span> app<span class=\"token punctuation\">.</span>Services<span class=\"token punctuation\">.</span><span class=\"token function\">CreateScope</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// In a different  scope, the DI container returns a _different_ instance</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> other <span class=\"token operator\">=</span> scope<span class=\"token punctuation\">.</span>ServiceProvider<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">GetRequiredService</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>ScopedClass<span class=\"token punctuation\">&gt;</span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>service <span class=\"token operator\">==</span> other<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>The key point is that <em>within</em> a scope, the DI container returns the <em>same</em> instance of <code>ScopedClass</code> every time it's requested. But for <em>different</em> scopes, the DI container returns a <em>different</em> instance of <code>ScopedClass</code>.</p> <p>In the code above I explicitly created the scope, but if you're using ASP.NET Core, then the scope is typically created for you automatically by the framework, and lasts for a single request. That means that all usages of the scoped <code>ScopedClass</code> service <em>within a given request</em> return the same instance of a <code>ScopedClass</code>, but you get a <em>different</em> instance of <code>ScopedClass</code> when you're in <em>different</em> requests.</p> <h3 id=\"transient-services\" class=\"heading-with-anchor\"><a href=\"#transient-services\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Transient services</a></h3> <p>Transient services are again relatively simple: every request for a transient service returns a new instance.</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> builder <span class=\"token operator\">=</span> WebApplication<span class=\"token punctuation\">.</span><span class=\"token function\">CreateBuilder</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Allowing the DI container to create the TransientClass</span>\nbuilder<span class=\"token punctuation\">.</span>Services<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">AddTransient</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>TransientClass<span class=\"token punctuation\">&gt;</span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Alternatively, providing a \"factory function\" for the the container to use to create the instance</span>\nbuilder<span class=\"token punctuation\">.</span>Services<span class=\"token punctuation\">.</span><span class=\"token function\">AddTransient</span><span class=\"token punctuation\">(</span>serviceProvider <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">TransientClass2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> app <span class=\"token operator\">=</span> builder<span class=\"token punctuation\">.</span><span class=\"token function\">Build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// create a scope</span>\n<span class=\"token keyword\">using</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> scope <span class=\"token operator\">=</span> app<span class=\"token punctuation\">.</span>Services<span class=\"token punctuation\">.</span><span class=\"token function\">CreateScope</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Request the first instance</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> service <span class=\"token operator\">=</span> scope<span class=\"token punctuation\">.</span>ServiceProvider<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">GetRequiredService</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>TransientClass<span class=\"token punctuation\">&gt;</span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n\n    <span class=\"token comment\">// Request another instance of the TransientClass</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> other <span class=\"token operator\">=</span> scope<span class=\"token punctuation\">.</span>ServiceProvider<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">GetRequiredService</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>TransientClass<span class=\"token punctuation\">&gt;</span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Even inside the same scope, the instances are different</span>\n    Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>service <span class=\"token operator\">==</span> other<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>Every time you request a <code>TransientService</code> instance, even if you're in the same request, the DI container creates a new instance of the <code>TransientService</code> class.</p> <p>That covers the standard scopes supported by the <em>Microsoft.Extensions.DependencyInjection</em> libraries used by ASP.NET Core . In the next section I describe some of the \"hypothetical\" scopes that were discussed on <a href=\"https://www.breakpoint.show/podcast/episode-036-episode-of-a-lifetime/\">The Breakpoint Show</a>.</p> <h2 id=\"the-breakpoint-show-s-additional-lifetime-scopes\" class=\"heading-with-anchor\"><a href=\"#the-breakpoint-show-s-additional-lifetime-scopes\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">The Breakpoint Show's additional lifetime scopes</a></h2> <p>In <a href=\"https://www.breakpoint.show/podcast/episode-036-episode-of-a-lifetime/\">episode 36 of The Breakpoint Show</a>, Khalid, Maarten, and Woody discuss the three lifetimes I described above, providing some examples of when you might choose each one, problems to watch out for, and other things to consider.</p> <p>Throughout the show, they also discussed the desire for three \"additional\" types of services, which didn't quite fit into the standard lifetimes:</p> <ul><li>Tenant-scoped services</li> <li>Pooled services</li> <li>Time-based (drifter) services</li></ul> <p>In the following sections I provide a brief high-level overview of these theoretical scopes.</p> <h3 id=\"tenant-scoped-services\" class=\"heading-with-anchor\"><a href=\"#tenant-scoped-services\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Tenant-scoped services</a></h3> <p>Tenant-scoped services were mentioned by Maarten as a practical existing example, which he has used in real multi-tenant applications. They are useful when you want some services to be \"singletons\", but you <em>don't</em> want them to be shared between the <em>whole</em> application. Rather, you want them to be \"singletons for a given tenant\".</p> <p>As you might expect, multi-tenant applications are relatively common, so there are various packages you can use to help configure singleton services in your application. I wrote about SaasKit <a href=\"https://andrewlock.net/tag/multi-tenancy/\">back in 2016</a>, but that package hasn't seen many updates since then, and there are some <a href=\"https://www.nuget.org/packages?q=multitenant\">modern alternatives</a> now.</p> <p>One of these alternatives is explained by Michael McKenna <a href=\"https://michael-mckenna.com/multi-tenant-asp-dot-net-8-tenant-resolution/\">in his blog series</a>. In particular <a href=\"https://michael-mckenna.com/multi-tenant-asp-dot-net-8-tenant-services/\">he describes how you can create \"tenant-scoped\" services</a> by creating a new \"tenant-scoped root\" container when a request arrives in an ASP.NET Core application, which ensures each tenant's services are isolated from one another. I won't describe the approach further here, as Michael does a great job of explaining how it works on his blog.</p> <h3 id=\"pooled-services\" class=\"heading-with-anchor\"><a href=\"#pooled-services\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Pooled services</a></h3> <p>Pooled services were mentioned by Woody as a way to reduce allocations in your application in order to improve performance. It was inspired by <a href=\"https://learn.microsoft.com/en-us/ef/core/performance/advanced-performance-topics?tabs=with-di%2Cexpression-api-with-constant#dbcontext-pooling\">EF Core's <code>DbContext</code> pooling feature</a> which can be useful in some high-performance scenarios. The <a href=\"https://github.com/dotnet/EntityFramework.Docs/tree/main/samples/core/Benchmarks/ContextPooling.cs\">single-threaded benchmark</a> performance comparing <code>DbContext</code> pooling with no-pooling shows that it can make a significant difference in some cases:</p> <table><thead><tr><th>Method</th><th style=\"text-align:right\">NumBlogs</th><th style=\"text-align:right\">Mean</th><th style=\"text-align:right\">Error</th><th style=\"text-align:right\">StdDev</th><th style=\"text-align:right\">Gen 0</th><th style=\"text-align:right\">Gen 1</th><th style=\"text-align:right\">Gen 2</th><th style=\"text-align:right\">Allocated</th></tr></thead><tbody><tr><td>WithoutContextPooling</td><td style=\"text-align:right\">1</td><td style=\"text-align:right\">701.6 us</td><td style=\"text-align:right\">26.62 us</td><td style=\"text-align:right\">78.48 us</td><td style=\"text-align:right\">11.7188</td><td style=\"text-align:right\">-</td><td style=\"text-align:right\">-</td><td style=\"text-align:right\">50.38 KB</td></tr><tr><td>WithContextPooling</td><td style=\"text-align:right\">1</td><td style=\"text-align:right\">350.1 us</td><td style=\"text-align:right\">6.80 us</td><td style=\"text-align:right\">14.64 us</td><td style=\"text-align:right\">0.9766</td><td style=\"text-align:right\">-</td><td style=\"text-align:right\">-</td><td style=\"text-align:right\">4.63 KB</td></tr></tbody></table> <p>These numbers look great, and faster is always better right? But it's worth being aware that you won't <em>always</em> see these improvements for pooling. Whenever you return a pooled object to the pool, it must \"reset\" its state, so that it's safe to reuse in another request. In some cases the time spent resetting an object may outweigh the savings made by not allocating a new object. There are also other subtle potential pitfalls.</p> <p>Nevertheless, having \"native\" support for using pooling in the DI container is an interesting idea, so I will show an approach to implementing this in my next post.</p> <h3 id=\"time-based-drifter-services\" class=\"heading-with-anchor\"><a href=\"#time-based-drifter-services\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Time-based (drifter) services</a></h3> <p>The final lifetime was described by Khalid as the \"drifter\" lifetime. He described it as somewhere between a scoped and transient lifetime—it's just in town for a short time before it moves on.</p> <p>More concretely, I thought of it as a time-based service, as it essentially \"lives\" for a fixed period of time. For a specific period of time (until the timeout expires), whenever you request an instance of this service, you get the same item, so it behaves a <em>bit</em> like a scoped service. However, once the timeout is exceeded, you get a new instance of the type.</p> <blockquote> <p>I struggle to think of a good example of when you would want to do this in practice. It sounds a <em>bit</em> like a cache, where you want to \"refresh\" the data (by getting a new instance) after a given period of time. But I would be more likely to implement that as a singleton type, where the data is refreshed in a background thread. 🤷‍♂️</p> </blockquote> <p>Just for fun, I wondered what it would be like to expose this time-based lifetime as a concept in the .NET DI container. As it turns out, creating a naïve implementation is pretty easy, but there are a whole raft of subtleties to making something practical and safe!</p> <h2 id=\"implementing-a-simple-time-based-lifetime-service\" class=\"heading-with-anchor\"><a href=\"#implementing-a-simple-time-based-lifetime-service\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Implementing a simple time-based lifetime service</a></h2> <p>To reiterate, I decided that a useful time-based lifetime service should have the following characteristics:</p> <ul><li>All requests within a given scope should use the same instance of the service (so it behaves similarly to a scoped lifetime service).</li> <li>After the service timeout expires, a new instance of the type should be created when requested.</li></ul> <p>The net result is that instances of time-based lifetime services may or may not be reused across requests.</p> <h3 id=\"implementing-timeddependencyfactoryt\" class=\"heading-with-anchor\"><a href=\"#implementing-timeddependencyfactoryt\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Implementing <code>TimedDependencyFactory&lt;T&gt;</code></a></h3> <p>To implement the lifetime, I used a factory pattern. The factory is responsible for creating new instances of the dependency, but also for caching the current instance for as long as the defined time lifespan.</p> <blockquote> <p>The naïve implementation of the factory is very simple, but to make the factory thread safe and ensure we don't create more than one instance of the dependency at a time, we can use a few interesting approaches.</p> </blockquote> <p>Another point to note is that I chose to use <a href=\"/exploring-the-dotnet-8-preview-avoiding-flaky-tests-with-timeprovider-and-itimer/\">the <code>TimeProvider</code> abstraction</a> introduced in .NET 8, which makes it possible to test the behaviour of the factory while avoiding flaky tests. The factory is shown below, and is extensively annotated to explain its behaviour.</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TimedDependencyFactory<span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// TimeProvider can get the current time, but is also testable</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\">TimeProvider</span> _time<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// How long should the dependency be kept around</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\">TimeSpan</span> _lifetime<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// A factory function for creating a new instance</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\">Func<span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">&gt;</span></span> _factory<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// The current cached instance, as a pair of Lazy&lt;T&gt; and the time the instance is valid till</span>\n    <span class=\"token comment\">// We can't use a ValueTuple here, because we need reference semantics later</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Tuple<span class=\"token punctuation\">&lt;</span>Lazy<span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">&gt;</span><span class=\"token punctuation\">,</span> DateTimeOffset<span class=\"token punctuation\">&gt;</span><span class=\"token punctuation\">?</span></span> _instance<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token function\">TimedDependencyFactory</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TimeProvider</span> time<span class=\"token punctuation\">,</span> <span class=\"token class-name\">TimeSpan</span> lifetime<span class=\"token punctuation\">,</span> <span class=\"token class-name\">IServiceProvider</span> serviceProvider<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        _lifetime <span class=\"token operator\">=</span> lifetime<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// ActivatorUtilities will pull any dependencies in the T constructor</span>\n        <span class=\"token comment\">// from the IServiceProvider. Only Singleton or Transient dependencies</span>\n        <span class=\"token comment\">// make sense for injecting into the timed-dependency T</span>\n        _factory <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> ActivatorUtilities<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">CreateInstance</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">&gt;</span></span></span><span class=\"token punctuation\">(</span>serviceProvider<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        _time <span class=\"token operator\">=</span> time<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/// &lt;summary&gt;</span>\n    <span class=\"token comment\">/// Gets or creates an instance of &lt;typeparamref name=\"T\" /&gt;</span>\n    <span class=\"token comment\">/// &lt;/summary&gt;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">T</span> <span class=\"token function\">GetInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// Store the current instance in a local variable</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> instance <span class=\"token operator\">=</span> _instance<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// Fetch the current time using the time provider</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> now <span class=\"token operator\">=</span> _time<span class=\"token punctuation\">.</span><span class=\"token function\">GetUtcNow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>instance <span class=\"token keyword\">is</span> <span class=\"token keyword\">not</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> now <span class=\"token operator\">&lt;</span> instance<span class=\"token punctuation\">.</span>Item2<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// The current item is still valid, so return it</span>\n            <span class=\"token keyword\">return</span> instance<span class=\"token punctuation\">.</span>Item1<span class=\"token punctuation\">.</span>Value<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">// We either don't have an instance yet, or the existing one</span>\n        <span class=\"token comment\">// has expired, so create a new instance of the Lazy,</span>\n        <span class=\"token comment\">//  and calculate the expiry date</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> newInstance <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Tuple<span class=\"token punctuation\">&lt;</span>Lazy<span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">&gt;</span><span class=\"token punctuation\">,</span> DateTimeOffset<span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span>\n            <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Lazy<span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span>_factory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            now<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>_lifetime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// Atomically replace the previous instance with the new one.</span>\n        <span class=\"token comment\">// To make this thread safe, we use CompareExchange, which returns</span>\n        <span class=\"token comment\">// the original value found in _instance.</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> previous <span class=\"token operator\">=</span> Interlocked<span class=\"token punctuation\">.</span><span class=\"token function\">CompareExchange</span><span class=\"token punctuation\">(</span>\n            <span class=\"token keyword\">ref</span> _instance<span class=\"token punctuation\">,</span>\n            newInstance<span class=\"token punctuation\">,</span>\n            instance<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// We compare the value that was stored in previous with</span>\n        <span class=\"token comment\">// the instance we originally fetched, to check whether</span>\n        <span class=\"token comment\">// a different thread beat us to the update</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">ReferenceEquals</span><span class=\"token punctuation\">(</span>previous<span class=\"token punctuation\">,</span> instance<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// We replaced the value we expected, so return</span>\n            <span class=\"token comment\">// our new instance by executing the Lazy&lt;T&gt;</span>\n            <span class=\"token keyword\">return</span> newInstance<span class=\"token punctuation\">.</span>Item1<span class=\"token punctuation\">.</span>Value<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">// A different thread replaced the current instance _before_ we did</span>\n        <span class=\"token comment\">// so discard our current instance and try again. We could use the</span>\n        <span class=\"token comment\">// previous value directly, and assume it's valid, but it's easier/safer</span>\n        <span class=\"token comment\">// to simply recurrsively call this method again. Unless we have tiny</span>\n        <span class=\"token comment\">// lifetimes, we don't expect more than one iteration here.</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">GetInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>The most interesting part of the above code is the effort required to make it thread safe. Broadly speaking this is achieved by</p> <ul><li>Copying the <code>_instance</code> field to a local <code>instance</code> value.</li> <li>Using <code>Interlocked.CompareExchange()</code> to atomically swap-out a new value. This ensures that if a different thread is racing with ours, and both create a new instance of the stored value, both threads will be consistent about which instance they use.</li> <li>Using <code>Lazy&lt;T&gt;</code> with a factory instead of <code>T</code> to ensure we don't create more than one instance of the actual dependency <code>T</code> at a time.</li></ul> <p>I haven't fully tested this for concurrency issues, but I <em>think</em> it covers our bases. Let me know in the comments if you see any issues!</p> <h3 id=\"using-an-alternative-lock-based-implementation\" class=\"heading-with-anchor\"><a href=\"#using-an-alternative-lock-based-implementation\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Using an alternative <code>Lock</code>-based implementation</a></h3> <p>I used the <code>Lazy&lt;T&gt;</code> approach in the previous section as it provides an interesting lock-free approach*, similar to <a href=\"/making-getoradd-on-concurrentdictionary-thread-safe-using-lazy/\">the approach ASP.NET Core uses with <code>ConcurrentDictionary.GetOrAdd()</code></a> to avoid creating multiple instance of the dependency <code>T</code>.</p> <blockquote> <p>*This is a bit of a lie, because the <code>Lazy&lt;T&gt;</code> uses locking behind the scenes 🙈</p> </blockquote> <p>However, given that I haven't measured the performance characteristics, jumping straight to the <code>Lazy&lt;T&gt;</code> approach above is probably overkill. Arguably, a simpler version that simply uses <code>lock(_lock)</code> is easier to understand, and may actually perform better in many circumstances. We would likely need to measure our actual application to understand how the characteristics of each approach impacts performance.</p> <p>The following code shows how the implementation could change to use <code>lock()</code> instead. I've highlighted the differences in this implementation with comments.</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TimedDependencyFactory<span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\">TimeProvider</span> _time<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\">TimeSpan</span> _lifetime<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\">Func<span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">&gt;</span></span> _factory<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\">Lock</span> _lock <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// The _instance no longer needs to use Lazy&lt;T&gt;, just a T</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Tuple<span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">,</span> DateTimeOffset<span class=\"token punctuation\">&gt;</span><span class=\"token punctuation\">?</span></span> _instance<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token function\">TimedDependencyFactory</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TimeProvider</span> time<span class=\"token punctuation\">,</span> <span class=\"token class-name\">TimeSpan</span> lifetime<span class=\"token punctuation\">,</span> <span class=\"token class-name\">IServiceProvider</span> serviceProvider<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        _lifetime <span class=\"token operator\">=</span> lifetime<span class=\"token punctuation\">;</span>\n        _factory <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> ActivatorUtilities<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">CreateInstance</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">&gt;</span></span></span><span class=\"token punctuation\">(</span>serviceProvider<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        _time <span class=\"token operator\">=</span> time<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">T</span> <span class=\"token function\">GetInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> instance <span class=\"token operator\">=</span> _instance<span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> now <span class=\"token operator\">=</span> _time<span class=\"token punctuation\">.</span><span class=\"token function\">GetUtcNow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>instance <span class=\"token keyword\">is</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> now <span class=\"token operator\">&gt;</span> instance<span class=\"token punctuation\">.</span>Item2<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// The current value isn't valid, so create a new one</span>\n            <span class=\"token comment\">// using a _lock_ here ensures that no other thread will change this value</span>\n            <span class=\"token keyword\">lock</span> <span class=\"token punctuation\">(</span>_lock<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token comment\">// Check that another thread didn't just create a new instance</span>\n                <span class=\"token comment\">// before we entered the lock. If it did, then the new instance</span>\n                <span class=\"token comment\">// should be valid.</span>\n                instance <span class=\"token operator\">=</span> _instance<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>instance <span class=\"token keyword\">is</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> now <span class=\"token operator\">&gt;</span> instance<span class=\"token punctuation\">.</span>Item2<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">{</span>\n                    <span class=\"token comment\">// Create a new tuple, invoking the factory,</span>\n                    <span class=\"token comment\">// and calculate the expiry date</span>\n                    instance <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Tuple<span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">,</span> DateTimeOffset<span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span>\n                        <span class=\"token function\">_factory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> now<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>_lifetime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    _instance <span class=\"token operator\">=</span> instance<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> instance<span class=\"token punctuation\">.</span>Item1<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>The <code>GetInstance()</code> implementation in this case is much simpler. We simply check if the instance is valid. If it's not, we take a <code>lock</code> and create a new one instead of using a <code>Lazy&lt;T&gt;</code>.</p> <h3 id=\"creating-the-addtimed-extension-methods\" class=\"heading-with-anchor\"><a href=\"#creating-the-addtimed-extension-methods\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Creating the <code>AddTimed&lt;&gt;</code> extension methods</a></h3> <p>Now that we have a factory (whichever we choose), we can use it to configure our DI container. First we'll create a helper extension method that takes a type parameter, <code>T</code>, and a <code>TimeSpan</code> indicating the minimum lifetime of the dependency:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TimedScopeExtensions</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">IServiceCollection</span> <span class=\"token generic-method\"><span class=\"token function\">AddTimed</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">&gt;</span></span></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token class-name\">IServiceCollection</span> services<span class=\"token punctuation\">,</span> <span class=\"token class-name\">TimeSpan</span> lifetime<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">where</span> <span class=\"token class-name\">T</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token keyword\">class</span></span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// Add the factory as a singleton, using the system TimeProvider implementation</span>\n        services<span class=\"token punctuation\">.</span><span class=\"token function\">AddSingleton</span><span class=\"token punctuation\">(</span>provider <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">TimedDependencyFactory<span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span>\n            TimeProvider<span class=\"token punctuation\">.</span>System<span class=\"token punctuation\">,</span> lifetime<span class=\"token punctuation\">,</span> provider<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// Add the service itself as a dependency, delegating to the factory</span>\n        services<span class=\"token punctuation\">.</span><span class=\"token function\">AddScoped</span><span class=\"token punctuation\">(</span>provider <span class=\"token operator\">=&gt;</span> provider\n            <span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">GetRequiredService</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>TimedDependencyFactory<span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">&gt;</span><span class=\"token punctuation\">&gt;</span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">GetInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">return</span> services<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>By using <code>AddScoped</code> for the dependency in the above extension we ensure that we always use the same instance for a duration of a request. Remember though, that this means we're specifying the <em>minimum</em> lifetime of the dependency. We check whether the dependency is still valid when it's first requested in a request, and it lives for the duration of the request, even if the timespan elapses.</p> <h3 id=\"testing-out-the-timed-dependencies\" class=\"heading-with-anchor\"><a href=\"#testing-out-the-timed-dependencies\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Testing out the timed dependencies</a></h3> <p>Now that we have our implementation, we can take it for a test drive. I created a simple ASP.NET Core application with an endpoint that takes a dependency on <code>TimedService</code>. Each instance of this service is given a unique ID, and we simply return the ID from the endpoint</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> builder <span class=\"token operator\">=</span> WebApplication<span class=\"token punctuation\">.</span><span class=\"token function\">CreateBuilder</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Add our service with a 5s lifetime</span>\nbuilder<span class=\"token punctuation\">.</span>Services<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">AddTimed</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>TimedService<span class=\"token punctuation\">&gt;</span></span></span><span class=\"token punctuation\">(</span><span class=\"token named-parameter punctuation\">lifetime</span><span class=\"token punctuation\">:</span> TimeSpan<span class=\"token punctuation\">.</span><span class=\"token function\">FromSeconds</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> app <span class=\"token operator\">=</span> builder<span class=\"token punctuation\">.</span><span class=\"token function\">Build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">MapGet</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">TimedService</span> service<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> service<span class=\"token punctuation\">.</span>GetValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">Run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TimedService</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> _id <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// Each new instance of TimedService gets a new value</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">int</span></span> GetValue <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> Interlocked<span class=\"token punctuation\">.</span><span class=\"token function\">Increment</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">ref</span> _id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>Hitting the <code>/</code> endpoint returns the value <code>1</code> for all requests for 5s, after which it returns <code>2</code>, and so on. It works!</p> <blockquote> <p>This test doesn't demonstrate that all instances of <code>TimedService</code> <em>within</em> a request are the same instance, so you'll just have to trust me on that one!</p> </blockquote> <p>As I mentioned before, I'm not sure exactly what the use cases would be here — it behaves a <em>bit</em> like a cache, but not quite. Nevertheless, I can think of a few limitations…</p> <h3 id=\"limitations-of-the-time-based-service-implementation\" class=\"heading-with-anchor\"><a href=\"#limitations-of-the-time-based-service-implementation\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Limitations of the time-based service implementation</a></h3> <p>One potentially significant issue is that the implementation shown in this post doesn't handle the case where <code>T</code> is an <code>IDisposable</code>.</p> <p>This is actually an interesting issue that's surprisingly tricky to solve. The problem is that the DI container automatically calls <code>Dispose</code> on any <code>IDisposable</code> instances it returns when a scope ends. This is a problem for us, because we don't <em>want</em> to dispose the dependency until <em>after</em> we replace it.</p> <blockquote> <p>I spent quite a long time trying to solve this issue, adding layers of \"lease\" objects and various approaches, but in all cases I couldn't get rid of the potential race conditions. In the end I realised I was spending far too much time on it and gave up 😅</p> </blockquote> <p>A different point to consider is that we can still have <em>multiple</em> instances of a service <code>T</code> alive at one time. I went to some effort to avoid creating multiple instances when the timeout expires and you create a replacement instance, either by using the <code>Lazy&lt;T&gt;</code> or a <code>lock()</code>. However, that <em>doesn't</em> mean that there's only ever one \"active\" instance of the service.</p> <p>For example, one slow request may be using instance A, during which time, the timeout expires. A second request is received, and as the timeout has expired, the factory creates a new instance, instance B. While the original request is executing, both instances A and B are in active use.</p> <p><img src=\"/content/images/2025/multiple_instances2.svg\" alt=\"Demonstrating the problem that multiple instance may be active at the same time\"></p> <p>If those issues aren't a problem for you, then you <em>should</em> be able to use the above implementation, but as I don't have a great handle on a real-life use case, I'm not sure whether these limitations are likely to be an issue or not!</p> <h2 id=\"summary\" class=\"heading-with-anchor\"><a href=\"#summary\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Summary</a></h2> <p>In this post I provided a brief introduction to the lifetimes available in the <em>Microsoft.Extensions.DependencyInjection</em> abstraction used in ASP.NET Core. I then briefly described some additional hypothetical lifetimes that were discussed by Khalid, Maarten, and Woody on <a href=\"https://www.breakpoint.show/podcast/episode-036-episode-of-a-lifetime/\">The Breakpoint Show</a>: tenant-scoped, pooling, and time-based services.</p> <p>Finally, I showed two variations of approaches you could use to implement the time-based services. However, both implementations had a large flaw: you can't use this approach with <code>IDisposable</code> services, as the service may be disposed while it's still in use in a different request. In the next post I show an example implementation for the pooled lifetime instead.</p> ",
    "sanitized": "This is the first of two posts, and is largely a result of being nerd-sniped while listening to an episode of The Breakpoint Show which discussed dependency injection (DI) and the possible service lifetimes available. At various points Khalid, Maarten, and Woody discussed hypothetical \"additional\" lifetimes. This got me wondering how feasible it would be to create practical versions of those lifetimes. In this post I first briefly describe the standard lifetimes available in the .NET DI container. I then briefly describe the three hypothetical lifetimes described in the podcast. Finally, I show how you could implement one of these lifetimes in practice. In the next post I show a possible implementation for the remaining lifetime. Service lifetimes available in the .NET Core DI container Before we look at these additional hypothetical service scopes, let's make sure we understand the existing lifetime scopes that are available in .NET Core.  This post isn't meant to be a full introduction to dependency injection in .NET Core. If you'd like to learn more, the Microsoft documentation contains an introduction to dependency injection. Alternatively, chapters 8 and 9 of my book contain a longer introduction to dependency injection in general, as well as the standard DI lifetimes.  When you register services in the .NET Core DI container, you choose one of three different lifetimes. Singleton Scoped Transient The lifetime you specify controls how and when the DI container chooses to create a new instance of a given service, and when it instead returns an already-existing instance of the service. Singleton services Singleton is the simplest lifetime you can give a service. Singleton services are only ever created once. When you register a service as a singleton you can either explicitly provide the instance the DI container should always return, or you can tell the DI container to create an instance, but then always reuse it. var builder = WebApplication.CreateBuilder(args);\n\n// Providing an explicit instance of SingletonClass1 to use\nbuilder.Services.AddSingleton(new SingletonClass1());\n\n// Or, allowing the DI container to create the SingletonClass2\nbuilder.Services.AddSingleton<SingletonClass2>();\n\n// Or, providing a \"factory function\" for the the container to use to create the instance\nbuilder.Services.AddSingleton(serviceProvider => new SingletonClass3());\n In the first registration method above, the instance of SingletonClass1 is explicitly provided to the DI container. The container then uses this instance whenever it needs an instance of the type, and will not create a new version itself. In the second registration method shown above, the DI container is responsible for creating the instance of SingletonClass2. The first time the SingletonClass2 is requested, the DI container creates an instance. It then reuses the same instance every time it needs an instance of the type. The final method shown above works pretty much the same as the second method, the only difference is that you're providing an explicit \"factory\" lambda method which the container invokes to create an instance of SingletonClass3. The key point is that in all cases, the container creates a maximum of a single instance, and this same instance is used to fulfil any requests for the type. Scoped services Scoped services are arguably the most confusing of the service lifetimes. This is primarily due to the introduction of the concept of a new concept: scope. I think the easiest way to understand the scope concept is to see it in action: var builder = WebApplication.CreateBuilder(args);\n\n// Allowing the DI container to create the ScopedClass\nbuilder.Services.AddScoped<ScopedClass>();\n\n// Alternatively, providing a \"factory function\" for the the container to use to create the instance\nbuilder.Services.AddScoped(serviceProvider => new ScopedClass2());\n\nvar app = builder.Build();\n\n// Hold a reference to the object _outside_ of the scope, for demo purposes only\n// WARNING: you shouldn't do this normally, as the service is disposed when the scope ends\nScopedClass service;\n\n// create a scope\nusing (var scope = app.Services.CreateScope())\n{\n    // Retreive the first instance\n    service = scope.ServiceProvider.GetRequiredService<ScopedClass>(); \n\n    // Request another instance of the ScopedClass\n    var other = scope.ServiceProvider.GetRequiredService<ScopedClass>();\n\n    // The DI container returns the same instance in both cases\n    Console.WriteLine(service == other); // true\n}\n\nusing (var scope = app.Services.CreateScope())\n{\n    // In a different  scope, the DI container returns a _different_ instance\n    var other = scope.ServiceProvider.GetRequiredService<ScopedClass>();\n    Console.WriteLine(service == other); // false\n}\n The key point is that within a scope, the DI container returns the same instance of ScopedClass every time it's requested. But for different scopes, the DI container returns a different instance of ScopedClass. In the code above I explicitly created the scope, but if you're using ASP.NET Core, then the scope is typically created for you automatically by the framework, and lasts for a single request. That means that all usages of the scoped ScopedClass service within a given request return the same instance of a ScopedClass, but you get a different instance of ScopedClass when you're in different requests. Transient services Transient services are again relatively simple: every request for a transient service returns a new instance. var builder = WebApplication.CreateBuilder(args);\n\n// Allowing the DI container to create the TransientClass\nbuilder.Services.AddTransient<TransientClass>();\n\n// Alternatively, providing a \"factory function\" for the the container to use to create the instance\nbuilder.Services.AddTransient(serviceProvider => new TransientClass2());\n\nvar app = builder.Build();\n\n// create a scope\nusing (var scope = app.Services.CreateScope())\n{\n    // Request the first instance\n    var service = scope.ServiceProvider.GetRequiredService<TransientClass>(); \n\n    // Request another instance of the TransientClass\n    var other = scope.ServiceProvider.GetRequiredService<TransientClass>();\n\n    // Even inside the same scope, the instances are different\n    Console.WriteLine(service == other); // false\n}\n Every time you request a TransientService instance, even if you're in the same request, the DI container creates a new instance of the TransientService class. That covers the standard scopes supported by the Microsoft.Extensions.DependencyInjection libraries used by ASP.NET Core . In the next section I describe some of the \"hypothetical\" scopes that were discussed on The Breakpoint Show. The Breakpoint Show's additional lifetime scopes In episode 36 of The Breakpoint Show, Khalid, Maarten, and Woody discuss the three lifetimes I described above, providing some examples of when you might choose each one, problems to watch out for, and other things to consider. Throughout the show, they also discussed the desire for three \"additional\" types of services, which didn't quite fit into the standard lifetimes: Tenant-scoped services Pooled services Time-based (drifter) services In the following sections I provide a brief high-level overview of these theoretical scopes. Tenant-scoped services Tenant-scoped services were mentioned by Maarten as a practical existing example, which he has used in real multi-tenant applications. They are useful when you want some services to be \"singletons\", but you don't want them to be shared between the whole application. Rather, you want them to be \"singletons for a given tenant\". As you might expect, multi-tenant applications are relatively common, so there are various packages you can use to help configure singleton services in your application. I wrote about SaasKit back in 2016, but that package hasn't seen many updates since then, and there are some modern alternatives now. One of these alternatives is explained by Michael McKenna in his blog series. In particular he describes how you can create \"tenant-scoped\" services by creating a new \"tenant-scoped root\" container when a request arrives in an ASP.NET Core application, which ensures each tenant's services are isolated from one another. I won't describe the approach further here, as Michael does a great job of explaining how it works on his blog. Pooled services Pooled services were mentioned by Woody as a way to reduce allocations in your application in order to improve performance. It was inspired by EF Core's DbContext pooling feature which can be useful in some high-performance scenarios. The single-threaded benchmark performance comparing DbContext pooling with no-pooling shows that it can make a significant difference in some cases: MethodNumBlogsMeanErrorStdDevGen 0Gen 1Gen 2AllocatedWithoutContextPooling1701.6 us26.62 us78.48 us11.7188--50.38 KBWithContextPooling1350.1 us6.80 us14.64 us0.9766--4.63 KB These numbers look great, and faster is always better right? But it's worth being aware that you won't always see these improvements for pooling. Whenever you return a pooled object to the pool, it must \"reset\" its state, so that it's safe to reuse in another request. In some cases the time spent resetting an object may outweigh the savings made by not allocating a new object. There are also other subtle potential pitfalls. Nevertheless, having \"native\" support for using pooling in the DI container is an interesting idea, so I will show an approach to implementing this in my next post. Time-based (drifter) services The final lifetime was described by Khalid as the \"drifter\" lifetime. He described it as somewhere between a scoped and transient lifetime—it's just in town for a short time before it moves on. More concretely, I thought of it as a time-based service, as it essentially \"lives\" for a fixed period of time. For a specific period of time (until the timeout expires), whenever you request an instance of this service, you get the same item, so it behaves a bit like a scoped service. However, once the timeout is exceeded, you get a new instance of the type.  I struggle to think of a good example of when you would want to do this in practice. It sounds a bit like a cache, where you want to \"refresh\" the data (by getting a new instance) after a given period of time. But I would be more likely to implement that as a singleton type, where the data is refreshed in a background thread. 🤷‍♂️  Just for fun, I wondered what it would be like to expose this time-based lifetime as a concept in the .NET DI container. As it turns out, creating a naïve implementation is pretty easy, but there are a whole raft of subtleties to making something practical and safe! Implementing a simple time-based lifetime service To reiterate, I decided that a useful time-based lifetime service should have the following characteristics: All requests within a given scope should use the same instance of the service (so it behaves similarly to a scoped lifetime service). After the service timeout expires, a new instance of the type should be created when requested. The net result is that instances of time-based lifetime services may or may not be reused across requests. Implementing TimedDependencyFactory<T> To implement the lifetime, I used a factory pattern. The factory is responsible for creating new instances of the dependency, but also for caching the current instance for as long as the defined time lifespan.  The naïve implementation of the factory is very simple, but to make the factory thread safe and ensure we don't create more than one instance of the dependency at a time, we can use a few interesting approaches.  Another point to note is that I chose to use the TimeProvider abstraction introduced in .NET 8, which makes it possible to test the behaviour of the factory while avoiding flaky tests. The factory is shown below, and is extensively annotated to explain its behaviour. private class TimedDependencyFactory<T>\n{\n    // TimeProvider can get the current time, but is also testable\n    private readonly TimeProvider _time;\n    // How long should the dependency be kept around\n    private readonly TimeSpan _lifetime;\n    // A factory function for creating a new instance\n    private readonly Func<T> _factory;\n\n    // The current cached instance, as a pair of Lazy<T> and the time the instance is valid till\n    // We can't use a ValueTuple here, because we need reference semantics later\n    private Tuple<Lazy<T>, DateTimeOffset>? _instance;\n\n    public TimedDependencyFactory(TimeProvider time, TimeSpan lifetime, IServiceProvider serviceProvider)\n    {\n        _lifetime = lifetime;\n        // ActivatorUtilities will pull any dependencies in the T constructor\n        // from the IServiceProvider. Only Singleton or Transient dependencies\n        // make sense for injecting into the timed-dependency T\n        _factory = () => ActivatorUtilities.CreateInstance<T>(serviceProvider);\n        _time = time;\n    }\n\n    /// <summary>\n    /// Gets or creates an instance of <typeparamref name=\"T\" />\n    /// </summary>\n    public T GetInstance()\n    {\n        // Store the current instance in a local variable\n        var instance = _instance;\n        // Fetch the current time using the time provider\n        var now = _time.GetUtcNow();\n        if (instance is not null && now < instance.Item2)\n        {\n            // The current item is still valid, so return it\n            return instance.Item1.Value;\n        }\n\n        // We either don't have an instance yet, or the existing one\n        // has expired, so create a new instance of the Lazy,\n        //  and calculate the expiry date\n        var newInstance = new Tuple<Lazy<T>, DateTimeOffset>(\n            new Lazy<T>(_factory),\n            now.Add(_lifetime));\n\n        // Atomically replace the previous instance with the new one.\n        // To make this thread safe, we use CompareExchange, which returns\n        // the original value found in _instance.\n        var previous = Interlocked.CompareExchange(\n            ref _instance,\n            newInstance,\n            instance);\n\n        // We compare the value that was stored in previous with\n        // the instance we originally fetched, to check whether\n        // a different thread beat us to the update\n        if (ReferenceEquals(previous, instance))\n        {\n            // We replaced the value we expected, so return\n            // our new instance by executing the Lazy<T>\n            return newInstance.Item1.Value;\n        }\n\n        // A different thread replaced the current instance _before_ we did\n        // so discard our current instance and try again. We could use the\n        // previous value directly, and assume it's valid, but it's easier/safer\n        // to simply recurrsively call this method again. Unless we have tiny\n        // lifetimes, we don't expect more than one iteration here.\n        return GetInstance();\n    }\n}\n The most interesting part of the above code is the effort required to make it thread safe. Broadly speaking this is achieved by Copying the _instance field to a local instance value. Using Interlocked.CompareExchange() to atomically swap-out a new value. This ensures that if a different thread is racing with ours, and both create a new instance of the stored value, both threads will be consistent about which instance they use. Using Lazy<T> with a factory instead of T to ensure we don't create more than one instance of the actual dependency T at a time. I haven't fully tested this for concurrency issues, but I think it covers our bases. Let me know in the comments if you see any issues! Using an alternative Lock-based implementation I used the Lazy<T> approach in the previous section as it provides an interesting lock-free approach*, similar to the approach ASP.NET Core uses with ConcurrentDictionary.GetOrAdd() to avoid creating multiple instance of the dependency T.  *This is a bit of a lie, because the Lazy<T> uses locking behind the scenes 🙈  However, given that I haven't measured the performance characteristics, jumping straight to the Lazy<T> approach above is probably overkill. Arguably, a simpler version that simply uses lock(_lock) is easier to understand, and may actually perform better in many circumstances. We would likely need to measure our actual application to understand how the characteristics of each approach impacts performance. The following code shows how the implementation could change to use lock() instead. I've highlighted the differences in this implementation with comments. private class TimedDependencyFactory<T>\n{\n    private readonly TimeProvider _time;\n    private readonly TimeSpan _lifetime;\n    private readonly Func<T> _factory;\n    private readonly Lock _lock = new();\n    // The _instance no longer needs to use Lazy<T>, just a T\n    private Tuple<T, DateTimeOffset>? _instance;\n\n    public TimedDependencyFactory(TimeProvider time, TimeSpan lifetime, IServiceProvider serviceProvider)\n    {\n        _lifetime = lifetime;\n        _factory = () => ActivatorUtilities.CreateInstance<T>(serviceProvider);\n        _time = time;\n    }\n\n    public T GetInstance()\n    {\n        var instance = _instance;\n        var now = _time.GetUtcNow();\n        if (instance is null || now > instance.Item2)\n        {\n            // The current value isn't valid, so create a new one\n            // using a _lock_ here ensures that no other thread will change this value\n            lock (_lock)\n            {\n                // Check that another thread didn't just create a new instance\n                // before we entered the lock. If it did, then the new instance\n                // should be valid.\n                instance = _instance;\n                if (instance is null || now > instance.Item2)\n                {\n                    // Create a new tuple, invoking the factory,\n                    // and calculate the expiry date\n                    instance = new Tuple<T, DateTimeOffset>(\n                        _factory(), now.Add(_lifetime));\n                    _instance = instance;\n                }\n            }\n        }\n\n        return instance.Item1;\n    }\n}\n The GetInstance() implementation in this case is much simpler. We simply check if the instance is valid. If it's not, we take a lock and create a new one instead of using a Lazy<T>. Creating the AddTimed<> extension methods Now that we have a factory (whichever we choose), we can use it to configure our DI container. First we'll create a helper extension method that takes a type parameter, T, and a TimeSpan indicating the minimum lifetime of the dependency: public static class TimedScopeExtensions\n{\n    public static IServiceCollection AddTimed<T>(this IServiceCollection services, TimeSpan lifetime)\n        where T : class\n    {\n        // Add the factory as a singleton, using the system TimeProvider implementation\n        services.AddSingleton(provider => new TimedDependencyFactory<T>(\n            TimeProvider.System, lifetime, provider));\n\n        // Add the service itself as a dependency, delegating to the factory\n        services.AddScoped(provider => provider\n            .GetRequiredService<TimedDependencyFactory<T>>()\n            .GetInstance());\n\n        return services;\n    }\n}\n By using AddScoped for the dependency in the above extension we ensure that we always use the same instance for a duration of a request. Remember though, that this means we're specifying the minimum lifetime of the dependency. We check whether the dependency is still valid when it's first requested in a request, and it lives for the duration of the request, even if the timespan elapses. Testing out the timed dependencies Now that we have our implementation, we can take it for a test drive. I created a simple ASP.NET Core application with an endpoint that takes a dependency on TimedService. Each instance of this service is given a unique ID, and we simply return the ID from the endpoint var builder = WebApplication.CreateBuilder(args);\n\n// Add our service with a 5s lifetime\nbuilder.Services.AddTimed<TimedService>(lifetime: TimeSpan.FromSeconds(5));\n\nvar app = builder.Build();\napp.MapGet(\"/\", (TimedService service) => service.GetValue);\napp.Run();\n\npublic class TimedService\n{\n    private static int _id = 0;\n    // Each new instance of TimedService gets a new value\n    public int GetValue { get; } = Interlocked.Increment(ref _id);\n}\n Hitting the / endpoint returns the value 1 for all requests for 5s, after which it returns 2, and so on. It works!  This test doesn't demonstrate that all instances of TimedService within a request are the same instance, so you'll just have to trust me on that one!  As I mentioned before, I'm not sure exactly what the use cases would be here — it behaves a bit like a cache, but not quite. Nevertheless, I can think of a few limitations… Limitations of the time-based service implementation One potentially significant issue is that the implementation shown in this post doesn't handle the case where T is an IDisposable. This is actually an interesting issue that's surprisingly tricky to solve. The problem is that the DI container automatically calls Dispose on any IDisposable instances it returns when a scope ends. This is a problem for us, because we don't want to dispose the dependency until after we replace it.  I spent quite a long time trying to solve this issue, adding layers of \"lease\" objects and various approaches, but in all cases I couldn't get rid of the potential race conditions. In the end I realised I was spending far too much time on it and gave up 😅  A different point to consider is that we can still have multiple instances of a service T alive at one time. I went to some effort to avoid creating multiple instances when the timeout expires and you create a replacement instance, either by using the Lazy<T> or a lock(). However, that doesn't mean that there's only ever one \"active\" instance of the service. For example, one slow request may be using instance A, during which time, the timeout expires. A second request is received, and as the timeout has expired, the factory creates a new instance, instance B. While the original request is executing, both instances A and B are in active use.  If those issues aren't a problem for you, then you should be able to use the above implementation, but as I don't have a great handle on a real-life use case, I'm not sure whether these limitations are likely to be an issue or not! Summary In this post I provided a brief introduction to the lifetimes available in the Microsoft.Extensions.DependencyInjection abstraction used in ASP.NET Core. I then briefly described some additional hypothetical lifetimes that were discussed by Khalid, Maarten, and Woody on The Breakpoint Show: tenant-scoped, pooling, and time-based services. Finally, I showed two variations of approaches you could use to implement the time-based services. However, both implementations had a large flaw: you can't use this approach with IDisposable services, as the service may be disposed while it's still in use in a different request. In the next post I show an example implementation for the pooled lifetime instead."
  },
  {
    "itemId": "https://andrewlock.net/netescapades-aspnetcore-securityheaders-1-0-0-released/",
    "raw": "<img src=\"https://andrewlock.net/content/images/2024/securityheaders_banner.png\" /><p>This post is to announce that I have finally released the 1.0.0 version of the <a href=\"https://github.com/andrewlock/NetEscapades.AspNetCore.SecurityHeaders\"><em>NetEscapades.AspNetCore.SecurityHeaders</em></a> project. This version addresses some longstanding requests for extra functionality, updates the supported target frameworks, and obsoletes some old behaviours.</p> <blockquote> <p>Many of these changes were introduced in preview versions, the <code>1.0.0</code> includes only minimal changes compared to the previous <code>1.0.0-preview.4</code> package.</p> </blockquote> <p>In this post I provide a quick overview of the library, and then discuss the major changes made in this release, compared to version 0.24.0.</p> <ul><li><a href=\"#what-are-security-headers-\">What are security headers?</a></li> <li><a href=\"#adding-security-headers-to-your-app\">Adding security headers to your app</a></li> <li><a href=\"#major-changes-in-1-0-0\">Major changes in <code>1.0.0</code></a> <ul><li><a href=\"#changes-to-the-supported-frameworks\">Changes to the supported frameworks</a></li> <li><a href=\"#changes-to-headers\">Changes to headers</a> <ul><li><a href=\"#changes-to-the-default-headers\">Changes to the default headers</a></li> <li><a href=\"#x-xss-protection-1-mode-block-is-no-longer-recommended\"><code>X-XSS-Protection=1; mode-block</code> is no longer recommended</a></li> <li><a href=\"#expect-ct-is-no-longer-recommended\"><code>Expect-CT</code> is no longer recommended</a></li> <li><a href=\"#new-permisionspolicybuilder-adddefaultsecuredirectives-method\">New <code>PermisionsPolicyBuilder.AddDefaultSecureDirectives()</code> method</a></li> <li><a href=\"#new-adddefaultapisecurityheaders-method\">New <code>AddDefaultApiSecurityHeaders()</code> method</a></li> <li><a href=\"#new-support-for-trusted-types\">New support for Trusted Types</a></li> <li><a href=\"#feature-policy-is-marked-obsolete\"><code>Feature-Policy</code> is marked obsolete</a></li></ul> </li> <li><a href=\"#applying-different-headers-to-some-endpoints\">Applying different headers to some endpoints</a></li> <li><a href=\"#customizing-the-headers-completely\">Customizing the headers completely</a></li> <li><a href=\"#document-headers-functionality-has-been-removed\">\"Document headers\" functionality has been removed</a></li> <li><a href=\"#changes-to-nonce-generation\">Changes to nonce generation</a></li> <li><a href=\"#updates-to-build-provenance\">Updates to build provenance</a></li></ul> </li> <li><a href=\"#summary\">Summary</a></li></ul> <h2 id=\"what-are-security-headers-\" class=\"heading-with-anchor\"><a href=\"#what-are-security-headers-\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">What are security headers?</a></h2> <p>Security headers are HTTP headers that you can return in your responses which improve the overall security of your application. The headers instruct browsers to activate or disable various features, with the overall goal of hardening your application and reducing your attack surface area.</p> <p>Some of <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Strict-Transport-Security\">these headers</a> apply to all HTTP responses, while <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Permissions-Policy\">others</a> only really make sense for HTML responses. Nevertheless, it <em>can</em> make sense to apply theoretically-HTML-only headers to non-HTML responses as part of a defence-in-depth approach, <a href=\"https://cheatsheetseries.owasp.org/cheatsheets/REST_Security_Cheat_Sheet.html#security-headers\">as described by OWASP</a>.</p> <p>The main problem with security headers is that there are <a href=\"https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Headers_Cheat_Sheet.html#security-headers\">a <em>lot</em> of them</a>, and the list is generally growing and evolving, with new headers being introduced and others being retired. What's more, different headers use different patterns for lists—some use <code>;</code> separators, others use <code>,</code>, and others use a space—so it's easy to set them up incorrectly.</p> <p>The <a href=\"https://github.com/andrewlock/NetEscapades.AspNetCore.SecurityHeaders\"><em>NetEscapades.AspNetCore.SecurityHeaders</em></a> package aims to help you set up security headers for your ASP.NET Core app. It provides sensible defaults, with a fluent builder pattern for customizing and configuring the headers for your specific application requirements.</p> <h2 id=\"adding-security-headers-to-your-app\" class=\"heading-with-anchor\"><a href=\"#adding-security-headers-to-your-app\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Adding security headers to your app</a></h2> <p>In this section I show the quickest way to get started with <a href=\"https://github.com/andrewlock/NetEscapades.AspNetCore.SecurityHeaders\"><em>NetEscapades.AspNetCore.SecurityHeaders</em></a> and to start adding security headers to your application.</p> <p>First, add the package to your app:</p> <pre class=\"language-bash\"><code class=\"language-bash\">dotnet <span class=\"token function\">add</span> package NetEscapades.AspNetCore.SecurityHeaders\n</code></pre> <p>Alternatively, add the package to your <em>.csproj</em> directly</p> <pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Project</span> <span class=\"token attr-name\">Sdk</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Microsoft.NET.Sdk.Web<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>PropertyGroup</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>TargetFramework</span><span class=\"token punctuation\">&gt;</span></span>net8.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>TargetFramework</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>PropertyGroup</span><span class=\"token punctuation\">&gt;</span></span>\n\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ItemGroup</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token comment\">&lt;!-- 👇 Add the package --&gt;</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>PackageReference</span> <span class=\"token attr-name\">Include</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>NetEscapades.AspNetCore.SecurityHeaders<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">Version</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>1.0.0<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ItemGroup</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Project</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre> <p>Finally, add the security headers middleware to the start of your middleware pipeline with the <code>UseSecurityHeaders()</code> extension method. For example:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> builder <span class=\"token operator\">=</span> WebApplication<span class=\"token punctuation\">.</span><span class=\"token function\">CreateBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> app <span class=\"token operator\">=</span> builder<span class=\"token punctuation\">.</span><span class=\"token function\">Build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 👇 Add the security headers to the start of the pipeline</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">UseSecurityHeaders</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">MapGet</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token string\">\"Hello world!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">Run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre> <p>The <code>SecurityHeadersMiddleware</code> registers a callback that adds several headers to all responses. By default, the middleware adds the following header to your responses:</p> <ul><li><code>X-Content-Type-Options: nosniff</code></li> <li><code>X-Frame-Options: Deny</code></li> <li><code>Referrer-Policy: strict-origin-when-cross-origin</code></li> <li><code>Content-Security-Policy: object-src 'none'; form-action 'self'; frame-ancestors 'none'</code></li> <li><code>Strict-Transport-Security: max-age=31536000; includeSubDomains</code> - <em>only applied to HTTPS responses</em></li> <li><code>Cross-Origin-Opener-Policy: same-origin</code></li> <li><code>Cross-Origin-Embedder-Policy: credentialless</code></li> <li><code>Cross-Origin-Resource-Policy: same-origin</code></li></ul> <p>These headers were chosen based on <a href=\"https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Headers_Cheat_Sheet.html#security-headers\">guidance from OWASP</a> to provide security hardening benefits, while being broadly applicable to most applications.</p> <blockquote> <p>These headers don't represent the <em>most</em> secure set you could choose, but rather a \"generally safe\" set for most applications. Ideally you should customise these headers to add a more secure (and more restrictive) set.</p> </blockquote> <p>If you want to change the headers that are applied, you can create an instance of <code>HeaderPolicyCollection</code>, and use the fluent builder interface to customize the added headers. The following shows an example which specifically adds all the default headers independently, and then adds an extra custom header.</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> policyCollection <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">HeaderPolicyCollection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">AddFrameOptionsDeny</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">AddContentTypeOptionsNoSniff</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">AddStrictTransportSecurityMaxAge</span><span class=\"token punctuation\">(</span><span class=\"token named-parameter punctuation\">maxAgeInSeconds</span><span class=\"token punctuation\">:</span> <span class=\"token number\">60</span> <span class=\"token operator\">*</span> <span class=\"token number\">60</span> <span class=\"token operator\">*</span> <span class=\"token number\">24</span> <span class=\"token operator\">*</span> <span class=\"token number\">365</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// maxage = one year in seconds</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">AddReferrerPolicyStrictOriginWhenCrossOrigin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">RemoveServerHeader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">AddContentSecurityPolicy</span><span class=\"token punctuation\">(</span>builder <span class=\"token operator\">=&gt;</span>\n    <span class=\"token punctuation\">{</span>\n        builder<span class=\"token punctuation\">.</span><span class=\"token function\">AddObjectSrc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">None</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        builder<span class=\"token punctuation\">.</span><span class=\"token function\">AddFormAction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Self</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        builder<span class=\"token punctuation\">.</span><span class=\"token function\">AddFrameAncestors</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">None</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">AddCrossOriginOpenerPolicy</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">=&gt;</span> x<span class=\"token punctuation\">.</span><span class=\"token function\">SameOrigin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">AddCrossOriginEmbedderPolicy</span><span class=\"token punctuation\">(</span>builder <span class=\"token operator\">=&gt;</span> builder<span class=\"token punctuation\">.</span><span class=\"token function\">Credentialless</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">AddCrossOriginResourcePolicy</span><span class=\"token punctuation\">(</span>builder <span class=\"token operator\">=&gt;</span> builder<span class=\"token punctuation\">.</span><span class=\"token function\">SameSite</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">AddCustomHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"X-My-Test-Header\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Header value\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">UseSecurityHeaders</span><span class=\"token punctuation\">(</span>policyCollection<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre> <p>For most of the history of <em>NetEscapades.AspNetCore.SecurityHeaders</em>, this was been the only way to configure the security headers for your application. The advantage is that it's <em>simple</em>—there's no services to add, nothing to \"reason\" about—whatever headers you configure, are added.</p> <p>However, some people wanted more control, for example to be able to add different headers to different endpoints in their application, or to customize the headers on a request-by-request basis. That flexibility is largely what the changes in <code>1.0.0</code> are about, but as this is a major version, I took the opportunity to make some other larger changes too.</p> <p>For the rest of this post I'll describe some of the biggest changes in <code>1.0.0</code>.</p> <h2 id=\"major-changes-in-1-0-0\" class=\"heading-with-anchor\"><a href=\"#major-changes-in-1-0-0\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Major changes in <code>1.0.0</code></a></h2> <p>The following sections describe the high level changes and features included in <code>1.0.0</code>. Before we get started, the first thing to note is that <em>NetEscapades.AspNetCore.SecurityHeaders</em> finally <a href=\"https://github.com/andrewlock/NetEscapades.AspNetCore.SecurityHeaders/issues/194\">has a logo</a>:</p> <p><img src=\"/content/images/2024/headers_logo.png\" alt=\"NetEscapades.AspNetCore.SecurityHeaders\"></p> <p>A big thanks to <a href=\"https://hachyderm.io/@khalidabuhakmeh@mastodon.social\">Khalid</a> for putting that together <a href=\"https://hachyderm.io/@khalidabuhakmeh@mastodon.social/113205536777140020\">so quickly</a>! Now lets look at the new features and breaking changes.</p> <h3 id=\"changes-to-the-supported-frameworks\" class=\"heading-with-anchor\"><a href=\"#changes-to-the-supported-frameworks\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Changes to the supported frameworks</a></h3> <p>I first created <em>NetEscapades.AspNetCore.SecurityHeaders</em> way back in 2016, when ASP.NET Core was just being released. Back then, ASP.NET Core could <em>also</em> be run on .NET Framework. The original thought was that this mode would serve as a migration path from ASP.NET to ASP.NET Core.</p> <p>That path is rarely recommended these days, and instead, <a href=\"https://learn.microsoft.com/en-us/aspnet/core/migration/inc/overview\">a \"strangler fig\" pattern is recommended</a>. ASP.NET Core has not been supported on .NET Framework since version 2.1 (OK, <a href=\"https://devblogs.microsoft.com/dotnet/servicing-release-advisory-aspnetcore-23/\">ASP.NET Core 2.3 now</a>), and as such <code>1.0.0</code> of <em>NetEscapades.AspNetCore.SecurityHeaders</em> finally drops support for .NET Framework too, by <a href=\"https://github.com/andrewlock/NetEscapades.AspNetCore.SecurityHeaders/pull/167\">dropping support for <code>netstandard2.0</code></a> and everything prior to .NET Core 3.1.</p> <blockquote> <p>You might be wondering \"why .NET Core 3.1+ and not .NET 8+, seeing as that's all that's supported by Microsoft\". The short answer, is that supporting the extra TFMs requires basically no extra work, and it means more people can use the package. I'm not really losing anything by supporting the earlier TFMs. Sure, there's probably a few cases where I'd use different APIs if targeting .NET 8, but those are few and far between.</p> </blockquote> <p>Given the package still supports .NET Core 3.1+ it's <em>very</em> unlikely you'll be impacted by this change unless you're on a (very) unsupported version of .NET Core. And if you are, I would strongly advise you to update anyway!</p> <h3 id=\"changes-to-headers\" class=\"heading-with-anchor\"><a href=\"#changes-to-headers\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Changes to headers</a></h3> <p>In the next section I describe some of the changes to specific security headers, including changes to default values, new APIs, and deprecated methods.</p> <h4 id=\"changes-to-the-default-headers\" class=\"heading-with-anchor\"><a href=\"#changes-to-the-default-headers\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Changes to the default headers</a></h4> <p>When you don't specify a custom <code>HeaderPolicyCollection</code>, <em>NetEscapades.AspNetCore.SecurityHeaders</em> applies a default set of headers, as I described previously. These headers are encapsulated in the <code>AddDefaultSecurityHeaders()</code> extension method, so the following are equivalent:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\">app<span class=\"token punctuation\">.</span><span class=\"token function\">UseSecurityHeaders</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 👈 This...</span>\n\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> policies <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">HeaderPolicyCollection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">AddDefaultSecurityHeaders</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">UseSecurityHeaders</span><span class=\"token punctuation\">(</span>policies<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 👈 ..is equivalent to this.</span>\n</code></pre> <p>In <code>1.0.0-preview.1</code> the headers that are applied have changed slightly:</p> <ul><li><code>Cross-Origin-Opener-Policy: same-origin</code> is now added.</li> <li><code>Cross-Origin-Embedder-Policy: credentialless</code> is now added.</li> <li><code>Cross-Origin-Resource-Policy: same-origin</code> is now added.</li> <li><code>X-XSS-Protection=1; mode-block</code> is no longer added.</li></ul> <p>The full set of headers added by default are now:</p> <ul><li><code>X-Content-Type-Options: nosniff</code></li> <li><code>X-Frame-Options: Deny</code></li> <li><code>Referrer-Policy: strict-origin-when-cross-origin</code></li> <li><code>Content-Security-Policy: object-src 'none'; form-action 'self'; frame-ancestors 'none'</code></li> <li><code>Cross-Origin-Opener-Policy: same-origin</code></li> <li><code>Cross-Origin-Embedder-Policy: credentialless</code></li> <li><code>Cross-Origin-Resource-Policy: same-origin</code></li> <li><code>Strict-Transport-Security: max-age=31536000; includeSubDomains</code> - <em>HTTPS responses only</em></li></ul> <p>If you don't want this change, you can simply create a custom <code>HeaderPolicyCollection</code> configured as it was previously:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">HeaderPolicyCollection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">AddFrameOptionsDeny</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">AddXssProtectionBlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// This is no longer included by default</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">AddContentTypeOptionsNoSniff</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">AddStrictTransportSecurityMaxAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">AddReferrerPolicyStrictOriginWhenCrossOrigin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">RemoveServerHeader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">AddContentSecurityPolicy</span><span class=\"token punctuation\">(</span>builder <span class=\"token operator\">=&gt;</span>\n  <span class=\"token punctuation\">{</span>\n      builder<span class=\"token punctuation\">.</span><span class=\"token function\">AddObjectSrc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">None</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      builder<span class=\"token punctuation\">.</span><span class=\"token function\">AddFormAction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Self</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      builder<span class=\"token punctuation\">.</span><span class=\"token function\">AddFrameAncestors</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">None</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre> <h4 id=\"x-xss-protection-1-mode-block-is-no-longer-recommended\" class=\"heading-with-anchor\"><a href=\"#x-xss-protection-1-mode-block-is-no-longer-recommended\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\"><code>X-XSS-Protection=1; mode-block</code> is no longer recommended</a></h4> <p>You may wonder why <code>X-XSS-Protection</code> was removed from the default headers. The <code>X-XSS-Protection</code> header is interesting in that it's a security header that <em>used</em> to be recommended to add to your applications to improve security. However these days it's <em>not</em> recommended, because, as described on <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-XSS-Protection\">MDN</a>:</p> <blockquote> <p>The <code>X-XSS-Protection</code> header \"can create XSS vulnerabilities in otherwise safe websites\"</p> </blockquote> <p>That's clearly not an example of a good header to add by default, so <a href=\"https://github.com/andrewlock/NetEscapades.AspNetCore.SecurityHeaders/pull/168\">it's been removed</a> from the default set of security headers and <a href=\"https://github.com/andrewlock/NetEscapades.AspNetCore.SecurityHeaders/pull/191\">marked obsolete</a>. You can still add it to your application if you want to, it's just not recommended unless you understand the risks.</p> <h4 id=\"expect-ct-is-no-longer-recommended\" class=\"heading-with-anchor\"><a href=\"#expect-ct-is-no-longer-recommended\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\"><code>Expect-CT</code> is no longer recommended</a></h4> <p>The <code>Expect-CT</code> header lets sites opt-in to <a href=\"https://developer.mozilla.org/en-US/docs/Web/Security/Certificate_Transparency\">certificate transparency</a> requirements, but only Chrome and other Chromium-based browsers implemented Expect-CT, On top of that, Chromium deprecated the header in version 107 (Oct 2022), because <a href=\"https://chromestatus.com/feature/6244547273687040\">Chromium now enforces CT by default</a>.</p> <p>Given the header is deprecated and <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Expect-CT\">no longer recommended</a>, it's <a href=\"https://github.com/andrewlock/NetEscapades.AspNetCore.SecurityHeaders/pull/197\">now marked obsolete in <em>NetEscapades.AspNetCore.SecurityHeaders</em></a>.</p> <h4 id=\"new-permisionspolicybuilder-adddefaultsecuredirectives-method\" class=\"heading-with-anchor\"><a href=\"#new-permisionspolicybuilder-adddefaultsecuredirectives-method\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">New <code>PermisionsPolicyBuilder.AddDefaultSecureDirectives()</code> method</a></h4> <p>The <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Permissions-Policy\"><code>Permissions-Policy</code> header</a> provides a way to allow or deny the browser from using various features, such as the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Bluetooth_API\">Web Bluetooth API</a> or the <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Permissions-Policy/camera\">Camera</a>. Support for <code>Permissions-Policy</code> has been available for some time (with <a href=\"https://github.com/andrewlock/NetEscapades.AspNetCore.SecurityHeaders/pull/177\">many new policies added recently</a>).</p> <p>One slight annoyance with building up a <code>Permissions-Policy</code> is that there are so <em>many</em> policies. If you're building a JSON API (for example) then you'll likely want to disable <a href=\"https://cheatsheetseries.owasp.org/cheatsheets/REST_Security_Cheat_Sheet.html#security-headers\">essentially all of them</a>, at which point you're calling a <em>lot</em> of methods.</p> <p><code>1.0.0</code> adds two new convenience method that add (most) of <a href=\"https://cheatsheetseries.owasp.org/cheatsheets/REST_Security_Cheat_Sheet.html#security-headers\">the headers recommended by OWASP for REST endpoints</a>. If you just want to add the default set of directives you can call <code>AddPermissionsPolicyWithDefaultSecureDirectives()</code> directly on <code>HeaderPolicyCollection</code>:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> policies <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">HeaderPolicyCollection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">AddPermissionsPolicyWithDefaultSecureDirectives</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre> <p>Alternatively, if you want to customize the <code>Permissions-Policy</code>, you can call <code>PermissionsPolicyBuilder.AddDefaultSecureDirectives()</code>, and then add (or override) additional directives:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> policies <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">HeaderPolicyCollection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">AddPermissionsPolicy</span><span class=\"token punctuation\">(</span>p <span class=\"token operator\">=&gt;</span> \n    <span class=\"token punctuation\">{</span>\n        p<span class=\"token punctuation\">.</span><span class=\"token function\">AddDefaultSecureDirectives</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Add the default directives</span>\n        p<span class=\"token punctuation\">.</span><span class=\"token function\">AddAttributionReporting</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">None</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Additional customization</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre> <p>In both cases the default secure directives added are equivalent to:</p> <pre class=\"language-http\"><code class=\"language-http\">accelerometer=(), autoplay=(), camera=(), display-capture=(),\nencrypted-media=(), fullscreen=(), geolocation=(), gyroscope=(), magnetometer=(),\nmicrophone=(), midi=(), payment=(), picture-in-picture=(), publickey-credentials-get=(),\nscreen-wake-lock=(), sync-xhr=(), usb=(), web-share=(), xr-spatial-tracking=()\n</code></pre> <p>Note that this isn't quite the same set of headers <a href=\"https://cheatsheetseries.owasp.org/cheatsheets/REST_Security_Cheat_Sheet.html#security-headers\">as suggested by OWASP</a>, because <em>NetEscapades.AspNetCore.SecurityHeaders</em> doesn't include experimental features (to limit the scope and avoid too many breaking changes), but if you want to replicate those directives, you can always use the <code>AddCustomDirective()</code> helper.</p> <h4 id=\"new-support-for-trusted-types\" class=\"heading-with-anchor\"><a href=\"#new-support-for-trusted-types\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">New support for Trusted Types</a></h4> <p>The Trusted Types directive is part of the Content-Security-Policy (CSP) feature to prevent against cross-site-scripting (XSS) attacks. By using the Trusted Types APIs, in combination with the Trusted Types directive, you can prevent cross-site scripting attacks that use DOM-based attacks by leveraging dangerous APIs.</p> <blockquote> <p>If you're new to the Trusted Types APIs, you can <a href=\"/preventing-client-side-cross-site-scripting-vulnerabilities-with-trusted-types/\">read about them in my post here</a> that shows how the attacks work and how the CSP can protect you. It's worth noting that the Trusted Types API is currently only available in Chromium based browsers, but it has been available in Chromium since version 83, released in 2020.</p> </blockquote> <p>You can <a href=\"/preventing-client-side-cross-site-scripting-vulnerabilities-with-trusted-types/#blocking-cross-site-scripting-with-trusted-types-and-a-content-security-policy\">add a trusted types directive</a> to your CSP with <em>NetEscapades.AspNetCore.SecurityHeaders</em> using the <code>AddRequireTrustedTypesFor()</code> method. For example:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> builder <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">WebApplication<span class=\"token punctuation\">.</span>CreateBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> app <span class=\"token operator\">=</span> builder<span class=\"token punctuation\">.</span><span class=\"token function\">Build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Configure the policy</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">UseSecurityHeaders</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">HeaderPolicyCollection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">AddContentSecurityPolicy</span><span class=\"token punctuation\">(</span>builder <span class=\"token operator\">=&gt;</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// Add \"require-trusted-types-for 'script'\" header</span>\n        builder<span class=\"token punctuation\">.</span><span class=\"token function\">AddRequireTrustedTypesFor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Script</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// Add \"trusted-types my-policy\" header</span>\n        builder<span class=\"token punctuation\">.</span><span class=\"token function\">AddTrustedTypes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">AllowPolicy</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"my-policy\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// other configuration</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">Run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre> <p>This adds a header like the following to the response:</p> <pre class=\"language-http\"><code class=\"language-http\"><span class=\"token header\"><span class=\"token header-name keyword\">Content-Security-Policy</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">require-trusted-types-for 'script'; trusted-types my-policy</span></span>\n</code></pre> <p>Attempting to execute a cross-site scripting attack using the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Element/innerHTML\">dangerous <code>innerHTML</code> API</a> will now fail with an error:</p> <p><img src=\"/content/images/2025/trusted_types_03.png\" alt=\"Showing trusted-types protections using a CSP\"></p> <p>The <code>require-trusted-types-for</code> and <code>trusted-types</code> directives work together to protect your application in Chrome, and you can use <a href=\"https://github.com/w3c/trusted-types?tab=readme-ov-file#polyfill\">a polyfill in other browsers</a>.</p> <h4 id=\"new-adddefaultapisecurityheaders-method\" class=\"heading-with-anchor\"><a href=\"#new-adddefaultapisecurityheaders-method\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">New <code>AddDefaultApiSecurityHeaders()</code> method</a></h4> <p>The set of security headers added by <code>AddDefaultSecurityHeaders()</code> was chosen to provide a good balance between security and applicability for a basic ASP.NET Core website that's serving HTML. But many apps <em>only</em> serve JSON and are never expected to be loaded directly in the browser. In those scenarios we can apply a more \"aggressive\" set of headers.</p> <p>The new <code>AddDefaultApiSecurityHeaders()</code> extension method is designed for applying to APIs, and is based on <a href=\"https://cheatsheetseries.owasp.org/cheatsheets/REST_Security_Cheat_Sheet.html#security-headers\">the recommendation from OWASP</a>. It adds the following headers (I've also highlighted any differences with <code>AddDefaultSecurityHeaders()</code>):</p> <ul><li><code>X-Content-Type-Options: nosniff</code></li> <li><code>X-Frame-Options: Deny</code></li> <li><code>Referrer-Policy: no-referrer</code> <ul><li>Compared to <code>strict-origin-when-cross-origin</code> for <code>AddDefaultSecurityHeaders()</code></li></ul> </li> <li><code>Content-Security-Policy: default-src 'none'; frame-ancestors 'none'</code> <ul><li>Compared to <code>object-src 'none'; form-action 'self'; frame-ancestors 'none'</code> for <code>AddDefaultSecurityHeaders()</code></li></ul> </li> <li><code>Permissions-Policy: accelerometer=(), autoplay=(), camera=(), display-capture=(), encrypted-media=(), fullscreen=(), geolocation=(), gyroscope=(), magnetometer=(), microphone=(), midi=(), payment=(), picture-in-picture=(), publickey-credentials-get=(), screen-wake-lock=(), sync-xhr=(), usb=(), web-share=(), xr-spatial-tracking=()</code> <ul><li>Not included in <code>AddDefaultSecurityHeaders()</code></li></ul> </li> <li><code>Cross-Origin-Opener-Policy: same-origin</code></li> <li><code>Cross-Origin-Embedder-Policy: require-corp</code> <ul><li>Compared to <code>credentialless</code> for <code>AddDefaultSecurityHeaders()</code></li></ul> </li> <li><code>Cross-Origin-Resource-Policy: same-origin</code></li></ul> <p>You can use <code>AddDefaultApiSecurityHeaders()</code> in your application by applying it to a <code>HeaderPolicyCollection</code>, for example:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> builder <span class=\"token operator\">=</span> WebApplication<span class=\"token punctuation\">.</span><span class=\"token function\">CreateBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> app <span class=\"token operator\">=</span> builder<span class=\"token punctuation\">.</span><span class=\"token function\">Build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 👇 Configure to use the API security headers</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">UseSecurityHeaders</span><span class=\"token punctuation\">(</span>p <span class=\"token operator\">=&gt;</span> p<span class=\"token punctuation\">.</span><span class=\"token function\">AddDefaultApiSecurityHeaders</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">MapGet</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token string\">\"Hello world!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">Run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre> <p>It's worth noting that <a href=\"https://cheatsheetseries.owasp.org/cheatsheets/REST_Security_Cheat_Sheet.html#security-headers\">OWASP recommends</a> always adding other non-security headers to API responses, such as <code>Cache-Control: no-store</code> and <code>Content-Type</code>.</p> <h5 id=\"feature-policy-is-marked-obsolete\" class=\"heading-with-anchor\"><a href=\"#feature-policy-is-marked-obsolete\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\"><code>Feature-Policy</code> is marked obsolete</a></h5> <p><code>Feature-Policy</code> is a now-obsolete name for the <code>Permissions-Policy</code> header. The header has been deprecated, and as such the extension methods for adding <code>Feature-Policy</code> to your header collection have been marked <code>[Obsolete]</code>. You're recommended to switch to using <code>Permissions-Policy</code> instead.</p> <h3 id=\"applying-different-headers-to-some-endpoints\" class=\"heading-with-anchor\"><a href=\"#applying-different-headers-to-some-endpoints\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Applying different headers to some endpoints</a></h3> <p>The biggest feature by far in <code>1.0.0</code> is the ability to apply different headers to different endpoints. This can be particularly useful if you want to maximally lock down your site, for example by applying a more restrictive <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP\"><code>Content-Security-Policy</code></a> on certain pages, and relaxing it only when necessary.</p> <p>Let's say, for example, that your application contains both HTML and JSON endpoints. Perhaps you're serving HTML via Razor Pages, but you have some API endpoints that are also available. You would want to:</p> <ul><li>Apply the default security headers to all responses by default</li> <li>For the API endpoints, apply the headers added by <code>AddDefaultApiSecurityHeaders()</code></li></ul> <p>Prior to <code>1.0.0</code>, that wasn't possible, but now it is! 🎉 To achieve this we need to do 3 things:</p> <ol><li>Configure default and named policies for the application.</li> <li>Add the middleware using <code>UseSecurityHeaders()</code> (as before).</li> <li>Apply custom policies to endpoints.</li></ol> <p>The following example shows all of those steps</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> builder <span class=\"token operator\">=</span> WebApplication<span class=\"token punctuation\">.</span><span class=\"token function\">CreateBuilder</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nbuilder<span class=\"token punctuation\">.</span>Services<span class=\"token punctuation\">.</span><span class=\"token function\">AddRazorPages</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 1. 👇 Configure the policies for the application</span>\nbuilder<span class=\"token punctuation\">.</span>Services<span class=\"token punctuation\">.</span><span class=\"token function\">AddSecurityHeaderPolicies</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">SetDefaultPolicy</span><span class=\"token punctuation\">(</span>p <span class=\"token operator\">=&gt;</span> p<span class=\"token punctuation\">.</span><span class=\"token function\">AddDefaultSecurityHeaders</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 👈 Configure the default policy</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">AddPolicy</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"API\"</span><span class=\"token punctuation\">,</span> p <span class=\"token operator\">=&gt;</span> p<span class=\"token punctuation\">.</span><span class=\"token function\">AddDefaultApiSecurityHeaders</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 👈 Configure named policies</span>\n\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> app <span class=\"token operator\">=</span> builder<span class=\"token punctuation\">.</span><span class=\"token function\">Build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 2. 👇 Add the security headers middleware</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">UseSecurityHeaders</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">UseHttpsRedirection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">UseStaticFiles</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">UseRouting</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">UseAuthorization</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">MapRazorPages</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">MapGet</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/api\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token string\">\"Hello world\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">WithSecurityHeadersPolicy</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"API\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 3. 👈 Apply a named policy to the endpoint</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">Run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre> <p>In the example above, the default security headers are applied to all responses <em>except</em> when the <code>/api</code> endpoint is invoked, in which case the named policy <code>\"API\"</code> is applied (which adds the <code>AddDefaultApiSecurityHeaders()</code> headers instead).</p> <blockquote> <p>If you're working with MVC controllers or Razor Pages, you can apply a named policy to an endpoint using the <code>[SecurityHeadersPolicy]</code> attribute.</p> </blockquote> <p>This should cater to the vast majority of cases where you need to apply multiple policies in an application, but if you really need it, you can now completely customise the policy that's applied, as you'll see in the next section.</p> <h3 id=\"customizing-the-headers-completely\" class=\"heading-with-anchor\"><a href=\"#customizing-the-headers-completely\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Customizing the headers completely</a></h3> <p>Applying different policies to different endpoints works well when you have a fixed number of policies to apply. However, in some cases you need to completely customise the headers for a given request. This might be the case if, for example, you are running a multi-tenant application, and the headers need to be matched to the incoming request.</p> <p>In <code>1.0.0</code>, you can now completely customize the headers that will be applied by providing a lambda method that is executed just before the headers are applied, and by returning the <code>HeaderPolicyCollection</code> to apply.</p> <p>For example, lets imagine that you want to apply a different set of headers for some requests. You can call the <code>SetPolicySelector()</code>, as shown below, and provide a function to execute whenever a policy is about to be applied:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> builder <span class=\"token operator\">=</span> WebApplication<span class=\"token punctuation\">.</span><span class=\"token function\">CreateBuilder</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nbuilder<span class=\"token punctuation\">.</span>Services<span class=\"token punctuation\">.</span><span class=\"token function\">AddSecurityHeaderPolicies</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">SetPolicySelector</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">PolicySelectorContext</span> ctx<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span>\n  <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// TODO: anything you need to build the HeaderPolicyCollection</span>\n      <span class=\"token comment\">// e.g. use services from the DI container (if you need to)</span>\n      <span class=\"token class-name\">IServiceProvider</span> services <span class=\"token operator\">=</span> ctx<span class=\"token punctuation\">.</span>HttpContext<span class=\"token punctuation\">.</span>RequestServices<span class=\"token punctuation\">;</span> \n\n      <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> selector <span class=\"token operator\">=</span> services<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">GetService</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>TenantHeaderPolicyCollectionSelector<span class=\"token punctuation\">&gt;</span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> tenant <span class=\"token operator\">=</span> services<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">GetService</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>ITenant<span class=\"token punctuation\">&gt;</span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token class-name\">HeaderPolicyCollection</span> policy <span class=\"token operator\">=</span> selector<span class=\"token punctuation\">.</span><span class=\"token function\">GetPolicyForTenant</span><span class=\"token punctuation\">(</span>tenant<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> policy<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 👈 This is the policy that is applied</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> app <span class=\"token operator\">=</span> builder<span class=\"token punctuation\">.</span><span class=\"token function\">Build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">UseSecurityHeaders</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">MapGet</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/api\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token string\">\"Hello world\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">Run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre> <p>The lambda/method you pass to <code>SetPolicySelector()</code> is provided a <code>PolicySelectorContext</code>, which includes all the information you might need to decide which policy to apply:</p> <ul><li><code>HttpContext HttpContext</code>—The current <code>HttpContext</code> for the request.</li> <li><code>IReadOnlyDictionary&lt;string, IReadOnlyHeaderPolicyCollection&gt; ConfiguredPolicies</code>—The named policies configured for the application.</li> <li><code>IReadOnlyHeaderPolicyCollection DefaultPolicy</code>—The default policy that applies to the request.</li> <li><code>string? EndpointPolicyName</code>—The name of the endpoint policy that applies to the request, if any.</li> <li><code>IReadOnlyHeaderPolicyCollection? EndpointPolicy</code>—The endpoint policy that applies to the request, if any. If no endpoint-specific policy applies to the request, returns <code>null</code>.</li> <li><code>IReadOnlyHeaderPolicyCollection SelectedPolicy</code>—The policy that would be applied to the endpoint by default: equivalent to <code>EndpointPolicy</code> if available, otherwise <code>DefaultPolicy</code>.</li></ul> <p>Your policy selector <em>must</em> return a policy collection. If you don't want to customise the policy for the request, return <code>ctx.SelectedPolicy</code>.</p> <blockquote> <p>Note that you should avoid building a new <code>HeaderPolicyCollection</code> on every request for performance reasons. Where possible, cache and reuse <code>HeaderPolicyCollection</code> instances. If you do need to create a new <code>HeaderPolicyCollection</code> from a <code>IReadOnlyHeaderPolicyCollection</code>, you can call <code>Copy()</code> to return a mutable instance.</p> </blockquote> <p>With the combination of endpoint-specific policies and the customisation available in <code>SetPolicySelector()</code>, I hope that people will now be able to customise their applications more easily, without needing to resort to hacking the internals of the library!</p> <h3 id=\"document-headers-functionality-has-been-removed\" class=\"heading-with-anchor\"><a href=\"#document-headers-functionality-has-been-removed\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">\"Document headers\" functionality has been removed</a></h3> <p>One consequence of the additional customisation possible with <code>SetPolicySelector()</code> and endpoint policies is that <a href=\"https://github.com/andrewlock/NetEscapades.AspNetCore.SecurityHeaders/pull/186\">the concept of \"document headers\" have been removed</a>. The <code>ApplyDocumentHeadersToContentTypes()</code> and <code>ApplyDocumentHeadersToAllResponses()</code> extension methods have now been marked <code>[Obsolete]</code> and are no-ops.</p> <p>These methods were originally added because some security headers don't really make <em>sense</em> when applied to passive content like JSON responses compared to HTML responses. Consequently, by default, some security headers (such as <code>Content-Security-Policy</code>) would be omitted unless the response was HTML or JavaScript.</p> <p>The only real benefit to this approach was that it reduced the size of the response (by omitting some headers). The down-side was that it added confusion and an additional configuration knob people had to consider. What's more, <a href=\"https://cheatsheetseries.owasp.org/cheatsheets/REST_Security_Cheat_Sheet.html#security-headers\">OWASP actually recommends you <em>do</em> send these headers</a>, even if you have no intention of returning HTML, as part of a defence-in-depth approach. What's more, some of the headers that were previously considered \"document/HTML only\" actually <em>should</em> be added to all responses to protect against <a href=\"https://www.w3.org/Security/wiki/Clickjacking_Threats#Drag_and_drop_attacks\">drag-and-drop style clickjacking attacks</a>.</p> <p>So in <code>1.0.0</code> the concept of a <code>DocumentHeaderPolicy</code> has been removed, and headers are <em>always</em> applied to <em>all</em> requests regardless of the response content type.</p> <blockquote> <p>Mostly…some headers only apply to HTTPS requests for example, or should not be applied to <code>localhost</code> requests. But the \"document header\" concept is no more.</p> </blockquote> <p>If you want to re-instate the \"document header\" functionality for some reason, you can recreate something similar with <code>SetPolicySelector()</code>. There are lots of different ways you could achieve it, but here's one example:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> builder <span class=\"token operator\">=</span> WebApplication<span class=\"token punctuation\">.</span><span class=\"token function\">CreateBuilder</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// The mime types considered \"documents\"</span>\n<span class=\"token class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> documentTypes <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">\"text/html\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"application/javascript\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"text/javascript\"</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> documentPolicy <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">HeaderPolicyCollection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">AddDefaultSecurityHeaders</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nbuilder<span class=\"token punctuation\">.</span>Services<span class=\"token punctuation\">.</span><span class=\"token function\">AddSecurityHeaderPolicies</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">SetDefaultPolicy</span><span class=\"token punctuation\">(</span>p <span class=\"token operator\">=&gt;</span> p<span class=\"token punctuation\">.</span><span class=\"token function\">AddDefaultApiSecurityHeaders</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">SetPolicySelector</span><span class=\"token punctuation\">(</span>ctx <span class=\"token operator\">=&gt;</span>\n  <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// If the response is one of the \"document\" types...</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>documentTypes<span class=\"token punctuation\">.</span><span class=\"token function\">Contains</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">.</span>HttpContext<span class=\"token punctuation\">.</span>Response<span class=\"token punctuation\">.</span>ContentType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">{</span>\n          <span class=\"token comment\">// ... then return the \"document\" policy</span>\n          <span class=\"token keyword\">return</span> documentPolicy<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n\n      <span class=\"token comment\">// Otherwise return the original selected policy</span>\n      <span class=\"token keyword\">return</span> ctx<span class=\"token punctuation\">.</span>SelectedPolicy<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> app <span class=\"token operator\">=</span> builder<span class=\"token punctuation\">.</span><span class=\"token function\">Build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">UseSecurityHeaders</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">MapGet</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/api\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token string\">\"Hello world\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">Run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre> <p>As I've already said, I don't recommend you do this, but the point is that now you <em>can</em> if you want to, which is why I chose to remove the document headers functionality.</p> <h3 id=\"changes-to-nonce-generation\" class=\"heading-with-anchor\"><a href=\"#changes-to-nonce-generation\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Changes to nonce generation</a></h3> <p>In previous versions of <em>NetEscapades.AspNetCore.SecurityHeaders</em> a <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/nonce\">nonce (number used once)</a> was generated at the start of a request only when required by a <code>Content-Security-Policy</code>. However, with the changes in <code>1.0.0</code> it's no longer possible to know ahead of time that a nonce will be required (because the header policies can change later in the request, due to a named endpoint policy for example).</p> <p>As a result, the nonce is no longer generated at the <em>start</em> of the request. Instead, it's generated lazily when you call <code>HttpContext.GetNonce()</code>. The end result is the same as before—a single nonce is generated per-request, and only when it's required. The slight breaking change is the fact that you now <em>must</em> call <code>GetNonce()</code> to retrieve the nonce. Previously you <em>could</em> have retrieved the nonce directly from <code>HttpContext.Items</code> (even though that wasn't explicitly supported); in <code>1.0.0</code> that's no longer possible.</p> <p>That covers the majority of the major changes made between versions <code>0.24.0</code> and <code>1.0.0</code>. You can find the <a href=\"https://github.com/andrewlock/NetEscapades.AspNetCore.SecurityHeaders/compare/v0.24.0...v1.0.0\">full diff here</a>, including an API diff (using <a href=\"/preventing-breaking-changes-in-public-apis-with-publicapigenerator/\">the workflow I described in a previous post</a>).</p> <h3 id=\"updates-to-build-provenance\" class=\"heading-with-anchor\"><a href=\"#updates-to-build-provenance\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Updates to build provenance</a></h3> <p>The final category of updates in <code>1.0.0</code> are related to how the project is built and packaged. In summary, for each public release, you can now find:</p> <ul><li><a href=\"/creating-provenance-attestations-for-nuget-packages-in-github-actions/\">Provenance attestations</a> describing the build and pipeline that produced the NuGet package.</li> <li><a href=\"https://www.cisa.gov/sbom\">Software Bill of Materials (SBOM)</a> in <a href=\"https://cyclonedx.org/\">CycloneDX</a> format.</li> <li>An <a href=\"/creating-sbom-attestations-in-github-actions/\">attestation for the SBOM</a> that links the generated SBOM to the NuGet package.</li></ul> <p>Unfortunately, as described in the above linked posts, nuget.org modifies packages that are uploaded to it, so verifying the above attestations is more convoluted than would be ideal, but is <a href=\"https://github.com/andrewlock/NetEscapades.AspNetCore.SecurityHeaders?tab=readme-ov-file#verifying-nuget-provenance-attestations\">described in the project README</a>.</p> <h2 id=\"summary\" class=\"heading-with-anchor\"><a href=\"#summary\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Summary</a></h2> <p>Adding <a href=\"https://owasp.org/www-project-secure-headers/\">security-related headers</a> to your HTTP responses is an easy way to harden your application against attacks. <a href=\"https://github.com/andrewlock/NetEscapades.AspNetCore.SecurityHeaders\"><em>NetEscapades.AspNetCore.SecurityHeaders</em></a> provides an easy way to do this, and has recently been through some major changes that I'm looking for feedback on before releasing the final stable version.</p> <p>In summary, the major changes are:</p> <ul><li>Support for .NET Core 3.1+ only</li> <li>Updates to headers <ul><li>Changes to the default headers</li> <li>New utility methods for adding API-related security headers and a locked-down <code>Permissions-Policy</code> header</li> <li><code>X-XSS-Protection</code>, <code>Expect-CT</code>, and <code>Feature-Policy</code> are now obsolete</li></ul> </li> <li>Support for applying different header policies to different endpoints</li> <li>Support for customizing the header policy per-request</li> <li>Removal of \"document header\" concept</li> <li>Changes to nonce generation.</li></ul> <p>I recommend updating to <code>1.0.0</code> now. There have been 4 preview releases since <code>0.24.0</code> so I'm pretty comfortable with the current release. But nevertheless, if you find any issues, please let me know by <a href=\"https://github.com/andrewlock/NetEscapades.AspNetCore.SecurityHeaders/issues\">opening an issue on GitHub</a>. Thanks!</p> ",
    "sanitized": "This post is to announce that I have finally released the 1.0.0 version of the NetEscapades.AspNetCore.SecurityHeaders project. This version addresses some longstanding requests for extra functionality, updates the supported target frameworks, and obsoletes some old behaviours.  Many of these changes were introduced in preview versions, the 1.0.0 includes only minimal changes compared to the previous 1.0.0-preview.4 package.  In this post I provide a quick overview of the library, and then discuss the major changes made in this release, compared to version 0.24.0. What are security headers? Adding security headers to your app Major changes in 1.0.0 Changes to the supported frameworks Changes to headers Changes to the default headers X-XSS-Protection=1; mode-block is no longer recommended Expect-CT is no longer recommended New PermisionsPolicyBuilder.AddDefaultSecureDirectives() method New AddDefaultApiSecurityHeaders() method New support for Trusted Types Feature-Policy is marked obsolete  Applying different headers to some endpoints Customizing the headers completely \"Document headers\" functionality has been removed Changes to nonce generation Updates to build provenance  Summary What are security headers? Security headers are HTTP headers that you can return in your responses which improve the overall security of your application. The headers instruct browsers to activate or disable various features, with the overall goal of hardening your application and reducing your attack surface area. Some of these headers apply to all HTTP responses, while others only really make sense for HTML responses. Nevertheless, it can make sense to apply theoretically-HTML-only headers to non-HTML responses as part of a defence-in-depth approach, as described by OWASP. The main problem with security headers is that there are a lot of them, and the list is generally growing and evolving, with new headers being introduced and others being retired. What's more, different headers use different patterns for lists—some use ; separators, others use ,, and others use a space—so it's easy to set them up incorrectly. The NetEscapades.AspNetCore.SecurityHeaders package aims to help you set up security headers for your ASP.NET Core app. It provides sensible defaults, with a fluent builder pattern for customizing and configuring the headers for your specific application requirements. Adding security headers to your app In this section I show the quickest way to get started with NetEscapades.AspNetCore.SecurityHeaders and to start adding security headers to your application. First, add the package to your app: dotnet add package NetEscapades.AspNetCore.SecurityHeaders\n Alternatively, add the package to your .csproj directly <Project Sdk=\"Microsoft.NET.Sdk.Web\">\n  <PropertyGroup>\n    <TargetFramework>net8.0</TargetFramework>\n  </PropertyGroup>\n\n  <ItemGroup>\n    <!-- 👇 Add the package -->\n    <PackageReference Include=\"NetEscapades.AspNetCore.SecurityHeaders\" Version=\"1.0.0\" />\n  </ItemGroup>\n</Project>\n Finally, add the security headers middleware to the start of your middleware pipeline with the UseSecurityHeaders() extension method. For example: var builder = WebApplication.CreateBuilder();\nvar app = builder.Build();\n\n// 👇 Add the security headers to the start of the pipeline\napp.UseSecurityHeaders();\n\napp.MapGet(\"/\", () => \"Hello world!\");\n\napp.Run();\n The SecurityHeadersMiddleware registers a callback that adds several headers to all responses. By default, the middleware adds the following header to your responses: X-Content-Type-Options: nosniff X-Frame-Options: Deny Referrer-Policy: strict-origin-when-cross-origin Content-Security-Policy: object-src 'none'; form-action 'self'; frame-ancestors 'none' Strict-Transport-Security: max-age=31536000; includeSubDomains - only applied to HTTPS responses Cross-Origin-Opener-Policy: same-origin Cross-Origin-Embedder-Policy: credentialless Cross-Origin-Resource-Policy: same-origin These headers were chosen based on guidance from OWASP to provide security hardening benefits, while being broadly applicable to most applications.  These headers don't represent the most secure set you could choose, but rather a \"generally safe\" set for most applications. Ideally you should customise these headers to add a more secure (and more restrictive) set.  If you want to change the headers that are applied, you can create an instance of HeaderPolicyCollection, and use the fluent builder interface to customize the added headers. The following shows an example which specifically adds all the default headers independently, and then adds an extra custom header. var policyCollection = new HeaderPolicyCollection()\n    .AddFrameOptionsDeny()\n    .AddContentTypeOptionsNoSniff()\n    .AddStrictTransportSecurityMaxAge(maxAgeInSeconds: 60 * 60 * 24 * 365) // maxage = one year in seconds\n    .AddReferrerPolicyStrictOriginWhenCrossOrigin()\n    .RemoveServerHeader()\n    .AddContentSecurityPolicy(builder =>\n    {\n        builder.AddObjectSrc().None();\n        builder.AddFormAction().Self();\n        builder.AddFrameAncestors().None();\n    })\n    .AddCrossOriginOpenerPolicy(x => x.SameOrigin())\n    .AddCrossOriginEmbedderPolicy(builder => builder.Credentialless())\n    .AddCrossOriginResourcePolicy(builder => builder.SameSite())\n    .AddCustomHeader(\"X-My-Test-Header\", \"Header value\");\n\napp.UseSecurityHeaders(policyCollection);\n For most of the history of NetEscapades.AspNetCore.SecurityHeaders, this was been the only way to configure the security headers for your application. The advantage is that it's simple—there's no services to add, nothing to \"reason\" about—whatever headers you configure, are added. However, some people wanted more control, for example to be able to add different headers to different endpoints in their application, or to customize the headers on a request-by-request basis. That flexibility is largely what the changes in 1.0.0 are about, but as this is a major version, I took the opportunity to make some other larger changes too. For the rest of this post I'll describe some of the biggest changes in 1.0.0. Major changes in 1.0.0 The following sections describe the high level changes and features included in 1.0.0. Before we get started, the first thing to note is that NetEscapades.AspNetCore.SecurityHeaders finally has a logo:  A big thanks to Khalid for putting that together so quickly! Now lets look at the new features and breaking changes. Changes to the supported frameworks I first created NetEscapades.AspNetCore.SecurityHeaders way back in 2016, when ASP.NET Core was just being released. Back then, ASP.NET Core could also be run on .NET Framework. The original thought was that this mode would serve as a migration path from ASP.NET to ASP.NET Core. That path is rarely recommended these days, and instead, a \"strangler fig\" pattern is recommended. ASP.NET Core has not been supported on .NET Framework since version 2.1 (OK, ASP.NET Core 2.3 now), and as such 1.0.0 of NetEscapades.AspNetCore.SecurityHeaders finally drops support for .NET Framework too, by dropping support for netstandard2.0 and everything prior to .NET Core 3.1.  You might be wondering \"why .NET Core 3.1+ and not .NET 8+, seeing as that's all that's supported by Microsoft\". The short answer, is that supporting the extra TFMs requires basically no extra work, and it means more people can use the package. I'm not really losing anything by supporting the earlier TFMs. Sure, there's probably a few cases where I'd use different APIs if targeting .NET 8, but those are few and far between.  Given the package still supports .NET Core 3.1+ it's very unlikely you'll be impacted by this change unless you're on a (very) unsupported version of .NET Core. And if you are, I would strongly advise you to update anyway! Changes to headers In the next section I describe some of the changes to specific security headers, including changes to default values, new APIs, and deprecated methods. Changes to the default headers When you don't specify a custom HeaderPolicyCollection, NetEscapades.AspNetCore.SecurityHeaders applies a default set of headers, as I described previously. These headers are encapsulated in the AddDefaultSecurityHeaders() extension method, so the following are equivalent: app.UseSecurityHeaders(); // 👈 This...\n\nvar policies = new HeaderPolicyCollection()\n    .AddDefaultSecurityHeaders();\napp.UseSecurityHeaders(policies); // 👈 ..is equivalent to this.\n In 1.0.0-preview.1 the headers that are applied have changed slightly: Cross-Origin-Opener-Policy: same-origin is now added. Cross-Origin-Embedder-Policy: credentialless is now added. Cross-Origin-Resource-Policy: same-origin is now added. X-XSS-Protection=1; mode-block is no longer added. The full set of headers added by default are now: X-Content-Type-Options: nosniff X-Frame-Options: Deny Referrer-Policy: strict-origin-when-cross-origin Content-Security-Policy: object-src 'none'; form-action 'self'; frame-ancestors 'none' Cross-Origin-Opener-Policy: same-origin Cross-Origin-Embedder-Policy: credentialless Cross-Origin-Resource-Policy: same-origin Strict-Transport-Security: max-age=31536000; includeSubDomains - HTTPS responses only If you don't want this change, you can simply create a custom HeaderPolicyCollection configured as it was previously: new HeaderPolicyCollection()\n  .AddFrameOptionsDeny()\n  .AddXssProtectionBlock() // This is no longer included by default\n  .AddContentTypeOptionsNoSniff()\n  .AddStrictTransportSecurityMaxAge()\n  .AddReferrerPolicyStrictOriginWhenCrossOrigin()\n  .RemoveServerHeader()\n  .AddContentSecurityPolicy(builder =>\n  {\n      builder.AddObjectSrc().None();\n      builder.AddFormAction().Self();\n      builder.AddFrameAncestors().None();\n  });\n X-XSS-Protection=1; mode-block is no longer recommended You may wonder why X-XSS-Protection was removed from the default headers. The X-XSS-Protection header is interesting in that it's a security header that used to be recommended to add to your applications to improve security. However these days it's not recommended, because, as described on MDN:  The X-XSS-Protection header \"can create XSS vulnerabilities in otherwise safe websites\"  That's clearly not an example of a good header to add by default, so it's been removed from the default set of security headers and marked obsolete. You can still add it to your application if you want to, it's just not recommended unless you understand the risks. Expect-CT is no longer recommended The Expect-CT header lets sites opt-in to certificate transparency requirements, but only Chrome and other Chromium-based browsers implemented Expect-CT, On top of that, Chromium deprecated the header in version 107 (Oct 2022), because Chromium now enforces CT by default. Given the header is deprecated and no longer recommended, it's now marked obsolete in NetEscapades.AspNetCore.SecurityHeaders. New PermisionsPolicyBuilder.AddDefaultSecureDirectives() method The Permissions-Policy header provides a way to allow or deny the browser from using various features, such as the Web Bluetooth API or the Camera. Support for Permissions-Policy has been available for some time (with many new policies added recently). One slight annoyance with building up a Permissions-Policy is that there are so many policies. If you're building a JSON API (for example) then you'll likely want to disable essentially all of them, at which point you're calling a lot of methods. 1.0.0 adds two new convenience method that add (most) of the headers recommended by OWASP for REST endpoints. If you just want to add the default set of directives you can call AddPermissionsPolicyWithDefaultSecureDirectives() directly on HeaderPolicyCollection: var policies = new HeaderPolicyCollection()\n    .AddPermissionsPolicyWithDefaultSecureDirectives();\n Alternatively, if you want to customize the Permissions-Policy, you can call PermissionsPolicyBuilder.AddDefaultSecureDirectives(), and then add (or override) additional directives: var policies = new HeaderPolicyCollection()\n    .AddPermissionsPolicy(p => \n    {\n        p.AddDefaultSecureDirectives(); // Add the default directives\n        p.AddAttributionReporting().None(); // Additional customization\n    });\n In both cases the default secure directives added are equivalent to: accelerometer=(), autoplay=(), camera=(), display-capture=(),\nencrypted-media=(), fullscreen=(), geolocation=(), gyroscope=(), magnetometer=(),\nmicrophone=(), midi=(), payment=(), picture-in-picture=(), publickey-credentials-get=(),\nscreen-wake-lock=(), sync-xhr=(), usb=(), web-share=(), xr-spatial-tracking=()\n Note that this isn't quite the same set of headers as suggested by OWASP, because NetEscapades.AspNetCore.SecurityHeaders doesn't include experimental features (to limit the scope and avoid too many breaking changes), but if you want to replicate those directives, you can always use the AddCustomDirective() helper. New support for Trusted Types The Trusted Types directive is part of the Content-Security-Policy (CSP) feature to prevent against cross-site-scripting (XSS) attacks. By using the Trusted Types APIs, in combination with the Trusted Types directive, you can prevent cross-site scripting attacks that use DOM-based attacks by leveraging dangerous APIs.  If you're new to the Trusted Types APIs, you can read about them in my post here that shows how the attacks work and how the CSP can protect you. It's worth noting that the Trusted Types API is currently only available in Chromium based browsers, but it has been available in Chromium since version 83, released in 2020.  You can add a trusted types directive to your CSP with NetEscapades.AspNetCore.SecurityHeaders using the AddRequireTrustedTypesFor() method. For example: var builder = new WebApplication.CreateBuilder();\nvar app = builder.Build();\n\n// Configure the policy\napp.UseSecurityHeaders(new HeaderPolicyCollection()\n    .AddContentSecurityPolicy(builder =>\n    {\n        // Add \"require-trusted-types-for 'script'\" header\n        builder.AddRequireTrustedTypesFor().Script();\n\n        // Add \"trusted-types my-policy\" header\n        builder.AddTrustedTypes().AllowPolicy(\"my-policy\");\n    }));\n\n// other configuration\napp.Run();\n This adds a header like the following to the response: Content-Security-Policy: require-trusted-types-for 'script'; trusted-types my-policy\n Attempting to execute a cross-site scripting attack using the dangerous innerHTML API will now fail with an error:  The require-trusted-types-for and trusted-types directives work together to protect your application in Chrome, and you can use a polyfill in other browsers. New AddDefaultApiSecurityHeaders() method The set of security headers added by AddDefaultSecurityHeaders() was chosen to provide a good balance between security and applicability for a basic ASP.NET Core website that's serving HTML. But many apps only serve JSON and are never expected to be loaded directly in the browser. In those scenarios we can apply a more \"aggressive\" set of headers. The new AddDefaultApiSecurityHeaders() extension method is designed for applying to APIs, and is based on the recommendation from OWASP. It adds the following headers (I've also highlighted any differences with AddDefaultSecurityHeaders()): X-Content-Type-Options: nosniff X-Frame-Options: Deny Referrer-Policy: no-referrer Compared to strict-origin-when-cross-origin for AddDefaultSecurityHeaders()  Content-Security-Policy: default-src 'none'; frame-ancestors 'none' Compared to object-src 'none'; form-action 'self'; frame-ancestors 'none' for AddDefaultSecurityHeaders()  Permissions-Policy: accelerometer=(), autoplay=(), camera=(), display-capture=(), encrypted-media=(), fullscreen=(), geolocation=(), gyroscope=(), magnetometer=(), microphone=(), midi=(), payment=(), picture-in-picture=(), publickey-credentials-get=(), screen-wake-lock=(), sync-xhr=(), usb=(), web-share=(), xr-spatial-tracking=() Not included in AddDefaultSecurityHeaders()  Cross-Origin-Opener-Policy: same-origin Cross-Origin-Embedder-Policy: require-corp Compared to credentialless for AddDefaultSecurityHeaders()  Cross-Origin-Resource-Policy: same-origin You can use AddDefaultApiSecurityHeaders() in your application by applying it to a HeaderPolicyCollection, for example: var builder = WebApplication.CreateBuilder();\nvar app = builder.Build();\n\n// 👇 Configure to use the API security headers\napp.UseSecurityHeaders(p => p.AddDefaultApiSecurityHeaders());\n\napp.MapGet(\"/\", () => \"Hello world!\");\napp.Run();\n It's worth noting that OWASP recommends always adding other non-security headers to API responses, such as Cache-Control: no-store and Content-Type. Feature-Policy is marked obsolete Feature-Policy is a now-obsolete name for the Permissions-Policy header. The header has been deprecated, and as such the extension methods for adding Feature-Policy to your header collection have been marked [Obsolete]. You're recommended to switch to using Permissions-Policy instead. Applying different headers to some endpoints The biggest feature by far in 1.0.0 is the ability to apply different headers to different endpoints. This can be particularly useful if you want to maximally lock down your site, for example by applying a more restrictive Content-Security-Policy on certain pages, and relaxing it only when necessary. Let's say, for example, that your application contains both HTML and JSON endpoints. Perhaps you're serving HTML via Razor Pages, but you have some API endpoints that are also available. You would want to: Apply the default security headers to all responses by default For the API endpoints, apply the headers added by AddDefaultApiSecurityHeaders() Prior to 1.0.0, that wasn't possible, but now it is! 🎉 To achieve this we need to do 3 things: Configure default and named policies for the application. Add the middleware using UseSecurityHeaders() (as before). Apply custom policies to endpoints. The following example shows all of those steps var builder = WebApplication.CreateBuilder(args);\n\nbuilder.Services.AddRazorPages();\n\n// 1. 👇 Configure the policies for the application\nbuilder.Services.AddSecurityHeaderPolicies()\n  .SetDefaultPolicy(p => p.AddDefaultSecurityHeaders()) // 👈 Configure the default policy\n  .AddPolicy(\"API\", p => p.AddDefaultApiSecurityHeaders()); // 👈 Configure named policies\n\nvar app = builder.Build();\n\n// 2. 👇 Add the security headers middleware\napp.UseSecurityHeaders();\n\napp.UseHttpsRedirection();\napp.UseStaticFiles();\napp.UseRouting();\napp.UseAuthorization();\n\napp.MapRazorPages();\napp.MapGet(\"/api\", () => \"Hello world\")\n  .WithSecurityHeadersPolicy(\"API\"); // 3. 👈 Apply a named policy to the endpoint\n\napp.Run();\n In the example above, the default security headers are applied to all responses except when the /api endpoint is invoked, in which case the named policy \"API\" is applied (which adds the AddDefaultApiSecurityHeaders() headers instead).  If you're working with MVC controllers or Razor Pages, you can apply a named policy to an endpoint using the [SecurityHeadersPolicy] attribute.  This should cater to the vast majority of cases where you need to apply multiple policies in an application, but if you really need it, you can now completely customise the policy that's applied, as you'll see in the next section. Customizing the headers completely Applying different policies to different endpoints works well when you have a fixed number of policies to apply. However, in some cases you need to completely customise the headers for a given request. This might be the case if, for example, you are running a multi-tenant application, and the headers need to be matched to the incoming request. In 1.0.0, you can now completely customize the headers that will be applied by providing a lambda method that is executed just before the headers are applied, and by returning the HeaderPolicyCollection to apply. For example, lets imagine that you want to apply a different set of headers for some requests. You can call the SetPolicySelector(), as shown below, and provide a function to execute whenever a policy is about to be applied: var builder = WebApplication.CreateBuilder(args);\n\nbuilder.Services.AddSecurityHeaderPolicies()\n  .SetPolicySelector((PolicySelectorContext ctx) =>\n  {\n      // TODO: anything you need to build the HeaderPolicyCollection\n      // e.g. use services from the DI container (if you need to)\n      IServiceProvider services = ctx.HttpContext.RequestServices; \n\n      var selector = services.GetService<TenantHeaderPolicyCollectionSelector>();\n      var tenant = services.GetService<ITenant>();\n\n      HeaderPolicyCollection policy = selector.GetPolicyForTenant(tenant);\n      return policy; // 👈 This is the policy that is applied\n  });\n\nvar app = builder.Build();\n\napp.UseSecurityHeaders();\napp.MapGet(\"/api\", () => \"Hello world\");\napp.Run();\n The lambda/method you pass to SetPolicySelector() is provided a PolicySelectorContext, which includes all the information you might need to decide which policy to apply: HttpContext HttpContext—The current HttpContext for the request. IReadOnlyDictionary<string, IReadOnlyHeaderPolicyCollection> ConfiguredPolicies—The named policies configured for the application. IReadOnlyHeaderPolicyCollection DefaultPolicy—The default policy that applies to the request. string? EndpointPolicyName—The name of the endpoint policy that applies to the request, if any. IReadOnlyHeaderPolicyCollection? EndpointPolicy—The endpoint policy that applies to the request, if any. If no endpoint-specific policy applies to the request, returns null. IReadOnlyHeaderPolicyCollection SelectedPolicy—The policy that would be applied to the endpoint by default: equivalent to EndpointPolicy if available, otherwise DefaultPolicy. Your policy selector must return a policy collection. If you don't want to customise the policy for the request, return ctx.SelectedPolicy.  Note that you should avoid building a new HeaderPolicyCollection on every request for performance reasons. Where possible, cache and reuse HeaderPolicyCollection instances. If you do need to create a new HeaderPolicyCollection from a IReadOnlyHeaderPolicyCollection, you can call Copy() to return a mutable instance.  With the combination of endpoint-specific policies and the customisation available in SetPolicySelector(), I hope that people will now be able to customise their applications more easily, without needing to resort to hacking the internals of the library! \"Document headers\" functionality has been removed One consequence of the additional customisation possible with SetPolicySelector() and endpoint policies is that the concept of \"document headers\" have been removed. The ApplyDocumentHeadersToContentTypes() and ApplyDocumentHeadersToAllResponses() extension methods have now been marked [Obsolete] and are no-ops. These methods were originally added because some security headers don't really make sense when applied to passive content like JSON responses compared to HTML responses. Consequently, by default, some security headers (such as Content-Security-Policy) would be omitted unless the response was HTML or JavaScript. The only real benefit to this approach was that it reduced the size of the response (by omitting some headers). The down-side was that it added confusion and an additional configuration knob people had to consider. What's more, OWASP actually recommends you do send these headers, even if you have no intention of returning HTML, as part of a defence-in-depth approach. What's more, some of the headers that were previously considered \"document/HTML only\" actually should be added to all responses to protect against drag-and-drop style clickjacking attacks. So in 1.0.0 the concept of a DocumentHeaderPolicy has been removed, and headers are always applied to all requests regardless of the response content type.  Mostly…some headers only apply to HTTPS requests for example, or should not be applied to localhost requests. But the \"document header\" concept is no more.  If you want to re-instate the \"document header\" functionality for some reason, you can recreate something similar with SetPolicySelector(). There are lots of different ways you could achieve it, but here's one example: var builder = WebApplication.CreateBuilder(args);\n\n// The mime types considered \"documents\"\nstring[] documentTypes = [ \"text/html\", \"application/javascript\", \"text/javascript\" ];\nvar documentPolicy = new HeaderPolicyCollection().AddDefaultSecurityHeaders();\n\nbuilder.Services.AddSecurityHeaderPolicies()\n  .SetDefaultPolicy(p => p.AddDefaultApiSecurityHeaders())\n  .SetPolicySelector(ctx =>\n  {\n      // If the response is one of the \"document\" types...\n      if (documentTypes.Contains(ctx.HttpContext.Response.ContentType))\n      {\n          // ... then return the \"document\" policy\n          return documentPolicy;\n      }\n\n      // Otherwise return the original selected policy\n      return ctx.SelectedPolicy;\n  });\n\nvar app = builder.Build();\n\napp.UseSecurityHeaders();\napp.MapGet(\"/api\", () => \"Hello world\");\napp.Run();\n As I've already said, I don't recommend you do this, but the point is that now you can if you want to, which is why I chose to remove the document headers functionality. Changes to nonce generation In previous versions of NetEscapades.AspNetCore.SecurityHeaders a nonce (number used once) was generated at the start of a request only when required by a Content-Security-Policy. However, with the changes in 1.0.0 it's no longer possible to know ahead of time that a nonce will be required (because the header policies can change later in the request, due to a named endpoint policy for example). As a result, the nonce is no longer generated at the start of the request. Instead, it's generated lazily when you call HttpContext.GetNonce(). The end result is the same as before—a single nonce is generated per-request, and only when it's required. The slight breaking change is the fact that you now must call GetNonce() to retrieve the nonce. Previously you could have retrieved the nonce directly from HttpContext.Items (even though that wasn't explicitly supported); in 1.0.0 that's no longer possible. That covers the majority of the major changes made between versions 0.24.0 and 1.0.0. You can find the full diff here, including an API diff (using the workflow I described in a previous post). Updates to build provenance The final category of updates in 1.0.0 are related to how the project is built and packaged. In summary, for each public release, you can now find: Provenance attestations describing the build and pipeline that produced the NuGet package. Software Bill of Materials (SBOM) in CycloneDX format. An attestation for the SBOM that links the generated SBOM to the NuGet package. Unfortunately, as described in the above linked posts, nuget.org modifies packages that are uploaded to it, so verifying the above attestations is more convoluted than would be ideal, but is described in the project README. Summary Adding security-related headers to your HTTP responses is an easy way to harden your application against attacks. NetEscapades.AspNetCore.SecurityHeaders provides an easy way to do this, and has recently been through some major changes that I'm looking for feedback on before releasing the final stable version. In summary, the major changes are: Support for .NET Core 3.1+ only Updates to headers Changes to the default headers New utility methods for adding API-related security headers and a locked-down Permissions-Policy header X-XSS-Protection, Expect-CT, and Feature-Policy are now obsolete  Support for applying different header policies to different endpoints Support for customizing the header policy per-request Removal of \"document header\" concept Changes to nonce generation. I recommend updating to 1.0.0 now. There have been 4 preview releases since 0.24.0 so I'm pretty comfortable with the current release. But nevertheless, if you find any issues, please let me know by opening an issue on GitHub. Thanks!"
  },
  {
    "itemId": "https://andrewlock.net/verifiying-tricky-git-rebases-with-range-diffs/",
    "raw": "<img src=\"https://andrewlock.net/content/images/2025/range_diff_banner.png\" /><p>In this post I look at the <code>git range-diff</code> feature, available from git 2.19. I describe how it is meant to work, explain the output format, and demonstrate my attempt to test it with a small app.</p> <h2 id=\"what-is-git-range-diff-\" class=\"heading-with-anchor\"><a href=\"#what-is-git-range-diff-\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">What is <code>git range-diff</code>?</a></h2> <p>I'm a big fan of <code>git rebase</code> for moving commits around, for cleaning up iterative work, for <a href=\"/working-with-stacked-branches-in-git-is-easier-with-update-refs/\">working with stacked branches</a>, and for including recent changes on <code>main</code> into my feature branch.</p> <p>However, there's no denying that things can sometimes get confusing with <code>git rebase</code>. It's true that pretty much everything you do with <code>git rebase</code> can be reversed if you make a mistake, but it's not always obvious whether there <em>is</em> a mistake. This is particularly true when you've done a lot of interactive rebasing, when the branch you're rebasing <em>onto</em> has changed a lot, or when you have to resolve a bunch of merge conflicts.</p> <p>There are various sub-optimal approaches you could use to try to understand if a rebase is \"correct\", but from my experience none of these work very well, either because they're confusing, hard to do, or simply don't produce an easy to understand result.</p> <p><code>git range-diff</code> is meant to help with exactly this scenario. It can be used to compare two <em>ranges</em> of commits (compared to <code>git diff</code> which compares the state at two different commits directly). It's best to think of <code>git range-diff</code> as performing a <code>diff</code> of two <code>git-diff</code>s—because that's literally how it works behind the scenes!</p> <p>In theory, this makes it possible to compare a stack of commits <em>prior</em> to rebasing with the stack of commits <em>after</em> rebasing and to show the differences between them. If the rebase was simply rearranging and squashing commits then you would expect the diffs to be identical, and the diff of diffs would show that.</p> <p>On the other hand, if you had to handle merge conflicts as part of the rebase, or if you rebased onto a different commit, then you might <em>expect</em> there to be changes, and these would be shown by <code>git range-diff</code></p> <h2 id=\"using-git-range-diff\" class=\"heading-with-anchor\"><a href=\"#using-git-range-diff\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Using <code>git range-diff</code></a></h2> <p>At the end of the post I'll show a real worked example of <code>git range-diff</code>, but the basic syntax (in the most useful form IMO) is as follows:</p> <pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> range-diff base1<span class=\"token punctuation\">..</span>head1 base2<span class=\"token punctuation\">..</span>head2\n</code></pre> <p>where you have a git commit tree that looks something the following</p> <pre class=\"language-git\"><code class=\"language-git\">                    h-i-head2\n                   /\na-b-c-base1-d-e-base2\n        \\\n         f-g-head1\n</code></pre> <p>So for the example above, <code>git range-diff</code> essentially does the following:</p> <ul><li>Perform a <code>git diff base1..head1</code> (i.e. <code>base1</code>, <code>f</code>, <code>g</code>, and <code>head1</code>), and generate a \"patch\"</li> <li>Perform a <code>git diff base2..head2</code> (i.e. <code>base2</code>, <code>h</code>, <code>i</code>, and <code>head2</code>), and generate a \"patch\"</li> <li>Perform a <code>git diff</code> between the two patches</li></ul> <p><code>git range-diff</code> Compares the content of the files, but then also compares the <em>order</em> of the commits, and the metadata in those commits, such as the commit messages. The resulting output is, frankly, quite confusing, so I'll walk through what it means in the next section.</p> <h2 id=\"understanding-the-output-format\" class=\"heading-with-anchor\"><a href=\"#understanding-the-output-format\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Understanding the output format</a></h2> <p>As mentioned above, the output format of <code>git range-diff</code> can be pretty hard to understand in my experience. The image below is taken from <a href=\"https://github.blog/open-source/git/highlights-from-git-2-19/\">a GitHub blog post</a> and shows a relatively simple example of the expected output</p> <p><img src=\"/content/images/2025/range_diff.webp\" alt=\"A git range-diff output\"></p> <p>The output shows the series of commits that are being compared, and indicates whether commits have been reordered, and shows any difference in the commits between the two ranges. We'll dig more into the \"diff\" part shortly, but first let's just look at the commit list itself. I've added a header so we can describe each section subsequently:</p> <pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token number\">1</span><span class=\"token operator\">|</span>     <span class=\"token number\">2</span>  <span class=\"token operator\">|</span><span class=\"token number\">3</span><span class=\"token operator\">|</span><span class=\"token number\">4</span><span class=\"token operator\">|</span>     <span class=\"token number\">5</span>   <span class=\"token operator\">|</span>    <span class=\"token number\">6</span>\n------------------------------\n<span class=\"token number\">2</span>: 8d6b31f <span class=\"token operator\">=</span> <span class=\"token number\">1</span>:  d672a8f <span class=\"token function\">add</span> README.md\n<span class=\"token number\">1</span>: 3386b9a <span class=\"token operator\">=</span> <span class=\"token number\">2</span>:  02c0d21 <span class=\"token function\">add</span> hello/goodbye world\n<span class=\"token number\">3</span>: bc293cc <span class=\"token operator\">!</span> <span class=\"token number\">3</span>:  251b232 hello: fix typo\n-: ------- <span class=\"token operator\">&gt;</span> <span class=\"token number\">4</span>:  a835e18 goodbye: <span class=\"token function\">add</span> missing newline\n</code></pre> <p>This output shows how the commits in the two branches have changed, been reordered, been added or removed. From left-to-right, these sections are as follows:</p> <ol><li>The position of the left-hand side commit in the commit range being compared. For example, <code>2</code> indicates it was the second commit in the commit list. <code>-</code> indicates no matching commit was found in the left hand side commit range.</li> <li>The short commit hash for the left-hand commit.</li> <li>The equality of the commits being compared. <code>=</code> indicates they are equal, <code>!</code> means they were different, <code>&gt;</code> means it was only in the right-hand side, <code>&lt;</code> means it was only on the left-hand side.</li> <li>The position of the right-hand side commit in the commit range being compared. In the example above, you can see that the second commit on the left was matched to the second commit on the right.</li> <li>The short commit hash for the right-hand commit. Even for \"equal\" commits, these hashes are likely to differ as the commits may have different parents.</li> <li>The commit message for the commits. If the commits differ, the right-hand-side message is shown and a diff for the commit message is shown.</li></ol> <p>In the image above, we can see that the order of the first two commits have been swapped by comparing the commit orders. The fourth commit on the right-hand side was not present in the left-hand side range.</p> <p>The third commit is where things get interesting. The commit list shows that the commit on the left and right were matched, but not equal (indicated by <code>!</code>). Whenever you have inequality like this, <code>git range-diff</code> provides a diff of what changed.</p> <p>The first part of the difference was in the commit message, which shows:</p> <pre class=\"language-diff\"><code class=\"language-diff\"><span class=\"token coord\">@@ -2,7 +2,7 @@</span>\n<span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span><span class=\"token line\">    hello: fix typo\n</span></span>\n<span class=\"token deleted-sign deleted\"><span class=\"token prefix deleted\">-</span><span class=\"token line\">   \"Hello\" has two l's.\n</span></span><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span><span class=\"token line\">   \"Hello\" has two l's. Let's also fix the missing newline.\n</span></span></code></pre> <p>This is a pretty standard <code>git diff</code> format between the left- and right-hand side commits. It indicates that we added the text <code>Let's also fix the missing newline.</code> to the commit message.</p> <p>Where things get more complicated is in comparing the diffs of the commit. Remember, <code>git range-diff</code> is a \"diff of diffs\", and diffs <em>already</em> contain <code>-</code> and <code>+</code> prefixes at the start of the line. So <code>git range-diff</code> has <em>double</em> prefixes: 😅</p> <pre class=\"language-diff\"><code class=\"language-diff\">diff --git a/hello.c b/hello.c\n<span class=\"token coord\">--- a/hello.c</span>\n<span class=\"token coord\">@@ -12,6 +12,6 @@</span>\n<span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span><span class=\"token line\">   int main(void)\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">   {\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">-      printf(\"Helo world\");\n</span></span><span class=\"token deleted-sign deleted\"><span class=\"token prefix deleted\">-</span><span class=\"token line\">+      printf(\"Hello world\");\n</span></span><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span><span class=\"token line\">+      printf(\"Hello world\\n\");\n</span></span><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span><span class=\"token line\">       return 0;\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">   }\n</span></span></code></pre> <p>Let's think about what this means. <em>Only</em> the left-hand most column, i.e. left-most prefix, indicates a <em>difference</em> between the two sides. The first line with any prefix only has a single <code>-</code> character:</p> <pre class=\"language-diff\"><code class=\"language-diff\"><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span><span class=\"token line\">-      printf(\"Helo world\");\n</span></span></code></pre> <p>That means that <em>both</em> commits removed this line, so there's <em>no</em> difference_ between the commit ranges for this line. In contrast, the next two lines have two prefix symbols:</p> <pre class=\"language-diff\"><code class=\"language-diff\"><span class=\"token deleted-sign deleted\"><span class=\"token prefix deleted\">-</span><span class=\"token line\">+      printf(\"Hello world\");\n</span></span><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span><span class=\"token line\">+      printf(\"Hello world\\n\");\n</span></span></code></pre> <p>The first of these lines starts with <code>-+</code>, which means the left-hand side commit <em>was</em> adding this commit, but the right hand side no longer is. Conversely, the <code>++</code> indicates the right-hand side is <em>newly</em> adding this line.</p> <p>Remembering these suffixes is difficult, so the following table describes what the symbols mean</p> <table><thead><tr><th style=\"text-align:right\">Prefix symbol</th><th>Left-hand commit</th><th>Right-hand commit</th></tr></thead><tbody><tr><td style=\"text-align:right\">(None)</td><td>No change</td><td>No change</td></tr><tr><td style=\"text-align:right\"><code> -</code></td><td>Removed the line</td><td>Removed the line</td></tr><tr><td style=\"text-align:right\"><code> +</code></td><td>Added the line</td><td>Added the line</td></tr><tr><td style=\"text-align:right\"><code>+-</code></td><td>No change</td><td>Removes the line</td></tr><tr><td style=\"text-align:right\"><code>++</code></td><td>No change</td><td>Adds the line</td></tr><tr><td style=\"text-align:right\"><code>--</code></td><td>Removed the line</td><td>\"Removes the removal\", so no longer removes the line.<br> i.e. it adds the line back that the left hand side removed.</td></tr><tr><td style=\"text-align:right\"><code>-+</code></td><td>Added the line</td><td>\"Removes the add\", so no longer adds the line.<br> i.e. it removes the line that the left hand side added.</td></tr></tbody></table> <p>I think it's quite difficult to intuitively remember the behaviours here. The best I can achieve is working through the logic of the above table 😅</p> <p>The <code>git range-diff</code> output <em>does</em> try to help guide your understanding by only highlighting the <em>first</em> character in the prefix, i.e. lines that are actually different between left and right, as opposed to changes that appear in both diffs.</p> <p>Note that if you <em>only</em> want to see the changes in the commit list, and don't want to see the full diff then you can use the <code>-s</code> or <code>--no-patch</code> arguments, Using something like the following:</p> <pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> range-diff --no-patch base1<span class=\"token punctuation\">..</span>head1 base2<span class=\"token punctuation\">..</span>head2\n<span class=\"token comment\"># or</span>\n<span class=\"token function\">git</span> range-diff <span class=\"token parameter variable\">-s</span> base1<span class=\"token punctuation\">..</span>head1 base2<span class=\"token punctuation\">..</span>head2\n</code></pre> <p>In the next section I show the experience I found testing out <code>git range-diff</code> on a small sample.</p> <h2 id=\"trying-it-out-in-a-small-sample\" class=\"heading-with-anchor\"><a href=\"#trying-it-out-in-a-small-sample\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Trying it out in a small sample</a></h2> <p>Whenever I discover a new git feature, I like to try it out in small samples to try to get an initial feeling for it. I then expand to larger projects later once I have a handle on how the feature works. Unfortunately, for <code>git range-diff</code> I was not very impressed with what I found. I think that's partly just because the output of <code>git range-diff</code> is relatively hard to parse. But there are also some aspects that seem generally ill-suited to the very small diffs I've used in this example.</p> <h3 id=\"setting-up-a-simple-test-app\" class=\"heading-with-anchor\"><a href=\"#setting-up-a-simple-test-app\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Setting up a simple test app</a></h3> <p>The test app I used is a vey simple minimal API project. I created the initial project as follows:</p> <pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> init\ndotnet new web\ndotnet new gitignore\n<span class=\"token function\">git</span> commit <span class=\"token parameter variable\">-m</span> <span class=\"token string\">\"Initial Commit\"</span>\n</code></pre> <p>This generates the default minimal API app, as follows:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> builder <span class=\"token operator\">=</span> WebApplication<span class=\"token punctuation\">.</span><span class=\"token function\">CreateBuilder</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> app <span class=\"token operator\">=</span> builder<span class=\"token punctuation\">.</span><span class=\"token function\">Build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">MapGet</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token string\">\"Hello world!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">Run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre> <p>From there, I simulated work occurring both in a feature branch and directly on <code>main</code>.</p> <h3 id=\"parallel-work-streams-on-my_feature-and-main\" class=\"heading-with-anchor\"><a href=\"#parallel-work-streams-on-my_feature-and-main\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Parallel work streams on <code>my_feature</code> and <code>main</code></a></h3> <p>In general I'm pretty comfortable using <code>git rebase</code> to interactively squash, rearrange, and split commits. I use it daily to tidy up PRs before pushing them for review, and when working with stacked PRs. But one area where I'm often lacking confidence is after rebasing onto <code>main</code> and having to deal with merge conflicts. That seems like the really killer app for <code>git range-diff</code> in theory, so I set out to see what that would look like.</p> <p>I started by creating a branch called <code>my_feature</code>. I then made 5 commits to this branch making trivial changes:</p> <ol><li>Added an <code>Example(string, string)</code> record in the <code>Example.cs</code> file.</li> <li>Added an <code>/example</code> endpoint.</li> <li>Updated the <code>/example</code> endpoint to return an <code>Example</code> instance.</li> <li>Updated the <code>/</code> (hello world) endpoint to return an <code>Example</code> instance instead of <code>\"Hello world!\"</code>.</li> <li>Reverted the previous change to return <code>\"Hello World\"</code> (note the missing <code>!</code>)</li></ol> <p>After all those commits (which were intentionally circuitous), Program.cs looks like this:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> builder <span class=\"token operator\">=</span> WebApplication<span class=\"token punctuation\">.</span><span class=\"token function\">CreateBuilder</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> app <span class=\"token operator\">=</span> builder<span class=\"token punctuation\">.</span><span class=\"token function\">Build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">MapGet</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token string\">\"Hello World\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">MapGet</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/example\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Example</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Example 1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"The first example\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">Run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre> <p>I then switched back to <code>main</code>, and added an endpoint that lets you post a <code>name</code> to add to a dictionary. The <code>/</code> (hello world) endpoint was then updated to say Hello to each of the names:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Collections<span class=\"token punctuation\">.</span>Concurrent</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> builder <span class=\"token operator\">=</span> WebApplication<span class=\"token punctuation\">.</span><span class=\"token function\">CreateBuilder</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> app <span class=\"token operator\">=</span> builder<span class=\"token punctuation\">.</span><span class=\"token function\">Build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> names <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">ConcurrentDictionary<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">string</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">MapGet</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> names<span class=\"token punctuation\">.</span>Keys<span class=\"token punctuation\">.</span><span class=\"token function\">Select</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">=&gt;</span> <span class=\"token interpolation-string\"><span class=\"token string\">$\"Hello </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">n</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">!\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">MapPost</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/{name}\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> name<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> names<span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">Run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre> <p>Functionality wise, the changes on main mean you can make requests like this:</p> <pre class=\"language-HTTP\"><code class=\"language-HTTP\">POST http://localhost:5116/James\n</code></pre> <p>and then when you hit <code>/</code> you get a result like this:</p> <pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">[</span><span class=\"token string\">\"Hello James!\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"Hello Andrew!\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"Hello Chris!\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"Hello David!\"</span><span class=\"token punctuation\">]</span>\n</code></pre> <p>At this point, our commit graph looks like the following:</p> <p><img src=\"/content/images/2025/range_diff_01.png\" alt=\"The git commit graph after the inital commits\"></p> <h3 id=\"rebasing-the-feature-branch\" class=\"heading-with-anchor\"><a href=\"#rebasing-the-feature-branch\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Rebasing the feature branch</a></h3> <p>We now want to rebase the <code>my_feature</code> branch on top of <code>main</code> instead of <code>base</code>. we start by creating a \"backup\" branch, to make it easy to revert if we run into any issues by running</p> <pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> checkout my_feature\n<span class=\"token function\">git</span> branch my_feature_bak <span class=\"token comment\"># Create a backup pointing to the same location</span>\n</code></pre> <p><img src=\"/content/images/2025/range_diff_02.png\" alt=\"Creating a backup branch\"></p> <p>For the rebase, we can run the following:</p> <pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> rebase base <span class=\"token parameter variable\">--onto</span> main --no-update-refs\n</code></pre> <blockquote> <p>Not the use of <code>--no-update-refs</code> here so that we <em>don't</em> accidentally rebase <code>my_feature_bak</code> at the same time. This is only necessary <a href=\"/working-with-stacked-branches-in-git-is-easier-with-update-refs/#enabling-update-refs-by-default\">if you enable <code>--update-refs</code> by default</a>.</p> </blockquote> <p>Unfortunately, we have a bunch of merge conflicts to contend with. There are the easy conflicts, where we're adding logically distinct endpoints but in conflicting locations in the file. Then there are the <em>difficult</em> merge conflicts, where we actually have modified the same logical code. That's primarily the Hello world endpoint which we initially modified in the <code>my_feature</code> branch and then (partially) reverted.</p> <p>Once we've fixed all the conflicts, we'll have a commit tree that looks something like the following:</p> <p><img src=\"/content/images/2025/range_diff_03.png\" alt=\"The final commits\"></p> <p>The final code in <code>my_feature</code> looks like this:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Collections<span class=\"token punctuation\">.</span>Concurrent</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> builder <span class=\"token operator\">=</span> WebApplication<span class=\"token punctuation\">.</span><span class=\"token function\">CreateBuilder</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> app <span class=\"token operator\">=</span> builder<span class=\"token punctuation\">.</span><span class=\"token function\">Build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> names <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">ConcurrentDictionary<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">string</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">MapGet</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> names<span class=\"token punctuation\">.</span>Keys<span class=\"token punctuation\">.</span><span class=\"token function\">Select</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">=&gt;</span> <span class=\"token interpolation-string\"><span class=\"token string\">$\"Hello </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">n</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">!\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">MapPost</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/{name}\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> name<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> names<span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">MapGet</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/example\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Example</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Example 1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"The first example\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">Run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre> <p>So now we come to the important part—what does <code>git range-diff</code> make of it?</p> <h3 id=\"verifying-the-merge-conflict-resolution-with-git-range-diff\" class=\"heading-with-anchor\"><a href=\"#verifying-the-merge-conflict-resolution-with-git-range-diff\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Verifying the merge conflict resolution with <code>git range-diff</code></a></h3> <p>To compare the branch prior to the rebase with post rebase we can use a command like the following:</p> <pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> range-diff base<span class=\"token punctuation\">..</span>my_feature_bak main<span class=\"token punctuation\">..</span>my_feature\n</code></pre> <p>This produces an output like the following:</p> <pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token number\">1</span>:  <span class=\"token number\">3070585</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span>:  ebd4946 Commit <span class=\"token number\">1</span>\n<span class=\"token number\">2</span>:  76df723 <span class=\"token operator\">&lt;</span> -:  ------- Commit <span class=\"token number\">2</span>\n<span class=\"token number\">3</span>:  e526ca2 <span class=\"token operator\">&lt;</span> -:  ------- Commit <span class=\"token number\">3</span>\n<span class=\"token number\">4</span>:  64856f3 <span class=\"token operator\">&lt;</span> -:  ------- Commit <span class=\"token number\">4</span>\n<span class=\"token number\">5</span>:  c96df0b <span class=\"token operator\">&lt;</span> -:  ------- Commit <span class=\"token number\">5</span>\n-:  ------- <span class=\"token operator\">&gt;</span> <span class=\"token number\">2</span>:  edbe245 Commit <span class=\"token number\">2</span>\n-:  ------- <span class=\"token operator\">&gt;</span> <span class=\"token number\">3</span>:  e06f56e Commit <span class=\"token number\">5</span>\n</code></pre> <p>or as a colourised image:</p> <p><img src=\"/content/images/2025/range_diff_04.png\" alt=\"The range-diff for the sample app\"></p> <p>The result was somewhat surprising to me. The only commit that <code>git</code> thinks is \"equal\" is Commit 1, which adds the <code>Example</code> record in a separate file. It's particularly interesting that <code>Commit 2</code> is not recognized as matching, given that the diff prior to the rebase was</p> <pre class=\"language-diff\"><code class=\"language-diff\"><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span><span class=\"token line\">var app = builder.Build();\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">app.MapGet(\"/\", () =&gt; \"Hello World!\");\n</span></span><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span><span class=\"token line\">app.MapGet(\"/example\", () =&gt; \"Example 1\");\n</span></span><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span><span class=\"token line\">\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">app.Run();\n</span></span></code></pre> <p>while post rebase it was:</p> <pre class=\"language-diff\"><code class=\"language-diff\"><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span><span class=\"token line\">app.MapGet(\"/\", () =&gt; names.Keys.Select(n =&gt; $\"Hello {n}!\"));\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">app.MapPost(\"/{name}\", (string name) =&gt; names[name] = name);\n</span></span><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span><span class=\"token line\">app.MapGet(\"/example\", () =&gt; \"Example 1\");\n</span></span><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span><span class=\"token line\">\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">app.Run();\n</span></span></code></pre> <p>Pretty similar, no!?</p> <p>The important thing to understand about <code>range-diff</code> is that it <em>doesn't</em> just diff the <code>-/+</code> lines, it's diffing the <em>whole</em> diff patch, <em>including</em> the context lines. If you look back at the previous two diffs, you can see that the existing changes on <code>main</code> mean that the unchanged lines in the diffs look significantly different from one another.</p> <p><a href=\"https://git-scm.com/docs/git-range-diff#_algorithm\">The algorithm</a> git uses has a \"fudge factor\" to determine how similar two diffs must be for them to be considered \"equal\". You can tweak this value wit the <code>--creation-factor</code>, which must be a value between 0-100 (default is 60). The higher the value, the more likely git is to find matches.</p> <p>For example, if we run the same comparison with <code>--creation-factor=90</code>, we get a very different <code>range-diff</code> (note that I'm hiding the diff patches here for brevity, the subsequent image shows the diff in all its glory)</p> <pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token operator\">&gt;</span>  <span class=\"token function\">git</span> range-diff base<span class=\"token punctuation\">..</span>my_feature_bak main<span class=\"token punctuation\">..</span>my_feature --creation-factor<span class=\"token operator\">=</span><span class=\"token number\">90</span> <span class=\"token parameter variable\">-s</span>\n<span class=\"token number\">1</span>:  <span class=\"token number\">3070585</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span>:  ebd4946 Commit <span class=\"token number\">1</span>\n<span class=\"token number\">2</span>:  76df723 <span class=\"token operator\">!</span> <span class=\"token number\">2</span>:  edbe245 Commit <span class=\"token number\">2</span>\n<span class=\"token number\">3</span>:  e526ca2 <span class=\"token operator\">&lt;</span> -:  ------- Commit <span class=\"token number\">3</span>\n<span class=\"token number\">4</span>:  64856f3 <span class=\"token operator\">&lt;</span> -:  ------- Commit <span class=\"token number\">4</span>\n<span class=\"token number\">5</span>:  c96df0b <span class=\"token operator\">!</span> <span class=\"token number\">3</span>:  e06f56e Commit <span class=\"token number\">5</span>\n</code></pre> <p>The results here look much closer to what we actually expect; <code>Commit 2</code> is matched in both branches for example. I think the full diff is still somewhat confusing however:</p> <p><img src=\"/content/images/2025/range_diff_05.png\" alt=\"The range-diff with --creation-factor=90\"></p> <p>Take a moment to try to parse this output. Both of the commit diffs highlight that there are differences related to the <code>/</code> and <code>/{name}</code> endpoints. That's expected, because those changes were introduced in the <code>main</code> branch, and so are present in the rebased branch, but <em>not</em> in the \"prior\" scenario.</p> <p>Where things look a bit strange are on the first lines in the diff:</p> <pre class=\"language-diff\"><code class=\"language-diff\"><span class=\"token deleted-sign deleted\"><span class=\"token prefix deleted\">-</span><span class=\"token line\">@@ Program.cs: var builder = WebApplication.CreateBuilder(args);\n</span><span class=\"token prefix deleted\">-</span><span class=\"token line\"> var app = builder.Build();\n</span></span><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span><span class=\"token line\">@@ Program.cs: var names = new ConcurrentDictionary&lt;string, string&gt;();\n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\"> app.MapGet(\"/\", () =&gt; names.Keys.Select(n =&gt; $\"Hello {n}!\"));\n</span></span></code></pre> <p>When I first look at that diff, it <em>looks</em> like it's saying that the lines <code>var app = builder.Build();</code> etc have been <em>removed</em> from the rebased commit stack, which would obviously be an error. However, it's more complicated than that. Remember git does a very crude <code>git diff</code> of the commit <em>patch</em>, which means it's also diffing the <em>context</em>. That's what we have here—differences in the context.</p> <p>Due to the changes in <code>main</code> the context around the changed lines (<code>/example</code>) are fundamentally different, and <em>that's</em> what's showing up here.</p> <p>Unfortunately, I'm not sure there's a good fix for that. This is integral to how <code>git range-diff</code> works, so I think the only answer is getting comfortable with the confusing output. The main thing I wonder is whether I'd be able to spot a genuine merge-conflict error amongst this noise. I guess time will tell, as I try this in realistic scenarios. Given that the Linux kernel uses it, I think it's safe to say it's certainly possible to use it successfully!</p> <h2 id=\"summary\" class=\"heading-with-anchor\"><a href=\"#summary\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Summary</a></h2> <p>In this post I looked at the <code>git range-diff</code> feature. I discuss the scenarios it's designed to help with, and how it works as a diff-of-diffs. Next I explained the output format it uses, which can be difficult to parse thanks to the confusion in showing a diff-of-diff patches. Finally I tried out the feature on a small toy sample in which I rebased a branch and resolved merge conflicts. In my test example, the result was very dependent on the \"fudge factor\" parameter, and the output was difficult to discern genuine changes from changes in the surrounding context. I suspect it may be primarily a case of needing practice to read the output on my part.</p> ",
    "sanitized": "In this post I look at the git range-diff feature, available from git 2.19. I describe how it is meant to work, explain the output format, and demonstrate my attempt to test it with a small app. What is git range-diff? I'm a big fan of git rebase for moving commits around, for cleaning up iterative work, for working with stacked branches, and for including recent changes on main into my feature branch. However, there's no denying that things can sometimes get confusing with git rebase. It's true that pretty much everything you do with git rebase can be reversed if you make a mistake, but it's not always obvious whether there is a mistake. This is particularly true when you've done a lot of interactive rebasing, when the branch you're rebasing onto has changed a lot, or when you have to resolve a bunch of merge conflicts. There are various sub-optimal approaches you could use to try to understand if a rebase is \"correct\", but from my experience none of these work very well, either because they're confusing, hard to do, or simply don't produce an easy to understand result. git range-diff is meant to help with exactly this scenario. It can be used to compare two ranges of commits (compared to git diff which compares the state at two different commits directly). It's best to think of git range-diff as performing a diff of two git-diffs—because that's literally how it works behind the scenes! In theory, this makes it possible to compare a stack of commits prior to rebasing with the stack of commits after rebasing and to show the differences between them. If the rebase was simply rearranging and squashing commits then you would expect the diffs to be identical, and the diff of diffs would show that. On the other hand, if you had to handle merge conflicts as part of the rebase, or if you rebased onto a different commit, then you might expect there to be changes, and these would be shown by git range-diff Using git range-diff At the end of the post I'll show a real worked example of git range-diff, but the basic syntax (in the most useful form IMO) is as follows: git range-diff base1..head1 base2..head2\n where you have a git commit tree that looks something the following                     h-i-head2\n                   /\na-b-c-base1-d-e-base2\n        \\\n         f-g-head1\n So for the example above, git range-diff essentially does the following: Perform a git diff base1..head1 (i.e. base1, f, g, and head1), and generate a \"patch\" Perform a git diff base2..head2 (i.e. base2, h, i, and head2), and generate a \"patch\" Perform a git diff between the two patches git range-diff Compares the content of the files, but then also compares the order of the commits, and the metadata in those commits, such as the commit messages. The resulting output is, frankly, quite confusing, so I'll walk through what it means in the next section. Understanding the output format As mentioned above, the output format of git range-diff can be pretty hard to understand in my experience. The image below is taken from a GitHub blog post and shows a relatively simple example of the expected output  The output shows the series of commits that are being compared, and indicates whether commits have been reordered, and shows any difference in the commits between the two ranges. We'll dig more into the \"diff\" part shortly, but first let's just look at the commit list itself. I've added a header so we can describe each section subsequently: 1|     2  |3|4|     5   |    6\n------------------------------\n2: 8d6b31f = 1:  d672a8f add README.md\n1: 3386b9a = 2:  02c0d21 add hello/goodbye world\n3: bc293cc ! 3:  251b232 hello: fix typo\n-: ------- > 4:  a835e18 goodbye: add missing newline\n This output shows how the commits in the two branches have changed, been reordered, been added or removed. From left-to-right, these sections are as follows: The position of the left-hand side commit in the commit range being compared. For example, 2 indicates it was the second commit in the commit list. - indicates no matching commit was found in the left hand side commit range. The short commit hash for the left-hand commit. The equality of the commits being compared. = indicates they are equal, ! means they were different, > means it was only in the right-hand side, < means it was only on the left-hand side. The position of the right-hand side commit in the commit range being compared. In the example above, you can see that the second commit on the left was matched to the second commit on the right. The short commit hash for the right-hand commit. Even for \"equal\" commits, these hashes are likely to differ as the commits may have different parents. The commit message for the commits. If the commits differ, the right-hand-side message is shown and a diff for the commit message is shown. In the image above, we can see that the order of the first two commits have been swapped by comparing the commit orders. The fourth commit on the right-hand side was not present in the left-hand side range. The third commit is where things get interesting. The commit list shows that the commit on the left and right were matched, but not equal (indicated by !). Whenever you have inequality like this, git range-diff provides a diff of what changed. The first part of the difference was in the commit message, which shows: @@ -2,7 +2,7 @@\n     hello: fix typo\n\n-   \"Hello\" has two l's.\n+   \"Hello\" has two l's. Let's also fix the missing newline.\n This is a pretty standard git diff format between the left- and right-hand side commits. It indicates that we added the text Let's also fix the missing newline. to the commit message. Where things get more complicated is in comparing the diffs of the commit. Remember, git range-diff is a \"diff of diffs\", and diffs already contain - and + prefixes at the start of the line. So git range-diff has double prefixes: 😅 diff --git a/hello.c b/hello.c\n--- a/hello.c\n@@ -12,6 +12,6 @@\n    int main(void)\n    {\n -      printf(\"Helo world\");\n-+      printf(\"Hello world\");\n++      printf(\"Hello world\\n\");\n        return 0;\n    }\n Let's think about what this means. Only the left-hand most column, i.e. left-most prefix, indicates a difference between the two sides. The first line with any prefix only has a single - character:  -      printf(\"Helo world\");\n That means that both commits removed this line, so there's no difference_ between the commit ranges for this line. In contrast, the next two lines have two prefix symbols: -+      printf(\"Hello world\");\n++      printf(\"Hello world\\n\");\n The first of these lines starts with -+, which means the left-hand side commit was adding this commit, but the right hand side no longer is. Conversely, the ++ indicates the right-hand side is newly adding this line. Remembering these suffixes is difficult, so the following table describes what the symbols mean Prefix symbolLeft-hand commitRight-hand commit(None)No changeNo change -Removed the lineRemoved the line +Added the lineAdded the line+-No changeRemoves the line++No changeAdds the line--Removed the line\"Removes the removal\", so no longer removes the line. i.e. it adds the line back that the left hand side removed.-+Added the line\"Removes the add\", so no longer adds the line. i.e. it removes the line that the left hand side added. I think it's quite difficult to intuitively remember the behaviours here. The best I can achieve is working through the logic of the above table 😅 The git range-diff output does try to help guide your understanding by only highlighting the first character in the prefix, i.e. lines that are actually different between left and right, as opposed to changes that appear in both diffs. Note that if you only want to see the changes in the commit list, and don't want to see the full diff then you can use the -s or --no-patch arguments, Using something like the following: git range-diff --no-patch base1..head1 base2..head2\n# or\ngit range-diff -s base1..head1 base2..head2\n In the next section I show the experience I found testing out git range-diff on a small sample. Trying it out in a small sample Whenever I discover a new git feature, I like to try it out in small samples to try to get an initial feeling for it. I then expand to larger projects later once I have a handle on how the feature works. Unfortunately, for git range-diff I was not very impressed with what I found. I think that's partly just because the output of git range-diff is relatively hard to parse. But there are also some aspects that seem generally ill-suited to the very small diffs I've used in this example. Setting up a simple test app The test app I used is a vey simple minimal API project. I created the initial project as follows: git init\ndotnet new web\ndotnet new gitignore\ngit commit -m \"Initial Commit\"\n This generates the default minimal API app, as follows: var builder = WebApplication.CreateBuilder(args);\nvar app = builder.Build();\n\napp.MapGet(\"/\", () => \"Hello world!\");\n\napp.Run();\n From there, I simulated work occurring both in a feature branch and directly on main. Parallel work streams on my_feature and main In general I'm pretty comfortable using git rebase to interactively squash, rearrange, and split commits. I use it daily to tidy up PRs before pushing them for review, and when working with stacked PRs. But one area where I'm often lacking confidence is after rebasing onto main and having to deal with merge conflicts. That seems like the really killer app for git range-diff in theory, so I set out to see what that would look like. I started by creating a branch called my_feature. I then made 5 commits to this branch making trivial changes: Added an Example(string, string) record in the Example.cs file. Added an /example endpoint. Updated the /example endpoint to return an Example instance. Updated the / (hello world) endpoint to return an Example instance instead of \"Hello world!\". Reverted the previous change to return \"Hello World\" (note the missing !) After all those commits (which were intentionally circuitous), Program.cs looks like this: var builder = WebApplication.CreateBuilder(args);\nvar app = builder.Build();\n\napp.MapGet(\"/\", () => \"Hello World\");\napp.MapGet(\"/example\", () => new Example(\"Example 1\", \"The first example\"));\n\napp.Run();\n I then switched back to main, and added an endpoint that lets you post a name to add to a dictionary. The / (hello world) endpoint was then updated to say Hello to each of the names: using System.Collections.Concurrent;\n\nvar builder = WebApplication.CreateBuilder(args);\nvar app = builder.Build();\nvar names = new ConcurrentDictionary<string, string>();\n\napp.MapGet(\"/\", () => names.Keys.Select(n => $\"Hello {n}!\"));\n\napp.MapPost(\"/{name}\", (string name) => names[name] = name);\n\napp.Run();\n Functionality wise, the changes on main mean you can make requests like this: POST http://localhost:5116/James\n and then when you hit / you get a result like this: [\"Hello James!\",\"Hello Andrew!\",\"Hello Chris!\",\"Hello David!\"]\n At this point, our commit graph looks like the following:  Rebasing the feature branch We now want to rebase the my_feature branch on top of main instead of base. we start by creating a \"backup\" branch, to make it easy to revert if we run into any issues by running git checkout my_feature\ngit branch my_feature_bak # Create a backup pointing to the same location\n  For the rebase, we can run the following: git rebase base --onto main --no-update-refs\n  Not the use of --no-update-refs here so that we don't accidentally rebase my_feature_bak at the same time. This is only necessary if you enable --update-refs by default.  Unfortunately, we have a bunch of merge conflicts to contend with. There are the easy conflicts, where we're adding logically distinct endpoints but in conflicting locations in the file. Then there are the difficult merge conflicts, where we actually have modified the same logical code. That's primarily the Hello world endpoint which we initially modified in the my_feature branch and then (partially) reverted. Once we've fixed all the conflicts, we'll have a commit tree that looks something like the following:  The final code in my_feature looks like this: using System.Collections.Concurrent;\n\nvar builder = WebApplication.CreateBuilder(args);\nvar app = builder.Build();\nvar names = new ConcurrentDictionary<string, string>();\n\napp.MapGet(\"/\", () => names.Keys.Select(n => $\"Hello {n}!\"));\n\napp.MapPost(\"/{name}\", (string name) => names[name] = name);\napp.MapGet(\"/example\", () => new Example(\"Example 1\", \"The first example\"));\n\napp.Run();\n So now we come to the important part—what does git range-diff make of it? Verifying the merge conflict resolution with git range-diff To compare the branch prior to the rebase with post rebase we can use a command like the following: git range-diff base..my_feature_bak main..my_feature\n This produces an output like the following: 1:  3070585 = 1:  ebd4946 Commit 1\n2:  76df723 < -:  ------- Commit 2\n3:  e526ca2 < -:  ------- Commit 3\n4:  64856f3 < -:  ------- Commit 4\n5:  c96df0b < -:  ------- Commit 5\n-:  ------- > 2:  edbe245 Commit 2\n-:  ------- > 3:  e06f56e Commit 5\n or as a colourised image:  The result was somewhat surprising to me. The only commit that git thinks is \"equal\" is Commit 1, which adds the Example record in a separate file. It's particularly interesting that Commit 2 is not recognized as matching, given that the diff prior to the rebase was  var app = builder.Build();\n \n app.MapGet(\"/\", () => \"Hello World!\");\n+app.MapGet(\"/example\", () => \"Example 1\");\n \n app.Run();\n while post rebase it was:  app.MapGet(\"/\", () => names.Keys.Select(n => $\"Hello {n}!\"));\n \n app.MapPost(\"/{name}\", (string name) => names[name] = name);\n+app.MapGet(\"/example\", () => \"Example 1\");\n \n app.Run();\n Pretty similar, no!? The important thing to understand about range-diff is that it doesn't just diff the -/+ lines, it's diffing the whole diff patch, including the context lines. If you look back at the previous two diffs, you can see that the existing changes on main mean that the unchanged lines in the diffs look significantly different from one another. The algorithm git uses has a \"fudge factor\" to determine how similar two diffs must be for them to be considered \"equal\". You can tweak this value wit the --creation-factor, which must be a value between 0-100 (default is 60). The higher the value, the more likely git is to find matches. For example, if we run the same comparison with --creation-factor=90, we get a very different range-diff (note that I'm hiding the diff patches here for brevity, the subsequent image shows the diff in all its glory) >  git range-diff base..my_feature_bak main..my_feature --creation-factor=90 -s\n1:  3070585 = 1:  ebd4946 Commit 1\n2:  76df723 ! 2:  edbe245 Commit 2\n3:  e526ca2 < -:  ------- Commit 3\n4:  64856f3 < -:  ------- Commit 4\n5:  c96df0b ! 3:  e06f56e Commit 5\n The results here look much closer to what we actually expect; Commit 2 is matched in both branches for example. I think the full diff is still somewhat confusing however:  Take a moment to try to parse this output. Both of the commit diffs highlight that there are differences related to the / and /{name} endpoints. That's expected, because those changes were introduced in the main branch, and so are present in the rebased branch, but not in the \"prior\" scenario. Where things look a bit strange are on the first lines in the diff: -@@ Program.cs: var builder = WebApplication.CreateBuilder(args);\n- var app = builder.Build();\n+@@ Program.cs: var names = new ConcurrentDictionary<string, string>();\n+ app.MapGet(\"/\", () => names.Keys.Select(n => $\"Hello {n}!\"));\n When I first look at that diff, it looks like it's saying that the lines var app = builder.Build(); etc have been removed from the rebased commit stack, which would obviously be an error. However, it's more complicated than that. Remember git does a very crude git diff of the commit patch, which means it's also diffing the context. That's what we have here—differences in the context. Due to the changes in main the context around the changed lines (/example) are fundamentally different, and that's what's showing up here. Unfortunately, I'm not sure there's a good fix for that. This is integral to how git range-diff works, so I think the only answer is getting comfortable with the confusing output. The main thing I wonder is whether I'd be able to spot a genuine merge-conflict error amongst this noise. I guess time will tell, as I try this in realistic scenarios. Given that the Linux kernel uses it, I think it's safe to say it's certainly possible to use it successfully! Summary In this post I looked at the git range-diff feature. I discuss the scenarios it's designed to help with, and how it works as a diff-of-diffs. Next I explained the output format it uses, which can be difficult to parse thanks to the confusion in showing a diff-of-diff patches. Finally I tried out the feature on a small toy sample in which I rebased a branch and resolved merge conflicts. In my test example, the result was very dependent on the \"fudge factor\" parameter, and the output was difficult to discern genuine changes from changes in the surrounding context. I suspect it may be primarily a case of needing practice to read the output on my part."
  },
  {
    "itemId": "https://andrewlock.net/creating-sbom-attestations-in-github-actions/",
    "raw": "<img src=\"https://andrewlock.net/content/images/2025/sbom_attest_banner.png\" /><p>In this post I show how you can create attestations for SBOM documents that you have created for your application or Nuget package.</p> <h2 id=\"supply-chain-security-and-attestations\" class=\"heading-with-anchor\"><a href=\"#supply-chain-security-and-attestations\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Supply chain security and attestations</a></h2> <p>In the last couple of posts on my blog, I've been looking at some of the potential steps you can take to be a good citizen in the software ecosystem by providing confidence in the artifacts you produce. In particular, I've been looking at some of the steps you can take related to software provenance.</p> <p>Initially, I looked at <a href=\"/creating-provenance-attestations-for-nuget-packages-in-github-actions/\">how you can produce provenance attestations</a> for your NuGet packages (or other applications), by adding an easy-to-use GitHub Action to your build workflow.</p> <blockquote> <p>A <a href=\"https://slsa.dev/spec/v1.0/provenance\">provenance <em>attestation</em></a> provides a common format for describing how your artifact was built, the environment it was built in, the build definition that produced it, the build <em>run</em> that produced it, and more.</p> </blockquote> <p>Providing an attestation doesn't automatically improve the security of downstream projects consuming your NuGet package; consumers must make sure they <em>verify</em> the attestation, but it provides one building block for securing the software supply chain.</p> <p>In <a href=\"/creating-a-software-bill-of-materials-sbom-for-an-open-source-nuget-package/\">the subsequent post</a> I showed how you can create a <a href=\"https://www.cisa.gov/sbom\">Software Bill of Materials</a> (SBOM). I used a variety of different tools, and showed how the resulting document varies somewhat based on the tool you use, but they all provide a standard document that can be processed by machines.</p> <blockquote> <p>An SBOM describes the various packages and dependencies that go into creating a software artifact such as an application or a package. An SBOM gives visibility into what components your software contains, including any components with known vulnerabilities, as well as any potential compliance or licensing issues or supply chain risks.</p> </blockquote> <p>In this post, I show how you can combine the two concepts. As well as providing provenance attestations for your package itself, you can <em>also</em> provide attestations for the SBOM associated with the package. This ensures that consumers can trust that the SBOM provided has not been tampered with, and provides guarantees about when, where, and how it was generated.</p> <h2 id=\"generating-attestations-for-an-sbom\" class=\"heading-with-anchor\"><a href=\"#generating-attestations-for-an-sbom\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Generating attestations for an SBOM</a></h2> <p>The good news is that if you've already followed the previous two posts, you're already most of the way there. In the <a href=\"/creating-provenance-attestations-for-nuget-packages-in-github-actions/\">first post about generating attestations</a>, I showed <a href=\"https://github.com/actions/attest-build-provenance\">the <code>actions/attest-build-provenance</code> GitHub Action</a> you can use to generate provenance for an artifact. In this post, we use <a href=\"https://github.com/actions/attest-sbom\">the <code>actions/attest-sbom</code> GitHub action</a> that generates a signed SBOM attestation for SBOMs.</p> <p>As a reminder, there are a variety of standard formats you can choose for an SBOM, but two of the most popular appear to be <a href=\"https://spdx.dev/\">System Package Data Exchange</a> (SPDX) and <a href=\"https://cyclonedx.org/\">CycloneDX</a>. Both of these formats have a JSON document option, are specified as standards (<a href=\"https://spdx.dev/use/specifications/\">ISO/IEC 5692:2021</a> for SPDX, <a href=\"https://ecma-international.org/publications-and-standards/standards/ecma-424/\">ECMA-424</a> for CycloneDX), and can be generated using a wide variety of open source tools.</p> <p>The <code>actions/attest-sbom</code> GitHub action works with both SPDX and CycloneDX JSON documents, so you can use whichever tools you prefer to generate the SBOM. The attestation creation process itself is essentially identical to the flow used by <code>actions/attest-build-provenance</code> for artifact provenance, using GitHub's Sigstore client.</p> <figure> <picture> <img src=\"/content/images/2025/github_attestations.webp\"> </picture><figcaption>The Github attestation method. From <a href=\"https://github.blog/news-insights/product-news/introducing-artifact-attestations-now-in-public-beta/\">Introducing Artifact Attestations–now in public beta</a></figcaption></figure> <p>You can read more about the attestation process <a href=\"/creating-attestations-for-nuget-packages-in-github-actions/#how-does-github-generate-attestations-\">in my previous post</a> or in <a href=\"https://docs.github.com/en/actions/security-for-github-actions/using-artifact-attestations/using-artifact-attestations-to-establish-provenance-for-builds\">the official documentation</a>. in this post I'm going to go straight to an example.</p> <h2 id=\"updating-a-workflow-to-generate-sbom-attestations\" class=\"heading-with-anchor\"><a href=\"#updating-a-workflow-to-generate-sbom-attestations\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Updating a workflow to generate SBOM attestations</a></h2> <p>In this post I'm going to start with an existing workflow that already generates an SBOM. The details of <em>how</em> it generates the SBOM aren't important at this stage (see <a href=\"/creating-a-software-bill-of-materials-sbom-for-an-open-source-nuget-package/\">the previous post</a> from some possible approaches). All that matters here is that we have the artifact, and we have the corresponding SBOM.</p> <p>The following initial workflow builds a .NET NuGet package and generates a CycloneDX SBOM JSON document using <a href=\"https://github.com/marketplace/actions/cyclonedx-net-generate-sbom\">the <code>CycloneDX/gh-dotnet-generate-sbom</code> GitHub Action</a>. This GitHub action has fewer configuration parameters than <a href=\"/creating-a-software-bill-of-materials-sbom-for-an-open-source-nuget-package/#cyclonedx-module-for-net\">the .NET module I showed in my previous post</a>, but it does the job for this post:</p> <pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> BuildAndPack\n\n<span class=\"token key atrule\">on</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">push</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">branches</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"main\"</span> <span class=\"token punctuation\">]</span>\n    <span class=\"token key atrule\">tags</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'*'</span><span class=\"token punctuation\">]</span>\n  <span class=\"token key atrule\">pull_request</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">branches</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'*'</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token key atrule\">jobs</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">build-and-test</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">runs-on</span><span class=\"token punctuation\">:</span> ubuntu<span class=\"token punctuation\">-</span>latest\n    <span class=\"token key atrule\">steps</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 <span class=\"token comment\"># v4.2.2</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> actions/setup<span class=\"token punctuation\">-</span>dotnet@67a3573c9a986a3f9c594539f4ab511d57bb3ce9 <span class=\"token comment\"># v4.3.1</span>\n        <span class=\"token key atrule\">with</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">dotnet-version</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"9.0.x\"</span>\n\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Build and pack\n        <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span> dotnet pack <span class=\"token punctuation\">-</span>c Release\n\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Push to NuGet\n        <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span> dotnet nuget push artifacts/packages/NetEscapades.AspNetCore.SecurityHeaders.nupkg\n        <span class=\"token key atrule\">env</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">NuGetToken</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> secrets.NUGET_TOKEN <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Generate JSON SBOM\n        <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> CycloneDX/gh<span class=\"token punctuation\">-</span>dotnet<span class=\"token punctuation\">-</span>generate<span class=\"token punctuation\">-</span>sbom@c183e4ac30e5b99354cb9a98c38548e07c538346 <span class=\"token comment\"># v1.0.1</span>\n        <span class=\"token key atrule\">with</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">path</span><span class=\"token punctuation\">:</span> ./src/NetEscapades.AspNetCore.SecurityHeaders/NetEscapades.AspNetCore.SecurityHeaders.csproj\n          <span class=\"token key atrule\">out</span><span class=\"token punctuation\">:</span> ./artifacts/sboms\n          <span class=\"token key atrule\">json</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n          <span class=\"token key atrule\">github-bearer-token</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> secrets.GITHUB_TOKEN <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n</code></pre> <p>In the workflow above we are building the <em>NetEscapades.AspNetCore.SecurityHeaders.nupkg</em> package into the <em>artifacts/packages</em> folder, and then generating an SBOM in the <em>artifacts/sboms</em> folder called <em>bom.json</em>.</p> <p>To generate an attestation, we simply need to add a step that uses the <code>actions/attest-sbom</code> action and pass in the following values:</p> <ul><li><code>subject-path</code>: the path to the artifact; the <em>.nupkg</em> file in this case.</li> <li><code>sbom-path</code>: the path to the SBOM</li></ul> <pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Attest package\n  <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> actions/attest<span class=\"token punctuation\">-</span>sbom@115c3be05ff3974bcbd596578934b3f9ce39bf68 <span class=\"token comment\"># v2.2.0</span>\n  <span class=\"token key atrule\">with</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">subject-path</span><span class=\"token punctuation\">:</span> artifacts/packages/NetEscapades.AspNetCore.SecurityHeaders.nupkg\n    <span class=\"token key atrule\">sbom-path</span><span class=\"token punctuation\">:</span> artifacts/sboms/bom.json\n</code></pre> <p>As when we generated the artifact provenance, we need to add some additional permissions to our workflow, so that the attestation action can access the OpenID Connect token and create attestations:</p> <pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">permissions</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">id-token</span><span class=\"token punctuation\">:</span> write\n  <span class=\"token key atrule\">attestations</span><span class=\"token punctuation\">:</span> write\n</code></pre> <p>And that's it. Putting it all together, the full workflow looks something like the following:</p> <pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> BuildAndPack\n\n<span class=\"token key atrule\">on</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">push</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">branches</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"main\"</span> <span class=\"token punctuation\">]</span>\n    <span class=\"token key atrule\">tags</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'*'</span><span class=\"token punctuation\">]</span>\n  <span class=\"token key atrule\">pull_request</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">branches</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'*'</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token key atrule\">jobs</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">build-and-test</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># 👇 Add these permissions</span>\n    <span class=\"token key atrule\">permissions</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">id-token</span><span class=\"token punctuation\">:</span> write\n      <span class=\"token key atrule\">attestations</span><span class=\"token punctuation\">:</span> write\n    <span class=\"token key atrule\">runs-on</span><span class=\"token punctuation\">:</span> ubuntu<span class=\"token punctuation\">-</span>latest\n    <span class=\"token key atrule\">steps</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 <span class=\"token comment\"># v4.2.2</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> actions/setup<span class=\"token punctuation\">-</span>dotnet@67a3573c9a986a3f9c594539f4ab511d57bb3ce9 <span class=\"token comment\"># v4.3.1</span>\n        <span class=\"token key atrule\">with</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">dotnet-version</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"9.0.x\"</span>\n\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Build and pack\n        <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span> dotnet pack <span class=\"token punctuation\">-</span>c Release\n\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Push to NuGet\n        <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span> dotnet nuget push artifacts/packages/NetEscapades.AspNetCore.SecurityHeaders.nupkg\n        <span class=\"token key atrule\">env</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">NuGetToken</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> secrets.NUGET_TOKEN <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Generate JSON SBOM\n        <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> CycloneDX/gh<span class=\"token punctuation\">-</span>dotnet<span class=\"token punctuation\">-</span>generate<span class=\"token punctuation\">-</span>sbom@c183e4ac30e5b99354cb9a98c38548e07c538346 <span class=\"token comment\"># v1.0.1</span>\n        <span class=\"token key atrule\">with</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">path</span><span class=\"token punctuation\">:</span> ./src/NetEscapades.AspNetCore.SecurityHeaders/NetEscapades.AspNetCore.SecurityHeaders.csproj\n          <span class=\"token key atrule\">out</span><span class=\"token punctuation\">:</span> ./artifacts/sboms\n          <span class=\"token key atrule\">json</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n          <span class=\"token key atrule\">github-bearer-token</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> secrets.GITHUB_TOKEN <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n\n      <span class=\"token comment\"># 👇 Add this attestation step</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Attest package\n        <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> actions/attest<span class=\"token punctuation\">-</span>sbom@115c3be05ff3974bcbd596578934b3f9ce39bf68 <span class=\"token comment\"># v2.2.0</span>\n        <span class=\"token key atrule\">with</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">subject-path</span><span class=\"token punctuation\">:</span> artifacts/packages/NetEscapades.AspNetCore.SecurityHeaders.nupkg\n          <span class=\"token key atrule\">sbom-path</span><span class=\"token punctuation\">:</span> artifacts/sboms/bom.json\n</code></pre> <p>Note that in the above workflow we're generating an SBOM and attestation for <em>every</em> PR as well as on branches etc. The process is pretty lightweight, but depending on your requirements, you might want to only generate these when doing a release, for example.</p> <h2 id=\"viewing-the-output-of-the-attestation\" class=\"heading-with-anchor\"><a href=\"#viewing-the-output-of-the-attestation\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Viewing the output of the attestation</a></h2> <p>The critical output of the <code>actions/attest-sbom</code> action is a Sigstore bundle JSON document, which looks something like the following:</p> <pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"mediaType\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"application/vnd.dev.sigstore.bundle.v0.3+json\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"verificationMaterial\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"tlogEntries\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">\"logIndex\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"173522574\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"logId\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token property\">\"keyId\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"wNI9atQGlz+VWfO6LRygH4QUfY/8W4RFwiT5i5WRgB0=\"</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"kindVersion\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token property\">\"kind\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"dsse\"</span><span class=\"token punctuation\">,</span>\n          <span class=\"token property\">\"version\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"0.0.1\"</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"integratedTime\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"1740260580\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"inclusionPromise\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token property\">\"signedEntryTimestamp\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"MEUCIBvt4HJQodZKrcVOFJ8bC2OyoxWV9adYct+KQ29AvdG+AiEAixnnlFPEpJYArVmej1xHLCsfITAYwTeqIYPN3+Lg2FU=\"</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"inclusionProof\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token property\">\"logIndex\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"51618312\"</span><span class=\"token punctuation\">,</span>\n          <span class=\"token property\">\"rootHash\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"/tkGrRms2LHwgOrsRiRe/GxbSerTzyibuLiiqvsd3Og=\"</span><span class=\"token punctuation\">,</span>\n          <span class=\"token property\">\"treeSize\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"51618314\"</span><span class=\"token punctuation\">,</span>\n          <span class=\"token property\">\"hashes\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n            <span class=\"token string\">\"q/dkAjxeUynkKYxXPenKThynxTZvMRLpbWJ/F4nvfHc=\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"GLHBWB7fj2mHeqnYei5qghe1Rwf1Ryx0m2ow4hQBjDA=\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"5KGpxQ+6EoREdhANHkfdmiMhMl/UH5p9fUvEc3c6mbA=\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"CG1EBVfzTcx/tcgBJXeLIkUKxmJoDY7oMcTXiz3cwcs=\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"AN36Jdc//SuaAqKodEza6ZI445Iq7K6NiBc6gQKMPjk=\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"uv/35HjaIqySZ59LkCidkK09c3zuQ4ZGcfn0njiWG6U=\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"D13BynaH2+rwdR+r2tnUFQcSQVSCCs0wbF5EIEgxb/4=\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"g23ss+32Z0Vik2ybu098JI/jK1u3k4chLVBZCi3AumY=\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"ebCKJ53lKWPqIx8mXXgznF9DGoQv70J7JTlFAav6s5E=\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"vemyaMj0Na1LMjbB/9Dmkq8T+jAb3o+yCESgAayUABU=\"</span>\n          <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n          <span class=\"token property\">\"checkpoint\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token property\">\"envelope\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"rekor.sigstore.dev - 1193050959916656506\\n51618314\\n/tkGrRms2LHwgOrsRiRe/GxbSerTzyibuLiiqvsd3Og=\\n\\n— rekor.sigstore.dev wNI9ajBGAiEApPeea+8Jsz1H5l1TwYIpWd8Hp493eFzJe+Me75klP/MCIQDpsL20JctwgKPzmaGeaa5e+liHlIkEvq/TRJdUEkKULg==\\n\"</span>\n          <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"canonicalizedBody\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"eyJhcGlWZXJzaW9uIjoiMC4wLjEiLCJraW5kIjoiZHNzZSIsInNwZWMiOnsiZW52ZWxvcGVIYXNoIjp7ImFsZ29yaXRobSI6InNoYTI1NiIsInZhbHVlIjoiMTAxN2E4N2ExMjFiZDA4YmIxNzMwMTlkYzViOGIyOTM5YjQwYTMzZTYwMGQ1YjhhOGE3MWE5MGU2NTRmOWRjOCJ9LCJwYXlsb2FkSGFzaCI6eyJhbGdvcml0aG0iOiJzaGEyNTYiLCJ2YWx1ZSI6ImY2MGJjYThkMmEzMmY3Yzg0NWMyZmM1N2M0MmM4OTQzYWZmOGNkMDUxMjU1ZTFiOGJjZWIwMzgyNTk2MTBhZmYifSwic2lnbmF0dXJlcyI6W3sic2lnbmF0dXJlIjoiTUVVQ0lDaWNDdWh1SXRxbGZPaHl3VDBRcEJaaGtqdWZDb2hqWjNYN29tbU5UeEx1QWlFQXJjNkRmNisrMXp0bXphQWIwOXQ3SHFLNEx0dnF4cnZwa0theTh1cU5pUjA9IiwidmVyaWZpZXIiOiJMUzB0TFMxQ1JVZEpUaUJEUlZKVVNVWkpRMEZVUlMwdExTMHRDazFKU1VoeFJFTkRRbmsyWjBGM1NVSkJaMGxWWVRWdFNWZEpjMFZpVjBkMlJFWnhUMXBCVlhGdE1XZHNXV1J2ZDBObldVbExiMXBKZW1vd1JVRjNUWGNLVG5wRlZrMUNUVWRCTVZWRlEyaE5UV015Ykc1ak0xSjJZMjFWZFZwSFZqSk5ValIzU0VGWlJGWlJVVVJGZUZaNllWZGtlbVJIT1hsYVV6RndZbTVTYkFwamJURnNXa2RzYUdSSFZYZElhR05PVFdwVmQwMXFTWGxOYWtVd1RYcEJkMWRvWTA1TmFsVjNUV3BKZVUxcVJURk5la0YzVjJwQlFVMUdhM2RGZDFsSUNrdHZXa2w2YWpCRFFWRlpTVXR2V2tsNmFqQkVRVkZqUkZGblFVVnpiV2hLUm5KdVptZExaek5VVUdKdU4xVk5NazlyTmxGWlNraEJkek56Y0dSTFVGUUtUblY0Y0RWU01taHhNRVpNZDNwUFVUVTVPRzlQTUVNdk1GQjFRbGhXU1VGNlIzTXJRblpMWTNwSFpETkRXbUZsUkdGUFEwSnJNSGRuWjFwS1RVRTBSd3BCTVZWa1JIZEZRaTkzVVVWQmQwbElaMFJCVkVKblRsWklVMVZGUkVSQlMwSm5aM0pDWjBWR1FsRmpSRUY2UVdSQ1owNVdTRkUwUlVablVWVjJVRzA0Q2twR1dtZE9iRWxZYlU1VGFIWkNhVmg0ZEdoamJGRnpkMGgzV1VSV1VqQnFRa0puZDBadlFWVXpPVkJ3ZWpGWmEwVmFZalZ4VG1wd1MwWlhhWGhwTkZrS1drUTRkMmRaYzBkQk1WVmtSVkZGUWk5M1UwSm5SRUlyYUc1NGIyUklVbmRqZW05MlRESmtjR1JIYURGWmFUVnFZakl3ZGxsWE5XdGpiVll6WWtjNWFncGhlVGxQV2xoU1JtTXlUbWhqUjBacldsaE5kVkZZVG5kVWJWWXdVVEk1ZVZwVE5WUmFWMDR4WTIxc01HVlZhR3haVjFKc1kyNU5ka3h0WkhCa1IyZ3hDbGxwT1ROaU0wcHlXbTE0ZG1RelRYWlJibFp3WWtkU1FtSnRVbEZaVjA1eVRHNXNkR0pGUW5sYVYxcDZURE5DTVdKSGQzWk5ha2t3VERJeGJHTnRaR3dLVFVSclIwTnBjMGRCVVZGQ1p6YzRkMEZSUlVWTE1tZ3daRWhDZWs5cE9IWmtSemx5V2xjMGRWbFhUakJoVnpsMVkzazFibUZZVW05a1Ywb3hZekpXZVFwWk1qbDFaRWRXZFdSRE5XcGlNakIzUjJkWlMwdDNXVUpDUVVkRWRucEJRa0ZuVVUxalNGWnpZa1k1ZVZwWVJqRmFXRTR3VFVSWlIwTnBjMGRCVVZGQ0NtYzNPSGRCVVUxRlMwUmthVnBIU1hsYVIxVXhUakpaTkUxRWJHaFBWR3hzVFZSUk1VNHlWWGhPVkdoc1RXMU5lVnBVVVhwTmJWbDNUV3BOTTA1NlRYY0tSMmRaUzB0M1dVSkNRVWRFZG5wQlFrSkJVVTFSYmxad1lrZFNRbUp0VWxGWlYwNXlUVVZCUjBOcGMwZEJVVkZDWnpjNGQwRlJWVVZOYlVaMVdraEtiQXBrTW5oMldUSnpkbFJ0VmpCU1dFNXFXVmhDYUZwSFZucE1hMFo2WTBVMWJHUkZUblpqYlZWMVZUSldhbVJZU25Ca1NHeEpXbGRHYTFwWVNucE5RMFZIQ2tOcGMwZEJVVkZDWnpjNGQwRlJXVVZGTTBwc1dtNU5kbU5JVm5OaVF6aDVUV3BSZG1KWFZubGFNbFYzVDNkWlMwdDNXVUpDUVVkRWRucEJRa05CVVhRS1JFTjBiMlJJVW5kamVtOTJURE5TZG1FeVZuVk1iVVpxWkVkc2RtSnVUWFZhTW13d1lVaFdhV1JZVG14amJVNTJZbTVTYkdKdVVYVlpNamwwVFVsSFRRcENaMjl5UW1kRlJVRlpUeTlOUVVWS1FrZzBUV1pIYURCa1NFSjZUMms0ZGxveWJEQmhTRlpwVEcxT2RtSlRPV2hpYlZKNVdsaGtjMkl5VG5KTU1EVnNDbVJGVm5wWk1rWjNXVmRTYkdONU5VSmpNMEpQV2xoU1JHSXpTbXhNYkU1c1dUTldlV0ZZVWpWVFIxWm9Xa2RXZVdONU9IVmFNbXd3WVVoV2FVd3paSFlLWTIxMGJXSkhPVE5qZVRsRFpGZHNjMXBGUm5WYVJrSm9XVEp6ZFdWWE1YTlJTRXBzV201TmRtTklWbk5pUXpoNVRXcFJkbUpYVm5sYU1sVjNUMEZaU3dwTGQxbENRa0ZIUkhaNlFVSkRaMUZ4UkVObk0xbHRVbWxOYlZKc1RsUmtiVTlFUVRWWlZHczFXbFJGTUU1VVpHeE5WRlUwV2xSS2FrMXRWVEJOZWtwdENrMUVTWHBPZW1ONlRVSXdSME5wYzBkQlVWRkNaemM0ZDBGUmMwVkVkM2RPV2pKc01HRklWbWxNVjJoMll6TlNiRnBFUWxaQ1oyOXlRbWRGUlVGWlR5OEtUVUZGVFVKRlkwMVNWMmd3WkVoQ2VrOXBPSFphTW13d1lVaFdhVXh0VG5aaVV6bG9ZbTFTZVZwWVpITmlNazV5VERBMWJHUkZWbnBaTWtaM1dWZFNiQXBqZVRWQ1l6TkNUMXBZVWtSaU0wcHNUR3hPYkZrelZubGhXRkkxVTBkV2FGcEhWbmxqZWtFMFFtZHZja0puUlVWQldVOHZUVUZGVGtKRGIwMUxSR1JwQ2xwSFNYbGFSMVV4VGpKWk5FMUViR2hQVkd4c1RWUlJNVTR5VlhoT1ZHaHNUVzFOZVZwVVVYcE5iVmwzVFdwTk0wNTZUWGRKZDFsTFMzZFpRa0pCUjBRS2RucEJRa1JuVVZaRVFrNTVXbGRhZWt3elFqRmlSM2QyVFdwSk1Fd3lNV3hqYldSc1RVSm5SME5wYzBkQlVWRkNaemM0ZDBGUk9FVkRaM2RKVGxScmVncE9WRWswVG1wbmQweFJXVXRMZDFsQ1FrRkhSSFo2UVVKRlFWRm1SRUl4YjJSSVVuZGplbTkyVERKa2NHUkhhREZaYVRWcVlqSXdkbGxYTld0amJWWXpDbUpIT1dwaGVrRlpRbWR2Y2tKblJVVkJXVTh2VFVGRlVrSkJiMDFEUkVVMFRucFZNVTE2WnpSTlNVZE5RbWR2Y2tKblJVVkJXVTh2VFVGRlUwSklORTBLWmtkb01HUklRbnBQYVRoMldqSnNNR0ZJVm1sTWJVNTJZbE01YUdKdFVubGFXR1J6WWpKT2Nrd3dOV3hrUlZaNldUSkdkMWxYVW14amVUVkNZek5DVHdwYVdGSkVZak5LYkV4c1RteFpNMVo1WVZoU05WTkhWbWhhUjFaNVkzazRkVm95YkRCaFNGWnBURE5rZG1OdGRHMWlSemt6WTNrNVEyUlhiSE5hUlVaMUNscEdRbWhaTW5OMVpWY3hjMUZJU214YWJrMTJZMGhXYzJKRE9IbE5hbEYyWWxkV2VWb3lWWGRQUVZsTFMzZFpRa0pCUjBSMmVrRkNSWGRSY1VSRFp6TUtXVzFTYVUxdFVteE9WR1J0VDBSQk5WbFVhelZhVkVVd1RsUmtiRTFVVlRSYVZFcHFUVzFWTUUxNlNtMU5SRWw2VG5wamVrMUNkMGREYVhOSFFWRlJRZ3BuTnpoM1FWSlJSVVJuZDAxalNGWnpZa1k1ZVZwWVJqRmFXRTR3VFVoclIwTnBjMGRCVVZGQ1p6YzRkMEZTVlVWaGQzaHdZVWhTTUdOSVRUWk1lVGx1Q21GWVVtOWtWMGwxV1RJNWRFd3lSblZhU0Vwc1pESjRkbGt5YzNaVWJWWXdVbGhPYWxsWVFtaGFSMVo2VEd0R2VtTkZOV3hrUlU1MlkyMVZkVlV5Vm1vS1pGaEtjR1JJYkVsYVYwWnJXbGhLZWt3eVJtcGtSMngyWW01TmRtTnVWblZqZVRoNFRYcFJNMDVxWXpSTmVtZDNUVU01YUdSSVVteGlXRUl3WTNrNGVBcE5RbGxIUTJselIwRlJVVUpuTnpoM1FWSlpSVU5CZDBkalNGWnBZa2RzYWsxSlIweENaMjl5UW1kRlJVRmtXalZCWjFGRFFrZ3dSV1YzUWpWQlNHTkJDak5VTUhkaGMySklSVlJLYWtkU05HTnRWMk16UVhGS1MxaHlhbVZRU3pNdmFEUndlV2RET0hBM2J6UkJRVUZIVmt3MU1HUlJaMEZCUWtGTlFWTkVRa2NLUVdsRlFYVkdja0pxWW1kTmMyc3ZMMjFwYUUxUVFVTm9NV1YzVUVJeVJWSTVkMmgxYjI0NVFUUlROVEpvTTBWRFNWRkVRMWhGTkhsRVIybHdabEUyYVFwS2VrWnhXVTQ1VG5aMGNrSnJNVWw1VWxWbFluUnNOVVF5SzFGQk9VUkJTMEpuWjNGb2EycFBVRkZSUkVGM1RtOUJSRUpzUVdwQlJXcENSVU5zWTIxbkNuVnhSSFJ5VFhGNWRGSk9ZMFZUYWxsTWRUUjFNRTlTWTNSTFJXOVljSGRMZFVSNVpuWXphSEJMWVdJNWQzZDBUa1V3Wm1KWmJXOURUVkZET1hVMlNqa0tWV05NUWxsVlFsYzFVMVJPU1dvMFNuZzNNRzlHY3psTWN6SkJZa3BwVFVWaGVtbzJiemcwYW5acE1HaGFVU3N6WXpCT2RtbGlabHB5ZGtrOUNpMHRMUzB0UlU1RUlFTkZVbFJKUmtsRFFWUkZMUzB0TFMwSyJ9XX19\"</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"timestampVerificationData\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"certificate\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"rawBytes\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"MIIHqDCCBy6gAwIBAgIUa5mIWIsEbWGvDFqOZAUqm1glYdowCgYIKoZIzj0EAwMwNzEVMBMGA1UEChMMc2lnc3RvcmUuZGV2MR4wHAYDVQQDExVzaWdzdG9yZS1pbnRlcm1lZGlhdGUwHhcNMjUwMjIyMjE0MzAwWhcNMjUwMjIyMjE1MzAwWjAAMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEsmhJFrnfgKg3TPbn7UM2Ok6QYJHAw3spdKPTNuxp5R2hq0FLwzOQ598oO0C/0PuBXVIAzGs+BvKczGd3CZaeDaOCBk0wggZJMA4GA1UdDwEB/wQEAwIHgDATBgNVHSUEDDAKBggrBgEFBQcDAzAdBgNVHQ4EFgQUvPm8JFZgNlIXmNShvBiXxthclQswHwYDVR0jBBgwFoAU39Ppz1YkEZb5qNjpKFWixi4YZD8wgYsGA1UdEQEB/wSBgDB+hnxodHRwczovL2dpdGh1Yi5jb20vYW5kcmV3bG9jay9OZXRFc2NhcGFkZXMuQXNwTmV0Q29yZS5TZWN1cml0eUhlYWRlcnMvLmdpdGh1Yi93b3JrZmxvd3MvQnVpbGRBbmRQYWNrLnltbEByZWZzL3B1bGwvMjI0L21lcmdlMDkGCisGAQQBg78wAQEEK2h0dHBzOi8vdG9rZW4uYWN0aW9ucy5naXRodWJ1c2VyY29udGVudC5jb20wGgYKKwYBBAGDvzABAgQMcHVsbF9yZXF1ZXN0MDYGCisGAQQBg78wAQMEKDdiZGIyZGU1N2Y4MDlhOTllMTQ1N2UxNThlMmMyZTQzMmYwMjM3NzMwGgYKKwYBBAGDvzABBAQMQnVpbGRBbmRQYWNrMEAGCisGAQQBg78wAQUEMmFuZHJld2xvY2svTmV0RXNjYXBhZGVzLkFzcE5ldENvcmUuU2VjdXJpdHlIZWFkZXJzMCEGCisGAQQBg78wAQYEE3JlZnMvcHVsbC8yMjQvbWVyZ2UwOwYKKwYBBAGDvzABCAQtDCtodHRwczovL3Rva2VuLmFjdGlvbnMuZ2l0aHVidXNlcmNvbnRlbnQuY29tMIGMBgorBgEEAYO/MAEJBH4MfGh0dHBzOi8vZ2l0aHViLmNvbS9hbmRyZXdsb2NrL05ldEVzY2FwYWRlcy5Bc3BOZXRDb3JlLlNlY3VyaXR5SGVhZGVycy8uZ2l0aHViL3dvcmtmbG93cy9CdWlsZEFuZFBhY2sueW1sQHJlZnMvcHVsbC8yMjQvbWVyZ2UwOAYKKwYBBAGDvzABCgQqDCg3YmRiMmRlNTdmODA5YTk5ZTE0NTdlMTU4ZTJjMmU0MzJmMDIzNzczMB0GCisGAQQBg78wAQsEDwwNZ2l0aHViLWhvc3RlZDBVBgorBgEEAYO/MAEMBEcMRWh0dHBzOi8vZ2l0aHViLmNvbS9hbmRyZXdsb2NrL05ldEVzY2FwYWRlcy5Bc3BOZXRDb3JlLlNlY3VyaXR5SGVhZGVyczA4BgorBgEEAYO/MAENBCoMKDdiZGIyZGU1N2Y4MDlhOTllMTQ1N2UxNThlMmMyZTQzMmYwMjM3NzMwIwYKKwYBBAGDvzABDgQVDBNyZWZzL3B1bGwvMjI0L21lcmdlMBgGCisGAQQBg78wAQ8ECgwINTkzNTI4NjgwLQYKKwYBBAGDvzABEAQfDB1odHRwczovL2dpdGh1Yi5jb20vYW5kcmV3bG9jazAYBgorBgEEAYO/MAERBAoMCDE4NzU1Mzg4MIGMBgorBgEEAYO/MAESBH4MfGh0dHBzOi8vZ2l0aHViLmNvbS9hbmRyZXdsb2NrL05ldEVzY2FwYWRlcy5Bc3BOZXRDb3JlLlNlY3VyaXR5SGVhZGVycy8uZ2l0aHViL3dvcmtmbG93cy9CdWlsZEFuZFBhY2sueW1sQHJlZnMvcHVsbC8yMjQvbWVyZ2UwOAYKKwYBBAGDvzABEwQqDCg3YmRiMmRlNTdmODA5YTk5ZTE0NTdlMTU4ZTJjMmU0MzJmMDIzNzczMBwGCisGAQQBg78wARQEDgwMcHVsbF9yZXF1ZXN0MHkGCisGAQQBg78wARUEawxpaHR0cHM6Ly9naXRodWIuY29tL2FuZHJld2xvY2svTmV0RXNjYXBhZGVzLkFzcE5ldENvcmUuU2VjdXJpdHlIZWFkZXJzL2FjdGlvbnMvcnVucy8xMzQ3Njc4MzgwMC9hdHRlbXB0cy8xMBYGCisGAQQBg78wARYECAwGcHVibGljMIGLBgorBgEEAdZ5AgQCBH0EewB5AHcA3T0wasbHETJjGR4cmWc3AqJKXrjePK3/h4pygC8p7o4AAAGVL50dQgAABAMASDBGAiEAuFrBjbgMsk//mihMPACh1ewPB2ER9whuon9A4S52h3ECIQDCXE4yDGipfQ6iJzFqYN9NvtrBk1IyRUebtl5D2+QA9DAKBggqhkjOPQQDAwNoADBlAjAEjBEClcmguqDtrMqytRNcESjYLu4u0ORctKEoXpwKuDyfv3hpKab9wwtNE0fbYmoCMQC9u6J9UcLBYUBW5STNIj4Jx70oFs9Ls2AbJiMEazj6o84jvi0hZQ+3c0NvibfZrvI=\"</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"dsseEnvelope\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"payload\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"eyJfdHlwZSI6Imh0dHBzOi8vaW4tdG90by5pby9TdGF0ZW1lbnQvdjEiLCJzdWJqZWN0IjpbeyJuYW1lIjoiTmV0RXNjYXBhZGVzLkFzcE5ldENvcmUuU2VjdXJpdHlIZWFkZXJzLjEuMC4wLXByZXZpZXcuMy5udXBrZyIsImRpZ2VzdCI6eyJzaGEyNTYiOiJlYmZmMWU3YzVhMTI5YTY5ZTI5NDFmODc1ZGQ3YTlmNzdhMGEwOWVjZjkwOTVmZTA0Y2M0NTM1MTE4NjNlOWNlIn19XSwicHJlZGljYXRlVHlwZSI6Imh0dHBzOi8vY3ljbG9uZWR4Lm9yZy9ib20iLCJwcmVkaWNhdGUiOnsiYm9tRm9ybWF0IjoiQ3ljbG9uZURYIiwic3BlY1ZlcnNpb24iOiIxLjYiLCJzZXJpYWxOdW1iZXIiOiJ1cm46dXVpZDpmOGFiNWQwMC03NGMyLTRlNjktYjAxMy1lYzcxZDM4MDYwNzYiLCJ2ZXJzaW9uIjoxLCJtZXRhZGF0YSI6eyJ0aW1lc3RhbXAiOiIyMDI1LTAyLTIyVDIxOjQyOjQ0WiIsInRvb2xzIjpbeyJ2ZW5kb3IiOiJDeWNsb25lRFgiLCJuYW1lIjoiQ3ljbG9uZURYIG1vZHVsZSBmb3IgLk5FVCIsInZlcnNpb24iOiI1LjAuMS4wIn1dLCJjb21wb25lbnQiOnsidHlwZSI6ImxpYnJhcnkiLCJib20tcmVmIjoiTmV0RXNjYXBhZGVzLkFzcE5ldENvcmUuU2VjdXJpdHlIZWFkZXJzQDEuMC4wLXByZXZpZXcuMyIsIm5hbWUiOiJOZXRFc2NhcGFkZXMuQXNwTmV0Q29yZS5TZWN1cml0eUhlYWRlcnMiLCJ2ZXJzaW9uIjoiMS4wLjAtcHJldmlldy4zIn19LCJjb21wb25lbnRzIjpbeyJ0eXBlIjoibGlicmFyeSIsImJvbS1yZWYiOiJwa2c6bnVnZXQvU3R5bGVDb3AuQW5hbHl6ZXJzQDEuMi4wLWJldGEuNTU2IiwiYXV0aG9ycyI6W3sibmFtZSI6IlNhbSBIYXJ3ZWxsIGV0LiBhbC4ifV0sIm5hbWUiOiJTdHlsZUNvcC5BbmFseXplcnMiLCJ2ZXJzaW9uIjoiMS4yLjAtYmV0YS41NTYiLCJkZXNjcmlwdGlvbiI6IkFuIGltcGxlbWVudGF0aW9uIG9mIFN0eWxlQ29wJ3MgcnVsZXMgdXNpbmcgUm9zbHluIGFuYWx5emVycyBhbmQgY29kZSBmaXhlcyIsInNjb3BlIjoicmVxdWlyZWQiLCJoYXNoZXMiOlt7ImFsZyI6IlNIQS01MTIiLCJjb250ZW50IjoiMDgxNjNGNjA2MUVCQzI2RUE5QjgwNjlBODJFOUY1NzVENjU2QTUwRjFEOTI5OUVEQTg3NEY0MTA3NzMxRUIyRTAyQjUxMkYyMDFGMUMzNEM2OTgzRDkyQkFFQ0Q2RUU1RTk5MkFBNkI2MUM3OEFFOTQ5MEE3RkREQkRENTE4ODIifV0sImxpY2Vuc2VzIjpbeyJsaWNlbnNlIjp7ImlkIjoiTUlUIn19XSwiY29weXJpZ2h0IjoiQ29weXJpZ2h0IDIwMTUgVHVubmVsIFZpc2lvbiBMYWJvcmF0b3JpZXMsIExMQyIsInB1cmwiOiJwa2c6bnVnZXQvU3R5bGVDb3AuQW5hbHl6ZXJzQDEuMi4wLWJldGEuNTU2IiwiZXh0ZXJuYWxSZWZlcmVuY2VzIjpbeyJ1cmwiOiJodHRwczovL2dpdGh1Yi5jb20vRG90TmV0QW5hbHl6ZXJzL1N0eWxlQ29wQW5hbHl6ZXJzIiwidHlwZSI6IndlYnNpdGUifV19LHsidHlwZSI6ImxpYnJhcnkiLCJib20tcmVmIjoicGtnOm51Z2V0L1N0eWxlQ29wLkFuYWx5emVycy5VbnN0YWJsZUAxLjIuMC41NTYiLCJhdXRob3JzIjpbeyJuYW1lIjoiU2FtIEhhcndlbGwgZXQuIGFsLiJ9XSwibmFtZSI6IlN0eWxlQ29wLkFuYWx5emVycy5VbnN0YWJsZSIsInZlcnNpb24iOiIxLjIuMC41NTYiLCJkZXNjcmlwdGlvbiI6IkFuIGltcGxlbWVudGF0aW9uIG9mIFN0eWxlQ29wJ3MgcnVsZXMgdXNpbmcgUm9zbHluIGFuYWx5emVycyBhbmQgY29kZSBmaXhlcyIsInNjb3BlIjoicmVxdWlyZWQiLCJoYXNoZXMiOlt7ImFsZyI6IlNIQS01MTIiLCJjb250ZW50IjoiMEU5RkJBRTcxM0QyRDMwNjkwQkIzMzFFNzMwOEE2MTk4OTRFRTI2QzEzNzk4ODU1RUMwQTI1MjlCMzI0NjhENjdGQkNGMkJDMUYwMkFBMEYzQUU3RTY4NTFEMkI1OTU2ODRFRjQxNTI0NUFBODExOUI5QjFCN0Q1OEMzMDkxNkIifV0sImxpY2Vuc2VzIjpbeyJsaWNlbnNlIjp7ImlkIjoiTUlUIn19XSwiY29weXJpZ2h0IjoiQ29weXJpZ2h0IDIwMTUgVHVubmVsIFZpc2lvbiBMYWJvcmF0b3JpZXMsIExMQyIsInB1cmwiOiJwa2c6bnVnZXQvU3R5bGVDb3AuQW5hbHl6ZXJzLlVuc3RhYmxlQDEuMi4wLjU1NiIsImV4dGVybmFsUmVmZXJlbmNlcyI6W3sidXJsIjoiaHR0cHM6Ly9naXRodWIuY29tL0RvdE5ldEFuYWx5emVycy9TdHlsZUNvcEFuYWx5emVycyIsInR5cGUiOiJ3ZWJzaXRlIn1dfV0sImRlcGVuZGVuY2llcyI6W3sicmVmIjoiTmV0RXNjYXBhZGVzLkFzcE5ldENvcmUuU2VjdXJpdHlIZWFkZXJzQDEuMC4wLXByZXZpZXcuMyIsImRlcGVuZHNPbiI6WyJwa2c6bnVnZXQvU3R5bGVDb3AuQW5hbHl6ZXJzQDEuMi4wLWJldGEuNTU2IiwicGtnOm51Z2V0L1N0eWxlQ29wLkFuYWx5emVycy5VbnN0YWJsZUAxLjIuMC41NTYiXX0seyJyZWYiOiJwa2c6bnVnZXQvU3R5bGVDb3AuQW5hbHl6ZXJzLlVuc3RhYmxlQDEuMi4wLjU1NiIsImRlcGVuZHNPbiI6W119LHsicmVmIjoicGtnOm51Z2V0L1N0eWxlQ29wLkFuYWx5emVyc0AxLjIuMC1iZXRhLjU1NiIsImRlcGVuZHNPbiI6WyJwa2c6bnVnZXQvU3R5bGVDb3AuQW5hbHl6ZXJzLlVuc3RhYmxlQDEuMi4wLjU1NiJdfV19fQ==\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"payloadType\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"application/vnd.in-toto+json\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"signatures\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">\"sig\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"MEUCICicCuhuItqlfOhywT0QpBZhkjufCohjZ3X7ommNTxLuAiEArc6Df6++1ztmzaAb09t7HqK4LtvqxrvpkKay8uqNiR0=\"</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>Unless otherwise told not to, the action also automatically produces a summary in the Actions run that looks something like the following:</p> <p><img src=\"/content/images/2025/sbom_01.png\" alt=\"The attestations summary from performing an SBOM run\"></p> <p>If you click one of those links, you're taken to <a href=\"https://github.com/andrewlock/NetEscapades.AspNetCore.SecurityHeaders/attestations/5505541\">the attestation display page</a>. Here you can view the attestation in a friendly format, as well as download the JSON file directly.</p> <p><img src=\"/content/images/2025/sbom_02.png\" alt=\"The attestation page for a run\"></p> <h2 id=\"verifying-sbom-attestations\" class=\"heading-with-anchor\"><a href=\"#verifying-sbom-attestations\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Verifying SBOM attestations</a></h2> <p>Just as for artifact provenance, SBOM attestations <em>only</em> provide value if you <em>verify</em> the attestations when consuming the artifacts. You can verify both SBOM provenance using the GitHub CLI, passing in the artifact you wish to verify, and an appropriate <code>--predicate-type</code>:</p> <pre class=\"language-bash\"><code class=\"language-bash\">gh attestation verify <span class=\"token punctuation\">\\</span>\n  <span class=\"token parameter variable\">--owner</span> andrewlock <span class=\"token punctuation\">\\</span>\n  --predicate-type https://cyclonedx.org/bom <span class=\"token punctuation\">\\</span>\n  <span class=\"token operator\">&lt;</span>filename-or-url<span class=\"token operator\">&gt;</span>\n</code></pre> <blockquote> <p>Note that in the above example I passed in a CycloneDX predicate; for SPDX you would pass in something like <code>https://spdx.dev/Document/v2.3</code> instead. Note that if you don't specify a <code>--predicate-type</code>, then the CLI will <a href=\"/creating-provenance-attestations-for-nuget-packages-in-github-actions/\">verify the provenance attestation</a> for the package instead of the SBOM.</p> </blockquote> <p>For example, running the above command and providing the downloaded package from the workflow run produces something like the following:</p> <pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token operator\">&gt;</span> gh attestation verify <span class=\"token parameter variable\">--owner</span> andrewlock --predicate-type https://cyclonedx.org/bom <span class=\"token string\">\"NetEscapades.AspNetCore.SecurityHeaders.1.0.0-preview.4.nupkg\"</span>\nLoaded digest sha256:bf809ff0ed6a8a31131df4391b169e35ded44d4dfd97cc797123441683a95c9f <span class=\"token keyword\">for</span> file://NetEscapades.AspNetCore.SecurityHeaders.1.0.0-preview.4.nupkg\nLoaded <span class=\"token number\">2</span> attestations from GitHub API\n\nThe following policy criteria will be enforced:\n- Predicate <span class=\"token builtin class-name\">type</span> must match:<span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span> https://cyclonedx.org/bom\n- Source Repository Owner URI must match:<span class=\"token punctuation\">..</span>. https://github.com/andrewlock\n- Subject Alternative Name must match regex: <span class=\"token punctuation\">(</span>?i<span class=\"token punctuation\">)</span>^https://github.com/andrewlock/\n- OIDC Issuer must match:<span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span>. https://token.actions.githubusercontent.com\n\n✓ Verification succeeded<span class=\"token operator\">!</span>\n\nThe following <span class=\"token number\">1</span> attestation matched the policy criteria\n\n- Attestation <span class=\"token comment\">#1</span>\n  - Build repo:<span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span>. andrewlock/NetEscapades.AspNetCore.SecurityHeaders\n  - Build workflow:. .github/workflows/BuildAndPack.yml@refs/tags/v1.0.0-preview.4\n  - Signer repo:<span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span> andrewlock/NetEscapades.AspNetCore.SecurityHeaders\n  - Signer workflow: .github/workflows/BuildAndPack.yml@refs/tags/v1.0.0-preview.4\n</code></pre> <p>Unfortunately, as I described in a <a href=\"/creating-provenance-attestations-for-nuget-packages-in-github-actions/#and-now-for-the-bad-news\">previous post on attestations</a>, verifying the provenance of NuGet packages uploaded to nuget.org is a bit more problematic.</p> <h3 id=\"the-nuget-signing-issue\" class=\"heading-with-anchor\"><a href=\"#the-nuget-signing-issue\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">The NuGet signing issue</a></h3> <p>As I described in a <a href=\"/creating-provenance-attestations-for-nuget-packages-in-github-actions/#and-now-for-the-bad-news\">previous post on attestations</a>, nuget.org modifies the <em>.nupkg</em> files that you upload, modifying their contents to add a signature file. Unfortunately changing the file like means that the provenance attestation and SBOM attestations are no longer valid for the file, which significantly reduces the usefulness of the attestations.</p> <p>It's possible to restore <em>some</em> packages downloaded from nuget.org to their previous state, <a href=\"/creating-provenance-attestations-for-nuget-packages-in-github-actions/#update-the-redemption-arc\">as I showed previously</a>. For example, on Linux you can use the <code>zip</code> utility to delete the <em>.signature.p7s</em> file added by nuget.org:</p> <pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token assign-left variable\">file</span><span class=\"token operator\">=</span><span class=\"token string\">\"NetEscapades.AspNetCore.SecurityHeaders.1.0.0-preview.4.nupkg\"</span>\n\n<span class=\"token comment\"># Delete the .signature.p7s file that nuget.org adds to the package</span>\n<span class=\"token function\">zip</span> <span class=\"token parameter variable\">-d</span> <span class=\"token variable\">$file</span> .signature.p7s\n</code></pre> <p>Unfortunately this doesn't work for <em>all</em> packages. If a package is <a href=\"https://learn.microsoft.com/en-us/nuget/create-packages/sign-a-package\"><em>author</em> signed</a>, then the <em>.signature.p7s</em> file will be part of the <em>.nupkg</em> file <em>before</em> it's uploaded to nuget.org. The hash of the file at this point is what will be used to generate the provenance and SBOM attestations.</p> <p>When you upload the package to nuget.org, it adds a repository counter-signature, <em>modifying</em> the <em>.signature.p7s</em> file. That means you can't \"simply\" remove the .signature.p7s file to restore the original file. Unfortunately, I'm not sure there's a good solution to creating provenance attestations for the packages in this case; you'll essentially never be able to reliably verify the provenance, rendering them essentially pointless (as they could be easily forged).</p> <blockquote> <p>The good news in all this is that the author and repository signatures are intended to serve a <em>similar</em> purpose to the attestations. In many ways they're the \"NuGet native\" solution to the problem. However they don't tie an artifact to a <em>specific</em> CI execution in the same way that the GitHub attestations do.</p> </blockquote> <p>All of that is to say that generating attestations does not seem particularly useful in the .NET and NuGet ecosystems right now. <em>Generating</em> the attestations, as I've shown in this post, is not too difficult. However <em>consuming</em> and <em>verifying</em> the attestations is another story, and not one that NuGet provides good support for at this point.</p> <h2 id=\"summary\" class=\"heading-with-anchor\"><a href=\"#summary\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Summary</a></h2> <p>In this post I built on top of the previous two posts about provenance attestations and software bills of materials (SBOM). This post showed how to combine the two concepts, producing provenance attestations for your SBOM documents. These provide confidence to consumers that a given SBOM document was generated for a specific artifact. I showed how you can use the <code>actions/attest-sbom</code> GitHub Action to attest SPDX and CycloneDX SBOMs, and how to verify the generated attestations. Finally, I discussed the problem with NuGet packages uploaded to nuget.org, and why verifying attestations for these <em>nupkg</em> files is difficult.</p> ",
    "sanitized": "In this post I show how you can create attestations for SBOM documents that you have created for your application or Nuget package. Supply chain security and attestations In the last couple of posts on my blog, I've been looking at some of the potential steps you can take to be a good citizen in the software ecosystem by providing confidence in the artifacts you produce. In particular, I've been looking at some of the steps you can take related to software provenance. Initially, I looked at how you can produce provenance attestations for your NuGet packages (or other applications), by adding an easy-to-use GitHub Action to your build workflow.  A provenance attestation provides a common format for describing how your artifact was built, the environment it was built in, the build definition that produced it, the build run that produced it, and more.  Providing an attestation doesn't automatically improve the security of downstream projects consuming your NuGet package; consumers must make sure they verify the attestation, but it provides one building block for securing the software supply chain. In the subsequent post I showed how you can create a Software Bill of Materials (SBOM). I used a variety of different tools, and showed how the resulting document varies somewhat based on the tool you use, but they all provide a standard document that can be processed by machines.  An SBOM describes the various packages and dependencies that go into creating a software artifact such as an application or a package. An SBOM gives visibility into what components your software contains, including any components with known vulnerabilities, as well as any potential compliance or licensing issues or supply chain risks.  In this post, I show how you can combine the two concepts. As well as providing provenance attestations for your package itself, you can also provide attestations for the SBOM associated with the package. This ensures that consumers can trust that the SBOM provided has not been tampered with, and provides guarantees about when, where, and how it was generated. Generating attestations for an SBOM The good news is that if you've already followed the previous two posts, you're already most of the way there. In the first post about generating attestations, I showed the actions/attest-build-provenance GitHub Action you can use to generate provenance for an artifact. In this post, we use the actions/attest-sbom GitHub action that generates a signed SBOM attestation for SBOMs. As a reminder, there are a variety of standard formats you can choose for an SBOM, but two of the most popular appear to be System Package Data Exchange (SPDX) and CycloneDX. Both of these formats have a JSON document option, are specified as standards (ISO/IEC 5692:2021 for SPDX, ECMA-424 for CycloneDX), and can be generated using a wide variety of open source tools. The actions/attest-sbom GitHub action works with both SPDX and CycloneDX JSON documents, so you can use whichever tools you prefer to generate the SBOM. The attestation creation process itself is essentially identical to the flow used by actions/attest-build-provenance for artifact provenance, using GitHub's Sigstore client.    The Github attestation method. From Introducing Artifact Attestations–now in public beta You can read more about the attestation process in my previous post or in the official documentation. in this post I'm going to go straight to an example. Updating a workflow to generate SBOM attestations In this post I'm going to start with an existing workflow that already generates an SBOM. The details of how it generates the SBOM aren't important at this stage (see the previous post from some possible approaches). All that matters here is that we have the artifact, and we have the corresponding SBOM. The following initial workflow builds a .NET NuGet package and generates a CycloneDX SBOM JSON document using the CycloneDX/gh-dotnet-generate-sbom GitHub Action. This GitHub action has fewer configuration parameters than the .NET module I showed in my previous post, but it does the job for this post: name: BuildAndPack\n\non:\n  push:\n    branches: [\"main\" ]\n    tags: ['*']\n  pull_request:\n    branches: ['*']\n\njobs:\n  build-and-test:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2\n      - uses: actions/setup-dotnet@67a3573c9a986a3f9c594539f4ab511d57bb3ce9 # v4.3.1\n        with:\n          dotnet-version: \"9.0.x\"\n\n      - name: Build and pack\n        run: dotnet pack -c Release\n\n      - name: Push to NuGet\n        run: dotnet nuget push artifacts/packages/NetEscapades.AspNetCore.SecurityHeaders.nupkg\n        env:\n          NuGetToken: ${{ secrets.NUGET_TOKEN }}\n\n      - name: Generate JSON SBOM\n        uses: CycloneDX/gh-dotnet-generate-sbom@c183e4ac30e5b99354cb9a98c38548e07c538346 # v1.0.1\n        with:\n          path: ./src/NetEscapades.AspNetCore.SecurityHeaders/NetEscapades.AspNetCore.SecurityHeaders.csproj\n          out: ./artifacts/sboms\n          json: true\n          github-bearer-token: ${{ secrets.GITHUB_TOKEN }}\n In the workflow above we are building the NetEscapades.AspNetCore.SecurityHeaders.nupkg package into the artifacts/packages folder, and then generating an SBOM in the artifacts/sboms folder called bom.json. To generate an attestation, we simply need to add a step that uses the actions/attest-sbom action and pass in the following values: subject-path: the path to the artifact; the .nupkg file in this case. sbom-path: the path to the SBOM - name: Attest package\n  uses: actions/attest-sbom@115c3be05ff3974bcbd596578934b3f9ce39bf68 # v2.2.0\n  with:\n    subject-path: artifacts/packages/NetEscapades.AspNetCore.SecurityHeaders.nupkg\n    sbom-path: artifacts/sboms/bom.json\n As when we generated the artifact provenance, we need to add some additional permissions to our workflow, so that the attestation action can access the OpenID Connect token and create attestations: permissions:\n  id-token: write\n  attestations: write\n And that's it. Putting it all together, the full workflow looks something like the following: name: BuildAndPack\n\non:\n  push:\n    branches: [\"main\" ]\n    tags: ['*']\n  pull_request:\n    branches: ['*']\n\njobs:\n  build-and-test:\n    # 👇 Add these permissions\n    permissions:\n      id-token: write\n      attestations: write\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2\n      - uses: actions/setup-dotnet@67a3573c9a986a3f9c594539f4ab511d57bb3ce9 # v4.3.1\n        with:\n          dotnet-version: \"9.0.x\"\n\n      - name: Build and pack\n        run: dotnet pack -c Release\n\n      - name: Push to NuGet\n        run: dotnet nuget push artifacts/packages/NetEscapades.AspNetCore.SecurityHeaders.nupkg\n        env:\n          NuGetToken: ${{ secrets.NUGET_TOKEN }}\n\n      - name: Generate JSON SBOM\n        uses: CycloneDX/gh-dotnet-generate-sbom@c183e4ac30e5b99354cb9a98c38548e07c538346 # v1.0.1\n        with:\n          path: ./src/NetEscapades.AspNetCore.SecurityHeaders/NetEscapades.AspNetCore.SecurityHeaders.csproj\n          out: ./artifacts/sboms\n          json: true\n          github-bearer-token: ${{ secrets.GITHUB_TOKEN }}\n\n      # 👇 Add this attestation step\n      - name: Attest package\n        uses: actions/attest-sbom@115c3be05ff3974bcbd596578934b3f9ce39bf68 # v2.2.0\n        with:\n          subject-path: artifacts/packages/NetEscapades.AspNetCore.SecurityHeaders.nupkg\n          sbom-path: artifacts/sboms/bom.json\n Note that in the above workflow we're generating an SBOM and attestation for every PR as well as on branches etc. The process is pretty lightweight, but depending on your requirements, you might want to only generate these when doing a release, for example. Viewing the output of the attestation The critical output of the actions/attest-sbom action is a Sigstore bundle JSON document, which looks something like the following: {\n  \"mediaType\": \"application/vnd.dev.sigstore.bundle.v0.3+json\",\n  \"verificationMaterial\": {\n    \"tlogEntries\": [\n      {\n        \"logIndex\": \"173522574\",\n        \"logId\": {\n          \"keyId\": \"wNI9atQGlz+VWfO6LRygH4QUfY/8W4RFwiT5i5WRgB0=\"\n        },\n        \"kindVersion\": {\n          \"kind\": \"dsse\",\n          \"version\": \"0.0.1\"\n        },\n        \"integratedTime\": \"1740260580\",\n        \"inclusionPromise\": {\n          \"signedEntryTimestamp\": \"MEUCIBvt4HJQodZKrcVOFJ8bC2OyoxWV9adYct+KQ29AvdG+AiEAixnnlFPEpJYArVmej1xHLCsfITAYwTeqIYPN3+Lg2FU=\"\n        },\n        \"inclusionProof\": {\n          \"logIndex\": \"51618312\",\n          \"rootHash\": \"/tkGrRms2LHwgOrsRiRe/GxbSerTzyibuLiiqvsd3Og=\",\n          \"treeSize\": \"51618314\",\n          \"hashes\": [\n            \"q/dkAjxeUynkKYxXPenKThynxTZvMRLpbWJ/F4nvfHc=\",\n            \"GLHBWB7fj2mHeqnYei5qghe1Rwf1Ryx0m2ow4hQBjDA=\",\n            \"5KGpxQ+6EoREdhANHkfdmiMhMl/UH5p9fUvEc3c6mbA=\",\n            \"CG1EBVfzTcx/tcgBJXeLIkUKxmJoDY7oMcTXiz3cwcs=\",\n            \"AN36Jdc//SuaAqKodEza6ZI445Iq7K6NiBc6gQKMPjk=\",\n            \"uv/35HjaIqySZ59LkCidkK09c3zuQ4ZGcfn0njiWG6U=\",\n            \"D13BynaH2+rwdR+r2tnUFQcSQVSCCs0wbF5EIEgxb/4=\",\n            \"g23ss+32Z0Vik2ybu098JI/jK1u3k4chLVBZCi3AumY=\",\n            \"ebCKJ53lKWPqIx8mXXgznF9DGoQv70J7JTlFAav6s5E=\",\n            \"vemyaMj0Na1LMjbB/9Dmkq8T+jAb3o+yCESgAayUABU=\"\n          ],\n          \"checkpoint\": {\n            \"envelope\": \"rekor.sigstore.dev - 1193050959916656506\\n51618314\\n/tkGrRms2LHwgOrsRiRe/GxbSerTzyibuLiiqvsd3Og=\\n\\n— rekor.sigstore.dev wNI9ajBGAiEApPeea+8Jsz1H5l1TwYIpWd8Hp493eFzJe+Me75klP/MCIQDpsL20JctwgKPzmaGeaa5e+liHlIkEvq/TRJdUEkKULg==\\n\"\n          }\n        },\n        \"canonicalizedBody\": \"eyJhcGlWZXJzaW9uIjoiMC4wLjEiLCJraW5kIjoiZHNzZSIsInNwZWMiOnsiZW52ZWxvcGVIYXNoIjp7ImFsZ29yaXRobSI6InNoYTI1NiIsInZhbHVlIjoiMTAxN2E4N2ExMjFiZDA4YmIxNzMwMTlkYzViOGIyOTM5YjQwYTMzZTYwMGQ1YjhhOGE3MWE5MGU2NTRmOWRjOCJ9LCJwYXlsb2FkSGFzaCI6eyJhbGdvcml0aG0iOiJzaGEyNTYiLCJ2YWx1ZSI6ImY2MGJjYThkMmEzMmY3Yzg0NWMyZmM1N2M0MmM4OTQzYWZmOGNkMDUxMjU1ZTFiOGJjZWIwMzgyNTk2MTBhZmYifSwic2lnbmF0dXJlcyI6W3sic2lnbmF0dXJlIjoiTUVVQ0lDaWNDdWh1SXRxbGZPaHl3VDBRcEJaaGtqdWZDb2hqWjNYN29tbU5UeEx1QWlFQXJjNkRmNisrMXp0bXphQWIwOXQ3SHFLNEx0dnF4cnZwa0theTh1cU5pUjA9IiwidmVyaWZpZXIiOiJMUzB0TFMxQ1JVZEpUaUJEUlZKVVNVWkpRMEZVUlMwdExTMHRDazFKU1VoeFJFTkRRbmsyWjBGM1NVSkJaMGxWWVRWdFNWZEpjMFZpVjBkMlJFWnhUMXBCVlhGdE1XZHNXV1J2ZDBObldVbExiMXBKZW1vd1JVRjNUWGNLVG5wRlZrMUNUVWRCTVZWRlEyaE5UV015Ykc1ak0xSjJZMjFWZFZwSFZqSk5ValIzU0VGWlJGWlJVVVJGZUZaNllWZGtlbVJIT1hsYVV6RndZbTVTYkFwamJURnNXa2RzYUdSSFZYZElhR05PVFdwVmQwMXFTWGxOYWtVd1RYcEJkMWRvWTA1TmFsVjNUV3BKZVUxcVJURk5la0YzVjJwQlFVMUdhM2RGZDFsSUNrdHZXa2w2YWpCRFFWRlpTVXR2V2tsNmFqQkVRVkZqUkZGblFVVnpiV2hLUm5KdVptZExaek5VVUdKdU4xVk5NazlyTmxGWlNraEJkek56Y0dSTFVGUUtUblY0Y0RWU01taHhNRVpNZDNwUFVUVTVPRzlQTUVNdk1GQjFRbGhXU1VGNlIzTXJRblpMWTNwSFpETkRXbUZsUkdGUFEwSnJNSGRuWjFwS1RVRTBSd3BCTVZWa1JIZEZRaTkzVVVWQmQwbElaMFJCVkVKblRsWklVMVZGUkVSQlMwSm5aM0pDWjBWR1FsRmpSRUY2UVdSQ1owNVdTRkUwUlVablVWVjJVRzA0Q2twR1dtZE9iRWxZYlU1VGFIWkNhVmg0ZEdoamJGRnpkMGgzV1VSV1VqQnFRa0puZDBadlFWVXpPVkJ3ZWpGWmEwVmFZalZ4VG1wd1MwWlhhWGhwTkZrS1drUTRkMmRaYzBkQk1WVmtSVkZGUWk5M1UwSm5SRUlyYUc1NGIyUklVbmRqZW05MlRESmtjR1JIYURGWmFUVnFZakl3ZGxsWE5XdGpiVll6WWtjNWFncGhlVGxQV2xoU1JtTXlUbWhqUjBacldsaE5kVkZZVG5kVWJWWXdVVEk1ZVZwVE5WUmFWMDR4WTIxc01HVlZhR3haVjFKc1kyNU5ka3h0WkhCa1IyZ3hDbGxwT1ROaU0wcHlXbTE0ZG1RelRYWlJibFp3WWtkU1FtSnRVbEZaVjA1eVRHNXNkR0pGUW5sYVYxcDZURE5DTVdKSGQzWk5ha2t3VERJeGJHTnRaR3dLVFVSclIwTnBjMGRCVVZGQ1p6YzRkMEZSUlVWTE1tZ3daRWhDZWs5cE9IWmtSemx5V2xjMGRWbFhUakJoVnpsMVkzazFibUZZVW05a1Ywb3hZekpXZVFwWk1qbDFaRWRXZFdSRE5XcGlNakIzUjJkWlMwdDNXVUpDUVVkRWRucEJRa0ZuVVUxalNGWnpZa1k1ZVZwWVJqRmFXRTR3VFVSWlIwTnBjMGRCVVZGQ0NtYzNPSGRCVVUxRlMwUmthVnBIU1hsYVIxVXhUakpaTkUxRWJHaFBWR3hzVFZSUk1VNHlWWGhPVkdoc1RXMU5lVnBVVVhwTmJWbDNUV3BOTTA1NlRYY0tSMmRaUzB0M1dVSkNRVWRFZG5wQlFrSkJVVTFSYmxad1lrZFNRbUp0VWxGWlYwNXlUVVZCUjBOcGMwZEJVVkZDWnpjNGQwRlJWVVZOYlVaMVdraEtiQXBrTW5oMldUSnpkbFJ0VmpCU1dFNXFXVmhDYUZwSFZucE1hMFo2WTBVMWJHUkZUblpqYlZWMVZUSldhbVJZU25Ca1NHeEpXbGRHYTFwWVNucE5RMFZIQ2tOcGMwZEJVVkZDWnpjNGQwRlJXVVZGTTBwc1dtNU5kbU5JVm5OaVF6aDVUV3BSZG1KWFZubGFNbFYzVDNkWlMwdDNXVUpDUVVkRWRucEJRa05CVVhRS1JFTjBiMlJJVW5kamVtOTJURE5TZG1FeVZuVk1iVVpxWkVkc2RtSnVUWFZhTW13d1lVaFdhV1JZVG14amJVNTJZbTVTYkdKdVVYVlpNamwwVFVsSFRRcENaMjl5UW1kRlJVRlpUeTlOUVVWS1FrZzBUV1pIYURCa1NFSjZUMms0ZGxveWJEQmhTRlpwVEcxT2RtSlRPV2hpYlZKNVdsaGtjMkl5VG5KTU1EVnNDbVJGVm5wWk1rWjNXVmRTYkdONU5VSmpNMEpQV2xoU1JHSXpTbXhNYkU1c1dUTldlV0ZZVWpWVFIxWm9Xa2RXZVdONU9IVmFNbXd3WVVoV2FVd3paSFlLWTIxMGJXSkhPVE5qZVRsRFpGZHNjMXBGUm5WYVJrSm9XVEp6ZFdWWE1YTlJTRXBzV201TmRtTklWbk5pUXpoNVRXcFJkbUpYVm5sYU1sVjNUMEZaU3dwTGQxbENRa0ZIUkhaNlFVSkRaMUZ4UkVObk0xbHRVbWxOYlZKc1RsUmtiVTlFUVRWWlZHczFXbFJGTUU1VVpHeE5WRlUwV2xSS2FrMXRWVEJOZWtwdENrMUVTWHBPZW1ONlRVSXdSME5wYzBkQlVWRkNaemM0ZDBGUmMwVkVkM2RPV2pKc01HRklWbWxNVjJoMll6TlNiRnBFUWxaQ1oyOXlRbWRGUlVGWlR5OEtUVUZGVFVKRlkwMVNWMmd3WkVoQ2VrOXBPSFphTW13d1lVaFdhVXh0VG5aaVV6bG9ZbTFTZVZwWVpITmlNazV5VERBMWJHUkZWbnBaTWtaM1dWZFNiQXBqZVRWQ1l6TkNUMXBZVWtSaU0wcHNUR3hPYkZrelZubGhXRkkxVTBkV2FGcEhWbmxqZWtFMFFtZHZja0puUlVWQldVOHZUVUZGVGtKRGIwMUxSR1JwQ2xwSFNYbGFSMVV4VGpKWk5FMUViR2hQVkd4c1RWUlJNVTR5VlhoT1ZHaHNUVzFOZVZwVVVYcE5iVmwzVFdwTk0wNTZUWGRKZDFsTFMzZFpRa0pCUjBRS2RucEJRa1JuVVZaRVFrNTVXbGRhZWt3elFqRmlSM2QyVFdwSk1Fd3lNV3hqYldSc1RVSm5SME5wYzBkQlVWRkNaemM0ZDBGUk9FVkRaM2RKVGxScmVncE9WRWswVG1wbmQweFJXVXRMZDFsQ1FrRkhSSFo2UVVKRlFWRm1SRUl4YjJSSVVuZGplbTkyVERKa2NHUkhhREZaYVRWcVlqSXdkbGxYTld0amJWWXpDbUpIT1dwaGVrRlpRbWR2Y2tKblJVVkJXVTh2VFVGRlVrSkJiMDFEUkVVMFRucFZNVTE2WnpSTlNVZE5RbWR2Y2tKblJVVkJXVTh2VFVGRlUwSklORTBLWmtkb01HUklRbnBQYVRoMldqSnNNR0ZJVm1sTWJVNTJZbE01YUdKdFVubGFXR1J6WWpKT2Nrd3dOV3hrUlZaNldUSkdkMWxYVW14amVUVkNZek5DVHdwYVdGSkVZak5LYkV4c1RteFpNMVo1WVZoU05WTkhWbWhhUjFaNVkzazRkVm95YkRCaFNGWnBURE5rZG1OdGRHMWlSemt6WTNrNVEyUlhiSE5hUlVaMUNscEdRbWhaTW5OMVpWY3hjMUZJU214YWJrMTJZMGhXYzJKRE9IbE5hbEYyWWxkV2VWb3lWWGRQUVZsTFMzZFpRa0pCUjBSMmVrRkNSWGRSY1VSRFp6TUtXVzFTYVUxdFVteE9WR1J0VDBSQk5WbFVhelZhVkVVd1RsUmtiRTFVVlRSYVZFcHFUVzFWTUUxNlNtMU5SRWw2VG5wamVrMUNkMGREYVhOSFFWRlJRZ3BuTnpoM1FWSlJSVVJuZDAxalNGWnpZa1k1ZVZwWVJqRmFXRTR3VFVoclIwTnBjMGRCVVZGQ1p6YzRkMEZTVlVWaGQzaHdZVWhTTUdOSVRUWk1lVGx1Q21GWVVtOWtWMGwxV1RJNWRFd3lSblZhU0Vwc1pESjRkbGt5YzNaVWJWWXdVbGhPYWxsWVFtaGFSMVo2VEd0R2VtTkZOV3hrUlU1MlkyMVZkVlV5Vm1vS1pGaEtjR1JJYkVsYVYwWnJXbGhLZWt3eVJtcGtSMngyWW01TmRtTnVWblZqZVRoNFRYcFJNMDVxWXpSTmVtZDNUVU01YUdSSVVteGlXRUl3WTNrNGVBcE5RbGxIUTJselIwRlJVVUpuTnpoM1FWSlpSVU5CZDBkalNGWnBZa2RzYWsxSlIweENaMjl5UW1kRlJVRmtXalZCWjFGRFFrZ3dSV1YzUWpWQlNHTkJDak5VTUhkaGMySklSVlJLYWtkU05HTnRWMk16UVhGS1MxaHlhbVZRU3pNdmFEUndlV2RET0hBM2J6UkJRVUZIVmt3MU1HUlJaMEZCUWtGTlFWTkVRa2NLUVdsRlFYVkdja0pxWW1kTmMyc3ZMMjFwYUUxUVFVTm9NV1YzVUVJeVJWSTVkMmgxYjI0NVFUUlROVEpvTTBWRFNWRkVRMWhGTkhsRVIybHdabEUyYVFwS2VrWnhXVTQ1VG5aMGNrSnJNVWw1VWxWbFluUnNOVVF5SzFGQk9VUkJTMEpuWjNGb2EycFBVRkZSUkVGM1RtOUJSRUpzUVdwQlJXcENSVU5zWTIxbkNuVnhSSFJ5VFhGNWRGSk9ZMFZUYWxsTWRUUjFNRTlTWTNSTFJXOVljSGRMZFVSNVpuWXphSEJMWVdJNWQzZDBUa1V3Wm1KWmJXOURUVkZET1hVMlNqa0tWV05NUWxsVlFsYzFVMVJPU1dvMFNuZzNNRzlHY3psTWN6SkJZa3BwVFVWaGVtbzJiemcwYW5acE1HaGFVU3N6WXpCT2RtbGlabHB5ZGtrOUNpMHRMUzB0UlU1RUlFTkZVbFJKUmtsRFFWUkZMUzB0TFMwSyJ9XX19\"\n      }\n    ],\n    \"timestampVerificationData\": {},\n    \"certificate\": {\n      \"rawBytes\": \"MIIHqDCCBy6gAwIBAgIUa5mIWIsEbWGvDFqOZAUqm1glYdowCgYIKoZIzj0EAwMwNzEVMBMGA1UEChMMc2lnc3RvcmUuZGV2MR4wHAYDVQQDExVzaWdzdG9yZS1pbnRlcm1lZGlhdGUwHhcNMjUwMjIyMjE0MzAwWhcNMjUwMjIyMjE1MzAwWjAAMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEsmhJFrnfgKg3TPbn7UM2Ok6QYJHAw3spdKPTNuxp5R2hq0FLwzOQ598oO0C/0PuBXVIAzGs+BvKczGd3CZaeDaOCBk0wggZJMA4GA1UdDwEB/wQEAwIHgDATBgNVHSUEDDAKBggrBgEFBQcDAzAdBgNVHQ4EFgQUvPm8JFZgNlIXmNShvBiXxthclQswHwYDVR0jBBgwFoAU39Ppz1YkEZb5qNjpKFWixi4YZD8wgYsGA1UdEQEB/wSBgDB+hnxodHRwczovL2dpdGh1Yi5jb20vYW5kcmV3bG9jay9OZXRFc2NhcGFkZXMuQXNwTmV0Q29yZS5TZWN1cml0eUhlYWRlcnMvLmdpdGh1Yi93b3JrZmxvd3MvQnVpbGRBbmRQYWNrLnltbEByZWZzL3B1bGwvMjI0L21lcmdlMDkGCisGAQQBg78wAQEEK2h0dHBzOi8vdG9rZW4uYWN0aW9ucy5naXRodWJ1c2VyY29udGVudC5jb20wGgYKKwYBBAGDvzABAgQMcHVsbF9yZXF1ZXN0MDYGCisGAQQBg78wAQMEKDdiZGIyZGU1N2Y4MDlhOTllMTQ1N2UxNThlMmMyZTQzMmYwMjM3NzMwGgYKKwYBBAGDvzABBAQMQnVpbGRBbmRQYWNrMEAGCisGAQQBg78wAQUEMmFuZHJld2xvY2svTmV0RXNjYXBhZGVzLkFzcE5ldENvcmUuU2VjdXJpdHlIZWFkZXJzMCEGCisGAQQBg78wAQYEE3JlZnMvcHVsbC8yMjQvbWVyZ2UwOwYKKwYBBAGDvzABCAQtDCtodHRwczovL3Rva2VuLmFjdGlvbnMuZ2l0aHVidXNlcmNvbnRlbnQuY29tMIGMBgorBgEEAYO/MAEJBH4MfGh0dHBzOi8vZ2l0aHViLmNvbS9hbmRyZXdsb2NrL05ldEVzY2FwYWRlcy5Bc3BOZXRDb3JlLlNlY3VyaXR5SGVhZGVycy8uZ2l0aHViL3dvcmtmbG93cy9CdWlsZEFuZFBhY2sueW1sQHJlZnMvcHVsbC8yMjQvbWVyZ2UwOAYKKwYBBAGDvzABCgQqDCg3YmRiMmRlNTdmODA5YTk5ZTE0NTdlMTU4ZTJjMmU0MzJmMDIzNzczMB0GCisGAQQBg78wAQsEDwwNZ2l0aHViLWhvc3RlZDBVBgorBgEEAYO/MAEMBEcMRWh0dHBzOi8vZ2l0aHViLmNvbS9hbmRyZXdsb2NrL05ldEVzY2FwYWRlcy5Bc3BOZXRDb3JlLlNlY3VyaXR5SGVhZGVyczA4BgorBgEEAYO/MAENBCoMKDdiZGIyZGU1N2Y4MDlhOTllMTQ1N2UxNThlMmMyZTQzMmYwMjM3NzMwIwYKKwYBBAGDvzABDgQVDBNyZWZzL3B1bGwvMjI0L21lcmdlMBgGCisGAQQBg78wAQ8ECgwINTkzNTI4NjgwLQYKKwYBBAGDvzABEAQfDB1odHRwczovL2dpdGh1Yi5jb20vYW5kcmV3bG9jazAYBgorBgEEAYO/MAERBAoMCDE4NzU1Mzg4MIGMBgorBgEEAYO/MAESBH4MfGh0dHBzOi8vZ2l0aHViLmNvbS9hbmRyZXdsb2NrL05ldEVzY2FwYWRlcy5Bc3BOZXRDb3JlLlNlY3VyaXR5SGVhZGVycy8uZ2l0aHViL3dvcmtmbG93cy9CdWlsZEFuZFBhY2sueW1sQHJlZnMvcHVsbC8yMjQvbWVyZ2UwOAYKKwYBBAGDvzABEwQqDCg3YmRiMmRlNTdmODA5YTk5ZTE0NTdlMTU4ZTJjMmU0MzJmMDIzNzczMBwGCisGAQQBg78wARQEDgwMcHVsbF9yZXF1ZXN0MHkGCisGAQQBg78wARUEawxpaHR0cHM6Ly9naXRodWIuY29tL2FuZHJld2xvY2svTmV0RXNjYXBhZGVzLkFzcE5ldENvcmUuU2VjdXJpdHlIZWFkZXJzL2FjdGlvbnMvcnVucy8xMzQ3Njc4MzgwMC9hdHRlbXB0cy8xMBYGCisGAQQBg78wARYECAwGcHVibGljMIGLBgorBgEEAdZ5AgQCBH0EewB5AHcA3T0wasbHETJjGR4cmWc3AqJKXrjePK3/h4pygC8p7o4AAAGVL50dQgAABAMASDBGAiEAuFrBjbgMsk//mihMPACh1ewPB2ER9whuon9A4S52h3ECIQDCXE4yDGipfQ6iJzFqYN9NvtrBk1IyRUebtl5D2+QA9DAKBggqhkjOPQQDAwNoADBlAjAEjBEClcmguqDtrMqytRNcESjYLu4u0ORctKEoXpwKuDyfv3hpKab9wwtNE0fbYmoCMQC9u6J9UcLBYUBW5STNIj4Jx70oFs9Ls2AbJiMEazj6o84jvi0hZQ+3c0NvibfZrvI=\"\n    }\n  },\n  \"dsseEnvelope\": {\n    \"payload\": \"eyJfdHlwZSI6Imh0dHBzOi8vaW4tdG90by5pby9TdGF0ZW1lbnQvdjEiLCJzdWJqZWN0IjpbeyJuYW1lIjoiTmV0RXNjYXBhZGVzLkFzcE5ldENvcmUuU2VjdXJpdHlIZWFkZXJzLjEuMC4wLXByZXZpZXcuMy5udXBrZyIsImRpZ2VzdCI6eyJzaGEyNTYiOiJlYmZmMWU3YzVhMTI5YTY5ZTI5NDFmODc1ZGQ3YTlmNzdhMGEwOWVjZjkwOTVmZTA0Y2M0NTM1MTE4NjNlOWNlIn19XSwicHJlZGljYXRlVHlwZSI6Imh0dHBzOi8vY3ljbG9uZWR4Lm9yZy9ib20iLCJwcmVkaWNhdGUiOnsiYm9tRm9ybWF0IjoiQ3ljbG9uZURYIiwic3BlY1ZlcnNpb24iOiIxLjYiLCJzZXJpYWxOdW1iZXIiOiJ1cm46dXVpZDpmOGFiNWQwMC03NGMyLTRlNjktYjAxMy1lYzcxZDM4MDYwNzYiLCJ2ZXJzaW9uIjoxLCJtZXRhZGF0YSI6eyJ0aW1lc3RhbXAiOiIyMDI1LTAyLTIyVDIxOjQyOjQ0WiIsInRvb2xzIjpbeyJ2ZW5kb3IiOiJDeWNsb25lRFgiLCJuYW1lIjoiQ3ljbG9uZURYIG1vZHVsZSBmb3IgLk5FVCIsInZlcnNpb24iOiI1LjAuMS4wIn1dLCJjb21wb25lbnQiOnsidHlwZSI6ImxpYnJhcnkiLCJib20tcmVmIjoiTmV0RXNjYXBhZGVzLkFzcE5ldENvcmUuU2VjdXJpdHlIZWFkZXJzQDEuMC4wLXByZXZpZXcuMyIsIm5hbWUiOiJOZXRFc2NhcGFkZXMuQXNwTmV0Q29yZS5TZWN1cml0eUhlYWRlcnMiLCJ2ZXJzaW9uIjoiMS4wLjAtcHJldmlldy4zIn19LCJjb21wb25lbnRzIjpbeyJ0eXBlIjoibGlicmFyeSIsImJvbS1yZWYiOiJwa2c6bnVnZXQvU3R5bGVDb3AuQW5hbHl6ZXJzQDEuMi4wLWJldGEuNTU2IiwiYXV0aG9ycyI6W3sibmFtZSI6IlNhbSBIYXJ3ZWxsIGV0LiBhbC4ifV0sIm5hbWUiOiJTdHlsZUNvcC5BbmFseXplcnMiLCJ2ZXJzaW9uIjoiMS4yLjAtYmV0YS41NTYiLCJkZXNjcmlwdGlvbiI6IkFuIGltcGxlbWVudGF0aW9uIG9mIFN0eWxlQ29wJ3MgcnVsZXMgdXNpbmcgUm9zbHluIGFuYWx5emVycyBhbmQgY29kZSBmaXhlcyIsInNjb3BlIjoicmVxdWlyZWQiLCJoYXNoZXMiOlt7ImFsZyI6IlNIQS01MTIiLCJjb250ZW50IjoiMDgxNjNGNjA2MUVCQzI2RUE5QjgwNjlBODJFOUY1NzVENjU2QTUwRjFEOTI5OUVEQTg3NEY0MTA3NzMxRUIyRTAyQjUxMkYyMDFGMUMzNEM2OTgzRDkyQkFFQ0Q2RUU1RTk5MkFBNkI2MUM3OEFFOTQ5MEE3RkREQkRENTE4ODIifV0sImxpY2Vuc2VzIjpbeyJsaWNlbnNlIjp7ImlkIjoiTUlUIn19XSwiY29weXJpZ2h0IjoiQ29weXJpZ2h0IDIwMTUgVHVubmVsIFZpc2lvbiBMYWJvcmF0b3JpZXMsIExMQyIsInB1cmwiOiJwa2c6bnVnZXQvU3R5bGVDb3AuQW5hbHl6ZXJzQDEuMi4wLWJldGEuNTU2IiwiZXh0ZXJuYWxSZWZlcmVuY2VzIjpbeyJ1cmwiOiJodHRwczovL2dpdGh1Yi5jb20vRG90TmV0QW5hbHl6ZXJzL1N0eWxlQ29wQW5hbHl6ZXJzIiwidHlwZSI6IndlYnNpdGUifV19LHsidHlwZSI6ImxpYnJhcnkiLCJib20tcmVmIjoicGtnOm51Z2V0L1N0eWxlQ29wLkFuYWx5emVycy5VbnN0YWJsZUAxLjIuMC41NTYiLCJhdXRob3JzIjpbeyJuYW1lIjoiU2FtIEhhcndlbGwgZXQuIGFsLiJ9XSwibmFtZSI6IlN0eWxlQ29wLkFuYWx5emVycy5VbnN0YWJsZSIsInZlcnNpb24iOiIxLjIuMC41NTYiLCJkZXNjcmlwdGlvbiI6IkFuIGltcGxlbWVudGF0aW9uIG9mIFN0eWxlQ29wJ3MgcnVsZXMgdXNpbmcgUm9zbHluIGFuYWx5emVycyBhbmQgY29kZSBmaXhlcyIsInNjb3BlIjoicmVxdWlyZWQiLCJoYXNoZXMiOlt7ImFsZyI6IlNIQS01MTIiLCJjb250ZW50IjoiMEU5RkJBRTcxM0QyRDMwNjkwQkIzMzFFNzMwOEE2MTk4OTRFRTI2QzEzNzk4ODU1RUMwQTI1MjlCMzI0NjhENjdGQkNGMkJDMUYwMkFBMEYzQUU3RTY4NTFEMkI1OTU2ODRFRjQxNTI0NUFBODExOUI5QjFCN0Q1OEMzMDkxNkIifV0sImxpY2Vuc2VzIjpbeyJsaWNlbnNlIjp7ImlkIjoiTUlUIn19XSwiY29weXJpZ2h0IjoiQ29weXJpZ2h0IDIwMTUgVHVubmVsIFZpc2lvbiBMYWJvcmF0b3JpZXMsIExMQyIsInB1cmwiOiJwa2c6bnVnZXQvU3R5bGVDb3AuQW5hbHl6ZXJzLlVuc3RhYmxlQDEuMi4wLjU1NiIsImV4dGVybmFsUmVmZXJlbmNlcyI6W3sidXJsIjoiaHR0cHM6Ly9naXRodWIuY29tL0RvdE5ldEFuYWx5emVycy9TdHlsZUNvcEFuYWx5emVycyIsInR5cGUiOiJ3ZWJzaXRlIn1dfV0sImRlcGVuZGVuY2llcyI6W3sicmVmIjoiTmV0RXNjYXBhZGVzLkFzcE5ldENvcmUuU2VjdXJpdHlIZWFkZXJzQDEuMC4wLXByZXZpZXcuMyIsImRlcGVuZHNPbiI6WyJwa2c6bnVnZXQvU3R5bGVDb3AuQW5hbHl6ZXJzQDEuMi4wLWJldGEuNTU2IiwicGtnOm51Z2V0L1N0eWxlQ29wLkFuYWx5emVycy5VbnN0YWJsZUAxLjIuMC41NTYiXX0seyJyZWYiOiJwa2c6bnVnZXQvU3R5bGVDb3AuQW5hbHl6ZXJzLlVuc3RhYmxlQDEuMi4wLjU1NiIsImRlcGVuZHNPbiI6W119LHsicmVmIjoicGtnOm51Z2V0L1N0eWxlQ29wLkFuYWx5emVyc0AxLjIuMC1iZXRhLjU1NiIsImRlcGVuZHNPbiI6WyJwa2c6bnVnZXQvU3R5bGVDb3AuQW5hbHl6ZXJzLlVuc3RhYmxlQDEuMi4wLjU1NiJdfV19fQ==\",\n    \"payloadType\": \"application/vnd.in-toto+json\",\n    \"signatures\": [\n      {\n        \"sig\": \"MEUCICicCuhuItqlfOhywT0QpBZhkjufCohjZ3X7ommNTxLuAiEArc6Df6++1ztmzaAb09t7HqK4LtvqxrvpkKay8uqNiR0=\"\n      }\n    ]\n  }\n}\n Unless otherwise told not to, the action also automatically produces a summary in the Actions run that looks something like the following:  If you click one of those links, you're taken to the attestation display page. Here you can view the attestation in a friendly format, as well as download the JSON file directly.  Verifying SBOM attestations Just as for artifact provenance, SBOM attestations only provide value if you verify the attestations when consuming the artifacts. You can verify both SBOM provenance using the GitHub CLI, passing in the artifact you wish to verify, and an appropriate --predicate-type: gh attestation verify \\\n  --owner andrewlock \\\n  --predicate-type https://cyclonedx.org/bom \\\n  <filename-or-url>\n  Note that in the above example I passed in a CycloneDX predicate; for SPDX you would pass in something like https://spdx.dev/Document/v2.3 instead. Note that if you don't specify a --predicate-type, then the CLI will verify the provenance attestation for the package instead of the SBOM.  For example, running the above command and providing the downloaded package from the workflow run produces something like the following: > gh attestation verify --owner andrewlock --predicate-type https://cyclonedx.org/bom \"NetEscapades.AspNetCore.SecurityHeaders.1.0.0-preview.4.nupkg\"\nLoaded digest sha256:bf809ff0ed6a8a31131df4391b169e35ded44d4dfd97cc797123441683a95c9f for file://NetEscapades.AspNetCore.SecurityHeaders.1.0.0-preview.4.nupkg\nLoaded 2 attestations from GitHub API\n\nThe following policy criteria will be enforced:\n- Predicate type must match:................ https://cyclonedx.org/bom\n- Source Repository Owner URI must match:... https://github.com/andrewlock\n- Subject Alternative Name must match regex: (?i)^https://github.com/andrewlock/\n- OIDC Issuer must match:................... https://token.actions.githubusercontent.com\n\n✓ Verification succeeded!\n\nThe following 1 attestation matched the policy criteria\n\n- Attestation #1\n  - Build repo:..... andrewlock/NetEscapades.AspNetCore.SecurityHeaders\n  - Build workflow:. .github/workflows/BuildAndPack.yml@refs/tags/v1.0.0-preview.4\n  - Signer repo:.... andrewlock/NetEscapades.AspNetCore.SecurityHeaders\n  - Signer workflow: .github/workflows/BuildAndPack.yml@refs/tags/v1.0.0-preview.4\n Unfortunately, as I described in a previous post on attestations, verifying the provenance of NuGet packages uploaded to nuget.org is a bit more problematic. The NuGet signing issue As I described in a previous post on attestations, nuget.org modifies the .nupkg files that you upload, modifying their contents to add a signature file. Unfortunately changing the file like means that the provenance attestation and SBOM attestations are no longer valid for the file, which significantly reduces the usefulness of the attestations. It's possible to restore some packages downloaded from nuget.org to their previous state, as I showed previously. For example, on Linux you can use the zip utility to delete the .signature.p7s file added by nuget.org: file=\"NetEscapades.AspNetCore.SecurityHeaders.1.0.0-preview.4.nupkg\"\n\n# Delete the .signature.p7s file that nuget.org adds to the package\nzip -d $file .signature.p7s\n Unfortunately this doesn't work for all packages. If a package is author signed, then the .signature.p7s file will be part of the .nupkg file before it's uploaded to nuget.org. The hash of the file at this point is what will be used to generate the provenance and SBOM attestations. When you upload the package to nuget.org, it adds a repository counter-signature, modifying the .signature.p7s file. That means you can't \"simply\" remove the .signature.p7s file to restore the original file. Unfortunately, I'm not sure there's a good solution to creating provenance attestations for the packages in this case; you'll essentially never be able to reliably verify the provenance, rendering them essentially pointless (as they could be easily forged).  The good news in all this is that the author and repository signatures are intended to serve a similar purpose to the attestations. In many ways they're the \"NuGet native\" solution to the problem. However they don't tie an artifact to a specific CI execution in the same way that the GitHub attestations do.  All of that is to say that generating attestations does not seem particularly useful in the .NET and NuGet ecosystems right now. Generating the attestations, as I've shown in this post, is not too difficult. However consuming and verifying the attestations is another story, and not one that NuGet provides good support for at this point. Summary In this post I built on top of the previous two posts about provenance attestations and software bills of materials (SBOM). This post showed how to combine the two concepts, producing provenance attestations for your SBOM documents. These provide confidence to consumers that a given SBOM document was generated for a specific artifact. I showed how you can use the actions/attest-sbom GitHub Action to attest SPDX and CycloneDX SBOMs, and how to verify the generated attestations. Finally, I discussed the problem with NuGet packages uploaded to nuget.org, and why verifying attestations for these nupkg files is difficult."
  },
  {
    "itemId": "https://andrewlock.net/creating-a-software-bill-of-materials-sbom-for-an-open-source-nuget-package/",
    "raw": "<img src=\"https://andrewlock.net/content/images/2025/sbom_banner.png\" /><p>In this post I discuss several tools you can use to create a software bill of materials (SBOM) for an application or a NuGet package. I demonstrate GitHub's built-in \"Export SBOM\" button, Microsoft's open source <code>sbom-tool</code>, the <code>anchore/sbom-action</code> GitHub Action, and finally the CycloneDX module for .NET.</p> <h2 id=\"what-is-a-software-bill-of-materials-sbom-\" class=\"heading-with-anchor\"><a href=\"#what-is-a-software-bill-of-materials-sbom-\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">What is a software bill of materials (SBOM)?</a></h2> <p>In standard manufacturing, a <a href=\"https://en.wikipedia.org/wiki/Bill_of_materials\">bill of materials</a> is a list of all the raw-materials, components, and parts needed to manufacture the end product. A <a href=\"https://www.cisa.gov/sbom\">Software Bill of Materials</a> (SBOM) is essentially the same thing, but for software. It describes the various packages and dependencies that go into creating a software artifact such as an application or a package.</p> <p>SBOMs are useful both for people building software and for people consuming or operating the software. An SBOM gives visibility into what components your software contains, including any components with known vulnerabilities, as well as any potential compliance or licensing issues or supply chain risks.</p> <p>There are a variety of SBOM formats to choose from, but two of the most popular appear to be <a href=\"https://spdx.dev/\">System Package Data Exchange</a> (SPDX) and <a href=\"https://cyclonedx.org/\">CycloneDX</a>. Both of these formats have a JSON document option, are specified as standards (<a href=\"https://spdx.dev/use/specifications/\">ISO/IEC 5692:2021</a> for SPDX, <a href=\"https://ecma-international.org/publications-and-standards/standards/ecma-424/\">ECMA-424</a> for CycloneDX), and can be generated using a wide variety of open source tools.</p> <p>I was interested in how easy it would be to generate an SBOM for one of my open source .NET NuGet packages. I tried a few of the available tools to see how easy they would be to use and to see what the generated SBOM looks like. In the following sections I show how to get started with the following tools</p> <ul><li><a href=\"#microsoft-s-sbom-tool\">Microsoft's SBOM tool</a></li> <li><a href=\"#github-action-anchore-sbom-action-using-syft\">Syft via the <code>anchore/sbom-action</code> GitHub Action</a></li> <li><a href=\"#cyclonedx-module-for-net\">CycloneDX's .NET module</a></li></ul> <p>It's also worth noting that you can download an SBOM directly from a GitHub repository by going to <strong>Insights</strong> &gt; <strong>Dependency Graph</strong>, and clicking <strong>Export SBOM</strong>:</p> <p><img src=\"/content/images/2025/sbom_00.png\" alt=\"The Export SBOM \"></p> <p>Clicking this button downloads an SPDX JSON document, that looks something like this following:</p> <pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"spdxVersion\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"SPDX-2.3\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"dataLicense\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"CC0-1.0\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"SPDXID\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"SPDXRef-DOCUMENT\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"com.github.andrewlock/NetEscapades.AspNetCore.SecurityHeaders\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"documentNamespace\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"https://spdx.org/spdxdocs/protobom/b5635148-e0ef-45c0-9239-27f06626da6d\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"creationInfo\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">\"creators\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n            <span class=\"token string\">\"Tool: protobom-v0.0.0-20250312193824-234c4fa31871+dirty\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"Tool: GitHub.com-Dependency-Graph\"</span>\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"created\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"2025-03-12T20:29:21Z\"</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    \n    <span class=\"token property\">\"packages\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Nuke.Common\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"SPDXID\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"SPDXRef-nuget-Nuke.Common-8.1.0-7b26ed\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"versionInfo\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"8.1.0\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"downloadLocation\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"NOASSERTION\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"filesAnalyzed\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"externalRefs\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n                <span class=\"token punctuation\">{</span>\n                    <span class=\"token property\">\"referenceCategory\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"PACKAGE-MANAGER\"</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token property\">\"referenceType\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"purl\"</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token property\">\"referenceLocator\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"pkg:nuget/Nuke.Common@8.1.0\"</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"StyleCop.Analyzers\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"SPDXID\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"SPDXRef-nuget-StyleCop.Analyzers-1.2.0-beta.556-d87ce5\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"versionInfo\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"1.2.0-beta.556\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"downloadLocation\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"NOASSERTION\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"filesAnalyzed\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"licenseConcluded\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"MIT\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"copyrightText\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Copyright (c) .NET Foundation and Contributors, Copyright (c) 2015 Dennis Fischer, Copyright (c) 2017 Marcos Lopez C., Copyright (c) Tunnel Vision Laboratories, LLC, Copyright 2014 Giovanni Bassi and Elemar Jr, Copyright 2015 Tunnel Vision Laboratories, LLC StyleCop DotNetAnalyzers Roslyn Diagnostic Analyzer\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"externalRefs\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n                <span class=\"token punctuation\">{</span>\n                    <span class=\"token property\">\"referenceCategory\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"PACKAGE-MANAGER\"</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token property\">\"referenceType\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"purl\"</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token property\">\"referenceLocator\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"pkg:nuget/StyleCop.Analyzers@1.2.0-beta.556\"</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"xunit\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"SPDXID\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"SPDXRef-nuget-xunit-2.4.2-41e328\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"versionInfo\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"2.4.2\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"downloadLocation\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"NOASSERTION\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"filesAnalyzed\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"licenseConcluded\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Apache-2.0\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"copyrightText\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"(c) 2008 VeriSign, Inc., Copyright (c) .NET Foundation\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"externalRefs\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n                <span class=\"token punctuation\">{</span>\n                    <span class=\"token property\">\"referenceCategory\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"PACKAGE-MANAGER\"</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token property\">\"referenceType\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"purl\"</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token property\">\"referenceLocator\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"pkg:nuget/xunit@2.4.2\"</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>This is only a tiny fraction of the output, but it shows a couple of important points:</p> <ul><li>The SPDX format includes a relatively large amount of data, including copyright text and other details.</li> <li>The GitHub Dependency Graph SBOM includes <em>all</em> the packages used in your project, including test projects, sample projects, and any GitHub actions.</li></ul> <p>That latter point may or may not be what you want to include in your SBOM. The test package dependencies aren't ever <em>used</em> or <em>shipped</em> as a dependency of the final artifact, but they <em>are</em> a dependency of your project as a whole.</p> <blockquote> <p>Personally I wouldn't expect to see them in an SBOM for a project, but then I've not needed to provide an SBOM for any regulatory purposes in practice, so I'm not sure what the expectation is here.</p> </blockquote> <p>Assuming that you want something more automated, read on to see how the other tools I tried faired.</p> <h2 id=\"microsoft-s-sbom-tool\" class=\"heading-with-anchor\"><a href=\"#microsoft-s-sbom-tool\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Microsoft's SBOM tool</a></h2> <p>Some of the first information I found when looking for a .NET SBOM tool was <a href=\"https://devblogs.microsoft.com/engineering-at-microsoft/microsoft-open-sources-software-bill-of-materials-sbom-generation-tool/\">this blog post from 2022</a>, announcing that Microsoft was open-sourcing its SBOM tool. You can find <a href=\"https://github.com/microsoft/sbom-tool\">their sbom tool on GitHub</a>. As described in the readme:</p> <blockquote> <p>The SBOM tool is a highly scalable and enterprise ready tool to create SPDX 2.2 compatible SBOMs for any variety of artifacts. The tool uses the <a href=\"https://github.com/microsoft/component-detection\">Component Detection</a> libraries to detect components and the <a href=\"https://github.com/clearlydefined/clearlydefined\">ClearlyDefined API</a> to populate license information for these components.</p> </blockquote> <p>Microsoft's tool is clearly going to be appealing to .NET developers, <em>especially</em> as <a href=\"https://github.com/microsoft/sbom-tool?tab=readme-ov-file#sbom-net-tool\">it's available as a .NET tool</a>! They also include <a href=\"https://github.com/microsoft/sbom-tool/blob/main/docs/setting-up-github-actions.md\">explicit instructions for running the tool as a GitHub action</a>, as part of your CI process.</p> <p>I tried out the tool locally on my <a href=\"https://github.com/andrewlock/NetEscapades.AspNetCore.SecurityHeaders\">NetEscapades.AspNetCore.SecurityHeaders</a> project. First I installed the tool:</p> <pre class=\"language-powershell\"><code class=\"language-powershell\">dotnet tool install <span class=\"token operator\">--</span>global Microsoft<span class=\"token punctuation\">.</span>Sbom<span class=\"token punctuation\">.</span>DotNetTool\n\nYou can invoke the tool <span class=\"token keyword\">using</span> the following command: sbom-tool\nTool <span class=\"token string\">'microsoft.sbom.dotnettool'</span> <span class=\"token punctuation\">(</span>version <span class=\"token string\">'3.1.0'</span><span class=\"token punctuation\">)</span> was successfully installed<span class=\"token punctuation\">.</span>\n</code></pre> <p>If you run <code>sbom-tool</code> without any options, you'll see that there's a <em>huge</em> number of arguments:</p> <pre class=\"language-txt\"><code class=\"language-txt\">The Sbom tool generates a SBOM for any build artifact.\n\nUsage - Microsoft.Sbom.DotNetTool &lt;action&gt; -options\n\nGlobalOption    Description\nHelp (-?, -h)   Prints this help message\n\nActions\n\n  Validate -options - Validate a build artifact using the manifest. Optionally also verify the signing certificate of the manifest.\n\n    Option                   Description\n    BuildDropPath (-b)       Specifies the root folder of the drop directory containing the final build artifacts\n                             (binaries and executables) for which the SBOM file will be validated. This is the\n                             directory where the completed build output is stored.\n    ManifestDirPath (-m)     The path of the directory where the manifest will be validated. If this parameter is not\n                             specified, the manifest will be validated in {BuildDropPath}/_manifest directory.\n    OutputPath (-o)          The path where the output json should be written. ex: Path/output.json\n    CatalogFilePath (-C)     This parameter is deprecated and will not be used, we will automatically detect the catalog\n                             file using our standard directory structure. The path of signed catalog file that is used\n                             to verify the signature of the manifest json file.\n    ValidateSignature (-s)   If set, will validate the manifest using the signed catalog file.\n    IgnoreMissing (-im)      If set, will not fail validation on the files presented in Manifest but missing on the disk.\n\n    ... \n</code></pre> <p>Again, I've only shown a tiny sample here, rest assured there's a <em>lot</em> of options😅 Nevertheless I iterated until I managed to convince the tool to give me some output. After building my packages, I ran the tool using the following arguments (explained in more detail below):</p> <pre class=\"language-powershell\"><code class=\"language-powershell\">sbom-tool generate \\\n  <span class=\"token operator\">-</span>b <span class=\"token punctuation\">.</span><span class=\"token operator\">/</span>artifacts/packages \\\n  <span class=\"token operator\">-</span>bc <span class=\"token punctuation\">.</span><span class=\"token operator\">/</span>src/ \\\n  <span class=\"token operator\">-</span>pn NetEscapades<span class=\"token punctuation\">.</span>AspNetCore<span class=\"token punctuation\">.</span>SecurityHeaders \\\n  <span class=\"token operator\">-</span>pv 1<span class=\"token punctuation\">.</span>0<span class=\"token punctuation\">.</span>0-preview<span class=\"token punctuation\">.</span>03 \\\n  <span class=\"token operator\">-</span><span class=\"token function\">ps</span> <span class=\"token string\">\"Andrew Lock\"</span> \\\n  <span class=\"token operator\">-</span>pm\n</code></pre> <ul><li><code>-b</code> is <code>BuildDropPath</code>, the folder containing the final artifacts</li> <li><code>-bc</code> is <code>BuildComponentPath</code>, the path to the source code used to build the artifacts</li> <li><code>-pn</code> is <code>PackageName</code>, the name of the package</li> <li><code>-pv</code> is <code>PackageVersion</code>, the version of the package</li> <li><code>-ps</code> is <code>PackageSupplier</code>, the \"supplier\" of the package</li> <li><code>-pm</code> is <code>EnablePackageMetadataParsing</code>, to enable parsing license info from the package's metadata file</li></ul> <p>After the tool executes you can find a <em>manifest.spdx.json</em> file nested inside the \"BuildDropPath\" in a _<em>manifests</em> folder. The SBOM looks something like the following:</p> <pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"files\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"fileName\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"./NetEscapades.AspNetCore.SecurityHeaders.1.0.0-preview.4.nupkg\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"SPDXID\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"SPDXRef-File--NetEscapades.AspNetCore.SecurityHeaders.1.0.0-preview.4.nupkg-183E8FC1DE641A7C6B5F12E173F991B2BF4C0FBD\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"checksums\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token punctuation\">{</span>\n          <span class=\"token property\">\"algorithm\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"SHA256\"</span><span class=\"token punctuation\">,</span>\n          <span class=\"token property\">\"checksumValue\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"62f76bc55d87ec52197158ab4aeb51516d8512b8932adfb0d85079097688613c\"</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">{</span>\n          <span class=\"token property\">\"algorithm\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"SHA1\"</span><span class=\"token punctuation\">,</span>\n          <span class=\"token property\">\"checksumValue\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"183e8fc1de641a7c6b5f12e173f991b2bf4c0fbd\"</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"licenseConcluded\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"NOASSERTION\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"licenseInfoInFiles\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token string\">\"NOASSERTION\"</span>\n      <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"copyrightText\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"NOASSERTION\"</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"packages\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"NetEscapades.AspNetCore.SecurityHeaders\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"SPDXID\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"SPDXRef-RootPackage\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"downloadLocation\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"NOASSERTION\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"packageVerificationCode\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">\"packageVerificationCodeValue\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"5f36e353c6795a2cc8cf62be25e3c881a761bbfa\"</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"filesAnalyzed\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"licenseConcluded\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"NOASSERTION\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"licenseInfoFromFiles\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token string\">\"NOASSERTION\"</span>\n      <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"licenseDeclared\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"NOASSERTION\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"copyrightText\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"NOASSERTION\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"versionInfo\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"1.0.0-preview.03\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"externalRefs\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token punctuation\">{</span>\n          <span class=\"token property\">\"referenceCategory\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"PACKAGE-MANAGER\"</span><span class=\"token punctuation\">,</span>\n          <span class=\"token property\">\"referenceType\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"purl\"</span><span class=\"token punctuation\">,</span>\n          <span class=\"token property\">\"referenceLocator\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"pkg:swid/Andrew%20Lock/spdx.org/NetEscapades.AspNetCore.SecurityHeaders@1.0.0-preview.03?tag_id=fb838669-25eb-40a1-9a69-e64384a3cb92\"</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"supplier\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Organization: Andrew Lock\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"hasFiles\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token string\">\"SPDXRef-File--NetEscapades.AspNetCore.SecurityHeaders.1.0.0-preview.4.nupkg-183E8FC1DE641A7C6B5F12E173F991B2BF4C0FBD\"</span>\n      <span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"externalDocumentRefs\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"relationships\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"relationshipType\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"DESCRIBES\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"relatedSpdxElement\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"SPDXRef-RootPackage\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"spdxElementId\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"SPDXRef-DOCUMENT\"</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"spdxVersion\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"SPDX-2.2\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"dataLicense\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"CC0-1.0\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"SPDXID\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"SPDXRef-DOCUMENT\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"NetEscapades.AspNetCore.SecurityHeaders 1.0.0-preview.03\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"documentNamespace\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"https://spdx.org/spdxdocs/sbom-tool-3.1.0-167ddfaf-46b9-41f4-a692-0a452316281d/NetEscapades.AspNetCore.SecurityHeaders/1.0.0-preview.03/ovnbeOkRwkaknluUVlc_Iw\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"creationInfo\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"created\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"2025-03-12T20:59:05Z\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"creators\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token string\">\"Organization: Andrew Lock\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"Tool: Microsoft.SBOMTool-3.1.0\"</span>\n    <span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"documentDescribes\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token string\">\"SPDXRef-RootPackage\"</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>It's worth noting that the <em>NetEscapades.AspNetCore.SecurityHeaders</em> package I'm testing here doesn't <em>actually</em> have any dependencies, so it probably wasn't the best choice for demonstration 😅 But also, with that in mind, you can see that the SPDX format is pretty verbose.</p> <p>Overall the tool wasn't too hard to use, but I can't really comment as to it's effectiveness. The one thing I would note is that it <em>didn't</em> seem to detect the development dependencies (e.g. StyleCop) used by the project. Whether or not these should be included in the SBOM doesn't seem to be entirely clear, but as far as I can tell, the <code>sbom-tool</code> <a href=\"https://github.com/microsoft/sbom-tool/issues/592\">is <em>meant</em> to include them</a>, so it's a bit surprising to not find them.</p> <p>Overall I found the <code>sbom-tool</code> relatively easy to use, but it feels like it's more designed for <em>applications</em> than for components, such as the \"drop directory\" nomenclature and behaviour. For example, my project produces multiple NuGet packages, but I couldn't see how to easily generate <em>separate</em> SBOMs for them when the <em>.nupkg</em> files are all output to the same directory. The <code>sbom-tool</code> seems to require moving each of the built packages into a separate folder if you want a separate SBOM for each package.</p> <h2 id=\"github-action-anchore-sbom-action-using-syft\" class=\"heading-with-anchor\"><a href=\"#github-action-anchore-sbom-action-using-syft\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">GitHub action <code>anchore/sbom-action</code> using Syft</a></h2> <p>The next tool I tested was a GitHub action called <a href=\"https://github.com/anchore/sbom-action\"><code>anchore/sbom-action</code></a> that uses <a href=\"https://github.com/anchore/syft\">Syft</a> to create an SBOM.</p> <p>The basic use instructions for the action are very simple - simply point the tool at a path, and specify where you want the resulting spdx file to be generated:</p> <pre class=\"language-yml\"><code class=\"language-yml\"><span class=\"token punctuation\">-</span> <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> anchore/sbom<span class=\"token punctuation\">-</span>action@f325610c9f50a54015d37c8d16cb3b0e2c8f4de0 <span class=\"token comment\"># v0.18.0</span>\n<span class=\"token key atrule\">with</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">path</span><span class=\"token punctuation\">:</span> ./artifacts/bin/NetEscapades.AspNetCore.SecurityHeaders\n    <span class=\"token key atrule\">output-file</span><span class=\"token punctuation\">:</span> ./artifacts/sboms/netescapades<span class=\"token punctuation\">-</span>aspnetcore<span class=\"token punctuation\">-</span>securityheaders.spdx.json\n    <span class=\"token key atrule\">upload-artifact</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span>\n</code></pre> <p>The eagle-eyed among you may notice that the <code>path</code> here is pointing to the <em>bin</em> folder instead of the <em>packages</em> folder. That's because <a href=\"https://github.com/anchore/syft/blob/main/syft/pkg/cataloger/dotnet/parse_dotnet_deps.go\">Syft appears to rely on parsing the <em>deps.json</em> file</a> to identify dependencies. It's possible Syft can work with the <em>.nupkg</em> files directly, but I didn't explore that.</p> <blockquote> <p>Note that we're pinning to a specific commit hash in the action. This is important to avoid supply-chain attacks, such as <a href=\"https://www.bleepingcomputer.com/news/security/supply-chain-attack-on-popular-github-action-exposes-ci-cd-secrets/\">the recent attack</a> on the <code>tj-actions/changed-files</code> action.</p> </blockquote> <p>The resulting SPDX file is even <em>more</em> verbose than the <code>sbom-tool</code> version. I've included the whole file below for completeness, but it really is a bit much</p> <pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"spdxVersion\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"SPDX-2.3\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"dataLicense\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"CC0-1.0\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"SPDXID\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"SPDXRef-DOCUMENT\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"./artifacts/bin/NetEscapades.AspNetCore.SecurityHeaders\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"documentNamespace\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"https://anchore.com/syft/dir/artifacts/bin/NetEscapades.AspNetCore.SecurityHeaders-961b3ac4-c862-4b30-bc40-8d46eb6873eb\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"creationInfo\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">\"licenseListVersion\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"3.25\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"creators\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n            <span class=\"token string\">\"Organization: Anchore, Inc\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"Tool: syft-1.19.0\"</span>\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"created\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"2025-02-22T18:48:52Z\"</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"packages\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"NetEscapades.AspNetCore.SecurityHeaders\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"SPDXID\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"SPDXRef-Package-dotnet-NetEscapades.AspNetCore.SecurityHeaders-90ec83c3e4e1e537\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"versionInfo\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"1.0.0-preview.3\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"supplier\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"NOASSERTION\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"downloadLocation\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"NOASSERTION\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"filesAnalyzed\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"sourceInfo\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"acquired package info from dotnet project assets file: \\\\release_netcoreapp3.1\\\\NetEscapades.AspNetCore.SecurityHeaders.deps.json\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"licenseConcluded\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"NOASSERTION\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"licenseDeclared\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"NOASSERTION\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"copyrightText\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"NOASSERTION\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"externalRefs\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n                <span class=\"token punctuation\">{</span>\n                    <span class=\"token property\">\"referenceCategory\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"SECURITY\"</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token property\">\"referenceType\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"cpe23Type\"</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token property\">\"referenceLocator\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"cpe:2.3:a:NetEscapades.AspNetCore.SecurityHeaders:NetEscapades.AspNetCore.SecurityHeaders:1.0.0-preview.3:*:*:*:*:*:*:*\"</span>\n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n                <span class=\"token punctuation\">{</span>\n                    <span class=\"token property\">\"referenceCategory\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"PACKAGE-MANAGER\"</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token property\">\"referenceType\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"purl\"</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token property\">\"referenceLocator\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"pkg:nuget/NetEscapades.AspNetCore.SecurityHeaders@1.0.0-preview.3\"</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"NetEscapades.AspNetCore.SecurityHeaders\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"SPDXID\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"SPDXRef-Package-dotnet-NetEscapades.AspNetCore.SecurityHeaders-7a9d7a39e1fc2567\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"versionInfo\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"1.0.0-preview.3+b661fe12f950034461acfce714f03673a8a43b24\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"supplier\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Organization: Andrew Lock\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"originator\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Organization: Andrew Lock\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"downloadLocation\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"NOASSERTION\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"filesAnalyzed\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"sourceInfo\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"acquired package info from dotnet project assets file: \\\\release_netcoreapp3.1\\\\NetEscapades.AspNetCore.SecurityHeaders.dll\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"licenseConcluded\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"NOASSERTION\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"licenseDeclared\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"NOASSERTION\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"copyrightText\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"NOASSERTION\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"externalRefs\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n                <span class=\"token punctuation\">{</span>\n                    <span class=\"token property\">\"referenceCategory\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"SECURITY\"</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token property\">\"referenceType\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"cpe23Type\"</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token property\">\"referenceLocator\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"cpe:2.3:a:NetEscapades.AspNetCore.SecurityHeaders:NetEscapades.AspNetCore.SecurityHeaders:1.0.0-preview.3\\\\+b661fe12f950034461acfce714f03673a8a43b24:*:*:*:*:*:*:*\"</span>\n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n                <span class=\"token punctuation\">{</span>\n                    <span class=\"token property\">\"referenceCategory\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"PACKAGE-MANAGER\"</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token property\">\"referenceType\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"purl\"</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token property\">\"referenceLocator\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"pkg:nuget/NetEscapades.AspNetCore.SecurityHeaders@1.0.0-preview.3%2Bb661fe12f950034461acfce714f03673a8a43b24\"</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"StyleCop.Analyzers\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"SPDXID\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"SPDXRef-Package-dotnet-StyleCop.Analyzers-7af1945e1aa913b8\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"versionInfo\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"1.2.0-beta.556\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"supplier\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"NOASSERTION\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"downloadLocation\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"NOASSERTION\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"filesAnalyzed\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"sourceInfo\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"acquired package info from dotnet project assets file: \\\\release_netcoreapp3.1\\\\NetEscapades.AspNetCore.SecurityHeaders.deps.json\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"licenseConcluded\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"NOASSERTION\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"licenseDeclared\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"NOASSERTION\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"copyrightText\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"NOASSERTION\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"externalRefs\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n                <span class=\"token punctuation\">{</span>\n                    <span class=\"token property\">\"referenceCategory\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"SECURITY\"</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token property\">\"referenceType\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"cpe23Type\"</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token property\">\"referenceLocator\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"cpe:2.3:a:StyleCop.Analyzers:StyleCop.Analyzers:1.2.0-beta.556:*:*:*:*:*:*:*\"</span>\n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n                <span class=\"token punctuation\">{</span>\n                    <span class=\"token property\">\"referenceCategory\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"PACKAGE-MANAGER\"</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token property\">\"referenceType\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"purl\"</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token property\">\"referenceLocator\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"pkg:nuget/StyleCop.Analyzers@1.2.0-beta.556\"</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"StyleCop.Analyzers.Unstable\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"SPDXID\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"SPDXRef-Package-dotnet-StyleCop.Analyzers.Unstable-93261229c8bc8710\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"versionInfo\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"1.2.0.556\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"supplier\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"NOASSERTION\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"downloadLocation\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"NOASSERTION\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"filesAnalyzed\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"sourceInfo\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"acquired package info from dotnet project assets file: \\\\release_netcoreapp3.1\\\\NetEscapades.AspNetCore.SecurityHeaders.deps.json\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"licenseConcluded\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"NOASSERTION\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"licenseDeclared\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"NOASSERTION\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"copyrightText\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"NOASSERTION\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"externalRefs\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n                <span class=\"token punctuation\">{</span>\n                    <span class=\"token property\">\"referenceCategory\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"SECURITY\"</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token property\">\"referenceType\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"cpe23Type\"</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token property\">\"referenceLocator\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"cpe:2.3:a:StyleCop.Analyzers.Unstable:StyleCop.Analyzers.Unstable:1.2.0.556:*:*:*:*:*:*:*\"</span>\n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n                <span class=\"token punctuation\">{</span>\n                    <span class=\"token property\">\"referenceCategory\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"PACKAGE-MANAGER\"</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token property\">\"referenceType\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"purl\"</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token property\">\"referenceLocator\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"pkg:nuget/StyleCop.Analyzers.Unstable@1.2.0.556\"</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"./artifacts/bin/NetEscapades.AspNetCore.SecurityHeaders\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"SPDXID\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"SPDXRef-DocumentRoot-Directory-.-artifacts-bin-NetEscapades.AspNetCore.SecurityHeaders\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"supplier\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"NOASSERTION\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"downloadLocation\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"NOASSERTION\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"filesAnalyzed\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"licenseConcluded\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"NOASSERTION\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"licenseDeclared\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"NOASSERTION\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"copyrightText\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"NOASSERTION\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"primaryPackagePurpose\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"FILE\"</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"files\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token property\">\"fileName\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"\\\\release_netcoreapp3.1\\\\NetEscapades.AspNetCore.SecurityHeaders.deps.json\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"SPDXID\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"SPDXRef-File--release-netcoreapp3.1-NetEscapades.AspNetCore.SecurityHeaders.deps.json-80967c7804fdaff3\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"checksums\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n                <span class=\"token punctuation\">{</span>\n                    <span class=\"token property\">\"algorithm\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"SHA1\"</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token property\">\"checksumValue\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"0000000000000000000000000000000000000000\"</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"licenseConcluded\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"NOASSERTION\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"licenseInfoInFiles\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n                <span class=\"token string\">\"NOASSERTION\"</span>\n            <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"copyrightText\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"NOASSERTION\"</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token property\">\"fileName\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"\\\\release_netcoreapp3.1\\\\NetEscapades.AspNetCore.SecurityHeaders.dll\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"SPDXID\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"SPDXRef-File--release-netcoreapp3.1-NetEscapades.AspNetCore.SecurityHeaders.dll-7b8c831fe1558d56\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"checksums\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n                <span class=\"token punctuation\">{</span>\n                    <span class=\"token property\">\"algorithm\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"SHA1\"</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token property\">\"checksumValue\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"0000000000000000000000000000000000000000\"</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"licenseConcluded\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"NOASSERTION\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"licenseInfoInFiles\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n                <span class=\"token string\">\"NOASSERTION\"</span>\n            <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"copyrightText\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"NOASSERTION\"</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"relationships\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token property\">\"spdxElementId\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"SPDXRef-Package-dotnet-StyleCop.Analyzers-7af1945e1aa913b8\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"relatedSpdxElement\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"SPDXRef-Package-dotnet-NetEscapades.AspNetCore.SecurityHeaders-90ec83c3e4e1e537\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"relationshipType\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"DEPENDENCY_OF\"</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token property\">\"spdxElementId\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"SPDXRef-Package-dotnet-StyleCop.Analyzers.Unstable-93261229c8bc8710\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"relatedSpdxElement\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"SPDXRef-Package-dotnet-StyleCop.Analyzers-7af1945e1aa913b8\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"relationshipType\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"DEPENDENCY_OF\"</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token property\">\"spdxElementId\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"SPDXRef-Package-dotnet-NetEscapades.AspNetCore.SecurityHeaders-7a9d7a39e1fc2567\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"relatedSpdxElement\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"SPDXRef-File--release-netcoreapp3.1-NetEscapades.AspNetCore.SecurityHeaders.dll-7b8c831fe1558d56\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"relationshipType\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"OTHER\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"comment\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"evident-by: indicates the package's existence is evident by the given file\"</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token property\">\"spdxElementId\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"SPDXRef-Package-dotnet-StyleCop.Analyzers-7af1945e1aa913b8\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"relatedSpdxElement\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"SPDXRef-File--release-netcoreapp3.1-NetEscapades.AspNetCore.SecurityHeaders.deps.json-80967c7804fdaff3\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"relationshipType\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"OTHER\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"comment\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"evident-by: indicates the package's existence is evident by the given file\"</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token property\">\"spdxElementId\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"SPDXRef-Package-dotnet-NetEscapades.AspNetCore.SecurityHeaders-90ec83c3e4e1e537\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"relatedSpdxElement\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"SPDXRef-File--release-netcoreapp3.1-NetEscapades.AspNetCore.SecurityHeaders.deps.json-80967c7804fdaff3\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"relationshipType\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"OTHER\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"comment\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"evident-by: indicates the package's existence is evident by the given file\"</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token property\">\"spdxElementId\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"SPDXRef-Package-dotnet-StyleCop.Analyzers.Unstable-93261229c8bc8710\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"relatedSpdxElement\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"SPDXRef-File--release-netcoreapp3.1-NetEscapades.AspNetCore.SecurityHeaders.deps.json-80967c7804fdaff3\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"relationshipType\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"OTHER\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"comment\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"evident-by: indicates the package's existence is evident by the given file\"</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token property\">\"spdxElementId\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"SPDXRef-DocumentRoot-Directory-.-artifacts-bin-NetEscapades.AspNetCore.SecurityHeaders\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"relatedSpdxElement\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"SPDXRef-Package-dotnet-NetEscapades.AspNetCore.SecurityHeaders-90ec83c3e4e1e537\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"relationshipType\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"CONTAINS\"</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token property\">\"spdxElementId\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"SPDXRef-DocumentRoot-Directory-.-artifacts-bin-NetEscapades.AspNetCore.SecurityHeaders\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"relatedSpdxElement\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"SPDXRef-Package-dotnet-NetEscapades.AspNetCore.SecurityHeaders-7a9d7a39e1fc2567\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"relationshipType\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"CONTAINS\"</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token property\">\"spdxElementId\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"SPDXRef-DocumentRoot-Directory-.-artifacts-bin-NetEscapades.AspNetCore.SecurityHeaders\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"relatedSpdxElement\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"SPDXRef-Package-dotnet-StyleCop.Analyzers-7af1945e1aa913b8\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"relationshipType\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"CONTAINS\"</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token property\">\"spdxElementId\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"SPDXRef-DocumentRoot-Directory-.-artifacts-bin-NetEscapades.AspNetCore.SecurityHeaders\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"relatedSpdxElement\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"SPDXRef-Package-dotnet-StyleCop.Analyzers.Unstable-93261229c8bc8710\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"relationshipType\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"CONTAINS\"</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token property\">\"spdxElementId\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"SPDXRef-DOCUMENT\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"relatedSpdxElement\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"SPDXRef-DocumentRoot-Directory-.-artifacts-bin-NetEscapades.AspNetCore.SecurityHeaders\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"relationshipType\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"DESCRIBES\"</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>So top marks for this tool for simplicity, but I don't know, the verbosity bugged me 😅</p> <h2 id=\"cyclonedx-module-for-net\" class=\"heading-with-anchor\"><a href=\"#cyclonedx-module-for-net\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">CycloneDX module for .NET</a></h2> <p>That brings us to the final tool I tried, the <a href=\"https://github.com/CycloneDX/cyclonedx-dotnet\">CycloneDX module for .NET</a>. This is the only tool I tried that uses the CycloneDX format instead of the older SPDX format, and I have to say, I thought it was pretty nice and easy.</p> <p>Just like Microsoft's <code>sbom-tool</code>, the CycloneDX module is available as a .NET global tool, which makes it easy for .NET devs to use. Install the tool using:</p> <pre class=\"language-powershell\"><code class=\"language-powershell\">dotnet tool install <span class=\"token operator\">--</span>global CycloneDX\n</code></pre> <p>You can then execute the tool by providing a path to a <em>.csproj</em> file, along with any additional arguments. As before, there are a lot of possible options here, but I've listed the values I used along with their explanations</p> <pre class=\"language-powershell\"><code class=\"language-powershell\">dotnet-CycloneDX <span class=\"token punctuation\">.</span>\\src\\NetEscapades<span class=\"token punctuation\">.</span>AspNetCore<span class=\"token punctuation\">.</span>SecurityHeaders\\NetEscapades<span class=\"token punctuation\">.</span>AspNetCore<span class=\"token punctuation\">.</span>SecurityHeaders<span class=\"token punctuation\">.</span>csproj \\ <span class=\"token comment\"># Path to the project to analyzer</span>\n  <span class=\"token operator\">--</span>json \\ <span class=\"token comment\"># Produce a JSON doc instead of XML</span>\n  <span class=\"token operator\">--</span>recursive \\ <span class=\"token comment\"># Recursively scan the projects referenced by the project</span>\n  <span class=\"token operator\">--</span><span class=\"token function\">set-name</span> NetEscapades<span class=\"token punctuation\">.</span>AspNetCore<span class=\"token punctuation\">.</span>SecurityHeaders \\ <span class=\"token comment\"># Override the SBOM component name explicitly</span>\n  <span class=\"token operator\">--</span><span class=\"token function\">set-version</span> 1<span class=\"token punctuation\">.</span>0<span class=\"token punctuation\">.</span>0-preview<span class=\"token punctuation\">.</span>03 \\ <span class=\"token comment\"># Override the default SBOM component version</span>\n  <span class=\"token operator\">--</span>base-intermediate-output-path <span class=\"token punctuation\">.</span>\\artifacts\\ \\ <span class=\"token comment\"># Required if you're using .NET 8's artifiacts output layout</span>\n  <span class=\"token operator\">--</span>output <span class=\"token punctuation\">.</span>\\artifacts\\sboms \\ <span class=\"token comment\"># Where should the SBOM file be written</span>\n  <span class=\"token operator\">--</span>filename netescapades-aspnetcore-securityheaders<span class=\"token punctuation\">.</span>bom<span class=\"token punctuation\">.</span>json \\ <span class=\"token comment\"># The name of the SBOM file</span>\n  <span class=\"token operator\">--</span><span class=\"token function\">set-type</span> library <span class=\"token comment\"># What type of project is this e.g. Application/Container/Framework</span>\n</code></pre> <p>Running the command above produces a document like the one shown below. Again, I've included the whole document for completeness:</p> <pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"bomFormat\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"CycloneDX\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"specVersion\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"1.6\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"serialNumber\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"urn:uuid:c2560456-af20-49f6-b2a9-2e4ea7306e9e\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"version\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"metadata\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"timestamp\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"2025-02-22T20:09:50Z\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"tools\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">\"vendor\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"CycloneDX\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"CycloneDX module for .NET\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"version\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"5.0.1.0\"</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"component\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"library\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"bom-ref\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"NetEscapades.AspNetCore.SecurityHeaders@1.0.0-preview.3\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"NetEscapades.AspNetCore.SecurityHeaders\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"version\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"1.0.0-preview.3\"</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"components\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"library\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"bom-ref\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"pkg:nuget/StyleCop.Analyzers@1.2.0-beta.556\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"authors\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token punctuation\">{</span>\n          <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Sam Harwell et. al.\"</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"StyleCop.Analyzers\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"version\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"1.2.0-beta.556\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"description\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"An implementation of StyleCop\\u0027s rules using Roslyn analyzers and code fixes\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"scope\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"required\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"hashes\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token punctuation\">{</span>\n          <span class=\"token property\">\"alg\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"SHA-512\"</span><span class=\"token punctuation\">,</span>\n          <span class=\"token property\">\"content\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"08163F6061EBC26EA9B8069A82E9F575D656A50F1D9299EDA874F4107731EB2E02B512F201F1C34C6983D92BAECD6EE5E992AA6B61C78AE9490A7FDDBDD51882\"</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"licenses\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token punctuation\">{</span>\n          <span class=\"token property\">\"license\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"MIT\"</span>\n          <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"copyright\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Copyright 2015 Tunnel Vision Laboratories, LLC\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"purl\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"pkg:nuget/StyleCop.Analyzers@1.2.0-beta.556\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"externalReferences\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token punctuation\">{</span>\n          <span class=\"token property\">\"url\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"https://github.com/DotNetAnalyzers/StyleCopAnalyzers\"</span><span class=\"token punctuation\">,</span>\n          <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"website\"</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"library\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"bom-ref\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"pkg:nuget/StyleCop.Analyzers.Unstable@1.2.0.556\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"authors\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token punctuation\">{</span>\n          <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Sam Harwell et. al.\"</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"StyleCop.Analyzers.Unstable\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"version\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"1.2.0.556\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"description\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"An implementation of StyleCop\\u0027s rules using Roslyn analyzers and code fixes\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"scope\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"required\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"hashes\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token punctuation\">{</span>\n          <span class=\"token property\">\"alg\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"SHA-512\"</span><span class=\"token punctuation\">,</span>\n          <span class=\"token property\">\"content\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"0E9FBAE713D2D30690BB331E7308A619894EE26C13798855EC0A2529B32468D67FBCF2BC1F02AA0F3AE7E6851D2B595684EF415245AA8119B9B1B7D58C30916B\"</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"licenses\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token punctuation\">{</span>\n          <span class=\"token property\">\"license\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"MIT\"</span>\n          <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"copyright\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Copyright 2015 Tunnel Vision Laboratories, LLC\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"purl\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"pkg:nuget/StyleCop.Analyzers.Unstable@1.2.0.556\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"externalReferences\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token punctuation\">{</span>\n          <span class=\"token property\">\"url\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"https://github.com/DotNetAnalyzers/StyleCopAnalyzers\"</span><span class=\"token punctuation\">,</span>\n          <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"website\"</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"dependencies\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"ref\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"NetEscapades.AspNetCore.SecurityHeaders@1.0.0-preview.3\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"dependsOn\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token string\">\"pkg:nuget/StyleCop.Analyzers@1.2.0-beta.556\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"pkg:nuget/StyleCop.Analyzers.Unstable@1.2.0.556\"</span>\n      <span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"ref\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"pkg:nuget/StyleCop.Analyzers.Unstable@1.2.0.556\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"dependsOn\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"ref\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"pkg:nuget/StyleCop.Analyzers@1.2.0-beta.556\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"dependsOn\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token string\">\"pkg:nuget/StyleCop.Analyzers.Unstable@1.2.0.556\"</span>\n      <span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>Just comparing the CycloneDX output document to the previous SPDX document, the CycloneDX one seems much easier to understand, with fewer extraneous details. In practice, I doubt that will matter much, as these documents are meant to be parsed and processed by a machine rather than by humans. But I don't know, I guess I'm partial to a well formatted JSON document, as <a href=\"https://github.com/andrewlock/NetEscapades.AspNetCore.SecurityHeaders/pull/222\">this is the approach I settled on in the end</a> 😀.</p> <h2 id=\"summary\" class=\"heading-with-anchor\"><a href=\"#summary\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Summary</a></h2> <p>In this post I gave a brief introduction to SBOMs, including what they are, why they're useful, and a couple of standard formats used to define an SBOM. I then showed multiple ways to generate an SBOM for a .NET NuGet package. I showed GitHub's built-in \"Export SBOM\" button, <a href=\"https://github.com/microsoft/sbom-tool\">Microsoft's open source <code>sbom-tool</code></a>, <a href=\"https://github.com/anchore/sbom-action\">the <code>anchore/sbom-action</code> GitHub Action</a> that uses <a href=\"https://github.com/anchore/syft\">Syft</a>, and finally the <a href=\"https://github.com/CycloneDX/cyclonedx-dotnet\">CycloneDX module for .NET</a>. For each approach I showed how to use the tool to generate an SBOM for a NuGet package project, and what the output file looks like.</p> ",
    "sanitized": "In this post I discuss several tools you can use to create a software bill of materials (SBOM) for an application or a NuGet package. I demonstrate GitHub's built-in \"Export SBOM\" button, Microsoft's open source sbom-tool, the anchore/sbom-action GitHub Action, and finally the CycloneDX module for .NET. What is a software bill of materials (SBOM)? In standard manufacturing, a bill of materials is a list of all the raw-materials, components, and parts needed to manufacture the end product. A Software Bill of Materials (SBOM) is essentially the same thing, but for software. It describes the various packages and dependencies that go into creating a software artifact such as an application or a package. SBOMs are useful both for people building software and for people consuming or operating the software. An SBOM gives visibility into what components your software contains, including any components with known vulnerabilities, as well as any potential compliance or licensing issues or supply chain risks. There are a variety of SBOM formats to choose from, but two of the most popular appear to be System Package Data Exchange (SPDX) and CycloneDX. Both of these formats have a JSON document option, are specified as standards (ISO/IEC 5692:2021 for SPDX, ECMA-424 for CycloneDX), and can be generated using a wide variety of open source tools. I was interested in how easy it would be to generate an SBOM for one of my open source .NET NuGet packages. I tried a few of the available tools to see how easy they would be to use and to see what the generated SBOM looks like. In the following sections I show how to get started with the following tools Microsoft's SBOM tool Syft via the anchore/sbom-action GitHub Action CycloneDX's .NET module It's also worth noting that you can download an SBOM directly from a GitHub repository by going to Insights > Dependency Graph, and clicking Export SBOM:  Clicking this button downloads an SPDX JSON document, that looks something like this following: {\n    \"spdxVersion\": \"SPDX-2.3\",\n    \"dataLicense\": \"CC0-1.0\",\n    \"SPDXID\": \"SPDXRef-DOCUMENT\",\n    \"name\": \"com.github.andrewlock/NetEscapades.AspNetCore.SecurityHeaders\",\n    \"documentNamespace\": \"https://spdx.org/spdxdocs/protobom/b5635148-e0ef-45c0-9239-27f06626da6d\",\n    \"creationInfo\": {\n        \"creators\": [\n            \"Tool: protobom-v0.0.0-20250312193824-234c4fa31871+dirty\",\n            \"Tool: GitHub.com-Dependency-Graph\"\n        ],\n        \"created\": \"2025-03-12T20:29:21Z\"\n    },\n    \n    \"packages\": [\n        {\n            \"name\": \"Nuke.Common\",\n            \"SPDXID\": \"SPDXRef-nuget-Nuke.Common-8.1.0-7b26ed\",\n            \"versionInfo\": \"8.1.0\",\n            \"downloadLocation\": \"NOASSERTION\",\n            \"filesAnalyzed\": false,\n            \"externalRefs\": [\n                {\n                    \"referenceCategory\": \"PACKAGE-MANAGER\",\n                    \"referenceType\": \"purl\",\n                    \"referenceLocator\": \"pkg:nuget/Nuke.Common@8.1.0\"\n                }\n            ]\n        },\n        {\n            \"name\": \"StyleCop.Analyzers\",\n            \"SPDXID\": \"SPDXRef-nuget-StyleCop.Analyzers-1.2.0-beta.556-d87ce5\",\n            \"versionInfo\": \"1.2.0-beta.556\",\n            \"downloadLocation\": \"NOASSERTION\",\n            \"filesAnalyzed\": false,\n            \"licenseConcluded\": \"MIT\",\n            \"copyrightText\": \"Copyright (c) .NET Foundation and Contributors, Copyright (c) 2015 Dennis Fischer, Copyright (c) 2017 Marcos Lopez C., Copyright (c) Tunnel Vision Laboratories, LLC, Copyright 2014 Giovanni Bassi and Elemar Jr, Copyright 2015 Tunnel Vision Laboratories, LLC StyleCop DotNetAnalyzers Roslyn Diagnostic Analyzer\",\n            \"externalRefs\": [\n                {\n                    \"referenceCategory\": \"PACKAGE-MANAGER\",\n                    \"referenceType\": \"purl\",\n                    \"referenceLocator\": \"pkg:nuget/StyleCop.Analyzers@1.2.0-beta.556\"\n                }\n            ]\n        },\n        {\n            \"name\": \"xunit\",\n            \"SPDXID\": \"SPDXRef-nuget-xunit-2.4.2-41e328\",\n            \"versionInfo\": \"2.4.2\",\n            \"downloadLocation\": \"NOASSERTION\",\n            \"filesAnalyzed\": false,\n            \"licenseConcluded\": \"Apache-2.0\",\n            \"copyrightText\": \"(c) 2008 VeriSign, Inc., Copyright (c) .NET Foundation\",\n            \"externalRefs\": [\n                {\n                    \"referenceCategory\": \"PACKAGE-MANAGER\",\n                    \"referenceType\": \"purl\",\n                    \"referenceLocator\": \"pkg:nuget/xunit@2.4.2\"\n                }\n            ]\n        }\n    ]\n}\n This is only a tiny fraction of the output, but it shows a couple of important points: The SPDX format includes a relatively large amount of data, including copyright text and other details. The GitHub Dependency Graph SBOM includes all the packages used in your project, including test projects, sample projects, and any GitHub actions. That latter point may or may not be what you want to include in your SBOM. The test package dependencies aren't ever used or shipped as a dependency of the final artifact, but they are a dependency of your project as a whole.  Personally I wouldn't expect to see them in an SBOM for a project, but then I've not needed to provide an SBOM for any regulatory purposes in practice, so I'm not sure what the expectation is here.  Assuming that you want something more automated, read on to see how the other tools I tried faired. Microsoft's SBOM tool Some of the first information I found when looking for a .NET SBOM tool was this blog post from 2022, announcing that Microsoft was open-sourcing its SBOM tool. You can find their sbom tool on GitHub. As described in the readme:  The SBOM tool is a highly scalable and enterprise ready tool to create SPDX 2.2 compatible SBOMs for any variety of artifacts. The tool uses the Component Detection libraries to detect components and the ClearlyDefined API to populate license information for these components.  Microsoft's tool is clearly going to be appealing to .NET developers, especially as it's available as a .NET tool! They also include explicit instructions for running the tool as a GitHub action, as part of your CI process. I tried out the tool locally on my NetEscapades.AspNetCore.SecurityHeaders project. First I installed the tool: dotnet tool install --global Microsoft.Sbom.DotNetTool\n\nYou can invoke the tool using the following command: sbom-tool\nTool 'microsoft.sbom.dotnettool' (version '3.1.0') was successfully installed.\n If you run sbom-tool without any options, you'll see that there's a huge number of arguments: The Sbom tool generates a SBOM for any build artifact.\n\nUsage - Microsoft.Sbom.DotNetTool <action> -options\n\nGlobalOption    Description\nHelp (-?, -h)   Prints this help message\n\nActions\n\n  Validate -options - Validate a build artifact using the manifest. Optionally also verify the signing certificate of the manifest.\n\n    Option                   Description\n    BuildDropPath (-b)       Specifies the root folder of the drop directory containing the final build artifacts\n                             (binaries and executables) for which the SBOM file will be validated. This is the\n                             directory where the completed build output is stored.\n    ManifestDirPath (-m)     The path of the directory where the manifest will be validated. If this parameter is not\n                             specified, the manifest will be validated in {BuildDropPath}/_manifest directory.\n    OutputPath (-o)          The path where the output json should be written. ex: Path/output.json\n    CatalogFilePath (-C)     This parameter is deprecated and will not be used, we will automatically detect the catalog\n                             file using our standard directory structure. The path of signed catalog file that is used\n                             to verify the signature of the manifest json file.\n    ValidateSignature (-s)   If set, will validate the manifest using the signed catalog file.\n    IgnoreMissing (-im)      If set, will not fail validation on the files presented in Manifest but missing on the disk.\n\n    ... \n Again, I've only shown a tiny sample here, rest assured there's a lot of options😅 Nevertheless I iterated until I managed to convince the tool to give me some output. After building my packages, I ran the tool using the following arguments (explained in more detail below): sbom-tool generate \\\n  -b ./artifacts/packages \\\n  -bc ./src/ \\\n  -pn NetEscapades.AspNetCore.SecurityHeaders \\\n  -pv 1.0.0-preview.03 \\\n  -ps \"Andrew Lock\" \\\n  -pm\n -b is BuildDropPath, the folder containing the final artifacts -bc is BuildComponentPath, the path to the source code used to build the artifacts -pn is PackageName, the name of the package -pv is PackageVersion, the version of the package -ps is PackageSupplier, the \"supplier\" of the package -pm is EnablePackageMetadataParsing, to enable parsing license info from the package's metadata file After the tool executes you can find a manifest.spdx.json file nested inside the \"BuildDropPath\" in a _manifests folder. The SBOM looks something like the following: {\n  \"files\": [\n    {\n      \"fileName\": \"./NetEscapades.AspNetCore.SecurityHeaders.1.0.0-preview.4.nupkg\",\n      \"SPDXID\": \"SPDXRef-File--NetEscapades.AspNetCore.SecurityHeaders.1.0.0-preview.4.nupkg-183E8FC1DE641A7C6B5F12E173F991B2BF4C0FBD\",\n      \"checksums\": [\n        {\n          \"algorithm\": \"SHA256\",\n          \"checksumValue\": \"62f76bc55d87ec52197158ab4aeb51516d8512b8932adfb0d85079097688613c\"\n        },\n        {\n          \"algorithm\": \"SHA1\",\n          \"checksumValue\": \"183e8fc1de641a7c6b5f12e173f991b2bf4c0fbd\"\n        }\n      ],\n      \"licenseConcluded\": \"NOASSERTION\",\n      \"licenseInfoInFiles\": [\n        \"NOASSERTION\"\n      ],\n      \"copyrightText\": \"NOASSERTION\"\n    }\n  ],\n  \"packages\": [\n    {\n      \"name\": \"NetEscapades.AspNetCore.SecurityHeaders\",\n      \"SPDXID\": \"SPDXRef-RootPackage\",\n      \"downloadLocation\": \"NOASSERTION\",\n      \"packageVerificationCode\": {\n        \"packageVerificationCodeValue\": \"5f36e353c6795a2cc8cf62be25e3c881a761bbfa\"\n      },\n      \"filesAnalyzed\": true,\n      \"licenseConcluded\": \"NOASSERTION\",\n      \"licenseInfoFromFiles\": [\n        \"NOASSERTION\"\n      ],\n      \"licenseDeclared\": \"NOASSERTION\",\n      \"copyrightText\": \"NOASSERTION\",\n      \"versionInfo\": \"1.0.0-preview.03\",\n      \"externalRefs\": [\n        {\n          \"referenceCategory\": \"PACKAGE-MANAGER\",\n          \"referenceType\": \"purl\",\n          \"referenceLocator\": \"pkg:swid/Andrew%20Lock/spdx.org/NetEscapades.AspNetCore.SecurityHeaders@1.0.0-preview.03?tag_id=fb838669-25eb-40a1-9a69-e64384a3cb92\"\n        }\n      ],\n      \"supplier\": \"Organization: Andrew Lock\",\n      \"hasFiles\": [\n        \"SPDXRef-File--NetEscapades.AspNetCore.SecurityHeaders.1.0.0-preview.4.nupkg-183E8FC1DE641A7C6B5F12E173F991B2BF4C0FBD\"\n      ]\n    }\n  ],\n  \"externalDocumentRefs\": [],\n  \"relationships\": [\n    {\n      \"relationshipType\": \"DESCRIBES\",\n      \"relatedSpdxElement\": \"SPDXRef-RootPackage\",\n      \"spdxElementId\": \"SPDXRef-DOCUMENT\"\n    }\n  ],\n  \"spdxVersion\": \"SPDX-2.2\",\n  \"dataLicense\": \"CC0-1.0\",\n  \"SPDXID\": \"SPDXRef-DOCUMENT\",\n  \"name\": \"NetEscapades.AspNetCore.SecurityHeaders 1.0.0-preview.03\",\n  \"documentNamespace\": \"https://spdx.org/spdxdocs/sbom-tool-3.1.0-167ddfaf-46b9-41f4-a692-0a452316281d/NetEscapades.AspNetCore.SecurityHeaders/1.0.0-preview.03/ovnbeOkRwkaknluUVlc_Iw\",\n  \"creationInfo\": {\n    \"created\": \"2025-03-12T20:59:05Z\",\n    \"creators\": [\n      \"Organization: Andrew Lock\",\n      \"Tool: Microsoft.SBOMTool-3.1.0\"\n    ]\n  },\n  \"documentDescribes\": [\n    \"SPDXRef-RootPackage\"\n  ]\n}\n It's worth noting that the NetEscapades.AspNetCore.SecurityHeaders package I'm testing here doesn't actually have any dependencies, so it probably wasn't the best choice for demonstration 😅 But also, with that in mind, you can see that the SPDX format is pretty verbose. Overall the tool wasn't too hard to use, but I can't really comment as to it's effectiveness. The one thing I would note is that it didn't seem to detect the development dependencies (e.g. StyleCop) used by the project. Whether or not these should be included in the SBOM doesn't seem to be entirely clear, but as far as I can tell, the sbom-tool is meant to include them, so it's a bit surprising to not find them. Overall I found the sbom-tool relatively easy to use, but it feels like it's more designed for applications than for components, such as the \"drop directory\" nomenclature and behaviour. For example, my project produces multiple NuGet packages, but I couldn't see how to easily generate separate SBOMs for them when the .nupkg files are all output to the same directory. The sbom-tool seems to require moving each of the built packages into a separate folder if you want a separate SBOM for each package. GitHub action anchore/sbom-action using Syft The next tool I tested was a GitHub action called anchore/sbom-action that uses Syft to create an SBOM. The basic use instructions for the action are very simple - simply point the tool at a path, and specify where you want the resulting spdx file to be generated: - uses: anchore/sbom-action@f325610c9f50a54015d37c8d16cb3b0e2c8f4de0 # v0.18.0\nwith:\n    path: ./artifacts/bin/NetEscapades.AspNetCore.SecurityHeaders\n    output-file: ./artifacts/sboms/netescapades-aspnetcore-securityheaders.spdx.json\n    upload-artifact: false\n The eagle-eyed among you may notice that the path here is pointing to the bin folder instead of the packages folder. That's because Syft appears to rely on parsing the deps.json file to identify dependencies. It's possible Syft can work with the .nupkg files directly, but I didn't explore that.  Note that we're pinning to a specific commit hash in the action. This is important to avoid supply-chain attacks, such as the recent attack on the tj-actions/changed-files action.  The resulting SPDX file is even more verbose than the sbom-tool version. I've included the whole file below for completeness, but it really is a bit much {\n    \"spdxVersion\": \"SPDX-2.3\",\n    \"dataLicense\": \"CC0-1.0\",\n    \"SPDXID\": \"SPDXRef-DOCUMENT\",\n    \"name\": \"./artifacts/bin/NetEscapades.AspNetCore.SecurityHeaders\",\n    \"documentNamespace\": \"https://anchore.com/syft/dir/artifacts/bin/NetEscapades.AspNetCore.SecurityHeaders-961b3ac4-c862-4b30-bc40-8d46eb6873eb\",\n    \"creationInfo\": {\n        \"licenseListVersion\": \"3.25\",\n        \"creators\": [\n            \"Organization: Anchore, Inc\",\n            \"Tool: syft-1.19.0\"\n        ],\n        \"created\": \"2025-02-22T18:48:52Z\"\n    },\n    \"packages\": [\n        {\n            \"name\": \"NetEscapades.AspNetCore.SecurityHeaders\",\n            \"SPDXID\": \"SPDXRef-Package-dotnet-NetEscapades.AspNetCore.SecurityHeaders-90ec83c3e4e1e537\",\n            \"versionInfo\": \"1.0.0-preview.3\",\n            \"supplier\": \"NOASSERTION\",\n            \"downloadLocation\": \"NOASSERTION\",\n            \"filesAnalyzed\": false,\n            \"sourceInfo\": \"acquired package info from dotnet project assets file: \\\\release_netcoreapp3.1\\\\NetEscapades.AspNetCore.SecurityHeaders.deps.json\",\n            \"licenseConcluded\": \"NOASSERTION\",\n            \"licenseDeclared\": \"NOASSERTION\",\n            \"copyrightText\": \"NOASSERTION\",\n            \"externalRefs\": [\n                {\n                    \"referenceCategory\": \"SECURITY\",\n                    \"referenceType\": \"cpe23Type\",\n                    \"referenceLocator\": \"cpe:2.3:a:NetEscapades.AspNetCore.SecurityHeaders:NetEscapades.AspNetCore.SecurityHeaders:1.0.0-preview.3:*:*:*:*:*:*:*\"\n                },\n                {\n                    \"referenceCategory\": \"PACKAGE-MANAGER\",\n                    \"referenceType\": \"purl\",\n                    \"referenceLocator\": \"pkg:nuget/NetEscapades.AspNetCore.SecurityHeaders@1.0.0-preview.3\"\n                }\n            ]\n        },\n        {\n            \"name\": \"NetEscapades.AspNetCore.SecurityHeaders\",\n            \"SPDXID\": \"SPDXRef-Package-dotnet-NetEscapades.AspNetCore.SecurityHeaders-7a9d7a39e1fc2567\",\n            \"versionInfo\": \"1.0.0-preview.3+b661fe12f950034461acfce714f03673a8a43b24\",\n            \"supplier\": \"Organization: Andrew Lock\",\n            \"originator\": \"Organization: Andrew Lock\",\n            \"downloadLocation\": \"NOASSERTION\",\n            \"filesAnalyzed\": false,\n            \"sourceInfo\": \"acquired package info from dotnet project assets file: \\\\release_netcoreapp3.1\\\\NetEscapades.AspNetCore.SecurityHeaders.dll\",\n            \"licenseConcluded\": \"NOASSERTION\",\n            \"licenseDeclared\": \"NOASSERTION\",\n            \"copyrightText\": \"NOASSERTION\",\n            \"externalRefs\": [\n                {\n                    \"referenceCategory\": \"SECURITY\",\n                    \"referenceType\": \"cpe23Type\",\n                    \"referenceLocator\": \"cpe:2.3:a:NetEscapades.AspNetCore.SecurityHeaders:NetEscapades.AspNetCore.SecurityHeaders:1.0.0-preview.3\\\\+b661fe12f950034461acfce714f03673a8a43b24:*:*:*:*:*:*:*\"\n                },\n                {\n                    \"referenceCategory\": \"PACKAGE-MANAGER\",\n                    \"referenceType\": \"purl\",\n                    \"referenceLocator\": \"pkg:nuget/NetEscapades.AspNetCore.SecurityHeaders@1.0.0-preview.3%2Bb661fe12f950034461acfce714f03673a8a43b24\"\n                }\n            ]\n        },\n        {\n            \"name\": \"StyleCop.Analyzers\",\n            \"SPDXID\": \"SPDXRef-Package-dotnet-StyleCop.Analyzers-7af1945e1aa913b8\",\n            \"versionInfo\": \"1.2.0-beta.556\",\n            \"supplier\": \"NOASSERTION\",\n            \"downloadLocation\": \"NOASSERTION\",\n            \"filesAnalyzed\": false,\n            \"sourceInfo\": \"acquired package info from dotnet project assets file: \\\\release_netcoreapp3.1\\\\NetEscapades.AspNetCore.SecurityHeaders.deps.json\",\n            \"licenseConcluded\": \"NOASSERTION\",\n            \"licenseDeclared\": \"NOASSERTION\",\n            \"copyrightText\": \"NOASSERTION\",\n            \"externalRefs\": [\n                {\n                    \"referenceCategory\": \"SECURITY\",\n                    \"referenceType\": \"cpe23Type\",\n                    \"referenceLocator\": \"cpe:2.3:a:StyleCop.Analyzers:StyleCop.Analyzers:1.2.0-beta.556:*:*:*:*:*:*:*\"\n                },\n                {\n                    \"referenceCategory\": \"PACKAGE-MANAGER\",\n                    \"referenceType\": \"purl\",\n                    \"referenceLocator\": \"pkg:nuget/StyleCop.Analyzers@1.2.0-beta.556\"\n                }\n            ]\n        },\n        {\n            \"name\": \"StyleCop.Analyzers.Unstable\",\n            \"SPDXID\": \"SPDXRef-Package-dotnet-StyleCop.Analyzers.Unstable-93261229c8bc8710\",\n            \"versionInfo\": \"1.2.0.556\",\n            \"supplier\": \"NOASSERTION\",\n            \"downloadLocation\": \"NOASSERTION\",\n            \"filesAnalyzed\": false,\n            \"sourceInfo\": \"acquired package info from dotnet project assets file: \\\\release_netcoreapp3.1\\\\NetEscapades.AspNetCore.SecurityHeaders.deps.json\",\n            \"licenseConcluded\": \"NOASSERTION\",\n            \"licenseDeclared\": \"NOASSERTION\",\n            \"copyrightText\": \"NOASSERTION\",\n            \"externalRefs\": [\n                {\n                    \"referenceCategory\": \"SECURITY\",\n                    \"referenceType\": \"cpe23Type\",\n                    \"referenceLocator\": \"cpe:2.3:a:StyleCop.Analyzers.Unstable:StyleCop.Analyzers.Unstable:1.2.0.556:*:*:*:*:*:*:*\"\n                },\n                {\n                    \"referenceCategory\": \"PACKAGE-MANAGER\",\n                    \"referenceType\": \"purl\",\n                    \"referenceLocator\": \"pkg:nuget/StyleCop.Analyzers.Unstable@1.2.0.556\"\n                }\n            ]\n        },\n        {\n            \"name\": \"./artifacts/bin/NetEscapades.AspNetCore.SecurityHeaders\",\n            \"SPDXID\": \"SPDXRef-DocumentRoot-Directory-.-artifacts-bin-NetEscapades.AspNetCore.SecurityHeaders\",\n            \"supplier\": \"NOASSERTION\",\n            \"downloadLocation\": \"NOASSERTION\",\n            \"filesAnalyzed\": false,\n            \"licenseConcluded\": \"NOASSERTION\",\n            \"licenseDeclared\": \"NOASSERTION\",\n            \"copyrightText\": \"NOASSERTION\",\n            \"primaryPackagePurpose\": \"FILE\"\n        }\n    ],\n    \"files\": [\n        {\n            \"fileName\": \"\\\\release_netcoreapp3.1\\\\NetEscapades.AspNetCore.SecurityHeaders.deps.json\",\n            \"SPDXID\": \"SPDXRef-File--release-netcoreapp3.1-NetEscapades.AspNetCore.SecurityHeaders.deps.json-80967c7804fdaff3\",\n            \"checksums\": [\n                {\n                    \"algorithm\": \"SHA1\",\n                    \"checksumValue\": \"0000000000000000000000000000000000000000\"\n                }\n            ],\n            \"licenseConcluded\": \"NOASSERTION\",\n            \"licenseInfoInFiles\": [\n                \"NOASSERTION\"\n            ],\n            \"copyrightText\": \"NOASSERTION\"\n        },\n        {\n            \"fileName\": \"\\\\release_netcoreapp3.1\\\\NetEscapades.AspNetCore.SecurityHeaders.dll\",\n            \"SPDXID\": \"SPDXRef-File--release-netcoreapp3.1-NetEscapades.AspNetCore.SecurityHeaders.dll-7b8c831fe1558d56\",\n            \"checksums\": [\n                {\n                    \"algorithm\": \"SHA1\",\n                    \"checksumValue\": \"0000000000000000000000000000000000000000\"\n                }\n            ],\n            \"licenseConcluded\": \"NOASSERTION\",\n            \"licenseInfoInFiles\": [\n                \"NOASSERTION\"\n            ],\n            \"copyrightText\": \"NOASSERTION\"\n        }\n    ],\n    \"relationships\": [\n        {\n            \"spdxElementId\": \"SPDXRef-Package-dotnet-StyleCop.Analyzers-7af1945e1aa913b8\",\n            \"relatedSpdxElement\": \"SPDXRef-Package-dotnet-NetEscapades.AspNetCore.SecurityHeaders-90ec83c3e4e1e537\",\n            \"relationshipType\": \"DEPENDENCY_OF\"\n        },\n        {\n            \"spdxElementId\": \"SPDXRef-Package-dotnet-StyleCop.Analyzers.Unstable-93261229c8bc8710\",\n            \"relatedSpdxElement\": \"SPDXRef-Package-dotnet-StyleCop.Analyzers-7af1945e1aa913b8\",\n            \"relationshipType\": \"DEPENDENCY_OF\"\n        },\n        {\n            \"spdxElementId\": \"SPDXRef-Package-dotnet-NetEscapades.AspNetCore.SecurityHeaders-7a9d7a39e1fc2567\",\n            \"relatedSpdxElement\": \"SPDXRef-File--release-netcoreapp3.1-NetEscapades.AspNetCore.SecurityHeaders.dll-7b8c831fe1558d56\",\n            \"relationshipType\": \"OTHER\",\n            \"comment\": \"evident-by: indicates the package's existence is evident by the given file\"\n        },\n        {\n            \"spdxElementId\": \"SPDXRef-Package-dotnet-StyleCop.Analyzers-7af1945e1aa913b8\",\n            \"relatedSpdxElement\": \"SPDXRef-File--release-netcoreapp3.1-NetEscapades.AspNetCore.SecurityHeaders.deps.json-80967c7804fdaff3\",\n            \"relationshipType\": \"OTHER\",\n            \"comment\": \"evident-by: indicates the package's existence is evident by the given file\"\n        },\n        {\n            \"spdxElementId\": \"SPDXRef-Package-dotnet-NetEscapades.AspNetCore.SecurityHeaders-90ec83c3e4e1e537\",\n            \"relatedSpdxElement\": \"SPDXRef-File--release-netcoreapp3.1-NetEscapades.AspNetCore.SecurityHeaders.deps.json-80967c7804fdaff3\",\n            \"relationshipType\": \"OTHER\",\n            \"comment\": \"evident-by: indicates the package's existence is evident by the given file\"\n        },\n        {\n            \"spdxElementId\": \"SPDXRef-Package-dotnet-StyleCop.Analyzers.Unstable-93261229c8bc8710\",\n            \"relatedSpdxElement\": \"SPDXRef-File--release-netcoreapp3.1-NetEscapades.AspNetCore.SecurityHeaders.deps.json-80967c7804fdaff3\",\n            \"relationshipType\": \"OTHER\",\n            \"comment\": \"evident-by: indicates the package's existence is evident by the given file\"\n        },\n        {\n            \"spdxElementId\": \"SPDXRef-DocumentRoot-Directory-.-artifacts-bin-NetEscapades.AspNetCore.SecurityHeaders\",\n            \"relatedSpdxElement\": \"SPDXRef-Package-dotnet-NetEscapades.AspNetCore.SecurityHeaders-90ec83c3e4e1e537\",\n            \"relationshipType\": \"CONTAINS\"\n        },\n        {\n            \"spdxElementId\": \"SPDXRef-DocumentRoot-Directory-.-artifacts-bin-NetEscapades.AspNetCore.SecurityHeaders\",\n            \"relatedSpdxElement\": \"SPDXRef-Package-dotnet-NetEscapades.AspNetCore.SecurityHeaders-7a9d7a39e1fc2567\",\n            \"relationshipType\": \"CONTAINS\"\n        },\n        {\n            \"spdxElementId\": \"SPDXRef-DocumentRoot-Directory-.-artifacts-bin-NetEscapades.AspNetCore.SecurityHeaders\",\n            \"relatedSpdxElement\": \"SPDXRef-Package-dotnet-StyleCop.Analyzers-7af1945e1aa913b8\",\n            \"relationshipType\": \"CONTAINS\"\n        },\n        {\n            \"spdxElementId\": \"SPDXRef-DocumentRoot-Directory-.-artifacts-bin-NetEscapades.AspNetCore.SecurityHeaders\",\n            \"relatedSpdxElement\": \"SPDXRef-Package-dotnet-StyleCop.Analyzers.Unstable-93261229c8bc8710\",\n            \"relationshipType\": \"CONTAINS\"\n        },\n        {\n            \"spdxElementId\": \"SPDXRef-DOCUMENT\",\n            \"relatedSpdxElement\": \"SPDXRef-DocumentRoot-Directory-.-artifacts-bin-NetEscapades.AspNetCore.SecurityHeaders\",\n            \"relationshipType\": \"DESCRIBES\"\n        }\n    ]\n}\n So top marks for this tool for simplicity, but I don't know, the verbosity bugged me 😅 CycloneDX module for .NET That brings us to the final tool I tried, the CycloneDX module for .NET. This is the only tool I tried that uses the CycloneDX format instead of the older SPDX format, and I have to say, I thought it was pretty nice and easy. Just like Microsoft's sbom-tool, the CycloneDX module is available as a .NET global tool, which makes it easy for .NET devs to use. Install the tool using: dotnet tool install --global CycloneDX\n You can then execute the tool by providing a path to a .csproj file, along with any additional arguments. As before, there are a lot of possible options here, but I've listed the values I used along with their explanations dotnet-CycloneDX .\\src\\NetEscapades.AspNetCore.SecurityHeaders\\NetEscapades.AspNetCore.SecurityHeaders.csproj \\ # Path to the project to analyzer\n  --json \\ # Produce a JSON doc instead of XML\n  --recursive \\ # Recursively scan the projects referenced by the project\n  --set-name NetEscapades.AspNetCore.SecurityHeaders \\ # Override the SBOM component name explicitly\n  --set-version 1.0.0-preview.03 \\ # Override the default SBOM component version\n  --base-intermediate-output-path .\\artifacts\\ \\ # Required if you're using .NET 8's artifiacts output layout\n  --output .\\artifacts\\sboms \\ # Where should the SBOM file be written\n  --filename netescapades-aspnetcore-securityheaders.bom.json \\ # The name of the SBOM file\n  --set-type library # What type of project is this e.g. Application/Container/Framework\n Running the command above produces a document like the one shown below. Again, I've included the whole document for completeness: {\n  \"bomFormat\": \"CycloneDX\",\n  \"specVersion\": \"1.6\",\n  \"serialNumber\": \"urn:uuid:c2560456-af20-49f6-b2a9-2e4ea7306e9e\",\n  \"version\": 1,\n  \"metadata\": {\n    \"timestamp\": \"2025-02-22T20:09:50Z\",\n    \"tools\": [\n      {\n        \"vendor\": \"CycloneDX\",\n        \"name\": \"CycloneDX module for .NET\",\n        \"version\": \"5.0.1.0\"\n      }\n    ],\n    \"component\": {\n      \"type\": \"library\",\n      \"bom-ref\": \"NetEscapades.AspNetCore.SecurityHeaders@1.0.0-preview.3\",\n      \"name\": \"NetEscapades.AspNetCore.SecurityHeaders\",\n      \"version\": \"1.0.0-preview.3\"\n    }\n  },\n  \"components\": [\n    {\n      \"type\": \"library\",\n      \"bom-ref\": \"pkg:nuget/StyleCop.Analyzers@1.2.0-beta.556\",\n      \"authors\": [\n        {\n          \"name\": \"Sam Harwell et. al.\"\n        }\n      ],\n      \"name\": \"StyleCop.Analyzers\",\n      \"version\": \"1.2.0-beta.556\",\n      \"description\": \"An implementation of StyleCop\\u0027s rules using Roslyn analyzers and code fixes\",\n      \"scope\": \"required\",\n      \"hashes\": [\n        {\n          \"alg\": \"SHA-512\",\n          \"content\": \"08163F6061EBC26EA9B8069A82E9F575D656A50F1D9299EDA874F4107731EB2E02B512F201F1C34C6983D92BAECD6EE5E992AA6B61C78AE9490A7FDDBDD51882\"\n        }\n      ],\n      \"licenses\": [\n        {\n          \"license\": {\n            \"id\": \"MIT\"\n          }\n        }\n      ],\n      \"copyright\": \"Copyright 2015 Tunnel Vision Laboratories, LLC\",\n      \"purl\": \"pkg:nuget/StyleCop.Analyzers@1.2.0-beta.556\",\n      \"externalReferences\": [\n        {\n          \"url\": \"https://github.com/DotNetAnalyzers/StyleCopAnalyzers\",\n          \"type\": \"website\"\n        }\n      ]\n    },\n    {\n      \"type\": \"library\",\n      \"bom-ref\": \"pkg:nuget/StyleCop.Analyzers.Unstable@1.2.0.556\",\n      \"authors\": [\n        {\n          \"name\": \"Sam Harwell et. al.\"\n        }\n      ],\n      \"name\": \"StyleCop.Analyzers.Unstable\",\n      \"version\": \"1.2.0.556\",\n      \"description\": \"An implementation of StyleCop\\u0027s rules using Roslyn analyzers and code fixes\",\n      \"scope\": \"required\",\n      \"hashes\": [\n        {\n          \"alg\": \"SHA-512\",\n          \"content\": \"0E9FBAE713D2D30690BB331E7308A619894EE26C13798855EC0A2529B32468D67FBCF2BC1F02AA0F3AE7E6851D2B595684EF415245AA8119B9B1B7D58C30916B\"\n        }\n      ],\n      \"licenses\": [\n        {\n          \"license\": {\n            \"id\": \"MIT\"\n          }\n        }\n      ],\n      \"copyright\": \"Copyright 2015 Tunnel Vision Laboratories, LLC\",\n      \"purl\": \"pkg:nuget/StyleCop.Analyzers.Unstable@1.2.0.556\",\n      \"externalReferences\": [\n        {\n          \"url\": \"https://github.com/DotNetAnalyzers/StyleCopAnalyzers\",\n          \"type\": \"website\"\n        }\n      ]\n    }\n  ],\n  \"dependencies\": [\n    {\n      \"ref\": \"NetEscapades.AspNetCore.SecurityHeaders@1.0.0-preview.3\",\n      \"dependsOn\": [\n        \"pkg:nuget/StyleCop.Analyzers@1.2.0-beta.556\",\n        \"pkg:nuget/StyleCop.Analyzers.Unstable@1.2.0.556\"\n      ]\n    },\n    {\n      \"ref\": \"pkg:nuget/StyleCop.Analyzers.Unstable@1.2.0.556\",\n      \"dependsOn\": []\n    },\n    {\n      \"ref\": \"pkg:nuget/StyleCop.Analyzers@1.2.0-beta.556\",\n      \"dependsOn\": [\n        \"pkg:nuget/StyleCop.Analyzers.Unstable@1.2.0.556\"\n      ]\n    }\n  ]\n}\n Just comparing the CycloneDX output document to the previous SPDX document, the CycloneDX one seems much easier to understand, with fewer extraneous details. In practice, I doubt that will matter much, as these documents are meant to be parsed and processed by a machine rather than by humans. But I don't know, I guess I'm partial to a well formatted JSON document, as this is the approach I settled on in the end 😀. Summary In this post I gave a brief introduction to SBOMs, including what they are, why they're useful, and a couple of standard formats used to define an SBOM. I then showed multiple ways to generate an SBOM for a .NET NuGet package. I showed GitHub's built-in \"Export SBOM\" button, Microsoft's open source sbom-tool, the anchore/sbom-action GitHub Action that uses Syft, and finally the CycloneDX module for .NET. For each approach I showed how to use the tool to generate an SBOM for a NuGet package project, and what the output file looks like."
  },
  {
    "itemId": "https://andrewlock.net/creating-provenance-attestations-for-nuget-packages-in-github-actions/",
    "raw": "<img src=\"https://andrewlock.net/content/images/2025/attest_banner.png\" /><p>In this post I discuss software provenance, what attestations say about your software, and how they work. I then show you can use GitHub actions to easily create a signed attestation when creating a NuGet package in GitHub Actions. The same process applies for applications too, but in this post I focus on creating an attestation for a single library. Make sure you read to the end though, as there's a n unfortunate conclusion to the story</p> <h2 id=\"what-is-software-provenance-\" class=\"heading-with-anchor\"><a href=\"#what-is-software-provenance-\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">What is software provenance?</a></h2> <p><a href=\"https://slsa.dev/spec/v1.0/provenance\">Software provenance</a> is about providing verifiable information and integrity guarantees about a software artifact, describing where, when, and how it was produced. It is one part of the overall software software-chain that goes into creating secure software that can be <em>proven</em> to have not been tampered with.</p> <p><a href=\"https://slsa.dev/\">Supply-chain Levels for Software Artifacts (SLSA)</a> is a security framework that systematically looks at the various points your software could be compromised, and provides suggested guidelines, controls, and checks, for mitigating these threats.</p> <figure> <picture> <img src=\"/content/images/2025/supply-chain-threats.svg\"> </picture><figcaption>Threats to the software supply chain. From <a href=\"https://slsa.dev/spec/v1.0/threats-overview\">SLSA</a></figcaption></figure> <p>Enabling provenance for your artifacts helps protect you and your customers from several of these attacks. A <a href=\"https://slsa.dev/spec/v1.0/provenance\">provenance <em>attestation</em></a> provides a common format for describing how your artifact was built, the environment it was built in, the build definition that produced it, the build <em>run</em> that produced it, and more.</p> <p>The attestation is typically a JSON document, which is signed and stored \"publicly\" (or internally for internal software). When someone consumes the artifact, they can check the artifact's attestation, which provides all the details as to where the artifact was created.</p> <p>By itself, providing provenance and attestations doesn't <em>automatically</em> enhance the security; for that you must <em>verify</em> the attestations of software you consume or which you deploy. For example, if you're deploying to Kubernetes you could <a href=\"https://www.legitsecurity.com/blog/slsa-provenance-blog-series-part-2-deeper-dive-into-slsa-provenance\">create a policy</a> that enforces that all Docker images deployed to the cluster have attestations. As GitHub say in their announcement post:</p> <blockquote> <p>“It's important to note that provenance by itself doesn’t make your artifact or your build process secure. What it does do is create a tamper-proof guarantee that the thing you’re executing is definitely the thing that you built, which can stop many attack vectors. It's still vital to maintain strong application security processes like requiring code review for all patches, and applying dependency updates in a timely manner.”</p> </blockquote> <p>Now that we know why we need provenance, and what attestations are useful for in general, we'll move on to see how they're generated in a specific scenario, in GitHub Actions.</p> <h2 id=\"how-does-github-generate-attestations-\" class=\"heading-with-anchor\"><a href=\"#how-does-github-generate-attestations-\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">How does GitHub generate attestations?</a></h2> <p>In May 2024, Github <a href=\"https://github.blog/news-insights/product-news/introducing-artifact-attestations-now-in-public-beta/\">introduced a public beta</a> of artifact attestations, and they became generally available in June 2024. The GitHub model is designed to be simple to use and avoid long-lived credentials. Their model uses a GitHub managed workflow and client to handle the complexity.</p> <figure> <picture> <img src=\"/content/images/2025/github_attestations.webp\"> </picture><figcaption>The Github attestation method. From <a href=\"https://github.blog/news-insights/product-news/introducing-artifact-attestations-now-in-public-beta/\">Introducing Artifact Attestations–now in public beta</a></figcaption></figure> <p>The process starts when you execute GitHub's <code>actions/attest-build-provenance</code> action. This invokes GitHub's Sigstore client, which requests <a href=\"https://docs.github.com/en/actions/security-for-github-actions/security-hardening-your-deployments/about-security-hardening-with-openid-connect#understanding-the-oidc-token\">the GitHub Actions OIDC token</a>, which is unique for each job. The Sigstore client then creates a public-private key-pair, and sends the <em>public</em> part of the pair to the <a href=\"https://github.com/sigstore/fulcio\">Fulcio</a> certificate authority, along with the OIDC token.</p> <p>On receiving the OIDC token and the public part of the key pair, Flucio creates a new short-lived X.509 certificate, associated with the OIDC token, and returns it back to the Sigstore client. The Sigstore client then:</p> <ul><li>Calculates the SHA-256 digest of the artifact for which provenance is being attested.</li> <li>Writes the provenance statement as an <a href=\"https://github.blog/news-insights/product-news/introducing-artifact-attestations-now-in-public-beta/\">in-toto</a> JSON blob, including additional data (termed <a href=\"https://github.blog/news-insights/product-news/introducing-artifact-attestations-now-in-public-beta/\">a <em>predicate</em></a>) from the OIDC token.</li> <li>The provenance statement is <a href=\"https://github.com/secure-systems-lab/dsse\">signed</a> using the <em>private</em> part of the key value pair.</li> <li>The private part of the key value pair is now thrown away, and can not be recovered.</li> <li>The statement is counter-signed by a Time Stamp Authority (TSA) that proves the signing process completed in the required 10-minutes (the Fulcio certificate's validity)</li> <li>All the data is pushed as <a href=\"https://github.com/sigstore/protobuf-specs/blob/main/protos/sigstore_bundle.proto\">a Sigstore bundle</a>, persisted to GitHub’s attestation store and to the Sigstore Public Good Instance (for public repos)</li></ul> <p>And with that, the attestation is complete. In the next section, I'll show how you can easily create attestations for your own projects.</p> <h2 id=\"create-an-attestation-for-a-nuget-package-in-github-actions\" class=\"heading-with-anchor\"><a href=\"#create-an-attestation-for-a-nuget-package-in-github-actions\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Create an attestation for a NuGet package in GitHub Actions</a></h2> <p>In this section I show how to create an attestation for a NuGet package created in a GitHub action. To provide some context, this is the (simplified) workflow that we start from. It simply installs .NET, builds and packs the solution, and then pushes the NuGet packages to nuget.org.</p> <pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> BuildAndPack\n\n<span class=\"token key atrule\">on</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">push</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">branches</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"main\"</span> <span class=\"token punctuation\">]</span>\n    <span class=\"token key atrule\">tags</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'*'</span><span class=\"token punctuation\">]</span>\n  <span class=\"token key atrule\">pull_request</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">branches</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'*'</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token key atrule\">jobs</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">build-and-test</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">runs-on</span><span class=\"token punctuation\">:</span> ubuntu<span class=\"token punctuation\">-</span>latest\n    <span class=\"token key atrule\">steps</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 <span class=\"token comment\"># v4.2.2</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> actions/setup<span class=\"token punctuation\">-</span>dotnet@67a3573c9a986a3f9c594539f4ab511d57bb3ce9 <span class=\"token comment\"># v4.3.1</span>\n        <span class=\"token key atrule\">with</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">dotnet-version</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">|</span><span class=\"token scalar string\">\n            9.0.x\n            8.0.x\n            6.0.x\n            3.1.x</span>\n\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Build and pack\n        <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span> dotnet pack <span class=\"token punctuation\">-</span>c Release\n\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Push to NuGet\n        <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span> dotnet nuget push artifacts/packages/<span class=\"token important\">*.nupkg</span>\n        <span class=\"token key atrule\">env</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">NuGetToken</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> secrets.NUGET_TOKEN <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> actions/upload<span class=\"token punctuation\">-</span>artifact@4cec3d8aa04e39d1a68397de0c4cd6fb9dce8ec1 <span class=\"token comment\"># v4.6.1</span>\n        <span class=\"token key atrule\">with</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> packages\n          <span class=\"token key atrule\">path</span><span class=\"token punctuation\">:</span> artifacts/packages\n</code></pre> <p>A real build would have additional steps like a <code>test</code> stage, but this is good enough as an example—it shows the NuGet packages being published to the <code>artifacts/packages</code> folder, and pushed to NuGet.</p> <blockquote> <p>Note that we're pinning to a specific commit hash for each action. This is important to avoid supply-chain attacks, such as <a href=\"https://www.bleepingcomputer.com/news/security/supply-chain-attack-on-popular-github-action-exposes-ci-cd-secrets/\">the recent attack</a> on the <code>tj-actions/changed-files</code> action.</p> </blockquote> <p>We're now going to add an attestation to this. The simplest way to do this is simply add an additional step to the workflow:</p> <pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Generate artifact attestation\n  <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> actions/attest<span class=\"token punctuation\">-</span>build<span class=\"token punctuation\">-</span>provenance@c074443f1aee8d4aeeae555aebba3282517141b2 <span class=\"token comment\"># v2.2.3</span>\n  <span class=\"token key atrule\">with</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">subject-path</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'artifacts/packages/*.nupkg'</span>\n</code></pre> <p>You'll also need to make sure the workflow has sufficient permissions to create the OIDC token and attestations:</p> <pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">permissions</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">id-token</span><span class=\"token punctuation\">:</span> write\n  <span class=\"token key atrule\">contents</span><span class=\"token punctuation\">:</span> read\n  <span class=\"token key atrule\">attestations</span><span class=\"token punctuation\">:</span> write\n</code></pre> <p>Putting that together,</p> <pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> BuildAndPack\n\n<span class=\"token key atrule\">on</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">push</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">branches</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"main\"</span> <span class=\"token punctuation\">]</span>\n    <span class=\"token key atrule\">tags</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'*'</span><span class=\"token punctuation\">]</span>\n  <span class=\"token key atrule\">pull_request</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">branches</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'*'</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token key atrule\">jobs</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">build-and-test</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">runs-on</span><span class=\"token punctuation\">:</span> ubuntu<span class=\"token punctuation\">-</span>latest\n    <span class=\"token comment\"># 👇 Add the permissions here</span>\n    <span class=\"token key atrule\">permissions</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">id-token</span><span class=\"token punctuation\">:</span> write\n      <span class=\"token key atrule\">contents</span><span class=\"token punctuation\">:</span> read\n      <span class=\"token key atrule\">attestations</span><span class=\"token punctuation\">:</span> write\n    <span class=\"token key atrule\">steps</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 <span class=\"token comment\"># v4.2.2</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> actions/setup<span class=\"token punctuation\">-</span>dotnet@67a3573c9a986a3f9c594539f4ab511d57bb3ce9 <span class=\"token comment\"># v4.3.1</span>\n        <span class=\"token key atrule\">with</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">dotnet-version</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">|</span><span class=\"token scalar string\">\n            9.0.x\n            8.0.x\n            6.0.x\n            3.1.x</span>\n\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Build and publish\n        <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span> dotnet publish <span class=\"token punctuation\">-</span>c Release\n\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Build and publish\n        <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span> dotnet nuget push artifacts/packages/<span class=\"token important\">*.nupkg</span>\n        <span class=\"token key atrule\">env</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">NuGetToken</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> secrets.NUGET_TOKEN <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\"># 👇 Generate the attestation</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Generate artifact attestation\n        <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> actions/attest<span class=\"token punctuation\">-</span>build<span class=\"token punctuation\">-</span>provenance@c074443f1aee8d4aeeae555aebba3282517141b2 <span class=\"token comment\"># v2.2.3</span>\n        <span class=\"token key atrule\">with</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">subject-path</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'artifacts/packages/*.nupkg'</span>\n\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> actions/upload<span class=\"token punctuation\">-</span>artifact@4cec3d8aa04e39d1a68397de0c4cd6fb9dce8ec1 <span class=\"token comment\"># v4.6.1</span>\n        <span class=\"token key atrule\">with</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> packages\n          <span class=\"token key atrule\">path</span><span class=\"token punctuation\">:</span> artifacts/packages\n</code></pre> <p>And that's all you need to do—GitHub does the rest! The job summary includes a link to the <a href=\"https://github.com/andrewlock/NetEscapades.AspNetCore.SecurityHeaders/attestations/5148236\">public GitHub attestation</a> where you can view and download the attestation directly if you wish:</p> <p><img src=\"/content/images/2025/attest.png\" alt=\"The public attestation\"></p> <p>Note that the method above achieves SLSA v1.0 Build Level 2. After verifying the provenance of an artifact you still need to follow the links and evaluate the build instructions used to create the artifact.</p> <p>The next level up, SLSA v1.0 Build Level 3, requires defining the build instructions <em>outside</em> of your repository, in a reusable workflow that is shared across all your organisation's repositories, for example. Requiring that builds make use of known, vetted build instructions provides that additional protection required for level 3.</p> <p>You can read more about how to achieve Build Level 3 <a href=\"https://docs.github.com/en/actions/security-for-github-actions/using-artifact-attestations/using-artifact-attestations-and-reusable-workflows-to-achieve-slsa-v1-build-level-3\">using GitHub here</a>, or consider the generators provided by <a href=\"https://github.com/slsa-framework/slsa-github-generator/tree/main\">the SLSA project</a>.</p> <h2 id=\"verifying-an-attestation-via-the-github-cli\" class=\"heading-with-anchor\"><a href=\"#verifying-an-attestation-via-the-github-cli\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Verifying an attestation via the Github CLI</a></h2> <p>As already discussed, the act of creating an attestation doesn't improve security on its own. It's only beneficial if you <em>verify</em> that the artifacts you're using and deploying have valid attestations. If you're deploying images to Kubernetes, you might want to consider <a href=\"https://docs.github.com/en/actions/security-for-github-actions/using-artifact-attestations/enforcing-artifact-attestations-with-a-kubernetes-admission-controller\">using an admission controller</a> to enforce provenance.</p> <p>If you're not deploying in this way, you might need to do manual verification. There are several ways to do this, for example you can <a href=\"https://docs.github.com/en/actions/security-for-github-actions/using-artifact-attestations/verifying-attestations-offline\">follow these instructions</a> to do offline verification.</p> <p>The easiest way to verify the attestation is to use the GitHub CLI using a command like the following:</p> <pre class=\"language-bash\"><code class=\"language-bash\">gh attestation verify <span class=\"token operator\">&lt;</span>path/to/artifact/to/verify<span class=\"token operator\">&gt;</span> <span class=\"token parameter variable\">-R</span> <span class=\"token operator\">&lt;</span>org/repo<span class=\"token operator\">&gt;</span>\n</code></pre> <p>So for example, to verify an attestation for the repo <code>andrewlock/NetEscapades.AspNetCore.SecurityHeaders</code>, you might use a command like the following, which provides the following output:</p> <pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token operator\">&gt;</span> gh attestation verify <span class=\"token parameter variable\">--repo</span> andrewlock/NetEscapades.AspNetCore.SecurityHeaders <span class=\"token string\">\"./NetEscapades.AspNetCore.SecurityHeaders.1.0.0-preview.3.nupkg\"</span>\nLoaded digest sha256:dd57dea438848532551aac6ba585d27b91e198fbc567ae576362212c5f9581e1 <span class=\"token keyword\">for</span> file://C:<span class=\"token punctuation\">\\</span>NetEscapades.AspNetCore.SecurityHeaders.1.0.0-preview.3.nupkg\n✓ Verification succeeded<span class=\"token operator\">!</span>\n\nsha256:dd57dea438848532551aac6ba585d27b91e198fbc567ae576362212c5f9581e1 was attested by:\nREPO                                                PREDICATE_TYPE                  WORKFLOW                                              \nandrewlock/NetEscapades.AspNetCore.SecurityHeaders  https://slsa.dev/provenance/v1  .github/workflows/BuildAndPack.yml@refs/pull/225/merge\n</code></pre> <p>As long as a provenance exists for the artifact, then verification will succeed, and you can be sure that the artifact was generated using the linked workflow. If verification fails, then you can't be sure where or how the artifact was created.</p> <h2 id=\"and-now-for-the-bad-news\" class=\"heading-with-anchor\"><a href=\"#and-now-for-the-bad-news\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">And now for the bad news…</a></h2> <p>After going through all this, one thing I <em>haven't</em> been able to figure out is how to efficiently verify the provenance of NuGet packages as part of a .NET build. My gut feeling is that it's simply not feasible right now. There's <a href=\"https://github.com/NuGet/Home/issues/13581\">an issue on the NuGet repo</a> which seems to be suggesting providing support for this sort of thing, but there doesn't look to be any progress, so I wouldn't hold your breath. In the meantime, if it's the sort of thing you really care about, you're likely stuck with manual verification approaches.</p> <p>But that's where things <em>really</em> fall apart.</p> <p>Unfortunately, the NuGet package you upload using <code>dotnet nuget push</code> is <em>not</em> the same package as the one that you download from <a href=\"http://nuget.org\">http://nuget.org</a>. NuGet modify the package when they receive it (to add a signature file, ironically), so the package available on nuget.org has a different SHA value to the artifact created in GitHub. That means the attestation generated for the build is effectively useless, as it does not apply to the package that you actually download from NuGet!</p> <blockquote> <p>I was <em>really</em> hoping I was wrong about that and I had messed something up, but it seems to be by design based on <a href=\"https://github.com/NuGet/NuGetGallery/issues/10026\">this issue</a>, and from empiricial testing. For example, <a href=\"https://github.com/andrewlock/NetEscapades.AspNetCore.SecurityHeaders/actions/runs/13797726705\">this is the GitHub workflow</a> in which I created and uploaded version <code>1.0.0-preview.4</code> of <em>NetEscapades.AspNetCore.SecurityHeaders</em> to NuGet. And yet, if you compare <a href=\"https://github.com/andrewlock/NetEscapades.AspNetCore.SecurityHeaders/actions/runs/13797726705/artifacts/2733179426\">the packages</a> stored in that artifact run with the packages you can <a href=\"https://www.nuget.org/api/v2/package/NetEscapades.AspNetCore.SecurityHeaders/1.0.0-preview.4\">download from NuGet</a> then their clearly different files.</p> </blockquote> <p>Given all that, it really seems like you can only treat the GitHub attestations as an academic exercise for NuGet packages for now. The signature file that nuget.org embeds in the NuGet package attempts to perform a similar role, and is explicitly supported by NuGet clients, so that's probably not a big deal.</p> <blockquote> <p>It seems to me (definitely <em>not</em> a security expert) that there's an additional potential avenue for attack with the signature file. If you could perform an attacker-in-the-middle attack on the upload to nuget.org, then you could replace the contents of the package with malicious content, and nuget.org would happily sign it I believe. This is obviously a niche, mitigated issue, given HTTPS <em>and</em> Microsoft's security scanning, but seems <em>possible</em>.</p> </blockquote> <p>Overall, the conclusion to this journey was disappointing. I think it <em>might</em> be feasible to perform an attestation of the <em>content</em> of the NuGet package prior to upload, <a href=\"https://github.com/NuGet/NuGetGallery/issues/10026#issuecomment-2176881037\">as described in this comment</a>, as that is unaffected by the nuget.org signing process. But retrieving that \"content hash\" from a NuGet package isn't necessarily <a href=\"https://github.com/NuGet/NuGet.Client/blob/a79a26abfe103fa7d75eba8c714a900c3a5bbc43/src/NuGet.Core/NuGet.Packaging/Signing/Archive/SignedPackageArchiveUtility.cs#L591\">simple for clients to do</a>, which makes <em>verifying</em> any attestations similarly difficult. For now, I'm just going to declare that provenance attestations are basically not possible for NuGet packages 😢.</p> <h2 id=\"update-the-redemption-arc\" class=\"heading-with-anchor\"><a href=\"#update-the-redemption-arc\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Update: the redemption arc</a></h2> <p>After a bit of experimentation, and after reading through <a href=\"https://github.com/NuGet/NuGetGallery/issues/10026\">this issue</a> in more detail, I established that you <em>can</em> essentially \"revert\" the modification nuget.org makes using the Linux <code>zip</code> utility, something like this:</p> <pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># Delete the .signature.p7s file that nuget.org adds to the package</span>\n<span class=\"token function\">zip</span> <span class=\"token parameter variable\">-d</span> NetEscapades.AspNetCore.SecurityHeaders.1.0.0-preview.4.nupkg .signature.p7s\n\n<span class=\"token comment\"># Run attestation verification for the package</span>\ngh attestation verify <span class=\"token parameter variable\">--owner</span> andrewlock <span class=\"token string\">\"C:\\Users\\sock\\Downloads\\NetEscapades.AspNetCore.SecurityHeaders.1.0.0-preview.4.nupkg\"</span>\n</code></pre> <p>As it turns out, the <code>zip</code> utility essentially <a href=\"https://github.com/darlinghq/darling-zip/blob/caf41ebbc3ebab0250e4d13aa42221ef91a9802c/zip/zip30/zip.c#L4268\">directly inverts</a> the <a href=\"https://github.com/NuGet/NuGet.Client/blob/128a5066b1438627ac69a2ffe9de564b2c09ee4d/src/NuGet.Core/NuGet.Packaging/Signing/Archive/SignedPackageArchiveIOUtility.cs#L518\">modification NuGet makes</a>, deleting the <em>.signature.p7s</em> file, and thereby restoring the SHA for the package to the version prior to upload. And that means that the attestations are once again valid:</p> <pre class=\"language-bash\"><code class=\"language-bash\">Loaded digest sha256:bf809ff0ed6a8a31131df4391b169e35ded44d4dfd97cc797123441683a95c9f <span class=\"token keyword\">for</span> file://./NetEscapades.AspNetCore.SecurityHeaders.1.0.0-preview.4.nupkg\nLoaded <span class=\"token number\">2</span> attestations from GitHub API\n\nThe following policy criteria will be enforced:\n- Predicate <span class=\"token builtin class-name\">type</span> must match:<span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span> https://slsa.dev/provenance/v1\n- Source Repository Owner URI must match:<span class=\"token punctuation\">..</span>. https://github.com/andrewlock\n- Subject Alternative Name must match regex: <span class=\"token punctuation\">(</span>?i<span class=\"token punctuation\">)</span>^https://github.com/andrewlock/\n- OIDC Issuer must match:<span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span>. https://token.actions.githubusercontent.com\n\n✓ Verification succeeded<span class=\"token operator\">!</span>\n\nThe following <span class=\"token number\">1</span> attestation matched the policy criteria\n\n- Attestation <span class=\"token comment\">#1</span>\n  - Build repo:<span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span>. andrewlock/NetEscapades.AspNetCore.SecurityHeaders\n  - Build workflow:. .github/workflows/BuildAndPack.yml@refs/tags/v1.0.0-preview.4\n  - Signer repo:<span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span> andrewlock/NetEscapades.AspNetCore.SecurityHeaders\n</code></pre> <p>If you're not on Linux, you can achieve a similar reversion using .NET, or using a PowerShell script that invokes .NET, something like the following:</p> <pre class=\"language-powershell\"><code class=\"language-powershell\"><span class=\"token comment\"># The file to update</span>\n<span class=\"token variable\">$zipfile</span> =  <span class=\"token string\">\"C:\\Users\\sock\\Downloads\\NetEscapades.AspNetCore.SecurityHeaders.1.0.0-preview.4.nupkg\"</span>\n\n<span class=\"token comment\"># Load the System.IO.Compression Compression library</span>\n<span class=\"token namespace\">[Reflection.Assembly]</span>::LoadWithPartialName<span class=\"token punctuation\">(</span><span class=\"token string\">'System.IO.Compression'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># Load the ZipArchive</span>\n<span class=\"token variable\">$stream</span> = <span class=\"token function\">New-Object</span> IO<span class=\"token punctuation\">.</span>FileStream<span class=\"token punctuation\">(</span><span class=\"token variable\">$zipfile</span><span class=\"token punctuation\">,</span> <span class=\"token namespace\">[IO.FileMode]</span>::Open<span class=\"token punctuation\">)</span>\n<span class=\"token variable\">$zip</span>    = <span class=\"token function\">New-Object</span> IO<span class=\"token punctuation\">.</span>Compression<span class=\"token punctuation\">.</span>ZipArchive<span class=\"token punctuation\">(</span><span class=\"token variable\">$stream</span><span class=\"token punctuation\">,</span> <span class=\"token namespace\">[IO.Compression.ZipArchiveMode]</span>::Update<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># Delete the signature file and cleanup</span>\n<span class=\"token variable\">$zip</span><span class=\"token punctuation\">.</span>Entries <span class=\"token punctuation\">|</span> ? <span class=\"token punctuation\">{</span> <span class=\"token variable\">$_</span><span class=\"token punctuation\">.</span>Name <span class=\"token operator\">-eq</span> <span class=\"token string\">\".signature.p7s\"</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">|</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">{</span> <span class=\"token variable\">$_</span><span class=\"token punctuation\">.</span>Delete<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n<span class=\"token variable\">$zip</span><span class=\"token punctuation\">.</span>Dispose<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre> <p>So there we go, a little bit of hope after the disappointment!😀</p> <h2 id=\"summary\" class=\"heading-with-anchor\"><a href=\"#summary\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Summary</a></h2> <p>In this post I described how artifact attestation works and why provenance is an important part of securing the software supply chain. In particular I describe the approach to attestation provided by GitHub with their publicly available artifact attestations. Finally I show how you can use the GitHub action in your own flows, using an example of a repo that produces a NuGet package, to generate the build provenance for the package. Finally, I described how nuget.org modifies the packages during upload, rendering the provenance attestation invalid for the files present on nuget.org.</p> ",
    "sanitized": "In this post I discuss software provenance, what attestations say about your software, and how they work. I then show you can use GitHub actions to easily create a signed attestation when creating a NuGet package in GitHub Actions. The same process applies for applications too, but in this post I focus on creating an attestation for a single library. Make sure you read to the end though, as there's a n unfortunate conclusion to the story What is software provenance? Software provenance is about providing verifiable information and integrity guarantees about a software artifact, describing where, when, and how it was produced. It is one part of the overall software software-chain that goes into creating secure software that can be proven to have not been tampered with. Supply-chain Levels for Software Artifacts (SLSA) is a security framework that systematically looks at the various points your software could be compromised, and provides suggested guidelines, controls, and checks, for mitigating these threats.    Threats to the software supply chain. From SLSA Enabling provenance for your artifacts helps protect you and your customers from several of these attacks. A provenance attestation provides a common format for describing how your artifact was built, the environment it was built in, the build definition that produced it, the build run that produced it, and more. The attestation is typically a JSON document, which is signed and stored \"publicly\" (or internally for internal software). When someone consumes the artifact, they can check the artifact's attestation, which provides all the details as to where the artifact was created. By itself, providing provenance and attestations doesn't automatically enhance the security; for that you must verify the attestations of software you consume or which you deploy. For example, if you're deploying to Kubernetes you could create a policy that enforces that all Docker images deployed to the cluster have attestations. As GitHub say in their announcement post:  “It's important to note that provenance by itself doesn’t make your artifact or your build process secure. What it does do is create a tamper-proof guarantee that the thing you’re executing is definitely the thing that you built, which can stop many attack vectors. It's still vital to maintain strong application security processes like requiring code review for all patches, and applying dependency updates in a timely manner.”  Now that we know why we need provenance, and what attestations are useful for in general, we'll move on to see how they're generated in a specific scenario, in GitHub Actions. How does GitHub generate attestations? In May 2024, Github introduced a public beta of artifact attestations, and they became generally available in June 2024. The GitHub model is designed to be simple to use and avoid long-lived credentials. Their model uses a GitHub managed workflow and client to handle the complexity.    The Github attestation method. From Introducing Artifact Attestations–now in public beta The process starts when you execute GitHub's actions/attest-build-provenance action. This invokes GitHub's Sigstore client, which requests the GitHub Actions OIDC token, which is unique for each job. The Sigstore client then creates a public-private key-pair, and sends the public part of the pair to the Fulcio certificate authority, along with the OIDC token. On receiving the OIDC token and the public part of the key pair, Flucio creates a new short-lived X.509 certificate, associated with the OIDC token, and returns it back to the Sigstore client. The Sigstore client then: Calculates the SHA-256 digest of the artifact for which provenance is being attested. Writes the provenance statement as an in-toto JSON blob, including additional data (termed a predicate) from the OIDC token. The provenance statement is signed using the private part of the key value pair. The private part of the key value pair is now thrown away, and can not be recovered. The statement is counter-signed by a Time Stamp Authority (TSA) that proves the signing process completed in the required 10-minutes (the Fulcio certificate's validity) All the data is pushed as a Sigstore bundle, persisted to GitHub’s attestation store and to the Sigstore Public Good Instance (for public repos) And with that, the attestation is complete. In the next section, I'll show how you can easily create attestations for your own projects. Create an attestation for a NuGet package in GitHub Actions In this section I show how to create an attestation for a NuGet package created in a GitHub action. To provide some context, this is the (simplified) workflow that we start from. It simply installs .NET, builds and packs the solution, and then pushes the NuGet packages to nuget.org. name: BuildAndPack\n\non:\n  push:\n    branches: [\"main\" ]\n    tags: ['*']\n  pull_request:\n    branches: ['*']\n\njobs:\n  build-and-test:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2\n      - uses: actions/setup-dotnet@67a3573c9a986a3f9c594539f4ab511d57bb3ce9 # v4.3.1\n        with:\n          dotnet-version: |\n            9.0.x\n            8.0.x\n            6.0.x\n            3.1.x\n\n      - name: Build and pack\n        run: dotnet pack -c Release\n\n      - name: Push to NuGet\n        run: dotnet nuget push artifacts/packages/*.nupkg\n        env:\n          NuGetToken: ${{ secrets.NUGET_TOKEN }}\n\n      - uses: actions/upload-artifact@4cec3d8aa04e39d1a68397de0c4cd6fb9dce8ec1 # v4.6.1\n        with:\n          name: packages\n          path: artifacts/packages\n A real build would have additional steps like a test stage, but this is good enough as an example—it shows the NuGet packages being published to the artifacts/packages folder, and pushed to NuGet.  Note that we're pinning to a specific commit hash for each action. This is important to avoid supply-chain attacks, such as the recent attack on the tj-actions/changed-files action.  We're now going to add an attestation to this. The simplest way to do this is simply add an additional step to the workflow: - name: Generate artifact attestation\n  uses: actions/attest-build-provenance@c074443f1aee8d4aeeae555aebba3282517141b2 # v2.2.3\n  with:\n    subject-path: 'artifacts/packages/*.nupkg'\n You'll also need to make sure the workflow has sufficient permissions to create the OIDC token and attestations: permissions:\n  id-token: write\n  contents: read\n  attestations: write\n Putting that together, name: BuildAndPack\n\non:\n  push:\n    branches: [\"main\" ]\n    tags: ['*']\n  pull_request:\n    branches: ['*']\n\njobs:\n  build-and-test:\n    runs-on: ubuntu-latest\n    # 👇 Add the permissions here\n    permissions:\n      id-token: write\n      contents: read\n      attestations: write\n    steps:\n      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2\n      - uses: actions/setup-dotnet@67a3573c9a986a3f9c594539f4ab511d57bb3ce9 # v4.3.1\n        with:\n          dotnet-version: |\n            9.0.x\n            8.0.x\n            6.0.x\n            3.1.x\n\n      - name: Build and publish\n        run: dotnet publish -c Release\n\n      - name: Build and publish\n        run: dotnet nuget push artifacts/packages/*.nupkg\n        env:\n          NuGetToken: ${{ secrets.NUGET_TOKEN }}\n\n        # 👇 Generate the attestation\n      - name: Generate artifact attestation\n        uses: actions/attest-build-provenance@c074443f1aee8d4aeeae555aebba3282517141b2 # v2.2.3\n        with:\n          subject-path: 'artifacts/packages/*.nupkg'\n\n      - uses: actions/upload-artifact@4cec3d8aa04e39d1a68397de0c4cd6fb9dce8ec1 # v4.6.1\n        with:\n          name: packages\n          path: artifacts/packages\n And that's all you need to do—GitHub does the rest! The job summary includes a link to the public GitHub attestation where you can view and download the attestation directly if you wish:  Note that the method above achieves SLSA v1.0 Build Level 2. After verifying the provenance of an artifact you still need to follow the links and evaluate the build instructions used to create the artifact. The next level up, SLSA v1.0 Build Level 3, requires defining the build instructions outside of your repository, in a reusable workflow that is shared across all your organisation's repositories, for example. Requiring that builds make use of known, vetted build instructions provides that additional protection required for level 3. You can read more about how to achieve Build Level 3 using GitHub here, or consider the generators provided by the SLSA project. Verifying an attestation via the Github CLI As already discussed, the act of creating an attestation doesn't improve security on its own. It's only beneficial if you verify that the artifacts you're using and deploying have valid attestations. If you're deploying images to Kubernetes, you might want to consider using an admission controller to enforce provenance. If you're not deploying in this way, you might need to do manual verification. There are several ways to do this, for example you can follow these instructions to do offline verification. The easiest way to verify the attestation is to use the GitHub CLI using a command like the following: gh attestation verify <path/to/artifact/to/verify> -R <org/repo>\n So for example, to verify an attestation for the repo andrewlock/NetEscapades.AspNetCore.SecurityHeaders, you might use a command like the following, which provides the following output: > gh attestation verify --repo andrewlock/NetEscapades.AspNetCore.SecurityHeaders \"./NetEscapades.AspNetCore.SecurityHeaders.1.0.0-preview.3.nupkg\"\nLoaded digest sha256:dd57dea438848532551aac6ba585d27b91e198fbc567ae576362212c5f9581e1 for file://C:\\NetEscapades.AspNetCore.SecurityHeaders.1.0.0-preview.3.nupkg\n✓ Verification succeeded!\n\nsha256:dd57dea438848532551aac6ba585d27b91e198fbc567ae576362212c5f9581e1 was attested by:\nREPO                                                PREDICATE_TYPE                  WORKFLOW                                              \nandrewlock/NetEscapades.AspNetCore.SecurityHeaders  https://slsa.dev/provenance/v1  .github/workflows/BuildAndPack.yml@refs/pull/225/merge\n As long as a provenance exists for the artifact, then verification will succeed, and you can be sure that the artifact was generated using the linked workflow. If verification fails, then you can't be sure where or how the artifact was created. And now for the bad news… After going through all this, one thing I haven't been able to figure out is how to efficiently verify the provenance of NuGet packages as part of a .NET build. My gut feeling is that it's simply not feasible right now. There's an issue on the NuGet repo which seems to be suggesting providing support for this sort of thing, but there doesn't look to be any progress, so I wouldn't hold your breath. In the meantime, if it's the sort of thing you really care about, you're likely stuck with manual verification approaches. But that's where things really fall apart. Unfortunately, the NuGet package you upload using dotnet nuget push is not the same package as the one that you download from http://nuget.org. NuGet modify the package when they receive it (to add a signature file, ironically), so the package available on nuget.org has a different SHA value to the artifact created in GitHub. That means the attestation generated for the build is effectively useless, as it does not apply to the package that you actually download from NuGet!  I was really hoping I was wrong about that and I had messed something up, but it seems to be by design based on this issue, and from empiricial testing. For example, this is the GitHub workflow in which I created and uploaded version 1.0.0-preview.4 of NetEscapades.AspNetCore.SecurityHeaders to NuGet. And yet, if you compare the packages stored in that artifact run with the packages you can download from NuGet then their clearly different files.  Given all that, it really seems like you can only treat the GitHub attestations as an academic exercise for NuGet packages for now. The signature file that nuget.org embeds in the NuGet package attempts to perform a similar role, and is explicitly supported by NuGet clients, so that's probably not a big deal.  It seems to me (definitely not a security expert) that there's an additional potential avenue for attack with the signature file. If you could perform an attacker-in-the-middle attack on the upload to nuget.org, then you could replace the contents of the package with malicious content, and nuget.org would happily sign it I believe. This is obviously a niche, mitigated issue, given HTTPS and Microsoft's security scanning, but seems possible.  Overall, the conclusion to this journey was disappointing. I think it might be feasible to perform an attestation of the content of the NuGet package prior to upload, as described in this comment, as that is unaffected by the nuget.org signing process. But retrieving that \"content hash\" from a NuGet package isn't necessarily simple for clients to do, which makes verifying any attestations similarly difficult. For now, I'm just going to declare that provenance attestations are basically not possible for NuGet packages 😢. Update: the redemption arc After a bit of experimentation, and after reading through this issue in more detail, I established that you can essentially \"revert\" the modification nuget.org makes using the Linux zip utility, something like this: # Delete the .signature.p7s file that nuget.org adds to the package\nzip -d NetEscapades.AspNetCore.SecurityHeaders.1.0.0-preview.4.nupkg .signature.p7s\n\n# Run attestation verification for the package\ngh attestation verify --owner andrewlock \"C:\\Users\\sock\\Downloads\\NetEscapades.AspNetCore.SecurityHeaders.1.0.0-preview.4.nupkg\"\n As it turns out, the zip utility essentially directly inverts the modification NuGet makes, deleting the .signature.p7s file, and thereby restoring the SHA for the package to the version prior to upload. And that means that the attestations are once again valid: Loaded digest sha256:bf809ff0ed6a8a31131df4391b169e35ded44d4dfd97cc797123441683a95c9f for file://./NetEscapades.AspNetCore.SecurityHeaders.1.0.0-preview.4.nupkg\nLoaded 2 attestations from GitHub API\n\nThe following policy criteria will be enforced:\n- Predicate type must match:................ https://slsa.dev/provenance/v1\n- Source Repository Owner URI must match:... https://github.com/andrewlock\n- Subject Alternative Name must match regex: (?i)^https://github.com/andrewlock/\n- OIDC Issuer must match:................... https://token.actions.githubusercontent.com\n\n✓ Verification succeeded!\n\nThe following 1 attestation matched the policy criteria\n\n- Attestation #1\n  - Build repo:..... andrewlock/NetEscapades.AspNetCore.SecurityHeaders\n  - Build workflow:. .github/workflows/BuildAndPack.yml@refs/tags/v1.0.0-preview.4\n  - Signer repo:.... andrewlock/NetEscapades.AspNetCore.SecurityHeaders\n If you're not on Linux, you can achieve a similar reversion using .NET, or using a PowerShell script that invokes .NET, something like the following: # The file to update\n$zipfile =  \"C:\\Users\\sock\\Downloads\\NetEscapades.AspNetCore.SecurityHeaders.1.0.0-preview.4.nupkg\"\n\n# Load the System.IO.Compression Compression library\n[Reflection.Assembly]::LoadWithPartialName('System.IO.Compression')\n\n# Load the ZipArchive\n$stream = New-Object IO.FileStream($zipfile, [IO.FileMode]::Open)\n$zip    = New-Object IO.Compression.ZipArchive($stream, [IO.Compression.ZipArchiveMode]::Update)\n\n# Delete the signature file and cleanup\n$zip.Entries | ? { $_.Name -eq \".signature.p7s\" } | % { $_.Delete() }\n$zip.Dispose();\n So there we go, a little bit of hope after the disappointment!😀 Summary In this post I described how artifact attestation works and why provenance is an important part of securing the software supply chain. In particular I describe the approach to attestation provided by GitHub with their publicly available artifact attestations. Finally I show how you can use the GitHub action in your own flows, using an example of a repo that produces a NuGet package, to generate the build provenance for the package. Finally, I described how nuget.org modifies the packages during upload, rendering the provenance attestation invalid for the files present on nuget.org."
  },
  {
    "itemId": "https://andrewlock.net/running-an-aspnetcore-app-behind-iis-in-a-windows-container/",
    "raw": "<img src=\"https://andrewlock.net/content/images/2025/iis_logo.png\" /><p>In this post I first discuss the differences between Linux and Windows containers, and then describe how to run an ASP.NET Core app inside IIS, inside of a Windows container. I show how to install the AspNetCoreModule for running ASP.NET Core in IIS, how to use APPCMD and the PowerShell snippets to create app pools and websites, and how to use <em>ServiceMonitor.exe</em> to watch an app pool. Finally, I describe how I resolved a couple of issues I ran into running an ASP.NET Core app in IIS in a container.</p> <h2 id=\"running-apps-in-containers\" class=\"heading-with-anchor\"><a href=\"#running-apps-in-containers\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Running apps in containers</a></h2> <p>I'm a big fan of using containers to build and package applications. You can use containers to somewhat declaratively define your application's dependencies, and how to build it, and then when you run your application you know you will get the same behaviour wherever you run it. As long as the host has docker (or a comparable container runtime) then you can build and run your application.</p> <blockquote> <p>Pretty much, anyway. Once you have built your application it's set in stone, but you're still vulnerable when you <em>build</em> your image to things like <a href=\"https://devblogs.microsoft.com/dotnet/critical-dotnet-install-links-are-changing/\">download links disappearing</a> and dependencies no longer being available. But at least those dependencies are generally <em>explicit</em> in your dockerfile.</p> </blockquote> <p>Of course, when people say \"containers\", they're normally talking about <em>Linux</em> containers. Linux containers really give the best experience for both building and running ASP.NET Core applications, but there also <a href=\"https://learn.microsoft.com/en-us/virtualization/windowscontainers/\"><em>Windows</em> containers</a>.</p> <p>Windows containers are <em>conceptually</em> similar Linux containers; they allow a similar \"mini-VM\" experience, in which the container is isolated from the host but the operating-system kernel is re-used. In <em>practical</em> terms though, they feel very differnt.</p> <ul><li>You can run virtually any Linux container that supports your process architecture (generally x64 or arm64) on any host. Windows, Linux, and macOS can all run Linux containers. However the base image of Windows containers must match the host. So you can only run Windows Server 2022 containers on a Windows Server 2022 machine, not a 2019 machine (for example).</li> <li>Windows images are <em>much</em> bigger than their Linux counterparts. We're talking 10-1000×—instead of a few MB for alpine you're looking at a few <em>GB</em> for a Windows Server Core image.</li> <li>Predominantly due to the sheer size, Windows containers feel a lot slower to work with than Linux containers in general.</li> <li>Some of the authoring experiences in Windows dockerfiles feels cumbersome compared to writing Linux dockerfiles.</li></ul> <p>So, given all that, why would you choose Windows containers? To my mind, the main answer is generally \"because you have to\". Windows containers still have the advantage of defining an isolated environment compared to running on a host directly. And in some cases you <em>need</em> to run on Windows.</p> <p>Maybe you have an app that explicitly relies on Windows-only APIs to run. Perhaps you're deploying an ASP.NET (non-core) app and need to run it in IIS. Or maybe you <em>are</em> running an ASP.NET Core app, but you need to run it on Windows, or even inside IIS.</p> <h2 id=\"running-an-asp-net-core-application-inside-iis-in-windows-containers\" class=\"heading-with-anchor\"><a href=\"#running-an-asp-net-core-application-inside-iis-in-windows-containers\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Running an ASP.NET Core application, inside IIS, in windows containers</a></h2> <p>In this section, I describe a dockerfile that builds an ASP.NET Core application, and then hosts it in a windows dockerfile, running in-process in IIS. The example I use is a simple .NET 9 ASP.NET Core app. The details aren't important, I'm more interested in how to prepare the image itself.</p> <p>The image below is a multi-stage build. In the first stage we create and publish our .NET web app. In the second stage we do all of the following:</p> <ul><li>Use an IIS/ASP.NET base image</li> <li>Switch to using PowerShell for scripting instead of cmd (optional)</li> <li>Download and install the 9.0 ASP.NET Core hosting bundle (for IIS integration)</li> <li>Copiy the build assets</li> <li>Create a new app pool and app site to host the ASP.NET Core app</li></ul> <pre class=\"language-dockerfile\"><code class=\"language-dockerfile\"><span class=\"token comment\"># Build the ASP.NET Core app using the latest SDK</span>\n<span class=\"token instruction\"><span class=\"token keyword\">FROM</span> mcr.microsoft.com/dotnet/sdk:9.0-windowsservercore-ltsc2022 <span class=\"token keyword\">AS</span> builder</span>\n\n<span class=\"token comment\"># Build the test app</span>\n<span class=\"token instruction\"><span class=\"token keyword\">WORKDIR</span> /src</span>\n<span class=\"token instruction\"><span class=\"token keyword\">RUN</span> dotnet new web --name AspNetCoreTest --output .</span>\n<span class=\"token instruction\"><span class=\"token keyword\">RUN</span> dotnet publish <span class=\"token string\">\"AspNetCoreTest.csproj\"</span> -c Release -o /src/publish</span>\n\n<span class=\"token comment\"># There are other runtime images you could use - this image includes IIS and ASP.NET </span>\n<span class=\"token comment\"># If you don't need aspnet or .NET Framework (we don't in this example), you can</span>\n<span class=\"token comment\"># probably use mcr.microsoft.com/windows/servercore/iis:windowsservercore-ltsc2022</span>\n<span class=\"token instruction\"><span class=\"token keyword\">FROM</span> mcr.microsoft.com/dotnet/framework/aspnet:4.8-windowsservercore-ltsc2022 <span class=\"token keyword\">AS</span> publish</span>\n<span class=\"token instruction\"><span class=\"token keyword\">SHELL</span> [<span class=\"token string\">\"powershell\"</span>, <span class=\"token string\">\"-Command\"</span>, <span class=\"token string\">\"$ErrorActionPreference = 'Stop'; $ProgressPreference = 'SilentlyContinue';\"</span>]</span>\n\n<span class=\"token instruction\"><span class=\"token keyword\">WORKDIR</span> /app</span>\n\n<span class=\"token comment\"># Install the hosting bundle</span>\n<span class=\"token instruction\"><span class=\"token keyword\">RUN</span>  <span class=\"token variable\">$url</span>=<span class=\"token string\">'https://builds.dotnet.microsoft.com/dotnet/aspnetcore/Runtime/9.0.0/dotnet-hosting-9.0.0-win.exe'</span>; <span class=\"token operator\">\\</span>\n    echo <span class=\"token string\">\"Fetching \"</span> + <span class=\"token variable\">$url</span>; <span class=\"token operator\">\\</span>\n    Invoke-WebRequest <span class=\"token variable\">$url</span> -OutFile c:/hosting.exe; <span class=\"token operator\">\\</span>\n    Start-Process -Wait -PassThru -FilePath <span class=\"token string\">\"c:/hosting.exe\"</span> -ArgumentList @(<span class=\"token string\">'/install'</span>, <span class=\"token string\">'/q'</span>, <span class=\"token string\">'/norestart'</span>); <span class=\"token operator\">\\</span>\n    rm c:/hosting.exe;</span>\n\n<span class=\"token comment\"># Copy the app across</span>\n<span class=\"token instruction\"><span class=\"token keyword\">COPY</span> <span class=\"token options\"><span class=\"token property\">--from</span><span class=\"token punctuation\">=</span><span class=\"token string\">builder</span></span> /src/publish /app/.</span>\n\n<span class=\"token comment\"># Create new website we control, and a new app pool set to \"No Managed Code\"</span>\n<span class=\"token instruction\"><span class=\"token keyword\">RUN</span> Remove-WebSite -Name <span class=\"token string\">'Default Web Site'</span>; <span class=\"token operator\">\\</span>\n    c:\\Windows\\System32\\inetsrv\\appcmd add apppool /name:AspNetCorePool /managedRuntimeVersion:<span class=\"token string\">\"\"</span>; <span class=\"token operator\">\\</span>\n    New-Website -Name <span class=\"token string\">'SmokeTest'</span> -Port 5000 -PhysicalPath <span class=\"token string\">'c:\\app'</span> -ApplicationPool <span class=\"token string\">'AspNetCorePool'</span>;</span>\n\n<span class=\"token instruction\"><span class=\"token keyword\">ENTRYPOINT</span> [<span class=\"token string\">\"C:\\\\ServiceMonitor.exe\"</span>, <span class=\"token string\">\"w3svc\"</span>, <span class=\"token string\">\"AspNetCorePool\"</span>]</span>\n</code></pre> <p>The first interesting point in the above file is that we need to download and install the ASP.NET Core hosting bundle. This includes the ASP.NET Core runtime, but also the ASP.NET Core Module (ANCM) for IIS. The ANCM module provides integration between IIS and an ASP.NET Core app and is required to run ASP.NET Core apps in IIS.</p> <p>The second interesting point is using the IIS Administration tools to manage websites and app pools. The example above uses two different approaches (mostly for effect, not due to necessity): <a href=\"https://learn.microsoft.com/en-us/iis/get-started/getting-started-with-iis/getting-started-with-appcmdexe\">appcmd.exe</a> and <a href=\"https://learn.microsoft.com/en-us/iis/get-started/whats-new-in-iis-10/iisadministration-powershell-cmdlets\">IISAdministration PowerShell Cmdlets</a>.</p> <blockquote> <p>Note that the PowerShell Cmdlets were introduced in IIS 10.0, which shipped with Windows Server 2016.</p> </blockquote> <p>Finally, you can see that we have defined an entrypoint that invokes <code>ServiceMonitor.exe</code>. This overrides the entrypoint <a href=\"https://github.com/microsoft/dotnet-framework-docker/blob/main/src/aspnet/4.8/windowsservercore-ltsc2022/Dockerfile#L36\">that is defined in the base <code>aspnet</code> image</a>, which similarly invokes <code>ServiceMonitor.exe</code>. <code>ServiceMonitor.exe</code> is a Windows executable designed to be used as the entrypoint process when running IIS inside a Windows Server container. It's available by default in the base images.</p> <p>As described in <a href=\"https://github.com/microsoft/IIS.ServiceMonitor\">the project's README</a>:</p> <blockquote> <p>ServiceMonitor monitors the status of the w3svc service and will exit when the service state changes from <code>SERVICE_RUNNING</code> to either one of <code>SERVICE_STOPPED</code>, <code>SERVICE_STOP_PENDING</code>, <code>SERVICE_PAUSED</code> or <code>SERVICE_PAUSE_PENDING</code>.</p> <p>Additionally, ServiceMonitor will promote environment variables from process environment it's own process environment block to the DefaultAppPool. We achieve this by naively copying all variables in our process environment block except for those Environment variable / value pairs present in this list below.</p> </blockquote> <p>We override the entrypoint in this case to add the <code>AspNetCorePool</code> argument, so that the entrypoint monitors our new app pool, instead of the default pool.</p> <p>We can build and run the app using something like the following:</p> <pre class=\"language-bash\"><code class=\"language-bash\">dotnet build <span class=\"token parameter variable\">-t</span> aspnetcore-iis-image\ndotnet run <span class=\"token parameter variable\">-p</span> <span class=\"token number\">5000</span>:5000 aspnetcore-iis-image\n</code></pre> <p><code>ServiceMonitor.exe</code> watches the status of the <code>AspNetCorePool</code> app pool, and keeps the container running as long as that pool is running. If the pool shuts down, then the container also exits.</p> <h2 id=\"controlling-app-pool-startup-in-the-container\" class=\"heading-with-anchor\"><a href=\"#controlling-app-pool-startup-in-the-container\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Controlling app pool startup in the container</a></h2> <p>I was working on a \"smoke\" test recently that uses a similar setup to that described above. The test app in question starts a background worker that makes a request to itself, and then shuts down the application. The intention in this case is that no <em>external</em> requests are required. However, this proved somewhat problematic to implement when hosting in IIS.</p> <p>I specifically wanted the following behaviour:</p> <ul><li>When the container starts, the app pool is not yet started.</li> <li>The app pool is then started and a worker process is created.</li> <li>The ASP.NET Core application runs, sends a request to itself, and then exits.</li> <li>The container exits.</li></ul> <p>Unfortunately, I struggled to convince IIS (and <em>ServiceMonitor.exe</em>) to do what I wanted.</p> <p>The major problem I ran into is how IIS manages app pools. There are various properties that control how and when an app pool starts. There are also properties to control when a worker process is spun up to handle a request. Among these knobs are:</p> <ul><li><em>Start application pool immediately</em> (AKA <code>/autoStart</code>) <ul><li><code>Enabled</code>/<code>true</code>: IIS will automatically start the application pool.</li> <li><code>Disabled</code>/<code>false</code>: You need to automatically start the application pool.</li></ul> </li> <li><em>Worker process start mode</em> (AKA <code>/startMode</code>) <ul><li><code>AlwaysRunning</code>: If the application pool is running, immediately start up the worker process.</li> <li><code>OnDemand</code>: If the application pool is running, start the <em>w3wp.exe</em> process when there is an inbound application request.</li></ul> </li> <li><em>Preload the app pool</em>: (AKA <code>applicationDefaults.preloadEnabled</code>) <ul><li><code>True</code>: IIS simulates a user request to the default page of an application or virtual directory so that it is initialized. The application pool's <code>startMode</code> setting must be set to <code>AlwaysRunning</code>.</li> <li><code>False</code>: The app pool is initialized when the first request is received.</li></ul> </li></ul> <p>So, <em>in theory</em> I thought I could do the following</p> <ul><li>Create an app pool with <code>/autoStart=\"false\"</code> and <code>/startMode=\"AlwaysRunning\"</code></li> <li>Create a site with <code>applicationDefaults.preloadEnabled=\"true\"</code></li> <li>Run <em>ServiceMonitor.exe</em> to monitor the app pool. This would serve two purposes <ul><li>Promote the ambient environment variables</li> <li>Exit when the app pool shuts down</li></ul> </li></ul> <p>Unfortunately this doesn't work as I had hoped. As far as I could tell, the ASP.NET Core app wasn't starting up and then the app pool wasn't exiting when the app exits. I'm not entirely sure what's going on here, but I subsequently discovered there's also the <code>applicationinitialization.doAppInitAfterRestart</code> element and I realised I just didn't have the patience to fight with IIS any more 😅</p> <p>In the end I opted for creating an entrypoint script that manually makes an http request to the app, explicitly stops the app pool, and then exits. It wasn't as smooth as I'm sure it <em>could</em> be, but at least it <em>worked</em>:</p> <pre class=\"language-dockerfile\"><code class=\"language-dockerfile\"><span class=\"token comment\"># We override the normal service monitor entrypoint, because we want the container to shut down after the request is sent</span>\n<span class=\"token comment\"># - Run ServiceMonitor.exe to copy the env vars to the app pool</span>\n<span class=\"token comment\"># - Explicitly start the app pool</span>\n<span class=\"token comment\"># - Make a request (doesn't have to hit a \"real\" endpoint)</span>\n<span class=\"token comment\"># - Stop the app pool (this should happen automatically, but just to be safe)</span>\n<span class=\"token comment\"># - Exit</span>\n<span class=\"token instruction\"><span class=\"token keyword\">RUN</span> echo <span class=\"token string\">'Write-Host \\\"Running servicemonitor to copy environment variables\\\"; Start-Process -NoNewWindow -PassThru -FilePath \\\"c:/ServiceMonitor.exe\\\" -ArgumentList @(\\\"w3svc\\\", \\\"AspNetCorePool\\\");'</span> &gt; C:\\app\\entrypoint.ps1; <span class=\"token operator\">\\</span>\n    echo <span class=\"token string\">'Write-Host \\\"Starting AspNetCorePool app pool\\\"; Start-WebAppPool -Name \\\"AspNetCorePool\\\" -PassThru;'</span> &gt;&gt; C:\\app\\entrypoint.ps1; <span class=\"token operator\">\\</span>\n    echo <span class=\"token string\">'Write-Host \\\"Making 404 request\\\"; curl http://localhost:5000;'</span> &gt;&gt; C:\\app\\entrypoint.ps1; <span class=\"token operator\">\\</span>\n    echo <span class=\"token string\">'Write-Host \\\"Stopping pool\\\";Stop-WebAppPool \\\"AspNetCorePool\\\" -PassThru;'</span> &gt;&gt; C:\\app\\entrypoint.ps1;  <span class=\"token operator\">\\</span>\n    echo <span class=\"token string\">'Write-Host \\\"Shutting down\\\"'</span> &gt;&gt; C:\\app\\entrypoint.ps1;</span>\n\n<span class=\"token comment\"># Set the script as the entrypoint</span>\n<span class=\"token instruction\"><span class=\"token keyword\">ENTRYPOINT</span> [<span class=\"token string\">\"powershell\"</span>, <span class=\"token string\">\"-File\"</span>, <span class=\"token string\">\"C:\\\\app\\\\entrypoint.ps1\"</span>]</span>\n</code></pre> <p>And with that, I achieved what I wanted—an ASP.NET Core app, running in IIS, in a Windows container, which starts up and exits. There was one final strange hiccup I ran into though, which I'll cover in the final section.</p> <h2 id=\"troubleshooting-appcmd-failed-with-error-code-183\" class=\"heading-with-anchor\"><a href=\"#troubleshooting-appcmd-failed-with-error-code-183\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Troubleshooting \"APPCMD failed with error code 183\"</a></h2> <p>While initially working with <em>ServiceMonitor.exe</em>, I kept running into this error:</p> <pre><code>Service 'w3svc' has been stopped\n\nAPPCMD failed with error code 183\n\nFailed to update IIS configuration\n</code></pre> <p>Error code 183 is \"Cannot create file when that file already exists\". Err…OK.</p> <p>Well, it turns out you get this error if you an environment variable explicitly set in the <code>&lt;environmentVariables&gt;</code> section and then <em>also</em> set in the docker environment. <em>ServiceMonitor.exe</em> naively tries to \"promote\" the ambient environment variables by calling \"add variable\". And if there's <em>already</em> a variable in the app pool, it throws the above exception. The only solution is to not double up—remove the environment variable either from the app pool or from the dockerfile.</p> <h2 id=\"summary\" class=\"heading-with-anchor\"><a href=\"#summary\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Summary</a></h2> <p>In this post I described how I ran an ASP.NET Core app inside IIS, inside of a Windows container. I showed how to install the AspNetCoreModule for running ASP.NET Core in IIS, how to use APPCMD and the PowerShell snippets to create app pools and websites, and how to use <em>ServiceMonitor.exe</em> to watch an app pool. I then described a specific scenario I was trying to reproduce, as well as how to solve an error I ran into.</p> ",
    "sanitized": "In this post I first discuss the differences between Linux and Windows containers, and then describe how to run an ASP.NET Core app inside IIS, inside of a Windows container. I show how to install the AspNetCoreModule for running ASP.NET Core in IIS, how to use APPCMD and the PowerShell snippets to create app pools and websites, and how to use ServiceMonitor.exe to watch an app pool. Finally, I describe how I resolved a couple of issues I ran into running an ASP.NET Core app in IIS in a container. Running apps in containers I'm a big fan of using containers to build and package applications. You can use containers to somewhat declaratively define your application's dependencies, and how to build it, and then when you run your application you know you will get the same behaviour wherever you run it. As long as the host has docker (or a comparable container runtime) then you can build and run your application.  Pretty much, anyway. Once you have built your application it's set in stone, but you're still vulnerable when you build your image to things like download links disappearing and dependencies no longer being available. But at least those dependencies are generally explicit in your dockerfile.  Of course, when people say \"containers\", they're normally talking about Linux containers. Linux containers really give the best experience for both building and running ASP.NET Core applications, but there also Windows containers. Windows containers are conceptually similar Linux containers; they allow a similar \"mini-VM\" experience, in which the container is isolated from the host but the operating-system kernel is re-used. In practical terms though, they feel very differnt. You can run virtually any Linux container that supports your process architecture (generally x64 or arm64) on any host. Windows, Linux, and macOS can all run Linux containers. However the base image of Windows containers must match the host. So you can only run Windows Server 2022 containers on a Windows Server 2022 machine, not a 2019 machine (for example). Windows images are much bigger than their Linux counterparts. We're talking 10-1000×—instead of a few MB for alpine you're looking at a few GB for a Windows Server Core image. Predominantly due to the sheer size, Windows containers feel a lot slower to work with than Linux containers in general. Some of the authoring experiences in Windows dockerfiles feels cumbersome compared to writing Linux dockerfiles. So, given all that, why would you choose Windows containers? To my mind, the main answer is generally \"because you have to\". Windows containers still have the advantage of defining an isolated environment compared to running on a host directly. And in some cases you need to run on Windows. Maybe you have an app that explicitly relies on Windows-only APIs to run. Perhaps you're deploying an ASP.NET (non-core) app and need to run it in IIS. Or maybe you are running an ASP.NET Core app, but you need to run it on Windows, or even inside IIS. Running an ASP.NET Core application, inside IIS, in windows containers In this section, I describe a dockerfile that builds an ASP.NET Core application, and then hosts it in a windows dockerfile, running in-process in IIS. The example I use is a simple .NET 9 ASP.NET Core app. The details aren't important, I'm more interested in how to prepare the image itself. The image below is a multi-stage build. In the first stage we create and publish our .NET web app. In the second stage we do all of the following: Use an IIS/ASP.NET base image Switch to using PowerShell for scripting instead of cmd (optional) Download and install the 9.0 ASP.NET Core hosting bundle (for IIS integration) Copiy the build assets Create a new app pool and app site to host the ASP.NET Core app # Build the ASP.NET Core app using the latest SDK\nFROM mcr.microsoft.com/dotnet/sdk:9.0-windowsservercore-ltsc2022 AS builder\n\n# Build the test app\nWORKDIR /src\nRUN dotnet new web --name AspNetCoreTest --output .\nRUN dotnet publish \"AspNetCoreTest.csproj\" -c Release -o /src/publish\n\n# There are other runtime images you could use - this image includes IIS and ASP.NET \n# If you don't need aspnet or .NET Framework (we don't in this example), you can\n# probably use mcr.microsoft.com/windows/servercore/iis:windowsservercore-ltsc2022\nFROM mcr.microsoft.com/dotnet/framework/aspnet:4.8-windowsservercore-ltsc2022 AS publish\nSHELL [\"powershell\", \"-Command\", \"$ErrorActionPreference = 'Stop'; $ProgressPreference = 'SilentlyContinue';\"]\n\nWORKDIR /app\n\n# Install the hosting bundle\nRUN  $url='https://builds.dotnet.microsoft.com/dotnet/aspnetcore/Runtime/9.0.0/dotnet-hosting-9.0.0-win.exe'; \\\n    echo \"Fetching \" + $url; \\\n    Invoke-WebRequest $url -OutFile c:/hosting.exe; \\\n    Start-Process -Wait -PassThru -FilePath \"c:/hosting.exe\" -ArgumentList @('/install', '/q', '/norestart'); \\\n    rm c:/hosting.exe;\n\n# Copy the app across\nCOPY --from=builder /src/publish /app/.\n\n# Create new website we control, and a new app pool set to \"No Managed Code\"\nRUN Remove-WebSite -Name 'Default Web Site'; \\\n    c:\\Windows\\System32\\inetsrv\\appcmd add apppool /name:AspNetCorePool /managedRuntimeVersion:\"\"; \\\n    New-Website -Name 'SmokeTest' -Port 5000 -PhysicalPath 'c:\\app' -ApplicationPool 'AspNetCorePool';\n\nENTRYPOINT [\"C:\\\\ServiceMonitor.exe\", \"w3svc\", \"AspNetCorePool\"]\n The first interesting point in the above file is that we need to download and install the ASP.NET Core hosting bundle. This includes the ASP.NET Core runtime, but also the ASP.NET Core Module (ANCM) for IIS. The ANCM module provides integration between IIS and an ASP.NET Core app and is required to run ASP.NET Core apps in IIS. The second interesting point is using the IIS Administration tools to manage websites and app pools. The example above uses two different approaches (mostly for effect, not due to necessity): appcmd.exe and IISAdministration PowerShell Cmdlets.  Note that the PowerShell Cmdlets were introduced in IIS 10.0, which shipped with Windows Server 2016.  Finally, you can see that we have defined an entrypoint that invokes ServiceMonitor.exe. This overrides the entrypoint that is defined in the base aspnet image, which similarly invokes ServiceMonitor.exe. ServiceMonitor.exe is a Windows executable designed to be used as the entrypoint process when running IIS inside a Windows Server container. It's available by default in the base images. As described in the project's README:  ServiceMonitor monitors the status of the w3svc service and will exit when the service state changes from SERVICE_RUNNING to either one of SERVICE_STOPPED, SERVICE_STOP_PENDING, SERVICE_PAUSED or SERVICE_PAUSE_PENDING. Additionally, ServiceMonitor will promote environment variables from process environment it's own process environment block to the DefaultAppPool. We achieve this by naively copying all variables in our process environment block except for those Environment variable / value pairs present in this list below.  We override the entrypoint in this case to add the AspNetCorePool argument, so that the entrypoint monitors our new app pool, instead of the default pool. We can build and run the app using something like the following: dotnet build -t aspnetcore-iis-image\ndotnet run -p 5000:5000 aspnetcore-iis-image\n ServiceMonitor.exe watches the status of the AspNetCorePool app pool, and keeps the container running as long as that pool is running. If the pool shuts down, then the container also exits. Controlling app pool startup in the container I was working on a \"smoke\" test recently that uses a similar setup to that described above. The test app in question starts a background worker that makes a request to itself, and then shuts down the application. The intention in this case is that no external requests are required. However, this proved somewhat problematic to implement when hosting in IIS. I specifically wanted the following behaviour: When the container starts, the app pool is not yet started. The app pool is then started and a worker process is created. The ASP.NET Core application runs, sends a request to itself, and then exits. The container exits. Unfortunately, I struggled to convince IIS (and ServiceMonitor.exe) to do what I wanted. The major problem I ran into is how IIS manages app pools. There are various properties that control how and when an app pool starts. There are also properties to control when a worker process is spun up to handle a request. Among these knobs are: Start application pool immediately (AKA /autoStart) Enabled/true: IIS will automatically start the application pool. Disabled/false: You need to automatically start the application pool.  Worker process start mode (AKA /startMode) AlwaysRunning: If the application pool is running, immediately start up the worker process. OnDemand: If the application pool is running, start the w3wp.exe process when there is an inbound application request.  Preload the app pool: (AKA applicationDefaults.preloadEnabled) True: IIS simulates a user request to the default page of an application or virtual directory so that it is initialized. The application pool's startMode setting must be set to AlwaysRunning. False: The app pool is initialized when the first request is received.  So, in theory I thought I could do the following Create an app pool with /autoStart=\"false\" and /startMode=\"AlwaysRunning\" Create a site with applicationDefaults.preloadEnabled=\"true\" Run ServiceMonitor.exe to monitor the app pool. This would serve two purposes Promote the ambient environment variables Exit when the app pool shuts down  Unfortunately this doesn't work as I had hoped. As far as I could tell, the ASP.NET Core app wasn't starting up and then the app pool wasn't exiting when the app exits. I'm not entirely sure what's going on here, but I subsequently discovered there's also the applicationinitialization.doAppInitAfterRestart element and I realised I just didn't have the patience to fight with IIS any more 😅 In the end I opted for creating an entrypoint script that manually makes an http request to the app, explicitly stops the app pool, and then exits. It wasn't as smooth as I'm sure it could be, but at least it worked: # We override the normal service monitor entrypoint, because we want the container to shut down after the request is sent\n# - Run ServiceMonitor.exe to copy the env vars to the app pool\n# - Explicitly start the app pool\n# - Make a request (doesn't have to hit a \"real\" endpoint)\n# - Stop the app pool (this should happen automatically, but just to be safe)\n# - Exit\nRUN echo 'Write-Host \\\"Running servicemonitor to copy environment variables\\\"; Start-Process -NoNewWindow -PassThru -FilePath \\\"c:/ServiceMonitor.exe\\\" -ArgumentList @(\\\"w3svc\\\", \\\"AspNetCorePool\\\");' > C:\\app\\entrypoint.ps1; \\\n    echo 'Write-Host \\\"Starting AspNetCorePool app pool\\\"; Start-WebAppPool -Name \\\"AspNetCorePool\\\" -PassThru;' >> C:\\app\\entrypoint.ps1; \\\n    echo 'Write-Host \\\"Making 404 request\\\"; curl http://localhost:5000;' >> C:\\app\\entrypoint.ps1; \\\n    echo 'Write-Host \\\"Stopping pool\\\";Stop-WebAppPool \\\"AspNetCorePool\\\" -PassThru;' >> C:\\app\\entrypoint.ps1;  \\\n    echo 'Write-Host \\\"Shutting down\\\"' >> C:\\app\\entrypoint.ps1;\n\n# Set the script as the entrypoint\nENTRYPOINT [\"powershell\", \"-File\", \"C:\\\\app\\\\entrypoint.ps1\"]\n And with that, I achieved what I wanted—an ASP.NET Core app, running in IIS, in a Windows container, which starts up and exits. There was one final strange hiccup I ran into though, which I'll cover in the final section. Troubleshooting \"APPCMD failed with error code 183\" While initially working with ServiceMonitor.exe, I kept running into this error: Service 'w3svc' has been stopped\n\nAPPCMD failed with error code 183\n\nFailed to update IIS configuration\n Error code 183 is \"Cannot create file when that file already exists\". Err…OK. Well, it turns out you get this error if you an environment variable explicitly set in the <environmentVariables> section and then also set in the docker environment. ServiceMonitor.exe naively tries to \"promote\" the ambient environment variables by calling \"add variable\". And if there's already a variable in the app pool, it throws the above exception. The only solution is to not double up—remove the environment variable either from the app pool or from the dockerfile. Summary In this post I described how I ran an ASP.NET Core app inside IIS, inside of a Windows container. I showed how to install the AspNetCoreModule for running ASP.NET Core in IIS, how to use APPCMD and the PowerShell snippets to create app pools and websites, and how to use ServiceMonitor.exe to watch an app pool. I then described a specific scenario I was trying to reproduce, as well as how to solve an error I ran into."
  },
  {
    "itemId": "https://andrewlock.net/creating-an-analyzer-to-detect-infinite-loops-caused-by-threadabortexception/",
    "raw": "<img src=\"https://andrewlock.net/content/images/2025/thread_abort_analyzer_banner.png\" /><p>In this post I describe an infinite-loop scenario that can occur on .NET Framework when a <code>ThreadAbortException</code> is raised. I describe when you might run into this scenario, why it happens (it's a bug in the runtime), and how you can avoid it. Finally I show a Roslyn Analyzer that you can use to automatically flag problematic code.</p> <h2 id=\"throwing-a-threadabortexception-with-thread-abort-\" class=\"heading-with-anchor\"><a href=\"#throwing-a-threadabortexception-with-thread-abort-\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Throwing a <code>ThreadAbortException</code> with <code>Thread.Abort()</code></a></h2> <p>When you're doing parallel/concurrent programming in .NET, and you want to do two things at once, you typically use the <a href=\"https://learn.microsoft.com/en-us/dotnet/standard/parallel-programming/task-parallel-library-tpl\">Task Parallel Library</a>, <code>Task</code>, <code>Task&lt;T&gt;</code>, <code>async</code>/<code>await</code>, and all that modern goodness. However, you <em>can</em> also <a href=\"https://learn.microsoft.com/en-us/dotnet/standard/threading/using-threads-and-threading\">manage threads yourself \"manually\"</a>, by calling <code>Thread.Start()</code> etc.</p> <blockquote> <p>These days, in practice, you should almost never be working directly with threads. Use <code>Task</code> <em>et al</em> wherever possible so that you're using the <a href=\"https://learn.microsoft.com/en-us/dotnet/api/system.threading.threadpool\">ThreadPool</a> to schedule jobs and <code>async</code>/<code>await</code> to handle continuations.</p> </blockquote> <p>If you have a running thread, and you want to stop it running, you would typically try to use <em>cooperative cancellation</em>, using <code>CancellationToken</code>s or something similar. However, in some cases that's not possible; maybe the thread is running third party code out of your control, for example. In .NET Framework you have a \"kill it with fire\" option: <code>Thread.Abort()</code>.</p> <blockquote> <p>Note that <code>Thread.Abort()</code> <em>only</em> applies to .NET Framework. The <code>Abort()</code> method is not supported on .NET Core and throws a <code>PlatformNotSupportedException</code> to the caller instead.</p> </blockquote> <p>Calling <code>Abort()</code> on a thread causes the runtime to throw a <code>ThreadAbortException</code> in the thread's code. <code>ThreadAbortException</code> is special, in that you <em>can</em> catch it in application code (unlike some other exceptions <a href=\"https://learn.microsoft.com/en-us/dotnet/api/system.stackoverflowexception\">such as <code>StackOverflowException</code></a> which can't be caught), but the runtime automatically re-throws the <code>ThreadAbortException</code> at the end of the catch block.</p> <blockquote> <p>It is possible to \"cancel\" the exception by <a href=\"https://learn.microsoft.com/en-us/dotnet/api/system.threading.thread.resetabort?view=netframework-4.8.1\">calling <code>ResetAbort()</code></a> but I'm not going to go into that in this post.</p> </blockquote> <p>Just to give a concrete example, the following is a small .NET Framework program that starts a <code>Thread</code>, which starts doing some work, and then calls <code>Abort()</code>.</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token comment\">// Start a new thread, which runs the DoWork method</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> myThread <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">ThreadStart</span><span class=\"token punctuation\">(</span>DoWork<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmyThread<span class=\"token punctuation\">.</span><span class=\"token function\">Start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nThread<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">300</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nConsole<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Main - aborting thread\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nmyThread<span class=\"token punctuation\">.</span><span class=\"token function\">Abort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Trigger a ThreadAbortException</span>\nmyThread<span class=\"token punctuation\">.</span><span class=\"token function\">Join</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Wait for the thread to exit</span>\n\nConsole<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Main ending\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">DoWork</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">try</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"Thread - working </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">i</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            Thread<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ThreadAbortException</span> e<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"Thread - caught ThreadAbortException: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">e<span class=\"token punctuation\">.</span>Message</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// Even though we caught the exception, the runtime re-throws it</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// This is never called</span>\n    Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Thread - outside the catch block\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>When you run the program, the output looks something like this:</p> <pre class=\"language-bash\"><code class=\"language-bash\">Thread - working <span class=\"token number\">0</span>\nThread - working <span class=\"token number\">1</span>\nThread - working <span class=\"token number\">2</span>\nMain - aborting thread\nThread - caught ThreadAbortException: Thread was being aborted.\nMain ending\n</code></pre> <p>As you can see, even though we caught the <code>ThreadAbortException</code>, the thread exited, as the exception was re-thrown. Now we'll look at a scenario where that doesn't quite work as you expect.</p> <h2 id=\"infinite-loops-and-threadabortexception\" class=\"heading-with-anchor\"><a href=\"#infinite-loops-and-threadabortexception\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Infinite loops and <code>ThreadAbortException</code></a></h2> <p>The issue I'm going to describe is based on a real issue we ran into in the Datadog .NET Tracer shortly before I joined in January 2021. The issue occurred during IIS AppDomain recycles (among other cases) and would result in the apps not shutting down. As you might expect given the preamble, the problem was related to <code>ThreadAbortException</code>.</p> <p>We can demonstrate the problem easily if we make a slight tweak to the example above. Instead of using a <code>for</code> loop inside a <code>try</code>-<code>catch</code>, we're going to change to a <code>try</code>-<code>catch</code> inside a <code>while</code> loop. The rest of the program remains the same, so I've only shown the <code>DoWork()</code> method:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">DoWork</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">try</span>\n        <span class=\"token punctuation\">{</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"Thread - working </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">i</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            Thread<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ThreadAbortException</span> e<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"Thread - caught ThreadAbortException </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">e<span class=\"token punctuation\">.</span>Message</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// Even though we caught the exception, the runtime _should_ re-throw it</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// This is never called</span>\n    Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Thread - outside the catch block.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>Now, <em>theoretically</em>, there should be no difference here. The <code>Abort()</code> is called, caught in the <code>catch</code> block, and the runtime should-rethrow the exception, exiting the <code>while</code> loop and the thread. However if we run the app in the <code>Release</code> configuration we have a problem—we get stuck in an infinite loop in the <code>catch</code> block:</p> <pre class=\"language-bash\"><code class=\"language-bash\">Thread - working <span class=\"token number\">0</span>\nThread - working <span class=\"token number\">1</span>\nThread - working <span class=\"token number\">2</span>\nMain - aborting thread.\nThread - caught ThreadAbortException Thread was being aborted.\nThread - caught ThreadAbortException Thread was being aborted.\nThread - caught ThreadAbortException Thread was being aborted.\nThread - caught ThreadAbortException Thread was being aborted.\nThread - caught ThreadAbortException Thread was being aborted.\nThread - caught ThreadAbortException Thread was being aborted.\nThread - caught ThreadAbortException Thread was being aborted.\nThread - caught ThreadAbortException Thread was being aborted.\nThread - caught ThreadAbortException Thread was being aborted.\nThread - caught ThreadAbortException Thread was being aborted.\n<span class=\"token punctuation\">..</span>.\n</code></pre> <p>This is clearly Not Good™, and ultimately comes down to <a href=\"https://github.com/dotnet/runtime/issues/9633\">a bug in the JIT</a>. The explanation of the bug is somewhat complex (and is largely due to a workardound for a <em>different</em> bug) but <a href=\"https://github.com/dotnet/runtime/issues/9633#issuecomment-366132297\">this comment</a> has all the gory details if you want to dig in.</p> <blockquote> <p>The bug is present in <a href=\"https://github.com/microsoft/dotnet/blob/main/Documentation/testing-with-ryujit.md\">the RyuJIT compiler</a>, but <em>not</em> in the legacy JIT, so you can also workaround the bug by setting <code>&lt;useLegacyJit enabled=\"1\" /&gt;</code> in your <em>app.config</em> or <em>web.config</em>.</p> </blockquote> <p>The bug is triggered specifically when you have a \"tight\" loop with a <code>try</code>-<code>catch</code> directly inside a <code>while</code> loop:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">try</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// ...</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">catch</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// ...</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>Adding a <code>Console.WriteLine()</code> (for example) inside the <code>while</code> loop but <em>outside</em> the <code>try</code>-<code>catch</code> causes the bug to be avoided, as does using a <code>for</code> loop for example, so it's this <em>specific</em> pattern you need to watch out for. Adding a <code>finally</code> block also fixes the issue.</p> <p>Ultimately, Microsoft was decided <em>not</em> to fix this bug, so the workaround is to ensure you always \"manually\" re-<code>throw</code> a <code>ThreadAbortException</code> if you find yourself with the problematic pattern.</p> <p>Unfortunately, it's not <em>obvious</em> that the pattern is problematic just by looking at it, so it's a great candidate for a Roslyn Analyzer to do the spotting for you.</p> <h2 id=\"creating-an-analyzer-to-detect-the-pattern\" class=\"heading-with-anchor\"><a href=\"#creating-an-analyzer-to-detect-the-pattern\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Creating an analyzer to detect the pattern</a></h2> <p>In this section I show <a href=\"https://github.com/DataDog/dd-trace-dotnet/pull/1325\">the Roslyn Analyzer I wrote</a> to make sure we don't accidentally introduce this code into the Datadog library.</p> <blockquote> <p>If you're building a .NET Core-only application then you don't need to worry about this, because .NET Core doesn't support <code>ThreadAbortException</code>s. However, if you're building a library that multi-targets .NET Core <em>and</em> .NET Framework, or uses <code>netstandard2.0</code> to do so, then you might want to consider using it.</p> </blockquote> <p>I'm not going into detail about how to create a analyzer in this post (I covered this some time ago in <a href=\"/creating-a-roslyn-analyzer-in-visual-studio-2017/\">a previous post</a>). Instead I'm just going to focus on the analyzer code itself.</p> <p>As a reminder, we are trying to detect code that looks something like this:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token range operator\">..</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">try</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// ...</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">catch</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// ...</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>and advise you to update it to manually re-throw the exception. The simplest fix might look like this:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token range operator\">..</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">try</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// ...</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">catch</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// ...</span>\n        <span class=\"token keyword\">throw</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Required to avoid infinite recursion</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>We'll add a code fix provider to automatically make that basic fix later.</p> <h3 id=\"creating-the-analyzer\" class=\"heading-with-anchor\"><a href=\"#creating-the-analyzer\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Creating the analyzer</a></h3> <p>We'll start by looking at the analyzer itself. This derives from <code>DiagnosticAnalyzer</code>, defines a diagnostic ID, and registers a <code>SyntaxNodeAction</code> that looks for <code>while</code> loops. If the <code>while</code> loop contains a <code>try-catch</code> that has a problematic <code>catch</code> clause, we raise the issue.</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">DiagnosticAnalyzer</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span>LanguageNames<span class=\"token punctuation\">.</span>CSharp<span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ThreadAbortAnalyzer</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">DiagnosticAnalyzer</span></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">const</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> DiagnosticId <span class=\"token operator\">=</span> <span class=\"token string\">\"ABRT0001\"</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\">DiagnosticDescriptor</span> Rule <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span>\n        DiagnosticId<span class=\"token punctuation\">,</span>\n        <span class=\"token named-parameter punctuation\">title</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Potential infinite loop on ThreadAbortException\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token named-parameter punctuation\">messageFormat</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Potential infinite loop - you should rethrow Exception in catch block\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token named-parameter punctuation\">category</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Reliability\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token named-parameter punctuation\">defaultSeverity</span><span class=\"token punctuation\">:</span> DiagnosticSeverity<span class=\"token punctuation\">.</span>Error<span class=\"token punctuation\">,</span>\n        <span class=\"token named-parameter punctuation\">isEnabledByDefault</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n        <span class=\"token named-parameter punctuation\">description</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"While blocks are vulnerable to infinite loop on ThreadAbortException due to a bug in the runtime. The catch block should rethrow a ThreadAbortException, or use a finally block\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\">ImmutableArray<span class=\"token punctuation\">&lt;</span>DiagnosticDescriptor<span class=\"token punctuation\">&gt;</span></span> SupportedDiagnostics <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> ImmutableArray<span class=\"token punctuation\">.</span><span class=\"token function\">Create</span><span class=\"token punctuation\">(</span>Rule<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Initialize</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">AnalysisContext</span> context<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// Don't bother checking generated code</span>\n        context<span class=\"token punctuation\">.</span><span class=\"token function\">ConfigureGeneratedCodeAnalysis</span><span class=\"token punctuation\">(</span>GeneratedCodeAnalysisFlags<span class=\"token punctuation\">.</span>None<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        context<span class=\"token punctuation\">.</span><span class=\"token function\">EnableConcurrentExecution</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        context<span class=\"token punctuation\">.</span><span class=\"token function\">RegisterSyntaxNodeAction</span><span class=\"token punctuation\">(</span>AnalyseSyntax<span class=\"token punctuation\">,</span> SyntaxKind<span class=\"token punctuation\">.</span>WhileStatement<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">AnalyseSyntax</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SyntaxNodeAnalysisContext</span> context<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span>Node <span class=\"token keyword\">is</span> <span class=\"token class-name\">WhileStatementSyntax</span> whileStatement\n            <span class=\"token operator\">&amp;&amp;</span> ThreadAbortSyntaxHelper<span class=\"token punctuation\">.</span><span class=\"token function\">FindProblematicCatchClause</span><span class=\"token punctuation\">(</span> <span class=\"token comment\">// shown below</span>\n                whileStatement<span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">.</span>SemanticModel<span class=\"token punctuation\">)</span> <span class=\"token keyword\">is</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span> problematicCatch<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// If we're in a while statement, and there's a problematic catch</span>\n            <span class=\"token comment\">// clause, then create a diagnostic</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> diagnostic <span class=\"token operator\">=</span> Diagnostic<span class=\"token punctuation\">.</span><span class=\"token function\">Create</span><span class=\"token punctuation\">(</span>Rule<span class=\"token punctuation\">,</span> problematicCatch<span class=\"token punctuation\">.</span><span class=\"token function\">GetLocation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            context<span class=\"token punctuation\">.</span><span class=\"token function\">ReportDiagnostic</span><span class=\"token punctuation\">(</span>diagnostic<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>The <code>ThreadAbortSyntaxHelper</code> performs the analysis of the while block, looking explicitly for a <code>while</code> block with the following characteristics:</p> <ul><li>The body of the <code>while</code> is a <code>BlockSyntax</code></li> <li>The body contains only one statement, which is a <code>TryStatementSyntax</code></li> <li>The <code>TryStatementSyntax</code> contains a <code>CatchClauseSyntax</code> which catches a <code>ThreadAbortException</code> (or its ancestors)</li> <li>The <code>CatchClauseSyntax</code> does <em>not</em> call <code>throw;</code></li></ul> <p>If all of these conditions are matched, the analyzer flags the <code>catch</code> as problematic. The code of the helper is shown below:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">internal</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ThreadAbortSyntaxHelper</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">CatchClauseSyntax</span> <span class=\"token function\">FindProblematicCatchClause</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">WhileStatementSyntax</span> whileStatement<span class=\"token punctuation\">,</span> <span class=\"token class-name\">SemanticModel</span> model<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>whileStatement<span class=\"token punctuation\">.</span>Statement <span class=\"token keyword\">is</span> <span class=\"token keyword\">not</span> <span class=\"token class-name\">BlockSyntax</span> blockSyntax<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> innerStatements <span class=\"token operator\">=</span> blockSyntax<span class=\"token punctuation\">.</span>Statements<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>innerStatements<span class=\"token punctuation\">.</span>Count <span class=\"token operator\">!=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// only applies when try directly nested under while and only child</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>innerStatements<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">is</span> <span class=\"token keyword\">not</span> <span class=\"token class-name\">TryStatementSyntax</span> tryCatchStatement<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// Not a try catch nested in a while</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token class-name\">CatchClauseSyntax</span> catchClause <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> willCatchThreadAbort <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> willRethrowThreadAbort <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> catchSyntax <span class=\"token keyword\">in</span> tryCatchStatement<span class=\"token punctuation\">.</span>Catches<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            catchClause <span class=\"token operator\">=</span> catchSyntax<span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> exceptionTypeSyntax <span class=\"token operator\">=</span> catchSyntax<span class=\"token punctuation\">.</span>Declaration<span class=\"token punctuation\">.</span>Type<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">CanCatchThreadAbort</span><span class=\"token punctuation\">(</span>exceptionTypeSyntax<span class=\"token punctuation\">,</span> model<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                willCatchThreadAbort <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\n                <span class=\"token comment\">// We're in the catch block that will catch the ThreadAbort</span>\n                <span class=\"token comment\">// Make sure that we re-throw the exception</span>\n                <span class=\"token comment\">// This is a very basic check, in that it doesn't check control flow etc</span>\n                <span class=\"token comment\">// It requires that you have a throw; in the catch block</span>\n                willRethrowThreadAbort <span class=\"token operator\">=</span> catchSyntax<span class=\"token punctuation\">.</span>Block<span class=\"token punctuation\">.</span>Statements\n                    <span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">OfType</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>ThrowStatementSyntax<span class=\"token punctuation\">&gt;</span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">.</span><span class=\"token function\">Any</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>willCatchThreadAbort <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>willRethrowThreadAbort<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> catchClause<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">bool</span></span> <span class=\"token function\">CanCatchThreadAbort</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TypeSyntax</span> syntax<span class=\"token punctuation\">,</span> <span class=\"token class-name\">SemanticModel</span> model<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> exceptionType <span class=\"token operator\">=</span> model<span class=\"token punctuation\">.</span><span class=\"token function\">GetSymbolInfo</span><span class=\"token punctuation\">(</span>syntax<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>Symbol <span class=\"token keyword\">as</span> <span class=\"token class-name\">INamedTypeSymbol</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> exceptionTypeName <span class=\"token operator\">=</span> exceptionType<span class=\"token punctuation\">?.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> exceptionTypeName <span class=\"token operator\">==</span> <span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span><span class=\"token type-expression class-name\">ThreadAbortException</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>FullName\n            <span class=\"token operator\">||</span> exceptionTypeName <span class=\"token operator\">==</span> <span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span><span class=\"token type-expression class-name\">SystemException</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>FullName\n            <span class=\"token operator\">||</span> exceptionTypeName <span class=\"token operator\">==</span> <span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span><span class=\"token type-expression class-name\">Exception</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>FullName<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>There are clearly a bunch of limitations to this analysis, but <a href=\"#limitations-of-the-analyzer-and-the-code-fix\">I'll go through those later</a>. When you run the analyzer, you can see that it works, flagging the exception in a problematic scenario:</p> <p><img src=\"/content/images/2025/thread_abort_analyzer.png\" alt=\"The analyzer in action\"></p> <p>Now that we have the analyzer, let's create a simple code fix provider for it</p> <h3 id=\"creating-the-code-fix-provider\" class=\"heading-with-anchor\"><a href=\"#creating-the-code-fix-provider\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Creating the code fix provider</a></h3> <p>The <code>CodeFixProvider</code> is registered as a fixer for the <code>ThreadAbortAnalyzer</code> we defined above. It takes the diagnostic location provided and registers a code fix which simply adds a <code>throw</code> statement to the end of the first <code>catch</code> block that would catch the <code>ThreadAbortException</code>.</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">ExportCodeFixProvider</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span>LanguageNames<span class=\"token punctuation\">.</span>CSharp<span class=\"token punctuation\">,</span> Name <span class=\"token operator\">=</span> <span class=\"token keyword\">nameof</span><span class=\"token punctuation\">(</span>ThreadAbortCodeFixProvider<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">Shared</span></span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ThreadAbortCodeFixProvider</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">CodeFixProvider</span></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">sealed</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\">ImmutableArray<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">&gt;</span></span> FixableDiagnosticIds <span class=\"token operator\">=&gt;</span> ImmutableArray<span class=\"token punctuation\">.</span><span class=\"token function\">Create</span><span class=\"token punctuation\">(</span>ThreadAbortAnalyzer<span class=\"token punctuation\">.</span>DiagnosticId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">sealed</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\">FixAllProvider</span> <span class=\"token function\">GetFixAllProvider</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> WellKnownFixAllProviders<span class=\"token punctuation\">.</span>BatchFixer<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">sealed</span> <span class=\"token keyword\">override</span> <span class=\"token keyword\">async</span> <span class=\"token return-type class-name\">Task</span> <span class=\"token function\">RegisterCodeFixesAsync</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CodeFixContext</span> context<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> root <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> context<span class=\"token punctuation\">.</span>Document<span class=\"token punctuation\">.</span><span class=\"token function\">GetSyntaxRootAsync</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span>CancellationToken<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ConfigureAwait</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> diagnostic <span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span>Diagnostics<span class=\"token punctuation\">.</span><span class=\"token function\">First</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> diagnosticSpan <span class=\"token operator\">=</span> diagnostic<span class=\"token punctuation\">.</span>Location<span class=\"token punctuation\">.</span>SourceSpan<span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// Find the catch block catch declaration identified by the diagnostic.</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> catchClause <span class=\"token operator\">=</span> root<span class=\"token punctuation\">.</span><span class=\"token function\">FindToken</span><span class=\"token punctuation\">(</span>diagnosticSpan<span class=\"token punctuation\">.</span>Start<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span>Parent\n            <span class=\"token punctuation\">.</span><span class=\"token function\">AncestorsAndSelf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">OfType</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>CatchClauseSyntax<span class=\"token punctuation\">&gt;</span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">First</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// Register a code action that will invoke the fix.</span>\n        context<span class=\"token punctuation\">.</span><span class=\"token function\">RegisterCodeFix</span><span class=\"token punctuation\">(</span>\n            CodeAction<span class=\"token punctuation\">.</span><span class=\"token function\">Create</span><span class=\"token punctuation\">(</span>\n                <span class=\"token named-parameter punctuation\">title</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Rethrow exception\"</span><span class=\"token punctuation\">,</span>\n                <span class=\"token named-parameter punctuation\">createChangedDocument</span><span class=\"token punctuation\">:</span> c <span class=\"token operator\">=&gt;</span> <span class=\"token function\">AddThrowStatement</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span>Document<span class=\"token punctuation\">,</span> catchClause<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                <span class=\"token named-parameter punctuation\">equivalenceKey</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">nameof</span><span class=\"token punctuation\">(</span>ThreadAbortCodeFixProvider<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            diagnostic<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">async</span> <span class=\"token return-type class-name\">Task<span class=\"token punctuation\">&lt;</span>Document<span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">AddThrowStatement</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Document</span> document<span class=\"token punctuation\">,</span> <span class=\"token class-name\">CatchClauseSyntax</span> catchBlock<span class=\"token punctuation\">,</span> <span class=\"token class-name\">CancellationToken</span> cancellationToken<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// This messes with the whitespace, but meh, it's simple</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> throwStatement <span class=\"token operator\">=</span> SyntaxFactory<span class=\"token punctuation\">.</span><span class=\"token function\">ThrowStatement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> statements <span class=\"token operator\">=</span> catchBlock<span class=\"token punctuation\">.</span>Block<span class=\"token punctuation\">.</span>Statements<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>throwStatement<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> newCatchBlock <span class=\"token operator\">=</span> catchBlock<span class=\"token punctuation\">.</span>Block<span class=\"token punctuation\">.</span><span class=\"token function\">WithStatements</span><span class=\"token punctuation\">(</span>statements<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// replace the syntax and return updated document</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> root <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">GetSyntaxRootAsync</span><span class=\"token punctuation\">(</span>cancellationToken<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ConfigureAwait</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        root <span class=\"token operator\">=</span> root<span class=\"token punctuation\">.</span><span class=\"token function\">ReplaceNode</span><span class=\"token punctuation\">(</span>catchBlock<span class=\"token punctuation\">.</span>Block<span class=\"token punctuation\">,</span> newCatchBlock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">WithSyntaxRoot</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>Now when the analyzer flags an issue, you get a suggestion of how to fix it with one click:</p> <p><img src=\"/content/images/2025/thread_abort_analyzer_02.png\" alt=\"The code fix suggestion in action\"></p> <p>This is clearly a crude fix (as I describe in the next section) but I've not found it to be a big issue in practice, the important thing is that it draws attention to the issue and shows a <em>possible</em> fix.</p> <h3 id=\"limitations-of-the-analyzer-and-the-code-fix\" class=\"heading-with-anchor\"><a href=\"#limitations-of-the-analyzer-and-the-code-fix\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Limitations of the analyzer and the code fix</a></h3> <p>The analyzer I show in this post is not particularly sophisticated. It does only very basic analysis of the <code>while</code> and <code>try</code>-<code>catch</code> statements. The limitations include:</p> <ul><li><strong>Assumes an infinite <code>while</code> loop</strong>. For simplicity, the analyzer doesn't check the expression in the while loop, and assumes it will loop infinitely. That's a conservative approach, and will flag some cases that <em>won't</em> trigger the bug, but it's good enough for our purposes.</li> <li><strong>Exception filters are not considered</strong>. For simplicity, I've ignored exception filters on the catch block. That means we might assume an exception is caught when it is not, and in that case we might <em>also</em> incorrectly assume an exception is rethrown when it is not.</li> <li><strong>Doesn't consider finally blocks</strong>. In practice, the presence of a <code>finally</code> block can avoid the bug, so doesn't need to explicitly rethrow. The analyzer does not consider this, and take a more conservative approach, requiring the rethrow.</li> <li><strong>Doesn't check flow control in catch clause</strong>. In some cases, a catch clause <em>might</em> be calling <code>throw;</code>, but if it's not a direct child of the <code>catch</code> block, the analyzer will ignore it. Again, this is a conservative approach.</li></ul> <p>In terms of the code fix provider, it's potentially unlikely that you would <em>actually</em> want to call <code>throw;</code> inside a <code>catch(Exception)</code> block. A better approach would likely be to introduce an additional <code>catch</code> clause for <code>ThreadAbortException</code> specifically, and only re-throwing in that clause.</p> <p>For example, if you have this:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">try</span>\n    <span class=\"token punctuation\">{</span>\n        Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Looping\"</span><span class=\"token punctuation\">)</span>\n        Thread<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Exception!\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>then instead of the code suggested by the analyzer:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">try</span>\n    <span class=\"token punctuation\">{</span>\n        Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Looping\"</span><span class=\"token punctuation\">)</span>\n        Thread<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Exception!\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">throw</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Added by code fix provider</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>you might want to do something like this instead:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">try</span>\n    <span class=\"token punctuation\">{</span>\n        Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Looping\"</span><span class=\"token punctuation\">)</span>\n        Thread<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ThreadAbortException</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// catch ThreadAbortException explicitly</span>\n    <span class=\"token punctuation\">{</span>\n        Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ThreadAbortException!\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">throw</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Avoid the bug</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Exception!\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\">// No need to throw in this block</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>This avoids the bug by re-throwing when you have a <code>ThreadAbortException</code> specifically, and means you don't rethrow for just <em>any</em> <code>Exception</code>. In practice, I wasn't going to bother writing a code fix provider at all, so I went for the simplest solution at the time. If I wanted to be more robust I would almost certainly try to use this pattern instead.</p> <h2 id=\"summary\" class=\"heading-with-anchor\"><a href=\"#summary\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Summary</a></h2> <p>In this post I described a bug in the .NET Framework runtime that can cause a <code>ThreadAbortException</code> to get stuck in an infinite loop. The bug only occurs when you have a try-catch block tightly nested in a <code>while</code> block. Normally if you catch a <code>ThreadAbortException</code> the runtime automatically re-throws the exception after the <code>catch</code> block has executed. However the bug means that the catch block gets stuck re-executing infinitely.</p> <p>In the second half of the post I showed a Roslyn Analyzer I created that can detect the problematic pattern and includes a code fix provider that adds a <code>throw;</code> statement to break out of the infinite loop. It's a relatively crude analyzer, but I know it's saved us at least once from introducing the issue!</p> ",
    "sanitized": "In this post I describe an infinite-loop scenario that can occur on .NET Framework when a ThreadAbortException is raised. I describe when you might run into this scenario, why it happens (it's a bug in the runtime), and how you can avoid it. Finally I show a Roslyn Analyzer that you can use to automatically flag problematic code. Throwing a ThreadAbortException with Thread.Abort() When you're doing parallel/concurrent programming in .NET, and you want to do two things at once, you typically use the Task Parallel Library, Task, Task<T>, async/await, and all that modern goodness. However, you can also manage threads yourself \"manually\", by calling Thread.Start() etc.  These days, in practice, you should almost never be working directly with threads. Use Task et al wherever possible so that you're using the ThreadPool to schedule jobs and async/await to handle continuations.  If you have a running thread, and you want to stop it running, you would typically try to use cooperative cancellation, using CancellationTokens or something similar. However, in some cases that's not possible; maybe the thread is running third party code out of your control, for example. In .NET Framework you have a \"kill it with fire\" option: Thread.Abort().  Note that Thread.Abort() only applies to .NET Framework. The Abort() method is not supported on .NET Core and throws a PlatformNotSupportedException to the caller instead.  Calling Abort() on a thread causes the runtime to throw a ThreadAbortException in the thread's code. ThreadAbortException is special, in that you can catch it in application code (unlike some other exceptions such as StackOverflowException which can't be caught), but the runtime automatically re-throws the ThreadAbortException at the end of the catch block.  It is possible to \"cancel\" the exception by calling ResetAbort() but I'm not going to go into that in this post.  Just to give a concrete example, the following is a small .NET Framework program that starts a Thread, which starts doing some work, and then calls Abort(). // Start a new thread, which runs the DoWork method\nvar myThread = new Thread(new ThreadStart(DoWork));\nmyThread.Start();\n\nThread.Sleep(300);\nConsole.WriteLine(\"Main - aborting thread\");\n\nmyThread.Abort(); // Trigger a ThreadAbortException\nmyThread.Join(); // Wait for the thread to exit\n\nConsole.WriteLine(\"Main ending\");\n\nstatic void DoWork()\n{\n    try\n    {\n        for (var i = 0; i < 100; i++)\n        {\n            Console.WriteLine($\"Thread - working {i}\");\n            Thread.Sleep(100);\n        }\n    }\n    catch (ThreadAbortException e)\n    {\n        Console.WriteLine($\"Thread - caught ThreadAbortException: {e.Message}\");\n        // Even though we caught the exception, the runtime re-throws it\n    }\n\n    // This is never called\n    Console.WriteLine(\"Thread - outside the catch block\");\n}\n When you run the program, the output looks something like this: Thread - working 0\nThread - working 1\nThread - working 2\nMain - aborting thread\nThread - caught ThreadAbortException: Thread was being aborted.\nMain ending\n As you can see, even though we caught the ThreadAbortException, the thread exited, as the exception was re-thrown. Now we'll look at a scenario where that doesn't quite work as you expect. Infinite loops and ThreadAbortException The issue I'm going to describe is based on a real issue we ran into in the Datadog .NET Tracer shortly before I joined in January 2021. The issue occurred during IIS AppDomain recycles (among other cases) and would result in the apps not shutting down. As you might expect given the preamble, the problem was related to ThreadAbortException. We can demonstrate the problem easily if we make a slight tweak to the example above. Instead of using a for loop inside a try-catch, we're going to change to a try-catch inside a while loop. The rest of the program remains the same, so I've only shown the DoWork() method: static void DoWork()\n{\n    var i = 0;\n    while (true)\n    {\n        try\n        {\n            Console.WriteLine($\"Thread - working {i}\");\n            i++;\n            Thread.Sleep(100);\n        }\n        catch (ThreadAbortException e)\n        {\n            Console.WriteLine($\"Thread - caught ThreadAbortException {e.Message}\");\n            // Even though we caught the exception, the runtime _should_ re-throw it\n        }\n    }\n\n    // This is never called\n    Console.WriteLine(\"Thread - outside the catch block.\");\n}\n Now, theoretically, there should be no difference here. The Abort() is called, caught in the catch block, and the runtime should-rethrow the exception, exiting the while loop and the thread. However if we run the app in the Release configuration we have a problem—we get stuck in an infinite loop in the catch block: Thread - working 0\nThread - working 1\nThread - working 2\nMain - aborting thread.\nThread - caught ThreadAbortException Thread was being aborted.\nThread - caught ThreadAbortException Thread was being aborted.\nThread - caught ThreadAbortException Thread was being aborted.\nThread - caught ThreadAbortException Thread was being aborted.\nThread - caught ThreadAbortException Thread was being aborted.\nThread - caught ThreadAbortException Thread was being aborted.\nThread - caught ThreadAbortException Thread was being aborted.\nThread - caught ThreadAbortException Thread was being aborted.\nThread - caught ThreadAbortException Thread was being aborted.\nThread - caught ThreadAbortException Thread was being aborted.\n...\n This is clearly Not Good™, and ultimately comes down to a bug in the JIT. The explanation of the bug is somewhat complex (and is largely due to a workardound for a different bug) but this comment has all the gory details if you want to dig in.  The bug is present in the RyuJIT compiler, but not in the legacy JIT, so you can also workaround the bug by setting <useLegacyJit enabled=\"1\" /> in your app.config or web.config.  The bug is triggered specifically when you have a \"tight\" loop with a try-catch directly inside a while loop: while(true)\n{\n    try\n    {\n        // ...\n    }\n    catch\n    {\n        // ...\n    }\n}\n Adding a Console.WriteLine() (for example) inside the while loop but outside the try-catch causes the bug to be avoided, as does using a for loop for example, so it's this specific pattern you need to watch out for. Adding a finally block also fixes the issue. Ultimately, Microsoft was decided not to fix this bug, so the workaround is to ensure you always \"manually\" re-throw a ThreadAbortException if you find yourself with the problematic pattern. Unfortunately, it's not obvious that the pattern is problematic just by looking at it, so it's a great candidate for a Roslyn Analyzer to do the spotting for you. Creating an analyzer to detect the pattern In this section I show the Roslyn Analyzer I wrote to make sure we don't accidentally introduce this code into the Datadog library.  If you're building a .NET Core-only application then you don't need to worry about this, because .NET Core doesn't support ThreadAbortExceptions. However, if you're building a library that multi-targets .NET Core and .NET Framework, or uses netstandard2.0 to do so, then you might want to consider using it.  I'm not going into detail about how to create a analyzer in this post (I covered this some time ago in a previous post). Instead I'm just going to focus on the analyzer code itself. As a reminder, we are trying to detect code that looks something like this: while(...)\n{\n    try\n    {\n        // ...\n    }\n    catch\n    {\n        // ...\n    }\n}\n and advise you to update it to manually re-throw the exception. The simplest fix might look like this: while(...)\n{\n    try\n    {\n        // ...\n    }\n    catch\n    {\n        // ...\n        throw; // Required to avoid infinite recursion\n    }\n}\n We'll add a code fix provider to automatically make that basic fix later. Creating the analyzer We'll start by looking at the analyzer itself. This derives from DiagnosticAnalyzer, defines a diagnostic ID, and registers a SyntaxNodeAction that looks for while loops. If the while loop contains a try-catch that has a problematic catch clause, we raise the issue. [DiagnosticAnalyzer(LanguageNames.CSharp)]\npublic class ThreadAbortAnalyzer : DiagnosticAnalyzer\n{\n    public const string DiagnosticId = \"ABRT0001\";\n\n    private static readonly DiagnosticDescriptor Rule = new(\n        DiagnosticId,\n        title: \"Potential infinite loop on ThreadAbortException\",\n        messageFormat: \"Potential infinite loop - you should rethrow Exception in catch block\",\n        category: \"Reliability\",\n        defaultSeverity: DiagnosticSeverity.Error,\n        isEnabledByDefault: true,\n        description: \"While blocks are vulnerable to infinite loop on ThreadAbortException due to a bug in the runtime. The catch block should rethrow a ThreadAbortException, or use a finally block\");\n\n    public override ImmutableArray<DiagnosticDescriptor> SupportedDiagnostics { get; } = ImmutableArray.Create(Rule);\n\n    public override void Initialize(AnalysisContext context)\n    {\n        // Don't bother checking generated code\n        context.ConfigureGeneratedCodeAnalysis(GeneratedCodeAnalysisFlags.None);\n        context.EnableConcurrentExecution();\n\n        context.RegisterSyntaxNodeAction(AnalyseSyntax, SyntaxKind.WhileStatement);\n    }\n\n    private void AnalyseSyntax(SyntaxNodeAnalysisContext context)\n    {\n        if (context.Node is WhileStatementSyntax whileStatement\n            && ThreadAbortSyntaxHelper.FindProblematicCatchClause( // shown below\n                whileStatement, context.SemanticModel) is { } problematicCatch)\n        {\n            // If we're in a while statement, and there's a problematic catch\n            // clause, then create a diagnostic\n            var diagnostic = Diagnostic.Create(Rule, problematicCatch.GetLocation());\n            context.ReportDiagnostic(diagnostic);\n        }\n    }\n}\n The ThreadAbortSyntaxHelper performs the analysis of the while block, looking explicitly for a while block with the following characteristics: The body of the while is a BlockSyntax The body contains only one statement, which is a TryStatementSyntax The TryStatementSyntax contains a CatchClauseSyntax which catches a ThreadAbortException (or its ancestors) The CatchClauseSyntax does not call throw; If all of these conditions are matched, the analyzer flags the catch as problematic. The code of the helper is shown below: internal static class ThreadAbortSyntaxHelper\n{\n    public static CatchClauseSyntax FindProblematicCatchClause(WhileStatementSyntax whileStatement, SemanticModel model)\n    {\n        if (whileStatement.Statement is not BlockSyntax blockSyntax)\n        {\n            return null;\n        }\n\n        var innerStatements = blockSyntax.Statements;\n        if (innerStatements.Count != 1)\n        {\n            // only applies when try directly nested under while and only child\n            return null;\n        }\n\n        if (innerStatements[0] is not TryStatementSyntax tryCatchStatement)\n        {\n            // Not a try catch nested in a while\n            return null;\n        }\n\n        CatchClauseSyntax catchClause = null;\n        var willCatchThreadAbort = false;\n        var willRethrowThreadAbort = false;\n\n        foreach (var catchSyntax in tryCatchStatement.Catches)\n        {\n            catchClause = catchSyntax;\n            var exceptionTypeSyntax = catchSyntax.Declaration.Type;\n            if (CanCatchThreadAbort(exceptionTypeSyntax, model))\n            {\n                willCatchThreadAbort = true;\n\n                // We're in the catch block that will catch the ThreadAbort\n                // Make sure that we re-throw the exception\n                // This is a very basic check, in that it doesn't check control flow etc\n                // It requires that you have a throw; in the catch block\n                willRethrowThreadAbort = catchSyntax.Block.Statements\n                    .OfType<ThrowStatementSyntax>()\n                    .Any();\n                break;\n            }\n        }\n\n        if (willCatchThreadAbort && !willRethrowThreadAbort)\n        {\n            return catchClause;\n        }\n\n        return null;\n    }\n\n    private static bool CanCatchThreadAbort(TypeSyntax syntax, SemanticModel model)\n    {\n        var exceptionType = model.GetSymbolInfo(syntax).Symbol as INamedTypeSymbol;\n        var exceptionTypeName = exceptionType?.ToString();\n        return exceptionTypeName == typeof(ThreadAbortException).FullName\n            || exceptionTypeName == typeof(SystemException).FullName\n            || exceptionTypeName == typeof(Exception).FullName;\n    }\n}\n There are clearly a bunch of limitations to this analysis, but I'll go through those later. When you run the analyzer, you can see that it works, flagging the exception in a problematic scenario:  Now that we have the analyzer, let's create a simple code fix provider for it Creating the code fix provider The CodeFixProvider is registered as a fixer for the ThreadAbortAnalyzer we defined above. It takes the diagnostic location provided and registers a code fix which simply adds a throw statement to the end of the first catch block that would catch the ThreadAbortException. [ExportCodeFixProvider(LanguageNames.CSharp, Name = nameof(ThreadAbortCodeFixProvider))]\n[Shared]\npublic class ThreadAbortCodeFixProvider : CodeFixProvider\n{\n    public sealed override ImmutableArray<string> FixableDiagnosticIds => ImmutableArray.Create(ThreadAbortAnalyzer.DiagnosticId);\n    public sealed override FixAllProvider GetFixAllProvider() => WellKnownFixAllProviders.BatchFixer;\n\n    public sealed override async Task RegisterCodeFixesAsync(CodeFixContext context)\n    {\n        var root = await context.Document.GetSyntaxRootAsync(context.CancellationToken).ConfigureAwait(false);\n\n        var diagnostic = context.Diagnostics.First();\n        var diagnosticSpan = diagnostic.Location.SourceSpan;\n\n        // Find the catch block catch declaration identified by the diagnostic.\n        var catchClause = root.FindToken(diagnosticSpan.Start)\n            .Parent\n            .AncestorsAndSelf()\n            .OfType<CatchClauseSyntax>().First();\n\n        // Register a code action that will invoke the fix.\n        context.RegisterCodeFix(\n            CodeAction.Create(\n                title: \"Rethrow exception\",\n                createChangedDocument: c => AddThrowStatement(context.Document, catchClause, c),\n                equivalenceKey: nameof(ThreadAbortCodeFixProvider)),\n            diagnostic);\n    }\n\n    private static async Task<Document> AddThrowStatement(Document document, CatchClauseSyntax catchBlock, CancellationToken cancellationToken)\n    {\n        // This messes with the whitespace, but meh, it's simple\n        var throwStatement = SyntaxFactory.ThrowStatement();\n        var statements = catchBlock.Block.Statements.Add(throwStatement);\n        var newCatchBlock = catchBlock.Block.WithStatements(statements);\n\n        // replace the syntax and return updated document\n        var root = await document.GetSyntaxRootAsync(cancellationToken).ConfigureAwait(false);\n        root = root.ReplaceNode(catchBlock.Block, newCatchBlock);\n        return document.WithSyntaxRoot(root);\n    }\n}\n Now when the analyzer flags an issue, you get a suggestion of how to fix it with one click:  This is clearly a crude fix (as I describe in the next section) but I've not found it to be a big issue in practice, the important thing is that it draws attention to the issue and shows a possible fix. Limitations of the analyzer and the code fix The analyzer I show in this post is not particularly sophisticated. It does only very basic analysis of the while and try-catch statements. The limitations include: Assumes an infinite while loop. For simplicity, the analyzer doesn't check the expression in the while loop, and assumes it will loop infinitely. That's a conservative approach, and will flag some cases that won't trigger the bug, but it's good enough for our purposes. Exception filters are not considered. For simplicity, I've ignored exception filters on the catch block. That means we might assume an exception is caught when it is not, and in that case we might also incorrectly assume an exception is rethrown when it is not. Doesn't consider finally blocks. In practice, the presence of a finally block can avoid the bug, so doesn't need to explicitly rethrow. The analyzer does not consider this, and take a more conservative approach, requiring the rethrow. Doesn't check flow control in catch clause. In some cases, a catch clause might be calling throw;, but if it's not a direct child of the catch block, the analyzer will ignore it. Again, this is a conservative approach. In terms of the code fix provider, it's potentially unlikely that you would actually want to call throw; inside a catch(Exception) block. A better approach would likely be to introduce an additional catch clause for ThreadAbortException specifically, and only re-throwing in that clause. For example, if you have this: while(true)\n{\n    try\n    {\n        Console.WriteLine(\"Looping\")\n        Thread.Sleep(100);\n    }\n    catch(Exception)\n    {\n        Console.WriteLine(\"Exception!\")\n    }\n}\n then instead of the code suggested by the analyzer: while(true)\n{\n    try\n    {\n        Console.WriteLine(\"Looping\")\n        Thread.Sleep(100);\n    }\n    catch(Exception)\n    {\n        Console.WriteLine(\"Exception!\")\n        throw; // Added by code fix provider\n    }\n}\n you might want to do something like this instead: while(true)\n{\n    try\n    {\n        Console.WriteLine(\"Looping\")\n        Thread.Sleep(100);\n    }\n    catch(ThreadAbortException) // catch ThreadAbortException explicitly\n    {\n        Console.WriteLine(\"ThreadAbortException!\")\n        throw; // Avoid the bug\n    }\n    catch(Exception)\n    {\n        Console.WriteLine(\"Exception!\")\n        // No need to throw in this block\n    }\n}\n This avoids the bug by re-throwing when you have a ThreadAbortException specifically, and means you don't rethrow for just any Exception. In practice, I wasn't going to bother writing a code fix provider at all, so I went for the simplest solution at the time. If I wanted to be more robust I would almost certainly try to use this pattern instead. Summary In this post I described a bug in the .NET Framework runtime that can cause a ThreadAbortException to get stuck in an infinite loop. The bug only occurs when you have a try-catch block tightly nested in a while block. Normally if you catch a ThreadAbortException the runtime automatically re-throws the exception after the catch block has executed. However the bug means that the catch block gets stuck re-executing infinitely. In the second half of the post I showed a Roslyn Analyzer I created that can detect the problematic pattern and includes a code fix provider that adds a throw; statement to break out of the infinite loop. It's a relatively crude analyzer, but I know it's saved us at least once from introducing the issue!"
  },
  {
    "itemId": "https://andrewlock.net/disabling-localized-satellite-assemblies-during-dotnet-publish/",
    "raw": "<img src=\"https://andrewlock.net/content/images/2025/satellite_banner.png\" /><p>In this brief post I show how to reduce the size of the publish output for .NET apps by preventing the publishing of localization resources when they're not needed.</p> <h2 id=\"what-are-localization-satellite-assemblies-\" class=\"heading-with-anchor\"><a href=\"#what-are-localization-satellite-assemblies-\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">What are localization satellite assemblies?</a></h2> <p>Localization is an important aspect for many applications, and refers to the process of adapting an application such that it uses the paradigms and aspects of the target culture. This is a complex topic in general, and is more than just changing the language; it also involves changing the currencies, number rules, and other culture-specific aspects.</p> <p>The functionality required to work with a given culture is encapsulated in \"satellite\" resource assemblies. These assemblies are named based on the parent assembly, with an added <code>.resources</code> suffix, and placed in a folder corresponding to the appropriate culture.</p> <blockquote> <p><a href=\"https://learn.microsoft.com/en-us/dotnet/core/dependency-loading/loading-resources#when-are-satellite-assemblies-loaded\">This document</a> describes the algorithm for how satellite resource assemblies are loaded in .NET Core.</p> </blockquote> <p>You can see this pattern if you look inside the <a href=\"https://www.nuget.org/packages/System.CommandLine/2.0.0-beta4.22272.1\">System.CommandLine</a> package for example. The parent assembly <em>System.CommandLine.dll</em> is in the root folder, and there are <em>System.CommandLine.resources.dll</em> in each of the \"culture\" folders:</p> <p><img src=\"/content/images/2025/satellites_01.png\" alt=\"The folder structure for System.CommandLine\"></p> <p>When you publish a project that references <em>System.CommandLine</em>, these resource assembly folders are also copied to the output folder. This can significantly increase the final output size of the app. The resource assemblies for <em>System.CommandLine</em> for example add up to ~260KB while the <em>System.CommandLine.dll</em> file is only ~205KB. Obviously not all libraries contain satellite assemblies, but if they did, you might see your published application size doubling.</p> <h2 id=\"do-you-need-localized-resources-\" class=\"heading-with-anchor\"><a href=\"#do-you-need-localized-resources-\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Do you need localized resources?</a></h2> <p>Obviously those localization assemblies are there for a reason. They contain localized versions of error messages for example. The question is whether or not these assemblies are important to you. Localizing your applications can provide a better user experience, and may be explicitly <em>required</em> for some applications. But the process of localization can also be difficult and somewhat expensive.</p> <p>In some cases, particularly when you're building a web app, you may know that your application will only ever run under a <em>single</em> culture, which may even be <a href=\"https://learn.microsoft.com/en-us/dotnet/fundamentals/runtime-libraries/system-globalization-cultureinfo-invariantculture\">the invariant culture</a>.</p> <p>If that's the case, then you <em>know</em> that those additional culture dlls will never be used, but they'll still be copied to the publish output, and increase the overall size of your published application. It would be nice to be able to exclude these dlls.</p> <h2 id=\"using-globalization-invariant-mode\" class=\"heading-with-anchor\"><a href=\"#using-globalization-invariant-mode\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Using globalization invariant mode</a></h2> <p>I initially thought I might be able to exclude these satellite assemblies by explicitly enabling <a href=\"https://github.com/dotnet/runtime/blob/main/docs/design/features/globalization-invariant-mode.md\">globalization invariant mode</a>. Globalization invariant mode is an opt-in feature in .NET Core that ensures that all culture behave like the invariant culture. This removes the typical dependencies and inconsistencies introduced across different operating systems. It's worth reading <a href=\"https://github.com/dotnet/runtime/blob/main/docs/design/features/globalization-invariant-mode.md\">the docs</a> before enabling this mode to understand all the differences it introduces.</p> <p>There are several ways to enable globalization invariant mode, including setting an MSBuild property, either in your project or at the command line when you publish your app. I added the switch to my project as follows:</p> <pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Project</span> <span class=\"token attr-name\">Sdk</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Microsoft.NET.Sdk<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>PropertyGroup</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>OutputType</span><span class=\"token punctuation\">&gt;</span></span>Exe<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>OutputType</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>TargetFramework</span><span class=\"token punctuation\">&gt;</span></span>net9.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>TargetFramework</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token comment\">&lt;!-- Added this 👇 --&gt;</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>InvariantGlobalization</span><span class=\"token punctuation\">&gt;</span></span>true<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>InvariantGlobalization</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>PropertyGroup</span><span class=\"token punctuation\">&gt;</span></span>\n\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ItemGroup</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>PackageReference</span> <span class=\"token attr-name\">Include</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>System.CommandLine<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">Version</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>2.0.0-beta4.22272.1<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ItemGroup</span><span class=\"token punctuation\">&gt;</span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Project</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre> <p>Unfortunately this has no impact on the publish output 😅 That's not entirely surprising given that this mode is a <em>runtime</em> feature: you can enable this mode with an environment variable or with a <em>runtimeconfig.json</em> switch <a href=\"https://learn.microsoft.com/en-us/dotnet/core/runtime-config/globalization#invariant-mode\">as described here</a>.</p> <p>Fundamentally, globalization invariant mode makes all cultures behave like the invariant culture, but it doesn't affect anything at build or publish time as far as I can tell.</p> <h2 id=\"disabling-copying-of-satellite-assemblies-during-publish\" class=\"heading-with-anchor\"><a href=\"#disabling-copying-of-satellite-assemblies-during-publish\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Disabling copying of satellite assemblies during publish</a></h2> <p>Finally, we come to the solution. The .NET Core 2.1 SDK added support for a new MSBuild property, <code>&lt;SatelliteResourceLanguages&gt;</code>. You can set this property to a semi-colon separated list of satellite resource assembly cultures that <em>should</em> be copied to the build and publish output directories.</p> <p>For example, perhaps you know that you will always be running with the <code>es</code> culture. If so, you can add the <code>&lt;SatelliteResourceLanguages&gt;</code> element to your <em>.csproj</em> file like this:</p> <pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Project</span> <span class=\"token attr-name\">Sdk</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Microsoft.NET.Sdk<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>PropertyGroup</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>OutputType</span><span class=\"token punctuation\">&gt;</span></span>Exe<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>OutputType</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>TargetFramework</span><span class=\"token punctuation\">&gt;</span></span>net9.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>TargetFramework</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token comment\">&lt;!-- Add this 👇 --&gt;</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>SatelliteResourceLanguages</span><span class=\"token punctuation\">&gt;</span></span>es<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>SatelliteResourceLanguages</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>PropertyGroup</span><span class=\"token punctuation\">&gt;</span></span>\n\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ItemGroup</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>PackageReference</span> <span class=\"token attr-name\">Include</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>System.CommandLine<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">Version</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>2.0.0-beta4.22272.1<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ItemGroup</span><span class=\"token punctuation\">&gt;</span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Project</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre> <p>Now when you build or publish the project, only the <code>es</code> folder and its satellite assembly is copied to the build output:</p> <p><img src=\"/content/images/2025/satellites_02.png\" alt=\"Only es has been copied to the build output\"></p> <p>If you want multiple cultures, separate them with a <code>;</code>, for example to include both <code>es</code> and <code>fr</code>:</p> <pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>SatelliteResourceLanguages</span><span class=\"token punctuation\">&gt;</span></span>es;fr<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>SatelliteResourceLanguages</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre> <p>which gives:</p> <p><img src=\"/content/images/2025/satellites_03.png\" alt=\"Only es and fr have been copied to the build output\"></p> <p>If you don't want to copy <em>any</em> of the satellite assemblies, you can use <code>en</code>.</p> <pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>SatelliteResourceLanguages</span><span class=\"token punctuation\">&gt;</span></span>en<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>SatelliteResourceLanguages</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre> <p>and sure enough:</p> <p><img src=\"/content/images/2025/satellites_04.png\" alt=\"None of the assemblies have been copied to the build output\"></p> <h2 id=\"caveats-and-troubleshooting\" class=\"heading-with-anchor\"><a href=\"#caveats-and-troubleshooting\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Caveats and troubleshooting</a></h2> <p>For the most part, this feature works as you would expect, and can potentially significantly reduce the size of the published output for scenarios where you know you're not going to need the satellite assemblies. I only ran into a couple of things to watch out for:</p> <ol><li>You should add the <code>&lt;SatelliteResourceLanguages&gt;</code> to the project that references the NuGet package which contains the resources.</li> <li>You must specify the cultures to keep exactly</li></ol> <p>On the first point, imagine you have a class library which references the <em>System.CommandLine</em> package. This library is then referenced by an ASP.NET Core project. You then publish and deploy the web project, and you don't want to deploy all the satellite assemblies.</p> <p>You might think that you need to add <code>&lt;SatelliteResourceLanguages&gt;</code> to the ASP.NET Core project, but you actually need to add it to the <em>library</em> project, as that's the project that references the <em>System.CommandLine</em> package.</p> <p>This requirements means that you need to keep a close on which packages have satellite assemblies, and which projects are referencing these projects. Alternatively, you can add the <code>&lt;SatelliteResourceLanguages&gt;</code> element to <em>all</em> projects to be on the safe side. One obvious way to do that is using a <em>Directory.Build.props</em>.</p> <pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Project</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>PropertyGroup</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>SatelliteResourceLanguages</span><span class=\"token punctuation\">&gt;</span></span>en<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>SatelliteResourceLanguages</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>PropertyGroup</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Project</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre> <p>The other thing to be aware of is that you must specify the culture exactly. <code>en</code> will ensure there's no satellite assemblies, but otherwise you need to specify the culture the same as the folder in the build output. To use the <em>System.CommandLine</em> example again, you could use <code>es</code>, <code>de</code>, or <code>pt-BR</code>, for example, but you can't use <code>pt</code> or <code>zh</code>, as they don't appear exactly in this form:</p> <p><img src=\"/content/images/2025/satellites_01.png\" alt=\"The folder structure for System.CommandLine\"></p> <p>If you specify a culture that isn't in the output, no error is generated, but no satellite assemblies will be copied.</p> <p>That's about all there is to it. Hopefully you find this tip useful at some point!</p> <h2 id=\"summary\" class=\"heading-with-anchor\"><a href=\"#summary\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Summary</a></h2> <p>In this post I showed how you can avoid copying localization satellite assemblies to the build output by adding the <code>&lt;SatelliteResourceLanguages&gt;</code> property to a project. You can use this property to ensure only specific cultures are copied to the build output, or you can specify <code>en</code> to ensure <em>no</em> satellite assemblies are copied.</p> ",
    "sanitized": "In this brief post I show how to reduce the size of the publish output for .NET apps by preventing the publishing of localization resources when they're not needed. What are localization satellite assemblies? Localization is an important aspect for many applications, and refers to the process of adapting an application such that it uses the paradigms and aspects of the target culture. This is a complex topic in general, and is more than just changing the language; it also involves changing the currencies, number rules, and other culture-specific aspects. The functionality required to work with a given culture is encapsulated in \"satellite\" resource assemblies. These assemblies are named based on the parent assembly, with an added .resources suffix, and placed in a folder corresponding to the appropriate culture.  This document describes the algorithm for how satellite resource assemblies are loaded in .NET Core.  You can see this pattern if you look inside the System.CommandLine package for example. The parent assembly System.CommandLine.dll is in the root folder, and there are System.CommandLine.resources.dll in each of the \"culture\" folders:  When you publish a project that references System.CommandLine, these resource assembly folders are also copied to the output folder. This can significantly increase the final output size of the app. The resource assemblies for System.CommandLine for example add up to ~260KB while the System.CommandLine.dll file is only ~205KB. Obviously not all libraries contain satellite assemblies, but if they did, you might see your published application size doubling. Do you need localized resources? Obviously those localization assemblies are there for a reason. They contain localized versions of error messages for example. The question is whether or not these assemblies are important to you. Localizing your applications can provide a better user experience, and may be explicitly required for some applications. But the process of localization can also be difficult and somewhat expensive. In some cases, particularly when you're building a web app, you may know that your application will only ever run under a single culture, which may even be the invariant culture. If that's the case, then you know that those additional culture dlls will never be used, but they'll still be copied to the publish output, and increase the overall size of your published application. It would be nice to be able to exclude these dlls. Using globalization invariant mode I initially thought I might be able to exclude these satellite assemblies by explicitly enabling globalization invariant mode. Globalization invariant mode is an opt-in feature in .NET Core that ensures that all culture behave like the invariant culture. This removes the typical dependencies and inconsistencies introduced across different operating systems. It's worth reading the docs before enabling this mode to understand all the differences it introduces. There are several ways to enable globalization invariant mode, including setting an MSBuild property, either in your project or at the command line when you publish your app. I added the switch to my project as follows: <Project Sdk=\"Microsoft.NET.Sdk\">\n\n  <PropertyGroup>\n    <OutputType>Exe</OutputType>\n    <TargetFramework>net9.0</TargetFramework>\n    <!-- Added this 👇 -->\n    <InvariantGlobalization>true</InvariantGlobalization>\n  </PropertyGroup>\n\n  <ItemGroup>\n    <PackageReference Include=\"System.CommandLine\" Version=\"2.0.0-beta4.22272.1\" />\n  </ItemGroup>\n\n</Project>\n Unfortunately this has no impact on the publish output 😅 That's not entirely surprising given that this mode is a runtime feature: you can enable this mode with an environment variable or with a runtimeconfig.json switch as described here. Fundamentally, globalization invariant mode makes all cultures behave like the invariant culture, but it doesn't affect anything at build or publish time as far as I can tell. Disabling copying of satellite assemblies during publish Finally, we come to the solution. The .NET Core 2.1 SDK added support for a new MSBuild property, <SatelliteResourceLanguages>. You can set this property to a semi-colon separated list of satellite resource assembly cultures that should be copied to the build and publish output directories. For example, perhaps you know that you will always be running with the es culture. If so, you can add the <SatelliteResourceLanguages> element to your .csproj file like this: <Project Sdk=\"Microsoft.NET.Sdk\">\n\n  <PropertyGroup>\n    <OutputType>Exe</OutputType>\n    <TargetFramework>net9.0</TargetFramework>\n    <!-- Add this 👇 -->\n    <SatelliteResourceLanguages>es</SatelliteResourceLanguages>\n  </PropertyGroup>\n\n  <ItemGroup>\n    <PackageReference Include=\"System.CommandLine\" Version=\"2.0.0-beta4.22272.1\" />\n  </ItemGroup>\n\n</Project>\n Now when you build or publish the project, only the es folder and its satellite assembly is copied to the build output:  If you want multiple cultures, separate them with a ;, for example to include both es and fr: <SatelliteResourceLanguages>es;fr</SatelliteResourceLanguages>\n which gives:  If you don't want to copy any of the satellite assemblies, you can use en. <SatelliteResourceLanguages>en</SatelliteResourceLanguages>\n and sure enough:  Caveats and troubleshooting For the most part, this feature works as you would expect, and can potentially significantly reduce the size of the published output for scenarios where you know you're not going to need the satellite assemblies. I only ran into a couple of things to watch out for: You should add the <SatelliteResourceLanguages> to the project that references the NuGet package which contains the resources. You must specify the cultures to keep exactly On the first point, imagine you have a class library which references the System.CommandLine package. This library is then referenced by an ASP.NET Core project. You then publish and deploy the web project, and you don't want to deploy all the satellite assemblies. You might think that you need to add <SatelliteResourceLanguages> to the ASP.NET Core project, but you actually need to add it to the library project, as that's the project that references the System.CommandLine package. This requirements means that you need to keep a close on which packages have satellite assemblies, and which projects are referencing these projects. Alternatively, you can add the <SatelliteResourceLanguages> element to all projects to be on the safe side. One obvious way to do that is using a Directory.Build.props. <Project>\n  <PropertyGroup>\n    <SatelliteResourceLanguages>en</SatelliteResourceLanguages>\n  </PropertyGroup>\n</Project>\n The other thing to be aware of is that you must specify the culture exactly. en will ensure there's no satellite assemblies, but otherwise you need to specify the culture the same as the folder in the build output. To use the System.CommandLine example again, you could use es, de, or pt-BR, for example, but you can't use pt or zh, as they don't appear exactly in this form:  If you specify a culture that isn't in the output, no error is generated, but no satellite assemblies will be copied. That's about all there is to it. Hopefully you find this tip useful at some point! Summary In this post I showed how you can avoid copying localization satellite assemblies to the build output by adding the <SatelliteResourceLanguages> property to a project. You can use this property to ensure only specific cultures are copied to the build output, or you can specify en to ensure no satellite assemblies are copied."
  },
  {
    "itemId": "https://andrewlock.net/setting-environment-variables-in-iis-and-avoiding-app-pool-restarts/",
    "raw": "<img src=\"https://andrewlock.net/content/images/2025/iis_banner.png\" /><p>I recently needed to set some environment variables for an application that was running in IIS on Windows. It turns out there's <em>lots</em> of different ways to do that. In this post, I describe some of the many ways to do that, both from the Windows and IIS UI and from the command line. For each approach I describe the caveats, advantages, and disadvantages.</p> <h2 id=\"how-does-iis-work-\" class=\"heading-with-anchor\"><a href=\"#how-does-iis-work-\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">How does IIS work?</a></h2> <p>IIS is a huge beast, with decades of legacy, but to understand how to control setting environment variables for an application, it helps to have a basic understanding of how IIS works under the hood. <a href=\"https://learn.microsoft.com/en-us/iis/get-started/introduction-to-iis/introduction-to-iis-architecture\">This introduction to IIS on Microsoft Learn</a> provides a good overview, including the interaction between the main components involved.</p> <p>If we consider how an HTTP request coming from a client reaches an ASP.NET application running in IIS, there are a variety of components to consider:</p> <ul><li><a href=\"https://learn.microsoft.com/en-us/iis/get-started/introduction-to-iis/introduction-to-iis-architecture#hypertext-transfer-protocol-stack-httpsys\"><em>HTTP.sys</em></a> runs as part of Windows. It's a kernel-mode driver that handles HTTP requests from the network, and forwards them to a worker process.</li> <li><em>Windows Process Activation Service (WAS)</em> is responsible for managing and configuration application pool configuration and worker processes.</li> <li><em>World Wide Web Publishing Service (W3SVC)</em> acts as an adapter between WAS and HTTP.sys. It is responsible for updating HTTP.sys when app pool configuration changes, and for notifying WAS when a new request is created. WAS and W3SVC run inside the same process, svchost.exe.</li> <li><em>Application pools</em> are responsible for starting worker processes for handling requests. Multiple sites can be mapped to the same application pool.</li> <li><em>Worker processes</em> are responsible for running the managed and native modules required to handle a request. As the name suggests, worker processes are separated from each other by a process boundary, running in a process called w3wp.exe. However each pool can (optionally) host <em>multiple</em> distinct sites or applications inside the same process. Additionally, a single application pool may optionally contain multiple worker process (termed a <a href=\"https://www.scholarhat.com/tutorial/tools/web-garden-and-web-farm\">web garden</a>).</li></ul> <p>The following diagram shows how the components interact in IIS, when an HTTP request is received from a client.</p> <p><img src=\"/content/images/2025/iis.svg\" alt=\"How IIS processes an HTTP request\"></p> <p>As shown in the diagram, the general flow is as follows:</p> <ol><li>A client sends a request. HTTP.sys intercepts it from the network</li> <li>HTTP.sys contacts W3SVC/WAS to retrieve configuration details for the request.</li> <li>WAS retrieves configuration information for the request, based on global configuration sources the applicationHost.config, and web.config for individual sites.</li> <li>WAS passes the app pool and site configuration to W3SVC which reconfigures HTTP.sys with the config.</li> <li>WAS starts a worker process to handle the incoming request, if one does not already exist.</li> <li>Once the worker process is running, HTTP.sys passes the request details to the worker process, which generates a response and returns it to HTTP.sys.</li> <li>HTTP.sys forwards the request to the client.</li></ol> <p>On subsequent requests, if a worker process already exists, HTTP.sys can forward the request directly to the process. If configuration changes subsequently, WAS creates a new worker process, and W2SVC updates HTTP.sys's configuration.</p> <p>Now we understand the overall process, we can consider how to configure our worker processes.</p> <h2 id=\"changing-the-environment-variables-for-a-worker-process\" class=\"heading-with-anchor\"><a href=\"#changing-the-environment-variables-for-a-worker-process\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Changing the environment variables for a worker process</a></h2> <p>As a reminder, the goal is to change the environment variables for the worker processes, <em>w3wp.exe</em>, which handle our requests. There are a variety of possible ways to do that which I'm going to run through in this post:</p> <ul><li>Set system environment variables</li> <li>Set the environment variables for the W3SVC/WAS service.</li> <li>Set environment variables at the application pool level in applicationHost.config</li></ul> <blockquote> <p>This isn't an exhaustive list. It's also possible to set environment variables for an individual application, and separately for ASP.NET Core applications. In this post I'm looking at how to set variables somewhat \"globally\".</p> </blockquote> <p>We'll start by looking at how to set system environment variables.</p> <h2 id=\"setting-system-environment-variables\" class=\"heading-with-anchor\"><a href=\"#setting-system-environment-variables\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Setting system environment variables</a></h2> <p>The \"system\" environment variables apply to <em>all</em> processes that run on your machine. Typically when you're setting variables using PowerShell you might you syntax something like the following:</p> <pre class=\"language-powershell\"><code class=\"language-powershell\"><span class=\"token variable\">$env</span>:MY_SPECIAL_KEY = <span class=\"token string\">\"Some value\"</span>\n</code></pre> <p>However, that only sets the variable for the current session, rather than setting it globally. It's actually easiest to use the <code>System.Environment</code> .NET type to set the environment variable at the system level:</p> <pre class=\"language-powershell\"><code class=\"language-powershell\"><span class=\"token namespace\">[System.Environment]</span>::SetEnvironmentVariable<span class=\"token punctuation\">(</span><span class=\"token string\">\"MY_SPECIAL_KEY\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Some value\"</span><span class=\"token punctuation\">,</span> <span class=\"token namespace\">[System.EnvironmentVariableTarget]</span>::Machine<span class=\"token punctuation\">)</span>\n</code></pre> <p>After setting the variable, we need to stop the WAS and W3SVC services so that they pick up the environment changes. The easiest way to do this is to run the following from an elevated command/PowerShell prompt:</p> <pre class=\"language-powershell\"><code class=\"language-powershell\"><span class=\"token comment\"># Stop the WAS service. This automatically stops the W3SVC service too.</span>\nnet stop <span class=\"token operator\">/</span>y was\n<span class=\"token comment\"># Restart the services, so they pick up the new variables</span>\nnet <span class=\"token function\">start</span> w3svc\n</code></pre> <p>This is arguably one of the easiest ways to set environment variables for the worker processes, but it's also the most crude. <em>Any</em> process running on the system will retrieve the environment variables, which might not be something you want to do.</p> <blockquote> <p>An easy of example of where you might <em>not</em> want to do this is if you're setting the <a href=\"https://learn.microsoft.com/en-us/dotnet/framework/unmanaged-api/profiling/profiling-overview#the-profiling-api\">.NET profiling API</a> environment variables: setting these at the system level would mean <em>every</em> .NET process on your Windows machine would be processed, which is practically certain to have a significant stability impact.</p> </blockquote> <p>Let's assume we don't want to set the variables at the system level. The next best thing is to set them for the IIS services instead.</p> <h2 id=\"setting-environment-variables-for-w3svc-and-was\" class=\"heading-with-anchor\"><a href=\"#setting-environment-variables-for-w3svc-and-was\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Setting environment variables for W3SVC and WAS</a></h2> <p>W3SVC and WAS run as Windows services, inside an instance of svchost.exe. It's possible to scope environment variables specifically to these services, but to do so, you need to edit the registry.</p> <p>You can add environment variables for a service by editing the <code>HKLM:SYSTEM\\CurrentControlSet\\Services\\&lt;SERVICE NAME&gt;</code> registry key. For example, to add an environment variable to a service called <code>SomeService</code>, you can use something like this:</p> <pre class=\"language-powershell\"><code class=\"language-powershell\"><span class=\"token function\">Set-ItemProperty</span> HKLM:SYSTEM\\CurrentControlSet\\Services\\&lt;SERVICE NAME&gt; <span class=\"token operator\">-</span>Name Environment <span class=\"token operator\">-</span>Value <span class=\"token string\">'MY_SPECIAL_KEY=Something'</span> <span class=\"token operator\">-</span><span class=\"token function\">Type</span> MultiString\n</code></pre> <blockquote> <p>Note that the above example <em>changes</em> the environment variables to the value you provide, it doesn't <em>append</em> to it. If you want to include multiple variables separate the values with a line break, e.g. <code>VAL1=1`r`nVAL2=2</code>.</p> </blockquote> <p>To update the W3SVC and WAS services to ensure they have our environment variables, we can use the following:</p> <pre class=\"language-powershell\"><code class=\"language-powershell\"><span class=\"token function\">Set-ItemProperty</span> HKLM:SYSTEM\\CurrentControlSet\\Services\\W3SVC <span class=\"token operator\">-</span>Name Environment <span class=\"token operator\">-</span>Value <span class=\"token string\">'MY_SPECIAL_KEY=Something'</span> <span class=\"token operator\">-</span><span class=\"token function\">Type</span> MultiString\n<span class=\"token function\">Set-ItemProperty</span> HKLM:SYSTEM\\CurrentControlSet\\Services\\WAS <span class=\"token operator\">-</span>Name Environment <span class=\"token operator\">-</span>Value <span class=\"token string\">'MY_SPECIAL_KEY=Something'</span> <span class=\"token operator\">-</span><span class=\"token function\">Type</span> MultiString\n</code></pre> <p>You can also do this via the Registry Editor UI. Add a new multi-string value to the key called <code>Environment</code>, and add a line in the <code>KEY=VALUE</code> format for each variable</p> <p><img src=\"/content/images/2025/iis_2.png\" alt=\"Updating the environment variables for the WAS service using the registry editor \"></p> <p>Just as when we set the system variables, this doesn't change the variables for the already-running services, so we need to stop and start them again, to ensure they pick up the values from the registry:</p> <pre class=\"language-powershell\"><code class=\"language-powershell\">net stop <span class=\"token operator\">/</span>y was\nnet <span class=\"token function\">start</span> w3svc\n</code></pre> <p>The environment variables you set on the W3SVC and WAS services are inherited by the worker processes that WAS starts, so each w3wp.exe process will have the <code>MY_SPECIAL_KEY</code> variable.</p> <p>This is better than before, in that we've limited the scope of our variable. We're now only applying it to the processes we're interested in.</p> <h2 id=\"setting-environment-variables-in-applicationhost-config\" class=\"heading-with-anchor\"><a href=\"#setting-environment-variables-in-applicationhost-config\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Setting environment variables in applicationHost.config</a></h2> <p>Configuration in IIS combines values from multiple sources: the root <em>web.config</em> file, the <em>applicationHost.config</em> file, <em>web.config</em> files for individual applications etc. I'm not going to go into great detail here, instead we're going to look at a single file: <em>applicationHost.config</em>.</p> <p><em>applicationHost.config</em> contains the definition of your app pools (among many other things) in the <code>&lt;system.applicationHost&gt;</code> section and is what WAS reads when determining how to create worker processes to handle a request. The following is a snippet from an <em>applicationHost.config</em> file that contains two application pools:</p> <pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>system.applicationHost</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>applicationPools</span><span class=\"token punctuation\">&gt;</span></span>\n\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>add</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>DefaultAppPool<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>add</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>dotnet7<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">autoStart</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">managedRuntimeVersion</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>environmentVariables</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>add</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>MY_VAL<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>1<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>environmentVariables</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>add</span><span class=\"token punctuation\">&gt;</span></span>\n\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>applicationPoolDefaults</span> <span class=\"token attr-name\">managedRuntimeVersion</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>v4.0<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>processModel</span> <span class=\"token attr-name\">identityType</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>ApplicationPoolIdentity<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">loadUserProfile</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">setProfileEnvironment</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>false<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>applicationPoolDefaults</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>applicationPools</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre> <p>This configuration defines two application pools using the <code>&lt;add&gt;</code> element:</p> <ul><li><code>DefaultAppPool</code></li> <li><code>dotnet7</code></li></ul> <p>There's also an <code>&lt;applicationPoolDefaults&gt;</code> element which, as you might expect, defines the default behaviour for application pools. individual app pools can override the default behaviour, as you can see where the <code>dotnet7</code> pool has <code>managedRuntimeVersion=\"\"</code> which corresponds to <a href=\"https://learn.microsoft.com/aspnet/core/host-and-deploy/iis/advanced#create-the-iis-site\">the recommended \"No Managed Code\" setting</a> for .NET Core apps.</p> <p>The <code>dotnet7</code> pool in the above example already defines a custom environment variables, indicated by the <a href=\"https://learn.microsoft.com/en-us/iis/configuration/system.applicationHost/applicationPools/add/environmentVariables/#appcmdexe\">nested <code>&lt;environmentVariables&gt;</code> element</a>. This ensures the <em>w3wp.exe</em> worker process also has the environment variable <code>MY_VAL=1</code>.</p> <p>If we want to add environment variables in <em>applicationHost.config</em>, we have two main options:</p> <ul><li>Add an environment variable to the <code>&lt;applicationPoolDefaults&gt;</code> element and inherit the variable in other pools.</li> <li>Add an environment variable to a specific pool, just as the <code>dotnet7</code> pool has. This <em>overrides</em> any values set in <code>&lt;applicationPoolDefaults&gt;</code>; they're <em>not</em> merged at runtime.</li></ul> <p>If we assume that we want to add the environment variable to <em>all</em> worker processes, then we may need to take <em>both</em> approaches. Adding the variable to <code>&lt;applicationPoolDefaults&gt;</code> ensures that all variables <em>without</em> additional configuration will have the environment variable. It also ensures any <em>new</em> pools created will also have the environment variable by default.</p> <p>However, if a pool separately defines its <code>&lt;environmentVariables&gt;</code>, as is the case for the <code>dotnet7</code> pool above, then we must <em>also</em> add the environment variable explicitly to this pool, as it <em>won't</em> inherit the values provided in <code>&lt;applicationPoolDefaults&gt;</code>.</p> <p>There are multiple ways we could modify the <em>applicationHost.config</em> to match our requirements. If you're feeling <em>really</em> brave, you could directly edit the <em>applicationHost.config</em> file found at <em>C:\\Windows\\System32\\inetsrv\\config\\applicationHost.config</em>, but I don't recommend it 😅 Instead I'll show how to make the changes using the IIS UI and using the <code>appcmd.exe</code> tool that comes with IIS.</p> <blockquote> <p>I recently discovered there's also an open source REST API implementation for managing IIS available here: <a href=\"https://github.com/microsoft/IIS.Administration/\">https://github.com/microsoft/IIS.Administration/</a> but I haven't tried using it yet!</p> </blockquote> <h3 id=\"using-the-iis-ui\" class=\"heading-with-anchor\"><a href=\"#using-the-iis-ui\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Using the IIS UI</a></h3> <p>The IIS UI is really… something. To make the changes we want, adding an environment variable to the <code>&lt;applicationPoolDefaults&gt;</code> element and to each of the application pools, we need to click around <em>dozens</em> of times 😅 I'll describe the flow here, but I've only included a few key screenshots:</p> <ol><li>Go to the root of the IIS Server Manager UI, and open Configuration Editor</li> <li>From the drop-down, select the <code>system.applicationHost/applicationPools</code> section:</li></ol> <p><img src=\"/content/images/2025/iis_3.png\" alt=\"Setting the system.applicationHost/applicationPools section\"></p> <ol start=\"3\"><li>Expand the <code>applicationPoolDefaults</code> element, click on <code>environmentVariables</code>, and click the ellipsis (…) on the right hand side, which opens the collection editor.</li></ol> <p><img src=\"/content/images/2025/iis_4.png\" alt=\"Editing the applicationPoolDefaults environemntVariables \"></p> <ol start=\"4\"><li>You can add environment variables to the collection by clicking <strong>Add</strong> in the right panel and entering the key and value in the lower pane.</li></ol> <p><img src=\"/content/images/2025/iis_5.png\" alt=\"Adding an environemntVariable \"></p> <ol start=\"5\"><li>Once you've added all the variables you need, close the window.</li> <li>Open the app pool collection, by clicking the ellipsis (…) on the top row where it says <strong>(Collection)</strong></li> <li>This opens the application pools list. Choose a pool to edit from the top pane.</li> <li>In the bottom pane, click on <code>environmentVariables</code>, and click the ellipsis (…) on the right hand side, which opens the collection editor.</li></ol> <p><img src=\"/content/images/2025/iis_5.png\" alt=\"Editing the environemntVariables for a specific pool \"></p> <ol start=\"9\"><li>As before, add environment variables to the collection by clicking <strong>Add</strong> in the right panel and entering the key and value in the lower pane.</li> <li>Close the environment variable collection window, and repeat steps 8 and 9 for each app pool.</li> <li>After you've made all the required changes, Close the application pool window.</li> <li>Click <strong>Apply</strong> from the right hand pane, to update the application pools and to restart all the worker processes.</li></ol> <p>After working through all these steps our <em>applicationHost.config</em> looks something like this:</p> <pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>applicationPools</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>add</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>DefaultAppPool<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>add</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>dotnet7<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">autoStart</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">managedRuntimeVersion</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>environmentVariables</span><span class=\"token punctuation\">&gt;</span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>add</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>MY_VAL<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>1<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>add</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>MY_SPECIAL_KEY<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Something<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>environmentVariables</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>add</span><span class=\"token punctuation\">&gt;</span></span>\n\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>applicationPoolDefaults</span> <span class=\"token attr-name\">managedRuntimeVersion</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>v4.0<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>processModel</span> <span class=\"token attr-name\">identityType</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>ApplicationPoolIdentity<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">loadUserProfile</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">setProfileEnvironment</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>false<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>environmentVariables</span><span class=\"token punctuation\">&gt;</span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>add</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>MY_SPECIAL_KEY<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Something<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>environmentVariables</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>applicationPoolDefaults</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>applicationPools</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre> <p>You can see that both the <code>dotnet7</code> and <code>applicationPoolDefaults</code> elements have the environment variable we want. I chose <em>not</em> to add it to <code>DefaultAppPool</code> in this case, as it inherits the default environment variables, but you could have added it there as well.</p> <p>Using the IIS UI is \"easy\" but it's definitely convoluted. A better approach is to use the command line.</p> <h3 id=\"using-appcmd-exe\" class=\"heading-with-anchor\"><a href=\"#using-appcmd-exe\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Using appcmd.exe</a></h3> <p><em>appcmd.exe</em> ships with IIS, and provides a somewhat easier way to interact with <em>applicationHost.config</em>. That said, this is still a pretty old command line program, so it's not the prettiest!</p> <p>Viewing the help for <code>appcmd.exe</code> you can see there's a <em>lot</em> you can do with it:</p> <pre class=\"language-cmd\"><code class=\"language-cmd\"><span class=\"token command\"><span class=\"token keyword\">C</span><span class=\"token label property\">:\\Windows\\System32\\inetsrv\\appcmd.exe</span> <span class=\"token parameter attr-name\">/?</span></span>\n\n<span class=\"token command\"><span class=\"token keyword\">General</span> purpose IIS command line administration tool.</span>\n\n<span class=\"token command\"><span class=\"token keyword\">APPCMD</span> (command</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token command\"><span class=\"token keyword\">object</span>-type</span><span class=\"token punctuation\">)</span> &lt;identifier&gt; &lt;/parameter1:value1 ...&gt;\n\n<span class=\"token command\"><span class=\"token keyword\">Supported</span> object types:</span>\n\n  <span class=\"token command\"><span class=\"token keyword\">SITE</span>      Administration of virtual sites</span>\n  <span class=\"token command\"><span class=\"token keyword\">APP</span>       Administration of applications</span>\n  <span class=\"token command\"><span class=\"token keyword\">VDIR</span>      Administration of virtual directories</span>\n  <span class=\"token command\"><span class=\"token keyword\">APPPOOL</span>   Administration of application pools</span>\n  <span class=\"token command\"><span class=\"token keyword\">CONFIG</span>    Administration of general configuration sections</span>\n  <span class=\"token command\"><span class=\"token keyword\">WP</span>        Administration of worker processes</span>\n  <span class=\"token command\"><span class=\"token keyword\">REQUEST</span>   Administration of HTTP requests</span>\n  <span class=\"token command\"><span class=\"token keyword\">MODULE</span>    Administration of server modules</span>\n  <span class=\"token command\"><span class=\"token keyword\">BACKUP</span>    Administration of server configuration backups</span>\n  <span class=\"token command\"><span class=\"token keyword\">TRACE</span>     Working with failed request trace logs</span>\n  <span class=\"token command\"><span class=\"token keyword\">BINDING</span>   Object for working with SSL bindings</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token command\"><span class=\"token keyword\">To</span> list commands supported by each object use /?, e.g. 'appcmd.exe site /?'</span><span class=\"token punctuation\">)</span>\n</code></pre> <p>We're going to be working with the <code>config</code> command. We can perform the same modifications as in the previous section with a single <em>large</em> command. I've broken it over multiple lines for clarity, but you should remove these before running the command yourself</p> <pre class=\"language-powershell\"><code class=\"language-powershell\">C:\\Windows\\System32\\inetsrv\\appcmd<span class=\"token punctuation\">.</span>exe <span class=\"token function\">set</span> config <span class=\"token operator\">-</span>section:system<span class=\"token punctuation\">.</span>applicationHost/applicationPools\n  <span class=\"token operator\">/</span><span class=\"token operator\">+</span><span class=\"token string\">\"[name='dotnet7'].environmentVariables.[name='MY_SPECIAL_KEY',value='Something']\"</span>\n  <span class=\"token operator\">/</span><span class=\"token operator\">+</span><span class=\"token string\">\"applicationPoolDefaults.environmentVariables.[name='MY_SPECIAL_KEY',value='Something']\"</span>\n  <span class=\"token operator\">/</span>commit:apphost<span class=\"token punctuation\">;</span>\n</code></pre> <p>Note that the above command <em>adds</em> the environment variables if they don't exist, but it will fail if the variables already exist. To <em>update</em> an existing value, you should use syntax similar to the following:</p> <pre class=\"language-powershell\"><code class=\"language-powershell\">C:\\Windows\\System32\\inetsrv\\appcmd<span class=\"token punctuation\">.</span>exe <span class=\"token function\">set</span> config <span class=\"token operator\">-</span>section:system<span class=\"token punctuation\">.</span>applicationHost/applicationPools\n  <span class=\"token operator\">/</span><span class=\"token string\">\"[name='dotnet7'].environmentVariables.[name='MY_SPECIAL_KEY'].value:'Something'\"</span>\n  <span class=\"token operator\">/</span><span class=\"token string\">\"applicationPoolDefaults.environmentVariables.[name='MY_SPECIAL_KEY'].value:'Something'\"</span>\n  <span class=\"token operator\">/</span>commit:apphost<span class=\"token punctuation\">;</span>\n</code></pre> <p>The differences in the above command are subtle:</p> <ul><li>Use <code>/+</code> to <em>add</em> a value; use <code>/</code> when updating a variable</li> <li>When adding a new environment variable, define both the <code>name</code> and <code>value</code> attributes in an array</li> <li>When updating the value of an existing environment variable, use <code>.value:'&lt;VALUE&gt;'</code></li></ul> <blockquote> <p>It took me a while to figure out the syntax for how to <em>update</em> these values when they already exist. If it wasn't for <a href=\"https://blogs.iis.net/eokim/understanding-appcmd-exe-list-set-config-configurationpath-section-name-parameter-name-value\">this guide</a> I would probably have given up entirely 😅</p> </blockquote> <p>Theoretically, this blog should be finished, but I wanted to show just one more \"trick\", and that's how to avoid automatically restarting your worker pools when you update <em>applicationHost.config</em>.</p> <h2 id=\"avoiding-app-pool-restarts-on-configuration-changes\" class=\"heading-with-anchor\"><a href=\"#avoiding-app-pool-restarts-on-configuration-changes\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Avoiding app-pool restarts on configuration changes</a></h2> <p>By default, whenever you make changes to <em>applicationhost.config</em>, your app pools will be restarted. This makes sense: if you've made a change to configuration, you <em>probably</em> want the new configuration to be applied as soon as possible.</p> <p>However, restarting an application pool might result in down time for your application, if requests arrive and cannot be serviced while the worker process is being killed and restarted. In some cases you don't need the configuration to be applied <em>immediately</em> and might be willing to wait until the app pool is restarted \"naturally\", when a new version of the app is deployed for example.</p> <p>The <code>&lt;environmentVariables&gt;</code> element nested inside <code>&lt;applicationPools&gt;</code> has a sibling element, <code>&lt;recycling&gt;</code> which controls some of the characteristics of application pool recycling. Of particular interest to us is the <code>disallowRotationOnConfigChange</code> attribute, which exists on both individual app pools and on <code>&lt;applicationPoolDefaults&gt;</code>:</p> <pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>applicationPools</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>add</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>DefaultAppPool<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>add</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>dotnet7<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">autoStart</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">managedRuntimeVersion</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>environmentVariables</span><span class=\"token punctuation\">&gt;</span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>add</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>MY_SPECIAL_KEY<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token punctuation\">'</span>Something<span class=\"token punctuation\">'</span><span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>environmentVariables</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token comment\">&lt;!-- 👇 Pool-specific recycling settings --&gt;</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>recycling</span> <span class=\"token attr-name\">disallowRotationOnConfigChange</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>false<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>add</span><span class=\"token punctuation\">&gt;</span></span>\n\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>applicationPoolDefaults</span> <span class=\"token attr-name\">managedRuntimeVersion</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>v4.0<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>processModel</span> <span class=\"token attr-name\">identityType</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>ApplicationPoolIdentity<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">loadUserProfile</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">setProfileEnvironment</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>false<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>environmentVariables</span><span class=\"token punctuation\">&gt;</span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>add</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>MY_SPECIAL_KEY<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token punctuation\">'</span>Something<span class=\"token punctuation\">'</span><span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>environmentVariables</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token comment\">&lt;!-- 👇 Default recycling settings for pools that don't override --&gt;</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>recycling</span> <span class=\"token attr-name\">disallowRotationOnConfigChange</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>applicationPoolDefaults</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>applicationPools</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre> <p><code>disallowRotationOnConfigChange</code> defaults to <code>false</code>. This means that when when the configuration of an application pool changes, the W3SVC service causes the worker process with the old configuration to be shut down. A new worker process, which uses the new configuration, is created in its place.</p> <p>If you set <code>disallowRotationOnConfigChange</code> to <code>true</code>, this rotation no longer happens. The worker process with the old configuration keeps running and handling requests. The next time the app pool is recycled for some reason, the worker process will naturally pick up the new configuration.</p> <p>Interestingly, changing the value of this property <em>doesn't</em> trigger a configuration change itself, whether you're setting the value to <code>true</code> or <code>false</code>. This provides a mechanism for <em>temporarily</em> disabling the recycling, for a specific configuration change, by temporarily enabling recycling. For example, we could add our variables while also <em>not</em> forcing recycling, using something like the following:</p> <pre class=\"language-powershell\"><code class=\"language-powershell\">C:\\Windows\\System32\\inetsrv\\appcmd<span class=\"token punctuation\">.</span>exe <span class=\"token function\">set</span> config <span class=\"token operator\">-</span>section:system<span class=\"token punctuation\">.</span>applicationHost/applicationPools\n  <span class=\"token operator\">/</span><span class=\"token string\">\"[name='dotnet7'].recycling.disallowRotationOnConfigChange:true\"</span>\n  <span class=\"token operator\">/</span><span class=\"token string\">\"applicationPoolDefaults.recycling.disallowRotationOnConfigChange:true\"</span>\n  <span class=\"token operator\">/</span><span class=\"token operator\">+</span><span class=\"token string\">\"[name='dotnet7'].environmentVariables.[name='MY_SPECIAL_KEY',value='Something']\"</span>\n  <span class=\"token operator\">/</span><span class=\"token operator\">+</span><span class=\"token string\">\"applicationPoolDefaults.environmentVariables.[name='MY_SPECIAL_KEY',value='Something']\"</span>\n  <span class=\"token operator\">/</span>commit:apphost<span class=\"token punctuation\">;</span>\n</code></pre> <p>This applies the configuration without restarting the app pool. We can then restore the original behaviour subsequently by setting the property to <code>false</code>:</p> <pre class=\"language-powershell\"><code class=\"language-powershell\">C:\\Windows\\System32\\inetsrv\\appcmd<span class=\"token punctuation\">.</span>exe <span class=\"token function\">set</span> config <span class=\"token operator\">-</span>section:system<span class=\"token punctuation\">.</span>applicationHost/applicationPools\n  <span class=\"token operator\">/</span><span class=\"token string\">\"[name='dotnet7'].recycling.disallowRotationOnConfigChange:false\"</span>\n  <span class=\"token operator\">/</span><span class=\"token string\">\"applicationPoolDefaults.recycling.disallowRotationOnConfigChange:false\"</span>\n  <span class=\"token operator\">/</span>commit:apphost<span class=\"token punctuation\">;</span>\n</code></pre> <p>And with that we have a mechanism for applying configurations with restarts. It feels like a bit of a hack, but hey, it works!</p> <h2 id=\"summary\" class=\"heading-with-anchor\"><a href=\"#summary\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Summary</a></h2> <p>In this post I began by describing the basic architecture of IIS and some of its components, such as HTTP.sys, W3SVC and WAS. I then described some of the ways to apply environment variables to IIS worker processes, starting with setting system environment variables, followed by setting service-level variables to W3SVC and WAS, and finally using <em>applicationHost.config</em> to add environment variables either to the application pool defaults or to specific application pools.</p> <p>As a bonus, I showed how you can use the <code>recycling.disallowRotationOnConfigChange</code> attribute to prevent application pools from restarting automatically when you change its configuration.</p> ",
    "sanitized": "I recently needed to set some environment variables for an application that was running in IIS on Windows. It turns out there's lots of different ways to do that. In this post, I describe some of the many ways to do that, both from the Windows and IIS UI and from the command line. For each approach I describe the caveats, advantages, and disadvantages. How does IIS work? IIS is a huge beast, with decades of legacy, but to understand how to control setting environment variables for an application, it helps to have a basic understanding of how IIS works under the hood. This introduction to IIS on Microsoft Learn provides a good overview, including the interaction between the main components involved. If we consider how an HTTP request coming from a client reaches an ASP.NET application running in IIS, there are a variety of components to consider: HTTP.sys runs as part of Windows. It's a kernel-mode driver that handles HTTP requests from the network, and forwards them to a worker process. Windows Process Activation Service (WAS) is responsible for managing and configuration application pool configuration and worker processes. World Wide Web Publishing Service (W3SVC) acts as an adapter between WAS and HTTP.sys. It is responsible for updating HTTP.sys when app pool configuration changes, and for notifying WAS when a new request is created. WAS and W3SVC run inside the same process, svchost.exe. Application pools are responsible for starting worker processes for handling requests. Multiple sites can be mapped to the same application pool. Worker processes are responsible for running the managed and native modules required to handle a request. As the name suggests, worker processes are separated from each other by a process boundary, running in a process called w3wp.exe. However each pool can (optionally) host multiple distinct sites or applications inside the same process. Additionally, a single application pool may optionally contain multiple worker process (termed a web garden). The following diagram shows how the components interact in IIS, when an HTTP request is received from a client.  As shown in the diagram, the general flow is as follows: A client sends a request. HTTP.sys intercepts it from the network HTTP.sys contacts W3SVC/WAS to retrieve configuration details for the request. WAS retrieves configuration information for the request, based on global configuration sources the applicationHost.config, and web.config for individual sites. WAS passes the app pool and site configuration to W3SVC which reconfigures HTTP.sys with the config. WAS starts a worker process to handle the incoming request, if one does not already exist. Once the worker process is running, HTTP.sys passes the request details to the worker process, which generates a response and returns it to HTTP.sys. HTTP.sys forwards the request to the client. On subsequent requests, if a worker process already exists, HTTP.sys can forward the request directly to the process. If configuration changes subsequently, WAS creates a new worker process, and W2SVC updates HTTP.sys's configuration. Now we understand the overall process, we can consider how to configure our worker processes. Changing the environment variables for a worker process As a reminder, the goal is to change the environment variables for the worker processes, w3wp.exe, which handle our requests. There are a variety of possible ways to do that which I'm going to run through in this post: Set system environment variables Set the environment variables for the W3SVC/WAS service. Set environment variables at the application pool level in applicationHost.config  This isn't an exhaustive list. It's also possible to set environment variables for an individual application, and separately for ASP.NET Core applications. In this post I'm looking at how to set variables somewhat \"globally\".  We'll start by looking at how to set system environment variables. Setting system environment variables The \"system\" environment variables apply to all processes that run on your machine. Typically when you're setting variables using PowerShell you might you syntax something like the following: $env:MY_SPECIAL_KEY = \"Some value\"\n However, that only sets the variable for the current session, rather than setting it globally. It's actually easiest to use the System.Environment .NET type to set the environment variable at the system level: [System.Environment]::SetEnvironmentVariable(\"MY_SPECIAL_KEY\", \"Some value\", [System.EnvironmentVariableTarget]::Machine)\n After setting the variable, we need to stop the WAS and W3SVC services so that they pick up the environment changes. The easiest way to do this is to run the following from an elevated command/PowerShell prompt: # Stop the WAS service. This automatically stops the W3SVC service too.\nnet stop /y was\n# Restart the services, so they pick up the new variables\nnet start w3svc\n This is arguably one of the easiest ways to set environment variables for the worker processes, but it's also the most crude. Any process running on the system will retrieve the environment variables, which might not be something you want to do.  An easy of example of where you might not want to do this is if you're setting the .NET profiling API environment variables: setting these at the system level would mean every .NET process on your Windows machine would be processed, which is practically certain to have a significant stability impact.  Let's assume we don't want to set the variables at the system level. The next best thing is to set them for the IIS services instead. Setting environment variables for W3SVC and WAS W3SVC and WAS run as Windows services, inside an instance of svchost.exe. It's possible to scope environment variables specifically to these services, but to do so, you need to edit the registry. You can add environment variables for a service by editing the HKLM:SYSTEM\\CurrentControlSet\\Services\\<SERVICE NAME> registry key. For example, to add an environment variable to a service called SomeService, you can use something like this: Set-ItemProperty HKLM:SYSTEM\\CurrentControlSet\\Services\\<SERVICE NAME> -Name Environment -Value 'MY_SPECIAL_KEY=Something' -Type MultiString\n  Note that the above example changes the environment variables to the value you provide, it doesn't append to it. If you want to include multiple variables separate the values with a line break, e.g. VAL1=1`r`nVAL2=2.  To update the W3SVC and WAS services to ensure they have our environment variables, we can use the following: Set-ItemProperty HKLM:SYSTEM\\CurrentControlSet\\Services\\W3SVC -Name Environment -Value 'MY_SPECIAL_KEY=Something' -Type MultiString\nSet-ItemProperty HKLM:SYSTEM\\CurrentControlSet\\Services\\WAS -Name Environment -Value 'MY_SPECIAL_KEY=Something' -Type MultiString\n You can also do this via the Registry Editor UI. Add a new multi-string value to the key called Environment, and add a line in the KEY=VALUE format for each variable  Just as when we set the system variables, this doesn't change the variables for the already-running services, so we need to stop and start them again, to ensure they pick up the values from the registry: net stop /y was\nnet start w3svc\n The environment variables you set on the W3SVC and WAS services are inherited by the worker processes that WAS starts, so each w3wp.exe process will have the MY_SPECIAL_KEY variable. This is better than before, in that we've limited the scope of our variable. We're now only applying it to the processes we're interested in. Setting environment variables in applicationHost.config Configuration in IIS combines values from multiple sources: the root web.config file, the applicationHost.config file, web.config files for individual applications etc. I'm not going to go into great detail here, instead we're going to look at a single file: applicationHost.config. applicationHost.config contains the definition of your app pools (among many other things) in the <system.applicationHost> section and is what WAS reads when determining how to create worker processes to handle a request. The following is a snippet from an applicationHost.config file that contains two application pools: <system.applicationHost>\n  <applicationPools>\n\n    <add name=\"DefaultAppPool\" />\n    <add name=\"dotnet7\" autoStart=\"true\" managedRuntimeVersion=\"\">\n      <environmentVariables>\n        <add name=\"MY_VAL\" value=\"1\" />\n      </environmentVariables>\n    </add>\n\n    <applicationPoolDefaults managedRuntimeVersion=\"v4.0\">\n      <processModel identityType=\"ApplicationPoolIdentity\" loadUserProfile=\"true\" setProfileEnvironment=\"false\" />\n    </applicationPoolDefaults>\n  </applicationPools>\n This configuration defines two application pools using the <add> element: DefaultAppPool dotnet7 There's also an <applicationPoolDefaults> element which, as you might expect, defines the default behaviour for application pools. individual app pools can override the default behaviour, as you can see where the dotnet7 pool has managedRuntimeVersion=\"\" which corresponds to the recommended \"No Managed Code\" setting for .NET Core apps. The dotnet7 pool in the above example already defines a custom environment variables, indicated by the nested <environmentVariables> element. This ensures the w3wp.exe worker process also has the environment variable MY_VAL=1. If we want to add environment variables in applicationHost.config, we have two main options: Add an environment variable to the <applicationPoolDefaults> element and inherit the variable in other pools. Add an environment variable to a specific pool, just as the dotnet7 pool has. This overrides any values set in <applicationPoolDefaults>; they're not merged at runtime. If we assume that we want to add the environment variable to all worker processes, then we may need to take both approaches. Adding the variable to <applicationPoolDefaults> ensures that all variables without additional configuration will have the environment variable. It also ensures any new pools created will also have the environment variable by default. However, if a pool separately defines its <environmentVariables>, as is the case for the dotnet7 pool above, then we must also add the environment variable explicitly to this pool, as it won't inherit the values provided in <applicationPoolDefaults>. There are multiple ways we could modify the applicationHost.config to match our requirements. If you're feeling really brave, you could directly edit the applicationHost.config file found at C:\\Windows\\System32\\inetsrv\\config\\applicationHost.config, but I don't recommend it 😅 Instead I'll show how to make the changes using the IIS UI and using the appcmd.exe tool that comes with IIS.  I recently discovered there's also an open source REST API implementation for managing IIS available here: https://github.com/microsoft/IIS.Administration/ but I haven't tried using it yet!  Using the IIS UI The IIS UI is really… something. To make the changes we want, adding an environment variable to the <applicationPoolDefaults> element and to each of the application pools, we need to click around dozens of times 😅 I'll describe the flow here, but I've only included a few key screenshots: Go to the root of the IIS Server Manager UI, and open Configuration Editor From the drop-down, select the system.applicationHost/applicationPools section:  Expand the applicationPoolDefaults element, click on environmentVariables, and click the ellipsis (…) on the right hand side, which opens the collection editor.  You can add environment variables to the collection by clicking Add in the right panel and entering the key and value in the lower pane.  Once you've added all the variables you need, close the window. Open the app pool collection, by clicking the ellipsis (…) on the top row where it says (Collection) This opens the application pools list. Choose a pool to edit from the top pane. In the bottom pane, click on environmentVariables, and click the ellipsis (…) on the right hand side, which opens the collection editor.  As before, add environment variables to the collection by clicking Add in the right panel and entering the key and value in the lower pane. Close the environment variable collection window, and repeat steps 8 and 9 for each app pool. After you've made all the required changes, Close the application pool window. Click Apply from the right hand pane, to update the application pools and to restart all the worker processes. After working through all these steps our applicationHost.config looks something like this: <applicationPools>\n  <add name=\"DefaultAppPool\" />\n  <add name=\"dotnet7\" autoStart=\"true\" managedRuntimeVersion=\"\">\n    <environmentVariables>\n      <add name=\"MY_VAL\" value=\"1\" />\n      <add name=\"MY_SPECIAL_KEY\" value=\"Something\" />\n    </environmentVariables>\n  </add>\n\n  <applicationPoolDefaults managedRuntimeVersion=\"v4.0\">\n    <processModel identityType=\"ApplicationPoolIdentity\" loadUserProfile=\"true\" setProfileEnvironment=\"false\" />\n    <environmentVariables>\n      <add name=\"MY_SPECIAL_KEY\" value=\"Something\" />\n    </environmentVariables>\n  </applicationPoolDefaults>\n</applicationPools>\n You can see that both the dotnet7 and applicationPoolDefaults elements have the environment variable we want. I chose not to add it to DefaultAppPool in this case, as it inherits the default environment variables, but you could have added it there as well. Using the IIS UI is \"easy\" but it's definitely convoluted. A better approach is to use the command line. Using appcmd.exe appcmd.exe ships with IIS, and provides a somewhat easier way to interact with applicationHost.config. That said, this is still a pretty old command line program, so it's not the prettiest! Viewing the help for appcmd.exe you can see there's a lot you can do with it: C:\\Windows\\System32\\inetsrv\\appcmd.exe /?\n\nGeneral purpose IIS command line administration tool.\n\nAPPCMD (command) (object-type) <identifier> </parameter1:value1 ...>\n\nSupported object types:\n\n  SITE      Administration of virtual sites\n  APP       Administration of applications\n  VDIR      Administration of virtual directories\n  APPPOOL   Administration of application pools\n  CONFIG    Administration of general configuration sections\n  WP        Administration of worker processes\n  REQUEST   Administration of HTTP requests\n  MODULE    Administration of server modules\n  BACKUP    Administration of server configuration backups\n  TRACE     Working with failed request trace logs\n  BINDING   Object for working with SSL bindings\n\n(To list commands supported by each object use /?, e.g. 'appcmd.exe site /?')\n We're going to be working with the config command. We can perform the same modifications as in the previous section with a single large command. I've broken it over multiple lines for clarity, but you should remove these before running the command yourself C:\\Windows\\System32\\inetsrv\\appcmd.exe set config -section:system.applicationHost/applicationPools\n  /+\"[name='dotnet7'].environmentVariables.[name='MY_SPECIAL_KEY',value='Something']\"\n  /+\"applicationPoolDefaults.environmentVariables.[name='MY_SPECIAL_KEY',value='Something']\"\n  /commit:apphost;\n Note that the above command adds the environment variables if they don't exist, but it will fail if the variables already exist. To update an existing value, you should use syntax similar to the following: C:\\Windows\\System32\\inetsrv\\appcmd.exe set config -section:system.applicationHost/applicationPools\n  /\"[name='dotnet7'].environmentVariables.[name='MY_SPECIAL_KEY'].value:'Something'\"\n  /\"applicationPoolDefaults.environmentVariables.[name='MY_SPECIAL_KEY'].value:'Something'\"\n  /commit:apphost;\n The differences in the above command are subtle: Use /+ to add a value; use / when updating a variable When adding a new environment variable, define both the name and value attributes in an array When updating the value of an existing environment variable, use .value:'<VALUE>'  It took me a while to figure out the syntax for how to update these values when they already exist. If it wasn't for this guide I would probably have given up entirely 😅  Theoretically, this blog should be finished, but I wanted to show just one more \"trick\", and that's how to avoid automatically restarting your worker pools when you update applicationHost.config. Avoiding app-pool restarts on configuration changes By default, whenever you make changes to applicationhost.config, your app pools will be restarted. This makes sense: if you've made a change to configuration, you probably want the new configuration to be applied as soon as possible. However, restarting an application pool might result in down time for your application, if requests arrive and cannot be serviced while the worker process is being killed and restarted. In some cases you don't need the configuration to be applied immediately and might be willing to wait until the app pool is restarted \"naturally\", when a new version of the app is deployed for example. The <environmentVariables> element nested inside <applicationPools> has a sibling element, <recycling> which controls some of the characteristics of application pool recycling. Of particular interest to us is the disallowRotationOnConfigChange attribute, which exists on both individual app pools and on <applicationPoolDefaults>: <applicationPools>\n  <add name=\"DefaultAppPool\" />\n  <add name=\"dotnet7\" autoStart=\"true\" managedRuntimeVersion=\"\">\n    <environmentVariables>\n      <add name=\"MY_SPECIAL_KEY\" value=\"'Something'\" />\n    </environmentVariables>\n    <!-- 👇 Pool-specific recycling settings -->\n    <recycling disallowRotationOnConfigChange=\"false\" />\n  </add>\n\n  <applicationPoolDefaults managedRuntimeVersion=\"v4.0\">\n    <processModel identityType=\"ApplicationPoolIdentity\" loadUserProfile=\"true\" setProfileEnvironment=\"false\" />\n    <environmentVariables>\n      <add name=\"MY_SPECIAL_KEY\" value=\"'Something'\" />\n    </environmentVariables>\n    <!-- 👇 Default recycling settings for pools that don't override -->\n    <recycling disallowRotationOnConfigChange=\"true\" />\n  </applicationPoolDefaults>\n</applicationPools>\n disallowRotationOnConfigChange defaults to false. This means that when when the configuration of an application pool changes, the W3SVC service causes the worker process with the old configuration to be shut down. A new worker process, which uses the new configuration, is created in its place. If you set disallowRotationOnConfigChange to true, this rotation no longer happens. The worker process with the old configuration keeps running and handling requests. The next time the app pool is recycled for some reason, the worker process will naturally pick up the new configuration. Interestingly, changing the value of this property doesn't trigger a configuration change itself, whether you're setting the value to true or false. This provides a mechanism for temporarily disabling the recycling, for a specific configuration change, by temporarily enabling recycling. For example, we could add our variables while also not forcing recycling, using something like the following: C:\\Windows\\System32\\inetsrv\\appcmd.exe set config -section:system.applicationHost/applicationPools\n  /\"[name='dotnet7'].recycling.disallowRotationOnConfigChange:true\"\n  /\"applicationPoolDefaults.recycling.disallowRotationOnConfigChange:true\"\n  /+\"[name='dotnet7'].environmentVariables.[name='MY_SPECIAL_KEY',value='Something']\"\n  /+\"applicationPoolDefaults.environmentVariables.[name='MY_SPECIAL_KEY',value='Something']\"\n  /commit:apphost;\n This applies the configuration without restarting the app pool. We can then restore the original behaviour subsequently by setting the property to false: C:\\Windows\\System32\\inetsrv\\appcmd.exe set config -section:system.applicationHost/applicationPools\n  /\"[name='dotnet7'].recycling.disallowRotationOnConfigChange:false\"\n  /\"applicationPoolDefaults.recycling.disallowRotationOnConfigChange:false\"\n  /commit:apphost;\n And with that we have a mechanism for applying configurations with restarts. It feels like a bit of a hack, but hey, it works! Summary In this post I began by describing the basic architecture of IIS and some of its components, such as HTTP.sys, W3SVC and WAS. I then described some of the ways to apply environment variables to IIS worker processes, starting with setting system environment variables, followed by setting service-level variables to W3SVC and WAS, and finally using applicationHost.config to add environment variables either to the application pool defaults or to specific application pools. As a bonus, I showed how you can use the recycling.disallowRotationOnConfigChange attribute to prevent application pools from restarting automatically when you change its configuration."
  },
  {
    "itemId": "https://andrewlock.net/preventing-client-side-cross-site-scripting-vulnerabilities-with-trusted-types/",
    "raw": "<img src=\"https://andrewlock.net/content/images/2025/trusted_types_banner.png\" /><p>In this post I describe how to use the Trusted Types directive as part of <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP\">the Content-Security-Policy (CSP) feature</a> to prevent against cross-site-scripting (XSS) attacks. I'll start by demonstrating how a cross-site scripting attack works, focusing on client-side, DOM-based attacks using dangerous APIs.</p> <p>After demonstrating the issue, I'll show how you can use Trusted Types to close the vulnerabilities in these APIs, and how Trusted Types work. After closing these vulnerabilities, I'll show several ways to work Trusted Types: by using safe APIs, by using sanitisation libraries, and by creating Trusted Types using policies.</p> <blockquote> <p>It's worth noting that the Trusted Types API is currently only available in Chromium based browsers, but it has been available in Chromium since version 83, released in 2020.</p> </blockquote> <h2 id=\"dom-based-client-side-cross-site-scripting\" class=\"heading-with-anchor\"><a href=\"#dom-based-client-side-cross-site-scripting\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">DOM-based client-side cross-site-scripting</a></h2> <p>Cross-site-scripting generally occurs where you allow input from a user to be directly written, unsanitised, into an HTML page in some way. This can occur in server side apps when generating HTML, for example if you use the <code>@Html.Raw()</code> method in Razor.</p> <p>A similar vulnerability exists on the client-side if you allow user data to be written unsanitised into the DOM. This input could come from a URL parameter or <code>postMessage</code> channel for example, and it becomes problematic if you use it directly in some APIs like <a href=\"https://developer.mozilla.org/docs/Web/API/Element/innerHTML\"><code>Element.innerHTML</code></a>, <code>eval</code>, or <code>setTimeout</code>, for example.</p> <p>To demonstrate the issue, The following shows part of a very simple HTML page returned from an ASP.NET Core app. It contains a single \"target\" <code>&lt;div&gt;</code> element which initially contains some text to be replaced. There is also a simple <code>&lt;script&gt;</code> block which reads a <code>username</code> parameter from the URL's querystring, and writes the name as an <code>&lt;h1&gt;</code> tag using the <code>innerHTML</code> property.</p> <blockquote> <p>Remember, this code contains an XSS vulnerability, it's just for demo purposes!</p> </blockquote> <pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>target<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>To be replaced<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text/javascript<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n    const urlParams = new URLSearchParams(window.location.search);\n    const username = urlParams.get('username') || 'no user';\n    \n    // set the username\n    const target = document.getElementById('target');\n    const inner = '<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">&gt;</span></span>' + username + '<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span>';\n    target.innerHTML = inner;\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre> <p>The innocuous case where the user enters a simple name doesn't show any obvious issues:</p> <p><img src=\"/content/images/2025/trusted_types_01.png\" alt=\"An example that seems innocuous\"></p> <p>However, this code contains a severe XSS vulnerability. An attacker could force a user to travel to a URL something like the following:</p> <pre><code>http://localhost:5000/?username=&lt;img src=x onerror=\"alert('XSS Attack')\"&gt;\n</code></pre> <p>This querystring demonstrates that the code contains a clear XSS. When you hit this page:</p> <ul><li>The querystring is read from the URL as <code>&lt;img src=x onerror=\"alert('XSS Attack')\"&gt;</code>.</li> <li>It's combined with the <code>&lt;h1&gt;</code> to give <code>&lt;h1&gt;&lt;img src=x onerror=\"alert('XSS Attack')\"&gt;&lt;/h1&gt;</code>.</li> <li>It's inserted into the target <code>&lt;div&gt;</code>.</li> <li>The <code>&lt;img&gt;</code> tag attempts to load the src <code>x</code>, which obviously fails.</li> <li>The <code>onerror</code> event fires, executing the XSS attack!</li></ul> <blockquote> <p>The attack may seem a bit convoluted, and it is, but that's because there are basic protections to prevent the simplest XSS attacks; <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Element/innerHTML\"><code>&lt;script&gt;</code> tags added via <code>innerHTML</code> are not executed automatically</a>.</p> </blockquote> <p>The following is the result: the <code>alert</code> executes demonstrating the attack.</p> <p><img src=\"/content/images/2025/trusted_types_02.png\" alt=\"An example that demonstrates executing scripts finding its way into the DOM\"></p> <p>Using <code>innerHTML</code> as shown above opens yourself up to XSS vulnerabilities, but auditing everywhere that uses the API can be difficult, especially if it's used inside a library somewhere. Luckily, there's a way to protect yourself using CSP.</p> <h2 id=\"blocking-cross-site-scripting-with-trusted-types-and-a-content-security-policy\" class=\"heading-with-anchor\"><a href=\"#blocking-cross-site-scripting-with-trusted-types-and-a-content-security-policy\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Blocking cross-site-scripting with Trusted Types and a Content-Security-Policy</a></h2> <p>One of the most important security feature for modern applications is <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP\">the <code>Content-Security-Policy</code> (CSP)</a>. CSP is typically added as a header, but it can also be added as a <code>&lt;meta&gt;</code> element. CSP provides a whole swathe of features, such as forcing requests to use <code>https</code> instead of <code>http</code>, only allowing connections to specific hosts and resources, only allowing scripts that match a specific hash, and a variety of other options.</p> <p>The feature I'm using in this post is based on <a href=\"https://www.w3.org/TR/trusted-types/\">a draft W3C specification called Trusted Types</a>. In particular, you can add the <code>require-trusted-types-for</code> directive to your CSP.</p> <p>My security headers library, <a href=\"https://www.nuget.org/packages/NetEscapades.AspNetCore.SecurityHeaders\"><em>NetEscapades.AspNetCore.SecurityHeaders</em></a> can help you build a CSP and add it as a header to your ASP.NET Core responses. The following very basic configuration adds a simply Trusted Types directive to the CSP for the app:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> builder <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">WebApplication<span class=\"token punctuation\">.</span>CreateBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> app <span class=\"token operator\">=</span> builder<span class=\"token punctuation\">.</span><span class=\"token function\">Build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Configure the policy</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">UseSecurityHeaders</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">HeaderPolicyCollection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">AddContentSecurityPolicy</span><span class=\"token punctuation\">(</span>builder <span class=\"token operator\">=&gt;</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// Add require-trusted-types-for 'script' header</span>\n        builder<span class=\"token punctuation\">.</span><span class=\"token function\">AddRequireTrustedTypesFor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Script</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// other configuration</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">Run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre> <p>This adds a header like the following to the response:</p> <pre class=\"language-http\"><code class=\"language-http\"><span class=\"token header\"><span class=\"token header-name keyword\">Content-Security-Policy</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">require-trusted-types-for 'script'</span></span>\n</code></pre> <p>And now if we try to exploit the <code>innerHTML</code> API, we are magically protected:</p> <p><img src=\"/content/images/2025/trusted_types_03.png\" alt=\"Showing trusted-types protections using a CSP\"></p> <p>The screenshot above shows that the document requires <code>TrustedHTML</code> assignment, and that assigning <code>innerHTML</code> has failed completely. The attack has been thwarted!</p> <p>So <em>how</em> does the CSP header protect you?</p> <p>As you can see from the log messages, when you return a CSP with the <code>require-trusted-types-for 'Script'</code> directive, you put the browser into a different mode, in which the standard APIs no longer accept simple <code>string</code> values. Instead, APIs like <code>innerHTML</code> must be passed a <code>TrustedHTML</code> object; APIs like <code>eval</code> must be used with a <code>TrustedScript</code> object; and APIs like setting a <code>&lt;script src&gt;</code> must be used with <code>TrustedScriptURL</code>.</p> <h2 id=\"fixing-trusted-type-violations\" class=\"heading-with-anchor\"><a href=\"#fixing-trusted-type-violations\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Fixing trusted type violations</a></h2> <p>By changing the type accepted by these APIs (also called <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Trusted_Types_API#injection_sinks\">\"injection sinks\"</a>), you're safe from simple injection attacks, but presumably you <em>do</em> want to call those APIs, or at least achieve the same functionality. In this section I'll show a couple of options.</p> <h3 id=\"avoiding-problematic-apis\" class=\"heading-with-anchor\"><a href=\"#avoiding-problematic-apis\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Avoiding problematic APIs</a></h3> <p>In this section, I'll assume that you want to display the username passed in the querystring, but in a <em>safe</em> way. The following snippet shows how you can use <code>createElement</code>, <code>textContent</code>, and <code>appendChild</code> instead of the dangerous <code>innerHTML</code> API:</p> <pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> urlParams <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">URLSearchParams</span><span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">.</span>location<span class=\"token punctuation\">.</span>search<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> username <span class=\"token operator\">=</span> urlParams<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'username'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token string\">'no user'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> target <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'target'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Use createElement to create a DOM element, and set the text</span>\n<span class=\"token keyword\">const</span> h1 <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'h1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nh1<span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">=</span> username<span class=\"token punctuation\">;</span>\ntarget<span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\ntarget<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>h1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre> <p>With this change, the page is functioning again, this time <em>without</em> exposing any CSS vectors, and without any errors:</p> <p><img src=\"/content/images/2025/trusted_types_04.png\" alt=\"An example that shows a safe way to add to the DOM using safe APIs\"></p> <p>Unfortunately, it's not always possible to refactor your code in this way.</p> <h3 id=\"using-a-sanitisation-library\" class=\"heading-with-anchor\"><a href=\"#using-a-sanitisation-library\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Using a sanitisation library</a></h3> <p>The approach in the previous section is safest, as it uses inherently safe APIs, but it's unfortunately not always possible. For example, perhaps you <em>want</em> people to be able to provide <em>safe</em> HTML to include in the DOM.</p> <p>In this section, I show how you can use a sanitisation library to create a <code>TrustedHTML</code> type that you can pass directly to the <code>innerHTML</code> setter.</p> <blockquote> <p>Using a sanitisation library is obviously only as \"safe\" as the library itself. If there's a bug or workaround in the sanitisation library, then you may still be vulnerable despite using Trusted Types.</p> </blockquote> <p>In this example I'm using <a href=\"https://github.com/cure53/DOMPurify\">DOMPurify</a>, an XSS sanitiser library. There are many ways to use this library, but in this example I add a link to the script directly:</p> <pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://cdnjs.cloudflare.com/ajax/libs/dompurify/3.2.3/purify.min.js<span class=\"token punctuation\">\"</span></span>\n    <span class=\"token attr-name\">integrity</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>sha512-Ll+TuDvrWDNNRnFFIM8dOiw7Go7dsHyxRp4RutiIFW/wm3DgDmCnRZow6AqbXnCbpWu93yM1O34q+4ggzGeXVA==<span class=\"token punctuation\">\"</span></span>\n    <span class=\"token attr-name\">crossorigin</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>anonymous<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">referrerpolicy</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>no-referrer<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre> <p>And then call <code>DOMPurify.sanitize()</code> on the potentially vulnerable HTML, <a href=\"https://github.com/cure53/DOMPurify?tab=readme-ov-file#what-about-dompurify-and-trusted-types\">enabling the Trusted Type support</a>:</p> <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> urlParams <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">URLSearchParams</span><span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">.</span>location<span class=\"token punctuation\">.</span>search<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> username <span class=\"token operator\">=</span> urlParams<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'username'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token string\">'no user'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> target <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'target'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> inner <span class=\"token operator\">=</span> <span class=\"token string\">'&lt;h1&gt;'</span> <span class=\"token operator\">+</span> username <span class=\"token operator\">+</span> <span class=\"token string\">'&lt;/h1&gt;'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Create a \"cleaned\" version, which returns a TrustedHTML object</span>\n<span class=\"token keyword\">const</span> cleaned <span class=\"token operator\">=</span> DOMPurify<span class=\"token punctuation\">.</span><span class=\"token function\">sanitize</span><span class=\"token punctuation\">(</span>inner<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token constant\">RETURN_TRUSTED_TYPE</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ntarget<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> cleaned<span class=\"token punctuation\">;</span>\n</code></pre> <p>If we test this out, we get a different result to the previous example, as the HTML is still written to the <code>&lt;div&gt;</code> target, but the dangerous XSS vector has been removed:</p> <pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>target<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>x<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre> <p>The result is simply a broken image, instead of the direct CSS:</p> <p><img src=\"/content/images/2025/trusted_types_06.png\" alt=\"DOMpurify returns a TrustedHTML that can be safely added to the DOM\"></p> <p>It's always safest to just not accept user input where possible, or to use the safe APIs, but DOMPurify provides a feasible alternative if you really need the functionality.</p> <h2 id=\"controlling-how-trustedhtml-may-be-generated\" class=\"heading-with-anchor\"><a href=\"#controlling-how-trustedhtml-may-be-generated\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Controlling how trustedHTML may be generated</a></h2> <p>We've protected our application, but there still feels like a gap here, right? Should it <em>really</em> be possible for just <em>any</em> JavaScript to be able to generate a <code>TrustedHTML</code> type and bypass the trusted Type protections? 🤔</p> <p>The solution to <em>that</em> problem is with yet another CSP directive—<code>trusted-types</code>. You can add this directive using <a href=\"https://www.nuget.org/packages/NetEscapades.AspNetCore.SecurityHeaders/\"><em>NetEscapades.AspNetCore.SecurityHeaders</em></a> as follows:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> policyCollection <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">HeaderPolicyCollection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">AddContentSecurityPolicy</span><span class=\"token punctuation\">(</span>builder <span class=\"token operator\">=&gt;</span>\n    <span class=\"token punctuation\">{</span>\n        builder<span class=\"token punctuation\">.</span><span class=\"token function\">AddRequireTrustedTypesFor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Script</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// Add trusted-types mypolicy to CSP</span>\n        builder<span class=\"token punctuation\">.</span><span class=\"token function\">AddTrustedTypes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">AllowPolicy</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"my-policy\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre> <p>This results in the following CSP header being added to the response:</p> <pre class=\"language-http\"><code class=\"language-http\"><span class=\"token header\"><span class=\"token header-name keyword\">Content-Security-Policy</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">require-trusted-types-for 'script'; trusted-types my-policy</span></span>\n</code></pre> <p>After that change, the code that was previously working to sanitize the querystring now fails:</p> <p><img src=\"/content/images/2025/trusted_types_05.png\" alt=\"Our trusted-types policy blocks us from using the DOMpurify library\"></p> <p>The error message says:</p> <pre><code>Refused to create a TrustedTypePolicy named 'dompurify'\nbecause it violates the following Content Security\nPolicy directive: \"trusted-types my policy\".\n</code></pre> <p>As the error message hints at, the DOMPurify library creates a <code>TrustedHTML</code> object using a <code>TrustedTypePolicy</code> called <code>dompurify</code>. We'll look in more detail at how to create policies soon, but for now we'll unblock DOMPurify by explicitly allowing the <code>dompurify</code> policy it uses in our CSP:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> policyCollection <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">HeaderPolicyCollection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">AddContentSecurityPolicy</span><span class=\"token punctuation\">(</span>builder <span class=\"token operator\">=&gt;</span>\n    <span class=\"token punctuation\">{</span>\n        builder<span class=\"token punctuation\">.</span><span class=\"token function\">AddRequireTrustedTypesFor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Script</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        builder<span class=\"token punctuation\">.</span><span class=\"token function\">AddTrustedTypes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">AllowPolicy</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"my-policy\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">AllowPolicy</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"dompurify\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 👈 Add additional policy</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre> <p>So now the response header looks like this:</p> <pre class=\"language-http\"><code class=\"language-http\"><span class=\"token header\"><span class=\"token header-name keyword\">Content-Security-Policy</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">require-trusted-types-for 'script'; trusted-types my-policy dompurify</span></span>\n</code></pre> <p>And with that we have a functioning DOMPurify sanitizer with Trusted Type protections again:</p> <p><img src=\"/content/images/2025/trusted_types_06.png\" alt=\"Showing that the dompurify policy works again\"></p> <p>Unfortunately, DOMPurify doesn't work for all scenarios.</p> <h2 id=\"creating-a-trusted-type-policy\" class=\"heading-with-anchor\"><a href=\"#creating-a-trusted-type-policy\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Creating a Trusted Type policy</a></h2> <p>In general, creating your own Trusted Type policy should probably be a last resort. <em>Ideally</em> you'll simply remove usages of any problematic APIs. If not, then using a library like DOMPurify is probably the next-best safest approach. Unfortunately, that's not always possible. For those cases, you can create your own policies to create Trusted Types like <code>TrustedHTML</code>.</p> <blockquote> <p>When you're initially adding support for Trusted Types, you may want to create your own policies as part of the migration. However, your goal should generally be to remove as many of these as possible.</p> </blockquote> <p>At the core of the Trusted Types policies you must provide a function that takes a <code>string</code> and returns a \"safe\", sanitized, <code>string</code>. You pass this to <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Trusted_Types_API\">the <code>window.trustedTypes</code> API</a>, to create a <code>TrustedTypePolicy</code> that can be used to create instances of <code>TrustedHTML</code> from a <code>string</code>:</p> <pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// fallback incase trusted-types feature is not available</span>\n<span class=\"token keyword\">let</span> sanitizeHtmlPolicy <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token function-variable function\">createHTML</span><span class=\"token operator\">:</span> <span class=\"token parameter\">x</span> <span class=\"token operator\">=&gt;</span> x<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Feature testing</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">.</span>trustedTypes <span class=\"token operator\">&amp;&amp;</span> trustedTypes<span class=\"token punctuation\">.</span>createPolicy<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n  <span class=\"token comment\">// Create a policy called my-policy (so it's allowed by the CSP)</span>\n  sanitizeHtmlPolicy <span class=\"token operator\">=</span> trustedTypes<span class=\"token punctuation\">.</span><span class=\"token function\">createPolicy</span><span class=\"token punctuation\">(</span><span class=\"token string\">'my-policy'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Create a basic sanitisation function (for demonstration only!)</span>\n    <span class=\"token function-variable function\">createHTML</span><span class=\"token operator\">:</span> <span class=\"token parameter\">toEscape</span> <span class=\"token operator\">=&gt;</span> toEscape\n      <span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">&lt;</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">,</span> <span class=\"token string\">'&amp;lt;'</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">&gt;</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">,</span> <span class=\"token string\">'&amp;gt;'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// retrieve the parameters</span>\n<span class=\"token keyword\">const</span> urlParams <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">URLSearchParams</span><span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">.</span>location<span class=\"token punctuation\">.</span>search<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> username <span class=\"token operator\">=</span> urlParams<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'username'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token string\">'no user'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> target <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'target'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> inner <span class=\"token operator\">=</span> <span class=\"token string\">'&lt;h1&gt;'</span> <span class=\"token operator\">+</span> username <span class=\"token operator\">+</span> <span class=\"token string\">'&lt;/h1&gt;'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Create a trusted-type by invoking the policy and using it</span>\n<span class=\"token keyword\">const</span> cleaned <span class=\"token operator\">=</span> sanitizeHtmlPolicy<span class=\"token punctuation\">.</span><span class=\"token function\">createHTML</span><span class=\"token punctuation\">(</span>inner<span class=\"token punctuation\">)</span>\ntarget<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> cleaned<span class=\"token punctuation\">;</span>\n</code></pre> <p>It's important to understand that there's no verification that the \"sanitization\" function you use to create the policy <em>actually</em> sanitizes. It's entirely up to you to make it safe. Which is also why this is the riskiest approach 😉</p> <p>Nevertheless, you can see that with the new policy we don't receive any errors, and our sanitised string can be written to the <code>innerHTML</code> property successfully:</p> <p><img src=\"/content/images/2025/trusted_types_04.png\" alt=\"And now we have the sanitised version again\"></p> <p>In the example above I showed how to create a <code>TrustedHTML</code> object for setting on <code>innerHTML</code> using <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/TrustedTypePolicy/createHTML\">the <code>createHTML</code></a> method on the policy. If you need it <code>TrustedTypePolicy</code> also contains a <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/TrustedTypePolicy/createScript\"><code>createScript()</code></a> method for creating a <code>TrustedScript</code> object and a <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/TrustedTypePolicy/createScriptURL\"><code>createScriptURL()</code></a> method for creating a <code>TrustedScriptURL</code> object.</p> <h2 id=\"creating-a-default-policy\" class=\"heading-with-anchor\"><a href=\"#creating-a-default-policy\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Creating a default policy</a></h2> <p>When you're initially migrating to using Trusted Types you have a bit of a problem. You need to update <em>every</em> usage of a problematic API. That could be a <em>lot</em> of work.</p> <p>To work around this, you can create a \"default\" policy. This policy is used whenever a <code>string</code> is passed to an API that requires Trusted Types.</p> <p>In the simplest case you could create a \"pass through\" version that just logs a warning to the console when it's used, though ideally you'll do <em>some</em> sort of sanitisation, whether it's using DOMPurify, or the super simple case:</p> <pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// fallback incase trusted-types feature is not available</span>\n<span class=\"token keyword\">let</span> sanitizeHtmlPolicy <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token function-variable function\">createHTML</span><span class=\"token operator\">:</span> <span class=\"token parameter\">x</span> <span class=\"token operator\">=&gt;</span> x<span class=\"token punctuation\">,</span> <span class=\"token function-variable function\">createScript</span><span class=\"token operator\">:</span> <span class=\"token parameter\">x</span> <span class=\"token operator\">=&gt;</span> x<span class=\"token punctuation\">,</span> <span class=\"token function-variable function\">createScriptURL</span><span class=\"token operator\">:</span> <span class=\"token parameter\">x</span> <span class=\"token operator\">=&gt;</span> x<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Feature testing</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">.</span>trustedTypes <span class=\"token operator\">&amp;&amp;</span> trustedTypes<span class=\"token punctuation\">.</span>createPolicy<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// create a default policy</span>\n  sanitizeHtmlPolicy <span class=\"token operator\">=</span> trustedTypes<span class=\"token punctuation\">.</span><span class=\"token function\">createPolicy</span><span class=\"token punctuation\">(</span><span class=\"token string\">'default'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">createHTML</span><span class=\"token operator\">:</span> <span class=\"token parameter\">toEscape</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Warning: use of default createHTML policy.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> toEscape <span class=\"token comment\">// TODO: use a sanitization library</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">&lt;</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">,</span> <span class=\"token string\">'&amp;lt;'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">&gt;</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">,</span> <span class=\"token string\">'&amp;gt;'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">createScript</span><span class=\"token operator\">:</span> <span class=\"token parameter\">toEscape</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Warning: use of default createScript policy.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> toEscape<span class=\"token punctuation\">;</span> <span class=\"token comment\">// TODO: actually try to sanitize this</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">createScriptURL</span><span class=\"token operator\">:</span> <span class=\"token parameter\">toEscape</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Warning: use of default createScriptURL policy.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> toEscape<span class=\"token punctuation\">;</span> <span class=\"token comment\">// TODO: actually try to sanitize this</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>The <code>default</code> policy is always available, but you still need to explicitly allow it in your CSP configuration:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> policyCollection <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">HeaderPolicyCollection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">AddContentSecurityPolicy</span><span class=\"token punctuation\">(</span>builder <span class=\"token operator\">=&gt;</span>\n    <span class=\"token punctuation\">{</span>\n        builder<span class=\"token punctuation\">.</span><span class=\"token function\">AddRequireTrustedTypesFor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Script</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        builder<span class=\"token punctuation\">.</span><span class=\"token function\">AddTrustedTypes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Default</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre> <p>With this setup, you now get warnings whenever the fallback policy is used, but your APIs aren't broken any more:</p> <p><img src=\"/content/images/2025/trusted_types_07.png\" alt=\"Using the default policy logs a message\"></p> <p>This at least gives a migration path forward for Trusted Types!</p> <h2 id=\"summary\" class=\"heading-with-anchor\"><a href=\"#summary\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Summary</a></h2> <p>In this post I demonstrated how some APIs are vulnerable to cross-site-scripting (CSS) attacks in the browser. I then showed how the Trusted Types APIs in the browser, coupled with the <code>require-trusted-types-for</code> and <code>trusted-types</code> Content-Security-Policy directives can help protect your site. Depending on which APIs you're using, how prevalently they're used, and whether they're called by code outside of your control, migrating to Trusted Types may not be an easy fix, but there are approaches that make it possible.</p> <h2 id=\"resources\" class=\"heading-with-anchor\"><a href=\"#resources\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Resources</a></h2> <ul><li><a href=\"https://web.dev/articles/trusted-types\">web.dev article on trusted types</a></li> <li><a href=\"https://www.w3.org/TR/trusted-types/\">W3C draft spec for trusted types</a></li> <li><a href=\"https://github.com/w3c/webappsec/blob/5d339e8f3c8bc88130ba6fa70166fa1cbb10c5de/mitigation-guidance/TrustedTypes/index.md\">W3C guidance on trusted types rollout and mitigation</a></li> <li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy/trusted-types\">MDN documentation on <code>trusted-types</code> CSP header</a></li> <li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy/require-trusted-types-for\">MDN documentation on <code>require-trusted-types-for</code> CSP header</a></li> <li><a href=\"https://github.com/cure53/DOMPurify?tab=readme-ov-file#what-about-dompurify-and-trusted-types\">Using DOMPurify with Trusted Types</a></li></ul> ",
    "sanitized": "In this post I describe how to use the Trusted Types directive as part of the Content-Security-Policy (CSP) feature to prevent against cross-site-scripting (XSS) attacks. I'll start by demonstrating how a cross-site scripting attack works, focusing on client-side, DOM-based attacks using dangerous APIs. After demonstrating the issue, I'll show how you can use Trusted Types to close the vulnerabilities in these APIs, and how Trusted Types work. After closing these vulnerabilities, I'll show several ways to work Trusted Types: by using safe APIs, by using sanitisation libraries, and by creating Trusted Types using policies.  It's worth noting that the Trusted Types API is currently only available in Chromium based browsers, but it has been available in Chromium since version 83, released in 2020.  DOM-based client-side cross-site-scripting Cross-site-scripting generally occurs where you allow input from a user to be directly written, unsanitised, into an HTML page in some way. This can occur in server side apps when generating HTML, for example if you use the @Html.Raw() method in Razor. A similar vulnerability exists on the client-side if you allow user data to be written unsanitised into the DOM. This input could come from a URL parameter or postMessage channel for example, and it becomes problematic if you use it directly in some APIs like Element.innerHTML, eval, or setTimeout, for example. To demonstrate the issue, The following shows part of a very simple HTML page returned from an ASP.NET Core app. It contains a single \"target\" <div> element which initially contains some text to be replaced. There is also a simple <script> block which reads a username parameter from the URL's querystring, and writes the name as an <h1> tag using the innerHTML property.  Remember, this code contains an XSS vulnerability, it's just for demo purposes!  <div id=\"target\">To be replaced</div>\n\n<script type=\"text/javascript\">\n    const urlParams = new URLSearchParams(window.location.search);\n    const username = urlParams.get('username') || 'no user';\n    \n    // set the username\n    const target = document.getElementById('target');\n    const inner = '<h1>' + username + '</h1>';\n    target.innerHTML = inner;\n</script>\n The innocuous case where the user enters a simple name doesn't show any obvious issues:  However, this code contains a severe XSS vulnerability. An attacker could force a user to travel to a URL something like the following: http://localhost:5000/?username=<img src=x onerror=\"alert('XSS Attack')\">\n This querystring demonstrates that the code contains a clear XSS. When you hit this page: The querystring is read from the URL as <img src=x onerror=\"alert('XSS Attack')\">. It's combined with the <h1> to give <h1><img src=x onerror=\"alert('XSS Attack')\"></h1>. It's inserted into the target <div>. The <img> tag attempts to load the src x, which obviously fails. The onerror event fires, executing the XSS attack!  The attack may seem a bit convoluted, and it is, but that's because there are basic protections to prevent the simplest XSS attacks; <script> tags added via innerHTML are not executed automatically.  The following is the result: the alert executes demonstrating the attack.  Using innerHTML as shown above opens yourself up to XSS vulnerabilities, but auditing everywhere that uses the API can be difficult, especially if it's used inside a library somewhere. Luckily, there's a way to protect yourself using CSP. Blocking cross-site-scripting with Trusted Types and a Content-Security-Policy One of the most important security feature for modern applications is the Content-Security-Policy (CSP). CSP is typically added as a header, but it can also be added as a <meta> element. CSP provides a whole swathe of features, such as forcing requests to use https instead of http, only allowing connections to specific hosts and resources, only allowing scripts that match a specific hash, and a variety of other options. The feature I'm using in this post is based on a draft W3C specification called Trusted Types. In particular, you can add the require-trusted-types-for directive to your CSP. My security headers library, NetEscapades.AspNetCore.SecurityHeaders can help you build a CSP and add it as a header to your ASP.NET Core responses. The following very basic configuration adds a simply Trusted Types directive to the CSP for the app: var builder = new WebApplication.CreateBuilder();\n\nvar app = builder.Build();\n// Configure the policy\napp.UseSecurityHeaders(new HeaderPolicyCollection()\n    .AddContentSecurityPolicy(builder =>\n    {\n        // Add require-trusted-types-for 'script' header\n        builder.AddRequireTrustedTypesFor().Script();\n    }));\n\n// other configuration\napp.Run();\n This adds a header like the following to the response: Content-Security-Policy: require-trusted-types-for 'script'\n And now if we try to exploit the innerHTML API, we are magically protected:  The screenshot above shows that the document requires TrustedHTML assignment, and that assigning innerHTML has failed completely. The attack has been thwarted! So how does the CSP header protect you? As you can see from the log messages, when you return a CSP with the require-trusted-types-for 'Script' directive, you put the browser into a different mode, in which the standard APIs no longer accept simple string values. Instead, APIs like innerHTML must be passed a TrustedHTML object; APIs like eval must be used with a TrustedScript object; and APIs like setting a <script src> must be used with TrustedScriptURL. Fixing trusted type violations By changing the type accepted by these APIs (also called \"injection sinks\"), you're safe from simple injection attacks, but presumably you do want to call those APIs, or at least achieve the same functionality. In this section I'll show a couple of options. Avoiding problematic APIs In this section, I'll assume that you want to display the username passed in the querystring, but in a safe way. The following snippet shows how you can use createElement, textContent, and appendChild instead of the dangerous innerHTML API: const urlParams = new URLSearchParams(window.location.search);\nconst username = urlParams.get('username') || 'no user';\n\nconst target = document.getElementById('target');\n// Use createElement to create a DOM element, and set the text\nconst h1 = document.createElement('h1');\nh1.textContent = username;\ntarget.textContent = '';\ntarget.appendChild(h1);\n With this change, the page is functioning again, this time without exposing any CSS vectors, and without any errors:  Unfortunately, it's not always possible to refactor your code in this way. Using a sanitisation library The approach in the previous section is safest, as it uses inherently safe APIs, but it's unfortunately not always possible. For example, perhaps you want people to be able to provide safe HTML to include in the DOM. In this section, I show how you can use a sanitisation library to create a TrustedHTML type that you can pass directly to the innerHTML setter.  Using a sanitisation library is obviously only as \"safe\" as the library itself. If there's a bug or workaround in the sanitisation library, then you may still be vulnerable despite using Trusted Types.  In this example I'm using DOMPurify, an XSS sanitiser library. There are many ways to use this library, but in this example I add a link to the script directly: <script src=\"https://cdnjs.cloudflare.com/ajax/libs/dompurify/3.2.3/purify.min.js\"\n    integrity=\"sha512-Ll+TuDvrWDNNRnFFIM8dOiw7Go7dsHyxRp4RutiIFW/wm3DgDmCnRZow6AqbXnCbpWu93yM1O34q+4ggzGeXVA==\"\n    crossorigin=\"anonymous\" referrerpolicy=\"no-referrer\"></script>\n And then call DOMPurify.sanitize() on the potentially vulnerable HTML, enabling the Trusted Type support: const urlParams = new URLSearchParams(window.location.search);\nconst username = urlParams.get('username') || 'no user';\n\nconst target = document.getElementById('target');\nconst inner = '<h1>' + username + '</h1>';\n\n// Create a \"cleaned\" version, which returns a TrustedHTML object\nconst cleaned = DOMPurify.sanitize(inner, {RETURN_TRUSTED_TYPE: true});\ntarget.innerHTML = cleaned;\n If we test this out, we get a different result to the previous example, as the HTML is still written to the <div> target, but the dangerous XSS vector has been removed: <div id=\"target\"><h1><img src=\"x\"></h1></div>\n The result is simply a broken image, instead of the direct CSS:  It's always safest to just not accept user input where possible, or to use the safe APIs, but DOMPurify provides a feasible alternative if you really need the functionality. Controlling how trustedHTML may be generated We've protected our application, but there still feels like a gap here, right? Should it really be possible for just any JavaScript to be able to generate a TrustedHTML type and bypass the trusted Type protections? 🤔 The solution to that problem is with yet another CSP directive—trusted-types. You can add this directive using NetEscapades.AspNetCore.SecurityHeaders as follows: var policyCollection = new HeaderPolicyCollection()\n    .AddContentSecurityPolicy(builder =>\n    {\n        builder.AddRequireTrustedTypesFor().Script();\n        // Add trusted-types mypolicy to CSP\n        builder.AddTrustedTypes().AllowPolicy(\"my-policy\");\n    });\n This results in the following CSP header being added to the response: Content-Security-Policy: require-trusted-types-for 'script'; trusted-types my-policy\n After that change, the code that was previously working to sanitize the querystring now fails:  The error message says: Refused to create a TrustedTypePolicy named 'dompurify'\nbecause it violates the following Content Security\nPolicy directive: \"trusted-types my policy\".\n As the error message hints at, the DOMPurify library creates a TrustedHTML object using a TrustedTypePolicy called dompurify. We'll look in more detail at how to create policies soon, but for now we'll unblock DOMPurify by explicitly allowing the dompurify policy it uses in our CSP: var policyCollection = new HeaderPolicyCollection()\n    .AddContentSecurityPolicy(builder =>\n    {\n        builder.AddRequireTrustedTypesFor().Script();\n        builder.AddTrustedTypes()\n            .AllowPolicy(\"my-policy\");\n            .AllowPolicy(\"dompurify\"); // 👈 Add additional policy\n    });\n So now the response header looks like this: Content-Security-Policy: require-trusted-types-for 'script'; trusted-types my-policy dompurify\n And with that we have a functioning DOMPurify sanitizer with Trusted Type protections again:  Unfortunately, DOMPurify doesn't work for all scenarios. Creating a Trusted Type policy In general, creating your own Trusted Type policy should probably be a last resort. Ideally you'll simply remove usages of any problematic APIs. If not, then using a library like DOMPurify is probably the next-best safest approach. Unfortunately, that's not always possible. For those cases, you can create your own policies to create Trusted Types like TrustedHTML.  When you're initially adding support for Trusted Types, you may want to create your own policies as part of the migration. However, your goal should generally be to remove as many of these as possible.  At the core of the Trusted Types policies you must provide a function that takes a string and returns a \"safe\", sanitized, string. You pass this to the window.trustedTypes API, to create a TrustedTypePolicy that can be used to create instances of TrustedHTML from a string: // fallback incase trusted-types feature is not available\nlet sanitizeHtmlPolicy = {createHTML: x => x};\n\n// Feature testing\nif (window.trustedTypes && trustedTypes.createPolicy) { \n  // Create a policy called my-policy (so it's allowed by the CSP)\n  sanitizeHtmlPolicy = trustedTypes.createPolicy('my-policy', {\n    // Create a basic sanitisation function (for demonstration only!)\n    createHTML: toEscape => toEscape\n      .replace(/</g, '&lt;')\n      .replace(/>/g, '&gt;'),\n  });\n}\n\n// retrieve the parameters\nconst urlParams = new URLSearchParams(window.location.search);\nconst username = urlParams.get('username') || 'no user';\n\nconst target = document.getElementById('target');\nconst inner = '<h1>' + username + '</h1>';\n\n// Create a trusted-type by invoking the policy and using it\nconst cleaned = sanitizeHtmlPolicy.createHTML(inner)\ntarget.innerHTML = cleaned;\n It's important to understand that there's no verification that the \"sanitization\" function you use to create the policy actually sanitizes. It's entirely up to you to make it safe. Which is also why this is the riskiest approach 😉 Nevertheless, you can see that with the new policy we don't receive any errors, and our sanitised string can be written to the innerHTML property successfully:  In the example above I showed how to create a TrustedHTML object for setting on innerHTML using the createHTML method on the policy. If you need it TrustedTypePolicy also contains a createScript() method for creating a TrustedScript object and a createScriptURL() method for creating a TrustedScriptURL object. Creating a default policy When you're initially migrating to using Trusted Types you have a bit of a problem. You need to update every usage of a problematic API. That could be a lot of work. To work around this, you can create a \"default\" policy. This policy is used whenever a string is passed to an API that requires Trusted Types. In the simplest case you could create a \"pass through\" version that just logs a warning to the console when it's used, though ideally you'll do some sort of sanitisation, whether it's using DOMPurify, or the super simple case: // fallback incase trusted-types feature is not available\nlet sanitizeHtmlPolicy = {createHTML: x => x, createScript: x => x, createScriptURL: x => x};\n\n// Feature testing\nif (window.trustedTypes && trustedTypes.createPolicy) {\n  // create a default policy\n  sanitizeHtmlPolicy = trustedTypes.createPolicy('default', {\n    createHTML: toEscape => {\n      console.log('Warning: use of default createHTML policy.');\n      return toEscape // TODO: use a sanitization library\n        .replace(/</g, '&lt;')\n        .replace(/>/g, '&gt;');\n    },\n    createScript: toEscape => {\n      console.log('Warning: use of default createScript policy.');\n      return toEscape; // TODO: actually try to sanitize this\n    },\n    createScriptURL: toEscape => {\n      console.log('Warning: use of default createScriptURL policy.');\n      return toEscape; // TODO: actually try to sanitize this\n    },\n  });\n}\n The default policy is always available, but you still need to explicitly allow it in your CSP configuration: var policyCollection = new HeaderPolicyCollection()\n    .AddContentSecurityPolicy(builder =>\n    {\n        builder.AddRequireTrustedTypesFor().Script();\n        builder.AddTrustedTypes().Default();\n    });\n With this setup, you now get warnings whenever the fallback policy is used, but your APIs aren't broken any more:  This at least gives a migration path forward for Trusted Types! Summary In this post I demonstrated how some APIs are vulnerable to cross-site-scripting (CSS) attacks in the browser. I then showed how the Trusted Types APIs in the browser, coupled with the require-trusted-types-for and trusted-types Content-Security-Policy directives can help protect your site. Depending on which APIs you're using, how prevalently they're used, and whether they're called by code outside of your control, migrating to Trusted Types may not be an easy fix, but there are approaches that make it possible. Resources web.dev article on trusted types W3C draft spec for trusted types W3C guidance on trusted types rollout and mitigation MDN documentation on trusted-types CSP header MDN documentation on require-trusted-types-for CSP header Using DOMPurify with Trusted Types"
  },
  {
    "itemId": "https://andrewlock.net/creating-a-source-generator-part-14-supporting-multiple-sdk-versions-in-a-source-generator/",
    "raw": "<img src=\"https://andrewlock.net/content/images/2025/multi_targeting_banner.png\" /><nav><p>This is the fourteen post in the series: <a href=\"/series/creating-a-source-generator/\">Creating a source generator</a>. </p> <ol class=\"list-none\"><li><a href=\"/creating-a-source-generator-part-1-creating-an-incremental-source-generator/\">Part 1 - Creating an incremental generator</a></li><li><a href=\"/creating-a-source-generator-part-2-testing-an-incremental-generator-with-snapshot-testing/\">Part 2 - Testing an incremental generator with snapshot testing</a></li><li><a href=\"/creating-a-source-generator-part-3-integration-testing-and-packaging/\">Part 3 - Integration testing and NuGet packaging</a></li><li><a href=\"/creating-a-source-generator-part-4-customising-generated-code-with-marker-attributes/\">Part 4 - Customising generated code with marker attributes</a></li><li><a href=\"/creating-a-source-generator-part-5-finding-a-type-declarations-namespace-and-type-hierarchy/\">Part 5 - Finding a type declaration's namespace and type hierarchy</a></li><li><a href=\"/creating-a-source-generator-part-6-saving-source-generator-output-in-source-control/\">Part 6 - Saving source generator output in source control</a></li><li><a href=\"/creating-a-source-generator-part-7-solving-the-source-generator-marker-attribute-problem-part1/\">Part 7 - Solving the source generator 'marker attribute' problem - Part 1</a></li><li><a href=\"/creating-a-source-generator-part-8-solving-the-source-generator-marker-attribute-problem-part2/\">Part 8 - Solving the source generator 'marker attribute' problem - Part 2</a></li><li><a href=\"/creating-a-source-generator-part-9-avoiding-performance-pitfalls-in-incremental-generators/\">Part 9 - Avoiding performance pitfalls in incremental generators</a></li><li><a href=\"/creating-a-source-generator-part-10-testing-your-incremental-generator-pipeline-outputs-are-cacheable/\">Part 10 - Testing your incremental generator pipeline outputs are cacheable</a></li><li><a href=\"/creating-a-source-generator-part-11-implementing-an-interceptor-with-a-source-generator/\">Part 11 - Implementing an interceptor with a source generator</a></li><li><a href=\"/creating-a-source-generator-part-12-reading-compilation-options-and-csharp-version-in-source-generators/\">Part 12 - Reading compilation options and the C# version in source generators</a></li><li><a href=\"/creating-a-source-generator-part-13-providing-and-accessing-msbuild-settings-in-source-generators/\">Part 13 - Accessing MSBuild properties and user configuration from source generators</a></li><li>Part 14 - Supporting multiple .NET SDK versions in a source generator (this post) </li></ol></nav><p>In <a href=\"/supporting-multiple-sdk-versions-in-analyzers-and-source-generators/\">my previous post</a> I described why you might want (or need) to target multiple versions of the .NET SDK in a source generator. In this post I show how I applied this to my <em>NetEscapades.EnumGenerators</em> source generator, so that I could support features only available in the .NET 8/9 SDK, while still supporting users stuck on the .NET 7 SDK.</p> <h2 id=\"-net-sdk-versions-microsoft-codeanalysis-csharp-and-nuget-package-layouts\" class=\"heading-with-anchor\"><a href=\"#-net-sdk-versions-microsoft-codeanalysis-csharp-and-nuget-package-layouts\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">.NET SDK versions, <em>Microsoft.CodeAnalysis.CSharp</em>, and NuGet package layouts</a></h2> <p>In <a href=\"/supporting-multiple-sdk-versions-in-analyzers-and-source-generators/\">my previous post</a> I provided a long description of how and why you might need to target multiple versions of the .NET SDK. This post directly follows on from that one, so if you haven't, I suggest reading that one first.</p> <p>In summary, when you create a source generator, you reference a specific version of the <a href=\"https://www.nuget.org/packages/Microsoft.CodeAnalysis.CSharp\">Microsoft.CodeAnalysis.CSharp</a> NuGet package. The <a href=\"https://learn.microsoft.com/en-us/visualstudio/extensibility/roslyn-version-support\">version of this package</a> you choose defines the minimum version of <a href=\"https://learn.microsoft.com/en-us/dotnet/core/porting/versioning-sdk-msbuild-vs\">Visual Studio, MSBuild, and the .NET SDK</a> that your source generator will work with. The higher the version, the more Roslyn APIs you can use, but the higher the version of the .NET SDK the consumer must be using.</p> <p>In the .NET 6 SDK, Microsoft updated the logic that finds analyzers/source generators in a NuGet file to allow versioning a source generator by Roslyn API version. That means you can ship a source generator that provides basic functionality when used with the .NET 6 SDK (for example) but which provides <em>additional</em> functionality when used with the .NET 7 or .NET 8 SDKs, for example. You do this by shipping multiple versions of the generator in the NuGet package, each compiled against a different version of <a href=\"https://www.nuget.org/packages/Microsoft.CodeAnalysis.CSharp\">Microsoft.CodeAnalysis.CSharp</a>:</p> <p><img src=\"/content/images/2025/system_text_json_4.png\" alt=\"The (simplified) layout of the System.Text.Json 6.0.0 package\"></p> <p>The .NET SDK then loads the highest supported version of the analyzer, based on the version of the Roslyn API that it supports.</p> <p>I covered most of the details of why you might want to multi-target multiple roslyn versions in your package in <a href=\"/supporting-multiple-sdk-versions-in-analyzers-and-source-generators/\">the previous post</a>, so in this post I'll show how I added multi-targeting support to my <em>NetEscapades.EnumGenerators</em> source generator.</p> <h2 id=\"adding-multi-targeting-support-for-netescapades-enumgenerators\" class=\"heading-with-anchor\"><a href=\"#adding-multi-targeting-support-for-netescapades-enumgenerators\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Adding multi-targeting support for <em>NetEscapades.EnumGenerators</em></a></h2> <p>The <a href=\"https://www.nuget.org/packages/NetEscapades.EnumGenerators/\">NetEscapades.EnumGenerators</a> package is a source generator for making working with enums faster. I <a href=\"/recent-updates-for-netescapades-enumgenerators-interceptors/\">recently added experimental support for interceptors to the package</a>, but this required using a newer version of the Roslyn API than I was previously. The interceptor API I needed was only available in .NET SDK version <code>8.0.400</code> (version <code>4.11</code> of the Roslyn API in <em>Microsoft.CodeAnalysis.CSharp</em>), whereas I was currently targeting <code>4.4</code>.</p> <p>The easy approach would have been to simply update the version of <em>Microsoft.CodeAnalysis.CSharp</em> to <code>4.11.0</code> to give access to the <code>4.11</code> Roslyn API. However, doing so would have meant that anyone currently using the package with a .NET 7 SDK or a .NET 8 SDK below <code>8.0.400</code> would have been broken.</p> <p>Rather than inconvenience people, I decided to have a go at multi-targeting. This would ensure that down-version users could use the basic functionality, but the interceptor support would not be available. Meanwhile, anyone using <code>8.0.400</code> or higher of the .NET SDK <em>would</em> be able to enable the interceptor functionality. The best of both worlds!</p> <p>The approach I took to multi-targeting was heavily based on <a href=\"https://github.com/dotnet/runtime/pull/59074/files#diff-258ed32f98847603de7425cdcd362915271c61390268af3e6c75b4335b817471\">the approach taken by the built-in generators</a> like the <em>System.Text.Json</em> generator and the <em>Microsoft.Extensions.Logging</em> generator when they first added multi-targeting support.</p> <p>I implemented the bulk of the support in <a href=\"https://github.com/andrewlock/NetEscapades.EnumGenerators/pull/101\">a single PR</a>, and it's broadly the same approach I show in this post.</p> <h3 id=\"the-original-prior-to-multi-targeting\" class=\"heading-with-anchor\"><a href=\"#the-original-prior-to-multi-targeting\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">The original: prior to multi-targeting</a></h3> <p>To set the stage, <em>prior</em> to multi-targeting, the <em>NetEscapades.EnumGenerators</em> source generator targeted version <code>4.4</code> of the Roslyn API, by referencing <code>4.4.0</code> of the <em>Microsoft.CodeAnalysis.CSharp</em> NuGet package. This API version corresponds to the .NET 7 SDK, and gives access to the <a href=\"/creating-a-source-generator-part-9-avoiding-performance-pitfalls-in-incremental-generators/#1-use-the-net-7-api-forattributewithmetadataname\">recommended <code>ForAttributeWithMetadataName</code> API</a>.</p> <p>The solution consisted of two main projects:</p> <ul><li><code>NetEscapades.EnumGenerators</code>: The main source generator project</li> <li><code>NetEscapades.EnumGenerators.Attributes</code>: A library project containing the \"marker\" attributes that drive the source generator</li></ul> <p>There's also a bunch of test projects, some of the main ones are described below. I've described these approaches in <a href=\"/creating-a-source-generator-part-2-testing-an-incremental-generator-with-snapshot-testing/\">more detail</a> <a href=\"/creating-a-source-generator-part-3-integration-testing-and-packaging/\">previously</a> in <a href=\"/series/creating-a-source-generator/\">this series</a>:</p> <ul><li><code>NetEscapades.EnumGenerators.Tests</code>: Unit tests for the generator functionality, and snapshot tests comparing the generated output</li> <li><code>NetEscapades.EnumGenerators.IntegrationTests</code>: \"Integration\" test project that references the source generator project directly, and runs a bunch of tests. This ensures the generated output <em>actually</em> compiles, and gives the expected values when executed, for example.</li> <li><code>NetEscapades.EnumGenerators.Nuget.IntegrationTests</code>: Runs the same tests as the above project, but instead of referencing the source generator directly, it uses a version of the generator that has been fully packed into a NuGet package. This is the closest to a \"real life\" scenario you can get to.</li></ul> <p>There are a bunch of other tests for additional variations, but I'll ignore those for brevity:</p> <p><img src=\"/content/images/2025/multi_targeting_01.png\" alt=\"The solution layout\"></p> <p>Now we have the starting point, lets begin the migration to support multiple Roslyn versions.</p> <h3 id=\"splitting-the-source-generator-project\" class=\"heading-with-anchor\"><a href=\"#splitting-the-source-generator-project\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Splitting the source generator project</a></h3> <p>Prior to supporting the multi-targeting, the <em>NetEscapades.EnumGenerators</em> <em>.csproj</em> file looked as shown below. This includes a variety of properties and items. Some of the properties (<code>&lt;TargetFramework&gt;</code>, <code>&lt;PackageReference&gt;</code>) are related to <em>building</em> the source generator dll, some parts are related to properties of the final NuGet package (<code>&lt;PackageId&gt;</code>, <code>&lt;Description&gt;</code>), and some are related to controlling the contents of the final NuGet package (<code>&lt;PackageReadmeFile&gt;</code>, <code>PackagePath</code> attributes):</p> <pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Project</span> <span class=\"token attr-name\">Sdk</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Microsoft.NET.Sdk<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>PropertyGroup</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>TargetFramework</span><span class=\"token punctuation\">&gt;</span></span>netstandard2.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>TargetFramework</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>IncludeBuildOutput</span><span class=\"token punctuation\">&gt;</span></span>false<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>IncludeBuildOutput</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Nullable</span><span class=\"token punctuation\">&gt;</span></span>enable<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Nullable</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ImplicitUsings</span><span class=\"token punctuation\">&gt;</span></span>true<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ImplicitUsings</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>PackageId</span><span class=\"token punctuation\">&gt;</span></span>NetEscapades.EnumGenerators<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>PackageId</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Description</span><span class=\"token punctuation\">&gt;</span></span>A source generator for creating helper extension methods on enums using a [EnumExtensions] attribute<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Description</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>PackageReadmeFile</span><span class=\"token punctuation\">&gt;</span></span>README.md<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>PackageReadmeFile</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>PropertyGroup</span><span class=\"token punctuation\">&gt;</span></span>\n\n  <span class=\"token comment\">&lt;!-- These are references required by the source generator --&gt;</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ItemGroup</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>PackageReference</span> <span class=\"token attr-name\">Include</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Microsoft.CodeAnalysis.Analyzers<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">Version</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>3.3.3<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">PrivateAssets</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>all<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>PackageReference</span> <span class=\"token attr-name\">Include</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Microsoft.CodeAnalysis.CSharp<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">Version</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>4.4.0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">PrivateAssets</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>all<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ProjectReference</span> <span class=\"token attr-name\">Include</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>..\\NetEscapades.EnumGenerators.Attributes\\NetEscapades.EnumGenerators.Attributes.csproj<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">PrivateAssets</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>All<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ItemGroup</span><span class=\"token punctuation\">&gt;</span></span>\n\n  <span class=\"token comment\">&lt;!-- These tweak and control the contents of the NuGet package --&gt;</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ItemGroup</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>None</span> <span class=\"token attr-name\">Include</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>../../README.md<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">Pack</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">PackagePath</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>\\<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n\n    <span class=\"token comment\">&lt;!-- Pack the source generator and attributes dll --&gt;</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>None</span> <span class=\"token attr-name\">Include</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>$(OutputPath)\\$(AssemblyName).dll<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">Pack</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">PackagePath</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>analyzers/dotnet/cs<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">Visible</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>false<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>None</span> <span class=\"token attr-name\">Include</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>$(OutputPath)\\NetEscapades.EnumGenerators.Attributes.dll<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">Pack</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">PackagePath</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>analyzers/dotnet/cs<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">Visible</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>false<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n\n    <span class=\"token comment\">&lt;!-- Pack the attributes file to be referenced by the target project --&gt;</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>None</span> <span class=\"token attr-name\">Include</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>$(OutputPath)\\NetEscapades.EnumGenerators.Attributes.dll<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">Pack</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">PackagePath</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>lib\\netstandard2.0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">Visible</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>None</span> <span class=\"token attr-name\">Include</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>$(OutputPath)\\NetEscapades.EnumGenerators.Attributes.xml<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">Pack</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">PackagePath</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>lib\\netstandard2.0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">Visible</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>None</span> <span class=\"token attr-name\">Include</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>$(OutputPath)\\NetEscapades.EnumGenerators.Attributes.dll<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">Pack</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">PackagePath</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>lib\\net451<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">Visible</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>None</span> <span class=\"token attr-name\">Include</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>$(OutputPath)\\NetEscapades.EnumGenerators.Attributes.xml<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">Pack</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">PackagePath</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>lib\\net451<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">Visible</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ItemGroup</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Project</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre> <p>To support multi-targeting, we need to make some significant changes to this project:</p> <ul><li>Split the source generator project into multiple projects, each referencing different version of <em>Microsoft.CodeAnalysis.CSharp</em>. <ul><li>One project references version <code>4.4.0</code>. This is the \"lower\" bound for our SDK support, and corresponds to the .NET 7 SDK.</li> <li>Another project references version <code>4.11.0</code>. This is the \"enhanced\" SDK support, which we need for interceptor support, and corresponds to <code>8.0.4xx</code> of the .NET SDK.</li></ul> </li> <li>Update the projects to share most of the implementation. Update the implementation in the <code>4.11</code> project with the additional functionality.</li> <li>Create a separate project that is used solely to <em>pack</em> the two source generator dlls into the final NuGet package. You could also use a nuspec file for this, but I prefer to use a csproj instead.</li></ul> <p>The final result looks something like this in the solution explorer:</p> <p><img src=\"/content/images/2025/multi_targeting_02.png\" alt=\"The updated solution explorer, with 3 new projects\"></p> <p>So the original <em>NetEscapades.EnumGenerators</em> project has gone, and we have <em>three</em> projects in its place:</p> <ul><li><code>NetEscapades.EnumGenerators.Rolsyn4_04</code>: The version of the generator that references <em>Microsoft.CodeAnalysis.CSharp</em> <code>4.4.0</code>.</li> <li><code>NetEscapades.EnumGenerators.Rolsyn4_11</code>: The version of the generator that references <em>Microsoft.CodeAnalysis.CSharp</em> <code>4.11.0</code>.</li> <li><code>NetEscapades.EnumGenerators.Pack</code>: A project focused solely on collecting the output artifacts from the other source projects and producing the final NuGet package.</li></ul> <p>Note that the three projects are peers in the solution explorer, but the files are all side-by-side in the same folder in the filesystem, rather than being in separate folders:</p> <p><img src=\"/content/images/2025/multi_targeting_03.png\" alt=\"The filesystem of the updated solution, showing the files are side-by-side\"></p> <p>Now lets look at the project files, as well as some ancillary files.</p> <h3 id=\"exploring-the-new-project-files\" class=\"heading-with-anchor\"><a href=\"#exploring-the-new-project-files\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Exploring the new project files</a></h3> <p>We'll start by looking at the <code>NetEscapades.EnumGenerators.Rolsyn4_04</code> and <code>NetEscapades.EnumGenerators.Rolsyn4_11</code> <em>.csproj</em> files. These are quite simple, basically just defining the version of the Roslyn API they require and then importing a separate <code>.targets</code> file.</p> <p>The <code>Rolsyn4_04</code> project looks like this:</p> <pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Project</span> <span class=\"token attr-name\">Sdk</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Microsoft.NET.Sdk<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>PropertyGroup</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>RoslynApiVersion</span><span class=\"token punctuation\">&gt;</span></span>4.4.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>RoslynApiVersion</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>IsPackable</span><span class=\"token punctuation\">&gt;</span></span>false<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>IsPackable</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>PropertyGroup</span><span class=\"token punctuation\">&gt;</span></span>\n\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Import</span> <span class=\"token attr-name\">Project</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>NetEscapades.EnumGenerators.Build.targets<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Project</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre> <p>and the <code>Rolsyn4_11</code> project looks like this:</p> <pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Project</span> <span class=\"token attr-name\">Sdk</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Microsoft.NET.Sdk<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>PropertyGroup</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>RoslynApiVersion</span><span class=\"token punctuation\">&gt;</span></span>4.11.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>RoslynApiVersion</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>DefineConstants</span><span class=\"token punctuation\">&gt;</span></span>$(DefineConstants);INTERCEPTORS<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>DefineConstants</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>IsPackable</span><span class=\"token punctuation\">&gt;</span></span>false<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>IsPackable</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>PropertyGroup</span><span class=\"token punctuation\">&gt;</span></span>\n\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Import</span> <span class=\"token attr-name\">Project</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>NetEscapades.EnumGenerators.Build.targets<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Project</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre> <p>Note that I've defined an additional constant in the <code>Rolsyn4_11</code> project, so that I can use <code>#if INTERCEPTORS</code> in the source generator code, and share the same files between both projects.</p> <p>The bulk of the project definition happens in the <em>NetEscapades.EnumGenerators.Build.targets</em> file (the name is chosen arbitrarily). This includes most of the same property definitions as we had before, with a couple of tweaks, which I've highlighted in comments below:</p> <pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Project</span><span class=\"token punctuation\">&gt;</span></span>\n\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>PropertyGroup</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>TargetFramework</span><span class=\"token punctuation\">&gt;</span></span>netstandard2.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>TargetFramework</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>IncludeBuildOutput</span><span class=\"token punctuation\">&gt;</span></span>false<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>IncludeBuildOutput</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>PackageId</span><span class=\"token punctuation\">&gt;</span></span>NetEscapades.EnumGenerators<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>PackageId</span><span class=\"token punctuation\">&gt;</span></span>\n\n    <span class=\"token comment\">&lt;!-- Explicitly define these, so that both projects produce dlls with the same name --&gt;</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>AssemblyName</span><span class=\"token punctuation\">&gt;</span></span>$(PackageId)<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>AssemblyName</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>RootNamespace</span><span class=\"token punctuation\">&gt;</span></span>$(PackageId)<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>RootNamespace</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Nullable</span><span class=\"token punctuation\">&gt;</span></span>enable<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Nullable</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ImplicitUsings</span><span class=\"token punctuation\">&gt;</span></span>true<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ImplicitUsings</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>PackageId</span><span class=\"token punctuation\">&gt;</span></span>NetEscapades.EnumGenerators<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>PackageId</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Description</span><span class=\"token punctuation\">&gt;</span></span>A source generator for creating helper extension methods on enums using a [EnumExtensions] attribute<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Description</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>PackageReadmeFile</span><span class=\"token punctuation\">&gt;</span></span>README.md<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>PackageReadmeFile</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>EnforceExtendedAnalyzerRules</span><span class=\"token punctuation\">&gt;</span></span>true<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>EnforceExtendedAnalyzerRules</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>PropertyGroup</span><span class=\"token punctuation\">&gt;</span></span>\n\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ItemGroup</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>PackageReference</span> <span class=\"token attr-name\">Include</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Microsoft.CodeAnalysis.Analyzers<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">Version</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>3.3.4<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">PrivateAssets</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>all<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n    <span class=\"token comment\">&lt;!-- Use the RoslynApiVersion version defined in the project's .csproj --&gt;</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>PackageReference</span> <span class=\"token attr-name\">Include</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Microsoft.CodeAnalysis.CSharp<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">Version</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>$(RoslynApiVersion)<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">PrivateAssets</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>all<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ProjectReference</span> <span class=\"token attr-name\">Include</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>..\\NetEscapades.EnumGenerators.Attributes\\NetEscapades.EnumGenerators.Attributes.csproj<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">PrivateAssets</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>All<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ItemGroup</span><span class=\"token punctuation\">&gt;</span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Project</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre> <p>As you can see, this <code>.targets</code> file <em>only</em> includes values for controlling how the dlls are built. There's nothing related to actually packaging the file here. That's all handled in the <code>.Pack</code> project, which admittedly, feels a bit of a hack. The <em>.csproj</em> for the <code>.Pack</code> project looks like the following (heavily commented to try to make sense of it all!):</p> <pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Project</span> <span class=\"token attr-name\">Sdk</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Microsoft.NET.Sdk<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n\n  <span class=\"token comment\">&lt;!-- This project is just used to _pack_ the NuGet, containing both the other analyzers --&gt;</span>\n  <span class=\"token comment\">&lt;!-- We still import the same targets file to ensure we have the same values. There are --&gt;</span>\n  <span class=\"token comment\">&lt;!-- probably other, better ways of doing this (e.g. using Directory.Build.props), but --&gt;</span>\n  <span class=\"token comment\">&lt;!-- this is where I eventually ended up, and it works, so I haven't bothered experimenting --&gt;</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>PropertyGroup</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>RoslynApiVersion</span><span class=\"token punctuation\">&gt;</span></span>4.11.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>RoslynApiVersion</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>IsPackable</span><span class=\"token punctuation\">&gt;</span></span>true<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>IsPackable</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>PropertyGroup</span><span class=\"token punctuation\">&gt;</span></span>\n\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Import</span> <span class=\"token attr-name\">Project</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>NetEscapades.EnumGenerators.Build.targets<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n\n  <span class=\"token comment\">&lt;!-- These project references to each of the \"real\" projects ensures everything builds --&gt;</span>\n  <span class=\"token comment\">&lt;!-- in the correct order etc. We set ReferenceOutputAssembly=\"false\" though --&gt;</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ItemGroup</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ProjectReference</span> <span class=\"token attr-name\">Include</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>..\\NetEscapades.EnumGenerators\\NetEscapades.EnumGenerators.Roslyn4_04.csproj<span class=\"token punctuation\">\"</span></span> \n      <span class=\"token attr-name\">PrivateAssets</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>All<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">ReferenceOutputAssembly</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>false<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ProjectReference</span> <span class=\"token attr-name\">Include</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>..\\NetEscapades.EnumGenerators\\NetEscapades.EnumGenerators.Roslyn4_11.csproj<span class=\"token punctuation\">\"</span></span>\n      <span class=\"token attr-name\">PrivateAssets</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>All<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">ReferenceOutputAssembly</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>false<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ItemGroup</span><span class=\"token punctuation\">&gt;</span></span>\n\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ItemGroup</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token comment\">&lt;!-- We don't want to actually build anything in this project --&gt;</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Compile</span> <span class=\"token attr-name\">Remove</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>**\\*.cs<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>None</span> <span class=\"token attr-name\">Include</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>../../README.md<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">Pack</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">PackagePath</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>\\<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n\n    <span class=\"token comment\">&lt;!-- Pack the Roslyn4_04 project output into the analyzers/dotnet/roslyn4.4/cs folder --&gt;</span>\n    <span class=\"token comment\">&lt;!-- and the Roslyn4_11 project output into the analyzers/dotnet/roslyn4.11/cs folder --&gt;</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>None</span> <span class=\"token attr-name\">Include</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>$(OutputPath)\\..\\..\\NetEscapades.EnumGenerators.Roslyn4_04\\$(ArtifactsPivots)\\$(AssemblyName).dll<span class=\"token punctuation\">\"</span></span>\n          <span class=\"token attr-name\">Pack</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">PackagePath</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>analyzers/dotnet/roslyn4.4/cs<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">Visible</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>false<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>None</span> <span class=\"token attr-name\">Include</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>$(OutputPath)\\..\\..\\NetEscapades.EnumGenerators.Roslyn4_11\\$(ArtifactsPivots)\\$(AssemblyName).dll<span class=\"token punctuation\">\"</span></span>\n          <span class=\"token attr-name\">Pack</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">PackagePath</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>analyzers/dotnet/roslyn4.11/cs<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">Visible</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>false<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n\n    <span class=\"token comment\">&lt;!-- Pack the attributes dll for both Roslyn versions for referencing by the generator directly --&gt;</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>None</span> <span class=\"token attr-name\">Include</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>$(OutputPath)\\NetEscapades.EnumGenerators.Attributes.dll<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">Pack</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span>\n          <span class=\"token attr-name\">PackagePath</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>analyzers/dotnet/roslyn4.4/cs<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">Visible</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>false<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>None</span> <span class=\"token attr-name\">Include</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>$(OutputPath)\\NetEscapades.EnumGenerators.Attributes.dll<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">Pack</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span>\n          <span class=\"token attr-name\">PackagePath</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>analyzers/dotnet/roslyn4.11/cs<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">Visible</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>false<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n\n    <span class=\"token comment\">&lt;!-- Pack the attributes dll for referencing by the target project--&gt;</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>None</span> <span class=\"token attr-name\">Include</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>$(OutputPath)\\NetEscapades.EnumGenerators.Attributes.dll<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">Pack</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">PackagePath</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>lib\\netstandard2.0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">Visible</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>false<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>None</span> <span class=\"token attr-name\">Include</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>$(OutputPath)\\NetEscapades.EnumGenerators.Attributes.xml<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">Pack</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">PackagePath</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>lib\\netstandard2.0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">Visible</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>false<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>None</span> <span class=\"token attr-name\">Include</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>$(OutputPath)\\NetEscapades.EnumGenerators.Attributes.dll<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">Pack</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">PackagePath</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>lib\\net451<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">Visible</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>false<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>None</span> <span class=\"token attr-name\">Include</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>$(OutputPath)\\NetEscapades.EnumGenerators.Attributes.xml<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">Pack</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">PackagePath</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>lib\\net451<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">Visible</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>false<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ItemGroup</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Project</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre> <p>Phew, that's a lot, but it is <em>mostly</em> just a way to define a nuspec file while reusing values between the dlls. A simple <code>dotnet pack</code> and we have everything we need!</p> <p>Of course, as we're now <em>building</em> for multiple Roslyn versions, we really should <em>test</em> for those different versions too, right?</p> <h2 id=\"testing-multi-targeting-support\" class=\"heading-with-anchor\"><a href=\"#testing-multi-targeting-support\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Testing multi-targeting support</a></h2> <p>Testing is where things really start to get a little hairy. Prior to the multi-targeting support I had 3 main test projects, as I described previously:</p> <ul><li><code>NetEscapades.EnumGenerators.Tests</code></li> <li><code>NetEscapades.EnumGenerators.IntegrationTests</code></li> <li><code>NetEscapades.EnumGenerators.Nuget.IntegrationTests</code></li></ul> <p>However, if I really wanted to be sure that everything was working as expected, I decided I would need to run the tests <em>both</em> with the <code>4.4</code> Roslyn API and with the <code>4.11</code> Roslyn API. Which means running all the tests <em>twice</em> with two different versions of the .NET SDK.</p> <p>But on top of that the <em>unit test</em> project, <code>NetEscapades.EnumGenerators.Tests</code>, needs to reference one of the <em>NetEscapades.EnumGenerators</em> projects (<code>Roslyn4_04</code> or <code>Roslyn4_11</code>) directly, which means you actually need <em>two</em> versions of this project (or at least, that's what I did).</p> <blockquote> <p>This uses a \"normal\" project reference, so you can reference <em>either</em> version of the projects, the version of the SDK you're using for the unit testing/snapshot testing isn't critical.</p> </blockquote> <p>For the integration tests I took a slightly different approach. These test projects reference the <em>NetEscapades.EnumGenerators</em> projects as an <em>analyzer</em>. In this case we <em>can't</em> load the <code>Roslyn4_11</code> project unless we're using a supported version of the SDK, so it makes things a bit trickier. In the end, I ended up creating several new test projects:</p> <ul><li><code>NetEscapades.EnumGenerators.Tests.Roslyn4_04</code>: Runs all the unit/snapshot tests for the <code>4.4</code> version of the analyzer.</li> <li><code>NetEscapades.EnumGenerators.Tests.Roslyn4_11</code>: Runs all the unit/snapshot tests for the <code>4.11</code> version of the analyzer, including some additional snapshot tests for the interceptor support.</li> <li><code>NetEscapades.EnumGenerators.IntegrationTests</code>: References the <code>4.4</code> version of the generator, runs tests that are common to both implementations.</li> <li><code>NetEscapades.EnumGenerators.Interceptors.IntegrationTests</code>: References <em>either</em> the <code>4.4</code> or <code>4.11</code> version of the generator, <em>depending on the currently active .NET SDK version</em>, but only runs additional interceptor tests when using the <code>4.11</code> version</li> <li><code>NetEscapades.EnumGenerators.NuGet.IntegrationTests</code>: References the final generated NuGet package, and runs tests common to both implementations.</li> <li><code>NetEscapades.EnumGenerators.Interceptors.IntegrationTests</code>: References the final generated NuGet package, but only runs additional interceptor tests when using the <code>4.11</code> version.</li></ul> <p>If all that extra duplication sounds like a pain, you're not wrong 😅 Still, for full coverage, it's pretty much necessary. The following sections show how I handled the MSBuild/csproj mess.</p> <h3 id=\"splitting-the-snapshot-test-project\" class=\"heading-with-anchor\"><a href=\"#splitting-the-snapshot-test-project\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Splitting the snapshot test project</a></h3> <p>The <code>NetEscapades.EnumGenerators.Tests</code> project is <a href=\"/creating-a-source-generator-part-2-testing-an-incremental-generator-with-snapshot-testing/\">where I do the snapshot testing</a> of the generators, and is the main feedback loop when I'm developing a source generator. As I wanted to be able to quickly test both versions of the generator, all while developing locally, I split the project in two, each referencing a different version of <em>Microsoft.CodeAnalysis.CSharp</em> and of the generator project.</p> <p>As before, I reduced the duplication in the project files by moving the bulk of the definition into a <code>.targets</code> file, and referencing it from two different <em>.csproj</em> files. The <code>NetEscapades.EnumGenerators.Tests.Roslyn4_04</code> .csproj file looks like this:</p> <pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Project</span> <span class=\"token attr-name\">Sdk</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Microsoft.NET.Sdk<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>PropertyGroup</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>RoslynApiVersion</span><span class=\"token punctuation\">&gt;</span></span>4.4.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>RoslynApiVersion</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>PropertyGroup</span><span class=\"token punctuation\">&gt;</span></span>\n\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Import</span> <span class=\"token attr-name\">Project</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>NetEscapades.EnumGenerators.Tests.Project.targets<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ItemGroup</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ProjectReference</span> <span class=\"token attr-name\">Include</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>..\\..\\src\\NetEscapades.EnumGenerators\\NetEscapades.EnumGenerators.Roslyn4_04.csproj<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ItemGroup</span><span class=\"token punctuation\">&gt;</span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Project</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre> <p>The <code>Roslyn4_11</code> version is the same, but references the <code>Roslyn4_11</code> versions of the generator, sets <code>RoslynApiVersion</code> to <code>4.11.0</code>, and defines an additional MSBuild constant, <code>INTERCEPTORS</code>, for use in <code>#if</code> within test files . Both of the files reference the <code>.targets</code> file shown below, but the only real important part is the use of <code>$(RoslynApiVersion)</code>, which is taken from the projects file:</p> <pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Project</span><span class=\"token punctuation\">&gt;</span></span>\n\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>PropertyGroup</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>AssemblyName</span><span class=\"token punctuation\">&gt;</span></span>NetEscapades.EnumGenerators.Tests<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>AssemblyName</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>RootNamespace</span><span class=\"token punctuation\">&gt;</span></span>$(AssemblyName)<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>RootNamespace</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>TargetFrameworks</span><span class=\"token punctuation\">&gt;</span></span>netcoreapp3.1;net6.0;net7.0;net8.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>TargetFrameworks</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>IsPackable</span><span class=\"token punctuation\">&gt;</span></span>false<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>IsPackable</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>PropertyGroup</span><span class=\"token punctuation\">&gt;</span></span>\n\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ItemGroup</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token comment\">&lt;!-- Use the Roslyn API version passed in from the project file  --&gt;</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>PackageReference</span> <span class=\"token attr-name\">Include</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Microsoft.CodeAnalysis.CSharp<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">Version</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>$(RoslynApiVersion)<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">PrivateAssets</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>all<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>PackageReference</span> <span class=\"token attr-name\">Include</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Microsoft.NET.Test.Sdk<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">Version</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>16.11.0<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>PackageReference</span> <span class=\"token attr-name\">Include</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>System.ComponentModel.Annotations<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">Version</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>5.0.0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">Condition</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token punctuation\">'</span>$(TargetFramework)<span class=\"token punctuation\">'</span> == <span class=\"token punctuation\">'</span>net48<span class=\"token punctuation\">'</span><span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>PackageReference</span> <span class=\"token attr-name\">Include</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Verify.Xunit<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">Version</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>14.3.0<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>PackageReference</span> <span class=\"token attr-name\">Include</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>xunit<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">Version</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>2.4.1<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>PackageReference</span> <span class=\"token attr-name\">Include</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>xunit.runner.visualstudio<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">Version</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>2.4.3<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>IncludeAssets</span><span class=\"token punctuation\">&gt;</span></span>runtime; build; native; contentfiles; analyzers; buildtransitive<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>IncludeAssets</span><span class=\"token punctuation\">&gt;</span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>PrivateAssets</span><span class=\"token punctuation\">&gt;</span></span>all<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>PrivateAssets</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>PackageReference</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>PackageReference</span> <span class=\"token attr-name\">Include</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>coverlet.collector<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">Version</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>3.1.0<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>IncludeAssets</span><span class=\"token punctuation\">&gt;</span></span>runtime; build; native; contentfiles; analyzers; buildtransitive<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>IncludeAssets</span><span class=\"token punctuation\">&gt;</span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>PrivateAssets</span><span class=\"token punctuation\">&gt;</span></span>all<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>PrivateAssets</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>PackageReference</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>PackageReference</span> <span class=\"token attr-name\">Include</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>FluentAssertions<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">Version</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>6.12.0<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ItemGroup</span><span class=\"token punctuation\">&gt;</span></span>\n\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ItemGroup</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ProjectReference</span> <span class=\"token attr-name\">Include</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>..\\..\\src\\NetEscapades.EnumGenerators.Attributes\\NetEscapades.EnumGenerators.Attributes.csproj<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ItemGroup</span><span class=\"token punctuation\">&gt;</span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Project</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre> <p>Both of these test projects can run on any support .NET SDK version, because the generator directly uses the <code>Compilation</code> types provided in the <em>Microsoft.CodeAnalysis.CSharp</em> package, rather than relying on it being provided by the .NET SDK itself. That's different from the integration test projects, which <em>do</em> rely on the SDK.</p> <h3 id=\"multi-targeting-the-integration-test-project-for-multiple-net-sdk-versions\" class=\"heading-with-anchor\"><a href=\"#multi-targeting-the-integration-test-project-for-multiple-net-sdk-versions\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Multi-targeting the integration test project for multiple .NET SDK versions</a></h3> <p>The integration test projects for my source generators reference the generator projects, but add the generator with <code>OutputItemType=\"Analyzer\"</code>, as described <a href=\"/creating-a-source-generator-part-3-integration-testing-and-packaging/\">in a previous post</a>. This lets you test your generator <em>similar</em> to how it will be used \"in production\", but without needing to create and reference a NuGet package locally, which is a bit of a pain.</p> <p>In integration tests, your source generator is running <em>in</em> the compiler, so you need to be careful about the Roslyn APIs. You can only reference and test functionality exposed by the <code>Roslyn4_11</code> project if you're using a high enough SDK version. To achieve the testing I wanted, I needed to conditionally reference a different project (<code>Roslyn4_04</code> or <code>Roslyn4_11</code>) <em>based on the version of the .NET SDK I was building with</em>.</p> <p>It turns out, I've never had to do that before. I've had <em>minimum</em> .NET SDK version requirements, but needing to run with two different SDK versions isn't something I'd tried before. Luckily, it turns out that MSBuild exposes the .NET SDK version you're using as a property. I used this in my test project <em>.csproj</em> to set a simple MSBuild property and a constant, which I could use further on in the <em>.csproj</em> file, and in <code>#if</code> conditions in the code.</p> <p>This post is already long, so I've just shown the pertinent parts of the <em>.csproj</em> file below:</p> <pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token comment\">&lt;!-- Are we building with .NET SDK 8.0.400 or greater? --&gt;</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>PropertyGroup</span> <span class=\"token attr-name\">Condition</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>$([MSBuild]::VersionGreaterThanOrEquals(<span class=\"token punctuation\">'</span>$(NETCoreSdkVersion)<span class=\"token punctuation\">'</span>, <span class=\"token punctuation\">'</span>8.0.400<span class=\"token punctuation\">'</span>))<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token comment\">&lt;!-- If so, set some properties and constants --&gt;</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>UsingModernDotNetSdk</span><span class=\"token punctuation\">&gt;</span></span>true<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>UsingModernDotNetSdk</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>DefineConstants</span><span class=\"token punctuation\">&gt;</span></span>$(DefineConstants);INTERCEPTORS<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>DefineConstants</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>PropertyGroup</span><span class=\"token punctuation\">&gt;</span></span>\n\n<span class=\"token comment\">&lt;!-- This project can only be loaded when we have a high enough compiler version --&gt;</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ItemGroup</span> <span class=\"token attr-name\">Condition</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>$(UsingModernDotNetSdk) == true<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token comment\">&lt;!-- Can use the 4_11 project --&gt;</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ProjectReference</span> <span class=\"token attr-name\">Include</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>..\\..\\src\\NetEscapades.EnumGenerators\\NetEscapades.EnumGenerators.Roslyn4_11.csproj<span class=\"token punctuation\">\"</span></span>\n                    <span class=\"token attr-name\">OutputItemType</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Analyzer<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">ReferenceOutputAssembly</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>false<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ItemGroup</span><span class=\"token punctuation\">&gt;</span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ItemGroup</span> <span class=\"token attr-name\">Condition</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>$(UsingModernDotNetSdk) != true<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token comment\">&lt;!-- Have to use the 4_04 project instead--&gt;</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ProjectReference</span> <span class=\"token attr-name\">Include</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>..\\..\\src\\NetEscapades.EnumGenerators\\NetEscapades.EnumGenerators.Roslyn4_04.csproj<span class=\"token punctuation\">\"</span></span>\n                    <span class=\"token attr-name\">OutputItemType</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Analyzer<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">ReferenceOutputAssembly</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>false<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ItemGroup</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre> <p>That's the biggest difference in this project; the test files make judicious use of <code>#if INTERCEPTORS</code> to both test the behaviour where interceptors <em>are</em> available (in <code>4.11</code>) but also where they're <em>not</em> available (<code>4.4</code>).</p> <p>The final piece of the puzzle I want to touch on are how I set up the testing for this in CI.</p> <h2 id=\"setting-up-a-ci-build-in-github-actions\" class=\"heading-with-anchor\"><a href=\"#setting-up-a-ci-build-in-github-actions\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Setting up a CI build in GitHub Actions</a></h2> <p>Prior to the above changes, I already had a relatively simple, but thorough, GitHub Actions CI pipeline set up for building and testing the package, which looked something like the following (I've reduced some of the unimportant aspects):</p> <pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> BuildAndPack\n\n<span class=\"token comment\"># Build pushes and PRs</span>\n<span class=\"token key atrule\">on</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">push</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">branches</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> main\n    <span class=\"token key atrule\">tags</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token string\">'*'</span>\n  <span class=\"token key atrule\">pull_request</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">branches</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token string\">'*'</span>\n\n<span class=\"token key atrule\">jobs</span><span class=\"token punctuation\">:</span>\n  <span class=\"token comment\"># Build and test on multiple OS</span>\n  <span class=\"token key atrule\">build-and-test</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">strategy</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">matrix</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">include</span><span class=\"token punctuation\">:</span>\n          <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">os</span><span class=\"token punctuation\">:</span> windows\n            <span class=\"token key atrule\">vm</span><span class=\"token punctuation\">:</span> windows<span class=\"token punctuation\">-</span>latest\n          <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">os</span><span class=\"token punctuation\">:</span> linux\n            <span class=\"token key atrule\">vm</span><span class=\"token punctuation\">:</span> ubuntu<span class=\"token punctuation\">-</span>latest\n          <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">os</span><span class=\"token punctuation\">:</span> macos\n            <span class=\"token key atrule\">vm</span><span class=\"token punctuation\">:</span> macos<span class=\"token punctuation\">-</span><span class=\"token number\">13</span>\n\n    <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> matrix.os<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n    <span class=\"token key atrule\">runs-on</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> matrix.vm<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n    <span class=\"token key atrule\">steps</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> actions/checkout@v4\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> actions/setup<span class=\"token punctuation\">-</span>dotnet@v4\n        <span class=\"token key atrule\">with</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">dotnet-version</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">|</span><span class=\"token scalar string\">\n            8.0.402\n            6.0.x\n            3.1.x</span>\n      <span class=\"token comment\"># Build, Test, Pack, Test the NuGet package, and (optionally) push to NuGet</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Run './build.cmd Clean Test TestPackage PushToNuGet'\n        <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span> ./build.cmd Clean Test TestPackage PushToNuGet\n        <span class=\"token key atrule\">env</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">NuGetToken</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> secrets.NUGET_TOKEN <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n</code></pre> <p>Previously, this whole build was using the <code>8.0.402</code> .NET SDK, but with my changes I wanted to ensure I could run <em>some</em> of the tests with an earlier version of the .NET SDK. Specifically, and for simplicity, I decided to <em>only</em> run the NuGet package tests on both SDKs in CI. Consequently, I updated the build pipeline to be something like the following (again, simplified, but with the changes highlighted):</p> <pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> BuildAndPack\n\n<span class=\"token comment\"># Build pushes and PRs</span>\n<span class=\"token key atrule\">on</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">push</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">branches</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> main\n    <span class=\"token key atrule\">tags</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token string\">'*'</span>\n  <span class=\"token key atrule\">pull_request</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">branches</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token string\">'*'</span>\n\n<span class=\"token key atrule\">jobs</span><span class=\"token punctuation\">:</span>\n  <span class=\"token comment\"># Build and test on multiple OS</span>\n  <span class=\"token key atrule\">build-and-test</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">strategy</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">matrix</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">include</span><span class=\"token punctuation\">:</span>\n          <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">os</span><span class=\"token punctuation\">:</span> windows\n            <span class=\"token key atrule\">vm</span><span class=\"token punctuation\">:</span> windows<span class=\"token punctuation\">-</span>latest\n          <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">os</span><span class=\"token punctuation\">:</span> linux\n            <span class=\"token key atrule\">vm</span><span class=\"token punctuation\">:</span> ubuntu<span class=\"token punctuation\">-</span>latest\n          <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">os</span><span class=\"token punctuation\">:</span> macos\n            <span class=\"token key atrule\">vm</span><span class=\"token punctuation\">:</span> macos<span class=\"token punctuation\">-</span><span class=\"token number\">13</span>\n\n    <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> matrix.os<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n    <span class=\"token key atrule\">runs-on</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> matrix.vm<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n    <span class=\"token key atrule\">steps</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> actions/checkout@v4\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> actions/setup<span class=\"token punctuation\">-</span>dotnet@v4\n        <span class=\"token key atrule\">with</span><span class=\"token punctuation\">:</span>\n          <span class=\"token comment\"># NOTE: installing the 8.0.110 SDK too</span>\n          <span class=\"token key atrule\">dotnet-version</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">|</span><span class=\"token scalar string\">\n            8.0.402\n            8.0.110\n            6.0.x\n            3.1.x</span>\n      <span class=\"token comment\"># Force the build to use the 8.0.402 SDK specifically</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span> dotnet new globaljson <span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>sdk<span class=\"token punctuation\">-</span>version \"8.0.402\" <span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>force\n\n      <span class=\"token comment\"># Run the build, test, pack, and package test with the 8.0.402 SDK</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Run './build.cmd Clean Test TestPackage'\n        <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span> ./build.cmd Clean Test TestPackage\n\n      <span class=\"token comment\"># Force the build to use an earlier .NET SDK</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span> dotnet new globaljson <span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>sdk<span class=\"token punctuation\">-</span>version \"8.0.110\" <span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>force\n\n      <span class=\"token comment\"># Run the TestPackage stage with the earlier SDK (skipping dependent steps)</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Run './build.cmd TestPackage PushToNuGet <span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>skip'\n        <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span> ./build.cmd TestPackage PushToNuGet <span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>skip\n        <span class=\"token key atrule\">env</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">NuGetToken</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> secrets.NUGET_TOKEN <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n</code></pre> <p>I <em>could</em> have chosen to run <em>all</em> the integration tests with the earlier SDK, but it didn't seem worth the effort, as I share <a href=\"/creating-a-source-generator-part-3-integration-testing-and-packaging/\">the same actual test files between both the integration tests and package tests</a>. So with that, I'm done!</p> <h2 id=\"was-it-worth-it-should-you-do-it-\" class=\"heading-with-anchor\"><a href=\"#was-it-worth-it-should-you-do-it-\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Was it worth it? Should you do it?</a></h2> <p>As you can tell by the length of the post, there's a <em>lot</em> of moving pieces required to support multiple Roslyn API versions in a source generator. This post is actually quite brief compared to the changes I found I needed to make in my project, as I haven't touched on a bunch of additional points.</p> <blockquote> <p>A prime example of work not covered here is tracking your tests in CI. I wanted to make sure I didn't \"lose\" any tests with these changes, and to understand exactly what I was testing under what SDK. I used the <code>EnricoMi/publish-unit-test-result-action@v2</code> GitHub Action for this, but tracking it properly required a bunch of gnarly <code>#if</code>/<code>#elif</code> that I didn't go into in this post, but <a href=\"https://github.com/andrewlock/NetEscapades.EnumGenerators/blob/main/tests/NetEscapades.EnumGenerators.Interceptors.IntegrationTests/InterceptorTests.cs#L8-L28\">which you can see in the repo</a> if you like pain😆</p> </blockquote> <p>So…was it worth it? Well, it depends. If you don't <em>have</em> to do this, then don't. It's a <em>lot</em> of work and added complexity to a project, without a big pay off. <em>In general</em> there aren't a lot of reasons <em>not</em> to just update your .NET SDK, so there <em>shouldn't</em> be a big call for supporting older versions of the SDK.</p> <blockquote> <p>Ironically, I have one in my day job—.NET 8 dropped support for the unsupported (but still heavily used) CentOS 7 Linux distro (and related distros), which means we <em>can't</em> upgrade the SDK for the portions of the build that need to run on CentOS 7🙁</p> </blockquote> <p>In my case, I wanted to increase the .NET SDK requirement so I could add a <em>preview</em> of an <em>optional</em> component. That didn't seem a big enough justification for forcing <em>everyone</em> to update their .NET SDK, so multi-targeting <em>somewhat</em> made sense. Honestly, I mostly took the multi-targeting approach to see how bad it would be. And the verdict is: it's Pretty Bad™😅</p> <h2 id=\"summary\" class=\"heading-with-anchor\"><a href=\"#summary\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Summary</a></h2> <p>In this post I showed how you could update an existing source generator project to add multi-targeting support for multiple Roslyn API versions. This ensures your source generator can run on the widest possible range of .NET SDK versions and that features which require a newer SDK version can \"light up\" when it's available. Unfortunately this process is somewhat complex.</p> <p>In this post I described the changes I made to the project files of my <em>NetEscapades.EnumGenerators</em> source generator project when I added Roslyn API multi-targeting support. I split the main source generator API into two, to produce two different dlls targeting different versions of the <em>Microsoft.CodeAnalysis.CSharp</em> package. To test the changes, I split my unit testing projects in two, each testing a different version of the source generator project, and updated the integration tests to support working with multiple versions of the .NET SDK.</p> <p>Overall multi-targeting multiple versions of the .NET SDK adds quite a lot of complexity to the various projects you need, and I wouldn't recommend it unless you definitely need to.</p> ",
    "sanitized": "This is the fourteen post in the series: Creating a source generator.  Part 1 - Creating an incremental generatorPart 2 - Testing an incremental generator with snapshot testingPart 3 - Integration testing and NuGet packagingPart 4 - Customising generated code with marker attributesPart 5 - Finding a type declaration's namespace and type hierarchyPart 6 - Saving source generator output in source controlPart 7 - Solving the source generator 'marker attribute' problem - Part 1Part 8 - Solving the source generator 'marker attribute' problem - Part 2Part 9 - Avoiding performance pitfalls in incremental generatorsPart 10 - Testing your incremental generator pipeline outputs are cacheablePart 11 - Implementing an interceptor with a source generatorPart 12 - Reading compilation options and the C# version in source generatorsPart 13 - Accessing MSBuild properties and user configuration from source generatorsPart 14 - Supporting multiple .NET SDK versions in a source generator (this post) In my previous post I described why you might want (or need) to target multiple versions of the .NET SDK in a source generator. In this post I show how I applied this to my NetEscapades.EnumGenerators source generator, so that I could support features only available in the .NET 8/9 SDK, while still supporting users stuck on the .NET 7 SDK. .NET SDK versions, Microsoft.CodeAnalysis.CSharp, and NuGet package layouts In my previous post I provided a long description of how and why you might need to target multiple versions of the .NET SDK. This post directly follows on from that one, so if you haven't, I suggest reading that one first. In summary, when you create a source generator, you reference a specific version of the Microsoft.CodeAnalysis.CSharp NuGet package. The version of this package you choose defines the minimum version of Visual Studio, MSBuild, and the .NET SDK that your source generator will work with. The higher the version, the more Roslyn APIs you can use, but the higher the version of the .NET SDK the consumer must be using. In the .NET 6 SDK, Microsoft updated the logic that finds analyzers/source generators in a NuGet file to allow versioning a source generator by Roslyn API version. That means you can ship a source generator that provides basic functionality when used with the .NET 6 SDK (for example) but which provides additional functionality when used with the .NET 7 or .NET 8 SDKs, for example. You do this by shipping multiple versions of the generator in the NuGet package, each compiled against a different version of Microsoft.CodeAnalysis.CSharp:  The .NET SDK then loads the highest supported version of the analyzer, based on the version of the Roslyn API that it supports. I covered most of the details of why you might want to multi-target multiple roslyn versions in your package in the previous post, so in this post I'll show how I added multi-targeting support to my NetEscapades.EnumGenerators source generator. Adding multi-targeting support for NetEscapades.EnumGenerators The NetEscapades.EnumGenerators package is a source generator for making working with enums faster. I recently added experimental support for interceptors to the package, but this required using a newer version of the Roslyn API than I was previously. The interceptor API I needed was only available in .NET SDK version 8.0.400 (version 4.11 of the Roslyn API in Microsoft.CodeAnalysis.CSharp), whereas I was currently targeting 4.4. The easy approach would have been to simply update the version of Microsoft.CodeAnalysis.CSharp to 4.11.0 to give access to the 4.11 Roslyn API. However, doing so would have meant that anyone currently using the package with a .NET 7 SDK or a .NET 8 SDK below 8.0.400 would have been broken. Rather than inconvenience people, I decided to have a go at multi-targeting. This would ensure that down-version users could use the basic functionality, but the interceptor support would not be available. Meanwhile, anyone using 8.0.400 or higher of the .NET SDK would be able to enable the interceptor functionality. The best of both worlds! The approach I took to multi-targeting was heavily based on the approach taken by the built-in generators like the System.Text.Json generator and the Microsoft.Extensions.Logging generator when they first added multi-targeting support. I implemented the bulk of the support in a single PR, and it's broadly the same approach I show in this post. The original: prior to multi-targeting To set the stage, prior to multi-targeting, the NetEscapades.EnumGenerators source generator targeted version 4.4 of the Roslyn API, by referencing 4.4.0 of the Microsoft.CodeAnalysis.CSharp NuGet package. This API version corresponds to the .NET 7 SDK, and gives access to the recommended ForAttributeWithMetadataName API. The solution consisted of two main projects: NetEscapades.EnumGenerators: The main source generator project NetEscapades.EnumGenerators.Attributes: A library project containing the \"marker\" attributes that drive the source generator There's also a bunch of test projects, some of the main ones are described below. I've described these approaches in more detail previously in this series: NetEscapades.EnumGenerators.Tests: Unit tests for the generator functionality, and snapshot tests comparing the generated output NetEscapades.EnumGenerators.IntegrationTests: \"Integration\" test project that references the source generator project directly, and runs a bunch of tests. This ensures the generated output actually compiles, and gives the expected values when executed, for example. NetEscapades.EnumGenerators.Nuget.IntegrationTests: Runs the same tests as the above project, but instead of referencing the source generator directly, it uses a version of the generator that has been fully packed into a NuGet package. This is the closest to a \"real life\" scenario you can get to. There are a bunch of other tests for additional variations, but I'll ignore those for brevity:  Now we have the starting point, lets begin the migration to support multiple Roslyn versions. Splitting the source generator project Prior to supporting the multi-targeting, the NetEscapades.EnumGenerators .csproj file looked as shown below. This includes a variety of properties and items. Some of the properties (<TargetFramework>, <PackageReference>) are related to building the source generator dll, some parts are related to properties of the final NuGet package (<PackageId>, <Description>), and some are related to controlling the contents of the final NuGet package (<PackageReadmeFile>, PackagePath attributes): <Project Sdk=\"Microsoft.NET.Sdk\">\n\n  <PropertyGroup>\n    <TargetFramework>netstandard2.0</TargetFramework>\n    <IncludeBuildOutput>false</IncludeBuildOutput>\n    <Nullable>enable</Nullable>\n    <ImplicitUsings>true</ImplicitUsings>\n    <PackageId>NetEscapades.EnumGenerators</PackageId>\n    <Description>A source generator for creating helper extension methods on enums using a [EnumExtensions] attribute</Description>\n    <PackageReadmeFile>README.md</PackageReadmeFile>\n  </PropertyGroup>\n\n  <!-- These are references required by the source generator -->\n  <ItemGroup>\n    <PackageReference Include=\"Microsoft.CodeAnalysis.Analyzers\" Version=\"3.3.3\" PrivateAssets=\"all\" />\n    <PackageReference Include=\"Microsoft.CodeAnalysis.CSharp\" Version=\"4.4.0\" PrivateAssets=\"all\" />\n    <ProjectReference Include=\"..\\NetEscapades.EnumGenerators.Attributes\\NetEscapades.EnumGenerators.Attributes.csproj\" PrivateAssets=\"All\" />\n  </ItemGroup>\n\n  <!-- These tweak and control the contents of the NuGet package -->\n  <ItemGroup>\n    <None Include=\"../../README.md\" Pack=\"true\" PackagePath=\"\\\" />\n\n    <!-- Pack the source generator and attributes dll -->\n    <None Include=\"$(OutputPath)\\$(AssemblyName).dll\" Pack=\"true\" PackagePath=\"analyzers/dotnet/cs\" Visible=\"false\" />\n    <None Include=\"$(OutputPath)\\NetEscapades.EnumGenerators.Attributes.dll\" Pack=\"true\" PackagePath=\"analyzers/dotnet/cs\" Visible=\"false\" />\n\n    <!-- Pack the attributes file to be referenced by the target project -->\n    <None Include=\"$(OutputPath)\\NetEscapades.EnumGenerators.Attributes.dll\" Pack=\"true\" PackagePath=\"lib\\netstandard2.0\" Visible=\"true\" />\n    <None Include=\"$(OutputPath)\\NetEscapades.EnumGenerators.Attributes.xml\" Pack=\"true\" PackagePath=\"lib\\netstandard2.0\" Visible=\"true\" />\n    <None Include=\"$(OutputPath)\\NetEscapades.EnumGenerators.Attributes.dll\" Pack=\"true\" PackagePath=\"lib\\net451\" Visible=\"true\" />\n    <None Include=\"$(OutputPath)\\NetEscapades.EnumGenerators.Attributes.xml\" Pack=\"true\" PackagePath=\"lib\\net451\" Visible=\"true\" />\n  </ItemGroup>\n</Project>\n To support multi-targeting, we need to make some significant changes to this project: Split the source generator project into multiple projects, each referencing different version of Microsoft.CodeAnalysis.CSharp. One project references version 4.4.0. This is the \"lower\" bound for our SDK support, and corresponds to the .NET 7 SDK. Another project references version 4.11.0. This is the \"enhanced\" SDK support, which we need for interceptor support, and corresponds to 8.0.4xx of the .NET SDK.  Update the projects to share most of the implementation. Update the implementation in the 4.11 project with the additional functionality. Create a separate project that is used solely to pack the two source generator dlls into the final NuGet package. You could also use a nuspec file for this, but I prefer to use a csproj instead. The final result looks something like this in the solution explorer:  So the original NetEscapades.EnumGenerators project has gone, and we have three projects in its place: NetEscapades.EnumGenerators.Rolsyn4_04: The version of the generator that references Microsoft.CodeAnalysis.CSharp 4.4.0. NetEscapades.EnumGenerators.Rolsyn4_11: The version of the generator that references Microsoft.CodeAnalysis.CSharp 4.11.0. NetEscapades.EnumGenerators.Pack: A project focused solely on collecting the output artifacts from the other source projects and producing the final NuGet package. Note that the three projects are peers in the solution explorer, but the files are all side-by-side in the same folder in the filesystem, rather than being in separate folders:  Now lets look at the project files, as well as some ancillary files. Exploring the new project files We'll start by looking at the NetEscapades.EnumGenerators.Rolsyn4_04 and NetEscapades.EnumGenerators.Rolsyn4_11 .csproj files. These are quite simple, basically just defining the version of the Roslyn API they require and then importing a separate .targets file. The Rolsyn4_04 project looks like this: <Project Sdk=\"Microsoft.NET.Sdk\">\n\n  <PropertyGroup>\n    <RoslynApiVersion>4.4.0</RoslynApiVersion>\n    <IsPackable>false</IsPackable>\n  </PropertyGroup>\n\n  <Import Project=\"NetEscapades.EnumGenerators.Build.targets\" />\n\n</Project>\n and the Rolsyn4_11 project looks like this: <Project Sdk=\"Microsoft.NET.Sdk\">\n\n  <PropertyGroup>\n    <RoslynApiVersion>4.11.0</RoslynApiVersion>\n    <DefineConstants>$(DefineConstants);INTERCEPTORS</DefineConstants>\n    <IsPackable>false</IsPackable>\n  </PropertyGroup>\n\n  <Import Project=\"NetEscapades.EnumGenerators.Build.targets\" />\n\n</Project>\n Note that I've defined an additional constant in the Rolsyn4_11 project, so that I can use #if INTERCEPTORS in the source generator code, and share the same files between both projects. The bulk of the project definition happens in the NetEscapades.EnumGenerators.Build.targets file (the name is chosen arbitrarily). This includes most of the same property definitions as we had before, with a couple of tweaks, which I've highlighted in comments below: <Project>\n\n  <PropertyGroup>\n    <TargetFramework>netstandard2.0</TargetFramework>\n    <IncludeBuildOutput>false</IncludeBuildOutput>\n    <PackageId>NetEscapades.EnumGenerators</PackageId>\n\n    <!-- Explicitly define these, so that both projects produce dlls with the same name -->\n    <AssemblyName>$(PackageId)</AssemblyName>\n    <RootNamespace>$(PackageId)</RootNamespace>\n    <Nullable>enable</Nullable>\n    <ImplicitUsings>true</ImplicitUsings>\n    <PackageId>NetEscapades.EnumGenerators</PackageId>\n    <Description>A source generator for creating helper extension methods on enums using a [EnumExtensions] attribute</Description>\n    <PackageReadmeFile>README.md</PackageReadmeFile>\n    <EnforceExtendedAnalyzerRules>true</EnforceExtendedAnalyzerRules>\n  </PropertyGroup>\n\n  <ItemGroup>\n    <PackageReference Include=\"Microsoft.CodeAnalysis.Analyzers\" Version=\"3.3.4\" PrivateAssets=\"all\" />\n    <!-- Use the RoslynApiVersion version defined in the project's .csproj -->\n    <PackageReference Include=\"Microsoft.CodeAnalysis.CSharp\" Version=\"$(RoslynApiVersion)\" PrivateAssets=\"all\" />\n    <ProjectReference Include=\"..\\NetEscapades.EnumGenerators.Attributes\\NetEscapades.EnumGenerators.Attributes.csproj\" PrivateAssets=\"All\" />\n  </ItemGroup>\n\n</Project>\n As you can see, this .targets file only includes values for controlling how the dlls are built. There's nothing related to actually packaging the file here. That's all handled in the .Pack project, which admittedly, feels a bit of a hack. The .csproj for the .Pack project looks like the following (heavily commented to try to make sense of it all!): <Project Sdk=\"Microsoft.NET.Sdk\">\n\n  <!-- This project is just used to _pack_ the NuGet, containing both the other analyzers -->\n  <!-- We still import the same targets file to ensure we have the same values. There are -->\n  <!-- probably other, better ways of doing this (e.g. using Directory.Build.props), but -->\n  <!-- this is where I eventually ended up, and it works, so I haven't bothered experimenting -->\n  <PropertyGroup>\n    <RoslynApiVersion>4.11.0</RoslynApiVersion>\n    <IsPackable>true</IsPackable>\n  </PropertyGroup>\n\n  <Import Project=\"NetEscapades.EnumGenerators.Build.targets\" />\n\n  <!-- These project references to each of the \"real\" projects ensures everything builds -->\n  <!-- in the correct order etc. We set ReferenceOutputAssembly=\"false\" though -->\n  <ItemGroup>\n    <ProjectReference Include=\"..\\NetEscapades.EnumGenerators\\NetEscapades.EnumGenerators.Roslyn4_04.csproj\" \n      PrivateAssets=\"All\" ReferenceOutputAssembly=\"false\" />\n    <ProjectReference Include=\"..\\NetEscapades.EnumGenerators\\NetEscapades.EnumGenerators.Roslyn4_11.csproj\"\n      PrivateAssets=\"All\" ReferenceOutputAssembly=\"false\" />\n  </ItemGroup>\n\n  <ItemGroup>\n    <!-- We don't want to actually build anything in this project -->\n    <Compile Remove=\"**\\*.cs\" />\n    <None Include=\"../../README.md\" Pack=\"true\" PackagePath=\"\\\" />\n\n    <!-- Pack the Roslyn4_04 project output into the analyzers/dotnet/roslyn4.4/cs folder -->\n    <!-- and the Roslyn4_11 project output into the analyzers/dotnet/roslyn4.11/cs folder -->\n    <None Include=\"$(OutputPath)\\..\\..\\NetEscapades.EnumGenerators.Roslyn4_04\\$(ArtifactsPivots)\\$(AssemblyName).dll\"\n          Pack=\"true\" PackagePath=\"analyzers/dotnet/roslyn4.4/cs\" Visible=\"false\" />\n    <None Include=\"$(OutputPath)\\..\\..\\NetEscapades.EnumGenerators.Roslyn4_11\\$(ArtifactsPivots)\\$(AssemblyName).dll\"\n          Pack=\"true\" PackagePath=\"analyzers/dotnet/roslyn4.11/cs\" Visible=\"false\" />\n\n    <!-- Pack the attributes dll for both Roslyn versions for referencing by the generator directly -->\n    <None Include=\"$(OutputPath)\\NetEscapades.EnumGenerators.Attributes.dll\" Pack=\"true\"\n          PackagePath=\"analyzers/dotnet/roslyn4.4/cs\" Visible=\"false\" />\n    <None Include=\"$(OutputPath)\\NetEscapades.EnumGenerators.Attributes.dll\" Pack=\"true\"\n          PackagePath=\"analyzers/dotnet/roslyn4.11/cs\" Visible=\"false\" />\n\n    <!-- Pack the attributes dll for referencing by the target project-->\n    <None Include=\"$(OutputPath)\\NetEscapades.EnumGenerators.Attributes.dll\" Pack=\"true\" PackagePath=\"lib\\netstandard2.0\" Visible=\"false\" />\n    <None Include=\"$(OutputPath)\\NetEscapades.EnumGenerators.Attributes.xml\" Pack=\"true\" PackagePath=\"lib\\netstandard2.0\" Visible=\"false\" />\n    <None Include=\"$(OutputPath)\\NetEscapades.EnumGenerators.Attributes.dll\" Pack=\"true\" PackagePath=\"lib\\net451\" Visible=\"false\" />\n    <None Include=\"$(OutputPath)\\NetEscapades.EnumGenerators.Attributes.xml\" Pack=\"true\" PackagePath=\"lib\\net451\" Visible=\"false\" />\n\n  </ItemGroup>\n</Project>\n Phew, that's a lot, but it is mostly just a way to define a nuspec file while reusing values between the dlls. A simple dotnet pack and we have everything we need! Of course, as we're now building for multiple Roslyn versions, we really should test for those different versions too, right? Testing multi-targeting support Testing is where things really start to get a little hairy. Prior to the multi-targeting support I had 3 main test projects, as I described previously: NetEscapades.EnumGenerators.Tests NetEscapades.EnumGenerators.IntegrationTests NetEscapades.EnumGenerators.Nuget.IntegrationTests However, if I really wanted to be sure that everything was working as expected, I decided I would need to run the tests both with the 4.4 Roslyn API and with the 4.11 Roslyn API. Which means running all the tests twice with two different versions of the .NET SDK. But on top of that the unit test project, NetEscapades.EnumGenerators.Tests, needs to reference one of the NetEscapades.EnumGenerators projects (Roslyn4_04 or Roslyn4_11) directly, which means you actually need two versions of this project (or at least, that's what I did).  This uses a \"normal\" project reference, so you can reference either version of the projects, the version of the SDK you're using for the unit testing/snapshot testing isn't critical.  For the integration tests I took a slightly different approach. These test projects reference the NetEscapades.EnumGenerators projects as an analyzer. In this case we can't load the Roslyn4_11 project unless we're using a supported version of the SDK, so it makes things a bit trickier. In the end, I ended up creating several new test projects: NetEscapades.EnumGenerators.Tests.Roslyn4_04: Runs all the unit/snapshot tests for the 4.4 version of the analyzer. NetEscapades.EnumGenerators.Tests.Roslyn4_11: Runs all the unit/snapshot tests for the 4.11 version of the analyzer, including some additional snapshot tests for the interceptor support. NetEscapades.EnumGenerators.IntegrationTests: References the 4.4 version of the generator, runs tests that are common to both implementations. NetEscapades.EnumGenerators.Interceptors.IntegrationTests: References either the 4.4 or 4.11 version of the generator, depending on the currently active .NET SDK version, but only runs additional interceptor tests when using the 4.11 version NetEscapades.EnumGenerators.NuGet.IntegrationTests: References the final generated NuGet package, and runs tests common to both implementations. NetEscapades.EnumGenerators.Interceptors.IntegrationTests: References the final generated NuGet package, but only runs additional interceptor tests when using the 4.11 version. If all that extra duplication sounds like a pain, you're not wrong 😅 Still, for full coverage, it's pretty much necessary. The following sections show how I handled the MSBuild/csproj mess. Splitting the snapshot test project The NetEscapades.EnumGenerators.Tests project is where I do the snapshot testing of the generators, and is the main feedback loop when I'm developing a source generator. As I wanted to be able to quickly test both versions of the generator, all while developing locally, I split the project in two, each referencing a different version of Microsoft.CodeAnalysis.CSharp and of the generator project. As before, I reduced the duplication in the project files by moving the bulk of the definition into a .targets file, and referencing it from two different .csproj files. The NetEscapades.EnumGenerators.Tests.Roslyn4_04 .csproj file looks like this: <Project Sdk=\"Microsoft.NET.Sdk\">\n\n  <PropertyGroup>\n    <RoslynApiVersion>4.4.0</RoslynApiVersion>\n  </PropertyGroup>\n\n  <Import Project=\"NetEscapades.EnumGenerators.Tests.Project.targets\" />\n\n  <ItemGroup>\n    <ProjectReference Include=\"..\\..\\src\\NetEscapades.EnumGenerators\\NetEscapades.EnumGenerators.Roslyn4_04.csproj\" />\n  </ItemGroup>\n\n</Project>\n The Roslyn4_11 version is the same, but references the Roslyn4_11 versions of the generator, sets RoslynApiVersion to 4.11.0, and defines an additional MSBuild constant, INTERCEPTORS, for use in #if within test files . Both of the files reference the .targets file shown below, but the only real important part is the use of $(RoslynApiVersion), which is taken from the projects file: <Project>\n\n  <PropertyGroup>\n    <AssemblyName>NetEscapades.EnumGenerators.Tests</AssemblyName>\n    <RootNamespace>$(AssemblyName)</RootNamespace>\n    <TargetFrameworks>netcoreapp3.1;net6.0;net7.0;net8.0</TargetFrameworks>\n    <IsPackable>false</IsPackable>\n  </PropertyGroup>\n\n  <ItemGroup>\n    <!-- Use the Roslyn API version passed in from the project file  -->\n    <PackageReference Include=\"Microsoft.CodeAnalysis.CSharp\" Version=\"$(RoslynApiVersion)\" PrivateAssets=\"all\" />\n    <PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"16.11.0\" />\n    <PackageReference Include=\"System.ComponentModel.Annotations\" Version=\"5.0.0\" Condition=\"'$(TargetFramework)' == 'net48'\" />\n    <PackageReference Include=\"Verify.Xunit\" Version=\"14.3.0\" />\n    <PackageReference Include=\"xunit\" Version=\"2.4.1\" />\n    <PackageReference Include=\"xunit.runner.visualstudio\" Version=\"2.4.3\">\n      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>\n      <PrivateAssets>all</PrivateAssets>\n    </PackageReference>\n    <PackageReference Include=\"coverlet.collector\" Version=\"3.1.0\">\n      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>\n      <PrivateAssets>all</PrivateAssets>\n    </PackageReference>\n    <PackageReference Include=\"FluentAssertions\" Version=\"6.12.0\" />\n  </ItemGroup>\n\n  <ItemGroup>\n    <ProjectReference Include=\"..\\..\\src\\NetEscapades.EnumGenerators.Attributes\\NetEscapades.EnumGenerators.Attributes.csproj\" />\n  </ItemGroup>\n\n</Project>\n Both of these test projects can run on any support .NET SDK version, because the generator directly uses the Compilation types provided in the Microsoft.CodeAnalysis.CSharp package, rather than relying on it being provided by the .NET SDK itself. That's different from the integration test projects, which do rely on the SDK. Multi-targeting the integration test project for multiple .NET SDK versions The integration test projects for my source generators reference the generator projects, but add the generator with OutputItemType=\"Analyzer\", as described in a previous post. This lets you test your generator similar to how it will be used \"in production\", but without needing to create and reference a NuGet package locally, which is a bit of a pain. In integration tests, your source generator is running in the compiler, so you need to be careful about the Roslyn APIs. You can only reference and test functionality exposed by the Roslyn4_11 project if you're using a high enough SDK version. To achieve the testing I wanted, I needed to conditionally reference a different project (Roslyn4_04 or Roslyn4_11) based on the version of the .NET SDK I was building with. It turns out, I've never had to do that before. I've had minimum .NET SDK version requirements, but needing to run with two different SDK versions isn't something I'd tried before. Luckily, it turns out that MSBuild exposes the .NET SDK version you're using as a property. I used this in my test project .csproj to set a simple MSBuild property and a constant, which I could use further on in the .csproj file, and in #if conditions in the code. This post is already long, so I've just shown the pertinent parts of the .csproj file below: <!-- Are we building with .NET SDK 8.0.400 or greater? -->\n<PropertyGroup Condition=\"$([MSBuild]::VersionGreaterThanOrEquals('$(NETCoreSdkVersion)', '8.0.400'))\">\n  <!-- If so, set some properties and constants -->\n  <UsingModernDotNetSdk>true</UsingModernDotNetSdk>\n  <DefineConstants>$(DefineConstants);INTERCEPTORS</DefineConstants>\n</PropertyGroup>\n\n<!-- This project can only be loaded when we have a high enough compiler version -->\n<ItemGroup Condition=\"$(UsingModernDotNetSdk) == true\">\n  <!-- Can use the 4_11 project -->\n  <ProjectReference Include=\"..\\..\\src\\NetEscapades.EnumGenerators\\NetEscapades.EnumGenerators.Roslyn4_11.csproj\"\n                    OutputItemType=\"Analyzer\" ReferenceOutputAssembly=\"false\" />\n</ItemGroup>\n\n<ItemGroup Condition=\"$(UsingModernDotNetSdk) != true\">\n  <!-- Have to use the 4_04 project instead-->\n  <ProjectReference Include=\"..\\..\\src\\NetEscapades.EnumGenerators\\NetEscapades.EnumGenerators.Roslyn4_04.csproj\"\n                    OutputItemType=\"Analyzer\" ReferenceOutputAssembly=\"false\" />\n</ItemGroup>\n That's the biggest difference in this project; the test files make judicious use of #if INTERCEPTORS to both test the behaviour where interceptors are available (in 4.11) but also where they're not available (4.4). The final piece of the puzzle I want to touch on are how I set up the testing for this in CI. Setting up a CI build in GitHub Actions Prior to the above changes, I already had a relatively simple, but thorough, GitHub Actions CI pipeline set up for building and testing the package, which looked something like the following (I've reduced some of the unimportant aspects): name: BuildAndPack\n\n# Build pushes and PRs\non:\n  push:\n    branches:\n      - main\n    tags:\n      - '*'\n  pull_request:\n    branches:\n      - '*'\n\njobs:\n  # Build and test on multiple OS\n  build-and-test:\n    strategy:\n      matrix:\n        include:\n          - os: windows\n            vm: windows-latest\n          - os: linux\n            vm: ubuntu-latest\n          - os: macos\n            vm: macos-13\n\n    name: ${{ matrix.os}}\n    runs-on: ${{ matrix.vm}}\n    steps:\n      - uses: actions/checkout@v4\n      - uses: actions/setup-dotnet@v4\n        with:\n          dotnet-version: |\n            8.0.402\n            6.0.x\n            3.1.x\n      # Build, Test, Pack, Test the NuGet package, and (optionally) push to NuGet\n      - name: Run './build.cmd Clean Test TestPackage PushToNuGet'\n        run: ./build.cmd Clean Test TestPackage PushToNuGet\n        env:\n          NuGetToken: ${{ secrets.NUGET_TOKEN }}\n Previously, this whole build was using the 8.0.402 .NET SDK, but with my changes I wanted to ensure I could run some of the tests with an earlier version of the .NET SDK. Specifically, and for simplicity, I decided to only run the NuGet package tests on both SDKs in CI. Consequently, I updated the build pipeline to be something like the following (again, simplified, but with the changes highlighted): name: BuildAndPack\n\n# Build pushes and PRs\non:\n  push:\n    branches:\n      - main\n    tags:\n      - '*'\n  pull_request:\n    branches:\n      - '*'\n\njobs:\n  # Build and test on multiple OS\n  build-and-test:\n    strategy:\n      matrix:\n        include:\n          - os: windows\n            vm: windows-latest\n          - os: linux\n            vm: ubuntu-latest\n          - os: macos\n            vm: macos-13\n\n    name: ${{ matrix.os}}\n    runs-on: ${{ matrix.vm}}\n    steps:\n      - uses: actions/checkout@v4\n      - uses: actions/setup-dotnet@v4\n        with:\n          # NOTE: installing the 8.0.110 SDK too\n          dotnet-version: |\n            8.0.402\n            8.0.110\n            6.0.x\n            3.1.x\n      # Force the build to use the 8.0.402 SDK specifically\n      - run: dotnet new globaljson --sdk-version \"8.0.402\" --force\n\n      # Run the build, test, pack, and package test with the 8.0.402 SDK\n      - name: Run './build.cmd Clean Test TestPackage'\n        run: ./build.cmd Clean Test TestPackage\n\n      # Force the build to use an earlier .NET SDK\n      - run: dotnet new globaljson --sdk-version \"8.0.110\" --force\n\n      # Run the TestPackage stage with the earlier SDK (skipping dependent steps)\n      - name: Run './build.cmd TestPackage PushToNuGet --skip'\n        run: ./build.cmd TestPackage PushToNuGet --skip\n        env:\n          NuGetToken: ${{ secrets.NUGET_TOKEN }}\n I could have chosen to run all the integration tests with the earlier SDK, but it didn't seem worth the effort, as I share the same actual test files between both the integration tests and package tests. So with that, I'm done! Was it worth it? Should you do it? As you can tell by the length of the post, there's a lot of moving pieces required to support multiple Roslyn API versions in a source generator. This post is actually quite brief compared to the changes I found I needed to make in my project, as I haven't touched on a bunch of additional points.  A prime example of work not covered here is tracking your tests in CI. I wanted to make sure I didn't \"lose\" any tests with these changes, and to understand exactly what I was testing under what SDK. I used the EnricoMi/publish-unit-test-result-action@v2 GitHub Action for this, but tracking it properly required a bunch of gnarly #if/#elif that I didn't go into in this post, but which you can see in the repo if you like pain😆  So…was it worth it? Well, it depends. If you don't have to do this, then don't. It's a lot of work and added complexity to a project, without a big pay off. In general there aren't a lot of reasons not to just update your .NET SDK, so there shouldn't be a big call for supporting older versions of the SDK.  Ironically, I have one in my day job—.NET 8 dropped support for the unsupported (but still heavily used) CentOS 7 Linux distro (and related distros), which means we can't upgrade the SDK for the portions of the build that need to run on CentOS 7🙁  In my case, I wanted to increase the .NET SDK requirement so I could add a preview of an optional component. That didn't seem a big enough justification for forcing everyone to update their .NET SDK, so multi-targeting somewhat made sense. Honestly, I mostly took the multi-targeting approach to see how bad it would be. And the verdict is: it's Pretty Bad™😅 Summary In this post I showed how you could update an existing source generator project to add multi-targeting support for multiple Roslyn API versions. This ensures your source generator can run on the widest possible range of .NET SDK versions and that features which require a newer SDK version can \"light up\" when it's available. Unfortunately this process is somewhat complex. In this post I described the changes I made to the project files of my NetEscapades.EnumGenerators source generator project when I added Roslyn API multi-targeting support. I split the main source generator API into two, to produce two different dlls targeting different versions of the Microsoft.CodeAnalysis.CSharp package. To test the changes, I split my unit testing projects in two, each testing a different version of the source generator project, and updated the integration tests to support working with multiple versions of the .NET SDK. Overall multi-targeting multiple versions of the .NET SDK adds quite a lot of complexity to the various projects you need, and I wouldn't recommend it unless you definitely need to."
  },
  {
    "itemId": "https://andrewlock.net/supporting-multiple-sdk-versions-in-analyzers-and-source-generators/",
    "raw": "<img src=\"https://andrewlock.net/content/images/2025/system_text_json_banner.png\" /><p>In this post I describe why source generators might need to work with multiple versions of the .NET SDK. This may be necessary if you want to support features that are only available in newer versions of the .NET SDK, while simultaneously supporting users building with older versions of the .NET SDK in a more limited fashion. I then show how support was added in .NET 6 for this scenario, and how NuGet package layouts have changed. In the next post I show how you can add multi-targeting support to your own packages.</p> <h2 id=\"why-does-the-version-of-the-net-sdk-matter-for-source-generators-\" class=\"heading-with-anchor\"><a href=\"#why-does-the-version-of-the-net-sdk-matter-for-source-generators-\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Why does the version of the .NET SDK matter for source generators?</a></h2> <p>When you create a source generator, you reference a specific version of the <a href=\"https://www.nuget.org/packages/Microsoft.CodeAnalysis.CSharp\">Microsoft.CodeAnalysis.CSharp</a> NuGet package. The <a href=\"https://learn.microsoft.com/en-us/visualstudio/extensibility/roslyn-version-support\">version of the package</a> you choose defines the minimum version of <a href=\"https://learn.microsoft.com/en-us/dotnet/core/porting/versioning-sdk-msbuild-vs\">Visual Studio, MSBuild, and the .NET SDK</a> that your source generator will work with.</p> <p>The following table is compiled (well, inferred) from the links above, primarily for recent versions of the package:</p> <table><thead><tr><th style=\"text-align:center\">Roslyn package version</th><th style=\"text-align:center\">SDK version</th><th style=\"text-align:center\">MSBuild/Visual Studio version</th></tr></thead><tbody><tr><td style=\"text-align:center\">4.12.0</td><td style=\"text-align:center\">9.0.1xx</td><td style=\"text-align:center\">17.12</td></tr><tr><td style=\"text-align:center\">4.11.0</td><td style=\"text-align:center\">8.0.4xx</td><td style=\"text-align:center\">17.11</td></tr><tr><td style=\"text-align:center\">4.10.0</td><td style=\"text-align:center\">8.0.3xx</td><td style=\"text-align:center\">17.10</td></tr><tr><td style=\"text-align:center\">4.9.2</td><td style=\"text-align:center\">8.0.2xx</td><td style=\"text-align:center\">17.9</td></tr><tr><td style=\"text-align:center\">4.8.0</td><td style=\"text-align:center\">8.0.1xx</td><td style=\"text-align:center\">17.8</td></tr><tr><td style=\"text-align:center\">4.7.0</td><td style=\"text-align:center\">7.0.4xx</td><td style=\"text-align:center\">17.7</td></tr><tr><td style=\"text-align:center\">4.6.0</td><td style=\"text-align:center\">7.0.3xx</td><td style=\"text-align:center\">17.6</td></tr><tr><td style=\"text-align:center\">4.5.0</td><td style=\"text-align:center\">7.0.2xx</td><td style=\"text-align:center\">17.5</td></tr><tr><td style=\"text-align:center\">4.4.0</td><td style=\"text-align:center\">7.0.1xx</td><td style=\"text-align:center\">17.4</td></tr><tr><td style=\"text-align:center\">4.3.1</td><td style=\"text-align:center\">6.0.4xx</td><td style=\"text-align:center\">17.3</td></tr><tr><td style=\"text-align:center\">4.2.0</td><td style=\"text-align:center\">6.0.3xx</td><td style=\"text-align:center\">17.2</td></tr><tr><td style=\"text-align:center\">4.1.0</td><td style=\"text-align:center\">6.0.2xx</td><td style=\"text-align:center\">17.1</td></tr><tr><td style=\"text-align:center\">4.0.1</td><td style=\"text-align:center\">6.0.1xx</td><td style=\"text-align:center\">17.0</td></tr><tr><td style=\"text-align:center\">3.8.0</td><td style=\"text-align:center\">5.0.1xx</td><td style=\"text-align:center\">16.8</td></tr><tr><td style=\"text-align:center\">3.4.0</td><td style=\"text-align:center\">3.1.1xx</td><td style=\"text-align:center\">16.4</td></tr><tr><td style=\"text-align:center\">2.10.0</td><td style=\"text-align:center\">2.1.5xx</td><td style=\"text-align:center\">15.9</td></tr></tbody></table> <p>As you can see, each new minor release of the .NET SDK and Visual Studio version is associated with a new Roslyn package (<em>Microsoft.CodeAnalysis.CSharp</em>) version. Each new version of the package provides additional APIs for you to use.</p> <p>For example, when I first created my NetEscapades.EnumGenerators project I used version <code>4.0.1</code> of <em>Microsoft.CodeAnalysis.CSharp</em>, which gave access to the new incremental generator API <code>IIncrementalGenerator</code> introduced in .NET 6.</p> <p>When I wanted to use <a href=\"/creating-a-source-generator-part-9-avoiding-performance-pitfalls-in-incremental-generators/#1-use-the-net-7-api-forattributewithmetadataname\">the recommended <code>ForAttributeWithMetadataName</code> API</a> introduced in .NET 7, I had to update the <em>Microsoft.CodeAnalysis.CSharp</em> version used by the source generator to <code>4.4.0</code>. However, by updating that dependency, the source generator was no longer compatible with the .NET 6 SDK. You could still install the package, but the generator would not work, and you would get a warning at compile time:</p> <pre class=\"language-plain\"><code class=\"language-plain\">CSC : warning CS8032: An instance of analyzer NetEscapades.EnumGenerators.EnumGenerator\ncannot be created from C:\\Users\\Sock\\.nuget\\packages\\enumgenerators.enumgenerator\\1.0.0-beta09\\analyzers\\dotnet\\\ncs\\NetEscapades.EnumGenerators.dll : \nCould not load file or assembly 'Microsoft.CodeAnalysis, Version=4.4.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'. \nThe system cannot find the file specified.\n</code></pre> <p>So in general, if you want to have the broadest support, you should reference the <em>lowest</em> version of <em>Microsoft.CodeAnalysis.CSharp</em> that you can. On the other hand, if you want access to the latest SDK features, you need to reference the <em>highest</em> version of the package. It's the same classic trade-off that library maintainers have to make when it comes to dependencies, and what's the right choice for you will vary.</p> <h2 id=\"supporting-multiple-sdk-versions-and-lighting-up-features\" class=\"heading-with-anchor\"><a href=\"#supporting-multiple-sdk-versions-and-lighting-up-features\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Supporting multiple SDK versions and lighting-up features</a></h2> <p>One traditional approach to solving the \"broader support vs. features\" trade-off is to kind of do both! You target the lowest version of the API you can get away with, and that serves as your lower bound. You then \"light up\" with additional features when you detect that a newer version of the API is available.</p> <p>A classic example of where this makes sense for a source generator is with <a href=\"https://andrewlock.net/recent-updates-for-netescapades-enumgenerators-interceptors/\">the interceptor support I recently added</a> to the <em>NetEscapades.EnumGenerators</em> source generator. The source generator requires version <code>4.4.0</code> as a minimum (.NET 7 SDK, for <code>ForAttributeWithMetadataName</code> support), but if you're using a .NET SDK version of <code>8.0.400</code> or greater, you can optionally enable the interceptor support.</p> <p>I <em>could</em> have made <code>8.0.400</code> the minimum required SDK version to get <em>any</em> functionality, but by making the interceptor support an optional extra, people stuck on older versions of the SDK can continue to use the other features of the library.</p> <p>There are also examples of needing to take this approach in the runtime itself. For example, the original System.Text.Json source generator was written to support the non-incremental version of source generators. However, <a href=\"https://github.com/dotnet/runtime/issues/56702\">this API was notorious for causing performance problems in the IDE</a>. The only solution was to rewrite the generator to use <code>IIncrementalGenerator</code>.</p> <p>Unfortunately, simply updating the <code>JsonSourceGenerator</code> package to use a newer version of <em>Microsoft.CodeAnalysis.CSharp</em> (to access the <code>IIncrementalGenerator</code> API) would have broken the generator for anyone using the (still supported at the time) .NET 5 SDK. Instead, the team created two versions of the generator—one that used the .NET 6 SDK and the <code>IIncrementalGenerator</code> API, and one that used the .NET 5 SDK and the non-incremental generator.</p> <p>Sounds easy enough, right? After all, shipping different code for multiple target frameworks in a single NuGet package has been possible in .NET for a long time. Well…not so fast. We're not talking about shipping different dlls per <em>framework</em>. We're talking about shipping different dlls per <em>.NET SDK</em>…</p> <h2 id=\"creating-nuget-packages-that-support-multiple-roslyn-sdk-versions\" class=\"heading-with-anchor\"><a href=\"#creating-nuget-packages-that-support-multiple-roslyn-sdk-versions\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Creating NuGet packages that support multiple Roslyn/SDK versions</a></h2> <p>The fundamental problem of needing to ship different versions of source generators (and analyzers more generally) <a href=\"https://github.com/dotnet/sdk/issues/20355\">was realised</a> as part of the .NET 6 preview releases, when the performance issues with the System.Text.Json generator appeared. At that point, there was essentially no solution—as a source generator author you had to choose either broad support or new APIs. And if you went for the latter, then customers using your package with old versions of the SDK would get warnings in their build.</p> <p>The solution was to update the logic in the .NET SDK that loads analyzers/source generators from NuGet packages to be \"SDK version aware\". This logic is available as of .NET 6.</p> <p>Prior to .NET 6, the .NET SDK only recognizes the following folder folder structure in NuGet packages for loading analyzers:</p> <pre><code>analyzers[\\dotnet][\\cs|vb]\\my_generator.dll\n</code></pre> <p>In .NET 6 this pattern is still recognized, but if you have specific Roslyn API version requirements, <a href=\"https://github.com/dotnet/sdk/pull/20793\">you can encode those in the folder structure</a>:</p> <pre><code>analyzers[\\dotnet][\\roslyn{version}][\\cs|vb]\\my_generator.dll\n</code></pre> <p>Note the additional <code>roslyn{version}</code> folder in the <code>analyzers\\dotnet</code> folder. The <code>{version}</code> is a <code>{major}.{minor}</code> number corresponding to the Roslyn API version (the version of the <em>Microsoft.CodeAnalysis.CSharp</em> package referenced in your source generator).</p> <p>By splitting by Roslyn API version, you can now ship multiple dlls in the same NuGet package, each of which uses a different version of the <em>Microsoft.CodeAnalysis.CSharp</em> package, and hence each of which can use features available in the specific version of the .NET SDK that's available.</p> <p>We can see this in practice by taking a look at how the layout of <a href=\"https://www.nuget.org/packages/System.Text.Json\">the System.Text.Json NuGet package</a> changed between <a href=\"https://www.nuget.org/packages/System.Text.Json/6.0.0-preview.5.21301.5\">the .NET 6 preview 5 builds</a> (when the non-incremental source generator was introduced) and <a href=\"https://www.nuget.org/packages/System.Text.Json/6.0.0\">the first GA .NET 6 build</a>.</p> <p>The <code>6.0.0-preview.5.21301.5</code> version of the package uses the default \"simple\" layout, placing the <em>System.Text.Json.SourceGeneration.dll</em> file in the <code>analyzers/dotnet/cs</code> folder:</p> <p><img src=\"/content/images/2025/system_text_json.png\" alt=\"The layout of the 6.0.0-preview.5.21301.5 version of the System.Text.Json NuGet\"></p> <p>In contrast, if we look at the <code>6.0.0</code> version of the package, you can see there are intermediate <code>roslyn3.11</code> and <code>roslyn4.0</code> folders. The <code>3.11</code> version includes a version of the generator that is compatible with the .NET 5 SDK, while the <code>4.0</code> version requires the .NET 6 SDK, and uses <code>IIncrementalGenerator</code>:</p> <p><img src=\"/content/images/2025/system_text_json_2.png\" alt=\"The layout of the 6.0.0 version of the System.Text.Json NuGet\"></p> <blockquote> <p>Note that I simplified the layout in the package above to remove the localization dlls, so if you inspect the version from nuget.org, you'll also see the additional satellite resource dlls.</p> </blockquote> <p>The <a href=\"https://www.nuget.org/packages/System.Text.Json/9.0.0\">latest version of the package</a>, <code>9.0.0</code> includes a third differentiation, supporting the .NET 7 SDK (version <code>4.4</code> of the roslyn API):</p> <p><img src=\"/content/images/2025/system_text_json_3.png\" alt=\"The layout of the 9.0.0 version of the System.Text.Json NuGet\"></p> <p>There's a slight wrinkle in this otherwise-elegant solution when a NuGet package is loaded in a version of the .NET SDK that <em>doesn't</em> understand the new analyzer layout. By default, the earlier SDK would load <em>all</em> of the versions of the generator, which is obviously problematic.</p> <p>To work around that, the .NET 6 SDK introduces a new MSBuild property, <code>$(SupportsRoslynComponentVersioning)</code>. You can then include a <code>.targets</code> folder in your NuGet package that detects the <em>lack</em> of this variable to do the analyzer selection manually yourself.</p> <p>As an example, the <em>System.Text.Json</em> <code>6.0.0</code> package includes the following <code>.targets</code> file, which is added to the build of a project that references the <em>System.Text.Json</em> NuGet package. The file is a little hard to read (obviously, it's MSBuild) but it's essentially just checking for <code>$(SupportsRoslynComponentVersioning) != 'true'</code>, and removing the <code>rolsyn4.x</code> analyzers if so, leaving only the <code>roslyn3.x</code> package:</p> <pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Project</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Target</span> <span class=\"token attr-name\">Name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>_System_Text_JsonGatherAnalyzers<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ItemGroup</span><span class=\"token punctuation\">&gt;</span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>_System_Text_JsonAnalyzer</span> <span class=\"token attr-name\">Include</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>@(Analyzer)<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">Condition</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token punctuation\">'</span>%(Analyzer.NuGetPackageId)<span class=\"token punctuation\">'</span> == <span class=\"token punctuation\">'</span>System.Text.Json<span class=\"token punctuation\">'</span><span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ItemGroup</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Target</span><span class=\"token punctuation\">&gt;</span></span>\n\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Target</span> <span class=\"token attr-name\">Name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>_System_Text_JsonAnalyzerMultiTargeting<span class=\"token punctuation\">\"</span></span> \n          <span class=\"token attr-name\">Condition</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token punctuation\">'</span>$(SupportsRoslynComponentVersioning)<span class=\"token punctuation\">'</span> != <span class=\"token punctuation\">'</span>true<span class=\"token punctuation\">'</span><span class=\"token punctuation\">\"</span></span> \n          <span class=\"token attr-name\">AfterTargets</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>ResolvePackageDependenciesForBuild;ResolveNuGetPackageAssets<span class=\"token punctuation\">\"</span></span>\n          <span class=\"token attr-name\">DependsOnTargets</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>_System_Text_JsonGatherAnalyzers<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ItemGroup</span><span class=\"token punctuation\">&gt;</span></span>\n      <span class=\"token comment\">&lt;!-- Remove our analyzers targeting roslyn4.x --&gt;</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Analyzer</span> <span class=\"token attr-name\">Remove</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>@(_System_Text_JsonAnalyzer)<span class=\"token punctuation\">\"</span></span>\n                <span class=\"token attr-name\">Condition</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>$([System.String]::Copy(<span class=\"token punctuation\">'</span>%(_System_Text_JsonAnalyzer.Identity)<span class=\"token punctuation\">'</span>).IndexOf(<span class=\"token punctuation\">'</span>roslyn4<span class=\"token punctuation\">'</span>)) <span class=\"token entity named-entity\" title=\">\">&amp;gt;</span>= 0<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ItemGroup</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Target</span><span class=\"token punctuation\">&gt;</span></span>\n\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Target</span> <span class=\"token attr-name\">Name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>_System_Text_JsonRemoveAnalyzers<span class=\"token punctuation\">\"</span></span> \n          <span class=\"token attr-name\">Condition</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token punctuation\">'</span>$(DisableSystemTextJsonSourceGenerator)<span class=\"token punctuation\">'</span> == <span class=\"token punctuation\">'</span>true<span class=\"token punctuation\">'</span><span class=\"token punctuation\">\"</span></span>\n          <span class=\"token attr-name\">AfterTargets</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>ResolvePackageDependenciesForBuild;ResolveNuGetPackageAssets<span class=\"token punctuation\">\"</span></span>\n          <span class=\"token attr-name\">DependsOnTargets</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>_System_Text_JsonGatherAnalyzers<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n\n    <span class=\"token comment\">&lt;!-- Remove all our analyzers --&gt;</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ItemGroup</span><span class=\"token punctuation\">&gt;</span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Analyzer</span> <span class=\"token attr-name\">Remove</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>@(_System_Text_JsonAnalyzer)<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ItemGroup</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Target</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Project</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre> <p>This ensures that the multi-targeting works even in early versions of the .NET SDK that don't support the new folder layout.</p> <blockquote> <p>I was somewhat interested to see that this code still exists, even in the latest versions of the package, when .NET 5 SDK has been out of support for 2.5 years. I <em>assume</em> the issue is that some versions of <em>Visual Studio</em> are still supported, and fundamentally you can't stop people using it with old SDKs.</p> </blockquote> <p>I've covered all the details of why you might want to multi-target multiple roslyn versions in a NuGet package in this post. In the next post I'll show how you can support this in your own packages, by showing how I added multi-targeting support to my <em>NetEscapades.EnumGenerators</em> source generator.</p> <h2 id=\"summary\" class=\"heading-with-anchor\"><a href=\"#summary\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Summary</a></h2> <p>In this post I described how the version of the <em>Microsoft.CodeAnalysis.CSharp</em> NuGet package used by a source generator is tied to a Roslyn API and .NET SDK version. I discussed how the fact you need to choose a single API version means you have to trade off between broadness of support and access to features. .NET 6 introduced a new feature for NuGet packages that allows you to multi-target your analyzers/source generators for multiple .NET SDK versions.</p> <p>In the next post I show a case study of how I updated my <em>NetEscapades.EnumGenerators</em> source generator to use this feature and multi-target against multiple .NET SDK versions.</p> ",
    "sanitized": "In this post I describe why source generators might need to work with multiple versions of the .NET SDK. This may be necessary if you want to support features that are only available in newer versions of the .NET SDK, while simultaneously supporting users building with older versions of the .NET SDK in a more limited fashion. I then show how support was added in .NET 6 for this scenario, and how NuGet package layouts have changed. In the next post I show how you can add multi-targeting support to your own packages. Why does the version of the .NET SDK matter for source generators? When you create a source generator, you reference a specific version of the Microsoft.CodeAnalysis.CSharp NuGet package. The version of the package you choose defines the minimum version of Visual Studio, MSBuild, and the .NET SDK that your source generator will work with. The following table is compiled (well, inferred) from the links above, primarily for recent versions of the package: Roslyn package versionSDK versionMSBuild/Visual Studio version4.12.09.0.1xx17.124.11.08.0.4xx17.114.10.08.0.3xx17.104.9.28.0.2xx17.94.8.08.0.1xx17.84.7.07.0.4xx17.74.6.07.0.3xx17.64.5.07.0.2xx17.54.4.07.0.1xx17.44.3.16.0.4xx17.34.2.06.0.3xx17.24.1.06.0.2xx17.14.0.16.0.1xx17.03.8.05.0.1xx16.83.4.03.1.1xx16.42.10.02.1.5xx15.9 As you can see, each new minor release of the .NET SDK and Visual Studio version is associated with a new Roslyn package (Microsoft.CodeAnalysis.CSharp) version. Each new version of the package provides additional APIs for you to use. For example, when I first created my NetEscapades.EnumGenerators project I used version 4.0.1 of Microsoft.CodeAnalysis.CSharp, which gave access to the new incremental generator API IIncrementalGenerator introduced in .NET 6. When I wanted to use the recommended ForAttributeWithMetadataName API introduced in .NET 7, I had to update the Microsoft.CodeAnalysis.CSharp version used by the source generator to 4.4.0. However, by updating that dependency, the source generator was no longer compatible with the .NET 6 SDK. You could still install the package, but the generator would not work, and you would get a warning at compile time: CSC : warning CS8032: An instance of analyzer NetEscapades.EnumGenerators.EnumGenerator\ncannot be created from C:\\Users\\Sock\\.nuget\\packages\\enumgenerators.enumgenerator\\1.0.0-beta09\\analyzers\\dotnet\\\ncs\\NetEscapades.EnumGenerators.dll : \nCould not load file or assembly 'Microsoft.CodeAnalysis, Version=4.4.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'. \nThe system cannot find the file specified.\n So in general, if you want to have the broadest support, you should reference the lowest version of Microsoft.CodeAnalysis.CSharp that you can. On the other hand, if you want access to the latest SDK features, you need to reference the highest version of the package. It's the same classic trade-off that library maintainers have to make when it comes to dependencies, and what's the right choice for you will vary. Supporting multiple SDK versions and lighting-up features One traditional approach to solving the \"broader support vs. features\" trade-off is to kind of do both! You target the lowest version of the API you can get away with, and that serves as your lower bound. You then \"light up\" with additional features when you detect that a newer version of the API is available. A classic example of where this makes sense for a source generator is with the interceptor support I recently added to the NetEscapades.EnumGenerators source generator. The source generator requires version 4.4.0 as a minimum (.NET 7 SDK, for ForAttributeWithMetadataName support), but if you're using a .NET SDK version of 8.0.400 or greater, you can optionally enable the interceptor support. I could have made 8.0.400 the minimum required SDK version to get any functionality, but by making the interceptor support an optional extra, people stuck on older versions of the SDK can continue to use the other features of the library. There are also examples of needing to take this approach in the runtime itself. For example, the original System.Text.Json source generator was written to support the non-incremental version of source generators. However, this API was notorious for causing performance problems in the IDE. The only solution was to rewrite the generator to use IIncrementalGenerator. Unfortunately, simply updating the JsonSourceGenerator package to use a newer version of Microsoft.CodeAnalysis.CSharp (to access the IIncrementalGenerator API) would have broken the generator for anyone using the (still supported at the time) .NET 5 SDK. Instead, the team created two versions of the generator—one that used the .NET 6 SDK and the IIncrementalGenerator API, and one that used the .NET 5 SDK and the non-incremental generator. Sounds easy enough, right? After all, shipping different code for multiple target frameworks in a single NuGet package has been possible in .NET for a long time. Well…not so fast. We're not talking about shipping different dlls per framework. We're talking about shipping different dlls per .NET SDK… Creating NuGet packages that support multiple Roslyn/SDK versions The fundamental problem of needing to ship different versions of source generators (and analyzers more generally) was realised as part of the .NET 6 preview releases, when the performance issues with the System.Text.Json generator appeared. At that point, there was essentially no solution—as a source generator author you had to choose either broad support or new APIs. And if you went for the latter, then customers using your package with old versions of the SDK would get warnings in their build. The solution was to update the logic in the .NET SDK that loads analyzers/source generators from NuGet packages to be \"SDK version aware\". This logic is available as of .NET 6. Prior to .NET 6, the .NET SDK only recognizes the following folder folder structure in NuGet packages for loading analyzers: analyzers[\\dotnet][\\cs|vb]\\my_generator.dll\n In .NET 6 this pattern is still recognized, but if you have specific Roslyn API version requirements, you can encode those in the folder structure: analyzers[\\dotnet][\\roslyn{version}][\\cs|vb]\\my_generator.dll\n Note the additional roslyn{version} folder in the analyzers\\dotnet folder. The {version} is a {major}.{minor} number corresponding to the Roslyn API version (the version of the Microsoft.CodeAnalysis.CSharp package referenced in your source generator). By splitting by Roslyn API version, you can now ship multiple dlls in the same NuGet package, each of which uses a different version of the Microsoft.CodeAnalysis.CSharp package, and hence each of which can use features available in the specific version of the .NET SDK that's available. We can see this in practice by taking a look at how the layout of the System.Text.Json NuGet package changed between the .NET 6 preview 5 builds (when the non-incremental source generator was introduced) and the first GA .NET 6 build. The 6.0.0-preview.5.21301.5 version of the package uses the default \"simple\" layout, placing the System.Text.Json.SourceGeneration.dll file in the analyzers/dotnet/cs folder:  In contrast, if we look at the 6.0.0 version of the package, you can see there are intermediate roslyn3.11 and roslyn4.0 folders. The 3.11 version includes a version of the generator that is compatible with the .NET 5 SDK, while the 4.0 version requires the .NET 6 SDK, and uses IIncrementalGenerator:   Note that I simplified the layout in the package above to remove the localization dlls, so if you inspect the version from nuget.org, you'll also see the additional satellite resource dlls.  The latest version of the package, 9.0.0 includes a third differentiation, supporting the .NET 7 SDK (version 4.4 of the roslyn API):  There's a slight wrinkle in this otherwise-elegant solution when a NuGet package is loaded in a version of the .NET SDK that doesn't understand the new analyzer layout. By default, the earlier SDK would load all of the versions of the generator, which is obviously problematic. To work around that, the .NET 6 SDK introduces a new MSBuild property, $(SupportsRoslynComponentVersioning). You can then include a .targets folder in your NuGet package that detects the lack of this variable to do the analyzer selection manually yourself. As an example, the System.Text.Json 6.0.0 package includes the following .targets file, which is added to the build of a project that references the System.Text.Json NuGet package. The file is a little hard to read (obviously, it's MSBuild) but it's essentially just checking for $(SupportsRoslynComponentVersioning) != 'true', and removing the rolsyn4.x analyzers if so, leaving only the roslyn3.x package: <Project>\n  <Target Name=\"_System_Text_JsonGatherAnalyzers\">\n\n    <ItemGroup>\n      <_System_Text_JsonAnalyzer Include=\"@(Analyzer)\" Condition=\"'%(Analyzer.NuGetPackageId)' == 'System.Text.Json'\" />\n    </ItemGroup>\n  </Target>\n\n  <Target Name=\"_System_Text_JsonAnalyzerMultiTargeting\" \n          Condition=\"'$(SupportsRoslynComponentVersioning)' != 'true'\" \n          AfterTargets=\"ResolvePackageDependenciesForBuild;ResolveNuGetPackageAssets\"\n          DependsOnTargets=\"_System_Text_JsonGatherAnalyzers\">\n\n    <ItemGroup>\n      <!-- Remove our analyzers targeting roslyn4.x -->\n      <Analyzer Remove=\"@(_System_Text_JsonAnalyzer)\"\n                Condition=\"$([System.String]::Copy('%(_System_Text_JsonAnalyzer.Identity)').IndexOf('roslyn4')) &gt;= 0\"/>\n    </ItemGroup>\n  </Target>\n\n  <Target Name=\"_System_Text_JsonRemoveAnalyzers\" \n          Condition=\"'$(DisableSystemTextJsonSourceGenerator)' == 'true'\"\n          AfterTargets=\"ResolvePackageDependenciesForBuild;ResolveNuGetPackageAssets\"\n          DependsOnTargets=\"_System_Text_JsonGatherAnalyzers\">\n\n    <!-- Remove all our analyzers -->\n    <ItemGroup>\n      <Analyzer Remove=\"@(_System_Text_JsonAnalyzer)\" />\n    </ItemGroup>\n  </Target>\n</Project>\n This ensures that the multi-targeting works even in early versions of the .NET SDK that don't support the new folder layout.  I was somewhat interested to see that this code still exists, even in the latest versions of the package, when .NET 5 SDK has been out of support for 2.5 years. I assume the issue is that some versions of Visual Studio are still supported, and fundamentally you can't stop people using it with old SDKs.  I've covered all the details of why you might want to multi-target multiple roslyn versions in a NuGet package in this post. In the next post I'll show how you can support this in your own packages, by showing how I added multi-targeting support to my NetEscapades.EnumGenerators source generator. Summary In this post I described how the version of the Microsoft.CodeAnalysis.CSharp NuGet package used by a source generator is tied to a Roslyn API and .NET SDK version. I discussed how the fact you need to choose a single API version means you have to trade off between broadness of support and access to features. .NET 6 introduced a new feature for NuGet packages that allows you to multi-target your analyzers/source generators for multiple .NET SDK versions. In the next post I show a case study of how I updated my NetEscapades.EnumGenerators source generator to use this feature and multi-target against multiple .NET SDK versions."
  },
  {
    "itemId": "https://andrewlock.net/creating-a-source-generator-part-13-providing-and-accessing-msbuild-settings-in-source-generators/",
    "raw": "<img src=\"https://andrewlock.net/content/images/2025/generator_props_banner.png\" /><nav><p>This is the thirteen post in the series: <a href=\"/series/creating-a-source-generator/\">Creating a source generator</a>. </p> <ol class=\"list-none\"><li><a href=\"/creating-a-source-generator-part-1-creating-an-incremental-source-generator/\">Part 1 - Creating an incremental generator</a></li><li><a href=\"/creating-a-source-generator-part-2-testing-an-incremental-generator-with-snapshot-testing/\">Part 2 - Testing an incremental generator with snapshot testing</a></li><li><a href=\"/creating-a-source-generator-part-3-integration-testing-and-packaging/\">Part 3 - Integration testing and NuGet packaging</a></li><li><a href=\"/creating-a-source-generator-part-4-customising-generated-code-with-marker-attributes/\">Part 4 - Customising generated code with marker attributes</a></li><li><a href=\"/creating-a-source-generator-part-5-finding-a-type-declarations-namespace-and-type-hierarchy/\">Part 5 - Finding a type declaration's namespace and type hierarchy</a></li><li><a href=\"/creating-a-source-generator-part-6-saving-source-generator-output-in-source-control/\">Part 6 - Saving source generator output in source control</a></li><li><a href=\"/creating-a-source-generator-part-7-solving-the-source-generator-marker-attribute-problem-part1/\">Part 7 - Solving the source generator 'marker attribute' problem - Part 1</a></li><li><a href=\"/creating-a-source-generator-part-8-solving-the-source-generator-marker-attribute-problem-part2/\">Part 8 - Solving the source generator 'marker attribute' problem - Part 2</a></li><li><a href=\"/creating-a-source-generator-part-9-avoiding-performance-pitfalls-in-incremental-generators/\">Part 9 - Avoiding performance pitfalls in incremental generators</a></li><li><a href=\"/creating-a-source-generator-part-10-testing-your-incremental-generator-pipeline-outputs-are-cacheable/\">Part 10 - Testing your incremental generator pipeline outputs are cacheable</a></li><li><a href=\"/creating-a-source-generator-part-11-implementing-an-interceptor-with-a-source-generator/\">Part 11 - Implementing an interceptor with a source generator</a></li><li><a href=\"/creating-a-source-generator-part-12-reading-compilation-options-and-csharp-version-in-source-generators/\">Part 12 - Reading compilation options and the C# version in source generators</a></li><li>Part 13 - Accessing MSBuild properties and user configuration from source generators (this post) </li><li><a href=\"/creating-a-source-generator-part-14-supporting-multiple-sdk-versions-in-a-source-generator/\">Part 14 - Supporting multiple .NET SDK versions in a source generator</a></li></ol></nav><p>In this post I describe how to read MSBuild settings from inside a source generator. I show how you can use this to add \"configuration\" to your source generators so consumers can control some behaviour of the source generator. Finally I show how you can bundle a <em>.targets</em> file with your generator to make some aspects of this easier to use for consumers, particularly when it comes to interceptors.</p> <h2 id=\"why-might-you-want-to-access-msbuild-settings-\" class=\"heading-with-anchor\"><a href=\"#why-might-you-want-to-access-msbuild-settings-\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Why might you want to access MSBuild settings?</a></h2> <p>In the <a href=\"/creating-a-source-generator-part-12-providing-and-accessing-msbuild-settings-in-source-generators/\">previous post</a> I described how some features of the compilation can be accessed on the <code>Compilation</code> object. However, there's a lot you <em>can't</em> get from there. For example, the default <code>RootNamespace</code> does not appear to be accessible from <code>Compilation</code>. Instead, you must access the MSBuild property to know what it's set to.</p> <p>Most of the source generators I've created are controlled solely by attributes applied in code. However there are many cases where you might want to control the behaviour of a source generator in a <em>global</em> way. For example, if you're generating a single type, you may want to be able to control the <em>name</em> of the generated type, or you may want to enable or disable specific features.</p> <p>As a concrete example, I recently needed to do this while working on <a href=\"https://www.nuget.org/packages/NetEscapades.EnumGenerators\"><em>NetEscapades.EnumGenerators</em></a>. I wanted the interceptor support to be disabled by default, but for consumers to be able to enable it with an MSBuild flag.</p> <p>In the following sections I'll describe the basics of how to work with both of these aspects.</p> <h2 id=\"reading-msbuild-settings-from-a-source-generator\" class=\"heading-with-anchor\"><a href=\"#reading-msbuild-settings-from-a-source-generator\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Reading MSBuild settings from a source generator</a></h2> <p>I'll start by showing how you can read the <code>RootNamespace</code> for a project. I've started with this setting because it's readable from source generators automatically.</p> <p>To read an MSBuild setting, you should use the <code>AnalyzerConfigOptionsProvider</code>. The following source generator shows how to do this for the <code>RootNamespace</code> property. It reads the value from the context and creates a file that just contains a comment with the root namespace:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">Generator</span></span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">sealed</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RootNamespaceGenerator</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">IIncrementalGenerator</span></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Initialize</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IncrementalGeneratorInitializationContext</span> context<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// Create an IncrementalValueProvider from AnalyzerConfigOptionsProvider</span>\n        <span class=\"token class-name\">IncrementalValueProvider<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">?</span><span class=\"token punctuation\">&gt;</span></span> rootNamespace <span class=\"token operator\">=</span> context\n            <span class=\"token punctuation\">.</span>AnalyzerConfigOptionsProvider\n            <span class=\"token comment\">// Retrieve the RootNamespace property</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">Select</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">AnalyzerConfigOptionsProvider</span> c<span class=\"token punctuation\">,</span> <span class=\"token class-name\">CancellationToken</span> _<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span>\n                c<span class=\"token punctuation\">.</span>GlobalOptions<span class=\"token punctuation\">.</span><span class=\"token function\">TryGetValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"build_property.RootNamespace\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">out</span> <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> nameSpace<span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">?</span> nameSpace\n                    <span class=\"token punctuation\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// Generate the source</span>\n        context<span class=\"token punctuation\">.</span><span class=\"token function\">RegisterSourceOutput</span><span class=\"token punctuation\">(</span>rootNamespace<span class=\"token punctuation\">,</span> <span class=\"token keyword\">static</span> <span class=\"token punctuation\">(</span>spc<span class=\"token punctuation\">,</span> nameSpace<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> source <span class=\"token operator\">=</span> $<span class=\"token interpolation-string\"><span class=\"token string\">$\"\"</span></span>\"\n                           <span class=\"token comment\">// RootNamespace: {{nameSpace}}</span>\n                           <span class=\"token string\">\"\"</span>\"<span class=\"token punctuation\">;</span>\n\n            spc<span class=\"token punctuation\">.</span><span class=\"token function\">AddSource</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Example.g.cs\"</span><span class=\"token punctuation\">,</span> source<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>If you add this generator to a target project, the generated <em>Example.g.cs</em> file contains something like this following:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token comment\">// RootNamespace: MyExampleProject</span>\n</code></pre> <p>It's important to note that when you retrieve the property from <code>AnalyzerConfigOptionsProvider</code>, you must use the prefix <code>\"build_property.\"</code>. You might be wondering <em>why</em> you need that prefix; after all, when you're reading MSBuild properties in <em>.csproj</em> files, you don't need that prefix. To explain why, we'll take a short detour.</p> <h2 id=\"msbuild-generatedmsbuildeditorconfig-editorconfig-and-source-generators\" class=\"heading-with-anchor\"><a href=\"#msbuild-generatedmsbuildeditorconfig-editorconfig-and-source-generators\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">MSBuild, <em>GeneratedMSBuildEditorConfig.editorconfig</em>, and source generators</a></h2> <p>When you build a .NET project, a number of \"intermediate\" artifacts are created, that are used to create the final build. These files are typically stored inside the <code>obj</code> folder of a project. This can include things like where to find the NuGet packages on disk after a restore, source link details, and runtime configuration details.</p> <p>One such artifact created is <code>&lt;ProjectName&gt;.GeneratedMSBuildEditorConfig.editorconfig</code>. Go ahead, take a look, you'll find this file for all your .NET projects. The exact contents will vary depending on the <em>type</em> of the project and on how your project is built, but it'll look something like this:</p> <pre class=\"language-ini\"><code class=\"language-ini\"><span class=\"token key attr-name\">is_global</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">true</span>\n<span class=\"token key attr-name\">build_property.TargetFramework</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">net8.0</span>\n<span class=\"token key attr-name\">build_property.TargetPlatformMinVersion</span> <span class=\"token punctuation\">=</span> \n<span class=\"token key attr-name\">build_property.UsingMicrosoftNETSdkWeb</span> <span class=\"token punctuation\">=</span> \n<span class=\"token key attr-name\">build_property.ProjectTypeGuids</span> <span class=\"token punctuation\">=</span> \n<span class=\"token key attr-name\">build_property.InvariantGlobalization</span> <span class=\"token punctuation\">=</span> \n<span class=\"token key attr-name\">build_property.PlatformNeutralAssembly</span> <span class=\"token punctuation\">=</span> \n<span class=\"token key attr-name\">build_property.EnforceExtendedAnalyzerRules</span> <span class=\"token punctuation\">=</span> \n<span class=\"token key attr-name\">build_property._SupportedPlatformList</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">Linux,macOS,Windows</span>\n<span class=\"token key attr-name\">build_property.RootNamespace</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">MyExample</span>\n<span class=\"token key attr-name\">build_property.ProjectDir</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">C:\\repos\\MyExample\\</span>\n<span class=\"token key attr-name\">build_property.EnableComHosting</span> <span class=\"token punctuation\">=</span> \n<span class=\"token key attr-name\">build_property.EnableGeneratedComInterfaceComImportInterop</span> <span class=\"token punctuation\">=</span> \n<span class=\"token key attr-name\">build_property.EffectiveAnalysisLevelStyle</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">8.0</span>\n<span class=\"token key attr-name\">build_property.EnableCodeStyleSeverity</span> <span class=\"token punctuation\">=</span> \n</code></pre> <p>EditorConfig is primarily a <a href=\"https://spec.editorconfig.org/\">specification</a> for maintaining consistent coding style across multiple developers and IDEs when working in the same project. In this case, however, the file is exposing various properties of the MSBuild system, which can then be consumed by your source generator.</p> <p>As you can see from the above listing, only a few properties are exposed, with <code>RootNamespace</code>, <code>ProjectDir</code>, and <code>TargetFramework</code> being the most interesting. So what if you want to read some <em>other</em> MSBuild property? So that a consumer can specify \"settings\" for your generator, for example?</p> <h2 id=\"enabling-generator-access-for-an-msbuild-property\" class=\"heading-with-anchor\"><a href=\"#enabling-generator-access-for-an-msbuild-property\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Enabling generator access for an MSBuild property</a></h2> <p>You've seen how to access a given MSBuild property, but you can <em>only</em> access properties that are exposed in the generated editor config. To make an arbitrary MSBuild property appear in the editor config, you need to mark it as a \"compiler aware property\".</p> <p>To achieve this, the target project must add a <code>&lt;CompilerVisibleProperty&gt;</code>. For example, if we add the following to a <em>.csproj</em> file, it will set the value of the property <code>&lt;EnableInterceptor&gt;</code> and then mark it as compiler aware:</p> <pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Project</span> <span class=\"token attr-name\">Sdk</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Microsoft.NET.Sdk<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>PropertyGroup</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>OutputType</span><span class=\"token punctuation\">&gt;</span></span>Exe<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>OutputType</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>TargetFramework</span><span class=\"token punctuation\">&gt;</span></span>net8.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>TargetFramework</span><span class=\"token punctuation\">&gt;</span></span>\n\n    <span class=\"token comment\">&lt;!-- Set the value of the property --&gt;</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>EnableInterceptor</span><span class=\"token punctuation\">&gt;</span></span>true<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>EnableInterceptor</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>PropertyGroup</span><span class=\"token punctuation\">&gt;</span></span>\n\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ItemGroup</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token comment\">&lt;!-- Mark the property as compiler aware, so it's added to the editor config--&gt;</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>CompilerVisibleProperty</span> <span class=\"token attr-name\">Include</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>EnableInterceptor<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ItemGroup</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Project</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre> <p>If we inspect the generated editor config for this property we can see that the value has indeed been added, on the second line down:</p> <pre class=\"language-ini\"><code class=\"language-ini\"><span class=\"token key attr-name\">is_global</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">true</span>\n<span class=\"token key attr-name\">build_property.EnableInterceptor</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">true # 👈 This was added</span>\n<span class=\"token key attr-name\">build_property.TargetFramework</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">net8.0</span>\n<span class=\"token key attr-name\">build_property.TargetPlatformMinVersion</span> <span class=\"token punctuation\">=</span> \n<span class=\"token key attr-name\">build_property.UsingMicrosoftNETSdkWeb</span> <span class=\"token punctuation\">=</span> \n<span class=\"token key attr-name\">build_property.ProjectTypeGuids</span> <span class=\"token punctuation\">=</span> \n<span class=\"token key attr-name\">build_property.InvariantGlobalization</span> <span class=\"token punctuation\">=</span> \n<span class=\"token key attr-name\">build_property.PlatformNeutralAssembly</span> <span class=\"token punctuation\">=</span> \n<span class=\"token key attr-name\">build_property.EnforceExtendedAnalyzerRules</span> <span class=\"token punctuation\">=</span> \n<span class=\"token key attr-name\">build_property._SupportedPlatformList</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">Linux,macOS,Windows</span>\n<span class=\"token key attr-name\">build_property.RootNamespace</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">MyExample</span>\n<span class=\"token key attr-name\">build_property.ProjectDir</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">C:\\repos\\MyExample\\</span>\n<span class=\"token key attr-name\">build_property.EnableComHosting</span> <span class=\"token punctuation\">=</span> \n<span class=\"token key attr-name\">build_property.EnableGeneratedComInterfaceComImportInterop</span> <span class=\"token punctuation\">=</span> \n<span class=\"token key attr-name\">build_property.EffectiveAnalysisLevelStyle</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">8.0</span>\n<span class=\"token key attr-name\">build_property.EnableCodeStyleSeverity</span> <span class=\"token punctuation\">=</span> \n</code></pre> <p>Now that the property is exposed here, we can read it in our generator, and print it as a comment in the generated source, just as we did for RootNamespace:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">Generator</span></span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">sealed</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">EnableInterceptorGenerator</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">IIncrementalGenerator</span></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Initialize</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IncrementalGeneratorInitializationContext</span> context<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> isEnabled <span class=\"token operator\">=</span> context\n            <span class=\"token punctuation\">.</span>AnalyzerConfigOptionsProvider\n            <span class=\"token punctuation\">.</span><span class=\"token function\">Select</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">,</span> _<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span>\n                <span class=\"token comment\">// Get the value, check if it's set to 'true', otherwise return false</span>\n                config<span class=\"token punctuation\">.</span>GlobalOptions\n                    <span class=\"token punctuation\">.</span><span class=\"token function\">TryGetValue</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"build_property.EnableInterceptor\"</span></span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">out</span> <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> enableSwitch<span class=\"token punctuation\">)</span>\n                  <span class=\"token operator\">&amp;&amp;</span> enableSwitch<span class=\"token punctuation\">.</span><span class=\"token function\">Equals</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"true\"</span><span class=\"token punctuation\">,</span> StringComparison<span class=\"token punctuation\">.</span>Ordinal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// Generate the source</span>\n        context<span class=\"token punctuation\">.</span><span class=\"token function\">RegisterSourceOutput</span><span class=\"token punctuation\">(</span>isEnabled<span class=\"token punctuation\">,</span> <span class=\"token keyword\">static</span> <span class=\"token punctuation\">(</span>spc<span class=\"token punctuation\">,</span> enabled<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> source <span class=\"token operator\">=</span> $<span class=\"token interpolation-string\"><span class=\"token string\">$\"\"</span></span>\"\n                           <span class=\"token comment\">// EnableInterceptor: {{enabled}}</span>\n                           <span class=\"token string\">\"\"</span>\"<span class=\"token punctuation\">;</span>\n\n            spc<span class=\"token punctuation\">.</span><span class=\"token function\">AddSource</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Example.g.cs\"</span><span class=\"token punctuation\">,</span> source<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>Sure enough, if we check the <em>Example.g.cs</em> file in our target project, we'll see it looks like the following:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token comment\">// EnableInterceptor: True</span>\n</code></pre> <p>If we change <code>&lt;EnableInterceptor&gt;</code> to be <code>false</code>, or if we remove the <code>&lt;CompilerVisibleProperty&gt;</code> value, then the output changes to be:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token comment\">// EnableInterceptor: False</span>\n</code></pre> <p>In the example above I'm not doing anything particularly interesting with the setting value, but you could use it to control the generated source in a more detailed way, or to enable or disable features, for example.</p> <p>OK, that's all pretty cool, but it kinda sucks that consumers have to specify both the property value <code>&lt;EnableInterceptor&gt;</code> <em>and</em> add <code>&lt;CompilerVisibleProperty&gt;</code>. Luckily, if you're creating a NuGet package, you can use a NuGet feature to do that automatically.</p> <h2 id=\"automatically-adding-compilervisibleproperty-for-a-setting-to-a-nuget-package\" class=\"heading-with-anchor\"><a href=\"#automatically-adding-compilervisibleproperty-for-a-setting-to-a-nuget-package\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Automatically adding <code>&lt;CompilerVisibleProperty&gt;</code> for a setting to a NuGet package</a></h2> <p>NuGet packages can contain many different <em>types</em> of files. A non-exhaustive list includes:</p> <ul><li>Dlls that should be referenced by the target application.</li> <li>Analyzers and source generators that are used by the compiler in the target project.</li> <li>Content that is just copied directly to a target project's build output.</li> <li>Build files, that change how the target project is compiled.</li></ul> <p>We're going to use that last feature to package a <code>.props</code> file with our NuGet package, which automatically adds the <code>&lt;CompilerVisibleProperty&gt;</code> we need. Overall this is a relatively simple feature: we create a file with the right name, pack it into a NuGet package, and any project consuming our NuGet package automatically gets the <code>.props</code> file added to it.</p> <blockquote> <p>You can read more about this NuGet feature <a href=\"https://learn.microsoft.com/en-us/nuget/concepts/msbuild-props-and-targets\">in the documentation</a>.</p> </blockquote> <p>In order to keep things more concrete, I'm going to switch to describing how things work in my <a href=\"https://github.com/andrewlock/NetEscapades.EnumGenerators\">NetEscapades.EnumGenerators</a> package, instead of the hypothetical generators I've described so far.</p> <p>First of all, we create a file called <code>&lt;Package&gt;.props</code>, i.e. <code>NetEscapades.EnumGenerators.props</code>. In here we add the <code>&lt;CompilerVisibleProperty&gt;</code> definition we need to access from the generator:</p> <pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Project</span><span class=\"token punctuation\">&gt;</span></span>  \n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ItemGroup</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>CompilerVisibleProperty</span> <span class=\"token attr-name\">Include</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>EnableEnumGeneratorInterceptor<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ItemGroup</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Project</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre> <p>This ensures the <code>EnableEnumGeneratorInterceptor</code> setting is available from the <em>NetEscapades.EnumGenerators</em> source generator.</p> <p>Next, we need to make sure we pack the <em>NetEscapades.EnumGenerators.props</em> file into the correct place in the NuGet package. The following line in the <em>NetEscapades.EnumGenerators.csproj</em> project file makes sure the file is packed into the <code>build</code> folder of the package:</p> <pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>None</span> <span class=\"token attr-name\">Include</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>NetEscapades.EnumGenerators.props<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">Visible</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>false<span class=\"token punctuation\">\"</span></span>\n      <span class=\"token attr-name\">Pack</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">PackagePath</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>build<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n</code></pre> <p>And that's all there is too it! When you run <code>dotnet pack</code> on the project, the resulting NuGet package has the file in the correct place:</p> <p><img src=\"/content/images/2025/generator_props.png\" alt=\"The NuGet package now includes the file\"></p> <p>What's more, any projects consuming the package can <em>just</em> define the property, they don't need to mess around with <code>&lt;CompilerVisibleProperty&gt;</code>:</p> <pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Project</span><span class=\"token punctuation\">&gt;</span></span>  \n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>PropertyGroup</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>EnableEnumGeneratorInterceptor</span><span class=\"token punctuation\">&gt;</span></span>true<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>EnableEnumGeneratorInterceptor</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>PropertyGroup</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Project</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre> <p>Much cleaner!</p> <h2 id=\"enabling-interception-using-a-single-property-setting\" class=\"heading-with-anchor\"><a href=\"#enabling-interception-using-a-single-property-setting\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Enabling interception using a single property setting</a></h2> <p>When I was designing the interceptor support for <em>NetEscapades.EnumGenerators</em> I had the goal of consumers only needing to set a single property in their <em>.csproj</em> to enable the support. Unfortunately, the very design of interceptors makes that a little tricky.</p> <p>Interceptors can be a little confusing, so they require an explicit opt-in from consuming projects. <a href=\"https://github.com/dotnet/roslyn/blob/main/docs/features/interceptors.md#user-opt-in\">Users must specify</a> the property <code>&lt;InterceptorsNamespaces&gt;</code> in their project, which is a list of namespaces that are allowed to contain interceptors. For example:</p> <pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>InterceptorsNamespaces</span><span class=\"token punctuation\">&gt;</span></span>$(InterceptorsNamespaces);Microsoft.AspNetCore.Http.Generated;<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>InterceptorsNamespaces</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre> <p>That makes my goal for a \"simple one property activation\" a little tricky; are users are always going to have to update the main setting <em>and</em> <code>&lt;InterceptorsNamespaces&gt;</code> to use my interceptor? Well, yes and no.</p> <p>In my solution to this issue, I took some inspiration from the built-in source generator interceptors that ship with the .NET runtime—the ASP.NET Core <a href=\"/exploring-the-dotnet-8-preview-changing-method-calls-with-interceptors/#updating-the-minimal-api-generator-to-use-interceptors\">minimal API interceptor</a> and <a href=\"https://github.com/dotnet/runtime/tree/9cf8a80db3354173cfd25dea4660632861dee0eb/src/libraries/Microsoft.Extensions.Configuration.Binder\">the configuration binder interceptor</a>. The configuration binder is particularly interesting, as it behaves exactly as I want: setting <code>&lt;EnableConfigurationBindingGenerator&gt;</code> to <code>true</code> automatically adds the required <code>&lt;InterceptorsNamespaces&gt;</code> values.</p> <p>The configuration binder interceptor achieves this using some NuGet and MSBuild fun:</p> <ul><li>You can add MSBuild properties and items using a <code>.props</code> file in a NuGet file</li> <li>However, customers can set the property in many different ways. That means you don't know exactly <em>when</em> the value of the property be the \"final\" value.</li> <li>Consequently, reading the value in a <code>.targets</code> file is the \"safest\" way to do this, as those are executed after all the various <code>.props</code> files have executed</li></ul> <p>Based on this, the following approach is what I opted for in my <em>NetEscapades.EnumGenerators</em> package.</p> <p>Add a <code>&lt;Package&gt;.targets</code> file (<code>NetEscapades.EnumGenerators.targets</code> in my case) containing a <code>&lt;Target&gt;</code> that runs before other defined targets, which sets the <code>&lt;InterceptorsNamespaces&gt;</code> property based on the value of the <code>&lt;EnableEnumGeneratorInterceptor&gt;</code> property:</p> <pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token comment\">&lt;!-- An arbitrary name for the target, chosen to avoid collisions --&gt;</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Project</span> <span class=\"token attr-name\">InitialTargets</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>NetEscapades_EnumGenerators_Interceptors<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n\n  <span class=\"token comment\">&lt;!-- This is the targe that runs --&gt;</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Target</span> <span class=\"token attr-name\">Name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>NetEscapades_EnumGenerators_Interceptors<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n\n    <span class=\"token comment\">&lt;!-- If the user has set EnableEnumGeneratorInterceptor, modify the interceptor namespaces--&gt;</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>PropertyGroup</span> <span class=\"token attr-name\">Condition</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token punctuation\">'</span>$(EnableEnumGeneratorInterceptor)<span class=\"token punctuation\">'</span> == <span class=\"token punctuation\">'</span>true<span class=\"token punctuation\">'</span><span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n\n      <span class=\"token comment\">&lt;!-- Modifying both InterceptorsNamespaces and InterceptorsPreviewNamespaces, --&gt;</span>\n      <span class=\"token comment\">&lt;!-- in case they're using an old version of the SDK that doesn't support the former --&gt;</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>InterceptorsNamespaces</span><span class=\"token punctuation\">&gt;</span></span>$(InterceptorsNamespaces);NetEscapades.EnumGenerators<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>InterceptorsNamespaces</span><span class=\"token punctuation\">&gt;</span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>InterceptorsPreviewNamespaces</span><span class=\"token punctuation\">&gt;</span></span>$(InterceptorsPreviewNamespaces);NetEscapades.EnumGenerators<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>InterceptorsPreviewNamespaces</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>PropertyGroup</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Target</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Project</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre> <p>This file is then packaged into the NuGet in the same way as for the <code>.props</code> file:</p> <pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>None</span> <span class=\"token attr-name\">Include</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>NetEscapades.EnumGenerators.targets<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">Visible</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>false<span class=\"token punctuation\">\"</span></span>\n      <span class=\"token attr-name\">Pack</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">PackagePath</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>build<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n</code></pre> <p>Which places it in the correct place in the package:</p> <p><img src=\"/content/images/2025/generator_props_2.png\" alt=\"The NuGet package now includes the targets file too\"></p> <p>and now customers have a lovely clean behaviour: they need only to set the following in their project, and the <code>.props</code> and <code>.targets</code> work to set up everything else for them:</p> <pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Project</span> <span class=\"token attr-name\">Sdk</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Microsoft.NET.Sdk<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>PropertyGroup</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>OutputType</span><span class=\"token punctuation\">&gt;</span></span>Exe<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>OutputType</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>TargetFramework</span><span class=\"token punctuation\">&gt;</span></span>net8.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>TargetFramework</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token comment\">&lt;!-- Add this 👇 --&gt;</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>EnableEnumGeneratorInterceptor</span><span class=\"token punctuation\">&gt;</span></span>true<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>EnableEnumGeneratorInterceptor</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>PropertyGroup</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Project</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre> <p>and voila, interceptors!</p> <p>I haven't gone into details about the work that needs to happen in the generator to correctly enable and disable the functionality, but ultimately it comes down to reading the <code>build_property.EnableEnumGeneratorInterceptor</code> value I showed earlier. We can then bail out of interception if it's not required. If you want to see all the details, you can find the <a href=\"https://github.com/andrewlock/NetEscapades.EnumGenerators/blob/ce553416b9aba0a7101c559aac9d18d7b1c1805c/src/NetEscapades.EnumGenerators/EnumGenerator.cs#L53\">code on GitHub</a></p> <h2 id=\"summary\" class=\"heading-with-anchor\"><a href=\"#summary\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Summary</a></h2> <p>In this post I described how you can read MSBuild properties from a source generator, using the <code>AnalyzerConfigOptionsProvider</code>. I showed that you need to prefix the properties with <code>build_property.</code> and explained why this is necessary, based on the <em>.editorconfig</em> file. Next I showed how you can add arbitrary additional properties to this file using <code>&lt;CompilerVisibleProperty&gt;</code> so you can read them from your source generators.</p> <p>Finally, I showed how you can add <code>.props</code> and <code>.targets</code> files to your NuGet packages so that consumers of your package don't need to add these properties themselves. I also showed a specific example of using a <code>.targets</code> file to add additional values to the <code>&lt;InterceptorsNamespaces&gt;</code> property, based on the value of a different property.</p> ",
    "sanitized": "This is the thirteen post in the series: Creating a source generator.  Part 1 - Creating an incremental generatorPart 2 - Testing an incremental generator with snapshot testingPart 3 - Integration testing and NuGet packagingPart 4 - Customising generated code with marker attributesPart 5 - Finding a type declaration's namespace and type hierarchyPart 6 - Saving source generator output in source controlPart 7 - Solving the source generator 'marker attribute' problem - Part 1Part 8 - Solving the source generator 'marker attribute' problem - Part 2Part 9 - Avoiding performance pitfalls in incremental generatorsPart 10 - Testing your incremental generator pipeline outputs are cacheablePart 11 - Implementing an interceptor with a source generatorPart 12 - Reading compilation options and the C# version in source generatorsPart 13 - Accessing MSBuild properties and user configuration from source generators (this post) Part 14 - Supporting multiple .NET SDK versions in a source generatorIn this post I describe how to read MSBuild settings from inside a source generator. I show how you can use this to add \"configuration\" to your source generators so consumers can control some behaviour of the source generator. Finally I show how you can bundle a .targets file with your generator to make some aspects of this easier to use for consumers, particularly when it comes to interceptors. Why might you want to access MSBuild settings? In the previous post I described how some features of the compilation can be accessed on the Compilation object. However, there's a lot you can't get from there. For example, the default RootNamespace does not appear to be accessible from Compilation. Instead, you must access the MSBuild property to know what it's set to. Most of the source generators I've created are controlled solely by attributes applied in code. However there are many cases where you might want to control the behaviour of a source generator in a global way. For example, if you're generating a single type, you may want to be able to control the name of the generated type, or you may want to enable or disable specific features. As a concrete example, I recently needed to do this while working on NetEscapades.EnumGenerators. I wanted the interceptor support to be disabled by default, but for consumers to be able to enable it with an MSBuild flag. In the following sections I'll describe the basics of how to work with both of these aspects. Reading MSBuild settings from a source generator I'll start by showing how you can read the RootNamespace for a project. I've started with this setting because it's readable from source generators automatically. To read an MSBuild setting, you should use the AnalyzerConfigOptionsProvider. The following source generator shows how to do this for the RootNamespace property. It reads the value from the context and creates a file that just contains a comment with the root namespace: [Generator]\npublic sealed class RootNamespaceGenerator : IIncrementalGenerator\n{\n    public void Initialize(IncrementalGeneratorInitializationContext context)\n    {\n        // Create an IncrementalValueProvider from AnalyzerConfigOptionsProvider\n        IncrementalValueProvider<string?> rootNamespace = context\n            .AnalyzerConfigOptionsProvider\n            // Retrieve the RootNamespace property\n            .Select((AnalyzerConfigOptionsProvider c, CancellationToken _) =>\n                c.GlobalOptions.TryGetValue(\"build_property.RootNamespace\", out var nameSpace)\n                    ? nameSpace\n                    : null);\n\n        // Generate the source\n        context.RegisterSourceOutput(rootNamespace, static (spc, nameSpace) =>\n        {\n            var source = $$\"\"\"\n                           // RootNamespace: {{nameSpace}}\n                           \"\"\";\n\n            spc.AddSource(\"Example.g.cs\", source);\n        });\n    }\n}\n If you add this generator to a target project, the generated Example.g.cs file contains something like this following: // RootNamespace: MyExampleProject\n It's important to note that when you retrieve the property from AnalyzerConfigOptionsProvider, you must use the prefix \"build_property.\". You might be wondering why you need that prefix; after all, when you're reading MSBuild properties in .csproj files, you don't need that prefix. To explain why, we'll take a short detour. MSBuild, GeneratedMSBuildEditorConfig.editorconfig, and source generators When you build a .NET project, a number of \"intermediate\" artifacts are created, that are used to create the final build. These files are typically stored inside the obj folder of a project. This can include things like where to find the NuGet packages on disk after a restore, source link details, and runtime configuration details. One such artifact created is <ProjectName>.GeneratedMSBuildEditorConfig.editorconfig. Go ahead, take a look, you'll find this file for all your .NET projects. The exact contents will vary depending on the type of the project and on how your project is built, but it'll look something like this: is_global = true\nbuild_property.TargetFramework = net8.0\nbuild_property.TargetPlatformMinVersion = \nbuild_property.UsingMicrosoftNETSdkWeb = \nbuild_property.ProjectTypeGuids = \nbuild_property.InvariantGlobalization = \nbuild_property.PlatformNeutralAssembly = \nbuild_property.EnforceExtendedAnalyzerRules = \nbuild_property._SupportedPlatformList = Linux,macOS,Windows\nbuild_property.RootNamespace = MyExample\nbuild_property.ProjectDir = C:\\repos\\MyExample\\\nbuild_property.EnableComHosting = \nbuild_property.EnableGeneratedComInterfaceComImportInterop = \nbuild_property.EffectiveAnalysisLevelStyle = 8.0\nbuild_property.EnableCodeStyleSeverity = \n EditorConfig is primarily a specification for maintaining consistent coding style across multiple developers and IDEs when working in the same project. In this case, however, the file is exposing various properties of the MSBuild system, which can then be consumed by your source generator. As you can see from the above listing, only a few properties are exposed, with RootNamespace, ProjectDir, and TargetFramework being the most interesting. So what if you want to read some other MSBuild property? So that a consumer can specify \"settings\" for your generator, for example? Enabling generator access for an MSBuild property You've seen how to access a given MSBuild property, but you can only access properties that are exposed in the generated editor config. To make an arbitrary MSBuild property appear in the editor config, you need to mark it as a \"compiler aware property\". To achieve this, the target project must add a <CompilerVisibleProperty>. For example, if we add the following to a .csproj file, it will set the value of the property <EnableInterceptor> and then mark it as compiler aware: <Project Sdk=\"Microsoft.NET.Sdk\">\n\n  <PropertyGroup>\n    <OutputType>Exe</OutputType>\n    <TargetFramework>net8.0</TargetFramework>\n\n    <!-- Set the value of the property -->\n    <EnableInterceptor>true</EnableInterceptor>\n  </PropertyGroup>\n\n  <ItemGroup>\n    <!-- Mark the property as compiler aware, so it's added to the editor config-->\n    <CompilerVisibleProperty Include=\"EnableInterceptor\" />\n  </ItemGroup>\n</Project>\n If we inspect the generated editor config for this property we can see that the value has indeed been added, on the second line down: is_global = true\nbuild_property.EnableInterceptor = true # 👈 This was added\nbuild_property.TargetFramework = net8.0\nbuild_property.TargetPlatformMinVersion = \nbuild_property.UsingMicrosoftNETSdkWeb = \nbuild_property.ProjectTypeGuids = \nbuild_property.InvariantGlobalization = \nbuild_property.PlatformNeutralAssembly = \nbuild_property.EnforceExtendedAnalyzerRules = \nbuild_property._SupportedPlatformList = Linux,macOS,Windows\nbuild_property.RootNamespace = MyExample\nbuild_property.ProjectDir = C:\\repos\\MyExample\\\nbuild_property.EnableComHosting = \nbuild_property.EnableGeneratedComInterfaceComImportInterop = \nbuild_property.EffectiveAnalysisLevelStyle = 8.0\nbuild_property.EnableCodeStyleSeverity = \n Now that the property is exposed here, we can read it in our generator, and print it as a comment in the generated source, just as we did for RootNamespace: [Generator]\npublic sealed class EnableInterceptorGenerator : IIncrementalGenerator\n{\n    public void Initialize(IncrementalGeneratorInitializationContext context)\n    {\n        var isEnabled = context\n            .AnalyzerConfigOptionsProvider\n            .Select((config, _) =>\n                // Get the value, check if it's set to 'true', otherwise return false\n                config.GlobalOptions\n                    .TryGetValue($\"build_property.EnableInterceptor\", out var enableSwitch)\n                  && enableSwitch.Equals(\"true\", StringComparison.Ordinal));\n\n        // Generate the source\n        context.RegisterSourceOutput(isEnabled, static (spc, enabled) =>\n        {\n            var source = $$\"\"\"\n                           // EnableInterceptor: {{enabled}}\n                           \"\"\";\n\n            spc.AddSource(\"Example.g.cs\", source);\n        });\n    }\n}\n Sure enough, if we check the Example.g.cs file in our target project, we'll see it looks like the following: // EnableInterceptor: True\n If we change <EnableInterceptor> to be false, or if we remove the <CompilerVisibleProperty> value, then the output changes to be: // EnableInterceptor: False\n In the example above I'm not doing anything particularly interesting with the setting value, but you could use it to control the generated source in a more detailed way, or to enable or disable features, for example. OK, that's all pretty cool, but it kinda sucks that consumers have to specify both the property value <EnableInterceptor> and add <CompilerVisibleProperty>. Luckily, if you're creating a NuGet package, you can use a NuGet feature to do that automatically. Automatically adding <CompilerVisibleProperty> for a setting to a NuGet package NuGet packages can contain many different types of files. A non-exhaustive list includes: Dlls that should be referenced by the target application. Analyzers and source generators that are used by the compiler in the target project. Content that is just copied directly to a target project's build output. Build files, that change how the target project is compiled. We're going to use that last feature to package a .props file with our NuGet package, which automatically adds the <CompilerVisibleProperty> we need. Overall this is a relatively simple feature: we create a file with the right name, pack it into a NuGet package, and any project consuming our NuGet package automatically gets the .props file added to it.  You can read more about this NuGet feature in the documentation.  In order to keep things more concrete, I'm going to switch to describing how things work in my NetEscapades.EnumGenerators package, instead of the hypothetical generators I've described so far. First of all, we create a file called <Package>.props, i.e. NetEscapades.EnumGenerators.props. In here we add the <CompilerVisibleProperty> definition we need to access from the generator: <Project>  \n  <ItemGroup>\n    <CompilerVisibleProperty Include=\"EnableEnumGeneratorInterceptor\" />\n  </ItemGroup>\n</Project>\n This ensures the EnableEnumGeneratorInterceptor setting is available from the NetEscapades.EnumGenerators source generator. Next, we need to make sure we pack the NetEscapades.EnumGenerators.props file into the correct place in the NuGet package. The following line in the NetEscapades.EnumGenerators.csproj project file makes sure the file is packed into the build folder of the package: <None Include=\"NetEscapades.EnumGenerators.props\" Visible=\"false\"\n      Pack=\"true\" PackagePath=\"build\" />\n And that's all there is too it! When you run dotnet pack on the project, the resulting NuGet package has the file in the correct place:  What's more, any projects consuming the package can just define the property, they don't need to mess around with <CompilerVisibleProperty>: <Project>  \n  <PropertyGroup>\n    <EnableEnumGeneratorInterceptor>true</EnableEnumGeneratorInterceptor>\n  </PropertyGroup>\n</Project>\n Much cleaner! Enabling interception using a single property setting When I was designing the interceptor support for NetEscapades.EnumGenerators I had the goal of consumers only needing to set a single property in their .csproj to enable the support. Unfortunately, the very design of interceptors makes that a little tricky. Interceptors can be a little confusing, so they require an explicit opt-in from consuming projects. Users must specify the property <InterceptorsNamespaces> in their project, which is a list of namespaces that are allowed to contain interceptors. For example: <InterceptorsNamespaces>$(InterceptorsNamespaces);Microsoft.AspNetCore.Http.Generated;</InterceptorsNamespaces>\n That makes my goal for a \"simple one property activation\" a little tricky; are users are always going to have to update the main setting and <InterceptorsNamespaces> to use my interceptor? Well, yes and no. In my solution to this issue, I took some inspiration from the built-in source generator interceptors that ship with the .NET runtime—the ASP.NET Core minimal API interceptor and the configuration binder interceptor. The configuration binder is particularly interesting, as it behaves exactly as I want: setting <EnableConfigurationBindingGenerator> to true automatically adds the required <InterceptorsNamespaces> values. The configuration binder interceptor achieves this using some NuGet and MSBuild fun: You can add MSBuild properties and items using a .props file in a NuGet file However, customers can set the property in many different ways. That means you don't know exactly when the value of the property be the \"final\" value. Consequently, reading the value in a .targets file is the \"safest\" way to do this, as those are executed after all the various .props files have executed Based on this, the following approach is what I opted for in my NetEscapades.EnumGenerators package. Add a <Package>.targets file (NetEscapades.EnumGenerators.targets in my case) containing a <Target> that runs before other defined targets, which sets the <InterceptorsNamespaces> property based on the value of the <EnableEnumGeneratorInterceptor> property: <!-- An arbitrary name for the target, chosen to avoid collisions -->\n<Project InitialTargets=\"NetEscapades_EnumGenerators_Interceptors\">\n\n  <!-- This is the targe that runs -->\n  <Target Name=\"NetEscapades_EnumGenerators_Interceptors\">\n\n    <!-- If the user has set EnableEnumGeneratorInterceptor, modify the interceptor namespaces-->\n    <PropertyGroup Condition=\"'$(EnableEnumGeneratorInterceptor)' == 'true'\">\n\n      <!-- Modifying both InterceptorsNamespaces and InterceptorsPreviewNamespaces, -->\n      <!-- in case they're using an old version of the SDK that doesn't support the former -->\n      <InterceptorsNamespaces>$(InterceptorsNamespaces);NetEscapades.EnumGenerators</InterceptorsNamespaces>\n      <InterceptorsPreviewNamespaces>$(InterceptorsPreviewNamespaces);NetEscapades.EnumGenerators</InterceptorsPreviewNamespaces>\n    </PropertyGroup>\n  </Target>\n</Project>\n This file is then packaged into the NuGet in the same way as for the .props file: <None Include=\"NetEscapades.EnumGenerators.targets\" Visible=\"false\"\n      Pack=\"true\" PackagePath=\"build\" />\n Which places it in the correct place in the package:  and now customers have a lovely clean behaviour: they need only to set the following in their project, and the .props and .targets work to set up everything else for them: <Project Sdk=\"Microsoft.NET.Sdk\">\n\n  <PropertyGroup>\n    <OutputType>Exe</OutputType>\n    <TargetFramework>net8.0</TargetFramework>\n    <!-- Add this 👇 -->\n    <EnableEnumGeneratorInterceptor>true</EnableEnumGeneratorInterceptor>\n  </PropertyGroup>\n</Project>\n and voila, interceptors! I haven't gone into details about the work that needs to happen in the generator to correctly enable and disable the functionality, but ultimately it comes down to reading the build_property.EnableEnumGeneratorInterceptor value I showed earlier. We can then bail out of interception if it's not required. If you want to see all the details, you can find the code on GitHub Summary In this post I described how you can read MSBuild properties from a source generator, using the AnalyzerConfigOptionsProvider. I showed that you need to prefix the properties with build_property. and explained why this is necessary, based on the .editorconfig file. Next I showed how you can add arbitrary additional properties to this file using <CompilerVisibleProperty> so you can read them from your source generators. Finally, I showed how you can add .props and .targets files to your NuGet packages so that consumers of your package don't need to add these properties themselves. I also showed a specific example of using a .targets file to add additional values to the <InterceptorsNamespaces> property, based on the value of a different property."
  },
  {
    "itemId": "https://andrewlock.net/creating-a-source-generator-part-12-reading-compilation-options-and-csharp-version-in-source-generators/",
    "raw": "<img src=\"https://andrewlock.net/content/images/2025/lang_version_banner.webp\" /><nav><p>This is the twelve post in the series: <a href=\"/series/creating-a-source-generator/\">Creating a source generator</a>. </p> <ol class=\"list-none\"><li><a href=\"/creating-a-source-generator-part-1-creating-an-incremental-source-generator/\">Part 1 - Creating an incremental generator</a></li><li><a href=\"/creating-a-source-generator-part-2-testing-an-incremental-generator-with-snapshot-testing/\">Part 2 - Testing an incremental generator with snapshot testing</a></li><li><a href=\"/creating-a-source-generator-part-3-integration-testing-and-packaging/\">Part 3 - Integration testing and NuGet packaging</a></li><li><a href=\"/creating-a-source-generator-part-4-customising-generated-code-with-marker-attributes/\">Part 4 - Customising generated code with marker attributes</a></li><li><a href=\"/creating-a-source-generator-part-5-finding-a-type-declarations-namespace-and-type-hierarchy/\">Part 5 - Finding a type declaration's namespace and type hierarchy</a></li><li><a href=\"/creating-a-source-generator-part-6-saving-source-generator-output-in-source-control/\">Part 6 - Saving source generator output in source control</a></li><li><a href=\"/creating-a-source-generator-part-7-solving-the-source-generator-marker-attribute-problem-part1/\">Part 7 - Solving the source generator 'marker attribute' problem - Part 1</a></li><li><a href=\"/creating-a-source-generator-part-8-solving-the-source-generator-marker-attribute-problem-part2/\">Part 8 - Solving the source generator 'marker attribute' problem - Part 2</a></li><li><a href=\"/creating-a-source-generator-part-9-avoiding-performance-pitfalls-in-incremental-generators/\">Part 9 - Avoiding performance pitfalls in incremental generators</a></li><li><a href=\"/creating-a-source-generator-part-10-testing-your-incremental-generator-pipeline-outputs-are-cacheable/\">Part 10 - Testing your incremental generator pipeline outputs are cacheable</a></li><li><a href=\"/creating-a-source-generator-part-11-implementing-an-interceptor-with-a-source-generator/\">Part 11 - Implementing an interceptor with a source generator</a></li><li>Part 12 - Reading compilation options and the C# version in source generators (this post) </li><li><a href=\"/creating-a-source-generator-part-13-providing-and-accessing-msbuild-settings-in-source-generators/\">Part 13 - Accessing MSBuild properties and user configuration from source generators</a></li><li><a href=\"/creating-a-source-generator-part-14-supporting-multiple-sdk-versions-in-a-source-generator/\">Part 14 - Supporting multiple .NET SDK versions in a source generator</a></li></ol></nav><p>In this post I show how to access information about the project a source generator is running in, such as the C# version, the name of the assembly, or the current configuration (<code>Debug</code> or <code>Release</code>).</p> <h2 id=\"why-might-you-need-details-about-the-compilation-\" class=\"heading-with-anchor\"><a href=\"#why-might-you-need-details-about-the-compilation-\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Why might you need details about the compilation?</a></h2> <p>If you're writing a source generator, you're generating C# source code that is included in the target project's compilation. But you have to be careful—which C# features are you using in your generated code? Do you know which features you <em>can</em> safely use?</p> <p>For example, if you're building a source generator that could be used with the .NET 6 or 7 SDK, then you <em>can't</em> just assume that you can use <a href=\"/series/behind-the-scenes-of-collection-expressions/\">collection expressions</a>. Collection expressions were introduced in C# 12 (along with .NET 8), and <em>can</em> be used when you're targeting earlier framework versions of .NET, as long as you're using a new enough version of the .NET SDK and are using C# 12 or higher.</p> <p>Depending on the code you're generating, that means you should <em>potentially</em> be generating different code based on the consuming project's C# version. Collection expressions are a great example that necessitate this, as in general, you <em>should</em> use them where you can, because <a href=\"/behind-the-scenes-of-collection-expressions-part-2-exploring-the-generated-code-list-and-fallback-cases/#optimizing-listt\">they can improve runtime performance</a>.</p> <p>Yes, that's kind of a pain, and it seems <em>generally</em> quite rare to bother with the added complexity, outside of the generators that ship with the runtime. And even in those cases, they <a href=\"https://github.com/dotnet/runtime/blob/dae890906431049d32e24d498a1d707a441a64a8/src/libraries/System.Text.RegularExpressions/gen/RegexGenerator.cs#L296-L302\">tend to just bail out of generation entirely</a> rather than support multiple SDK versions.</p> <blockquote> <p>Interestingly, <a href=\"https://github.com/dotnet/roslyn/issues/61094\">there was a proposal</a> a few years ago to let the version of C# used in the generator be <em>higher</em> than that used in the rest of the project. This may have solved the issue in some cases, but it didn't go anywhere due to the additional complexity it would have added to the compiler and/or IDEs.</p> </blockquote> <p>In the following sections I'll show how to access some basic compilation settings, and then we'll move onto detecting and working with the C# version.</p> <h2 id=\"accessing-details-about-the-compilation-from-a-source-generator\" class=\"heading-with-anchor\"><a href=\"#accessing-details-about-the-compilation-from-a-source-generator\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Accessing details about the compilation from a source generator</a></h2> <p>We'll start by retrieving some static compilation settings like the platform being compiled for (e.g. <code>x64</code>, <code>x86</code>, or, more likely, <code>AnyCPU</code>) and the configuration setting (<code>Debug</code> or <code>Release</code>). I'll also show how to grab the name of the assembly of the target project.</p> <p>These details are all available from within a source generator from the <code>Compilation</code> type. You can access the <code>Compilation</code> using <code>IncrementalGeneratorInitializationContext.CompilationProvider</code>. For example, the following very simple generator shows how to grab several details, and output a source generated file that includes the values as comments. It's more likely that you would want to expose these as constants in a generated class, but this is just for demo purposes!</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">Generator</span></span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">sealed</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">IncrementalBuildInformationGenerator</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">IIncrementalGenerator</span></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Initialize</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IncrementalGeneratorInitializationContext</span> context<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// Create an IncrementalValueProvider from CompilationProvider</span>\n        <span class=\"token class-name\">IncrementalValueProvider<span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">(</span>Platform Platform<span class=\"token punctuation\">,</span> OptimizationLevel OptimizationLevel<span class=\"token punctuation\">,</span> <span class=\"token keyword\">string</span><span class=\"token punctuation\">?</span> AssemblyName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&gt;</span></span> settings <span class=\"token operator\">=</span> context\n          <span class=\"token punctuation\">.</span>CompilationProvider\n          <span class=\"token punctuation\">.</span><span class=\"token function\">Select</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Compilation</span> c<span class=\"token punctuation\">,</span> <span class=\"token class-name\">CancellationToken</span> _<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span>\n          <span class=\"token punctuation\">{</span>\n              <span class=\"token comment\">// Grab the values from Compilation and CompilationOptions</span>\n              <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">.</span>Options<span class=\"token punctuation\">.</span>Platform<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">.</span>Options<span class=\"token punctuation\">.</span>OptimizationLevel<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">.</span>AssemblyName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// Generate the source from the captured values</span>\n        context<span class=\"token punctuation\">.</span><span class=\"token function\">RegisterSourceOutput</span><span class=\"token punctuation\">(</span>settings<span class=\"token punctuation\">,</span> <span class=\"token keyword\">static</span> <span class=\"token punctuation\">(</span>spc<span class=\"token punctuation\">,</span> opts<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">var</span></span>  source <span class=\"token operator\">=</span> \n                $<span class=\"token interpolation-string\"><span class=\"token string\">$\"\"</span></span>\"\n                <span class=\"token comment\">// Platform: {{opts.Platform}}</span>\n                <span class=\"token comment\">// Configuration: {{opts.OptimizationLevel}}</span>\n                <span class=\"token comment\">// AssemblyName: {{opts.AssemblyName}}</span>\n                <span class=\"token string\">\"\"</span>\"<span class=\"token punctuation\">;</span>\n\n            spc<span class=\"token punctuation\">.</span><span class=\"token function\">AddSource</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Example.g.cs\"</span><span class=\"token punctuation\">,</span> source<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>When you run this generator, the generated <em>Example.g.cs</em> file contains something like this following:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token comment\">// Platform: AnyCPU</span>\n<span class=\"token comment\">// AssemblyName: MyExampleProject</span>\n<span class=\"token comment\">// Configuration: Release</span>\n</code></pre> <p>There are <em>many</em> more details you can find on the <code>Compilation</code> and <code>CompilationOptions</code> object if you need them. However, you should be a little careful about doing to much work in the CompilationProvider, and should be wary about accessing and using symbols and some syntax. The <code>CompilationProvider</code> returns a new value for every keypress in the IDE, so you should <a href=\"/creating-a-source-generator-part-9-avoiding-performance-pitfalls-in-incremental-generators/#5-be-careful-using-compilationprovider\">bear that in mind</a>.</p> <h2 id=\"finding-the-c-language-version\" class=\"heading-with-anchor\"><a href=\"#finding-the-c-language-version\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Finding the C# Language version</a></h2> <p>The <code>CompilationOptions</code> object contains a lot of details about the compilation, but it <em>doesn't</em> expose anything about which version of C# is being used. That's because those details are exposed by the <code>CSharpCompilation</code> object, which is a <em>subclass</em> of <code>Compilation</code>.</p> <p>To access the C# language version, we can extend the above example, checking that the provided compilation object is a <code>CSharpCompilation</code>, and extracting the <code>LanguageVersion</code>. <em>Theoretically</em> you could be in a VB project, so can't guarantee that you'll have a <code>CSharpCompilation</code>, though I'm really not sure if the generator even runs in that case, so this is mostly just a case of keeping the C# compiler happy.</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">Generator</span></span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">sealed</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">IncrementalBuildInformationGenerator</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">IIncrementalGenerator</span></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Initialize</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IncrementalGeneratorInitializationContext</span> context<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> settings <span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span>CompilationProvider\n          <span class=\"token punctuation\">.</span><span class=\"token function\">Select</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">,</span> _<span class=\"token punctuation\">)</span>  <span class=\"token operator\">=&gt;</span> \n          <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// Assuming this is a C# project, this should be true!</span>\n            <span class=\"token class-name\">LanguageVersion<span class=\"token punctuation\">?</span></span> csharpVersion <span class=\"token operator\">=</span> c <span class=\"token keyword\">is</span> <span class=\"token class-name\">CSharpCompilation</span> comp\n              <span class=\"token punctuation\">?</span> comp<span class=\"token punctuation\">.</span>LanguageVersion\n              <span class=\"token punctuation\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n                c<span class=\"token punctuation\">.</span>Options<span class=\"token punctuation\">.</span>Platform<span class=\"token punctuation\">,</span>\n                c<span class=\"token punctuation\">.</span>Options<span class=\"token punctuation\">.</span>OptimizationLevel<span class=\"token punctuation\">,</span>\n                c<span class=\"token punctuation\">.</span>AssemblyName<span class=\"token punctuation\">,</span>\n                <span class=\"token named-parameter punctuation\">LanguageVersion</span><span class=\"token punctuation\">:</span> csharpVersion<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        context<span class=\"token punctuation\">.</span><span class=\"token function\">RegisterSourceOutput</span><span class=\"token punctuation\">(</span>settings<span class=\"token punctuation\">,</span> <span class=\"token keyword\">static</span> <span class=\"token punctuation\">(</span>spc<span class=\"token punctuation\">,</span> opts<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span>\n        <span class=\"token punctuation\">{</span>\n           <span class=\"token class-name\"><span class=\"token keyword\">var</span></span>  source <span class=\"token operator\">=</span> \n              $<span class=\"token interpolation-string\"><span class=\"token string\">$\"\"</span></span>\"\n                <span class=\"token comment\">// Platform: {{opts.Platform}}</span>\n                <span class=\"token comment\">// Configuration: {{opts.OptimizationLevel}}</span>\n                <span class=\"token comment\">// AssemblyName: {{opts.AssemblyName}}</span>\n                <span class=\"token comment\">// C# version: {{opts.LanguageVersion}}</span>\n              <span class=\"token string\">\"\"</span>\"<span class=\"token punctuation\">;</span>\n\n            spc<span class=\"token punctuation\">.</span><span class=\"token function\">AddSource</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Example.g.cs\"</span><span class=\"token punctuation\">,</span> source<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>With this addition, the generated file looks something like this instead:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token comment\">// Platform: AnyCPU</span>\n<span class=\"token comment\">// AssemblyName: MyExampleProject</span>\n<span class=\"token comment\">// Configuration: Release</span>\n<span class=\"token comment\">// C# version: CSharp13</span>\n</code></pre> <p>The <code>LanguageVersion</code> property is an <code>enum</code>, so we're just printing the <code>ToString</code> value here.</p> <h2 id=\"understanding-the-possible-values-of-c-version\" class=\"heading-with-anchor\"><a href=\"#understanding-the-possible-values-of-c-version\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Understanding the possible values of C# version</a></h2> <p>One interesting point is that the possible values of <code>LanguageVersion</code> at <em>compile</em> time are controlled by the version of the <em>Microsoft.CodeAnalysis.CSharp</em> package you reference in your source generator. For example, for the <code>4.4.0</code> version of the package, which corresponds to the .NET 7 (i.e. the C# 11) SDK release, <code>LanguageVersion</code> contains the following values:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">LanguageVersion</span>\n<span class=\"token punctuation\">{</span>\n    CSharp1 <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n    CSharp2 <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n    CSharp3 <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span>\n    CSharp4 <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span>\n    CSharp5 <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span>\n    CSharp6 <span class=\"token operator\">=</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span>\n    CSharp7 <span class=\"token operator\">=</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span>\n    CSharp7_1 <span class=\"token operator\">=</span> <span class=\"token number\">701</span><span class=\"token punctuation\">,</span>\n    CSharp7_2 <span class=\"token operator\">=</span> <span class=\"token number\">702</span><span class=\"token punctuation\">,</span>\n    CSharp7_3 <span class=\"token operator\">=</span> <span class=\"token number\">703</span><span class=\"token punctuation\">,</span>\n    CSharp8 <span class=\"token operator\">=</span> <span class=\"token number\">800</span><span class=\"token punctuation\">,</span>\n    CSharp9 <span class=\"token operator\">=</span> <span class=\"token number\">900</span><span class=\"token punctuation\">,</span>\n    CSharp10 <span class=\"token operator\">=</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">,</span>\n    CSharp11 <span class=\"token operator\">=</span> <span class=\"token number\">1100</span><span class=\"token punctuation\">,</span>\n    LatestMajor <span class=\"token operator\">=</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">.</span>MaxValue <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n    Preview <span class=\"token operator\">=</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">.</span>MaxValue <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n    Latest <span class=\"token operator\">=</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">.</span>MaxValue<span class=\"token punctuation\">,</span>\n    Default <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>However, if you run the above generator in a project that's built with the .NET 9 SDK (which supports C# 13), you'll see the following output:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token comment\">// Platform: AnyCPU</span>\n<span class=\"token comment\">// AssemblyName: MyExampleProject</span>\n<span class=\"token comment\">// Configuration: Release</span>\n<span class=\"token comment\">// C# version: CSharp13</span>\n</code></pre> <p>The above shows that we're building with C# 13, and that the <code>LanguageVersion</code> property returned the value <code>CSharp13</code>, <em>even though our generator didn't know that value existed at at compile time</em>!</p> <blockquote> <p>This demonstrates the relationship with the <em>Microsoft.CodeAnalysis.CSharp</em> package you reference at compile time for your source generator versus at runtime. The NuGet package is providing an API surface to code against, but the .NET SDK is free to provide a <em>different</em> implementation, as long as the API is binary compatible. In this case, adding an additional enum value is perfectly legal.</p> </blockquote> <p>So remember: the <code>LanguageVersion</code> <em>may</em> contain a value that you can't reference at compile time!</p> <h2 id=\"changing-the-c-langversion-in-a-project\" class=\"heading-with-anchor\"><a href=\"#changing-the-c-langversion-in-a-project\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Changing the C# LangVersion in a project</a></h2> <p>By default, the version of C# used by a project is tied to the version of the framework it's targeting. So if you're targeting .NET 8, the default C# version is <code>12</code>, while for .NET 9 it's <code>13</code>.</p> <p>You can override the C# version for a project using the <code>&lt;LangVersion&gt;</code> property in your <em>.csproj</em>:</p> <pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Project</span> <span class=\"token attr-name\">Sdk</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Microsoft.NET.Sdk<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>PropertyGroup</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>TargetFramework</span><span class=\"token punctuation\">&gt;</span></span>net9.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>TargetFramework</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token comment\">&lt;!-- Using C#10 instead of the default C# 13 --&gt;</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>LangVersion</span><span class=\"token punctuation\">&gt;</span></span>10<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>LangVersion</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>PropertyGroup</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Project</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre> <p>The source generator above detects this change, and the <code>LanguageVersion</code> updates as expected:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token comment\">// Platform: AnyCPU</span>\n<span class=\"token comment\">// AssemblyName: MyExampleProject</span>\n<span class=\"token comment\">// Configuration: Release</span>\n<span class=\"token comment\">// C# version: CSharp10</span>\n</code></pre> <p>Note that it's <em>also</em> possible to <a href=\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/configure-language-version#c-language-version-reference\">specify some \"special\" versions</a> in the <code>&lt;LangVersion&gt;</code> element:</p> <ul><li><code>default</code> or <code>latestMajor</code>: The compiler accepts syntax from the latest released major version of the compiler.</li> <li><code>latest</code>: The compiler accepts syntax from the latest released version of the compiler (including minor version).</li> <li><code>preview</code>: The compiler accepts all valid language syntax from the latest preview version.</li></ul> <p>Note that if users specifies <code>default</code>, <code>latest</code>, or <code>latestMajor</code> in their <em>.csproj</em> it's automatically mapped to the corresponding specific <code>CSharpX</code> version when you retrieve it in the <code>LanguageVersion</code> property. For example, setting this in your <em>.csproj</em></p> <pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>LangVersion</span><span class=\"token punctuation\">&gt;</span></span>latest<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>LangVersion</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre> <p>results in the following generated C# version (when running with the .NET 9 SDK)</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token comment\">// C# version: CSharp13</span>\n</code></pre> <p>The one exception to this is <code>Preview</code>, which <em>isn't</em> re-mapped as far as I can tell (presumably because the \"next\" C# version doesn't have an entry in the enum)! So if the target project has this:</p> <pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>LangVersion</span><span class=\"token punctuation\">&gt;</span></span>preview<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>LangVersion</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre> <p>then your generated code looks like this:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token comment\">// C# version: Preview</span>\n</code></pre> <p>Once you have extracted a <code>LanguageVersion</code> in your source generator, the question becomes what to <em>do</em> with it.</p> <h2 id=\"generating-different-code-based-on-languageversion\" class=\"heading-with-anchor\"><a href=\"#generating-different-code-based-on-languageversion\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Generating different code based on <code>LanguageVersion</code></a></h2> <p>In the extreme case, you might decide that you simply can't support generating code unless a specific C# version is supported. If that's the case, you can simply add a version check wherever it's required in your pipeline to bail out.</p> <p>Alternatively, you might decide that you just want to generate <em>different</em> code. If so, then you'll probably want to add a condition in your generation code something like the following:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>currentVersion <span class=\"token operator\">&lt;=</span> LanguageVersion<span class=\"token punctuation\">.</span>CSharp11<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// can't use collection expressions</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"\"</span>\"\n           <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">List<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">&gt;</span></span>\n           <span class=\"token punctuation\">{</span>\n               <span class=\"token string\">\"value1\"</span><span class=\"token punctuation\">,</span>\n               <span class=\"token string\">\"value2\"</span><span class=\"token punctuation\">,</span>\n           <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n           <span class=\"token string\">\"\"</span>\"\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">else</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// C# 12+ gives us collection expressions</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"\"</span>\"\n           <span class=\"token keyword\">return</span>\n           <span class=\"token punctuation\">[</span>\n               <span class=\"token string\">\"value1\"</span><span class=\"token punctuation\">,</span>\n               <span class=\"token string\">\"value2\"</span><span class=\"token punctuation\">,</span>\n           <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n           <span class=\"token string\">\"\"</span>\"\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>Obviously it's a toy example, but it's pretty much all you need to do! The only real complexity is when you're referencing a version of <em>Microsoft.CodeAnalysis.CSharp</em> that doesn't contain the <code>LanguageVersion</code> property you need.</p> <blockquote> <p>The version of the <em>Microsoft.CodeAnalysis.CSharp</em> package ties directly to a specific version of the Rosyln API and .NET SDK, so you often can't \"simply\" update the package, as that reduces the range of SDKs your source generator works on. I'll talk more about this in a subsequent post.</p> </blockquote> <p>For example, in the above code I worked around the fact that <code>CSharp12</code> wasn't an option in the <code>4.4.0</code> version of <em>Microsoft.CodeAnalysis.CSharp</em>. But what if I needed to specialise for <code>CSharp13</code>? I couldn't use any cute <code>&lt;=</code> tricks for that…</p> <p>I think the best option in that scenario is to use the fact that the values for future C# versions use known <code>int</code> values, and to \"cast\" to the correct value, for example:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token comment\">// test for C#13 or higher</span>\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>currentVersion <span class=\"token operator\">&gt;=</span> <span class=\"token punctuation\">(</span>LanguageVersion<span class=\"token punctuation\">)</span><span class=\"token number\">1300</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// can use params collections</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"\"</span>\"\n           <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Loop</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">params</span> <span class=\"token class-name\">ReadOnlySpan<span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">&gt;</span></span> items<span class=\"token punctuation\">)</span>\n           <span class=\"token punctuation\">{</span>\n               <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> item <span class=\"token keyword\">in</span> items<span class=\"token punctuation\">)</span>\n                  Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span>\n           <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n           <span class=\"token string\">\"\"</span>\"\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">else</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// No params collections, have to use array instead</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"\"</span>\"\n           <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Loop</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">params</span> <span class=\"token class-name\">T<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> items<span class=\"token punctuation\">)</span>\n           <span class=\"token punctuation\">{</span>\n               <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> item <span class=\"token keyword\">in</span> items<span class=\"token punctuation\">)</span>\n                  Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span>\n           <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n           <span class=\"token string\">\"\"</span>\"\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>It's not particularly pretty, but it works!</p> <p>I think that covers pretty much everything to do with fetching compilation options and language versions. I haven't covered reading MSBuild properties yet, as that's a bit more involved. I'll cover that in the next post.</p> <h2 id=\"summary\" class=\"heading-with-anchor\"><a href=\"#summary\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Summary</a></h2> <p>In this post I showed how you can retrieve compilation options such as the current configuration and platform from a <code>Compilation</code> object in a source generator. I then showed how you can determine the C# version used by the target project. This is important information for a source generator, as you must make sure not to generate code that contains features from an unsupported C# version.</p> <p>In the next post I'll show how to read MSBuild properties from the target project, how you can use those to configure your source generator, and how to make it easier for users by packing extra files in a NuGet package.</p> ",
    "sanitized": "This is the twelve post in the series: Creating a source generator.  Part 1 - Creating an incremental generatorPart 2 - Testing an incremental generator with snapshot testingPart 3 - Integration testing and NuGet packagingPart 4 - Customising generated code with marker attributesPart 5 - Finding a type declaration's namespace and type hierarchyPart 6 - Saving source generator output in source controlPart 7 - Solving the source generator 'marker attribute' problem - Part 1Part 8 - Solving the source generator 'marker attribute' problem - Part 2Part 9 - Avoiding performance pitfalls in incremental generatorsPart 10 - Testing your incremental generator pipeline outputs are cacheablePart 11 - Implementing an interceptor with a source generatorPart 12 - Reading compilation options and the C# version in source generators (this post) Part 13 - Accessing MSBuild properties and user configuration from source generatorsPart 14 - Supporting multiple .NET SDK versions in a source generatorIn this post I show how to access information about the project a source generator is running in, such as the C# version, the name of the assembly, or the current configuration (Debug or Release). Why might you need details about the compilation? If you're writing a source generator, you're generating C# source code that is included in the target project's compilation. But you have to be careful—which C# features are you using in your generated code? Do you know which features you can safely use? For example, if you're building a source generator that could be used with the .NET 6 or 7 SDK, then you can't just assume that you can use collection expressions. Collection expressions were introduced in C# 12 (along with .NET 8), and can be used when you're targeting earlier framework versions of .NET, as long as you're using a new enough version of the .NET SDK and are using C# 12 or higher. Depending on the code you're generating, that means you should potentially be generating different code based on the consuming project's C# version. Collection expressions are a great example that necessitate this, as in general, you should use them where you can, because they can improve runtime performance. Yes, that's kind of a pain, and it seems generally quite rare to bother with the added complexity, outside of the generators that ship with the runtime. And even in those cases, they tend to just bail out of generation entirely rather than support multiple SDK versions.  Interestingly, there was a proposal a few years ago to let the version of C# used in the generator be higher than that used in the rest of the project. This may have solved the issue in some cases, but it didn't go anywhere due to the additional complexity it would have added to the compiler and/or IDEs.  In the following sections I'll show how to access some basic compilation settings, and then we'll move onto detecting and working with the C# version. Accessing details about the compilation from a source generator We'll start by retrieving some static compilation settings like the platform being compiled for (e.g. x64, x86, or, more likely, AnyCPU) and the configuration setting (Debug or Release). I'll also show how to grab the name of the assembly of the target project. These details are all available from within a source generator from the Compilation type. You can access the Compilation using IncrementalGeneratorInitializationContext.CompilationProvider. For example, the following very simple generator shows how to grab several details, and output a source generated file that includes the values as comments. It's more likely that you would want to expose these as constants in a generated class, but this is just for demo purposes! [Generator]\npublic sealed class IncrementalBuildInformationGenerator : IIncrementalGenerator\n{\n    public void Initialize(IncrementalGeneratorInitializationContext context)\n    {\n        // Create an IncrementalValueProvider from CompilationProvider\n        IncrementalValueProvider<(Platform Platform, OptimizationLevel OptimizationLevel, string? AssemblyName)> settings = context\n          .CompilationProvider\n          .Select((Compilation c, CancellationToken _) =>\n          {\n              // Grab the values from Compilation and CompilationOptions\n              return (c.Options.Platform, c.Options.OptimizationLevel, c.AssemblyName);\n          });\n\n        // Generate the source from the captured values\n        context.RegisterSourceOutput(settings, static (spc, opts) =>\n        {\n            var  source = \n                $$\"\"\"\n                // Platform: {{opts.Platform}}\n                // Configuration: {{opts.OptimizationLevel}}\n                // AssemblyName: {{opts.AssemblyName}}\n                \"\"\";\n\n            spc.AddSource(\"Example.g.cs\", source);\n        });\n    }\n}\n When you run this generator, the generated Example.g.cs file contains something like this following: // Platform: AnyCPU\n// AssemblyName: MyExampleProject\n// Configuration: Release\n There are many more details you can find on the Compilation and CompilationOptions object if you need them. However, you should be a little careful about doing to much work in the CompilationProvider, and should be wary about accessing and using symbols and some syntax. The CompilationProvider returns a new value for every keypress in the IDE, so you should bear that in mind. Finding the C# Language version The CompilationOptions object contains a lot of details about the compilation, but it doesn't expose anything about which version of C# is being used. That's because those details are exposed by the CSharpCompilation object, which is a subclass of Compilation. To access the C# language version, we can extend the above example, checking that the provided compilation object is a CSharpCompilation, and extracting the LanguageVersion. Theoretically you could be in a VB project, so can't guarantee that you'll have a CSharpCompilation, though I'm really not sure if the generator even runs in that case, so this is mostly just a case of keeping the C# compiler happy. [Generator]\npublic sealed class IncrementalBuildInformationGenerator : IIncrementalGenerator\n{\n    public void Initialize(IncrementalGeneratorInitializationContext context)\n    {\n        var settings = context.CompilationProvider\n          .Select((c, _)  => \n          {\n            // Assuming this is a C# project, this should be true!\n            LanguageVersion? csharpVersion = c is CSharpCompilation comp\n              ? comp.LanguageVersion\n              : null;\n\n            return (\n                c.Options.Platform,\n                c.Options.OptimizationLevel,\n                c.AssemblyName,\n                LanguageVersion: csharpVersion);\n          });\n\n        context.RegisterSourceOutput(settings, static (spc, opts) =>\n        {\n           var  source = \n              $$\"\"\"\n                // Platform: {{opts.Platform}}\n                // Configuration: {{opts.OptimizationLevel}}\n                // AssemblyName: {{opts.AssemblyName}}\n                // C# version: {{opts.LanguageVersion}}\n              \"\"\";\n\n            spc.AddSource(\"Example.g.cs\", source);\n        });\n    }\n}\n With this addition, the generated file looks something like this instead: // Platform: AnyCPU\n// AssemblyName: MyExampleProject\n// Configuration: Release\n// C# version: CSharp13\n The LanguageVersion property is an enum, so we're just printing the ToString value here. Understanding the possible values of C# version One interesting point is that the possible values of LanguageVersion at compile time are controlled by the version of the Microsoft.CodeAnalysis.CSharp package you reference in your source generator. For example, for the 4.4.0 version of the package, which corresponds to the .NET 7 (i.e. the C# 11) SDK release, LanguageVersion contains the following values: public enum LanguageVersion\n{\n    CSharp1 = 1,\n    CSharp2 = 2,\n    CSharp3 = 3,\n    CSharp4 = 4,\n    CSharp5 = 5,\n    CSharp6 = 6,\n    CSharp7 = 7,\n    CSharp7_1 = 701,\n    CSharp7_2 = 702,\n    CSharp7_3 = 703,\n    CSharp8 = 800,\n    CSharp9 = 900,\n    CSharp10 = 1000,\n    CSharp11 = 1100,\n    LatestMajor = int.MaxValue - 2,\n    Preview = int.MaxValue - 1,\n    Latest = int.MaxValue,\n    Default = 0,\n}\n However, if you run the above generator in a project that's built with the .NET 9 SDK (which supports C# 13), you'll see the following output: // Platform: AnyCPU\n// AssemblyName: MyExampleProject\n// Configuration: Release\n// C# version: CSharp13\n The above shows that we're building with C# 13, and that the LanguageVersion property returned the value CSharp13, even though our generator didn't know that value existed at at compile time!  This demonstrates the relationship with the Microsoft.CodeAnalysis.CSharp package you reference at compile time for your source generator versus at runtime. The NuGet package is providing an API surface to code against, but the .NET SDK is free to provide a different implementation, as long as the API is binary compatible. In this case, adding an additional enum value is perfectly legal.  So remember: the LanguageVersion may contain a value that you can't reference at compile time! Changing the C# LangVersion in a project By default, the version of C# used by a project is tied to the version of the framework it's targeting. So if you're targeting .NET 8, the default C# version is 12, while for .NET 9 it's 13. You can override the C# version for a project using the <LangVersion> property in your .csproj: <Project Sdk=\"Microsoft.NET.Sdk\">\n  <PropertyGroup>\n    <TargetFramework>net9.0</TargetFramework>\n    <!-- Using C#10 instead of the default C# 13 -->\n    <LangVersion>10</LangVersion>\n  </PropertyGroup>\n</Project>\n The source generator above detects this change, and the LanguageVersion updates as expected: // Platform: AnyCPU\n// AssemblyName: MyExampleProject\n// Configuration: Release\n// C# version: CSharp10\n Note that it's also possible to specify some \"special\" versions in the <LangVersion> element: default or latestMajor: The compiler accepts syntax from the latest released major version of the compiler. latest: The compiler accepts syntax from the latest released version of the compiler (including minor version). preview: The compiler accepts all valid language syntax from the latest preview version. Note that if users specifies default, latest, or latestMajor in their .csproj it's automatically mapped to the corresponding specific CSharpX version when you retrieve it in the LanguageVersion property. For example, setting this in your .csproj <LangVersion>latest</LangVersion>\n results in the following generated C# version (when running with the .NET 9 SDK) // C# version: CSharp13\n The one exception to this is Preview, which isn't re-mapped as far as I can tell (presumably because the \"next\" C# version doesn't have an entry in the enum)! So if the target project has this: <LangVersion>preview</LangVersion>\n then your generated code looks like this: // C# version: Preview\n Once you have extracted a LanguageVersion in your source generator, the question becomes what to do with it. Generating different code based on LanguageVersion In the extreme case, you might decide that you simply can't support generating code unless a specific C# version is supported. If that's the case, you can simply add a version check wherever it's required in your pipeline to bail out. Alternatively, you might decide that you just want to generate different code. If so, then you'll probably want to add a condition in your generation code something like the following: if(currentVersion <= LanguageVersion.CSharp11)\n{\n    // can't use collection expressions\n    return \"\"\"\n           return new List<string>\n           {\n               \"value1\",\n               \"value2\",\n           };\n           \"\"\"\n}\nelse\n{\n    // C# 12+ gives us collection expressions\n    return \"\"\"\n           return\n           [\n               \"value1\",\n               \"value2\",\n           ];\n           \"\"\"\n}\n Obviously it's a toy example, but it's pretty much all you need to do! The only real complexity is when you're referencing a version of Microsoft.CodeAnalysis.CSharp that doesn't contain the LanguageVersion property you need.  The version of the Microsoft.CodeAnalysis.CSharp package ties directly to a specific version of the Rosyln API and .NET SDK, so you often can't \"simply\" update the package, as that reduces the range of SDKs your source generator works on. I'll talk more about this in a subsequent post.  For example, in the above code I worked around the fact that CSharp12 wasn't an option in the 4.4.0 version of Microsoft.CodeAnalysis.CSharp. But what if I needed to specialise for CSharp13? I couldn't use any cute <= tricks for that… I think the best option in that scenario is to use the fact that the values for future C# versions use known int values, and to \"cast\" to the correct value, for example: // test for C#13 or higher\nif(currentVersion >= (LanguageVersion)1300)\n{\n    // can use params collections\n    return \"\"\"\n           public void Loop(params ReadOnlySpan<T> items)\n           {\n               foreach (var item in items)\n                  Console.WriteLine(item)\n           };\n           \"\"\"\n}\nelse\n{\n    // No params collections, have to use array instead\n    return \"\"\"\n           public void Loop(params T[] items)\n           {\n               foreach (var item in items)\n                  Console.WriteLine(item)\n           };\n           \"\"\"\n}\n It's not particularly pretty, but it works! I think that covers pretty much everything to do with fetching compilation options and language versions. I haven't covered reading MSBuild properties yet, as that's a bit more involved. I'll cover that in the next post. Summary In this post I showed how you can retrieve compilation options such as the current configuration and platform from a Compilation object in a source generator. I then showed how you can determine the C# version used by the target project. This is important information for a source generator, as you must make sure not to generate code that contains features from an unsupported C# version. In the next post I'll show how to read MSBuild properties from the target project, how you can use those to configure your source generator, and how to make it easier for users by packing extra files in a NuGet package."
  },
  {
    "itemId": "https://andrewlock.net/creating-a-source-generator-part-11-implementing-an-interceptor-with-a-source-generator/",
    "raw": "<img src=\"https://andrewlock.net/content/images/2024/enumgenerators_banner.webp\" /><nav><p>This is the eleven post in the series: <a href=\"/series/creating-a-source-generator/\">Creating a source generator</a>. </p> <ol class=\"list-none\"><li><a href=\"/creating-a-source-generator-part-1-creating-an-incremental-source-generator/\">Part 1 - Creating an incremental generator</a></li><li><a href=\"/creating-a-source-generator-part-2-testing-an-incremental-generator-with-snapshot-testing/\">Part 2 - Testing an incremental generator with snapshot testing</a></li><li><a href=\"/creating-a-source-generator-part-3-integration-testing-and-packaging/\">Part 3 - Integration testing and NuGet packaging</a></li><li><a href=\"/creating-a-source-generator-part-4-customising-generated-code-with-marker-attributes/\">Part 4 - Customising generated code with marker attributes</a></li><li><a href=\"/creating-a-source-generator-part-5-finding-a-type-declarations-namespace-and-type-hierarchy/\">Part 5 - Finding a type declaration's namespace and type hierarchy</a></li><li><a href=\"/creating-a-source-generator-part-6-saving-source-generator-output-in-source-control/\">Part 6 - Saving source generator output in source control</a></li><li><a href=\"/creating-a-source-generator-part-7-solving-the-source-generator-marker-attribute-problem-part1/\">Part 7 - Solving the source generator 'marker attribute' problem - Part 1</a></li><li><a href=\"/creating-a-source-generator-part-8-solving-the-source-generator-marker-attribute-problem-part2/\">Part 8 - Solving the source generator 'marker attribute' problem - Part 2</a></li><li><a href=\"/creating-a-source-generator-part-9-avoiding-performance-pitfalls-in-incremental-generators/\">Part 9 - Avoiding performance pitfalls in incremental generators</a></li><li><a href=\"/creating-a-source-generator-part-10-testing-your-incremental-generator-pipeline-outputs-are-cacheable/\">Part 10 - Testing your incremental generator pipeline outputs are cacheable</a></li><li>Part 11 - Implementing an interceptor with a source generator (this post) </li><li><a href=\"/creating-a-source-generator-part-12-reading-compilation-options-and-csharp-version-in-source-generators/\">Part 12 - Reading compilation options and the C# version in source generators</a></li><li><a href=\"/creating-a-source-generator-part-13-providing-and-accessing-msbuild-settings-in-source-generators/\">Part 13 - Accessing MSBuild properties and user configuration from source generators</a></li><li><a href=\"/creating-a-source-generator-part-14-supporting-multiple-sdk-versions-in-a-source-generator/\">Part 14 - Supporting multiple .NET SDK versions in a source generator</a></li></ol></nav><p>In this post I describe how you can use the interceptor support available in the .NET 8 and .NET 9 SDK to replace method calls at build time. The APIs have evolved a little since they were first introduced in .NET 8, so in this post I show how to use the new APIs with a source generator.</p> <blockquote> <p>This post is a follow on <a href=\"/recent-updates-for-netescapades-enumgenerators-interceptors/\">from a recent post</a> in which I described the preview interceptor support I added to my <a href=\"https://www.nuget.org/packages/NetEscapades.EnumGenerators\">NetEscapades.EnumGenerators NuGet package</a>.</p> </blockquote> <p>I start by explaining what interceptors are, why they can be useful, and scenarios where they're already being used. I then show how the new interceptor APIs work, and how you can use them in your own source generators.</p> <h2 id=\"what-are-interceptors-and-why-do-we-need-them-\" class=\"heading-with-anchor\"><a href=\"#what-are-interceptors-and-why-do-we-need-them-\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">What are interceptors, and why do we need them?</a></h2> <p>Interceptors are an interesting new feature, first introduced in experimental form in C#12, that allow you to replace (or \"intercept\") a method call in your application with an alternative method. When your app is compiled, the compiler automatically \"swaps out\" the call to the original method with your substitute.</p> <p>An obvious question here is <em>why</em> would you want to do that? Why not just call the substitute method directly? In general, that is the simplest solution, but in reality that may not be possible. There's a lot of existing code written, and asking everyone to update their code to use new APIs isn't necessarily feasible.</p> <p>But why would it be so urgent to use new APIs?</p> <p>The main reason is ahead-of-time compilation (AOT) which <a href=\"/exploring-the-dotnet-8-preview-the-minimal-api-aot-template/\">I've discussed several times in a previous series</a>. Interceptors aren't <em>specifically</em> for AOT, but it's one of the clearest use cases. By using interceptors you could take code which previously wasn't AOT friendly, and replace it with an AOT-friendly source-generated version.</p> <p>Customer's don't need to change their code, the source generator just automatically \"upgrades\" the method calls to use source-generated versions of the APIs that are compatible with AOT instead. If that sounds familiar, it's because that's exactly what the <a href=\"/exploring-the-dotnet-8-preview-using-the-new-configuration-binder-source-generator/\">configuration source generator</a> and <a href=\"/exploring-the-dotnet-8-preview-exploring-the-new-minimal-api-source-generator/\">existing minimal API source generator</a> do in .NET 8 and later.</p> <p>Interceptors are particularly interesting because they're the one case where source generators can be used to <em>change</em> existing code. Normally source generators can only <em>add</em> additional code.</p> <blockquote> <p>For a video discussion of interceptors, <a href=\"https://www.youtube.com/watch?v=X1_QeH1yAto&amp;list=PLdo4fOcmZ0oX-DBuRG4u58ZTAJgBAeQ-t&amp;index=12\">there was a great discussion a year ago on the .NET community standup a year or so ago</a>. It's a little out of date now, but I still recommend it.</p> </blockquote> <p>That's all quite abstract, so in the next section I'll show a very simple example of an interceptor, so that you can understand the mechanics of how they work.</p> <h2 id=\"an-interceptor-in-practice\" class=\"heading-with-anchor\"><a href=\"#an-interceptor-in-practice\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">An interceptor in practice</a></h2> <p>To demonstrate how interceptors work, I'll show a small example using my <a href=\"https://www.nuget.org/packages/NetEscapades.EnumGenerators\">NetEscapades.EnumGenerators NuGet package</a>. This package provides an <code>[EnumExtensions]</code> attribute that you can apply to an enum. <a href=\"/recent-updates-for-netescapades-enumgenerators-interceptors/\">When enabled, it can also generate interceptors for calls to <code>ToString()</code></a>.</p> <h3 id=\"the-original-example-without-interceptors\" class=\"heading-with-anchor\"><a href=\"#the-original-example-without-interceptors\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">The original example without interceptors</a></h3> <p>Lets say you have the following simple program. It defines an enum, <code>MyEnum</code>, which is decorated with the <code>[EnumExtensions]</code> attribute. The program itself simply creates an instance of the enum, and calls <code>ToString()</code> on it:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">NetEscapades<span class=\"token punctuation\">.</span>EnumGenerators</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> <span class=\"token keyword\">value</span> <span class=\"token operator\">=</span> MyEnum<span class=\"token punctuation\">.</span>First<span class=\"token punctuation\">;</span>\nConsole<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">value</span><span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">EnumExtensions</span></span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">internal</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">MyEnum</span>\n<span class=\"token punctuation\">{</span>\n    First<span class=\"token punctuation\">,</span>\n    Second<span class=\"token punctuation\">,</span>\n    Third<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>Without an interceptor, this code calls the <code>ToString()</code> method defined on the base <code>Enum</code> type. This method is historically surprisingly slow (more on that later), so <em>NetEscapades.EnumGenerators</em> provides an alternative, faster, implementation:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">internal</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">partial</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyEnumExtensions</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> <span class=\"token function\">ToStringFast</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token class-name\">MyEnum</span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">)</span>\n        <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">value</span> <span class=\"token keyword\">switch</span>\n        <span class=\"token punctuation\">{</span>\n            MyEnum<span class=\"token punctuation\">.</span>First <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">nameof</span><span class=\"token punctuation\">(</span>MyEnum<span class=\"token punctuation\">.</span>First<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            MyEnum<span class=\"token punctuation\">.</span>Second <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">nameof</span><span class=\"token punctuation\">(</span>MyEnum<span class=\"token punctuation\">.</span>Second<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            _ <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>This implementation is significantly faster, and allocates less than the runtime's <code>ToString()</code> implementation:</p> <pre class=\"language-ini\"><code class=\"language-ini\"><span class=\"token key attr-name\">BenchmarkDotNet</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">v0.13.1, OS=Windows 10.0.19042.1348 (20H2/October2020Update)</span>\nIntel Core i7-7500U CPU 2.70GHz (Kaby Lake), 1 CPU, 4 logical and 2 physical cores\n  DefaultJob : .NET Framework 4.8 (4.8.4420.0), X64 RyuJIT\n<span class=\"token key attr-name\">.NET SDK</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">6.0.100</span>\n  DefaultJob : .NET 6.0.0 (6.0.21.52210), X64 RyuJIT\n</code></pre> <table><thead><tr><th>Method</th><th>FX</th><th style=\"text-align:right\">Mean</th><th style=\"text-align:right\">Error</th><th style=\"text-align:right\">StdDev</th><th style=\"text-align:right\">Ratio</th><th style=\"text-align:right\">Gen 0</th><th style=\"text-align:right\">Allocated</th></tr></thead><tbody><tr><td>ToString</td><td><code>net48</code></td><td style=\"text-align:right\">578.276ns</td><td style=\"text-align:right\">3.3109ns</td><td style=\"text-align:right\">3.0970ns</td><td style=\"text-align:right\">1.000</td><td style=\"text-align:right\">0.0458</td><td style=\"text-align:right\">96 B</td></tr><tr><td>ToStringFast</td><td><code>net48</code></td><td style=\"text-align:right\">3.091ns</td><td style=\"text-align:right\">0.0567ns</td><td style=\"text-align:right\">0.0443ns</td><td style=\"text-align:right\">0.005</td><td style=\"text-align:right\">-</td><td style=\"text-align:right\">-</td></tr><tr><td>ToString</td><td><code>net6.0</code></td><td style=\"text-align:right\">17.9850ns</td><td style=\"text-align:right\">0.1230ns</td><td style=\"text-align:right\">0.1151ns</td><td style=\"text-align:right\">1.000</td><td style=\"text-align:right\">0.0115</td><td style=\"text-align:right\">24 B</td></tr><tr><td>ToStringFast</td><td><code>net6.0</code></td><td style=\"text-align:right\">0.1212ns</td><td style=\"text-align:right\">0.0225ns</td><td style=\"text-align:right\">0.0199ns</td><td style=\"text-align:right\">0.007</td><td style=\"text-align:right\">-</td><td style=\"text-align:right\">-</td></tr></tbody></table> <p>The obvious downside is that you have to remember to <em>use</em> the <code>ToStringFast()</code> method, with interceptors we can automate that instead!</p> <h3 id=\"enabling-interceptor-support\" class=\"heading-with-anchor\"><a href=\"#enabling-interceptor-support\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Enabling interceptor support</a></h3> <p>If you <a href=\"/recent-updates-for-netescapades-enumgenerators-interceptors/\">enable the interceptor support</a>, the <em>NetEscapades.EnumGenerators</em> library doesn't just emit extension methods, it also emits interceptor code.</p> <blockquote> <p>Note that to use the interceptor support described in this post, you must be building with the 8.0.4xx SDK (or 9.0.x SDK) at a minimum. Earlier versions of the SDK include now-deprecated APIs, but only the later SDKs include the APIs used in this post.</p> </blockquote> <p>The <em>NetEscapades.EnumGenerators</em> library generates interceptor code similar to the following:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">static</span> file <span class=\"token keyword\">class</span> <span class=\"token class-name\">EnumInterceptors</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">InterceptsLocation</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token named-parameter punctuation\">version</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token named-parameter punctuation\">data</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"yxKJBEhzkHdnMhHGENjk8qgBAABQcm9ncmFtLmNz\"</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span> <span class=\"token comment\">// Program.cs(4,24)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> <span class=\"token function\">MyEnumExtensionsToString</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token class-name\">Enum</span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">)</span>\n        <span class=\"token operator\">=&gt;</span> MyEnumExtensions<span class=\"token punctuation\">.</span><span class=\"token function\">ToStringFast</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>MyEnum<span class=\"token punctuation\">)</span><span class=\"token keyword\">value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>The <code>[InterceptsLocation]</code> attribute is what makes the <code>MyEnumExtensionsToString()</code> method an <em>interceptor</em>. At compile time, the compiler replaces the call to <code>ToString()</code> with the call to <code>MyEnumExtensionsToString()</code>, something like the following:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\">Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>EnumInterceptors<span class=\"token punctuation\">.</span><span class=\"token function\">MyEnumExtensionsToString</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre> <p>The library automatically detects all the calls to <code>MyEnum.ToString()</code> and adds an <code>[InterceptsLocation]</code> attribute for each instance. That means you don't have to remember to call <code>ToStringFast()</code> yourself, you can just let the interceptor handle it itself!</p> <h3 id=\"emitting-the-interceptslocationattribute-definition\" class=\"heading-with-anchor\"><a href=\"#emitting-the-interceptslocationattribute-definition\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Emitting the <code>InterceptsLocationAttribute</code> definition</a></h3> <p>The compiler looks for the <code>[InterceptsLocation]</code> attribute to identify interceptors, but the library itself <em>also</em> emits the <code>[InterceptsLocation]</code> attribute, rather than relying on the attribute to be defined in the runtime. This is a similar pattern as used for many other compiler features, as it does not tie the feature to a specific runtime version.</p> <p>When generating the enum interceptors, the <em>NetEscapades.EnumGenerators</em> library also generates the <code>[InterceptsLocation]</code> attribute definition itself, as shown below:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">System</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Diagnostics</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token preprocessor property\">#<span class=\"token directive keyword\">nullable</span> enable</span>\n<span class=\"token keyword\">namespace</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Runtime<span class=\"token punctuation\">.</span>CompilerServices</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// this type is needed by the compiler to implement interceptors,</span>\n    <span class=\"token comment\">// it doesn't need to come from the runtime itself</span>\n\n    <span class=\"token punctuation\">[</span><span class=\"token function\">Conditional</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"DEBUG\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">// not needed post-build, so can evaporate it</span>\n    <span class=\"token punctuation\">[</span><span class=\"token function\">AttributeUsage</span><span class=\"token punctuation\">(</span>AttributeTargets<span class=\"token punctuation\">.</span>Method<span class=\"token punctuation\">,</span> AllowMultiple <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">sealed</span> file <span class=\"token keyword\">class</span> <span class=\"token class-name\">InterceptsLocationAttribute</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">Attribute</span></span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">public</span> <span class=\"token function\">InterceptsLocationAttribute</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> version<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> data<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            _ <span class=\"token operator\">=</span> version<span class=\"token punctuation\">;</span>\n            _ <span class=\"token operator\">=</span> data<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>The attribute is generated above as a <code>file</code> scoped attribute (<a href=\"https://github.com/dotnet/roslyn/blob/98ea496177bc8e607dbf454abd6b5a5e4678aed2/docs/features/interceptors.md#interceptslocationattribute\">as suggested in the docs</a>), so that multiple generators can generate it separately if necessary.</p> <p>The arguments to the <code>[InterceptsLocation]</code> attribute are:</p> <ul><li><code>version</code>: A version number defining the encoding. Only version <code>1</code> is currently defined, but the compiler may introduce new encodings in the future</li> <li><code>data</code>: An encoding defining the location to intercept, that's not intended to be human-readable. The version <code>1</code> encoding is a base64-encoding of the following: <ul><li>16 byte xxHash128 content checksum of the file containing the intercepted call.</li> <li><code>int32</code> in little-endian format for the position (i.e. <code>SyntaxNode.Position</code>) of the call in syntax.</li> <li>utf-8 string data containing a file name, used for error reporting.</li></ul> </li></ul> <blockquote> <p>Note that these argument is a big change from the <em>previous</em> experimental interceptor <code>[InterceptsLocation]</code> attribute, which used the human-readable values <code>[InterceptsLocation(path, line, column)]</code>. This path-based API has been deprecated, and will be removed in the future. This also means interceptors are <em>only</em> really feasible for use with source generators now.</p> </blockquote> <p>If it looks difficult to generate the <code>data</code> argument correctly, then don't worry, you don't have to! Instead, there's a Roslyn API you can use to generate the required <code>data</code> value from a source generator.</p> <h2 id=\"implementing-an-interceptor-in-a-source-generator\" class=\"heading-with-anchor\"><a href=\"#implementing-an-interceptor-in-a-source-generator\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Implementing an interceptor in a source generator</a></h2> <p>Now we've covered all the background, I'll describe how I implemented the interceptor support in the <code>NetEscapades.EnumGenerators</code> source generator. I'm going to assume you're familiar with source generators in general (<a href=\"/series/creating-a-source-generator/\">see the earlier posts in this series if not</a>!), and will just focus on the interceptor part.</p> <p>Broadly speaking, there are three things we need to do:</p> <ul><li>Find the locations we want to intercept</li> <li>Extract an <code>InterceptableLocation</code> instance for each location</li> <li>Use the <code>InterceptableLocation</code> (and other information) to generate the interceptor target and <code>[InterceptsLocation]</code> attribute.</li></ul> <p>For the first part we use the <code>SyntaxValueProvider.CreateSyntaxProvider()</code> method and pass in \"predicate\" and \"transform\" functions:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> locations <span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span>SyntaxProvider\n    <span class=\"token punctuation\">.</span><span class=\"token function\">CreateSyntaxProvider</span><span class=\"token punctuation\">(</span>\n        <span class=\"token named-parameter punctuation\">predicate</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">static</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">,</span> _<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">InterceptorPredicate</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token named-parameter punctuation\">transform</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">static</span> <span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> ct<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">InterceptorTransform</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> ct<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">Where</span><span class=\"token punctuation\">(</span>candidate <span class=\"token operator\">=&gt;</span> candidate <span class=\"token keyword\">is</span> <span class=\"token keyword\">not</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre> <p>The predicate runs for every change in syntax, so we do a lightweight check using pattern matching to see if we're in a <code>ToString()</code> method call:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\">    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">bool</span></span> <span class=\"token function\">InterceptorPredicate</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SyntaxNode</span> node<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span>\n        node <span class=\"token keyword\">is</span> <span class=\"token class-name\">InvocationExpressionSyntax</span> <span class=\"token punctuation\">{</span> \n            Expression<span class=\"token punctuation\">:</span> MemberAccessExpressionSyntax <span class=\"token punctuation\">{</span>\n                Name<span class=\"token punctuation\">.</span>Identifier<span class=\"token punctuation\">.</span>ValueText<span class=\"token punctuation\">:</span> <span class=\"token string\">\"ToString\"</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre> <p>This includes more instances than we actually want, as it includes <em>all</em> calls to <code>ToString()</code>, but the important thing is to significantly reduce the number of nodes we investigate in the next stage. In the <code>InterceptorTransform</code> method we do the full check, to make sure we are only looking at <code>Enum.ToString()</code> cases.</p> <p>The code below uses a bunch of pattern matching and examining of the <em>semantic</em> model to check that the invocation is an <code>Enum.ToString()</code> call, and if so calls <code>GetInterceptableLocation()</code> to get the details we need. I've added comments to explain what each of the checks are doing:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">CandidateInvocation<span class=\"token punctuation\">?</span></span> <span class=\"token function\">InterceptorTransform</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">GeneratorSyntaxContext</span> ctx<span class=\"token punctuation\">,</span> <span class=\"token class-name\">CancellationToken</span> ct<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Is this an instance method invocation? (we know it must be due to the predicate check, but play it safe)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">.</span>Node <span class=\"token keyword\">is</span> <span class=\"token class-name\">InvocationExpressionSyntax</span> <span class=\"token punctuation\">{</span>Expression<span class=\"token punctuation\">:</span> MemberAccessExpressionSyntax <span class=\"token punctuation\">{</span>Name<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span> nameSyntax<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span> invocation\n        <span class=\"token comment\">// Get the semantic definition of the method invocation</span>\n        <span class=\"token operator\">&amp;&amp;</span> ctx<span class=\"token punctuation\">.</span>SemanticModel<span class=\"token punctuation\">.</span><span class=\"token function\">GetOperation</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">.</span>Node<span class=\"token punctuation\">,</span> ct<span class=\"token punctuation\">)</span> <span class=\"token keyword\">is</span> <span class=\"token class-name\">IInvocationOperation</span> targetOperation\n        <span class=\"token comment\">// This is the main check - is the method a ToString invocation on System.Enum.ToString()?</span>\n        <span class=\"token operator\">&amp;&amp;</span> targetOperation<span class=\"token punctuation\">.</span>TargetMethod <span class=\"token keyword\">is</span> <span class=\"token punctuation\">{</span>Name <span class=\"token punctuation\">:</span> <span class=\"token string\">\"ToString\"</span><span class=\"token punctuation\">,</span> <span class=\"token named-parameter punctuation\">ContainingType</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>Name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Enum\"</span><span class=\"token punctuation\">,</span> <span class=\"token named-parameter punctuation\">ContainingNamespace</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>Name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"System\"</span><span class=\"token punctuation\">,</span> ContainingNamespace<span class=\"token punctuation\">.</span>IsGlobalNamespace<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">// Grab the Type of the enum on which this is being invoked </span>\n        <span class=\"token operator\">&amp;&amp;</span> targetOperation<span class=\"token punctuation\">.</span>Instance<span class=\"token punctuation\">?.</span>Type <span class=\"token keyword\">is</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span> type\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// If we get to here, we know we want to generate an interceptor,</span>\n        <span class=\"token comment\">// so use the experimental GetInterceptableLocation() API to get the data</span>\n        <span class=\"token comment\">// we need. This returns null if the location is not interceptable, but</span>\n        <span class=\"token comment\">// should never be non-null for this example.</span>\n<span class=\"token preprocessor property\">#<span class=\"token directive keyword\">pragma</span> warning disable RSEXPERIMENTAL002 </span><span class=\"token comment\">// / Experimental interceptable location API</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">.</span>SemanticModel<span class=\"token punctuation\">.</span><span class=\"token function\">GetInterceptableLocation</span><span class=\"token punctuation\">(</span>invocation<span class=\"token punctuation\">)</span> <span class=\"token keyword\">is</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span> location<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// Return the location details and the full type details</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">CandidateInvocation</span><span class=\"token punctuation\">(</span>location<span class=\"token punctuation\">,</span> type<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n<span class=\"token preprocessor property\">#<span class=\"token directive keyword\">pragma</span> warning restore RSEXPERIMENTAL002</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// Not an interceptor location we're interested in </span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Record for holding the interception details</span>\n<span class=\"token preprocessor property\">#<span class=\"token directive keyword\">pragma</span> warning disable RSEXPERIMENTAL002 </span><span class=\"token comment\">// / Experimental interceptable location API</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">record</span> <span class=\"token class-name\">CandidateInvocation</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">InterceptableLocation</span> Location<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> EnumName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token preprocessor property\">#<span class=\"token directive keyword\">pragma</span> warning restore RSEXPERIMENTAL002</span>\n</code></pre> <p>The <code>GetInterceptableLocation()</code> API is currently (as of the .NET 9.0.101 SDK and 4.12.0 of the <a href=\"https://www.nuget.org/packages/Microsoft.CodeAnalysis.CSharp\">Microsoft.CodeAnalysis.CSharp</a>) marked as experimental, so you need to explicitly acknowledge that using <code>#pragma</code> as in the code above.</p> <blockquote> <p>This will no longer be required soon, as <a href=\"https://github.com/dotnet/roslyn/pull/76312\">the interceptors feature has recently been marked stable</a>, and the <code>[Experimental]</code> attribute has been removed! 🎉</p> </blockquote> <p>The <code>GetInterceptableLocation()</code> method returns an instance of the <code>InterceptableLocation</code> class, which encodes the important <code>version</code> and <code>data</code> values we need to use to render the <code>[InterceptsLocation]</code> attribute.</p> <p>Going back to our source generator, now all that remains is to generate our final code. Whether you need to combine the locations with other data extracted from the source generator depends on exactly what you're trying to generate. For simplicity in this post, I've hardcoded most of the details that are unrelated to the interceptor but you can find <a href=\"https://github.com/andrewlock/NetEscapades.EnumGenerators/blob/main/src/NetEscapades.EnumGenerators/EnumGenerator.cs\">the full details on GitHub</a> if you prefer.</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token comment\">// Reproduced from above</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> locations <span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span>SyntaxProvider\n    <span class=\"token punctuation\">.</span><span class=\"token function\">CreateSyntaxProvider</span><span class=\"token punctuation\">(</span>\n        <span class=\"token named-parameter punctuation\">predicate</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">static</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">,</span> _<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">InterceptorPredicate</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token named-parameter punctuation\">transform</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">static</span> <span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> ct<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">InterceptorTransform</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> ct<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">Where</span><span class=\"token punctuation\">(</span>candidate <span class=\"token operator\">=&gt;</span> candidate <span class=\"token keyword\">is</span> <span class=\"token keyword\">not</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Output the interceptor code</span>\ncontext<span class=\"token punctuation\">.</span><span class=\"token function\">RegisterSourceOutput</span><span class=\"token punctuation\">(</span>enumInterceptions<span class=\"token punctuation\">,</span> ExecuteInterceptors<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">ExecuteInterceptors</span><span class=\"token punctuation\">(</span>\n    <span class=\"token class-name\">SourceProductionContext</span> context<span class=\"token punctuation\">,</span>\n    <span class=\"token class-name\">ImmutableArray<span class=\"token punctuation\">&lt;</span>CandidateInvocation<span class=\"token punctuation\">&gt;</span></span> toIntercept<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> sb <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">StringBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// group by the target enum.</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> grouped <span class=\"token operator\">=</span> toIntercept<span class=\"token punctuation\">.</span><span class=\"token function\">GroupBy</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">=&gt;</span> x<span class=\"token punctuation\">.</span>EnumName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> grouping <span class=\"token keyword\">in</span> grouped<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> enumType <span class=\"token operator\">=</span> grouping<span class=\"token punctuation\">.</span>Key<span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// Add the InterceptsLocationAttribute to the generated file,</span>\n        <span class=\"token comment\">// along with the start of the interceptor</span>\n        sb<span class=\"token punctuation\">.</span><span class=\"token function\">Append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span>\"\n                    <span class=\"token preprocessor property\">#<span class=\"token directive keyword\">nullable</span> enable</span>\n                    <span class=\"token keyword\">namespace</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Runtime<span class=\"token punctuation\">.</span>CompilerServices</span>\n                    <span class=\"token punctuation\">{</span>\n                        <span class=\"token punctuation\">[</span><span class=\"token keyword\">global</span><span class=\"token punctuation\">::</span>System<span class=\"token punctuation\">.</span>Diagnostics<span class=\"token punctuation\">.</span><span class=\"token function\">Conditional</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"DEBUG\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n                        <span class=\"token punctuation\">[</span><span class=\"token keyword\">global</span><span class=\"token punctuation\">::</span>System<span class=\"token punctuation\">.</span><span class=\"token function\">AttributeUsage</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">global</span><span class=\"token punctuation\">::</span>System<span class=\"token punctuation\">.</span>AttributeTargets<span class=\"token punctuation\">.</span>Method<span class=\"token punctuation\">,</span> AllowMultiple <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n                        <span class=\"token keyword\">sealed</span> file <span class=\"token keyword\">class</span> <span class=\"token class-name\">InterceptsLocationAttribute</span> <span class=\"token punctuation\">:</span> <span class=\"token keyword\">global</span><span class=\"token punctuation\">::</span>System<span class=\"token punctuation\">.</span>Attribute\n                        <span class=\"token punctuation\">{</span>\n                            <span class=\"token keyword\">public</span> <span class=\"token function\">InterceptsLocationAttribute</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> version<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> data<span class=\"token punctuation\">)</span>\n                            <span class=\"token punctuation\">{</span>\n                                _ <span class=\"token operator\">=</span> version<span class=\"token punctuation\">;</span>\n                                _ <span class=\"token operator\">=</span> data<span class=\"token punctuation\">;</span>\n                            <span class=\"token punctuation\">}</span>\n                        <span class=\"token punctuation\">}</span>\n                    <span class=\"token punctuation\">}</span>\n                    \n                    <span class=\"token keyword\">namespace</span> <span class=\"token namespace\">NetEscapades<span class=\"token punctuation\">.</span>EnumGenerators</span>\n                    <span class=\"token punctuation\">{</span>\n                        <span class=\"token keyword\">static</span> file <span class=\"token keyword\">class</span> <span class=\"token class-name\">EnumInterceptors</span>\n                        <span class=\"token punctuation\">{</span>\n                    <span class=\"token string\">\"\"</span>\"<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n        <span class=\"token comment\">// Generate the [InterceptsLocation] attributes, using the InterceptableLocation</span>\n        <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> invocation <span class=\"token keyword\">in</span> grouping<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> location <span class=\"token operator\">=</span> invocation<span class=\"token punctuation\">.</span>Location<span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> version <span class=\"token operator\">=</span> location<span class=\"token punctuation\">.</span>Version<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> data <span class=\"token operator\">=</span> location<span class=\"token punctuation\">.</span>Data<span class=\"token punctuation\">;</span> <span class=\"token comment\">// e.g. yxKJBEhzkHdnMhHGENjk8qgBAABQcm9ncmFtLmNz</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> displayLocation <span class=\"token operator\">=</span> location<span class=\"token punctuation\">.</span><span class=\"token function\">GetDisplayLocation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// e.g. Program.cs(19,32)</span>\n            sb<span class=\"token punctuation\">.</span><span class=\"token function\">AppendLine</span><span class=\"token punctuation\">(</span>\n                <span class=\"token interpolation-string\"><span class=\"token string\">$\"\"</span></span>\"        <span class=\"token punctuation\">[</span><span class=\"token keyword\">global</span><span class=\"token punctuation\">::</span>System<span class=\"token punctuation\">.</span>Runtime<span class=\"token punctuation\">.</span>CompilerServices<span class=\"token punctuation\">.</span><span class=\"token function\">InterceptsLocation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>version<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"{data}\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">// {displayLocation}\"\"\");</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">// Add the interceptor implementation</span>\n        sb<span class=\"token punctuation\">.</span><span class=\"token function\">AppendLine</span><span class=\"token punctuation\">(</span>$<span class=\"token interpolation-string\"><span class=\"token string\">$\"\"</span></span>\"\n                            <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> <span class=\"token function\">MyEnumExtensionsToString</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token keyword\">global</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">System<span class=\"token punctuation\">.</span>Enum</span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">)</span>\n                                <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">global</span><span class=\"token punctuation\">::</span>MyTestNameSpace<span class=\"token punctuation\">.</span>MyEnumExtensions<span class=\"token punctuation\">.</span><span class=\"token function\">ToStringFast</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>enumType<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token punctuation\">}</span>\n                    <span class=\"token punctuation\">}</span>\n                    <span class=\"token string\">\"\"</span>\"<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// Add the source to the compilation</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> contents <span class=\"token operator\">=</span> sb<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> filename <span class=\"token operator\">=</span> <span class=\"token interpolation-string\"><span class=\"token string\">$\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">enumType</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">_Interception.g.cs\"</span></span><span class=\"token punctuation\">;</span>\n        context<span class=\"token punctuation\">.</span><span class=\"token function\">AddSource</span><span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">,</span> SourceText<span class=\"token punctuation\">.</span><span class=\"token function\">From</span><span class=\"token punctuation\">(</span>contents<span class=\"token punctuation\">,</span> Encoding<span class=\"token punctuation\">.</span>UTF8<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        sb<span class=\"token punctuation\">.</span><span class=\"token function\">Clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>And that's all there is to the mechanics of interceptors. I've glossed over some complexities such as actually <em>enabling</em> interceptors and how to gracefully handle an insufficient SDK version, but I'll dig into those in later posts.</p> <p>Before I close this post, I'll quickly address the \"experimental\" part of interceptors.</p> <h2 id=\"what-is-the-status-of-the-interceptors-feature-\" class=\"heading-with-anchor\"><a href=\"#what-is-the-status-of-the-interceptors-feature-\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">What is the status of the interceptors feature?</a></h2> <p>When I recently <a href=\"https://bsky.app/profile/andrewlock.bsky.social/post/3la7xn745a72y\">announced</a> preview support for <a href=\"/recent-updates-for-netescapades-enumgenerators-interceptors/\">interceptors in NetEscapades.EnumGenerators</a>, <a href=\"https://bsky.app/profile/jasonbock.net\">Jason Bock</a> <a href=\"https://bsky.app/profile/jasonbock.net/post/3lalxlvnmjs2r\">pointed out that,</a> at that point, interceptors were still described as experimental, and not listed as an official feature.</p> <p>However, <a href=\"https://github.com/dotnet/roslyn/pull/76312\">a recent PR</a> explicitly updated the docs. Specifically, that PR:</p> <ul><li><a href=\"https://github.com/dotnet/roslyn/blob/98ea496177bc8e607dbf454abd6b5a5e4678aed2/docs/features/interceptors.md\">Updates the docs</a> to describe the feature as stable in .NET 9.0.2xx SDK and later.</li> <li>Removed the <code>[Experimental]</code> attribute from the APIs.</li> <li>Marked the old <code>[InterceptsLocation(path, line, column)]</code> API as officially deprecated, with the intention of removing them later.</li></ul> <p>On that basis, I think it's now safe to look into interceptors more broadly. Interceptors have been used both <a href=\"https://github.com/dotnet/aspnetcore/issues/55152\">by ASP.NET Core</a> and by <a href=\"https://github.com/dotnet/runtime/issues/101079\">the configuration binder source generator</a> to provide support for AOT, so they've been tested in real production scenarios too.</p> <p>That said, the waters are still a <em>little</em> murky. The <a href=\"https://github.com/dotnet/csharplang/blob/410cfaed5528d1b7e92a25cc15993017912b6afd/Language-Version-History.md\">C# features list</a> still doesn't include interceptors as a feature yet, though I suspect that's just an oversight. You also still need to \"opt-in\" to individual interceptors by adding the namespace of the interceptor in the <code>&lt;InterceptorsNamespaces&gt;</code> MSBuild property. There doesn't seem to be any intention to change that behaviour, as it provides an easy layer of control over any interceptors added to your project.</p> <p>Taking all that into account, interceptors are now considered stable, so I think it's worth looking into and understanding them. There may not be as many use cases for them as there are for source generators in general, but they provide interesting opportunities for some scenarios.</p> <h2 id=\"summary\" class=\"heading-with-anchor\"><a href=\"#summary\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Summary</a></h2> <p>In this post I described the interceptor support introduced in the .NET 8 and 9 SDKs. Interceptors can replace a method call with another at compile time, which is particularly useful for some scenarios like Ahead Of Time compilation. I showed how the APIs have changed recently, and how you can use these new APIs to create an interceptor using a source generator. In the .NET 9.0.2xx SDK interceptors are considered a stable language feature, so it's worth looking into to see if they can solve any use cases that can't be handled another way.</p> ",
    "sanitized": "This is the eleven post in the series: Creating a source generator.  Part 1 - Creating an incremental generatorPart 2 - Testing an incremental generator with snapshot testingPart 3 - Integration testing and NuGet packagingPart 4 - Customising generated code with marker attributesPart 5 - Finding a type declaration's namespace and type hierarchyPart 6 - Saving source generator output in source controlPart 7 - Solving the source generator 'marker attribute' problem - Part 1Part 8 - Solving the source generator 'marker attribute' problem - Part 2Part 9 - Avoiding performance pitfalls in incremental generatorsPart 10 - Testing your incremental generator pipeline outputs are cacheablePart 11 - Implementing an interceptor with a source generator (this post) Part 12 - Reading compilation options and the C# version in source generatorsPart 13 - Accessing MSBuild properties and user configuration from source generatorsPart 14 - Supporting multiple .NET SDK versions in a source generatorIn this post I describe how you can use the interceptor support available in the .NET 8 and .NET 9 SDK to replace method calls at build time. The APIs have evolved a little since they were first introduced in .NET 8, so in this post I show how to use the new APIs with a source generator.  This post is a follow on from a recent post in which I described the preview interceptor support I added to my NetEscapades.EnumGenerators NuGet package.  I start by explaining what interceptors are, why they can be useful, and scenarios where they're already being used. I then show how the new interceptor APIs work, and how you can use them in your own source generators. What are interceptors, and why do we need them? Interceptors are an interesting new feature, first introduced in experimental form in C#12, that allow you to replace (or \"intercept\") a method call in your application with an alternative method. When your app is compiled, the compiler automatically \"swaps out\" the call to the original method with your substitute. An obvious question here is why would you want to do that? Why not just call the substitute method directly? In general, that is the simplest solution, but in reality that may not be possible. There's a lot of existing code written, and asking everyone to update their code to use new APIs isn't necessarily feasible. But why would it be so urgent to use new APIs? The main reason is ahead-of-time compilation (AOT) which I've discussed several times in a previous series. Interceptors aren't specifically for AOT, but it's one of the clearest use cases. By using interceptors you could take code which previously wasn't AOT friendly, and replace it with an AOT-friendly source-generated version. Customer's don't need to change their code, the source generator just automatically \"upgrades\" the method calls to use source-generated versions of the APIs that are compatible with AOT instead. If that sounds familiar, it's because that's exactly what the configuration source generator and existing minimal API source generator do in .NET 8 and later. Interceptors are particularly interesting because they're the one case where source generators can be used to change existing code. Normally source generators can only add additional code.  For a video discussion of interceptors, there was a great discussion a year ago on the .NET community standup a year or so ago. It's a little out of date now, but I still recommend it.  That's all quite abstract, so in the next section I'll show a very simple example of an interceptor, so that you can understand the mechanics of how they work. An interceptor in practice To demonstrate how interceptors work, I'll show a small example using my NetEscapades.EnumGenerators NuGet package. This package provides an [EnumExtensions] attribute that you can apply to an enum. When enabled, it can also generate interceptors for calls to ToString(). The original example without interceptors Lets say you have the following simple program. It defines an enum, MyEnum, which is decorated with the [EnumExtensions] attribute. The program itself simply creates an instance of the enum, and calls ToString() on it: using NetEscapades.EnumGenerators;\n\nvar value = MyEnum.First;\nConsole.WriteLine(value.ToString());\n\n[EnumExtensions]\ninternal enum MyEnum\n{\n    First,\n    Second,\n    Third,\n}\n Without an interceptor, this code calls the ToString() method defined on the base Enum type. This method is historically surprisingly slow (more on that later), so NetEscapades.EnumGenerators provides an alternative, faster, implementation: internal static partial class MyEnumExtensions\n{\n    public static string ToStringFast(this MyEnum value)\n        => value switch\n        {\n            MyEnum.First => nameof(MyEnum.First),\n            MyEnum.Second => nameof(MyEnum.Second),\n            _ => value.ToString(),\n        };\n}\n This implementation is significantly faster, and allocates less than the runtime's ToString() implementation: BenchmarkDotNet=v0.13.1, OS=Windows 10.0.19042.1348 (20H2/October2020Update)\nIntel Core i7-7500U CPU 2.70GHz (Kaby Lake), 1 CPU, 4 logical and 2 physical cores\n  DefaultJob : .NET Framework 4.8 (4.8.4420.0), X64 RyuJIT\n.NET SDK=6.0.100\n  DefaultJob : .NET 6.0.0 (6.0.21.52210), X64 RyuJIT\n MethodFXMeanErrorStdDevRatioGen 0AllocatedToStringnet48578.276ns3.3109ns3.0970ns1.0000.045896 BToStringFastnet483.091ns0.0567ns0.0443ns0.005--ToStringnet6.017.9850ns0.1230ns0.1151ns1.0000.011524 BToStringFastnet6.00.1212ns0.0225ns0.0199ns0.007-- The obvious downside is that you have to remember to use the ToStringFast() method, with interceptors we can automate that instead! Enabling interceptor support If you enable the interceptor support, the NetEscapades.EnumGenerators library doesn't just emit extension methods, it also emits interceptor code.  Note that to use the interceptor support described in this post, you must be building with the 8.0.4xx SDK (or 9.0.x SDK) at a minimum. Earlier versions of the SDK include now-deprecated APIs, but only the later SDKs include the APIs used in this post.  The NetEscapades.EnumGenerators library generates interceptor code similar to the following: static file class EnumInterceptors\n{\n    [InterceptsLocation(version: 1, data: \"yxKJBEhzkHdnMhHGENjk8qgBAABQcm9ncmFtLmNz\")] // Program.cs(4,24)\n    public static string MyEnumExtensionsToString(this Enum value)\n        => MyEnumExtensions.ToStringFast((MyEnum)value);\n}\n The [InterceptsLocation] attribute is what makes the MyEnumExtensionsToString() method an interceptor. At compile time, the compiler replaces the call to ToString() with the call to MyEnumExtensionsToString(), something like the following: Console.WriteLine(EnumInterceptors.MyEnumExtensionsToString(value));\n The library automatically detects all the calls to MyEnum.ToString() and adds an [InterceptsLocation] attribute for each instance. That means you don't have to remember to call ToStringFast() yourself, you can just let the interceptor handle it itself! Emitting the InterceptsLocationAttribute definition The compiler looks for the [InterceptsLocation] attribute to identify interceptors, but the library itself also emits the [InterceptsLocation] attribute, rather than relying on the attribute to be defined in the runtime. This is a similar pattern as used for many other compiler features, as it does not tie the feature to a specific runtime version. When generating the enum interceptors, the NetEscapades.EnumGenerators library also generates the [InterceptsLocation] attribute definition itself, as shown below: using System;\nusing System.Diagnostics;\n\n#nullable enable\nnamespace System.Runtime.CompilerServices\n{\n    // this type is needed by the compiler to implement interceptors,\n    // it doesn't need to come from the runtime itself\n\n    [Conditional(\"DEBUG\")] // not needed post-build, so can evaporate it\n    [AttributeUsage(AttributeTargets.Method, AllowMultiple = true)]\n    sealed file class InterceptsLocationAttribute : Attribute\n    {\n        public InterceptsLocationAttribute(int version, string data)\n        {\n            _ = version;\n            _ = data;\n        }\n    }\n}\n The attribute is generated above as a file scoped attribute (as suggested in the docs), so that multiple generators can generate it separately if necessary. The arguments to the [InterceptsLocation] attribute are: version: A version number defining the encoding. Only version 1 is currently defined, but the compiler may introduce new encodings in the future data: An encoding defining the location to intercept, that's not intended to be human-readable. The version 1 encoding is a base64-encoding of the following: 16 byte xxHash128 content checksum of the file containing the intercepted call. int32 in little-endian format for the position (i.e. SyntaxNode.Position) of the call in syntax. utf-8 string data containing a file name, used for error reporting.   Note that these argument is a big change from the previous experimental interceptor [InterceptsLocation] attribute, which used the human-readable values [InterceptsLocation(path, line, column)]. This path-based API has been deprecated, and will be removed in the future. This also means interceptors are only really feasible for use with source generators now.  If it looks difficult to generate the data argument correctly, then don't worry, you don't have to! Instead, there's a Roslyn API you can use to generate the required data value from a source generator. Implementing an interceptor in a source generator Now we've covered all the background, I'll describe how I implemented the interceptor support in the NetEscapades.EnumGenerators source generator. I'm going to assume you're familiar with source generators in general (see the earlier posts in this series if not!), and will just focus on the interceptor part. Broadly speaking, there are three things we need to do: Find the locations we want to intercept Extract an InterceptableLocation instance for each location Use the InterceptableLocation (and other information) to generate the interceptor target and [InterceptsLocation] attribute. For the first part we use the SyntaxValueProvider.CreateSyntaxProvider() method and pass in \"predicate\" and \"transform\" functions: var locations = context.SyntaxProvider\n    .CreateSyntaxProvider(\n        predicate: static (node, _) => InterceptorPredicate(node),\n        transform: static (context, ct) => InterceptorTransform(context, ct))\n    .Where(candidate => candidate is not null);\n The predicate runs for every change in syntax, so we do a lightweight check using pattern matching to see if we're in a ToString() method call:     private static bool InterceptorPredicate(SyntaxNode node) =>\n        node is InvocationExpressionSyntax { \n            Expression: MemberAccessExpressionSyntax {\n                Name.Identifier.ValueText: \"ToString\"\n            }\n        };\n This includes more instances than we actually want, as it includes all calls to ToString(), but the important thing is to significantly reduce the number of nodes we investigate in the next stage. In the InterceptorTransform method we do the full check, to make sure we are only looking at Enum.ToString() cases. The code below uses a bunch of pattern matching and examining of the semantic model to check that the invocation is an Enum.ToString() call, and if so calls GetInterceptableLocation() to get the details we need. I've added comments to explain what each of the checks are doing: private static CandidateInvocation? InterceptorTransform(GeneratorSyntaxContext ctx, CancellationToken ct)\n{\n    // Is this an instance method invocation? (we know it must be due to the predicate check, but play it safe)\n    if (ctx.Node is InvocationExpressionSyntax {Expression: MemberAccessExpressionSyntax {Name: { } nameSyntax}} invocation\n        // Get the semantic definition of the method invocation\n        && ctx.SemanticModel.GetOperation(ctx.Node, ct) is IInvocationOperation targetOperation\n        // This is the main check - is the method a ToString invocation on System.Enum.ToString()?\n        && targetOperation.TargetMethod is {Name : \"ToString\", ContainingType: {Name: \"Enum\", ContainingNamespace: {Name: \"System\", ContainingNamespace.IsGlobalNamespace: true}}}\n        // Grab the Type of the enum on which this is being invoked \n        && targetOperation.Instance?.Type is { } type\n    {\n        // If we get to here, we know we want to generate an interceptor,\n        // so use the experimental GetInterceptableLocation() API to get the data\n        // we need. This returns null if the location is not interceptable, but\n        // should never be non-null for this example.\n#pragma warning disable RSEXPERIMENTAL002 // / Experimental interceptable location API\n        if (ctx.SemanticModel.GetInterceptableLocation(invocation) is { } location)\n        {\n            // Return the location details and the full type details\n            return new CandidateInvocation(location, type.ToString());\n        }\n#pragma warning restore RSEXPERIMENTAL002\n    }\n\n    // Not an interceptor location we're interested in \n    return null;\n}\n\n// Record for holding the interception details\n#pragma warning disable RSEXPERIMENTAL002 // / Experimental interceptable location API\npublic record CandidateInvocation(InterceptableLocation Location, string EnumName);\n#pragma warning restore RSEXPERIMENTAL002\n The GetInterceptableLocation() API is currently (as of the .NET 9.0.101 SDK and 4.12.0 of the Microsoft.CodeAnalysis.CSharp) marked as experimental, so you need to explicitly acknowledge that using #pragma as in the code above.  This will no longer be required soon, as the interceptors feature has recently been marked stable, and the [Experimental] attribute has been removed! 🎉  The GetInterceptableLocation() method returns an instance of the InterceptableLocation class, which encodes the important version and data values we need to use to render the [InterceptsLocation] attribute. Going back to our source generator, now all that remains is to generate our final code. Whether you need to combine the locations with other data extracted from the source generator depends on exactly what you're trying to generate. For simplicity in this post, I've hardcoded most of the details that are unrelated to the interceptor but you can find the full details on GitHub if you prefer. // Reproduced from above\nvar locations = context.SyntaxProvider\n    .CreateSyntaxProvider(\n        predicate: static (node, _) => InterceptorPredicate(node),\n        transform: static (context, ct) => InterceptorTransform(context, ct))\n    .Where(candidate => candidate is not null);\n\n// Output the interceptor code\ncontext.RegisterSourceOutput(enumInterceptions, ExecuteInterceptors);\n\nprivate static void ExecuteInterceptors(\n    SourceProductionContext context,\n    ImmutableArray<CandidateInvocation> toIntercept)\n{\n    var sb = new StringBuilder();\n\n    // group by the target enum.\n    var grouped = toIntercept.GroupBy(x => x.EnumName);\n    foreach (var grouping in grouped)\n    {\n        string enumType = grouping.Key;\n\n        // Add the InterceptsLocationAttribute to the generated file,\n        // along with the start of the interceptor\n        sb.Append(\"\"\"\n                    #nullable enable\n                    namespace System.Runtime.CompilerServices\n                    {\n                        [global::System.Diagnostics.Conditional(\"DEBUG\")]\n                        [global::System.AttributeUsage(global::System.AttributeTargets.Method, AllowMultiple = true)]\n                        sealed file class InterceptsLocationAttribute : global::System.Attribute\n                        {\n                            public InterceptsLocationAttribute(int version, string data)\n                            {\n                                _ = version;\n                                _ = data;\n                            }\n                        }\n                    }\n                    \n                    namespace NetEscapades.EnumGenerators\n                    {\n                        static file class EnumInterceptors\n                        {\n                    \"\"\");\n\n\n        // Generate the [InterceptsLocation] attributes, using the InterceptableLocation\n        foreach (var invocation in grouping)\n        {\n            var location = invocation.Location;\n            int version = location.Version; // 1\n            string data = location.Data; // e.g. yxKJBEhzkHdnMhHGENjk8qgBAABQcm9ncmFtLmNz\n            string displayLocation = location.GetDisplayLocation(); // e.g. Program.cs(19,32)\n            sb.AppendLine(\n                $\"\"\"        [global::System.Runtime.CompilerServices.InterceptsLocation({version}, \"{data}\")] // {displayLocation}\"\"\");\n        }\n\n        // Add the interceptor implementation\n        sb.AppendLine($$\"\"\"\n                            public static string MyEnumExtensionsToString(this global::System.Enum value)\n                                => global::MyTestNameSpace.MyEnumExtensions.ToStringFast(({{enumType}})value);\n                        }\n                    }\n                    \"\"\");\n\n        // Add the source to the compilation\n        string contents = sb.ToString();\n        string filename = $\"{enumType}_Interception.g.cs\";\n        context.AddSource(filename, SourceText.From(contents, Encoding.UTF8));\n        sb.Clear();\n    }\n}\n And that's all there is to the mechanics of interceptors. I've glossed over some complexities such as actually enabling interceptors and how to gracefully handle an insufficient SDK version, but I'll dig into those in later posts. Before I close this post, I'll quickly address the \"experimental\" part of interceptors. What is the status of the interceptors feature? When I recently announced preview support for interceptors in NetEscapades.EnumGenerators, Jason Bock pointed out that, at that point, interceptors were still described as experimental, and not listed as an official feature. However, a recent PR explicitly updated the docs. Specifically, that PR: Updates the docs to describe the feature as stable in .NET 9.0.2xx SDK and later. Removed the [Experimental] attribute from the APIs. Marked the old [InterceptsLocation(path, line, column)] API as officially deprecated, with the intention of removing them later. On that basis, I think it's now safe to look into interceptors more broadly. Interceptors have been used both by ASP.NET Core and by the configuration binder source generator to provide support for AOT, so they've been tested in real production scenarios too. That said, the waters are still a little murky. The C# features list still doesn't include interceptors as a feature yet, though I suspect that's just an oversight. You also still need to \"opt-in\" to individual interceptors by adding the namespace of the interceptor in the <InterceptorsNamespaces> MSBuild property. There doesn't seem to be any intention to change that behaviour, as it provides an easy layer of control over any interceptors added to your project. Taking all that into account, interceptors are now considered stable, so I think it's worth looking into and understanding them. There may not be as many use cases for them as there are for source generators in general, but they provide interesting opportunities for some scenarios. Summary In this post I described the interceptor support introduced in the .NET 8 and 9 SDKs. Interceptors can replace a method call with another at compile time, which is particularly useful for some scenarios like Ahead Of Time compilation. I showed how the APIs have changed recently, and how you can use these new APIs to create an interceptor using a source generator. In the .NET 9.0.2xx SDK interceptors are considered a stable language feature, so it's worth looking into to see if they can solve any use cases that can't be handled another way."
  },
  {
    "itemId": "https://andrewlock.net/building-latex-projects-on-windows-easily-with-docker/",
    "raw": "<img src=\"https://andrewlock.net/content/images/2024/latex_windows.webp\" /><p>In this short post I describe how I build LaTeX projects on a Windows machine by using Docker. There's nothing particularly novel or exciting about this, someone just asked me about it recently so this is effectively my reply!</p> <h2 id=\"typesetting-documents-with-latex\" class=\"heading-with-anchor\"><a href=\"#typesetting-documents-with-latex\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Typesetting documents with LaTeX</a></h2> <p>I love using markdown for writing documentation, blog posts, <a href=\"https://obsidian.md/\">notes</a>, or anything I can. Even with a very simple editor, you can have something that roughly <em>looks</em> like the markup that you want to produce. But markdown is generally tied closely to HTML (though this is not strictly required), and sometimes you want or need to produce a standalone document, like a PDF, for which HTML isn't generally well suited.</p> <p>For those rare cases where I want to produce a nice looking document, such as a CV, I fallback to <a href=\"https://en.wikipedia.org/wiki/LaTeX\">LaTeX</a>. LaTeX is a markup language that is explicitly about typesetting <em>documents</em> so it cares deeply about pages and margins, which contrasts with HTML markup. You then use a <a href=\"https://en.wikipedia.org/wiki/LaTeX\">TeX</a> distribution to render the LaTeX document as a PDF (or other format).</p> <blockquote> <p>LaTeX performs the same general function as <a href=\"https://en.wikipedia.org/wiki/WYSIWYG\">WYSIWYG</a> editors like Google Docs or Microsoft Word. However, LaTeX is <em>not</em> WYSIWYG (requiring an exxplicit rendering step) which can make it harder to use in general, but this all can enable broader optimisations and produce better looking documents overall.</p> </blockquote> <p>LaTeX is very common in the scientific community in particular, with papers often being written in LaTeX. It is also particularly good for writing large documents, which is why I used it to write my PhD thesis. However, that was years ago. When I came to work with LaTeX again recently, I was reminded that working with it on Windows was not obvious.</p> <h2 id=\"rendering-latex-on-windows\" class=\"heading-with-anchor\"><a href=\"#rendering-latex-on-windows\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Rendering LaTeX on Windows</a></h2> <p>LaTeX comes very much from the *Nix world, which means that it's very open, and available, but also that there are thousand different \"suggested\" approaches to rending LaTeX documents. For people who want choice, or who care about the little details of each distribution, that's great. For people who just want to \"install something\" and get on with it, getting started can be confusing 😅</p> <blockquote> <p>Just to be clear, I am very much a beginner with LaTeX, despite having used it a lot 15 years ago. I still find it has a very steep learning curve (softened somewhat these days by StackOverflow and ChatGPT), but there are some things it just does better than WYSWIG editors, so I lean on it where I can now and again.</p> </blockquote> <p>When I was working on my PhD, I'm pretty sure I used <a href=\"https://www.texniccenter.org/\">TeXnicCenter</a>, but it's been a decade since there were any updates there, and you need to manage your own TeX distribution (e.g. MiKTeX) directly if I understand correctly. <a href=\"https://www.reddit.com/r/LaTeX/comments/sle89v/preferred_latex_editor/\">Other common suggestions</a> include <a href=\"https://www.xm1math.net/texmaker/\">Texmaker</a>, <a href=\"https://www.texstudio.org/\">TeXstudio</a>, or just to use VS Code, but these all still require you manage the TeX distribution yourself. Unfortunately I have bad memories of manually managing MiKTeX on Windows and really wanted to avoid that if I could help it.</p> <p>For a long while, I was using <a href=\"https://overleaf.com/\">Overleaf</a>, an online-only platform, for occasionally rendering LaTeX documents, and it worked very well for my needs. I was only rendering relatively short documents and didn't particularly need a lot of IDE or collaborative features.</p> <p><img src=\"/content/images/2024/overleaf.png\" alt=\"Overleaf\"></p> <p>Unfortunately, Overleaf made the individual free-plan basically unusable (rendering a two page document was \"too complex\"), and I couldn't justify paying a subscription for something I only used a couple of times a year.</p> <p>Using Docker seemed like the obvious choice to solve my issue: I could use VS Code as my editor (it has built-in syntax support for LaTeX), and then rending the documents using a self-contained distribution.</p> <p>Overleaf itself <em>is</em> open source, and provides Docker images for running the community edition. I looked into this initially, but it was overkill for what I needed: I didn't need multiple accounts and project storage in the Overleaf implementation itself, I just needed the <em>rendering</em> part.</p> <h2 id=\"building-latex-with-docker-using-blang-latex\" class=\"heading-with-anchor\"><a href=\"#building-latex-with-docker-using-blang-latex\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Building LaTeX with Docker using <code>blang/latex</code></a></h2> <p>Eventually I found <a href=\"https://hub.docker.com/r/blang/latex\">the <code>blang/latex</code> docker images</a>, which do exactly what I want—an Ubuntu-based image, with everything you need to compile locally in docker. The <code>blang/latex</code> come in three different flavours:</p> <ul><li><code>blang/latex:ubuntu</code> (<a href=\"https://github.com/blang/latex-docker/blob/master/Dockerfile.ubuntu\">Dockerfile</a>)—Ubuntu TexLive distribution: Old but stable, most needed packages(3.9GB)</li> <li><code>blang/latex:ctanbasic</code> (<a href=\"https://github.com/blang/latex-docker/blob/master/Dockerfile.basic\">Dockerfile</a>)— CTAN TexLive Scheme-basic: Up-to-date, only basic packages, base for custom builds (500MB)</li> <li><code>blang/latex:ctanfull</code> (<a href=\"https://github.com/blang/latex-docker/blob/master/Dockerfile.full\">Dockerfile</a>)— CTAN TexLive Scheme-full: Up-to-date, all packages (5.6GB)</li></ul> <p>The more complete versions are obviously quite big images, but as I was only going to be pulling them once locally and running them repeatedly to build, I wasn't particularly worried about that. For simplicity I went with the <code>ctanfull</code> tag which contains the <em>full</em> set of <a href=\"http://mirror.ctan.org/systems/texlive/tlnet/archive\">CTAN packages</a>.</p> <p><a href=\"https://hub.docker.com/r/blang/latex\">The docker hub page</a> describes how you can use these images to build your LaTeX project, but I decided to go with something a bit different. I created two files in the root of my project.</p> <ul><li><code>build.ps1</code>—This script runs (or restarts) the docker <code>blang/latex</code> container.</li> <li><code>build.sh</code>—This simple script runs <em>inside</em> the docker container, and does the latex build.</li></ul> <p>The scrcipts themselves are <em>very</em> simple. First we have the <code>build.ps1</code> script:</p> <pre class=\"language-powershell\"><code class=\"language-powershell\"><span class=\"token comment\"># Try to start an existing container, if it exists</span>\ndocker <span class=\"token function\">start</span> <span class=\"token operator\">-</span>a <span class=\"token operator\">-</span>i <span class=\"token string\">\"latex-builder\"</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$LASTEXITCODE</span> <span class=\"token operator\">-ne</span> 0<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\"># The latex-builder image doesn't exist, so run it explicitly</span>\n  <span class=\"token variable\">$ROOT_DIR</span>=<span class=\"token string\">\"<span class=\"token variable\">$PSScriptRoot</span>\"</span>\n\n  docker run <span class=\"token operator\">-</span>it `\n    <span class=\"token operator\">--</span><span class=\"token function\">mount</span> <span class=\"token string\">\"type=bind,source=<span class=\"token variable\">$ROOT_DIR</span>,target=/data\"</span> `\n    <span class=\"token operator\">--</span>name <span class=\"token string\">\"latex-builder\"</span> `\n    blang/latex:ctanfull <span class=\"token operator\">/</span>bin/bash\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>This script attempts to start a docker container using the <code>blang/latex:ctanfull</code> image, using the name <code>latex-builder</code>, and attaches stdin/stdout/stderr. If the container already exists and is stopped, then this just restarts the same image and connects to the container. If the container with the name <code>latex-builder</code> <em>doesn't</em> exist, the script starts a new container, mounts the root directory inside the image at <code>/data</code>, and opens a <code>bash</code> shell.</p> <blockquote> <p>This doesn't <em>strictly</em> work as I would like, as depending on how you later exit a re-started container, the exit code may be non-null, which causes the script to (harmlessly) try to start a new container, fail, and show an error. It's not a big deal, but it's slightly annoying, and I'm sure I'm missing an obvious solution here!</p> </blockquote> <p>Once the container is running, you can build by running <code>.\\build.sh</code> inside the container. The <code>build.sh</code> script is specific to each project and looks something like this:</p> <pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token shebang important\">#!/bin/sh</span>\n\nlualatex <span class=\"token parameter variable\">--jobname</span><span class=\"token operator\">=</span><span class=\"token string\">\"My CV\"</span>  main.tex\n</code></pre> <p>This simple script runs lualatex to render the <code>main.tex</code> LaTeX document as a PDF. Thanks to mounting the directory, this appears on the \"Windows side\" automatically. I keep the docker container running in a window, iterate on the LaTeX files in an editor, and then when I want to see the changes, quickly flick to the terminal and run<code> build.sh</code> in the container. It's exactly the workflow I was hoping for.</p> <blockquote> <p>Note that you could also use <code>pdflatex</code> or <code>latexmk</code> instead of <code>lualatex</code> if you prefer, as described <a href=\"https://hub.docker.com/r/blang/latex\">in the docs</a> for <code>blang/latex</code>.</p> </blockquote> <h2 id=\"why-use-two-separate-files-\" class=\"heading-with-anchor\"><a href=\"#why-use-two-separate-files-\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Why use two separate files?</a></h2> <p>You might be wondering why I opted to keep the docker image container running, necessitating both a <code>build.ps1</code> <em>and</em> <code>build.sh</code> file? It's true that you <em>could</em> run everything all in one command. For example, you could combine the scripts above as follows:</p> <pre class=\"language-powershell\"><code class=\"language-powershell\"><span class=\"token variable\">$ROOT_DIR</span>=<span class=\"token string\">\"<span class=\"token variable\">$PSScriptRoot</span>\"</span>\n\ndocker run <span class=\"token operator\">-</span>it <span class=\"token operator\">--</span><span class=\"token function\">rm</span>`\n  <span class=\"token operator\">--</span><span class=\"token function\">mount</span> <span class=\"token string\">\"type=bind,source=<span class=\"token variable\">$ROOT_DIR</span>,target=/data\"</span> `\n  <span class=\"token operator\">--</span>name <span class=\"token string\">\"latex-builder\"</span> `\n  blang/latex:ctanfull `\n  lualatex <span class=\"token operator\">--</span>jobname=<span class=\"token string\">\"My CV\"</span>  main<span class=\"token punctuation\">.</span>tex\n</code></pre> <p>The problem with this approach is that it starts a new container every time. But when you first run <code>luatex</code> (and, I assume <code>pdflatex</code> and others), it performs some one-time setup, similar to the following</p> <pre class=\"language-bash\"><code class=\"language-bash\">root@67d3d81c4129:~<span class=\"token comment\"># ./build.sh</span>\nThis is LuaTeX, Version <span class=\"token number\">1.0</span>.4 <span class=\"token punctuation\">(</span>TeX Live <span class=\"token number\">2017</span><span class=\"token punctuation\">)</span>\n restricted system commands enabled.\n<span class=\"token punctuation\">(</span>./main.tex\nLaTeX2e <span class=\"token operator\">&lt;</span><span class=\"token number\">2017</span>-04-1<span class=\"token operator\"><span class=\"token file-descriptor important\">5</span>&gt;</span>\n<span class=\"token punctuation\">(</span>using cache: /usr/local/texlive/2017/texmf-var/luatex-cache/generic<span class=\"token punctuation\">)</span>\nluaotfload <span class=\"token operator\">|</span> main <span class=\"token builtin class-name\">:</span> initialization completed <span class=\"token keyword\">in</span> <span class=\"token number\">0.362</span> seconds\nBabel <span class=\"token operator\">&lt;</span><span class=\"token number\">3.1</span><span class=\"token operator\"><span class=\"token file-descriptor important\">6</span>&gt;</span> and hyphenation patterns <span class=\"token keyword\">for</span> <span class=\"token number\">1</span> language<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span> loaded.\n<span class=\"token punctuation\">(</span>./example.cls\nDocument Class: example <span class=\"token number\">2013</span>/02/09 v1.3.0 example class\n<span class=\"token punctuation\">(</span>/usr/local/texlive/2017/texmf-dist/tex/latex/base/size11.clo\nluaotfload <span class=\"token operator\">|</span> db <span class=\"token builtin class-name\">:</span> Font names database not found, generating new one.\nluaotfload <span class=\"token operator\">|</span> db <span class=\"token builtin class-name\">:</span> This can take several minutes<span class=\"token punctuation\">;</span> please be patient.\n</code></pre> <p>As you can see, on this \"first run\", <code>luatex</code> has to build the font-name database cache. On my old laptop this only takes 5-10s, but it's an annoying extra delay for the \"inner-loop\" experience, where the remainder of the build only takes a couple of seconds. By reusing an existing container we can skip that initialization entirely, and go straight to the build!</p> <p>That said, if you want to also have a build that runs in CI, then the one-shot approach obviously makes sense. This is effectively what the GitHub actions yml file below does, by calling <code>./build.sh</code> directly instead of starting a shell:</p> <pre class=\"language-yml\"><code class=\"language-yml\"><span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Build\n<span class=\"token key atrule\">on</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">push</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">branches</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">\"main\"</span> <span class=\"token punctuation\">]</span>\n  <span class=\"token key atrule\">pull_request</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">workflow_dispatch</span><span class=\"token punctuation\">:</span>\n\n<span class=\"token key atrule\">jobs</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">build</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">runs-on</span><span class=\"token punctuation\">:</span> ubuntu<span class=\"token punctuation\">-</span>latest\n    <span class=\"token key atrule\">steps</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> actions/checkout@v4\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> build in docker\n        <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span> docker run <span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>mount type=bind<span class=\"token punctuation\">,</span>source=\"$<span class=\"token punctuation\">{</span>PWD<span class=\"token punctuation\">}</span>\"<span class=\"token punctuation\">,</span>target=/data $IMAGE /data/build.sh\n        <span class=\"token key atrule\">env</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">IMAGE</span><span class=\"token punctuation\">:</span> blang/latex<span class=\"token punctuation\">:</span>ctanfull\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> actions/upload<span class=\"token punctuation\">-</span>artifact@v4.4.3\n        <span class=\"token key atrule\">with</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> pdf\n          <span class=\"token key atrule\">path</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'My CV.pdf'</span>\n</code></pre> <p>Overall I find this setup gives me the best of all worlds, but the <em>real</em> win here is not having to worry about managing dependencies or Windows TeX distributions. Instead I lean on people who are more knowledgeable about these things package things neatly in a Docker image for me!</p> <h2 id=\"what-s-in-the-dockerfile-\" class=\"heading-with-anchor\"><a href=\"#what-s-in-the-dockerfile-\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">What's in the dockerfile?</a></h2> <p>Whenever I'm using random docker images like this, I like to take a look at the Dockerfile to see what's going on under the hood. <a href=\"https://github.com/blang/latex-docker/blob/42d2c532a09a00938331512fd2b539f9944c400c/Dockerfile.basic\">The <code>blang/latex:basic</code> image</a> contains <em>most</em> of the setup:</p> <pre class=\"language-dockerfile\"><code class=\"language-dockerfile\"><span class=\"token instruction\"><span class=\"token keyword\">FROM</span> ubuntu:xenial</span>\n<span class=\"token instruction\"><span class=\"token keyword\">MAINTAINER</span> Benedikt Lang &lt;mail@blang.io&gt;</span>\n<span class=\"token instruction\"><span class=\"token keyword\">ENV</span> DEBIAN_FRONTEND noninteractive</span>\n\n<span class=\"token comment\"># Add the prerequisite packages</span>\n<span class=\"token instruction\"><span class=\"token keyword\">RUN</span> apt-get update -q <span class=\"token operator\">\\</span>\n    &amp;&amp; apt-get install -qy build-essential wget libfontconfig1 <span class=\"token operator\">\\</span>\n    &amp;&amp; rm -rf /var/lib/apt/lists/*</span>\n\n<span class=\"token comment\"># Install TexLive with scheme-basic</span>\n<span class=\"token instruction\"><span class=\"token keyword\">RUN</span> wget http://mirror.ctan.org/systems/texlive/tlnet/install-tl-unx.tar.gz; <span class=\"token operator\">\\</span>\n\tmkdir /install-tl-unx; <span class=\"token operator\">\\</span>\n\ttar -xvf install-tl-unx.tar.gz -C /install-tl-unx --strip-components=1; <span class=\"token operator\">\\</span>\n    echo <span class=\"token string\">\"selected_scheme scheme-basic\"</span> &gt;&gt; /install-tl-unx/texlive.profile; <span class=\"token operator\">\\</span>\n\t/install-tl-unx/install-tl -profile /install-tl-unx/texlive.profile; <span class=\"token operator\">\\</span>\n    rm -r /install-tl-unx; <span class=\"token operator\">\\</span>\n\trm install-tl-unx.tar.gz</span>\n\n<span class=\"token instruction\"><span class=\"token keyword\">ENV</span> PATH=<span class=\"token string\">\"/usr/local/texlive/2017/bin/x86_64-linux:${PATH}\"</span></span>\n\n<span class=\"token instruction\"><span class=\"token keyword\">ENV</span> HOME /data</span>\n<span class=\"token instruction\"><span class=\"token keyword\">WORKDIR</span> /data</span>\n\n<span class=\"token comment\"># Install latex packages</span>\n<span class=\"token instruction\"><span class=\"token keyword\">RUN</span> tlmgr install latexmk</span>\n\n<span class=\"token instruction\"><span class=\"token keyword\">VOLUME</span> [<span class=\"token string\">\"/data\"</span>]</span>\n</code></pre> <p>There's not loads going on there: from an Ubuntu <code>16.04</code> base image (which is getting outdated, and probably needs updating soon) the image installs prerequisites like <code>wget</code> and <code>build-essential</code>, and then installs a <code>TexLive</code> distribution, and adds it to the path.</p> <p><a href=\"https://github.com/blang/latex-docker/blob/42d2c532a09a00938331512fd2b539f9944c400c/Dockerfile.full\">The <code>blang/latex:ctanfull</code> image</a> that I use in this post, is based on this image, but uses the \"full\" scheme:</p> <pre class=\"language-dockerfile\"><code class=\"language-dockerfile\"><span class=\"token instruction\"><span class=\"token keyword\">FROM</span> blang/latex:ctanbasic</span>\n<span class=\"token instruction\"><span class=\"token keyword\">MAINTAINER</span> Benedikt Lang &lt;mail@blang.io&gt;</span>\n\n<span class=\"token instruction\"><span class=\"token keyword\">RUN</span> tlmgr install scheme-full</span>\n</code></pre> <p>I might think about trying to create updated versions of these images, but honestly, as long as they keep working, I probably won't 🙈</p> <h2 id=\"the-local-editor-experience\" class=\"heading-with-anchor\"><a href=\"#the-local-editor-experience\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">The local editor experience</a></h2> <p>For the local editing experience, I've found that VS Code is good enough for me, and I'm obviously very familiar with it. VS Code has LaTeX support built-in, so I simply added <a href=\"https://marketplace.visualstudio.com/items?itemName=mathematic.vscode-pdf\">a PDF Viewer extension</a> so that I can have the rendered result open in on the right side of the Window while editing on the left, and a terminal open at the base. Add in <a href=\"https://marketplace.visualstudio.com/items?itemName=ban.spellright\">a spell-checker</a> and there's not much more I need for local development:</p> <p><img src=\"/content/images/2024/cv.png\" alt=\"An image of my local dev setup using VS Code\"></p> <p>That covers my local development setup, my build process, and the simple CI that I have for projects. It's easy to copy the <code>build.ps1</code>, <code>build.sh</code>, and <code>build.yml</code> files between projects whenever I need to. And if I come back to it 6 months later, it's obvious what I need to do—run the <code>build.*</code> script that makes sense (<code>.ps1</code> for Windows and <code>.sh</code> once running inside the docker container)!</p> <h2 id=\"summary\" class=\"heading-with-anchor\"><a href=\"#summary\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Summary</a></h2> <p>In this post I described how I render LaTeX projects using the <code>blang/latex</code> docker image, which contains a full LaTeX distribution. I described how and why I start a long-lived docker container for the project, and then repeatedly re-render the project using <code>lualatex</code>. Finally I showed the setup I use with VS Code, a PDF rendering extension, and a spellchecker.</p> ",
    "sanitized": "In this short post I describe how I build LaTeX projects on a Windows machine by using Docker. There's nothing particularly novel or exciting about this, someone just asked me about it recently so this is effectively my reply! Typesetting documents with LaTeX I love using markdown for writing documentation, blog posts, notes, or anything I can. Even with a very simple editor, you can have something that roughly looks like the markup that you want to produce. But markdown is generally tied closely to HTML (though this is not strictly required), and sometimes you want or need to produce a standalone document, like a PDF, for which HTML isn't generally well suited. For those rare cases where I want to produce a nice looking document, such as a CV, I fallback to LaTeX. LaTeX is a markup language that is explicitly about typesetting documents so it cares deeply about pages and margins, which contrasts with HTML markup. You then use a TeX distribution to render the LaTeX document as a PDF (or other format).  LaTeX performs the same general function as WYSIWYG editors like Google Docs or Microsoft Word. However, LaTeX is not WYSIWYG (requiring an exxplicit rendering step) which can make it harder to use in general, but this all can enable broader optimisations and produce better looking documents overall.  LaTeX is very common in the scientific community in particular, with papers often being written in LaTeX. It is also particularly good for writing large documents, which is why I used it to write my PhD thesis. However, that was years ago. When I came to work with LaTeX again recently, I was reminded that working with it on Windows was not obvious. Rendering LaTeX on Windows LaTeX comes very much from the *Nix world, which means that it's very open, and available, but also that there are thousand different \"suggested\" approaches to rending LaTeX documents. For people who want choice, or who care about the little details of each distribution, that's great. For people who just want to \"install something\" and get on with it, getting started can be confusing 😅  Just to be clear, I am very much a beginner with LaTeX, despite having used it a lot 15 years ago. I still find it has a very steep learning curve (softened somewhat these days by StackOverflow and ChatGPT), but there are some things it just does better than WYSWIG editors, so I lean on it where I can now and again.  When I was working on my PhD, I'm pretty sure I used TeXnicCenter, but it's been a decade since there were any updates there, and you need to manage your own TeX distribution (e.g. MiKTeX) directly if I understand correctly. Other common suggestions include Texmaker, TeXstudio, or just to use VS Code, but these all still require you manage the TeX distribution yourself. Unfortunately I have bad memories of manually managing MiKTeX on Windows and really wanted to avoid that if I could help it. For a long while, I was using Overleaf, an online-only platform, for occasionally rendering LaTeX documents, and it worked very well for my needs. I was only rendering relatively short documents and didn't particularly need a lot of IDE or collaborative features.  Unfortunately, Overleaf made the individual free-plan basically unusable (rendering a two page document was \"too complex\"), and I couldn't justify paying a subscription for something I only used a couple of times a year. Using Docker seemed like the obvious choice to solve my issue: I could use VS Code as my editor (it has built-in syntax support for LaTeX), and then rending the documents using a self-contained distribution. Overleaf itself is open source, and provides Docker images for running the community edition. I looked into this initially, but it was overkill for what I needed: I didn't need multiple accounts and project storage in the Overleaf implementation itself, I just needed the rendering part. Building LaTeX with Docker using blang/latex Eventually I found the blang/latex docker images, which do exactly what I want—an Ubuntu-based image, with everything you need to compile locally in docker. The blang/latex come in three different flavours: blang/latex:ubuntu (Dockerfile)—Ubuntu TexLive distribution: Old but stable, most needed packages(3.9GB) blang/latex:ctanbasic (Dockerfile)— CTAN TexLive Scheme-basic: Up-to-date, only basic packages, base for custom builds (500MB) blang/latex:ctanfull (Dockerfile)— CTAN TexLive Scheme-full: Up-to-date, all packages (5.6GB) The more complete versions are obviously quite big images, but as I was only going to be pulling them once locally and running them repeatedly to build, I wasn't particularly worried about that. For simplicity I went with the ctanfull tag which contains the full set of CTAN packages. The docker hub page describes how you can use these images to build your LaTeX project, but I decided to go with something a bit different. I created two files in the root of my project. build.ps1—This script runs (or restarts) the docker blang/latex container. build.sh—This simple script runs inside the docker container, and does the latex build. The scrcipts themselves are very simple. First we have the build.ps1 script: # Try to start an existing container, if it exists\ndocker start -a -i \"latex-builder\"\n\nif ($LASTEXITCODE -ne 0) {\n  # The latex-builder image doesn't exist, so run it explicitly\n  $ROOT_DIR=\"$PSScriptRoot\"\n\n  docker run -it `\n    --mount \"type=bind,source=$ROOT_DIR,target=/data\" `\n    --name \"latex-builder\" `\n    blang/latex:ctanfull /bin/bash\n}\n This script attempts to start a docker container using the blang/latex:ctanfull image, using the name latex-builder, and attaches stdin/stdout/stderr. If the container already exists and is stopped, then this just restarts the same image and connects to the container. If the container with the name latex-builder doesn't exist, the script starts a new container, mounts the root directory inside the image at /data, and opens a bash shell.  This doesn't strictly work as I would like, as depending on how you later exit a re-started container, the exit code may be non-null, which causes the script to (harmlessly) try to start a new container, fail, and show an error. It's not a big deal, but it's slightly annoying, and I'm sure I'm missing an obvious solution here!  Once the container is running, you can build by running .\\build.sh inside the container. The build.sh script is specific to each project and looks something like this: #!/bin/sh\n\nlualatex --jobname=\"My CV\"  main.tex\n This simple script runs lualatex to render the main.tex LaTeX document as a PDF. Thanks to mounting the directory, this appears on the \"Windows side\" automatically. I keep the docker container running in a window, iterate on the LaTeX files in an editor, and then when I want to see the changes, quickly flick to the terminal and run build.sh in the container. It's exactly the workflow I was hoping for.  Note that you could also use pdflatex or latexmk instead of lualatex if you prefer, as described in the docs for blang/latex.  Why use two separate files? You might be wondering why I opted to keep the docker image container running, necessitating both a build.ps1 and build.sh file? It's true that you could run everything all in one command. For example, you could combine the scripts above as follows: $ROOT_DIR=\"$PSScriptRoot\"\n\ndocker run -it --rm`\n  --mount \"type=bind,source=$ROOT_DIR,target=/data\" `\n  --name \"latex-builder\" `\n  blang/latex:ctanfull `\n  lualatex --jobname=\"My CV\"  main.tex\n The problem with this approach is that it starts a new container every time. But when you first run luatex (and, I assume pdflatex and others), it performs some one-time setup, similar to the following root@67d3d81c4129:~# ./build.sh\nThis is LuaTeX, Version 1.0.4 (TeX Live 2017)\n restricted system commands enabled.\n(./main.tex\nLaTeX2e <2017-04-15>\n(using cache: /usr/local/texlive/2017/texmf-var/luatex-cache/generic)\nluaotfload | main : initialization completed in 0.362 seconds\nBabel <3.16> and hyphenation patterns for 1 language(s) loaded.\n(./example.cls\nDocument Class: example 2013/02/09 v1.3.0 example class\n(/usr/local/texlive/2017/texmf-dist/tex/latex/base/size11.clo\nluaotfload | db : Font names database not found, generating new one.\nluaotfload | db : This can take several minutes; please be patient.\n As you can see, on this \"first run\", luatex has to build the font-name database cache. On my old laptop this only takes 5-10s, but it's an annoying extra delay for the \"inner-loop\" experience, where the remainder of the build only takes a couple of seconds. By reusing an existing container we can skip that initialization entirely, and go straight to the build! That said, if you want to also have a build that runs in CI, then the one-shot approach obviously makes sense. This is effectively what the GitHub actions yml file below does, by calling ./build.sh directly instead of starting a shell: name: Build\non:\n  push:\n    branches: [ \"main\" ]\n  pull_request:\n  workflow_dispatch:\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n      - name: build in docker\n        run: docker run --mount type=bind,source=\"${PWD}\",target=/data $IMAGE /data/build.sh\n        env:\n          IMAGE: blang/latex:ctanfull\n      - uses: actions/upload-artifact@v4.4.3\n        with:\n          name: pdf\n          path: 'My CV.pdf'\n Overall I find this setup gives me the best of all worlds, but the real win here is not having to worry about managing dependencies or Windows TeX distributions. Instead I lean on people who are more knowledgeable about these things package things neatly in a Docker image for me! What's in the dockerfile? Whenever I'm using random docker images like this, I like to take a look at the Dockerfile to see what's going on under the hood. The blang/latex:basic image contains most of the setup: FROM ubuntu:xenial\nMAINTAINER Benedikt Lang <mail@blang.io>\nENV DEBIAN_FRONTEND noninteractive\n\n# Add the prerequisite packages\nRUN apt-get update -q \\\n    && apt-get install -qy build-essential wget libfontconfig1 \\\n    && rm -rf /var/lib/apt/lists/*\n\n# Install TexLive with scheme-basic\nRUN wget http://mirror.ctan.org/systems/texlive/tlnet/install-tl-unx.tar.gz; \\\n\tmkdir /install-tl-unx; \\\n\ttar -xvf install-tl-unx.tar.gz -C /install-tl-unx --strip-components=1; \\\n    echo \"selected_scheme scheme-basic\" >> /install-tl-unx/texlive.profile; \\\n\t/install-tl-unx/install-tl -profile /install-tl-unx/texlive.profile; \\\n    rm -r /install-tl-unx; \\\n\trm install-tl-unx.tar.gz\n\nENV PATH=\"/usr/local/texlive/2017/bin/x86_64-linux:${PATH}\"\n\nENV HOME /data\nWORKDIR /data\n\n# Install latex packages\nRUN tlmgr install latexmk\n\nVOLUME [\"/data\"]\n There's not loads going on there: from an Ubuntu 16.04 base image (which is getting outdated, and probably needs updating soon) the image installs prerequisites like wget and build-essential, and then installs a TexLive distribution, and adds it to the path. The blang/latex:ctanfull image that I use in this post, is based on this image, but uses the \"full\" scheme: FROM blang/latex:ctanbasic\nMAINTAINER Benedikt Lang <mail@blang.io>\n\nRUN tlmgr install scheme-full\n I might think about trying to create updated versions of these images, but honestly, as long as they keep working, I probably won't 🙈 The local editor experience For the local editing experience, I've found that VS Code is good enough for me, and I'm obviously very familiar with it. VS Code has LaTeX support built-in, so I simply added a PDF Viewer extension so that I can have the rendered result open in on the right side of the Window while editing on the left, and a terminal open at the base. Add in a spell-checker and there's not much more I need for local development:  That covers my local development setup, my build process, and the simple CI that I have for projects. It's easy to copy the build.ps1, build.sh, and build.yml files between projects whenever I need to. And if I come back to it 6 months later, it's obvious what I need to do—run the build.* script that makes sense (.ps1 for Windows and .sh once running inside the docker container)! Summary In this post I described how I render LaTeX projects using the blang/latex docker image, which contains a full LaTeX distribution. I described how and why I start a long-lived docker container for the project, and then repeatedly re-render the project using lualatex. Finally I showed the setup I use with VS Code, a PDF rendering extension, and a spellchecker."
  },
  {
    "itemId": "https://andrewlock.net/using-the-yamldotnet-source-generator-for-native-aot/",
    "raw": "<img src=\"https://andrewlock.net/content/images/2024/yamldotnet.png\" /><p>In this post I show how you can use the <a href=\"https://github.com/aaubry/YamlDotNet\">YamlDotNet</a> source generator in your .NET 7+ application. This is particularly important if you're planning on using your application with NativeAOT.</p> <h2 id=\"reading-yaml-with-yamldotnet\" class=\"heading-with-anchor\"><a href=\"#reading-yaml-with-yamldotnet\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Reading YAML with YamlDotNet</a></h2> <p>Love it or hate it, <a href=\"https://yaml.org/\">YAML</a> is everywhere these days. It's emerged as the markup language of choice for \"cloud native\" configuration, whether that's Kubernetes manifests, docker compose files, or GitHub Action workflows. On the one hand, it's a generally-easy-to-read format, and a strict superset of JSON. On the other hand, the significant whitespace can be a nightmare if you don't have decent tooling 😅</p> <p>Either way, people clearly choose to use it, even if they don't have to. Years ago I wrote a small ASP.NET Core library, <a href=\"https://www.nuget.org/packages/NetEscapades.Configuration.Yaml\">NetEscapades.Configuration.Yaml</a> that reads YAML files in as part of ASP.NET Core's standard <a href=\"https://learn.microsoft.com/en-us/aspnet/core/fundamentals/configuration\">configuration system</a>. Judging from the <a href=\"https://nugettrends.com/packages?ids=NetEscapades.Configuration.Yaml&amp;months=72\">NuGet Trends data</a>, YAML is not going away any time soon!</p> <p><img src=\"/content/images/2024/nuget_trends.png\" alt=\"The NuGet downloads for the NetEscapades.Configuration.Yaml library\"></p> <p>Under the hood, <a href=\"https://www.nuget.org/packages/NetEscapades.Configuration.Yaml\">NetEscapades.Configuration.Yaml</a> uses <a href=\"https://www.nuget.org/packages/YamlDotNet/\">YamlDotNet</a> to read the YAML files. <a href=\"https://github.com/aaubry/YamlDotNet\">YamlDotNet</a> is <em>the</em> YAML parser for .NET—with ~245 Million downloads it's effectively the \"Newtonsoft.Json for YAML\".</p> <p>There are several ways to work with YAML files with YamlDotNet. If you need to, you can <a href=\"https://github.com/aaubry/YamlDotNet/wiki/Samples.LoadingAYamlStream\">manipulate a high-level representation of the YAML</a> (e.g. <code>YamlScalarNode</code>, <code>YamlMappingNode</code> etc) if you need to work with the YAML document directly.</p> <p>A more common approach is to serialize your YAML to and from strongly-typed objects, just like you'd do with Newtonsoft.Json or System.Text.Json. For example, the following code shows how to deserialize a YAML document into a strongly-typed <code>Person</code> object using YamlDotNet:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">YamlDotNet<span class=\"token punctuation\">.</span>Serialization</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">YamlDotNet<span class=\"token punctuation\">.</span>Serialization<span class=\"token punctuation\">.</span>NamingConventions</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// create a deserializer, using the builder pattern </span>\n<span class=\"token class-name\">IDeserializer</span> deserializer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">DeserializerBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">WithNamingConvention</span><span class=\"token punctuation\">(</span>UnderscoredNamingConvention<span class=\"token punctuation\">.</span>Instance<span class=\"token punctuation\">)</span> <span class=\"token comment\">// customise conventions</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">Build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Can deserialize from a string or TextReader (for example)</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> yaml <span class=\"token operator\">=</span> \n    <span class=\"token string\">\"\"</span>\"\n    name<span class=\"token punctuation\">:</span> George <span class=\"token class-name\">Washington</span>\n    age<span class=\"token punctuation\">:</span> <span class=\"token number\">89</span>\n    height_in_inches<span class=\"token punctuation\">:</span> <span class=\"token number\">5.75</span>\n    addresses<span class=\"token punctuation\">:</span>\n      home<span class=\"token punctuation\">:</span>\n        street<span class=\"token punctuation\">:</span> <span class=\"token number\">400</span> Mockingbird <span class=\"token class-name\">Lane</span>\n        state<span class=\"token punctuation\">:</span> Hawidaho\n    <span class=\"token string\">\"\"</span>\"<span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">Person</span> p <span class=\"token operator\">=</span> deserializer<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">Deserialize</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>Person<span class=\"token punctuation\">&gt;</span></span></span><span class=\"token punctuation\">(</span>yaml<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre> <p>You can customise the conventions used to read the YAML, override the serialization for certain types or properties, and generally customize things as you need. It's worth checking out <a href=\"https://github.com/aaubry/YamlDotNet/wiki/Serialization.Deserializer\">the GitHub Wiki</a> for details of all the possible customisation you can do.</p> <h2 id=\"the-advantages-and-complexities-of-native-aot\" class=\"heading-with-anchor\"><a href=\"#the-advantages-and-complexities-of-native-aot\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">The advantages and complexities of Native AOT</a></h2> <p><a href=\"https://learn.microsoft.com/en-us/dotnet/core/deploying/native-aot/?tabs=windows%2Cnet8\"><em>Native AOT</em></a> is a new (since .NET 7) deployment mechanism for .NET applications. Normally, when you publish and deploy a .NET application, your application is compiled into Intermediate Language (IL). When the .NET runtime runs your application it uses a Just-In-Time (JIT) compiler to convert your IL into machine-language instructions which can actually be executed by processor.</p> <p>In contrast, Native AOT performs the IL to machine-language conversion during a <code>dotnet publish</code>. It produces a single binary, targeting a single platform (for example <code>x64</code> Windows or <code>arm64</code> Linux), which contains the complete .NET runtime, all the base-class libraries, and your application. To keep the size of this file down, NativeAOT automatically \"trims\" any unused types and members from your application <em>and</em> from the underlying platform.</p> <blockquote> <p>When choosing between IL+JIT or Native AOT there are a number of trade offs to consider. I won't go into those exhaustively here, and instead will just highlight a few.</p> </blockquote> <p>Advantages to using the IL+JIT approach include:</p> <ul><li>The JIT can optimise the machine-language generated for the specific capabilities of the processor currently executing, which may mean it can produce faster code than Native AOT would.</li> <li>You're free to use meta-programming approaches such as reflection (e.g. <code>Assembly.LoadFile</code>) and run-time code generation (e.g. <code>System.Reflection.Emit</code>).</li> <li>You can use any .NET library available; they're all designed to be used in this mode.</li></ul> <p>Whereas Native AOT brings other advantages:</p> <ul><li>Native AOT typically allows significantly faster startup times, as there's no need to load all the types, start the JIT compiler, and generate machine code from IL; the app starts executing almost immediately.</li> <li>The size of a Native AOT app is typically <em>much</em> smaller than the overall footprint of a JIT app (runtime + base class libraries + application), as any unused features are trimmed and removed.</li> <li>Runtime memory usage is typically smaller, as the runtime has to do less work (it doesn't need to run the JIT compiler, load types, have debugger support).</li></ul> <blockquote> <p>Michal Strehovsky gave a great <a href=\"https://www.youtube.com/watch?v=Gmn-4mVSjq4&amp;ab_channel=dotnet\">Deep dive on Native AOT</a> talk at .NET Conf 2024; if you're interested in Native AOT I strongly suggest taking a look at it!</p> </blockquote> <p>The big downside to using Native AOT publishing is that the compiler needs to be able to <em>statically</em> understand which types in your application are <em>actually</em> going to be used. That is particularly difficult for functionality that leans heavily on <em>reflection</em>. And guess what, serialization and deserialization typically does just that.</p> <h2 id=\"source-generation-to-the-rescue-\" class=\"heading-with-anchor\"><a href=\"#source-generation-to-the-rescue-\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Source generation to the rescue!</a></h2> <p>Reflection is often problematic for Native AOT, as it can quickly become difficult for the compiler to know which types are <em>actually</em> being used. For example, the following code would (potentially) work fine when you're running with a JIT:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\">Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Enter a type to load\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword\">string</span></span> typeToLoad <span class=\"token operator\">=</span> Console<span class=\"token punctuation\">.</span><span class=\"token function\">ReadLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Type<span class=\"token punctuation\">?</span></span> type <span class=\"token operator\">=</span> Type<span class=\"token punctuation\">.</span><span class=\"token function\">GetType</span><span class=\"token punctuation\">(</span>typeToLoad<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// dynamically load the type</span>\nConsole<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"Loaded type </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">type</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre> <p>There's clearly no way for the compiler to know ahead of time what type will be requested, so there's pretty much no way Native AOT is going to work with this sort of pattern.</p> <blockquote> <p>This example is obviously very contrived, but it's actually similar to how some plugin systems work in practice!</p> </blockquote> <p>In other scenarios we use reflection primarily because it was historically the only tool available to us. This is often the case for serialization and deserialization. Serializers commonly use reflection to inspect the properties of objects so they can be created from a given document, whether that's XML, JSON, or YAML.</p> <p>However, with the introduction of source generators, we now have another tool. Instead of inspecting types at <em>runtime</em> to generate the mapping code from documents-to-types, source generators allow us to move that work to <em>compile</em> time. This can give performance improvements (as there's less work to do at runtime), but more importantly (for this case) it also means our code is statically analyzable, and can potentially support Native AOT.</p> <blockquote> <p>I've written a lot about source generators: I have a series on <a href=\"/series/creating-a-source-generator/\">creating an incremental source generator here</a> and have described some of the source generators I've created <a href=\"/recent-updates-for-netescapades-enumgenerators-interceptors/\">here</a> and <a href=\"https://andrewlock.net/updates-to-the-stronglytypedid-library/\">here</a>.</p> </blockquote> <p>It's important to be aware that using source generation for serialization <em>typically</em> requires making code changes. For example, using source generation with System.Text.Json (the built-in JSON serializer) requires</p> <ul><li>Creating a <code>JsonSerializerContract</code>.</li> <li>Applying <code>[JsonSerializable]</code> with the types to generate.</li> <li>Explicitly calling serialization method overloads that use the <code>JsonSerializerContract</code>.</li></ul> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> json <span class=\"token operator\">=</span> \n    <span class=\"token string\">\"\"</span>\"\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token string\">\"Date\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"2019-08-01T00:00:00\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"TemperatureCelsius\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">25</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"Summary\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Hot\"</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token string\">\"\"</span>\"<span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> weatherForecast <span class=\"token operator\">=</span> JsonSerializer<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">Deserialize</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>WeatherForecast<span class=\"token punctuation\">&gt;</span></span></span><span class=\"token punctuation\">(</span>\n    json<span class=\"token punctuation\">,</span>\n    SourceGenerationContext<span class=\"token punctuation\">.</span>Default<span class=\"token punctuation\">.</span>WeatherForecast<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Explicitly use the context</span>\n\n<span class=\"token comment\">// The data type</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">WeatherForecast</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">DateTime</span> Date <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">int</span></span> TemperatureCelsius <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">?</span></span> Summary <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// The context - the body of this type is source generated</span>\n<span class=\"token punctuation\">[</span><span class=\"token function\">JsonSerializable</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span><span class=\"token type-expression class-name\">WeatherForecast</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">internal</span> <span class=\"token keyword\">partial</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SourceGenerationContext</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">JsonSerializerContext</span></span>\n<span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>Source generation in System.Text.Json has got progressively better over recent releases, so that many of the gaps and issues that were once there have been resolved. However, I wasn't aware until recently that YamlDotNet has a similar source generator for serializing YAML.</p> <h2 id=\"using-source-generation-with-yamldotnet\" class=\"heading-with-anchor\"><a href=\"#using-source-generation-with-yamldotnet\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Using source generation with YamlDotNet</a></h2> <p>I was recently working on a project that I wanted to publish using NativeAOT. It involved reading some Markdown files <a href=\"https://github.com/xoofx/markdig\">using Markdig</a>, reading <a href=\"https://github.com/xoofx/markdig/blob/master/src/Markdig.Tests/Specs/YamlSpecs.md\">the YAML frontmatter</a>, and parsing the YAML.</p> <p>Initially, I thought I might have a problem. There's no real mention of Native AOT or source generation that I could see <a href=\"https://github.com/aaubry/YamlDotNet/wiki\">in the YamlDotNet Wiki</a>. However <a href=\"https://github.com/aaubry/YamlDotNet/issues/740\">this issue</a> requesting support for Native AOT was marked complete and there was a sample called <a href=\"https://github.com/aaubry/YamlDotNet/tree/master/YamlDotNet.Core7AoTCompileTest\">YamlDotNet.Core7AoTCompileTest</a>, and sure enough, it was possible!</p> <p>To use the YamlDotNet source generation in your project, you need to do 4 things:</p> <ul><li>Add a reference to <a href=\"https://www.nuget.org/packages/Vecc.YamlDotNet.Analyzers.StaticGenerator\">Vecc.YamlDotNet.Analyzers.StaticGenerator</a>.</li> <li>Create a class derived from <code>YamlDotNet.Serialization.StaticContext</code>.</li> <li>Annotate this class with the types you wish to use with source generation.</li> <li>Use the <code>StaticDeserializerBuilder</code> instead of <code>DeserializerBuilder</code> to build your <code>IDeserializer</code></li></ul> <p>I'll walk through each of those steps in the following sections.</p> <h3 id=\"1-add-a-reference-to-vecc-yamldotnet-analyzers-staticgenerator\" class=\"heading-with-anchor\"><a href=\"#1-add-a-reference-to-vecc-yamldotnet-analyzers-staticgenerator\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">1. Add a reference to Vecc.YamlDotNet.Analyzers.StaticGenerator</a></h3> <p>The first step, adding a reference to <a href=\"https://www.nuget.org/packages/Vecc.YamlDotNet.Analyzers.StaticGenerator\"><em>Vecc.YamlDotNet.Analyzers.StaticGenerator</em></a> is a somewhat odd one - I get the <em>impression</em> that this is just a temporary measure by the current maintainer, but it's a required step right now. The NuGet is published by the current maintainer of YamlDotNet, and the version numbers match with the YamlDotNet releases.</p> <p>Add both this package and YamlDotNet to your project:</p> <pre class=\"language-bash\"><code class=\"language-bash\">dotnet <span class=\"token function\">add</span> package Vecc.YamlDotNet.Analyzers.StaticGenerator\ndotnet <span class=\"token function\">add</span> package YamlDotNet\n</code></pre> <h3 id=\"2-create-a-yamldotnet-serialization-staticcontext-type\" class=\"heading-with-anchor\"><a href=\"#2-create-a-yamldotnet-serialization-staticcontext-type\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">2. Create a <code>YamlDotNet.Serialization.StaticContext</code> type</a></h3> <p>Next, create a class that derives from <code>YamlDotNet.Serialization.StaticContext</code>, and add the <code>[YamlStaticContext]</code> attribute to it. For example:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">YamlDotNet<span class=\"token punctuation\">.</span>Serialization</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">YamlStaticContext</span></span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">partial</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">YamlStaticContext</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">YamlDotNet<span class=\"token punctuation\">.</span>Serialization<span class=\"token punctuation\">.</span>StaticContext</span></span>\n<span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>This type is equivalent to the <code>JsonSerializerContext</code> used by System.Text.Json, and serves as the \"target\" of the source generator.</p> <h3 id=\"3-add-yamlserializable-attributes-for-each-type-to-serialize\" class=\"heading-with-anchor\"><a href=\"#3-add-yamlserializable-attributes-for-each-type-to-serialize\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">3. Add <code>[YamlSerializable]</code> attributes for each type to serialize</a></h3> <p>For each type that you want to serialize or deserialize, decorate your <code>StaticContext</code> class with a <code>[YamlSerializable]</code> attribute. For example:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">YamlDotNet<span class=\"token punctuation\">.</span>Serialization</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">YamlStaticContext</span></span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">YamlSerializable</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span><span class=\"token type-expression class-name\">WeatherForecast</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span> <span class=\"token comment\">// Generate for WeatherForecast type</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">partial</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">YamlStaticContext</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">YamlDotNet<span class=\"token punctuation\">.</span>Serialization<span class=\"token punctuation\">.</span>StaticContext</span></span>\n<span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>This makes the type available for source generation.</p> <blockquote> <p>Note that you must add <code>[YamlSerializable]</code> for all the non-built-in types that you wish to serialize, whether they're \"top-level\" types, or just referenced by other properties.</p> </blockquote> <p>If you check the generated code, you can see <em>exactly</em> what YamlDotNet is doing. I'm not going to reproduce it all here, but there's a few interesting points to note:</p> <ul><li>By default, when you register a type <code>T</code> using <code>[YamlSerializable]</code>, YamlDotNet will also recognise <code>T[]</code>, <code>IEnumerable&lt;T&gt;</code>, <code>List&lt;T&gt;</code>, and <code>Dictionary&lt;string, T&gt;</code>.</li> <li>The source generator implements an <code>IObjectAccessor</code> for the type.</li></ul> <p>On that latter point, the accessor looks something like this:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">DemoApp_WeatherForecast_379090c0bf12475d92847d8798d5c88f</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">YamlDotNet<span class=\"token punctuation\">.</span>Serialization<span class=\"token punctuation\">.</span>IObjectAccessor</span></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Set</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> propertyName<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">object</span></span> target<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">object</span></span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> v <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>DemoApp<span class=\"token punctuation\">.</span>WeatherForecast<span class=\"token punctuation\">)</span>target<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>propertyName<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">case</span> <span class=\"token string\">\"Date\"</span><span class=\"token punctuation\">:</span> v<span class=\"token punctuation\">.</span>Date <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>System<span class=\"token punctuation\">.</span>DateTime<span class=\"token punctuation\">)</span><span class=\"token keyword\">value</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">case</span> <span class=\"token string\">\"TemperatureCelsius\"</span><span class=\"token punctuation\">:</span> v<span class=\"token punctuation\">.</span>TemperatureCelsius <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>System<span class=\"token punctuation\">.</span>Int32<span class=\"token punctuation\">)</span><span class=\"token keyword\">value</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">case</span> <span class=\"token string\">\"Summary\"</span><span class=\"token punctuation\">:</span> v<span class=\"token punctuation\">.</span>Summary <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>System<span class=\"token punctuation\">.</span>String<span class=\"token punctuation\">)</span><span class=\"token keyword\">value</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">ArgumentOutOfRangeException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"propertyName\"</span><span class=\"token punctuation\">,</span> <span class=\"token interpolation-string\"><span class=\"token string\">$\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">propertyName</span><span class=\"token punctuation\">}</span></span><span class=\"token string\"> does not exist or is not settable\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">object</span></span> <span class=\"token function\">Read</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> propertyName<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">object</span></span> target<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> v <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>DemoApp<span class=\"token punctuation\">.</span>WeatherForecast<span class=\"token punctuation\">)</span>target<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>propertyName<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">case</span> <span class=\"token string\">\"Date\"</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">return</span> v<span class=\"token punctuation\">.</span>Date<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">case</span> <span class=\"token string\">\"TemperatureCelsius\"</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">return</span> v<span class=\"token punctuation\">.</span>TemperatureCelsius<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">case</span> <span class=\"token string\">\"Summary\"</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">return</span> v<span class=\"token punctuation\">.</span>Summary<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>Of course, you don't need to worry about any of that. But if you <em>do</em> need to peek behind the curtains, you can often more easily see what's going on when the code is source generated like this!.</p> <p>We're nearly finished, there's just one more change we need for our app to support the generated definitions.</p> <h3 id=\"4-use-the-staticdeserializerbuilder\" class=\"heading-with-anchor\"><a href=\"#4-use-the-staticdeserializerbuilder\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">4. Use the <code>StaticDeserializerBuilder</code></a></h3> <p>The final step is to find where you're currently creating an <code>IDeserializer</code> using a <code>DeserializerBuilder</code>. Replace the <code>DeserializerBuilder</code> with <code>StaticDeserializerBuilder</code> and pass in an instance of your <code>StaticContext</code>. For example:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token comment\">// Replace this ...</span>\n<span class=\"token comment\">// IDeserializer deserializer = new DeserializerBuilder()</span>\n\n<span class=\"token comment\">// With this:</span>\n<span class=\"token comment\">//                              👇 Static builder         👇 Your StaticContext type</span>\n<span class=\"token class-name\">IDeserializer</span> deserializer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">StaticDeserializerBuilder</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">YamlStaticContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">WithNamingConvention</span><span class=\"token punctuation\">(</span>UnderscoredNamingConvention<span class=\"token punctuation\">.</span>Instance<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">Build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">WeatherForecast</span> p <span class=\"token operator\">=</span> deserializer<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">Deserialize</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>WeatherForecast<span class=\"token punctuation\">&gt;</span></span></span><span class=\"token punctuation\">(</span>yaml<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre> <p>You can still customize your conventions as before, but now when you call <code>Deserialize&lt;T&gt;</code> YamlDotNet uses your <code>StaticContext</code> and generated <code>IObjectAccessors</code> to deserialize the YAML into your strongly typed object. Serializing works in much the same way:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token comment\">// Use the StaticSerializerBuilder and pass in your custom StaticContext</span>\n<span class=\"token class-name\">ISerializer</span> serializer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">StaticSerializerBuilder</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">YamlStaticContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">EnsureRoundtrip</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">Build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> forecast <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">WeatherForecast</span>\n<span class=\"token punctuation\">{</span>\n    Date <span class=\"token operator\">=</span> DateTime<span class=\"token punctuation\">.</span>UtcNow<span class=\"token punctuation\">,</span>\n    Summary <span class=\"token operator\">=</span> <span class=\"token string\">\"Sunny\"</span><span class=\"token punctuation\">,</span>\n    TemperatureCelsius <span class=\"token operator\">=</span> <span class=\"token number\">23</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Serialize the object as normal</span>\n<span class=\"token class-name\"><span class=\"token keyword\">string</span></span> json <span class=\"token operator\">=</span> serializer<span class=\"token punctuation\">.</span><span class=\"token function\">Serialize</span><span class=\"token punctuation\">(</span>forecast<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre> <p>And that's it. You now have NativeAOT compatible YAML serialization and deserialization, all thanks to the good work of the YamlDotNet maintainers!</p> <h2 id=\"summary\" class=\"heading-with-anchor\"><a href=\"#summary\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Summary</a></h2> <p>In this post I showed how you can use the YamlDotNet library to deserialize YAML into a strongly typed object. I then discussed some of the pros and cons of Native AOT, and how source generation can help work around the lack of reflection in Native AOT. Finally, I showed how to enable a source generator for YamlDotNet so that you can make your YAML serialization and deserialization Native AOT-friendly.</p> ",
    "sanitized": "In this post I show how you can use the YamlDotNet source generator in your .NET 7+ application. This is particularly important if you're planning on using your application with NativeAOT. Reading YAML with YamlDotNet Love it or hate it, YAML is everywhere these days. It's emerged as the markup language of choice for \"cloud native\" configuration, whether that's Kubernetes manifests, docker compose files, or GitHub Action workflows. On the one hand, it's a generally-easy-to-read format, and a strict superset of JSON. On the other hand, the significant whitespace can be a nightmare if you don't have decent tooling 😅 Either way, people clearly choose to use it, even if they don't have to. Years ago I wrote a small ASP.NET Core library, NetEscapades.Configuration.Yaml that reads YAML files in as part of ASP.NET Core's standard configuration system. Judging from the NuGet Trends data, YAML is not going away any time soon!  Under the hood, NetEscapades.Configuration.Yaml uses YamlDotNet to read the YAML files. YamlDotNet is the YAML parser for .NET—with ~245 Million downloads it's effectively the \"Newtonsoft.Json for YAML\". There are several ways to work with YAML files with YamlDotNet. If you need to, you can manipulate a high-level representation of the YAML (e.g. YamlScalarNode, YamlMappingNode etc) if you need to work with the YAML document directly. A more common approach is to serialize your YAML to and from strongly-typed objects, just like you'd do with Newtonsoft.Json or System.Text.Json. For example, the following code shows how to deserialize a YAML document into a strongly-typed Person object using YamlDotNet: using YamlDotNet.Serialization;\nusing YamlDotNet.Serialization.NamingConventions;\n\n// create a deserializer, using the builder pattern \nIDeserializer deserializer = new DeserializerBuilder()\n    .WithNamingConvention(UnderscoredNamingConvention.Instance) // customise conventions\n    .Build();\n\n// Can deserialize from a string or TextReader (for example)\nvar yaml = \n    \"\"\"\n    name: George Washington\n    age: 89\n    height_in_inches: 5.75\n    addresses:\n      home:\n        street: 400 Mockingbird Lane\n        state: Hawidaho\n    \"\"\";\n\nPerson p = deserializer.Deserialize<Person>(yaml);\n You can customise the conventions used to read the YAML, override the serialization for certain types or properties, and generally customize things as you need. It's worth checking out the GitHub Wiki for details of all the possible customisation you can do. The advantages and complexities of Native AOT Native AOT is a new (since .NET 7) deployment mechanism for .NET applications. Normally, when you publish and deploy a .NET application, your application is compiled into Intermediate Language (IL). When the .NET runtime runs your application it uses a Just-In-Time (JIT) compiler to convert your IL into machine-language instructions which can actually be executed by processor. In contrast, Native AOT performs the IL to machine-language conversion during a dotnet publish. It produces a single binary, targeting a single platform (for example x64 Windows or arm64 Linux), which contains the complete .NET runtime, all the base-class libraries, and your application. To keep the size of this file down, NativeAOT automatically \"trims\" any unused types and members from your application and from the underlying platform.  When choosing between IL+JIT or Native AOT there are a number of trade offs to consider. I won't go into those exhaustively here, and instead will just highlight a few.  Advantages to using the IL+JIT approach include: The JIT can optimise the machine-language generated for the specific capabilities of the processor currently executing, which may mean it can produce faster code than Native AOT would. You're free to use meta-programming approaches such as reflection (e.g. Assembly.LoadFile) and run-time code generation (e.g. System.Reflection.Emit). You can use any .NET library available; they're all designed to be used in this mode. Whereas Native AOT brings other advantages: Native AOT typically allows significantly faster startup times, as there's no need to load all the types, start the JIT compiler, and generate machine code from IL; the app starts executing almost immediately. The size of a Native AOT app is typically much smaller than the overall footprint of a JIT app (runtime + base class libraries + application), as any unused features are trimmed and removed. Runtime memory usage is typically smaller, as the runtime has to do less work (it doesn't need to run the JIT compiler, load types, have debugger support).  Michal Strehovsky gave a great Deep dive on Native AOT talk at .NET Conf 2024; if you're interested in Native AOT I strongly suggest taking a look at it!  The big downside to using Native AOT publishing is that the compiler needs to be able to statically understand which types in your application are actually going to be used. That is particularly difficult for functionality that leans heavily on reflection. And guess what, serialization and deserialization typically does just that. Source generation to the rescue! Reflection is often problematic for Native AOT, as it can quickly become difficult for the compiler to know which types are actually being used. For example, the following code would (potentially) work fine when you're running with a JIT: Console.WriteLine(\"Enter a type to load\");\nstring typeToLoad = Console.ReadLine();\nType? type = Type.GetType(typeToLoad); // dynamically load the type\nConsole.WriteLine($\"Loaded type {type}\");\n There's clearly no way for the compiler to know ahead of time what type will be requested, so there's pretty much no way Native AOT is going to work with this sort of pattern.  This example is obviously very contrived, but it's actually similar to how some plugin systems work in practice!  In other scenarios we use reflection primarily because it was historically the only tool available to us. This is often the case for serialization and deserialization. Serializers commonly use reflection to inspect the properties of objects so they can be created from a given document, whether that's XML, JSON, or YAML. However, with the introduction of source generators, we now have another tool. Instead of inspecting types at runtime to generate the mapping code from documents-to-types, source generators allow us to move that work to compile time. This can give performance improvements (as there's less work to do at runtime), but more importantly (for this case) it also means our code is statically analyzable, and can potentially support Native AOT.  I've written a lot about source generators: I have a series on creating an incremental source generator here and have described some of the source generators I've created here and here.  It's important to be aware that using source generation for serialization typically requires making code changes. For example, using source generation with System.Text.Json (the built-in JSON serializer) requires Creating a JsonSerializerContract. Applying [JsonSerializable] with the types to generate. Explicitly calling serialization method overloads that use the JsonSerializerContract. string json = \n    \"\"\"\n    {\n      \"Date\": \"2019-08-01T00:00:00\",\n      \"TemperatureCelsius\": 25,\n      \"Summary\": \"Hot\"\n    }\n    \"\"\";\n\nvar weatherForecast = JsonSerializer.Deserialize<WeatherForecast>(\n    json,\n    SourceGenerationContext.Default.WeatherForecast); // Explicitly use the context\n\n// The data type\npublic class WeatherForecast\n{\n    public DateTime Date { get; set; }\n    public int TemperatureCelsius { get; set; }\n    public string? Summary { get; set; }\n}\n\n// The context - the body of this type is source generated\n[JsonSerializable(typeof(WeatherForecast))]\ninternal partial class SourceGenerationContext : JsonSerializerContext\n{\n}\n Source generation in System.Text.Json has got progressively better over recent releases, so that many of the gaps and issues that were once there have been resolved. However, I wasn't aware until recently that YamlDotNet has a similar source generator for serializing YAML. Using source generation with YamlDotNet I was recently working on a project that I wanted to publish using NativeAOT. It involved reading some Markdown files using Markdig, reading the YAML frontmatter, and parsing the YAML. Initially, I thought I might have a problem. There's no real mention of Native AOT or source generation that I could see in the YamlDotNet Wiki. However this issue requesting support for Native AOT was marked complete and there was a sample called YamlDotNet.Core7AoTCompileTest, and sure enough, it was possible! To use the YamlDotNet source generation in your project, you need to do 4 things: Add a reference to Vecc.YamlDotNet.Analyzers.StaticGenerator. Create a class derived from YamlDotNet.Serialization.StaticContext. Annotate this class with the types you wish to use with source generation. Use the StaticDeserializerBuilder instead of DeserializerBuilder to build your IDeserializer I'll walk through each of those steps in the following sections. 1. Add a reference to Vecc.YamlDotNet.Analyzers.StaticGenerator The first step, adding a reference to Vecc.YamlDotNet.Analyzers.StaticGenerator is a somewhat odd one - I get the impression that this is just a temporary measure by the current maintainer, but it's a required step right now. The NuGet is published by the current maintainer of YamlDotNet, and the version numbers match with the YamlDotNet releases. Add both this package and YamlDotNet to your project: dotnet add package Vecc.YamlDotNet.Analyzers.StaticGenerator\ndotnet add package YamlDotNet\n 2. Create a YamlDotNet.Serialization.StaticContext type Next, create a class that derives from YamlDotNet.Serialization.StaticContext, and add the [YamlStaticContext] attribute to it. For example: using YamlDotNet.Serialization;\n\n[YamlStaticContext]\npublic partial class YamlStaticContext : YamlDotNet.Serialization.StaticContext\n{\n}\n This type is equivalent to the JsonSerializerContext used by System.Text.Json, and serves as the \"target\" of the source generator. 3. Add [YamlSerializable] attributes for each type to serialize For each type that you want to serialize or deserialize, decorate your StaticContext class with a [YamlSerializable] attribute. For example: using YamlDotNet.Serialization;\n\n[YamlStaticContext]\n[YamlSerializable(typeof(WeatherForecast))] // Generate for WeatherForecast type\npublic partial class YamlStaticContext : YamlDotNet.Serialization.StaticContext\n{\n}\n This makes the type available for source generation.  Note that you must add [YamlSerializable] for all the non-built-in types that you wish to serialize, whether they're \"top-level\" types, or just referenced by other properties.  If you check the generated code, you can see exactly what YamlDotNet is doing. I'm not going to reproduce it all here, but there's a few interesting points to note: By default, when you register a type T using [YamlSerializable], YamlDotNet will also recognise T[], IEnumerable<T>, List<T>, and Dictionary<string, T>. The source generator implements an IObjectAccessor for the type. On that latter point, the accessor looks something like this: class DemoApp_WeatherForecast_379090c0bf12475d92847d8798d5c88f : YamlDotNet.Serialization.IObjectAccessor\n{\n    public void Set(string propertyName, object target, object value)\n    {\n        var v = (DemoApp.WeatherForecast)target;\n        switch (propertyName)\n        {\n            case \"Date\": v.Date = (System.DateTime)value; return;\n            case \"TemperatureCelsius\": v.TemperatureCelsius = (System.Int32)value; return;\n            case \"Summary\": v.Summary = (System.String)value; return;\n            default: throw new ArgumentOutOfRangeException(\"propertyName\", $\"{propertyName} does not exist or is not settable\");\n        }\n    }\n    public object Read(string propertyName, object target)\n    {\n        var v = (DemoApp.WeatherForecast)target;\n        switch (propertyName)\n        {\n            case \"Date\": return v.Date;\n            case \"TemperatureCelsius\": return v.TemperatureCelsius;\n            case \"Summary\": return v.Summary;\n        }\n        return null;\n    }\n}\n Of course, you don't need to worry about any of that. But if you do need to peek behind the curtains, you can often more easily see what's going on when the code is source generated like this!. We're nearly finished, there's just one more change we need for our app to support the generated definitions. 4. Use the StaticDeserializerBuilder The final step is to find where you're currently creating an IDeserializer using a DeserializerBuilder. Replace the DeserializerBuilder with StaticDeserializerBuilder and pass in an instance of your StaticContext. For example: // Replace this ...\n// IDeserializer deserializer = new DeserializerBuilder()\n\n// With this:\n//                              👇 Static builder         👇 Your StaticContext type\nIDeserializer deserializer = new StaticDeserializerBuilder(new YamlStaticContext())\n    .WithNamingConvention(UnderscoredNamingConvention.Instance)\n    .Build();\n\nWeatherForecast p = deserializer.Deserialize<WeatherForecast>(yaml);\n You can still customize your conventions as before, but now when you call Deserialize<T> YamlDotNet uses your StaticContext and generated IObjectAccessors to deserialize the YAML into your strongly typed object. Serializing works in much the same way: // Use the StaticSerializerBuilder and pass in your custom StaticContext\nISerializer serializer = new StaticSerializerBuilder(new YamlStaticContext())\n    .EnsureRoundtrip()\n    .Build();\n\nvar forecast = new WeatherForecast\n{\n    Date = DateTime.UtcNow,\n    Summary = \"Sunny\",\n    TemperatureCelsius = 23,\n};\n\n// Serialize the object as normal\nstring json = serializer.Serialize(forecast);\n And that's it. You now have NativeAOT compatible YAML serialization and deserialization, all thanks to the good work of the YamlDotNet maintainers! Summary In this post I showed how you can use the YamlDotNet library to deserialize YAML into a strongly typed object. I then discussed some of the pros and cons of Native AOT, and how source generation can help work around the lack of reflection in Native AOT. Finally, I showed how to enable a source generator for YamlDotNet so that you can make your YAML serialization and deserialization Native AOT-friendly."
  }
]
