[
  {
    "itemId": "https://devblogs.microsoft.com/visualstudio/?p=252703",
    "raw": "<p>For years, you’ve worked with Visual Studio’s solution file (*.SLN) format, and while it’s a core part of your project organization, we know the experience hasn’t always been smooth. Whether you’ve been modifying, maintaining, or trying to resolve merge conflicts, it’s often felt more like a hassle than it should be. We understand your frustrations, and we’re here to talk about why it’s time for a change and how a new solution file format can make your life easier.</p>\n<h2>The Challenges</h2>\n<p>Despite being a critical element of the Visual Studio ecosystem, the existing solution file format has its share of drawbacks:</p>\n<ul>\n<li>Manual Edits Are Tedious: Editing solution files manually is error-prone due to its tool-centric format. Small mistakes often lead to misconfigurations, disrupting your workflow.</li>\n<li>Merge Conflicts Are a Constant Issue: In team environments, merge conflicts in solution files can cause lost work, corrupted files, and delays, making it harder to focus on building software.</li>\n<li>Verbosity and Redundancy: Solution files start with over 200 characters, and as you add projects, they quickly become bloated with duplicate GUIDs and metadata, cluttering your work.</li>\n<li>No Real Benefit from Duplication: Redundant references to project names and solution items provide little value and only add confusion, taking up space without improving your workflow.</li>\n<li>Non-Standard File Format: The .SLN file format is specific to Visual Studio and not a widely recognized standard, which limits its compatibility with external tools and automation.</li>\n</ul>\n<h3>To help you visualize these challenges, here&#8217;s an example of a traditional Visual Studio solution file:</h3>\n<pre class=\"prettyprint language-txt\"><code class=\"language-txt\">Microsoft Visual Studio Solution File, Format Version 12.00\n# Visual Studio Version 17\nVisualStudioVersion = 17.9.34511.98\nMinimumVisualStudioVersion = 10.0.40219.1\nProject(\"{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}\") = \"DotNetMonitorWebApp\", \"DotNetMonitorWebApp\\DotNetMonitorWebApp.csproj\", \"{1385B389-B20C-4D19-8FE0-85629BC41343}\"\nEndProject\nGlobal\nGlobalSection(SolutionConfigurationPlatforms) = preSolution\nDebug|Any CPU = Debug|Any CPU\nRelease|Any CPU = Release|Any CPU\nEndGlobalSection\nGlobalSection(ProjectConfigurationPlatforms) = postSolution\n{1385B389-B20C-4D19-8FE0-85629BC41343}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n{1385B389-B20C-4D19-8FE0-85629BC41343}.Debug|Any CPU.Build.0 = Debug|Any CPU\n{1385B389-B20C-4D19-8FE0-85629BC41343}.Release|Any CPU.ActiveCfg = Release|Any CPU\n{1385B389-B20C-4D19-8FE0-85629BC41343}.Release|Any CPU.Build.0 = Release|Any CPU\nEndGlobalSection\nGlobalSection(SolutionProperties) = preSolution\nHideSolutionNode = FALSE\nEndGlobalSection\nGlobalSection(ExtensibilityGlobals) = postSolution\nSolutionGuid = {C12E911E-FAA3-4ACE-B6BF-C3605E866483}\nEndGlobalSection\nEndGlobal\n</code></pre>\n<h2>Simplifying the Solution File</h2>\n<p>We’ve made several improvements with the new solution file format to enhance your experience. These changes include a more readable and editable structure, the use of a XML format, and the preservation of whitespace and comments for better organization. The new format is minimalistic, optimizing performance for faster load times, and reduces merge conflicts in version control. It also ensures compatibility with older Visual Studio versions and aligns with certain MSBuild conventions for smoother integration with other tools.</p>\n<p>Here’s a detailed look at these enhancements:</p>\n<ul>\n<li><strong>Human-Readable and Editable:</strong> The new solution file format is designed with clarity in mind, making it easy for developers to read and modify project configurations. This eliminates much of the confusion and errors that arose from manually editing complex files.</li>\n<li><strong>Standardized XML Format:</strong> We’ve moved away from a proprietary format and adopted XML for the solution file structure. XML is widely understood, offering flexibility and standardization for greater ease of use.</li>\n<li><strong>Whitespace and Comment Preservation:</strong> We now preserve whitespace and comments within solution files when saving them, ensuring your formatting stays intact and helping to maintain an organized file.</li>\n<li><strong>Minimalistic Footprint:</strong> The new format adopts sensible defaults, keeping the solution file minimal and optimizing performance. This leads to efficient use of resources, even for large solutions.</li>\n<li><strong>Reduced Merge Conflicts:</strong> By simplifying the file structure, we&#8217;ve reduced the likelihood of merge conflicts in version control systems. This means fewer headaches when collaborating with teammates and easier management of changes.</li>\n<li><strong>Compatibility with Older Visual Studio Versions: </strong>We’ve ensured compatibility with Visual Studio Dev 17.14, allowing a smooth transition between the old and new file formats without disrupting your workflow.</li>\n<li><strong>Alignment with MSBuild</strong>: The new format aligns with certain MSBuild conventions, which enhances its integration with other tools and platforms, ensuring smoother interoperability.</li>\n</ul>\n<h3>To give you a glimpse into the simplicity of the new .SLNX format, here&#8217;s an example:</h3>\n<pre class=\"prettyprint language-txt\"><code class=\"language-txt\">&lt;Solution&gt;\n&lt;Project Path=\"DotNetMonitorWebApp\\DotNetMonitorWebApp.csproj\" /&gt;\n&lt;/Solution&gt;\n</code></pre>\n<p>To save a solution in the new file format, select the solution node in Solution Explorer, then go to File -&gt; Save Solution As… and choose the &#8220;XML Solution File (*.SLNX)&#8221; format. The solution will then be saved as a .SLNX file.</p>\n<p><img fetchpriority=\"high\" decoding=\"async\" class=\"alignnone wp-image-252704\" src=\"https://devblogs.microsoft.com/visualstudio/wp-content/uploads/sites/4/2025/03/a-screenshot-of-a-computer-description-automatica.png\" alt=\"Saving a XML file in the new format\" width=\"722\" height=\"115\" srcset=\"https://devblogs.microsoft.com/visualstudio/wp-content/uploads/sites/4/2025/03/a-screenshot-of-a-computer-description-automatica.png 552w, https://devblogs.microsoft.com/visualstudio/wp-content/uploads/sites/4/2025/03/a-screenshot-of-a-computer-description-automatica-300x48.png 300w\" sizes=\"(max-width: 722px) 100vw, 722px\" /></p>\n<p>To open a .SLNX file, use the File -&gt; Open command and select the .SLNX file. Note that Visual Studio is not registered as the default handler for .SLNX files, so they won’t open in Visual Studio by default.</p>\n<p><iframe title=\"YouTube video player\" src=\"https://www.youtube.com/embed/Iwc3jGCbt5A?si=Q4fkgrx2lsRT50E8\" width=\"800\" height=\"450\" frameborder=\"0\" allowfullscreen=\"allowfullscreen\"></iframe></p>\n<h2>Frequently Asked Questions (FAQ)</h2>\n<p>If you have questions about or are curious to learn more about the format and our plans, have a read of the FAQ section below.</p>\n<h3>What is a solution file?</h3>\n<p>A Visual Studio solution file (.SLN extension) is essential for organizing and managing multiple projects within Visual Studio. It acts as a container that maintains references between projects, build configurations, and other settings, defining how the solution is structured, and which projects are involved.</p>\n<h3>What support is available for the .SLNX format across different tools and environments?</h3>\n<p>We are currently working on providing support for the. SLNX format across various tools and environments. Here&#8217;s what you can expect:</p>\n<ul>\n<li>MSBuild Support: MSBuild now fully supports the <strong>.SLNX</strong> format, enabling seamless integration with the .NET and C++ build systems. This support allows for efficient building, adding, and removing projects within <strong>.SLNX</strong> files using MSBuild commands.</li>\n<li>.NET CLI Support: The <a href=\"https://devblogs.microsoft.com/dotnet/introducing-slnx-support-dotnet-cli\"><strong>.NET CLI</strong> </a>has been updated to handle <strong>.SLNX</strong> files, providing consistent experience for managing solutions directly from the command line.</li>\n<li>C# Dev Kit Support: The <strong>C# Dev Kit</strong> for VS Code now fully supports the <strong>.SLNX</strong> format, making it easier to work with solution files within the VS Code environment.</li>\n</ul>\n<h3>What about third-party tool support?</h3>\n<p>The <strong>.SLNX</strong> file format is designed for <strong>wide adoption</strong>, but we recommend <strong>waiting until it’s more finalized</strong> before fully adopting it.</p>\n<p>If you&#8217;re using tools that rely on either the .SLN or .SLNX file formats, we have\ndeveloped an open source serializer that supports both formats: <a href=\"https://github.com/microsoft/vs-solutionpersistence\">vs-solutionpersistence</a>.</p>\n<h3>Can I edit .SLNX files without unloading?</h3>\n<p>Like .SLN files, .SLNX files must be unloaded to be edited in Visual Studio. However, we don&#8217;t anticipate many cases where manual editing will be\nnecessary. If you&#8217;d like to see support for editing without unloading, we\nencourage you to upvote the community request.</p>\n<h3>What about solution filters?</h3>\n<p>Solution filters (.SLNf files), which help improve load and run times, will\ncontinue to work with the new .SLNX format — but keep in mind that filter files are tied to a specific solution file. If you migrate your solution from .SLN to\n.SLNX, you’ll need to update the filter file to reference the new .SLNX file, otherwise it will still try to open the old .SLN file.</p>\n<h3>Will extensions continue to support. SLNX?</h3>\n<p>We designed the .SLNX file format to be transparent to extensions. Existing\nVisual Studio APIs that work with .SLN files should continue to work without\nrequiring changes. However, if your extension directly edits solution files, it will need to support both .SLN and .SLNX formats. To learn more about working with solution files in extensions, we recommend checking out the <a href=\"https://github.com/microsoft/vs-solutionpersistence\">vs-solutionpersistence</a> library, which provides useful APIs for solution file manipulation</p>\n<h3>How do I migrate from the old .SLN format to .SLNX?</h3>\n<p>Migrating from the traditional <strong>.SLN</strong> format to the new <strong>.SLNX</strong> format is <strong>simple</strong>, and there are two ways to do it:</p>\n<ul>\n<li>\n<h4>Using the .NET CLI (for .NET projects)</h4>\n</li>\n</ul>\n<p style=\"padding-left: 40px;\">For .NET developers, you can migrate your solution using the following command:</p>\n<p style=\"padding-left: 40px;\"><em><code>dotnet SLN &lt;YourSolutionFile.SLN&gt; migrate</code> </em></p>\n<p style=\"padding-left: 40px;\">Replace &lt;YourSolutionFile.SLN&gt; with the actual name of your solution file. This command will generate a .SLNX file from your existing .SLN file.</p>\n<ul>\n<li>\n<h4><strong>Using Visual Studio (recommended for all languages)</strong></h4>\n</li>\n</ul>\n<p style=\"padding-left: 40px;\">Once the <strong>.SLNX</strong> feature is enabled, you can save your solution in the new format directly from Visual Studio — this method works for all supported project types, including <strong>C++, Python, JS/TS</strong>, and others.</p>\n<p style=\"padding-left: 40px;\">To save in the new format:</p>\n<ol>\n<li style=\"list-style-type: none;\">\n<ol>\n<li>Right-click the <strong>solution node</strong> in <strong>Solution Explorer</strong>.</li>\n<li>Select <strong>File -&gt; Save Solution As&#8230;</strong>.</li>\n<li>In the file type dropdown, choose <strong>Xml Solution File (*.SLNX)</strong>.</li>\n<li>Click <strong>Save</strong>.</li>\n</ol>\n</li>\n</ol>\n<h3>Can I have both .SLN and .SLNX files in the same repo? What’s the best practice for teams where some clients still use .SLN and others want to move to .SLNX?</h3>\n<p>We strongly recommend <strong>not having both .SLN and .SLNX files in the same repository</strong>. This can cause issues such as:</p>\n<ul>\n<li>Commands like dotnet SLN will not automatically detect the correct solution file.</li>\n<li>Keeping both files manually in sync can be error-prone and lead to confusion across teams.</li>\n</ul>\n<p>If you absolutely need to maintain both for compatibility reasons (e.g., during a phased migration), consider using a <strong>sync tool</strong> like this one: <a href=\"https://github.com/edvilme/dotnet-sln-sync\">dotnet-SLN-sync</a>, which helps automatically keep .SLN and .SLNX files aligned.</p>\n<p>However, the recommended best practice is to <strong>coordinate the transition with all clients and move fully to .SLNX once the entire team or organization is ready</strong>.</p>\n<p><span style=\"font-size: 10pt;\"><strong>Disclaimer:</strong> <em>The dotnet-sln-sync tool is a community-developed project and is not maintained or supported by Microsoft. Please use it at your discretion.</em></span></p>\n<h3>Will file globbing be supported?</h3>\n<p>The current solution design lists all projects and their locations directly in the solution file. This approach allows Visual Studio to begin loading projects almost immediately.</p>\n<p>Supporting globbing, would require scanning the file system and evaluating potentially complex patterns to identify matching projects. Especially for larger repositories, this additional step can significantly slow down the loading process which is why globbing is not currently supported.</p>\n<p>For those unfamiliar, globbing refers to pattern matching used to dynamically resolve file paths, commonly seen in many build systems and tools. You can read more about this concept <a href=\"https://en.wikipedia.org/wiki/Glob_(programming)\">here.</a></p>\n<h3>Why did you choose XML for .SLNX?</h3>\n<p>We selected XML because it&#8217;s a widely used format, and it&#8217;s the same format used by project files. XML in project files supports powerful evaluation and execution capabilities, but we want to keep .SLNX simple for now. We’re focused on maintaining the basic functionality like .SLN while keeping things straightforward.</p>\n<h3>What are the minimum supported tooling versions for building with &gt;SLNX format, and what scenarios are currently unsupported?</h3>\n<p>To build with the <strong>.SLNX </strong>format:</p>\n<ul>\n<li>If you’re building with <strong>.NET</strong>, ensure the project’s <strong>global.json</strong> is set to a minimum of <strong>.NET 9.0.200 SDK</strong>.</li>\n<li>If you’re building with <strong>MSBuild</strong>, make sure your build tools are using <strong>Visual Studio</strong> or <strong>Build Tools for Visual Studio</strong> version <strong>17.13</strong> or later.</li>\n</ul>\n<h2><strong>Looking Ahead: Your Feedback Is Key</strong></h2>\n<p>Your feedback shapes the future of Visual Studio, and we truly appreciate the time you take to share it. Whether it’s a bug report or a new feature idea, your insights help us build a better experience for you.</p>\n<p><img src=\"https://s.w.org/images/core/emoji/15.0.3/72x72/1f4e2.png\" alt=\"📢\" class=\"wp-smiley\" style=\"height: 1em; max-height: 1em;\" /> <strong>Got feedback? Let us know!</strong></p>\n<ul>\n<li><strong>Report a Problem</strong> – If something isn’t working as expected, tell us on <a href=\"https://developercommunity.visualstudio.com/\">Developer Community</a>.</li>\n<li><strong>Suggest a Feature</strong> – Have an idea to make Visual Studio even better? We’re listening!</li>\n</ul>\n<p>To stay in the loop on the latest updates, tips, and discussions from the Visual Studio team connect with the us on the <a href=\"https://visualstudio.microsoft.com/hub/\">Visual Studio Hub</a> .</p>\n<p>The post <a href=\"https://devblogs.microsoft.com/visualstudio/new-simpler-solution-file-format/\">New, Simpler Solution File Format</a> appeared first on <a href=\"https://devblogs.microsoft.com/visualstudio\">Visual Studio Blog</a>.</p>\n",
    "sanitized": "For years, you’ve worked with Visual Studio’s solution file (*.SLN) format, and while it’s a core part of your project organization, we know the experience hasn’t always been smooth. Whether you’ve been modifying, maintaining, or trying to resolve merge conflicts, it’s often felt more like a hassle than it should be. We understand your frustrations, and we’re here to talk about why it’s time for a change and how a new solution file format can make your life easier.\nThe Challenges\nDespite being a critical element of the Visual Studio ecosystem, the existing solution file format has its share of drawbacks:\n\nManual Edits Are Tedious: Editing solution files manually is error-prone due to its tool-centric format. Small mistakes often lead to misconfigurations, disrupting your workflow.\nMerge Conflicts Are a Constant Issue: In team environments, merge conflicts in solution files can cause lost work, corrupted files, and delays, making it harder to focus on building software.\nVerbosity and Redundancy: Solution files start with over 200 characters, and as you add projects, they quickly become bloated with duplicate GUIDs and metadata, cluttering your work.\nNo Real Benefit from Duplication: Redundant references to project names and solution items provide little value and only add confusion, taking up space without improving your workflow.\nNon-Standard File Format: The .SLN file format is specific to Visual Studio and not a widely recognized standard, which limits its compatibility with external tools and automation.\n\nTo help you visualize these challenges, here’s an example of a traditional Visual Studio solution file:\nMicrosoft Visual Studio Solution File, Format Version 12.00\n# Visual Studio Version 17\nVisualStudioVersion = 17.9.34511.98\nMinimumVisualStudioVersion = 10.0.40219.1\nProject(\"{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}\") = \"DotNetMonitorWebApp\", \"DotNetMonitorWebApp\\DotNetMonitorWebApp.csproj\", \"{1385B389-B20C-4D19-8FE0-85629BC41343}\"\nEndProject\nGlobal\nGlobalSection(SolutionConfigurationPlatforms) = preSolution\nDebug|Any CPU = Debug|Any CPU\nRelease|Any CPU = Release|Any CPU\nEndGlobalSection\nGlobalSection(ProjectConfigurationPlatforms) = postSolution\n{1385B389-B20C-4D19-8FE0-85629BC41343}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n{1385B389-B20C-4D19-8FE0-85629BC41343}.Debug|Any CPU.Build.0 = Debug|Any CPU\n{1385B389-B20C-4D19-8FE0-85629BC41343}.Release|Any CPU.ActiveCfg = Release|Any CPU\n{1385B389-B20C-4D19-8FE0-85629BC41343}.Release|Any CPU.Build.0 = Release|Any CPU\nEndGlobalSection\nGlobalSection(SolutionProperties) = preSolution\nHideSolutionNode = FALSE\nEndGlobalSection\nGlobalSection(ExtensibilityGlobals) = postSolution\nSolutionGuid = {C12E911E-FAA3-4ACE-B6BF-C3605E866483}\nEndGlobalSection\nEndGlobal\n\nSimplifying the Solution File\nWe’ve made several improvements with the new solution file format to enhance your experience. These changes include a more readable and editable structure, the use of a XML format, and the preservation of whitespace and comments for better organization. The new format is minimalistic, optimizing performance for faster load times, and reduces merge conflicts in version control. It also ensures compatibility with older Visual Studio versions and aligns with certain MSBuild conventions for smoother integration with other tools.\nHere’s a detailed look at these enhancements:\n\nHuman-Readable and Editable: The new solution file format is designed with clarity in mind, making it easy for developers to read and modify project configurations. This eliminates much of the confusion and errors that arose from manually editing complex files.\nStandardized XML Format: We’ve moved away from a proprietary format and adopted XML for the solution file structure. XML is widely understood, offering flexibility and standardization for greater ease of use.\nWhitespace and Comment Preservation: We now preserve whitespace and comments within solution files when saving them, ensuring your formatting stays intact and helping to maintain an organized file.\nMinimalistic Footprint: The new format adopts sensible defaults, keeping the solution file minimal and optimizing performance. This leads to efficient use of resources, even for large solutions.\nReduced Merge Conflicts: By simplifying the file structure, we’ve reduced the likelihood of merge conflicts in version control systems. This means fewer headaches when collaborating with teammates and easier management of changes.\nCompatibility with Older Visual Studio Versions: We’ve ensured compatibility with Visual Studio Dev 17.14, allowing a smooth transition between the old and new file formats without disrupting your workflow.\nAlignment with MSBuild: The new format aligns with certain MSBuild conventions, which enhances its integration with other tools and platforms, ensuring smoother interoperability.\n\nTo give you a glimpse into the simplicity of the new .SLNX format, here’s an example:\n<Solution>\n<Project Path=\"DotNetMonitorWebApp\\DotNetMonitorWebApp.csproj\" />\n</Solution>\n\nTo save a solution in the new file format, select the solution node in Solution Explorer, then go to File -> Save Solution As… and choose the “XML Solution File (*.SLNX)” format. The solution will then be saved as a .SLNX file.\n\nTo open a .SLNX file, use the File -> Open command and select the .SLNX file. Note that Visual Studio is not registered as the default handler for .SLNX files, so they won’t open in Visual Studio by default.\n\nFrequently Asked Questions (FAQ)\nIf you have questions about or are curious to learn more about the format and our plans, have a read of the FAQ section below.\nWhat is a solution file?\nA Visual Studio solution file (.SLN extension) is essential for organizing and managing multiple projects within Visual Studio. It acts as a container that maintains references between projects, build configurations, and other settings, defining how the solution is structured, and which projects are involved.\nWhat support is available for the .SLNX format across different tools and environments?\nWe are currently working on providing support for the. SLNX format across various tools and environments. Here’s what you can expect:\n\nMSBuild Support: MSBuild now fully supports the .SLNX format, enabling seamless integration with the .NET and C++ build systems. This support allows for efficient building, adding, and removing projects within .SLNX files using MSBuild commands.\n.NET CLI Support: The .NET CLI has been updated to handle .SLNX files, providing consistent experience for managing solutions directly from the command line.\nC# Dev Kit Support: The C# Dev Kit for VS Code now fully supports the .SLNX format, making it easier to work with solution files within the VS Code environment.\n\nWhat about third-party tool support?\nThe .SLNX file format is designed for wide adoption, but we recommend waiting until it’s more finalized before fully adopting it.\nIf you’re using tools that rely on either the .SLN or .SLNX file formats, we have\ndeveloped an open source serializer that supports both formats: vs-solutionpersistence.\nCan I edit .SLNX files without unloading?\nLike .SLN files, .SLNX files must be unloaded to be edited in Visual Studio. However, we don’t anticipate many cases where manual editing will be\nnecessary. If you’d like to see support for editing without unloading, we\nencourage you to upvote the community request.\nWhat about solution filters?\nSolution filters (.SLNf files), which help improve load and run times, will\ncontinue to work with the new .SLNX format — but keep in mind that filter files are tied to a specific solution file. If you migrate your solution from .SLN to\n.SLNX, you’ll need to update the filter file to reference the new .SLNX file, otherwise it will still try to open the old .SLN file.\nWill extensions continue to support. SLNX?\nWe designed the .SLNX file format to be transparent to extensions. Existing\nVisual Studio APIs that work with .SLN files should continue to work without\nrequiring changes. However, if your extension directly edits solution files, it will need to support both .SLN and .SLNX formats. To learn more about working with solution files in extensions, we recommend checking out the vs-solutionpersistence library, which provides useful APIs for solution file manipulation\nHow do I migrate from the old .SLN format to .SLNX?\nMigrating from the traditional .SLN format to the new .SLNX format is simple, and there are two ways to do it:\n\n\nUsing the .NET CLI (for .NET projects)\n\n\nFor .NET developers, you can migrate your solution using the following command:\ndotnet SLN <YourSolutionFile.SLN> migrate \nReplace <YourSolutionFile.SLN> with the actual name of your solution file. This command will generate a .SLNX file from your existing .SLN file.\n\n\nUsing Visual Studio (recommended for all languages)\n\n\nOnce the .SLNX feature is enabled, you can save your solution in the new format directly from Visual Studio — this method works for all supported project types, including C++, Python, JS/TS, and others.\nTo save in the new format:\n\n\n\nRight-click the solution node in Solution Explorer.\nSelect File -> Save Solution As….\nIn the file type dropdown, choose Xml Solution File (*.SLNX).\nClick Save.\n\n\n\nCan I have both .SLN and .SLNX files in the same repo? What’s the best practice for teams where some clients still use .SLN and others want to move to .SLNX?\nWe strongly recommend not having both .SLN and .SLNX files in the same repository. This can cause issues such as:\n\nCommands like dotnet SLN will not automatically detect the correct solution file.\nKeeping both files manually in sync can be error-prone and lead to confusion across teams.\n\nIf you absolutely need to maintain both for compatibility reasons (e.g., during a phased migration), consider using a sync tool like this one: dotnet-SLN-sync, which helps automatically keep .SLN and .SLNX files aligned.\nHowever, the recommended best practice is to coordinate the transition with all clients and move fully to .SLNX once the entire team or organization is ready.\nDisclaimer: The dotnet-sln-sync tool is a community-developed project and is not maintained or supported by Microsoft. Please use it at your discretion.\nWill file globbing be supported?\nThe current solution design lists all projects and their locations directly in the solution file. This approach allows Visual Studio to begin loading projects almost immediately.\nSupporting globbing, would require scanning the file system and evaluating potentially complex patterns to identify matching projects. Especially for larger repositories, this additional step can significantly slow down the loading process which is why globbing is not currently supported.\nFor those unfamiliar, globbing refers to pattern matching used to dynamically resolve file paths, commonly seen in many build systems and tools. You can read more about this concept here.\nWhy did you choose XML for .SLNX?\nWe selected XML because it’s a widely used format, and it’s the same format used by project files. XML in project files supports powerful evaluation and execution capabilities, but we want to keep .SLNX simple for now. We’re focused on maintaining the basic functionality like .SLN while keeping things straightforward.\nWhat are the minimum supported tooling versions for building with >SLNX format, and what scenarios are currently unsupported?\nTo build with the .SLNX format:\n\nIf you’re building with .NET, ensure the project’s global.json is set to a minimum of .NET 9.0.200 SDK.\nIf you’re building with MSBuild, make sure your build tools are using Visual Studio or Build Tools for Visual Studio version 17.13 or later.\n\nLooking Ahead: Your Feedback Is Key\nYour feedback shapes the future of Visual Studio, and we truly appreciate the time you take to share it. Whether it’s a bug report or a new feature idea, your insights help us build a better experience for you.\n Got feedback? Let us know!\n\nReport a Problem – If something isn’t working as expected, tell us on Developer Community.\nSuggest a Feature – Have an idea to make Visual Studio even better? We’re listening!\n\nTo stay in the loop on the latest updates, tips, and discussions from the Visual Studio team connect with the us on the Visual Studio Hub .\nThe post New, Simpler Solution File Format appeared first on Visual Studio Blog."
  },
  {
    "itemId": "https://devblogs.microsoft.com/visualstudio/?p=252657",
    "raw": "<p>Debugging complex programs often feels like navigating a labyrinth of threads and stack traces. The challenge of understanding thread behaviors and tracing issues can be daunting, leading to longer development times and increased frustration. But now, there&#8217;s a solution that simplifies this process—introducing AI-powered thread summaries in <em>Parallel Stacks Window </em> with Visual Studio.</p>\n<p>To address these challenges, Visual Studio introduces two AI-powered features that make debugging more intuitive: <strong>thread summaries</strong> and <strong>app summarization</strong>. These enhancements bring clarity to your debugging workflow by providing concise explanations of thread activity and interactive AI-driven assistance.</p>\n<h2>AI-generated thread summaries</h2>\n<p>Understanding what each thread is doing at any given moment is crucial when working with parallel execution. The auto summaries feature in <em>Parallel Stacks Window </em>helps developers quickly gain context by generating AI-powered summaries for each thread. Instead of manually analyzing individual stack frames, you can now get a high-level overview at a glance.</p>\n<p>When you open the <em>Parallel Stacks Window</em>, these summaries appear at the top of each thread. These summaries provide a high-level overview of each thread&#8217;s current activity, helping you quickly grasp their purpose and status.</p>\n<p><img decoding=\"async\" width=\"1501\" height=\"692\" class=\"wp-image-252658\" src=\"https://devblogs.microsoft.com/visualstudio/wp-content/uploads/sites/4/2025/03/ai-summarization-of-threads.png\" alt=\"AI Summarization of Threads\" srcset=\"https://devblogs.microsoft.com/visualstudio/wp-content/uploads/sites/4/2025/03/ai-summarization-of-threads.png 1501w, https://devblogs.microsoft.com/visualstudio/wp-content/uploads/sites/4/2025/03/ai-summarization-of-threads-300x138.png 300w, https://devblogs.microsoft.com/visualstudio/wp-content/uploads/sites/4/2025/03/ai-summarization-of-threads-1024x472.png 1024w, https://devblogs.microsoft.com/visualstudio/wp-content/uploads/sites/4/2025/03/ai-summarization-of-threads-768x354.png 768w\" sizes=\"(max-width: 1501px) 100vw, 1501px\" /></p>\n<h2>App Summarization with Copilot</h2>\n<p>Taking AI assistance a step further, the app summarization feature in <em>Parallel Stacks Window</em> enables developers to interactively explore and resolve debugging challenges with Copilot Chat. This feature doesn’t just summarize— it allows you to ask questions, get explanations, and receive AI-powered suggestions tailored to the debugging context.</p>\n<p>Instead of just presenting raw call stacks, this integration provides clear overviews of each thread&#8217;s actions, potential issues, and fixes. This results in a more intuitive approach to multi-threaded debugging, significantly reducing the time needed to understand and resolve complex thread interactions.</p>\n<p><img decoding=\"async\" width=\"1238\" height=\"833\" class=\"wp-image-252659\" src=\"https://devblogs.microsoft.com/visualstudio/wp-content/uploads/sites/4/2025/03/copilot-chat-integration-in-parallel-stack-deadloc-1.png\" alt=\"Copilot Chat Integration In Parallel Stack Deadlock example \" srcset=\"https://devblogs.microsoft.com/visualstudio/wp-content/uploads/sites/4/2025/03/copilot-chat-integration-in-parallel-stack-deadloc-1.png 1238w, https://devblogs.microsoft.com/visualstudio/wp-content/uploads/sites/4/2025/03/copilot-chat-integration-in-parallel-stack-deadloc-1-300x202.png 300w, https://devblogs.microsoft.com/visualstudio/wp-content/uploads/sites/4/2025/03/copilot-chat-integration-in-parallel-stack-deadloc-1-1024x689.png 1024w, https://devblogs.microsoft.com/visualstudio/wp-content/uploads/sites/4/2025/03/copilot-chat-integration-in-parallel-stack-deadloc-1-768x517.png 768w\" sizes=\"(max-width: 1238px) 100vw, 1238px\" /></p>\n<p>To use this feature, simply click the “summarize” button at the top of the <em>Parallel Stacks Window</em>. This will open the Copilot Chat on the side, preloaded with relevant thread context. You can then engage in an interactive, AI-powered conversation to resolve common threading issues such as deadlocks and race conditions while optimizing your threading model for better efficiency and reliability.Bottom of Form</p>\n<p>By seamlessly combining parallel stack insights with Copilot Chat&#8217;s app summaries, Visual Studio streamlines your debugging workflow, empowering you to diagnose, understand, and address threading issues with greater confidence and speed.</p>\n<h2>Try It Out</h2>\n<p>Both AI-generated<strong> thread summaries</strong> and <strong>app summarization </strong>aim to reduce debugging time and improve developer productivity. Whether you need a high-level overview or an in-depth analysis of a thread, these features provide the clarity and intelligence required to navigate complex debugging scenarios.</p>\n<p>Please try it out and give us some <a href=\"https://developercommunity.microsoft.com/VisualStudio\">feedback</a>. Your insights and suggestions are invaluable as we strive to make Visual Studio the best development environment for you.</p>\n<p>Thank you for helping us make Visual Studio better every day.</p>\n<p>The post <a href=\"https://devblogs.microsoft.com/visualstudio/make-more-sense-of-multithreaded-debugging/\">Make more sense of multithreaded debugging</a> appeared first on <a href=\"https://devblogs.microsoft.com/visualstudio\">Visual Studio Blog</a>.</p>\n",
    "sanitized": "Debugging complex programs often feels like navigating a labyrinth of threads and stack traces. The challenge of understanding thread behaviors and tracing issues can be daunting, leading to longer development times and increased frustration. But now, there’s a solution that simplifies this process—introducing AI-powered thread summaries in Parallel Stacks Window  with Visual Studio.\nTo address these challenges, Visual Studio introduces two AI-powered features that make debugging more intuitive: thread summaries and app summarization. These enhancements bring clarity to your debugging workflow by providing concise explanations of thread activity and interactive AI-driven assistance.\nAI-generated thread summaries\nUnderstanding what each thread is doing at any given moment is crucial when working with parallel execution. The auto summaries feature in Parallel Stacks Window helps developers quickly gain context by generating AI-powered summaries for each thread. Instead of manually analyzing individual stack frames, you can now get a high-level overview at a glance.\nWhen you open the Parallel Stacks Window, these summaries appear at the top of each thread. These summaries provide a high-level overview of each thread’s current activity, helping you quickly grasp their purpose and status.\n\nApp Summarization with Copilot\nTaking AI assistance a step further, the app summarization feature in Parallel Stacks Window enables developers to interactively explore and resolve debugging challenges with Copilot Chat. This feature doesn’t just summarize— it allows you to ask questions, get explanations, and receive AI-powered suggestions tailored to the debugging context.\nInstead of just presenting raw call stacks, this integration provides clear overviews of each thread’s actions, potential issues, and fixes. This results in a more intuitive approach to multi-threaded debugging, significantly reducing the time needed to understand and resolve complex thread interactions.\n\nTo use this feature, simply click the “summarize” button at the top of the Parallel Stacks Window. This will open the Copilot Chat on the side, preloaded with relevant thread context. You can then engage in an interactive, AI-powered conversation to resolve common threading issues such as deadlocks and race conditions while optimizing your threading model for better efficiency and reliability.Bottom of Form\nBy seamlessly combining parallel stack insights with Copilot Chat’s app summaries, Visual Studio streamlines your debugging workflow, empowering you to diagnose, understand, and address threading issues with greater confidence and speed.\nTry It Out\nBoth AI-generated thread summaries and app summarization aim to reduce debugging time and improve developer productivity. Whether you need a high-level overview or an in-depth analysis of a thread, these features provide the clarity and intelligence required to navigate complex debugging scenarios.\nPlease try it out and give us some feedback. Your insights and suggestions are invaluable as we strive to make Visual Studio the best development environment for you.\nThank you for helping us make Visual Studio better every day.\nThe post Make more sense of multithreaded debugging appeared first on Visual Studio Blog."
  },
  {
    "itemId": "https://devblogs.microsoft.com/visualstudio/?p=252652",
    "raw": "<p><img decoding=\"async\" class=\"alignnone wp-image-252653\" src=\"https://devblogs.microsoft.com/visualstudio/wp-content/uploads/sites/4/2025/03/word-image-252652-1.jpeg\" alt=\"GitHub Copilot, GPT-4o Copilot\" width=\"1431\" height=\"752\" srcset=\"https://devblogs.microsoft.com/visualstudio/wp-content/uploads/sites/4/2025/03/word-image-252652-1.jpeg 1431w, https://devblogs.microsoft.com/visualstudio/wp-content/uploads/sites/4/2025/03/word-image-252652-1-300x158.jpeg 300w, https://devblogs.microsoft.com/visualstudio/wp-content/uploads/sites/4/2025/03/word-image-252652-1-1024x538.jpeg 1024w, https://devblogs.microsoft.com/visualstudio/wp-content/uploads/sites/4/2025/03/word-image-252652-1-768x404.jpeg 768w\" sizes=\"(max-width: 1431px) 100vw, 1431px\" /></p>\n<p>We are excited to announce that the new GPT-4o Copilot code completion model is now available for GitHub Copilot users in Visual Studio starting in 17.14 Preview 2! This new model, based on GPT-4o mini, has undergone additional training on over 275,000 high-quality public repositories across more than 30 popular programming languages. As a result, developers can expect more accurate suggestions and better performance.</p>\n<h2>Try it out now!</h2>\n<p>For Visual Studio users who have yet to use GitHub Copilot, get started today! There’s even a free plan that includes 2,000 completions and 50 chats per month. You can<a href=\"https://learn.microsoft.com/en-us/visualstudio/ide/copilot-free-plan?view=vs-2022\"> sign up directly in Visual Studio</a> (version 17.8 or higher) or explore plans <a href=\"https://github.com/features/copilot/plans\">here</a>.</p>\n<p>Once you have enabled GitHub Copilot, try out the new model by going to Tools -&gt; Options -&gt; GitHub -&gt; Copilot -&gt; Copilot Completions and selecting &#8220;GPT-4o Copilot&#8221; in the dropdown. You can also access the settings by clicking the GitHub Copilot badge on the top right corner and go to Settings -&gt; Options. Note that there might be a delay on retrieving the latest model list for the first time, please try restarting Visual Studio if you don&#8217;t see the new GPT-4o model in the dropdown.</p>\n<p><img decoding=\"async\" class=\"alignnone wp-image-252654\" src=\"https://devblogs.microsoft.com/visualstudio/wp-content/uploads/sites/4/2025/03/word-image-252652-2.png\" alt=\"image highlighting how to customize models in the GitHub Copilot settings; GitHub -&gt; Copilot -&gt; Copilot Completions and selecting &quot;GPT-4o Copilot&quot; in the dropdown menu under Copilot Completions Model\" width=\"1055\" height=\"547\" srcset=\"https://devblogs.microsoft.com/visualstudio/wp-content/uploads/sites/4/2025/03/word-image-252652-2.png 1055w, https://devblogs.microsoft.com/visualstudio/wp-content/uploads/sites/4/2025/03/word-image-252652-2-300x156.png 300w, https://devblogs.microsoft.com/visualstudio/wp-content/uploads/sites/4/2025/03/word-image-252652-2-1024x531.png 1024w, https://devblogs.microsoft.com/visualstudio/wp-content/uploads/sites/4/2025/03/word-image-252652-2-768x398.png 768w\" sizes=\"(max-width: 1055px) 100vw, 1055px\" /></p>\n<h2>GPT-4o Copilot Access Notes</h2>\n<ul>\n<li>Copilot Pro users: The new model is available for you now in 17.14 Preview 2 and later.</li>\n<li>Copilot Business or Enterprise users: Your administrator needs to enable this model for your organization first by opting in to Editor preview features in the Copilot policy settings on github.com.</li>\n<li>Copilot Free users: using this model will count toward your 2,000 free monthly completions.</li>\n</ul>\n<p>We believe this model could further enhance your productivity in Visual Studio with higher quality code completions. We encourage you to give it a try and share your experience with us. Please share any feedback on Developer Community to help us deliver better experiences for all Visual Studio GitHub Copilot users. We are committed to improving developer productivity and joy with GitHub Copilot in Visual Studio and thank you for being part of this journey!</p>\n<p>We appreciate the time you’ve spent reporting issues/suggestions and hope you continue to give us feedback when using Visual Studio on what you like and what we can improve. Your feedback is critical to help us make Visual Studio the best tool it can be! You can share feedback with us via <a href=\"https://developercommunity.visualstudio.com/home%22%20/t%20%22_blank\">Developer Community</a>: report any bugs or issues via <a href=\"https://learn.microsoft.com/visualstudio/ide/how-to-report-a-problem-with-visual-studio?view=vs-2022\">report a problem</a> and <a href=\"https://developercommunity.microsoft.com/VisualStudio/suggest\">share your suggestions</a> for new features or improvements to existing ones.</p>\n<p>Stay connected with the Visual Studio team by following us on <a href=\"https://www.youtube.com/@visualstudio\" target=\"_blank\" rel=\"noopener\">YouTube</a>, <a href=\"https://twitter.com/VisualStudio\" target=\"_blank\" rel=\"noopener\">Twitter</a>, <a href=\"https://www.linkedin.com/showcase/microsoft-visual-studio/\" target=\"_blank\" rel=\"noopener\">LinkedIn</a>, <a href=\"https://www.twitch.tv/visualstudio\" target=\"_blank\" rel=\"noopener\">Twitch</a> and on <a href=\"https://learn.microsoft.com/en-us/visualstudio/?view=vs-2022\" target=\"_blank\" rel=\"noopener\">Microsoft Learn</a>.</p>\n<p>The post <a href=\"https://devblogs.microsoft.com/visualstudio/gpt-4o-copilot-code-completion-model-available-now-in-visual-studio-public-preview/\">GPT-4o Copilot code completion model available now in Visual Studio public preview</a> appeared first on <a href=\"https://devblogs.microsoft.com/visualstudio\">Visual Studio Blog</a>.</p>\n",
    "sanitized": "We are excited to announce that the new GPT-4o Copilot code completion model is now available for GitHub Copilot users in Visual Studio starting in 17.14 Preview 2! This new model, based on GPT-4o mini, has undergone additional training on over 275,000 high-quality public repositories across more than 30 popular programming languages. As a result, developers can expect more accurate suggestions and better performance.\nTry it out now!\nFor Visual Studio users who have yet to use GitHub Copilot, get started today! There’s even a free plan that includes 2,000 completions and 50 chats per month. You can sign up directly in Visual Studio (version 17.8 or higher) or explore plans here.\nOnce you have enabled GitHub Copilot, try out the new model by going to Tools -> Options -> GitHub -> Copilot -> Copilot Completions and selecting “GPT-4o Copilot” in the dropdown. You can also access the settings by clicking the GitHub Copilot badge on the top right corner and go to Settings -> Options. Note that there might be a delay on retrieving the latest model list for the first time, please try restarting Visual Studio if you don’t see the new GPT-4o model in the dropdown.\n\nGPT-4o Copilot Access Notes\n\nCopilot Pro users: The new model is available for you now in 17.14 Preview 2 and later.\nCopilot Business or Enterprise users: Your administrator needs to enable this model for your organization first by opting in to Editor preview features in the Copilot policy settings on github.com.\nCopilot Free users: using this model will count toward your 2,000 free monthly completions.\n\nWe believe this model could further enhance your productivity in Visual Studio with higher quality code completions. We encourage you to give it a try and share your experience with us. Please share any feedback on Developer Community to help us deliver better experiences for all Visual Studio GitHub Copilot users. We are committed to improving developer productivity and joy with GitHub Copilot in Visual Studio and thank you for being part of this journey!\nWe appreciate the time you’ve spent reporting issues/suggestions and hope you continue to give us feedback when using Visual Studio on what you like and what we can improve. Your feedback is critical to help us make Visual Studio the best tool it can be! You can share feedback with us via Developer Community: report any bugs or issues via report a problem and share your suggestions for new features or improvements to existing ones.\nStay connected with the Visual Studio team by following us on YouTube, Twitter, LinkedIn, Twitch and on Microsoft Learn.\nThe post GPT-4o Copilot code completion model available now in Visual Studio public preview appeared first on Visual Studio Blog."
  },
  {
    "itemId": "https://devblogs.microsoft.com/visualstudio/?p=252540",
    "raw": "<p>I’m very excited to share some great news with you! Starting today, if you’re a Visual Studio Professional or Enterprise subscriber, you can get free access to Cloud Academy from QA—no trial, and no credit card required. This exclusive benefit is included with your Visual Studio subscription and provides 12 months of free access to Cloud Academy. Act fast—<span style=\"text-decoration: underline;\">this is a limited-time offer</span>. Just log in to the Visual Studio subscriptions portal at my.visualstudio.com and activate your free plan.</p>\n<p><a href=\"https://devblogs.microsoft.com/visualstudio/wp-content/uploads/sites/4/2025/03/cloud-academy-qa-logo.png\" target=\"_blank\" rel=\"https://www.qa.com/en-us/self-paced-learning/ noopener\"><img decoding=\"async\" class=\"aligncenter wp-image-252543 size-full\" src=\"https://devblogs.microsoft.com/visualstudio/wp-content/uploads/sites/4/2025/03/cloud-academy-qa-logo.png\" alt=\"Image cloud academy qa logo\" width=\"660\" height=\"110\" srcset=\"https://devblogs.microsoft.com/visualstudio/wp-content/uploads/sites/4/2025/03/cloud-academy-qa-logo.png 660w, https://devblogs.microsoft.com/visualstudio/wp-content/uploads/sites/4/2025/03/cloud-academy-qa-logo-300x50.png 300w\" sizes=\"(max-width: 660px) 100vw, 660px\" /></a></p>\n<h2>What is Cloud Academy?</h2>\n<p>Cloud Academy, now part of QA, is a premier learning platform that helps developers and IT pros master cloud technologies. QA acquired Cloud Academy to expand its robust training offerings, bringing even more hands-on, outcome-based learning experiences to users worldwide.</p>\n<h2>Master Azure with Hands-on Learning</h2>\n<p>I know how important hands-on experience is when it comes to mastering cloud skills, and this benefit is packed with practical learning opportunities:</p>\n<ul>\n<li><strong>221 Hands-on Labs</strong></li>\n<li><strong>330 Lessons</strong></li>\n<li><strong>111 Exams</strong></li>\n<li><strong>23 Certification Exam Prep Courses</strong></li>\n</ul>\n<h2>Learn Your Way</h2>\n<p>One of my favorite features of this platform is how flexible the learning options are. You can choose the style that fits you best:</p>\n<ul>\n<li><strong>Guided Labs</strong>: Follow step-by-step instructions to complete tasks in a live Azure environment.</li>\n<li><strong>Challenge Labs:</strong> If you’re confident in your skills, jump right into a challenge without instructions and validate your work by submitting your code.</li>\n<li><strong>Cloud Sandboxes</strong>: Want to experiment? Practice freely in a safe, pre-configured Azure environment—no need to worry about using up your own Azure credits!</li>\n</ul>\n<h2>Smarter Learning with AI-Powered Smart Assessments &amp; Ela: Your Expert Learning Assistant</h2>\n<p>Another standout feature is Ela, your Expert Learning Assistant, and Smart Assessments—and I think you’re going to love it. Instead of working through lessons you’ve already mastered, these AI-driven assessments baseline your knowledge and adjust your learning path accordingly. That means less time reviewing what you already know and more time building new skills that matter.</p>\n<h2>Meet Ela: Your AI-Powered Learning Assistant</h2>\n<p>I&#8217;m really excited about this—Cloud Academy now includes Ela, an AI-driven learning assistant designed to enhance your self-paced learning experience. Ela is trained exclusively on QA-authored content, making it a trusted source for guidance whenever you need it.</p>\n<p>What makes Ela special? Unlike basic AI chatbots, Ela is built with real-world expertise to provide tutor-style support. Whether you&#8217;re looking for quick revision, knowledge checks, explanations of complex topics, or even lab-specific assistance, Ela is available 24/7 to help you along the way.</p>\n<p>Here are just a few of Ela&#8217;s standout capabilities:</p>\n<ul>\n<li><strong>Summarize</strong>: Quickly review key takeaways from course content for faster learning.</li>\n<li><strong>Test</strong>: Reinforce your understanding with knowledge checks before moving forward.</li>\n<li><strong>Explain</strong>: Get clear, practical explanations that connect theory to application.</li>\n</ul>\n<p>Ela isn&#8217;t just limited to courses—she also provides hands-on lab support, helping you troubleshoot code, find bugs, and clarify lab tasks.</p>\n<p>This is a game-changer for learners who want real-time, expert-level support while mastering Azure.</p>\n<h2>Get Ready for Certification</h2>\n<p>If you’ve been thinking about getting Azure certified, this benefit will help you get there faster. With <strong>23 certification prep courses,</strong> you’ll go beyond just memorization and apply what you learn through a mix of lessons, hands-on labs, quizzes, and exams.</p>\n<p><a href=\"https://devblogs.microsoft.com/visualstudio/wp-content/uploads/sites/4/2025/03/my.visualstudio.com-banner.png\" target=\"_blank\" rel=\"https://my.visualstudio.com noopener\"><img decoding=\"async\" class=\"aligncenter wp-image-252545 size-full\" src=\"https://devblogs.microsoft.com/visualstudio/wp-content/uploads/sites/4/2025/03/my.visualstudio.com-banner.png\" alt=\"Image my visualstudio com banner\" width=\"587\" height=\"143\" srcset=\"https://devblogs.microsoft.com/visualstudio/wp-content/uploads/sites/4/2025/03/my.visualstudio.com-banner.png 587w, https://devblogs.microsoft.com/visualstudio/wp-content/uploads/sites/4/2025/03/my.visualstudio.com-banner-300x73.png 300w\" sizes=\"(max-width: 587px) 100vw, 587px\" /></a></p>\n<h2>Activate Your Free Access Today</h2>\n<p>I can’t wait for you to try this out! Redeem your free Cloud Academy access now by logging into <a href=\"https://my.visualstudio.com\">my.visualstudio.com</a> and activating your license. Remember, this is limited time offer so act now before it’s gone.</p>\n<p>At Microsoft, we’re passionate about helping developers grow their skills and advance their careers. Everyone learns differently, and we know that access to the right tools and resources makes all the difference. Cloud Academy is another opportunity to expand your Azure expertise and bring valuable cloud solutions to your company—whether that’s improving efficiency, driving innovation, or scaling your applications to meet the demands of the future.</p>\n<h2>Check out the new Visual Studio Hub</h2>\n<p>Stay connected with everything Visual Studio in one place! Visit the <a href=\"https://aka.ms/vshub\">Visual Studio Hub </a>for the latest release notes, YouTube videos, social updates, and community discussions.</p>\n<p>Let me know your thoughts about our VS subscriber benefits—you can reach me on <a href=\"https://linkedin.com/in/jimharrer\">LinkedIn</a>!</p>\n<p>The post <a href=\"https://devblogs.microsoft.com/visualstudio/cloud-academy-visual-studio-subscription-benefit/\">Unlock Free Access to Cloud Academy: A New Benefit for Visual Studio Subscribers</a> appeared first on <a href=\"https://devblogs.microsoft.com/visualstudio\">Visual Studio Blog</a>.</p>\n",
    "sanitized": "I’m very excited to share some great news with you! Starting today, if you’re a Visual Studio Professional or Enterprise subscriber, you can get free access to Cloud Academy from QA—no trial, and no credit card required. This exclusive benefit is included with your Visual Studio subscription and provides 12 months of free access to Cloud Academy. Act fast—this is a limited-time offer. Just log in to the Visual Studio subscriptions portal at my.visualstudio.com and activate your free plan.\n\nWhat is Cloud Academy?\nCloud Academy, now part of QA, is a premier learning platform that helps developers and IT pros master cloud technologies. QA acquired Cloud Academy to expand its robust training offerings, bringing even more hands-on, outcome-based learning experiences to users worldwide.\nMaster Azure with Hands-on Learning\nI know how important hands-on experience is when it comes to mastering cloud skills, and this benefit is packed with practical learning opportunities:\n\n221 Hands-on Labs\n330 Lessons\n111 Exams\n23 Certification Exam Prep Courses\n\nLearn Your Way\nOne of my favorite features of this platform is how flexible the learning options are. You can choose the style that fits you best:\n\nGuided Labs: Follow step-by-step instructions to complete tasks in a live Azure environment.\nChallenge Labs: If you’re confident in your skills, jump right into a challenge without instructions and validate your work by submitting your code.\nCloud Sandboxes: Want to experiment? Practice freely in a safe, pre-configured Azure environment—no need to worry about using up your own Azure credits!\n\nSmarter Learning with AI-Powered Smart Assessments & Ela: Your Expert Learning Assistant\nAnother standout feature is Ela, your Expert Learning Assistant, and Smart Assessments—and I think you’re going to love it. Instead of working through lessons you’ve already mastered, these AI-driven assessments baseline your knowledge and adjust your learning path accordingly. That means less time reviewing what you already know and more time building new skills that matter.\nMeet Ela: Your AI-Powered Learning Assistant\nI’m really excited about this—Cloud Academy now includes Ela, an AI-driven learning assistant designed to enhance your self-paced learning experience. Ela is trained exclusively on QA-authored content, making it a trusted source for guidance whenever you need it.\nWhat makes Ela special? Unlike basic AI chatbots, Ela is built with real-world expertise to provide tutor-style support. Whether you’re looking for quick revision, knowledge checks, explanations of complex topics, or even lab-specific assistance, Ela is available 24/7 to help you along the way.\nHere are just a few of Ela’s standout capabilities:\n\nSummarize: Quickly review key takeaways from course content for faster learning.\nTest: Reinforce your understanding with knowledge checks before moving forward.\nExplain: Get clear, practical explanations that connect theory to application.\n\nEla isn’t just limited to courses—she also provides hands-on lab support, helping you troubleshoot code, find bugs, and clarify lab tasks.\nThis is a game-changer for learners who want real-time, expert-level support while mastering Azure.\nGet Ready for Certification\nIf you’ve been thinking about getting Azure certified, this benefit will help you get there faster. With 23 certification prep courses, you’ll go beyond just memorization and apply what you learn through a mix of lessons, hands-on labs, quizzes, and exams.\n\nActivate Your Free Access Today\nI can’t wait for you to try this out! Redeem your free Cloud Academy access now by logging into my.visualstudio.com and activating your license. Remember, this is limited time offer so act now before it’s gone.\nAt Microsoft, we’re passionate about helping developers grow their skills and advance their careers. Everyone learns differently, and we know that access to the right tools and resources makes all the difference. Cloud Academy is another opportunity to expand your Azure expertise and bring valuable cloud solutions to your company—whether that’s improving efficiency, driving innovation, or scaling your applications to meet the demands of the future.\nCheck out the new Visual Studio Hub\nStay connected with everything Visual Studio in one place! Visit the Visual Studio Hub for the latest release notes, YouTube videos, social updates, and community discussions.\nLet me know your thoughts about our VS subscriber benefits—you can reach me on LinkedIn!\nThe post Unlock Free Access to Cloud Academy: A New Benefit for Visual Studio Subscribers appeared first on Visual Studio Blog."
  },
  {
    "itemId": "https://devblogs.microsoft.com/visualstudio/?p=252584",
    "raw": "<p>The latest Visual Studio update (v17.13) brings a strong set of debugging and profiling features designed to speed up troubleshooting, making it more efficient. With AI-driven features in this release, variable analysis and data inspection are smarter and more intuitive, and problems are easier to identify and debug. Profiling tool improvements also deliver better support and visualization for multi-process execution, native code, and async workflows, with clearer insights into performance bottlenecks. For a full list of debugger and diagnostics features in this release, check out the <a href=\"https://learn.microsoft.com/visualstudio/releases/2022/release-notes-preview\">release notes</a>.</p>\n<p><div class=\"d-flex justify-content-left\"><a class=\"cta_button_link btn-primary mb-24\" href=\"https://visualstudio.microsoft.com/downloads/\" target=\"_blank\">Download Visual Studio 2022 v17.13</a></div></p>\n<h2>GitHub Copilot Assisted Debugging Features</h2>\n<h3>Smarter exception and variable analysis</h3>\n<p>GitHub Copilot Exception Analysis and Variable Analysis now use your project context intelligently to find and bring to your attention the most relevant code to errors.</p>\n<p>With sharper, actionable insights and smarter, context-aware solutions, these capabilities can guide you to the root cause of issues more quickly, make your debugging workflow more streamlined, and provide greater overall accuracy in debugging errors.</p>\n<p><img decoding=\"async\" class=\"alignnone wp-image-252585\" src=\"https://devblogs.microsoft.com/visualstudio/wp-content/uploads/sites/4/2025/03/word-image-252584-1.png\" alt=\"GitHub Copilot explaining an error\" width=\"749\" height=\"716\" srcset=\"https://devblogs.microsoft.com/visualstudio/wp-content/uploads/sites/4/2025/03/word-image-252584-1.png 749w, https://devblogs.microsoft.com/visualstudio/wp-content/uploads/sites/4/2025/03/word-image-252584-1-300x287.png 300w, https://devblogs.microsoft.com/visualstudio/wp-content/uploads/sites/4/2025/03/word-image-252584-1-24x24.png 24w\" sizes=\"(max-width: 749px) 100vw, 749px\" /></p>\n<h3>AI-Powered Parallel Stacks window</h3>\n<p>Auto-Summarize in Parallel Stacks gives you AI-generated summaries so you can get a quick idea of what each thread is doing. Copilot Chat Integration with App Summarization goes a step further, identifying probable problems, recommending solutions, and enabling you to ask questions, get them explained, and get AI-powered suggestions—all in the context of your debugging session.</p>\n<p>Combined, these tools simplify parallel debugging so you can diagnose and repair threading problems more quickly and confidently.</p>\n<p><a href=\"https://devblogs.microsoft.com/visualstudio/wp-content/uploads/sites/4/2025/03/Screenshot-2025-03-13-114938.png\"><img decoding=\"async\" class=\"alignnone wp-image-252720\" src=\"https://devblogs.microsoft.com/visualstudio/wp-content/uploads/sites/4/2025/03/Screenshot-2025-03-13-114938.png\" alt=\"Image Screenshot 2025 03 13 114938\" width=\"869\" height=\"514\" srcset=\"https://devblogs.microsoft.com/visualstudio/wp-content/uploads/sites/4/2025/03/Screenshot-2025-03-13-114938.png 1382w, https://devblogs.microsoft.com/visualstudio/wp-content/uploads/sites/4/2025/03/Screenshot-2025-03-13-114938-300x178.png 300w, https://devblogs.microsoft.com/visualstudio/wp-content/uploads/sites/4/2025/03/Screenshot-2025-03-13-114938-1024x606.png 1024w, https://devblogs.microsoft.com/visualstudio/wp-content/uploads/sites/4/2025/03/Screenshot-2025-03-13-114938-768x455.png 768w\" sizes=\"(max-width: 869px) 100vw, 869px\" /></a></p>\n<h3>Enhanced Editable Expressions in IEnumerable Visualizer</h3>\n<p>The IEnumerable Visualizer now features GitHub Copilot Inline Chat, allowing you to refine editable expressions using natural language. Open a prompt with the Copilot sparkle button, tell it what you would like to change, and receive AI-generated LINQ queries for customized filtering your data. Including syntax highlighting to make it easier to read.</p>\n<p><img decoding=\"async\" class=\"alignnone wp-image-252587\" src=\"https://devblogs.microsoft.com/visualstudio/wp-content/uploads/sites/4/2025/03/word-image-252584-3.png\" alt=\"IEnumerable expression Visualizer\" width=\"848\" height=\"130\" srcset=\"https://devblogs.microsoft.com/visualstudio/wp-content/uploads/sites/4/2025/03/word-image-252584-3.png 848w, https://devblogs.microsoft.com/visualstudio/wp-content/uploads/sites/4/2025/03/word-image-252584-3-300x46.png 300w, https://devblogs.microsoft.com/visualstudio/wp-content/uploads/sites/4/2025/03/word-image-252584-3-768x118.png 768w\" sizes=\"(max-width: 848px) 100vw, 848px\" /></p>\n<h2>Profiling Features</h2>\n<h3>Targeted Instrumentation for native code</h3>\n<p>The Instrumentation tool in the Visual Studio now has targeted instrumentation for native code, allowing you to choose functions and classes to inspect thoroughly.</p>\n<p>This improves performance monitoring and makes it easier for you to spot issues, streamlining your debugging experience.</p>\n<p><img decoding=\"async\" class=\"alignnone wp-image-252588\" src=\"https://devblogs.microsoft.com/visualstudio/wp-content/uploads/sites/4/2025/03/word-image-252584-4.png\" alt=\"List of instruments you can easily select and view\" width=\"824\" height=\"1155\" srcset=\"https://devblogs.microsoft.com/visualstudio/wp-content/uploads/sites/4/2025/03/word-image-252584-4.png 824w, https://devblogs.microsoft.com/visualstudio/wp-content/uploads/sites/4/2025/03/word-image-252584-4-214x300.png 214w, https://devblogs.microsoft.com/visualstudio/wp-content/uploads/sites/4/2025/03/word-image-252584-4-731x1024.png 731w, https://devblogs.microsoft.com/visualstudio/wp-content/uploads/sites/4/2025/03/word-image-252584-4-768x1077.png 768w\" sizes=\"(max-width: 824px) 100vw, 824px\" /></p>\n<h3>Display unified async stacks in profiler</h3>\n<p>The Visual Studio profiler now improves debugging of .NET applications by showing stitched async stacks in the summary and detail call tree windows.</p>\n<p>This feature gives a more cohesive, clearer picture of asynchronous operations, making it easier for developers to follow the entire execution path, including asynchronous method calls, in a single, unified stack trace.</p>\n<p><img decoding=\"async\" class=\"alignnone wp-image-252589\" src=\"https://devblogs.microsoft.com/visualstudio/wp-content/uploads/sites/4/2025/03/word-image-252584-5.png\" alt=\"Detailed tree view of call stacks\" width=\"765\" height=\"430\" srcset=\"https://devblogs.microsoft.com/visualstudio/wp-content/uploads/sites/4/2025/03/word-image-252584-5.png 765w, https://devblogs.microsoft.com/visualstudio/wp-content/uploads/sites/4/2025/03/word-image-252584-5-300x169.png 300w\" sizes=\"(max-width: 765px) 100vw, 765px\" /></p>\n<h3>Multiprocess Analysis with Color-Coded Swimlanes in CPU Usage</h3>\n<p>CPU Usage tool in the Visual Studio profiler now supports multiprocess analysis, with performance graphs displayed as separate color coding for each process in swim lanes.</p>\n<p>The graphs are displayed as stacked area charts. You can also filter processes by a dropdown at the top left, to enable focused analysis.</p>\n<p>This enhancement enables you to profile and isolate CPU usage by process with ease in one session. Providing better visualization of resource usage, it optimizes profiling performance and simplifies multiprocess application performance tuning.</p>\n<p><img decoding=\"async\" class=\"alignnone wp-image-252590\" src=\"https://devblogs.microsoft.com/visualstudio/wp-content/uploads/sites/4/2025/03/word-image-252584-6.png\" alt=\"graph of CPU usage\" width=\"1142\" height=\"189\" srcset=\"https://devblogs.microsoft.com/visualstudio/wp-content/uploads/sites/4/2025/03/word-image-252584-6.png 1142w, https://devblogs.microsoft.com/visualstudio/wp-content/uploads/sites/4/2025/03/word-image-252584-6-300x50.png 300w, https://devblogs.microsoft.com/visualstudio/wp-content/uploads/sites/4/2025/03/word-image-252584-6-1024x169.png 1024w, https://devblogs.microsoft.com/visualstudio/wp-content/uploads/sites/4/2025/03/word-image-252584-6-768x127.png 768w\" sizes=\"(max-width: 1142px) 100vw, 1142px\" /></p>\n<h2>Thank you!</h2>\n<p>We aim to make your debugging and profiling experience as smooth and productive as it can be. We really appreciate the feedback and suggestions you provide, as that is what determines the direction of the tools you use daily. Never stop providing us with feedback, as we can keep making Visual Studio an excellent and user-friendly tool for developers like you.</p>\n<p>Happy coding!</p>\n<p>The post <a href=\"https://devblogs.microsoft.com/visualstudio/new-debugging-and-profiling-features-in-visual-studio-v17-13/\">New Debugging and Profiling Features in Visual Studio (v17.13)</a> appeared first on <a href=\"https://devblogs.microsoft.com/visualstudio\">Visual Studio Blog</a>.</p>\n",
    "sanitized": "The latest Visual Studio update (v17.13) brings a strong set of debugging and profiling features designed to speed up troubleshooting, making it more efficient. With AI-driven features in this release, variable analysis and data inspection are smarter and more intuitive, and problems are easier to identify and debug. Profiling tool improvements also deliver better support and visualization for multi-process execution, native code, and async workflows, with clearer insights into performance bottlenecks. For a full list of debugger and diagnostics features in this release, check out the release notes.\nDownload Visual Studio 2022 v17.13\nGitHub Copilot Assisted Debugging Features\nSmarter exception and variable analysis\nGitHub Copilot Exception Analysis and Variable Analysis now use your project context intelligently to find and bring to your attention the most relevant code to errors.\nWith sharper, actionable insights and smarter, context-aware solutions, these capabilities can guide you to the root cause of issues more quickly, make your debugging workflow more streamlined, and provide greater overall accuracy in debugging errors.\n\nAI-Powered Parallel Stacks window\nAuto-Summarize in Parallel Stacks gives you AI-generated summaries so you can get a quick idea of what each thread is doing. Copilot Chat Integration with App Summarization goes a step further, identifying probable problems, recommending solutions, and enabling you to ask questions, get them explained, and get AI-powered suggestions—all in the context of your debugging session.\nCombined, these tools simplify parallel debugging so you can diagnose and repair threading problems more quickly and confidently.\n\nEnhanced Editable Expressions in IEnumerable Visualizer\nThe IEnumerable Visualizer now features GitHub Copilot Inline Chat, allowing you to refine editable expressions using natural language. Open a prompt with the Copilot sparkle button, tell it what you would like to change, and receive AI-generated LINQ queries for customized filtering your data. Including syntax highlighting to make it easier to read.\n\nProfiling Features\nTargeted Instrumentation for native code\nThe Instrumentation tool in the Visual Studio now has targeted instrumentation for native code, allowing you to choose functions and classes to inspect thoroughly.\nThis improves performance monitoring and makes it easier for you to spot issues, streamlining your debugging experience.\n\nDisplay unified async stacks in profiler\nThe Visual Studio profiler now improves debugging of .NET applications by showing stitched async stacks in the summary and detail call tree windows.\nThis feature gives a more cohesive, clearer picture of asynchronous operations, making it easier for developers to follow the entire execution path, including asynchronous method calls, in a single, unified stack trace.\n\nMultiprocess Analysis with Color-Coded Swimlanes in CPU Usage\nCPU Usage tool in the Visual Studio profiler now supports multiprocess analysis, with performance graphs displayed as separate color coding for each process in swim lanes.\nThe graphs are displayed as stacked area charts. You can also filter processes by a dropdown at the top left, to enable focused analysis.\nThis enhancement enables you to profile and isolate CPU usage by process with ease in one session. Providing better visualization of resource usage, it optimizes profiling performance and simplifies multiprocess application performance tuning.\n\nThank you!\nWe aim to make your debugging and profiling experience as smooth and productive as it can be. We really appreciate the feedback and suggestions you provide, as that is what determines the direction of the tools you use daily. Never stop providing us with feedback, as we can keep making Visual Studio an excellent and user-friendly tool for developers like you.\nHappy coding!\nThe post New Debugging and Profiling Features in Visual Studio (v17.13) appeared first on Visual Studio Blog."
  },
  {
    "itemId": "https://devblogs.microsoft.com/visualstudio/?p=252558",
    "raw": "<p>Sometimes it’s the little things in life that matter the most. In the latest version of Visual Studio, we’ve added some features and tweaks that aim to put a smile on your face and make you more productive. Here is a list of some of these, and if you want the full list, make sure to check out the <a href=\"https://learn.microsoft.com/visualstudio/releases/2022/release-notes\">release notes</a>.</p>\n<h2>Customize file encoding</h2>\n<p>Developers working in cross-platform environments often need files to be saved with specific file encodings. Changing these encodings can lead to various issues.</p>\n<p>Visual Studio now allows you to set the default file encoding for saving files. This feature ensures that your preferred encoding is used whenever possible.</p>\n<p>To set the default encoding, navigate to <strong>Tools → Options → Environment → Documents</strong>. There, you will find an option titled <strong>Save files with a specific encoding</strong>. If this option is unchecked, Visual Studio will manage file encoding using its default behavior. If checked, Visual Studio will use the encoding specified in the adjacent combo box whenever a file is saved.</p>\n<p><img decoding=\"async\" class=\"alignnone wp-image-252559\" src=\"https://devblogs.microsoft.com/visualstudio/wp-content/uploads/sites/4/2025/03/word-image-252558-1.png\" alt=\"Image showing save file option with the following option Western European (Windows) - Code page 1252\" width=\"500\" height=\"165\" srcset=\"https://devblogs.microsoft.com/visualstudio/wp-content/uploads/sites/4/2025/03/word-image-252558-1.png 500w, https://devblogs.microsoft.com/visualstudio/wp-content/uploads/sites/4/2025/03/word-image-252558-1-300x99.png 300w\" sizes=\"(max-width: 500px) 100vw, 500px\" /></p>\n<p>If Visual Studio cannot save with the specified encoding (e.g., requesting <em>ASCII</em> encoding for a file containing Unicode characters), it will display a dialog informing you of the issue.</p>\n<h2>Choose whether to indent word wrap</h2>\n<p>We are excited to introduce a new feature that allows you to control whether wrapped lines are indented in the editor. This enhancement provides greater flexibility and customization for your coding environment, ensuring that your code appears exactly as you prefer.</p>\n<p><img decoding=\"async\" class=\"alignnone wp-image-252560\" src=\"https://devblogs.microsoft.com/visualstudio/wp-content/uploads/sites/4/2025/03/word-image-252558-2.png\" alt=\"code with word wrapped enabled\" width=\"500\" height=\"226\" srcset=\"https://devblogs.microsoft.com/visualstudio/wp-content/uploads/sites/4/2025/03/word-image-252558-2.png 500w, https://devblogs.microsoft.com/visualstudio/wp-content/uploads/sites/4/2025/03/word-image-252558-2-300x136.png 300w\" sizes=\"(max-width: 500px) 100vw, 500px\" /></p>\n<p>To change this option, follow these steps:</p>\n<ol>\n<li>Go to <strong>Tools → Options → Text Editor → General</strong>.</li>\n<li>Look for the option called <strong>Automatically indent when word wrap is enabled</strong>.</li>\n</ol>\n<p>By default, this option is enabled, meaning that wrapped lines will be indented. If you prefer your wrapped lines not to be indented, simply uncheck this option. This setting can help improve readability and maintain the desired formatting of your code, especially in projects where indentation style is crucial.</p>\n<h2>Preserve font preferences across themes</h2>\n<p>We understand that the fonts developers select when coding is a personal choice, influenced by preferences for readability, accessibility, or aesthetics. Visual Studio themes primarily focus on presentation colors and are independent of your preferred fonts.</p>\n<p>With this update, we&#8217;ve introduced functionality to retain your font face and size choices when switching themes. You can now set your font preferences once and switch themes in Visual Studio without needing to reconfigure your font settings every time. Note that the colors of your fonts remain linked to the theme, as that is the purpose of themes, but your font selections will be preserved.</p>\n<p><img decoding=\"async\" class=\"alignnone wp-image-252561\" src=\"https://devblogs.microsoft.com/visualstudio/wp-content/uploads/sites/4/2025/03/word-image-252558-3.png\" alt=\"2 themes that have that stay the same\" width=\"500\" height=\"281\" srcset=\"https://devblogs.microsoft.com/visualstudio/wp-content/uploads/sites/4/2025/03/word-image-252558-3.png 500w, https://devblogs.microsoft.com/visualstudio/wp-content/uploads/sites/4/2025/03/word-image-252558-3-300x169.png 300w\" sizes=\"(max-width: 500px) 100vw, 500px\" /></p>\n<p>This feature will be enabled by default for all users. If you prefer the previous behavior, go to <strong>Tools &gt; Manage Preview Features</strong> and find the option <strong>Separate font settings from color theme selection</strong>. If this option is checked, your font preferences will be maintained regardless of theme changes. Uncheck the box to reinstate the previous behavior which ties font choices to theme.</p>\n<h2>Reimagine the horizontal scrollbar</h2>\n<p>The editor tray in Visual Studio is a valuable space for a wealth of information. You can control your zoom, check the health of your document, see what line you&#8217;re on, and access a variety of additional information.</p>\n<p>Unfortunately, sometimes all of that information can crowd out the horizontal scrollbar, making it difficult to scroll through your window. This is particularly true in a side-by-side view where the system tray isn&#8217;t very wide.</p>\n<p>With this latest update, these struggles are a thing of the past. If the scrollbar drops below a usable width, it will reposition itself above the system tray to ensure it&#8217;s always accessible. By default, it will return to the editor tray as soon as there&#8217;s enough room for it again.</p>\n<p><img decoding=\"async\" class=\"alignnone wp-image-252562\" src=\"https://devblogs.microsoft.com/visualstudio/wp-content/uploads/sites/4/2025/03/word-image-252558-4.png\" alt=\"Highlighting the horizontal bar\" width=\"500\" height=\"281\" srcset=\"https://devblogs.microsoft.com/visualstudio/wp-content/uploads/sites/4/2025/03/word-image-252558-4.png 500w, https://devblogs.microsoft.com/visualstudio/wp-content/uploads/sites/4/2025/03/word-image-252558-4-300x169.png 300w\" sizes=\"(max-width: 500px) 100vw, 500px\" /></p>\n<p>While we believe this behavior will be ideal for most users, if you encounter any issues, you can control the behavior in <strong>Tools → Options</strong>. The option is located under <strong>Text Editor → Advanced</strong> and is labeled <strong>Editor horizontal scrollbar location</strong>. This setting allows you to choose whether the scrollbar adjusts its position according to the available space, stays in the editor tray, or always appears above the editor tray.</p>\n<p><img decoding=\"async\" class=\"alignnone wp-image-252563\" src=\"https://devblogs.microsoft.com/visualstudio/wp-content/uploads/sites/4/2025/03/word-image-252558-5.png\" alt=\"Options to change horizontal bar behavior \" width=\"574\" height=\"134\" srcset=\"https://devblogs.microsoft.com/visualstudio/wp-content/uploads/sites/4/2025/03/word-image-252558-5.png 574w, https://devblogs.microsoft.com/visualstudio/wp-content/uploads/sites/4/2025/03/word-image-252558-5-300x70.png 300w\" sizes=\"(max-width: 574px) 100vw, 574px\" /></p>\n<h2>Thank you!</h2>\n<p>We are dedicated to continuously improving your development experience, and many of these advancements are driven by your invaluable feedback and suggestions. Your input plays a vital role in shaping the future of Visual Studio, and we encourage you to keep sharing your ideas with us.</p>\n<p>Happy coding!</p>\n<p>The post <a href=\"https://devblogs.microsoft.com/visualstudio/great-new-productivity-features-in-visual-studio/\">Great new productivity features in Visual Studio</a> appeared first on <a href=\"https://devblogs.microsoft.com/visualstudio\">Visual Studio Blog</a>.</p>\n",
    "sanitized": "Sometimes it’s the little things in life that matter the most. In the latest version of Visual Studio, we’ve added some features and tweaks that aim to put a smile on your face and make you more productive. Here is a list of some of these, and if you want the full list, make sure to check out the release notes.\nCustomize file encoding\nDevelopers working in cross-platform environments often need files to be saved with specific file encodings. Changing these encodings can lead to various issues.\nVisual Studio now allows you to set the default file encoding for saving files. This feature ensures that your preferred encoding is used whenever possible.\nTo set the default encoding, navigate to Tools → Options → Environment → Documents. There, you will find an option titled Save files with a specific encoding. If this option is unchecked, Visual Studio will manage file encoding using its default behavior. If checked, Visual Studio will use the encoding specified in the adjacent combo box whenever a file is saved.\n\nIf Visual Studio cannot save with the specified encoding (e.g., requesting ASCII encoding for a file containing Unicode characters), it will display a dialog informing you of the issue.\nChoose whether to indent word wrap\nWe are excited to introduce a new feature that allows you to control whether wrapped lines are indented in the editor. This enhancement provides greater flexibility and customization for your coding environment, ensuring that your code appears exactly as you prefer.\n\nTo change this option, follow these steps:\n\nGo to Tools → Options → Text Editor → General.\nLook for the option called Automatically indent when word wrap is enabled.\n\nBy default, this option is enabled, meaning that wrapped lines will be indented. If you prefer your wrapped lines not to be indented, simply uncheck this option. This setting can help improve readability and maintain the desired formatting of your code, especially in projects where indentation style is crucial.\nPreserve font preferences across themes\nWe understand that the fonts developers select when coding is a personal choice, influenced by preferences for readability, accessibility, or aesthetics. Visual Studio themes primarily focus on presentation colors and are independent of your preferred fonts.\nWith this update, we’ve introduced functionality to retain your font face and size choices when switching themes. You can now set your font preferences once and switch themes in Visual Studio without needing to reconfigure your font settings every time. Note that the colors of your fonts remain linked to the theme, as that is the purpose of themes, but your font selections will be preserved.\n\nThis feature will be enabled by default for all users. If you prefer the previous behavior, go to Tools > Manage Preview Features and find the option Separate font settings from color theme selection. If this option is checked, your font preferences will be maintained regardless of theme changes. Uncheck the box to reinstate the previous behavior which ties font choices to theme.\nReimagine the horizontal scrollbar\nThe editor tray in Visual Studio is a valuable space for a wealth of information. You can control your zoom, check the health of your document, see what line you’re on, and access a variety of additional information.\nUnfortunately, sometimes all of that information can crowd out the horizontal scrollbar, making it difficult to scroll through your window. This is particularly true in a side-by-side view where the system tray isn’t very wide.\nWith this latest update, these struggles are a thing of the past. If the scrollbar drops below a usable width, it will reposition itself above the system tray to ensure it’s always accessible. By default, it will return to the editor tray as soon as there’s enough room for it again.\n\nWhile we believe this behavior will be ideal for most users, if you encounter any issues, you can control the behavior in Tools → Options. The option is located under Text Editor → Advanced and is labeled Editor horizontal scrollbar location. This setting allows you to choose whether the scrollbar adjusts its position according to the available space, stays in the editor tray, or always appears above the editor tray.\n\nThank you!\nWe are dedicated to continuously improving your development experience, and many of these advancements are driven by your invaluable feedback and suggestions. Your input plays a vital role in shaping the future of Visual Studio, and we encourage you to keep sharing your ideas with us.\nHappy coding!\nThe post Great new productivity features in Visual Studio appeared first on Visual Studio Blog."
  },
  {
    "itemId": "https://devblogs.microsoft.com/visualstudio/?p=252505",
    "raw": "<p>Discovering issues with code changes after committing changes can be frustrating. Fortunately, Visual Studio offers a new feature that helps you catch potential problems early, improving your code quality.</p>\n<p><img decoding=\"async\" class=\"alignnone wp-image-252506\" src=\"https://devblogs.microsoft.com/visualstudio/wp-content/uploads/sites/4/2025/02/word-image-252505-1.png\" alt=\"copilot giving a suggestion on new code on how to improve it\" width=\"900\" height=\"503\" srcset=\"https://devblogs.microsoft.com/visualstudio/wp-content/uploads/sites/4/2025/02/word-image-252505-1.png 900w, https://devblogs.microsoft.com/visualstudio/wp-content/uploads/sites/4/2025/02/word-image-252505-1-300x168.png 300w, https://devblogs.microsoft.com/visualstudio/wp-content/uploads/sites/4/2025/02/word-image-252505-1-768x429.png 768w\" sizes=\"(max-width: 900px) 100vw, 900px\" /></p>\n<p>Visual Studio now includes a feature powered by GitHub Copilot that lets you review your local code changes before committing them, before they are part of your pull request. This can help identify performance and security issues early, ensuring you maintain a higher quality codebase.</p>\n<h2>How to Get Started</h2>\n<p>To use this feature, ensure your GitHub Copilot subscription is active and enabled within Visual Studio. If you don’t already have GitHub Copilot, you can sign up for free <a href=\"https://github.com/settings/copilot\">here</a>.</p>\n<p>You’ll need to enable the necessary feature flags:</p>\n<ul>\n<li>Tools &gt; Options &gt; Preview Features &gt; Pull Request Comments</li>\n<li>Tools &gt; Options &gt; GitHub &gt; Copilot &gt; Source Control Integration &gt; Enable Git preview features.</li>\n</ul>\n<p>Then, you&#8217;ll see a new sparkle comment button in the Git Changes window. Clicking this button allows GitHub Copilot to review your local code changes and provide inline suggestions.</p>\n<p><img decoding=\"async\" class=\"alignnone wp-image-252507\" src=\"https://devblogs.microsoft.com/visualstudio/wp-content/uploads/sites/4/2025/02/word-image-252505-2.png\" alt=\"Copilot reviews changes and suggests commit improvements\" width=\"500\" height=\"272\" srcset=\"https://devblogs.microsoft.com/visualstudio/wp-content/uploads/sites/4/2025/02/word-image-252505-2.png 500w, https://devblogs.microsoft.com/visualstudio/wp-content/uploads/sites/4/2025/02/word-image-252505-2-300x163.png 300w\" sizes=\"(max-width: 500px) 100vw, 500px\" /></p>\n<p>As always with AI powered features, you’ll want to review Copilot’s suggestions for accuracy, which you can do directly in your working file. You can navigate between comments or collapse them using the up arrow icon in the top right corner of the comment box. Please share your scenarios with us <a href=\"https://aka.ms/LocalCodeReview\">in the survey</a> to help us make the comments as useful as possible.</p>\n<h2>Share your feedback</h2>\n<p>We rely on your <a href=\"https://developercommunity.visualstudio.com/t/Use-Copilot-to-review-commit/10575248\">user feedback</a> to guide our roadmaps in Visual Studio. Please share your thoughts on this feature in <a href=\"https://aka.ms/LocalCodeReview\">this survey.</a> Also, we’re already tracking a suggestion to improve this feature with customization, so share your thoughts <a href=\"https://developercommunity.visualstudio.com/t/Customize-Copilot-code-review/10844722\">here</a>.</p>\n<p>We value your continued support and insights to make your experiences in Visual Studio the best they can be, especially now with AI!</p>\n<p>The post <a href=\"https://devblogs.microsoft.com/visualstudio/catch-issues-before-you-commit-to-git/\">Catch issues before you commit to Git</a> appeared first on <a href=\"https://devblogs.microsoft.com/visualstudio\">Visual Studio Blog</a>.</p>\n",
    "sanitized": "Discovering issues with code changes after committing changes can be frustrating. Fortunately, Visual Studio offers a new feature that helps you catch potential problems early, improving your code quality.\n\nVisual Studio now includes a feature powered by GitHub Copilot that lets you review your local code changes before committing them, before they are part of your pull request. This can help identify performance and security issues early, ensuring you maintain a higher quality codebase.\nHow to Get Started\nTo use this feature, ensure your GitHub Copilot subscription is active and enabled within Visual Studio. If you don’t already have GitHub Copilot, you can sign up for free here.\nYou’ll need to enable the necessary feature flags:\n\nTools > Options > Preview Features > Pull Request Comments\nTools > Options > GitHub > Copilot > Source Control Integration > Enable Git preview features.\n\nThen, you’ll see a new sparkle comment button in the Git Changes window. Clicking this button allows GitHub Copilot to review your local code changes and provide inline suggestions.\n\nAs always with AI powered features, you’ll want to review Copilot’s suggestions for accuracy, which you can do directly in your working file. You can navigate between comments or collapse them using the up arrow icon in the top right corner of the comment box. Please share your scenarios with us in the survey to help us make the comments as useful as possible.\nShare your feedback\nWe rely on your user feedback to guide our roadmaps in Visual Studio. Please share your thoughts on this feature in this survey. Also, we’re already tracking a suggestion to improve this feature with customization, so share your thoughts here.\nWe value your continued support and insights to make your experiences in Visual Studio the best they can be, especially now with AI!\nThe post Catch issues before you commit to Git appeared first on Visual Studio Blog."
  },
  {
    "itemId": "https://devblogs.microsoft.com/visualstudio/?p=252474",
    "raw": "<p data-start=\"67\" data-end=\"399\">The world of AI is evolving at a breathtaking pace, and today brings an exciting milestone for developers and tech enthusiasts alike. Anthropic’s newest release, <a href=\"https://www.anthropic.com/\"><strong data-start=\"229\" data-end=\"243\">Claude 3.7</strong></a>, is now available directly within GitHub Copilot for Visual Studio 2022 17.13, heralding a new era of seamlessly integrated, advanced AI coding assistance. This new Sonnet model supports the non-thinking modes in Copilot.</p>\n<p data-start=\"67\" data-end=\"399\"><a href=\"https://devblogs.microsoft.com/visualstudio/wp-content/uploads/sites/4/2025/02/image.jpg\"><img decoding=\"async\" class=\"alignnone size-full wp-image-252475\" src=\"https://devblogs.microsoft.com/visualstudio/wp-content/uploads/sites/4/2025/02/image.jpg\" alt=\"Image image\" width=\"421\" height=\"240\" srcset=\"https://devblogs.microsoft.com/visualstudio/wp-content/uploads/sites/4/2025/02/image.jpg 421w, https://devblogs.microsoft.com/visualstudio/wp-content/uploads/sites/4/2025/02/image-300x171.jpg 300w\" sizes=\"(max-width: 421px) 100vw, 421px\" /></a></p>\n<h3 data-start=\"401\" data-end=\"430\">How to Access Claude 3.7</h3>\n<p data-start=\"432\" data-end=\"456\">Getting started is easy:</p>\n<ul data-start=\"458\" data-end=\"822\">\n<li data-start=\"458\" data-end=\"559\"><strong data-start=\"460\" data-end=\"485\">Open the Chat Window:</strong> Click the Copilot badge at the top right of your Visual Studio interface.</li>\n<li data-start=\"560\" data-end=\"639\"><strong data-start=\"562\" data-end=\"586\">Launch Copilot Edit:</strong> Open the chat window to initiate an editing session.</li>\n<li data-start=\"640\" data-end=\"822\"><strong data-start=\"642\" data-end=\"664\">Select Your Model:</strong> In the prompt box, open the model picker. By default, ChatGPT 4 is selected, but you can easily switch to Claude 3.7 Sonnet to harness its advanced features.</li>\n</ul>\n<p data-start=\"0\" data-end=\"71\">If you don’t see Claude 3.7 as an option, there could be two reasons:</p>\n<ol data-start=\"73\" data-end=\"329\" data-is-last-node=\"\" data-is-only-node=\"\">\n<li data-start=\"73\" data-end=\"175\"><strong data-start=\"76\" data-end=\"122\">It’s not available for Copilot Free users.</strong> Only paid Copilot users have access to this model.</li>\n<li data-start=\"176\" data-end=\"329\" data-is-last-node=\"\"><strong data-start=\"179\" data-end=\"251\">You need to enable the policy for 3.7 Sonnet in your GitHub profile.</strong> Make sure to enable Claude access in your <a href=\"https://github.com/settings/copilot\">setting</a>.</li>\n</ol>\n<h4 data-start=\"1022\" data-end=\"1037\">Learn More</h4>\n<p data-start=\"1039\" data-end=\"1258\">For further details, check out the <a href=\"https://docs.github.com/en/copilot/using-github-copilot/ai-models/using-claude-sonnet-in-github-copilot#about-claude-sonnet-in-github-copilot-chat\">Using Claude Sonnet in Copilot Chat &#8211; GitHub Docs. </a></p>\n<p data-start=\"1260\" data-end=\"1399\" data-is-last-node=\"\" data-is-only-node=\"\">We’re super excited about this enhancement to our development environment and can’t wait to hear your feedback. Let us know what you think!</p>\n<p>The post <a href=\"https://devblogs.microsoft.com/visualstudio/claude-3-7-now-available-in-github-copilot-for-visual-studio/\">Claude 3.7 Now Available in GitHub Copilot for Visual Studio</a> appeared first on <a href=\"https://devblogs.microsoft.com/visualstudio\">Visual Studio Blog</a>.</p>\n",
    "sanitized": "The world of AI is evolving at a breathtaking pace, and today brings an exciting milestone for developers and tech enthusiasts alike. Anthropic’s newest release, Claude 3.7, is now available directly within GitHub Copilot for Visual Studio 2022 17.13, heralding a new era of seamlessly integrated, advanced AI coding assistance. This new Sonnet model supports the non-thinking modes in Copilot.\n\nHow to Access Claude 3.7\nGetting started is easy:\n\nOpen the Chat Window: Click the Copilot badge at the top right of your Visual Studio interface.\nLaunch Copilot Edit: Open the chat window to initiate an editing session.\nSelect Your Model: In the prompt box, open the model picker. By default, ChatGPT 4 is selected, but you can easily switch to Claude 3.7 Sonnet to harness its advanced features.\n\nIf you don’t see Claude 3.7 as an option, there could be two reasons:\n\nIt’s not available for Copilot Free users. Only paid Copilot users have access to this model.\nYou need to enable the policy for 3.7 Sonnet in your GitHub profile. Make sure to enable Claude access in your setting.\n\nLearn More\nFor further details, check out the Using Claude Sonnet in Copilot Chat – GitHub Docs. \nWe’re super excited about this enhancement to our development environment and can’t wait to hear your feedback. Let us know what you think!\nThe post Claude 3.7 Now Available in GitHub Copilot for Visual Studio appeared first on Visual Studio Blog."
  },
  {
    "itemId": "https://devblogs.microsoft.com/visualstudio/?p=252436",
    "raw": "<p><span class=\"TextRun SCXW44648517 BCX8\" lang=\"EN-US\" xml:lang=\"EN-US\" data-contrast=\"auto\"><span class=\"NormalTextRun SCXW44648517 BCX8\">Now, in the preview channel, you can attach images in</span><span class=\"NormalTextRun SCXW44648517 BCX8\"> GitHub Copilot</span><span class=\"NormalTextRun SCXW44648517 BCX8\"> chat to help you </span><span class=\"NormalTextRun SCXW44648517 BCX8\">illustrate </span><span class=\"NormalTextRun SCXW44648517 BCX8\">your ideas</span><span class=\"NormalTextRun SCXW44648517 BCX8\"> effectively and get the best </span><span class=\"NormalTextRun SCXW44648517 BCX8\">responses</span><span class=\"NormalTextRun SCXW44648517 BCX8\">.</span></span><span class=\"EOP SCXW44648517 BCX8\" data-ccp-props=\"{}\"> </span></p>\n<p><a href=\"https://devblogs.microsoft.com/visualstudio/wp-content/uploads/sites/4/2025/02/Upload-image-icon.png\"><img decoding=\"async\" class=\"alignnone  wp-image-252439\" src=\"https://devblogs.microsoft.com/visualstudio/wp-content/uploads/sites/4/2025/02/Upload-image-icon-300x138.png\" alt=\"Upload image to copilot prompt box\" width=\"487\" height=\"224\" srcset=\"https://devblogs.microsoft.com/visualstudio/wp-content/uploads/sites/4/2025/02/Upload-image-icon-300x138.png 300w, https://devblogs.microsoft.com/visualstudio/wp-content/uploads/sites/4/2025/02/Upload-image-icon-1024x472.png 1024w, https://devblogs.microsoft.com/visualstudio/wp-content/uploads/sites/4/2025/02/Upload-image-icon-768x354.png 768w, https://devblogs.microsoft.com/visualstudio/wp-content/uploads/sites/4/2025/02/Upload-image-icon.png 1047w\" sizes=\"(max-width: 487px) 100vw, 487px\" /></a></p>\n<p><span data-contrast=\"auto\">Imagine working on a UI development task where describing a design or layout through text just doesn&#8217;t cut it. Or perhaps you&#8217;re debugging an issue and need to share a screenshot of an error state or message. Starting in 17.13 Preview channels, you can now paste an image from your clipboard or use the paperclip icon in the chat window to upload your image directly from your file explorer. Simply add your prompt text and send! Copilot will analyze the image and use it as additional context to generate a better response.</span><span data-ccp-props=\"{}\"> </span></p>\n<p><a href=\"https://devblogs.microsoft.com/visualstudio/wp-content/uploads/sites/4/2025/02/Breakout-Game-Vision-Example.png\"><img decoding=\"async\" class=\"alignnone  wp-image-252438\" src=\"https://devblogs.microsoft.com/visualstudio/wp-content/uploads/sites/4/2025/02/Breakout-Game-Vision-Example-236x300.png\" alt=\"Vision attachment breakout game example\" width=\"448\" height=\"570\" srcset=\"https://devblogs.microsoft.com/visualstudio/wp-content/uploads/sites/4/2025/02/Breakout-Game-Vision-Example-236x300.png 236w, https://devblogs.microsoft.com/visualstudio/wp-content/uploads/sites/4/2025/02/Breakout-Game-Vision-Example-805x1024.png 805w, https://devblogs.microsoft.com/visualstudio/wp-content/uploads/sites/4/2025/02/Breakout-Game-Vision-Example-768x976.png 768w, https://devblogs.microsoft.com/visualstudio/wp-content/uploads/sites/4/2025/02/Breakout-Game-Vision-Example.png 1072w\" sizes=\"(max-width: 448px) 100vw, 448px\" /></a></p>\n<p><span class=\"TextRun SCXW40513968 BCX8\" lang=\"EN-US\" xml:lang=\"EN-US\" data-contrast=\"auto\"><span class=\"NormalTextRun SCXW40513968 BCX8\">In this </span><span class=\"NormalTextRun SCXW40513968 BCX8\">simple </span><span class=\"NormalTextRun SCXW40513968 BCX8\">example, Copilot was able to </span><span class=\"NormalTextRun SCXW40513968 BCX8\">interpret the attached image</span><span class=\"NormalTextRun SCXW40513968 BCX8\"> context as a colorful </span><span class=\"NormalTextRun SCXW40513968 BCX8\">breakout game</span><span class=\"NormalTextRun SCXW40513968 BCX8\">. </span> <span class=\"NormalTextRun SCXW40513968 BCX8\">Combining that request with </span><span class=\"NormalTextRun SCXW40513968 BCX8\">the open file</span><span class=\"NormalTextRun SCXW40513968 BCX8\"> and the loaded project, Copilot can create a plan and suggest code to scaffold an entire working project from scratch. When combined with the</span><span class=\"NormalTextRun SCXW40513968 BCX8\"> iteration</span><span class=\"NormalTextRun SCXW40513968 BCX8\"> power of </span></span><a class=\"Hyperlink SCXW40513968 BCX8\" href=\"https://learn.microsoft.com/en-us/visualstudio/ide/copilot-edits?view=vs-2022\" target=\"_blank\" rel=\"noreferrer noopener\"><span class=\"TextRun Underlined SCXW40513968 BCX8\" lang=\"EN-US\" xml:lang=\"EN-US\" data-contrast=\"none\"><span class=\"NormalTextRun SCXW40513968 BCX8\" data-ccp-charstyle=\"Hyperlink\">Copilot edits</span></span></a><span class=\"TextRun SCXW40513968 BCX8\" lang=\"EN-US\" xml:lang=\"EN-US\" data-contrast=\"auto\"><span class=\"NormalTextRun SCXW40513968 BCX8\">, even more is possible with existing code bases. Check out this </span><span class=\"NormalTextRun SCXW40513968 BCX8\">clip </span><span class=\"NormalTextRun SCXW40513968 BCX8\">of the Microsoft Ignite session that previewed this functionality</span><span class=\"NormalTextRun SCXW40513968 BCX8\"> to see it in action.</span></span><span class=\"EOP SCXW40513968 BCX8\" data-ccp-props=\"{&quot;134233117&quot;:false,&quot;134233118&quot;:false,&quot;201341983&quot;:0,&quot;335551550&quot;:1,&quot;335551620&quot;:1,&quot;335559685&quot;:0,&quot;335559737&quot;:0,&quot;335559738&quot;:0,&quot;335559739&quot;:160,&quot;335559740&quot;:259}\"> </span></p>\n<p><iframe title=\"YouTube video player\" src=\"//www.youtube.com/embed/-y3FEblPRj4?si=iToQQsKoYxzqUo5Y&amp;start=1594\" width=\"560\" height=\"315\" frameborder=\"0\" allowfullscreen=\"allowfullscreen\"></iframe></p>\n<h3 aria-level=\"1\"><span data-contrast=\"none\">More details</span><span data-ccp-props=\"{&quot;134233117&quot;:false,&quot;134233118&quot;:false,&quot;134245418&quot;:true,&quot;134245529&quot;:true,&quot;201341983&quot;:0,&quot;335551550&quot;:1,&quot;335551620&quot;:1,&quot;335559685&quot;:0,&quot;335559737&quot;:0,&quot;335559738&quot;:360,&quot;335559739&quot;:80,&quot;335559740&quot;:259}\"> </span></h3>\n<p><span data-contrast=\"auto\">PNG, JPG, and GIF image attachments are only supported in the preview release on GPT-4o, though the model will only take a single frame of an animated GIF. Additionally, you can attach up to three images per message, providing ample space to convey your ideas visually. </span><span data-ccp-props=\"{}\"> </span></p>\n<h3 aria-level=\"1\"><span data-contrast=\"none\">Building with your feedback</span><span data-ccp-props=\"{&quot;134245418&quot;:true,&quot;134245529&quot;:true,&quot;335559738&quot;:360,&quot;335559739&quot;:80}\"> </span></h3>\n<p><span data-contrast=\"auto\">This capability to attach images in GitHub Copilot chat helps bring the latest in LLM improvements to work for you in Visual Studio. To continue to improve these experiences, please share your feedback on <a href=\"https://aka.ms/ChatImageAttachments\">this survey</a>.</span></p>\n<p>As we continuously strive to improve Visual Studio, and your feedback is invaluable! We appreciate your ongoing support and are excited to bring you this new feature to enhance your coding experience.<span data-ccp-props=\"{}\"> </span></p>\n<p>The post <a href=\"https://devblogs.microsoft.com/visualstudio/attach-images-in-github-copilot-chat/\">Leverage vision in Copilot Chat</a> appeared first on <a href=\"https://devblogs.microsoft.com/visualstudio\">Visual Studio Blog</a>.</p>\n",
    "sanitized": "Now, in the preview channel, you can attach images in GitHub Copilot chat to help you illustrate your ideas effectively and get the best responses. \n\nImagine working on a UI development task where describing a design or layout through text just doesn’t cut it. Or perhaps you’re debugging an issue and need to share a screenshot of an error state or message. Starting in 17.13 Preview channels, you can now paste an image from your clipboard or use the paperclip icon in the chat window to upload your image directly from your file explorer. Simply add your prompt text and send! Copilot will analyze the image and use it as additional context to generate a better response. \n\nIn this simple example, Copilot was able to interpret the attached image context as a colorful breakout game.  Combining that request with the open file and the loaded project, Copilot can create a plan and suggest code to scaffold an entire working project from scratch. When combined with the iteration power of Copilot edits, even more is possible with existing code bases. Check out this clip of the Microsoft Ignite session that previewed this functionality to see it in action. \n\nMore details \nPNG, JPG, and GIF image attachments are only supported in the preview release on GPT-4o, though the model will only take a single frame of an animated GIF. Additionally, you can attach up to three images per message, providing ample space to convey your ideas visually.  \nBuilding with your feedback \nThis capability to attach images in GitHub Copilot chat helps bring the latest in LLM improvements to work for you in Visual Studio. To continue to improve these experiences, please share your feedback on this survey.\nAs we continuously strive to improve Visual Studio, and your feedback is invaluable! We appreciate your ongoing support and are excited to bring you this new feature to enhance your coding experience. \nThe post Leverage vision in Copilot Chat appeared first on Visual Studio Blog."
  },
  {
    "itemId": "https://devblogs.microsoft.com/visualstudio/?p=252167",
    "raw": "<p>Have you ever been frustrated when Copilot doesn’t understand you? While it can’t read your mind, we’ve been working hard to make your coding experience smoother.</p>\n<p>Previously, Copilot in Visual Studio could look at files in your repository, but you needed to specify the context of your code manually. We understand this wasn’t the most intuitive experience, so we’ve been working on a smarter way to infer information automatically.</p>\n<h2><strong>Introducing Tool Calling: A Smarter Copilot</strong></h2>\n<p>Tool Calling is here—a major update that changes how you interact with Copilot. Now, Copilot can automatically search for more relevant code or tools it needs to address your questions. This works with GPT-4o and Claude Sonnet.</p>\n<p>You can now simply describe what you need in natural language, and Copilot can decide what of the information below is relevant:</p>\n<ul>\n<li>Your current file</li>\n<li>Open files or related files in your solution</li>\n<li>Your whole codebase</li>\n<li>debugger (locals, call stacks, etc.)</li>\n<li>or Visual Studio itself</li>\n</ul>\n<p>Web integration is also coming soon, allowing you to ask questions that span both local code and external data sources. (But for now you can use @GitHub.)</p>\n<p><iframe title=\"Function calling in GitHub Copilot\" width=\"500\" height=\"281\" src=\"https://www.youtube.com/embed/hALZoDdY8-w?feature=oembed\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen></iframe></p>\n<p>And that’s not all we added….</p>\n<h2><strong>Smarter Knowledge Retrieval</strong></h2>\n<h4><strong>Even more transparency and control</strong></h4>\n<p>While Tool Calling is a significant improvement, it’s not perfect. To tweak any missteps, try the Retry button to generate a fresh response. You can also manually specify files, methods, classes, or entire solutions using # references in your prompts.</p>\n<h4><strong>Help Shape the Future</strong></h4>\n<p>Tool Calling enables both enhanced context retrieval and greater workflow automation. Please update to the latest version of Visual Studio to access upcoming features. We also invite you to try Chat again and share your feedback—let us know what works, what doesn’t, and how we can improve your experience.</p>\n<p>Happy coding!</p>\n<h2></h2>\n<h2>Want to try this out?</h2>\n<p>Activate GitHub Copilot Free and unlock this AI feature, plus many more.</p>\n<p>No trials. No credit cards. Just your GitHub account. <a href=\"https://learn.microsoft.com/en-us/visualstudio/ide/copilot-free-plan?view=vs-2022#get-started-with-copilot-free-in-visual-studio\">Get Copilot Free</a></p>\n<p>The post <a href=\"https://devblogs.microsoft.com/visualstudio/function-calling-is-now-enabled-in-github-copilot/\">Unlocking More Power: Tool Calling in GitHub Copilot for Visual Studio</a> appeared first on <a href=\"https://devblogs.microsoft.com/visualstudio\">Visual Studio Blog</a>.</p>\n",
    "sanitized": "Have you ever been frustrated when Copilot doesn’t understand you? While it can’t read your mind, we’ve been working hard to make your coding experience smoother.\nPreviously, Copilot in Visual Studio could look at files in your repository, but you needed to specify the context of your code manually. We understand this wasn’t the most intuitive experience, so we’ve been working on a smarter way to infer information automatically.\nIntroducing Tool Calling: A Smarter Copilot\nTool Calling is here—a major update that changes how you interact with Copilot. Now, Copilot can automatically search for more relevant code or tools it needs to address your questions. This works with GPT-4o and Claude Sonnet.\nYou can now simply describe what you need in natural language, and Copilot can decide what of the information below is relevant:\n\nYour current file\nOpen files or related files in your solution\nYour whole codebase\ndebugger (locals, call stacks, etc.)\nor Visual Studio itself\n\nWeb integration is also coming soon, allowing you to ask questions that span both local code and external data sources. (But for now you can use @GitHub.)\n\nAnd that’s not all we added….\nSmarter Knowledge Retrieval\nEven more transparency and control\nWhile Tool Calling is a significant improvement, it’s not perfect. To tweak any missteps, try the Retry button to generate a fresh response. You can also manually specify files, methods, classes, or entire solutions using # references in your prompts.\nHelp Shape the Future\nTool Calling enables both enhanced context retrieval and greater workflow automation. Please update to the latest version of Visual Studio to access upcoming features. We also invite you to try Chat again and share your feedback—let us know what works, what doesn’t, and how we can improve your experience.\nHappy coding!\n\nWant to try this out?\nActivate GitHub Copilot Free and unlock this AI feature, plus many more.\nNo trials. No credit cards. Just your GitHub account. Get Copilot Free\nThe post Unlocking More Power: Tool Calling in GitHub Copilot for Visual Studio appeared first on Visual Studio Blog."
  }
]
