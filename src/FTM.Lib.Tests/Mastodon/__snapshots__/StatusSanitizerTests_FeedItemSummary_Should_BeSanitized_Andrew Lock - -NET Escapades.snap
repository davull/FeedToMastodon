[
  {
    "itemId": "https://andrewlock.net/running-an-aspnetcore-app-behind-iis-in-a-windows-container/",
    "raw": "In this post I describe how to run an ASP.NET Core app inside IIS in a Windows Docker container",
    "sanitized": "In this post I describe how to run an ASP.NET Core app inside IIS in a Windows Docker container"
  },
  {
    "itemId": "https://andrewlock.net/creating-an-analyzer-to-detect-infinite-loops-caused-by-threadabortexception/",
    "raw": "In this post I describe a Roslyn Analyzer I created to detect code that can result in infinite loops if a ThreadAbortException is raised",
    "sanitized": "In this post I describe a Roslyn Analyzer I created to detect code that can result in infinite loops if a ThreadAbortException is raised"
  },
  {
    "itemId": "https://andrewlock.net/disabling-localized-satellite-assemblies-during-dotnet-publish/",
    "raw": "In this post I show how to reduce the size of the publish output for .NET apps by preventing the publishing of localization resources when they're not needed",
    "sanitized": "In this post I show how to reduce the size of the publish output for .NET apps by preventing the publishing of localization resources when they're not needed"
  },
  {
    "itemId": "https://andrewlock.net/setting-environment-variables-in-iis-and-avoiding-app-pool-restarts/",
    "raw": "In this post I outline how IIS works, describe how to add environment variables to app pools, and show how to prevent automatic app pool recycling on changes",
    "sanitized": "In this post I outline how IIS works, describe how to add environment variables to app pools, and show how to prevent automatic app pool recycling on changes"
  },
  {
    "itemId": "https://andrewlock.net/preventing-client-side-cross-site-scripting-vulnerabilities-with-trusted-types/",
    "raw": "In this post I describe how the Trusted Types Content-Security-Policy feature can protect you against cross-site-scripting attacks.",
    "sanitized": "In this post I describe how the Trusted Types Content-Security-Policy feature can protect you against cross-site-scripting attacks."
  },
  {
    "itemId": "https://andrewlock.net/creating-a-source-generator-part-14-supporting-multiple-sdk-versions-in-a-source-generator/",
    "raw": "In this post I show how I updated my NetEscapades.EnumGenerators projects to support multi-targeting two different .NET SDK versions",
    "sanitized": "In this post I show how I updated my NetEscapades.EnumGenerators projects to support multi-targeting two different .NET SDK versions"
  },
  {
    "itemId": "https://andrewlock.net/supporting-multiple-sdk-versions-in-analyzers-and-source-generators/",
    "raw": "In this post I describe why source generators might need to work with multiple versions of the .NET SDK and how NuGet packages support this in .NET 6",
    "sanitized": "In this post I describe why source generators might need to work with multiple versions of the .NET SDK and how NuGet packages support this in .NET 6"
  },
  {
    "itemId": "https://andrewlock.net/creating-a-source-generator-part-13-providing-and-accessing-msbuild-settings-in-source-generators/",
    "raw": "In this post I describe how to read MSBuild settings from inside a source generator, and how to use this to allow user configuration of your generator",
    "sanitized": "In this post I describe how to read MSBuild settings from inside a source generator, and how to use this to allow user configuration of your generator"
  },
  {
    "itemId": "https://andrewlock.net/creating-a-source-generator-part-12-reading-compilation-options-and-csharp-version-in-source-generators/",
    "raw": "In this post I show how to read details of a target project from a source generator, such as assembly name, the current configuration, or the c# version",
    "sanitized": "In this post I show how to read details of a target project from a source generator, such as assembly name, the current configuration, or the c# version"
  },
  {
    "itemId": "https://andrewlock.net/creating-a-source-generator-part-11-implementing-an-interceptor-with-a-source-generator/",
    "raw": "In this post I show how interceptors work, and how you can implement an interceptor using a source generator and the GetInterceptableLocation API",
    "sanitized": "In this post I show how interceptors work, and how you can implement an interceptor using a source generator and the GetInterceptableLocation API"
  },
  {
    "itemId": "https://andrewlock.net/building-latex-projects-on-windows-easily-with-docker/",
    "raw": "In this post I describe how I build LaTeX projects on a Windows machine by using Docker and the blang/latex image",
    "sanitized": "In this post I describe how I build LaTeX projects on a Windows machine by using Docker and the blang/latex image"
  },
  {
    "itemId": "https://andrewlock.net/using-the-yamldotnet-source-generator-for-native-aot/",
    "raw": "In this post I show how you can use the YamlDotNet source generator to do strongly-typed serialization and deserialization, even in Native AOT apps",
    "sanitized": "In this post I show how you can use the YamlDotNet source generator to do strongly-typed serialization and deserialization, even in Native AOT apps"
  },
  {
    "itemId": "https://andrewlock.net/understanding-security-headers-part-3-cross-origin-embedder-policy/",
    "raw": "In this post I discuss the Cross-Origin-Embedder-Policy, the requirements it places on your resources, and why it's required for some JavaScript APIs",
    "sanitized": "In this post I discuss the Cross-Origin-Embedder-Policy, the requirements it places on your resources, and why it's required for some JavaScript APIs"
  },
  {
    "itemId": "https://andrewlock.net/understanding-security-headers-part-2-cross-origin-resource-policy-preventing-hotlinking/",
    "raw": "In this post I describe how to use the Cross-Origin-Resource-Policy to block cross-origin requests that would normally be allowed, such as in <img> tags",
    "sanitized": "In this post I describe how to use the Cross-Origin-Resource-Policy to block cross-origin requests that would normally be allowed, such as in  tags"
  },
  {
    "itemId": "https://andrewlock.net/understanding-security-headers-part-1-cross-origin-opener-policy-preventing-attacks-from-popups/",
    "raw": "In this post I describe the vulnerabilities in window.opener and window.open() and how to protect yourself with Cross-Origin-Opener-Policy",
    "sanitized": "In this post I describe the vulnerabilities in window.opener and window.open() and how to protect yourself with Cross-Origin-Opener-Policy"
  },
  {
    "itemId": "https://andrewlock.net/recent-updates-for-netescapades-enumgenerators-interceptors/",
    "raw": "In this post I describe the experimental interceptor support in NetEscapades.EnumGenerators that replaces ToString() calls with ToStringFast() automatically",
    "sanitized": "In this post I describe the experimental interceptor support in NetEscapades.EnumGenerators that replaces ToString() calls with ToStringFast() automatically"
  },
  {
    "itemId": "https://andrewlock.net/working-with-the-result-pattern-part-4-is-the-result-pattern-worth-it/",
    "raw": "In this post I discuss some of the pros and cons around using the result pattern in .NET, and describe some of the arguments I've heard on either side",
    "sanitized": "In this post I discuss some of the pros and cons around using the result pattern in .NET, and describe some of the arguments I've heard on either side"
  },
  {
    "itemId": "https://andrewlock.net/working-with-the-result-pattern-part-3-adding-more-extensions/",
    "raw": "In this post I show how to extend your LINQ-based result pattern code to handle more scenarios, such as Task<Result<T>> and collections of Result<T>",
    "sanitized": "In this post I show how to extend your LINQ-based result pattern code to handle more scenarios, such as Task> and collections of Result"
  },
  {
    "itemId": "https://andrewlock.net/working-with-the-result-pattern-part-2-safety-and-simplicity-with-linq/",
    "raw": "In this post I show how to clean up unreadable Switch()-based result pattern code using LINQ query syntax, giving both readability and safety",
    "sanitized": "In this post I show how to clean up unreadable Switch()-based result pattern code using LINQ query syntax, giving both readability and safety"
  },
  {
    "itemId": "https://andrewlock.net/working-with-the-result-pattern-part-1-replacing-exceptions-as-control-flow/",
    "raw": "In this post I discuss why you might want to use the result pattern, demonstrate it with a simple example and show a naïve, ugly, solution",
    "sanitized": "In this post I discuss why you might want to use the result pattern, demonstrate it with a simple example and show a naïve, ugly, solution"
  },
  {
    "itemId": "https://andrewlock.net/major-updates-to-netescapades-aspnetcore-security-headers/",
    "raw": "In this post I describe the recent major changes to NetEscapades.AspNetCore.SecurityHeaders, a NuGet package for adding security headers to your apps.",
    "sanitized": "In this post I describe the recent major changes to NetEscapades.AspNetCore.SecurityHeaders, a NuGet package for adding security headers to your apps."
  },
  {
    "itemId": "https://andrewlock.net/fixing-max_path-issues-in-gitlab/",
    "raw": "In this post I show how you can enable Git's long-path support in a GitLab job to override Window's MAX_PATH limitations which can cause git clone failures",
    "sanitized": "In this post I show how you can enable Git's long-path support in a GitLab job to override Window's MAX_PATH limitations which can cause git clone failures"
  },
  {
    "itemId": "https://andrewlock.net/preventing-breaking-changes-in-public-apis-with-publicapigenerator/",
    "raw": "In this post I show how you can use the PublicApiGenerator project to document your public API and build a snapshot unit test to prevent breaking changes",
    "sanitized": "In this post I show how you can use the PublicApiGenerator project to document your public API and build a snapshot unit test to prevent breaking changes"
  },
  {
    "itemId": "https://andrewlock.net/working-with-tar-files-in-dotnet/",
    "raw": "In this post I show how to create, extract, and list tar files using the built-in tar support introduced in .NET 7, and discuss some of the limitations",
    "sanitized": "In this post I show how to create, extract, and list tar files using the built-in tar support introduced in .NET 7, and discuss some of the limitations"
  },
  {
    "itemId": "https://andrewlock.net/using-azure-storage-queues-with-azure-functions-and-queuetrigger/",
    "raw": "In this post I discuss using Azure Storage Queue as a message queue and how you can process Storage Queue messages using an Azure Functions app",
    "sanitized": "In this post I discuss using Azure Storage Queue as a message queue and how you can process Storage Queue messages using an Azure Functions app"
  }
]
