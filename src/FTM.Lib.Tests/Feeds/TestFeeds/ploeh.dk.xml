<?xml version="1.0"?>
<rss version="2.0">

  <channel>
    <title>ploeh blog</title>
    <link>https://blog.ploeh.dk</link>
    <description>danish software design</description>
    <language>en-us</language>
    <copyright>Mark Seemann</copyright>
    <pubDate>Mon, 10 Mar 2025 14:40:48 UTC</pubDate>
    <lastBuildDate>Mon, 10 Mar 2025 14:40:48 UTC</lastBuildDate>

    
      <item>
        <title>Appeal to aithority</title>
        <link>https://blog.ploeh.dk/2025/03/10/appeal-to-aithority/</link>
        <pubDate>Mon, 10 Mar 2025 14:40:00 UTC</pubDate>
        <description>


&lt;div id=&quot;post&quot;&gt;
    &lt;p&gt;
        &lt;em&gt;No, it&apos;s not a typo.&lt;/em&gt;
    &lt;/p&gt;
    &lt;p&gt;
        A few months ago, I was listening to a semi-serious programme from the &lt;a href=&quot;https://en.wikipedia.org/wiki/DR_P1&quot;&gt;Danish public service radio&lt;/a&gt;. This is a weekly programme about language that I always listen to as a podcast. The host is the backbone of the show, but in addition to new guests each week, he&apos;s flanked by a regular expert who is highly qualified to answer questions about etymology, grammar, semantics, etc.
    &lt;/p&gt;
    &lt;p&gt;
        In the episode I&apos;m describing, the expert got a question that a listener had previously emailed. To answer, (s)he started like this (and I&apos;m paraphrasing): &lt;em&gt;I don&apos;t actually know the answer to this question, so I did what everyone does these days, when they don&apos;t know the answer: I asked ChatGPT.&lt;/em&gt;
    &lt;/p&gt;
    &lt;p&gt;
        (S)he then proceeded to read aloud what ChatGPT had answered, and concluded with some remarks along the lines that that answer sounded quite plausible.
    &lt;/p&gt;
    &lt;p&gt;
        If I used ten to twenty hours of my time re-listening to every episode from the past few months, I could find the particular episode, link to it, transcribe the exact words, and translate them to English to the best of my abilities. I am, however, not going to do that. First, I&apos;m not inclined to use that much time writing an essay on which I make no income. Second, my aim is not to point fingers at anyone in particular, so I&apos;m being deliberately vague. As you may have noticed, I&apos;ve even masked the person&apos;s sex. Not because I don&apos;t remember, but to avoid singling out anyone.
    &lt;/p&gt;
    &lt;p&gt;
        The expert in question is a regular of the programme, and I&apos;ve heard him or her give good and knowledgeable answers to many tricky questions. As far as I could tell, this particular question was unanswerable, along the lines of &lt;em&gt;why is &apos;table&apos; called &apos;table&apos; rather than &apos;griungth&apos;?&lt;/em&gt;
    &lt;/p&gt;
    &lt;p&gt;
        The correct answer would have been &lt;em&gt;I don&apos;t know, and I don&apos;t think anyone else does.&lt;/em&gt;
    &lt;/p&gt;
    &lt;p&gt;
        Being a veteran of the programme, (s)he must have realized on beforehand that this wouldn&apos;t be good radio, and instead decided to keep it light-hearted.
    &lt;/p&gt;
    &lt;p&gt;
        I get that, and I wouldn&apos;t be writing about it now if it doesn&apos;t look like an example of an increasing trend.
    &lt;/p&gt;
    &lt;p&gt;
        People are using large language models (LLMs) to advocate for their positions.
    &lt;/p&gt;
    &lt;h3 id=&quot;27bb7d65cc8746f09d92f650f0a612eb&quot;&gt;
        Appeal to authority &lt;a href=&quot;#27bb7d65cc8746f09d92f650f0a612eb&quot;&gt;#&lt;/a&gt;
    &lt;/h3&gt;
    &lt;p&gt;
        &lt;a href=&quot;https://en.wikipedia.org/wiki/Argument_from_authority&quot;&gt;Appeal to authority&lt;/a&gt; is no new technique in discourse.
    &lt;/p&gt;
    &lt;blockquote&gt;
        &lt;p&gt;
            &quot;You may also, should it be necessary, not only twist your authorities, but actually falsify them, or quote something which you have invented entirely yourself. As a rule, your opponent has no books at hand, and could not use them if he had.&quot;
        &lt;/p&gt;
        &lt;footer&gt;&lt;cite&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/The_Art_of_Being_Right&quot;&gt;The Art of Being Right&lt;/a&gt;&lt;/cite&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/Arthur_Schopenhauer&quot;&gt;Arthur Schopenhauer&lt;/a&gt;, 1831&lt;/footer&gt;
    &lt;/blockquote&gt;
    &lt;p&gt;
        This seems similar to how people have begun using so-called artificial intelligence (AI) to do their arguing for them. We may, instead, call this &lt;em&gt;appeal to aithority&lt;/em&gt;.
    &lt;/p&gt;
    &lt;h3 id=&quot;535b5c4b352241f9bfd089677757b18f&quot;&gt;
        Epistemological cul-de-sac &lt;a href=&quot;#535b5c4b352241f9bfd089677757b18f&quot;&gt;#&lt;/a&gt;
    &lt;/h3&gt;
    &lt;p&gt;
        We&apos;ve all seen plenty of examples of LLMs being wrong. I&apos;m not going to tire you with any of those here, but I did outline &lt;a href=&quot;/2022/12/05/github-copilot-preliminary-experience-report&quot;&gt;my experience with GitHub Copilot in 2022&lt;/a&gt;. While these technologies may have made some advances since then, they still make basic mistakes.
    &lt;/p&gt;
    &lt;p&gt;
        Not only that. They&apos;re also non-deterministic. Ask a system a question once, and you get one answer. Ask the same question later, and you may get a variation of the same answer, or perhaps even a contradictory answer. If someone exhibits an answer they got from an LLM as an argument in their favour, consider that they may have been asking it five or six times before they received an answer they liked.
    &lt;/p&gt;
    &lt;p&gt;
        Finally, you can easily ask leading questions. Even if someone shows you a screen shot of a chat with an LLM, they may have clipped prior instructions that nudge the system towards a particular bias.
    &lt;/p&gt;
    &lt;p&gt;
        I&apos;ve seen people post screen shots that an LLM claims that &lt;a href=&quot;https://fsharp.org/&quot;&gt;F#&lt;/a&gt; is a better programming language than C#. While I&apos;m sympathetic to that claim, that&apos;s not an argument. Just like &lt;a href=&quot;/2020/10/12/subjectivity&quot;&gt;how you feel about something isn&apos;t an argument&lt;/a&gt;.
    &lt;/p&gt;
    &lt;p&gt;
        This phenomenon seems to be a new trend. People use answers from LLMs as evidence that they are right. I consider this an epistemological dead end.
    &lt;/p&gt;
    &lt;h3 id=&quot;3a509e32ddc74ecb8dc0c7bf8048156a&quot;&gt;
        Real authority &lt;a href=&quot;#3a509e32ddc74ecb8dc0c7bf8048156a&quot;&gt;#&lt;/a&gt;
    &lt;/h3&gt;
    &lt;p&gt;
        Regular readers of this blog may have noticed that I often go to great lengths to track down appropriate sources to cite. I do this for several reasons. One is simply out of respect for the people who figured out things before us. Another reason is to strengthen my own arguments.
    &lt;/p&gt;
    &lt;p&gt;
        It may seem that I, too, appeal to authority. Indeed, I do. When not used in in the way Schopenhauer describes, citing authority is a necessary epistemological shortcut. If someone who knows much about a particular subject has reached a conclusion based on his or her work, we may (tentatively) accept the conclusion without going through all the same work. As Carl Sagan said, &quot;If you wish to make an apple pie from scratch, you must first invent the universe.&quot; You can&apos;t do &lt;em&gt;all&lt;/em&gt; basic research by yourself. At some point, you&apos;ll have to take expert assertions at face value, because you don&apos;t have the time, the education, or the money to build your own &lt;a href=&quot;https://en.wikipedia.org/wiki/Large_Hadron_Collider&quot;&gt;Large Hadron Collider&lt;/a&gt;.
    &lt;/p&gt;
    &lt;p&gt;
        Don&apos;t blindly accept an argument on the only grounds that someone famous said something, but on the other hand, there&apos;s no reason to dismiss out of hand what &lt;a href=&quot;https://en.wikipedia.org/wiki/Albert_Einstein&quot;&gt;Albert Einstein&lt;/a&gt; had to say about gravity, just because you&apos;ve heard that you shouldn&apos;t accept an argument based on appeal to authority.
    &lt;/p&gt;
    &lt;h3 id=&quot;8dbb3f507d8d49b2aa2f322d80fb4031&quot;&gt;
        Conclusion &lt;a href=&quot;#8dbb3f507d8d49b2aa2f322d80fb4031&quot;&gt;#&lt;/a&gt;
    &lt;/h3&gt;
    &lt;p&gt;
        I&apos;m concerned that people increasingly seem to resort to LLMs to argue a case. The LLMs says this, so it must be right.
    &lt;/p&gt;
    &lt;p&gt;
        Sometimes, people will follow up their arguments with &lt;em&gt;of course, it&apos;s just an AI, but...&lt;/em&gt; and then proceed to unfold their preferred argument. Even if this seems as though the person is making a &apos;real&apos; argument, starting from an LLM answer establishes a baseline to a discussion. It still lends an aura of truth to something that may be false.
    &lt;/p&gt;
&lt;/div&gt;&lt;hr&gt;
      This blog is totally free, but if you like it, please consider &lt;a href="https://blog.ploeh.dk/support"&gt;supporting it&lt;/a&gt;.</description>
        <author>Mark Seemann</author>
        <guid isPermaLink="false">https://blog.ploeh.dk/2025/03/10/appeal-to-aithority</guid>
      </item>
    
      <item>
        <title>Reactive monad</title>
        <link>https://blog.ploeh.dk/2025/03/03/reactive-monad/</link>
        <pubDate>Mon, 03 Mar 2025 09:30:00 UTC</pubDate>
        <description>


&lt;div id=&quot;post&quot;&gt;
    &lt;p&gt;
        &lt;em&gt;IObservable&amp;lt;T&amp;gt; is (also) a monad.&lt;/em&gt;
    &lt;/p&gt;
    &lt;p&gt;
        This article is an instalment in &lt;a href=&quot;/2022/03/28/monads&quot;&gt;an article series about monads&lt;/a&gt;. While the previous articles showed, in great detail, how to turn various classes into monads, this article mostly serves as a place-holder. The purpose is only to point out that you don&apos;t have to create all monads yourself. Sometimes, they come as part of a reusable library.
    &lt;/p&gt;
    &lt;p&gt;
        &lt;a href=&quot;http://reactivex.io&quot;&gt;Rx&lt;/a&gt; define such libraries, and &lt;code&gt;IObservable&amp;lt;T&amp;gt;&lt;/code&gt; forms a monad. &lt;a href=&quot;https://github.com/dotnet/reactive&quot;&gt;Reactive Extensions for .NET&lt;/a&gt; define a &lt;code&gt;SelectMany&lt;/code&gt; method for &lt;code&gt;IObservable&amp;lt;T&amp;gt;&lt;/code&gt;, so if &lt;code&gt;source&lt;/code&gt; is an &lt;code&gt;&lt;span style=&quot;color:#2b91af;&quot;&gt;IObservable&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:blue;&quot;&gt;int&lt;/span&gt;&amp;gt;&lt;/code&gt;, you can translate it to &lt;code&gt;&lt;span style=&quot;color:#2b91af;&quot;&gt;IObservable&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:blue;&quot;&gt;char&lt;/span&gt;&amp;gt;&lt;/code&gt; like this:
    &lt;/p&gt;
    &lt;p&gt;
        &lt;pre&gt;&lt;span style=&quot;color:#2b91af;&quot;&gt;IObservable&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:blue;&quot;&gt;char&lt;/span&gt;&amp;gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;dest&lt;/span&gt;&amp;nbsp;=&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;source&lt;/span&gt;.&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;SelectMany&lt;/span&gt;(&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;i&lt;/span&gt;&amp;nbsp;=&amp;gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;Observable&lt;/span&gt;.&lt;span style=&quot;color:#74531f;&quot;&gt;Repeat&lt;/span&gt;(&lt;span style=&quot;color:#a31515;&quot;&gt;&amp;#39;x&amp;#39;&lt;/span&gt;,&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;i&lt;/span&gt;));&lt;/pre&gt;
    &lt;/p&gt;
    &lt;p&gt;
        Since the &lt;code&gt;SelectMany&lt;/code&gt; method is, indeed, called &lt;code&gt;SelectMany&lt;/code&gt; and has the signature
    &lt;/p&gt;
    &lt;p&gt;
        &lt;pre&gt;&lt;span style=&quot;color:blue;&quot;&gt;public&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;static&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;IObservable&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;TResult&lt;/span&gt;&amp;gt;&amp;nbsp;&lt;span style=&quot;color:#74531f;&quot;&gt;SelectMany&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;TSource&lt;/span&gt;,&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;TResult&lt;/span&gt;&amp;gt;(
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;this&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;IObservable&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;TSource&lt;/span&gt;&amp;gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;source&lt;/span&gt;,
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;Func&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;TSource&lt;/span&gt;,&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;IObservable&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;TResult&lt;/span&gt;&amp;gt;&amp;gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;selector&lt;/span&gt;)&lt;/pre&gt;
    &lt;/p&gt;
    &lt;p&gt;
        you can also use C#&apos;s query syntax:
    &lt;/p&gt;
    &lt;p&gt;
        &lt;pre&gt;&lt;span style=&quot;color:#2b91af;&quot;&gt;IObservable&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:blue;&quot;&gt;char&lt;/span&gt;&amp;gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;dest&lt;/span&gt;&amp;nbsp;=&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;from&lt;/span&gt;&amp;nbsp;i&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;in&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;source&lt;/span&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;from&lt;/span&gt;&amp;nbsp;x&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;in&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;Observable&lt;/span&gt;.&lt;span style=&quot;color:#74531f;&quot;&gt;Repeat&lt;/span&gt;(&lt;span style=&quot;color:#a31515;&quot;&gt;&amp;#39;x&amp;#39;&lt;/span&gt;,&amp;nbsp;i)
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;select&lt;/span&gt;&amp;nbsp;x;&lt;/pre&gt;
    &lt;/p&gt;
    &lt;p&gt;
        In both of the above examples, I&apos;ve explicitly declared the type of &lt;code&gt;dest&lt;/code&gt; instead of using the &lt;code&gt;var&lt;/code&gt; keyword. There&apos;s no practical reason to do this; I only did it to make the type clear to you.
    &lt;/p&gt;
    &lt;h3 id=&quot;2de8539dd63d4b1699e6656866e9615d&quot;&gt;
        Left identity &lt;a href=&quot;#2de8539dd63d4b1699e6656866e9615d&quot;&gt;#&lt;/a&gt;
    &lt;/h3&gt;
    &lt;p&gt;
        As I&apos;ve already written time and again, a few test cases don&apos;t prove that any of the &lt;a href=&quot;/2022/04/11/monad-laws&quot;&gt;monad laws&lt;/a&gt; hold, but they can help illustrate what they imply. For example, here&apos;s an illustration of the left-identity law, written as a parametrized &lt;a href=&quot;https://xunit.net/&quot;&gt;xUnit.net&lt;/a&gt; test:
    &lt;/p&gt;
    &lt;p&gt;
        &lt;pre&gt;[&lt;span style=&quot;color:#2b91af;&quot;&gt;Theory&lt;/span&gt;]
[&lt;span style=&quot;color:#2b91af;&quot;&gt;InlineData&lt;/span&gt;(1)]
[&lt;span style=&quot;color:#2b91af;&quot;&gt;InlineData&lt;/span&gt;(2)]
[&lt;span style=&quot;color:#2b91af;&quot;&gt;InlineData&lt;/span&gt;(3)]
&lt;span style=&quot;color:blue;&quot;&gt;public&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;async&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;Task&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;LeftIdentity&lt;/span&gt;(&lt;span style=&quot;color:blue;&quot;&gt;int&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;a&lt;/span&gt;)
{
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;IObservable&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:blue;&quot;&gt;char&lt;/span&gt;&amp;gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;h&lt;/span&gt;(&lt;span style=&quot;color:blue;&quot;&gt;int&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;i&lt;/span&gt;)&amp;nbsp;=&amp;gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;Observable&lt;/span&gt;.&lt;span style=&quot;color:#74531f;&quot;&gt;Repeat&lt;/span&gt;(&lt;span style=&quot;color:#a31515;&quot;&gt;&amp;#39;x&amp;#39;&lt;/span&gt;,&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;i&lt;/span&gt;);
 
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;IList&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:blue;&quot;&gt;char&lt;/span&gt;&amp;gt;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;left&lt;/span&gt;&amp;nbsp;=&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#8f08c4;&quot;&gt;await&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;Observable&lt;/span&gt;.&lt;span style=&quot;color:#74531f;&quot;&gt;Return&lt;/span&gt;(&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;a&lt;/span&gt;).&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;SelectMany&lt;/span&gt;(&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;h&lt;/span&gt;).&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;ToList&lt;/span&gt;();
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;IList&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:blue;&quot;&gt;char&lt;/span&gt;&amp;gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;right&lt;/span&gt;&amp;nbsp;=&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#8f08c4;&quot;&gt;await&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;h&lt;/span&gt;(&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;a&lt;/span&gt;).&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;ToList&lt;/span&gt;();
 
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;Assert&lt;/span&gt;.&lt;span style=&quot;color:#74531f;&quot;&gt;Equal&lt;/span&gt;(&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;left&lt;/span&gt;,&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;right&lt;/span&gt;);
}&lt;/pre&gt;
    &lt;/p&gt;
    &lt;p&gt;
        Not only does the &lt;a href=&quot;https://www.nuget.org/packages/System.Reactive/&quot;&gt;System.Reactive&lt;/a&gt; library define &lt;em&gt;monadic bind&lt;/em&gt; in the form of &lt;code&gt;SelectMany&lt;/code&gt;, but also &lt;em&gt;return&lt;/em&gt;, with the aptly named &lt;code&gt;Observable.Return&lt;/code&gt; function. .NET APIs often forget to do so explicitly, which means that I often have to go hunting for it, or guessing what the developers may have called it. Not here; thank you, Rx team.
    &lt;/p&gt;
    &lt;h3 id=&quot;04c23a87f0534e4495ef3d644793e1aa&quot;&gt;
        Right identity &lt;a href=&quot;#04c23a87f0534e4495ef3d644793e1aa&quot;&gt;#&lt;/a&gt;
    &lt;/h3&gt;
    &lt;p&gt;
        In the same spirit, we may write another test to illustrate the right-identity law:
    &lt;/p&gt;
    &lt;p&gt;
        &lt;pre&gt;[&lt;span style=&quot;color:#2b91af;&quot;&gt;Theory&lt;/span&gt;]
[&lt;span style=&quot;color:#2b91af;&quot;&gt;InlineData&lt;/span&gt;(&lt;span style=&quot;color:#a31515;&quot;&gt;&amp;quot;foo&amp;quot;&lt;/span&gt;)]
[&lt;span style=&quot;color:#2b91af;&quot;&gt;InlineData&lt;/span&gt;(&lt;span style=&quot;color:#a31515;&quot;&gt;&amp;quot;bar&amp;quot;&lt;/span&gt;)]
[&lt;span style=&quot;color:#2b91af;&quot;&gt;InlineData&lt;/span&gt;(&lt;span style=&quot;color:#a31515;&quot;&gt;&amp;quot;baz&amp;quot;&lt;/span&gt;)]
&lt;span style=&quot;color:blue;&quot;&gt;public&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;async&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;Task&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;RightIdentity&lt;/span&gt;(&lt;span style=&quot;color:blue;&quot;&gt;string&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;a&lt;/span&gt;)
{
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;IObservable&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:blue;&quot;&gt;char&lt;/span&gt;&amp;gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;f&lt;/span&gt;(&lt;span style=&quot;color:blue;&quot;&gt;string&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;s&lt;/span&gt;)&amp;nbsp;=&amp;gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;s&lt;/span&gt;.&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;ToObservable&lt;/span&gt;();
 
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;IObservable&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:blue;&quot;&gt;char&lt;/span&gt;&amp;gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;m&lt;/span&gt;&amp;nbsp;=&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;f&lt;/span&gt;(&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;a&lt;/span&gt;);
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;IList&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:blue;&quot;&gt;char&lt;/span&gt;&amp;gt;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;left&lt;/span&gt;&amp;nbsp;=&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#8f08c4;&quot;&gt;await&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;m&lt;/span&gt;.&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;SelectMany&lt;/span&gt;(&lt;span style=&quot;color:#2b91af;&quot;&gt;Observable&lt;/span&gt;.&lt;span style=&quot;color:#74531f;&quot;&gt;Return&lt;/span&gt;).&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;ToList&lt;/span&gt;();
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;IList&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:blue;&quot;&gt;char&lt;/span&gt;&amp;gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;right&lt;/span&gt;&amp;nbsp;=&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#8f08c4;&quot;&gt;await&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;m&lt;/span&gt;.&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;ToList&lt;/span&gt;();
 
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;Assert&lt;/span&gt;.&lt;span style=&quot;color:#74531f;&quot;&gt;Equal&lt;/span&gt;(&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;left&lt;/span&gt;,&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;right&lt;/span&gt;);
}&lt;/pre&gt;
    &lt;/p&gt;
    &lt;p&gt;
        In both this and the previous test, you can see that the test has to &lt;code&gt;await&lt;/code&gt; the observables in order to verify that the resulting collections are identical. Clearly, if you&apos;re instead dealing with infinite streams of data, you can&apos;t rely on such a simplifying assumption. For the general case, you must instead turn to other (proof) techniques to convince yourself that the laws hold. That&apos;s not my agenda here, so I&apos;ll skip that part.
    &lt;/p&gt;
    &lt;h3 id=&quot;8b5017e1aa3942ee8693e56eec6c060d&quot;&gt;
        Associativity &lt;a href=&quot;#8b5017e1aa3942ee8693e56eec6c060d&quot;&gt;#&lt;/a&gt;
    &lt;/h3&gt;
    &lt;p&gt;
        Finally, we may illustrate the associativity law like this:
    &lt;/p&gt;
    &lt;p&gt;
        &lt;pre&gt;[&lt;span style=&quot;color:#2b91af;&quot;&gt;Theory&lt;/span&gt;]
[&lt;span style=&quot;color:#2b91af;&quot;&gt;InlineData&lt;/span&gt;(&lt;span style=&quot;color:#a31515;&quot;&gt;&amp;quot;foo&amp;quot;&lt;/span&gt;)]
[&lt;span style=&quot;color:#2b91af;&quot;&gt;InlineData&lt;/span&gt;(&lt;span style=&quot;color:#a31515;&quot;&gt;&amp;quot;123&amp;quot;&lt;/span&gt;)]
[&lt;span style=&quot;color:#2b91af;&quot;&gt;InlineData&lt;/span&gt;(&lt;span style=&quot;color:#a31515;&quot;&gt;&amp;quot;4t2&amp;quot;&lt;/span&gt;)]
&lt;span style=&quot;color:blue;&quot;&gt;public&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;async&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;Task&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;Associativity&lt;/span&gt;(&lt;span style=&quot;color:blue;&quot;&gt;string&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;a&lt;/span&gt;)
{
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;IObservable&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:blue;&quot;&gt;char&lt;/span&gt;&amp;gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;f&lt;/span&gt;(&lt;span style=&quot;color:blue;&quot;&gt;string&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;s&lt;/span&gt;)&amp;nbsp;=&amp;gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;s&lt;/span&gt;.&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;ToObservable&lt;/span&gt;();
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;IObservable&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:blue;&quot;&gt;byte&lt;/span&gt;&amp;gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;g&lt;/span&gt;(&lt;span style=&quot;color:blue;&quot;&gt;char&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;c&lt;/span&gt;)
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#8f08c4;&quot;&gt;if&lt;/span&gt;&amp;nbsp;(&lt;span style=&quot;color:blue;&quot;&gt;byte&lt;/span&gt;.&lt;span style=&quot;color:#74531f;&quot;&gt;TryParse&lt;/span&gt;(&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;c&lt;/span&gt;.&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;ToString&lt;/span&gt;(),&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;out&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;var&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;b&lt;/span&gt;))
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#8f08c4;&quot;&gt;return&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;Observable&lt;/span&gt;.&lt;span style=&quot;color:#74531f;&quot;&gt;Return&lt;/span&gt;(&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;b&lt;/span&gt;);
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#8f08c4;&quot;&gt;else&lt;/span&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#8f08c4;&quot;&gt;return&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;Observable&lt;/span&gt;.&lt;span style=&quot;color:#74531f;&quot;&gt;Empty&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:blue;&quot;&gt;byte&lt;/span&gt;&amp;gt;();
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;IObservable&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:blue;&quot;&gt;bool&lt;/span&gt;&amp;gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;h&lt;/span&gt;(&lt;span style=&quot;color:blue;&quot;&gt;byte&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;b&lt;/span&gt;)&amp;nbsp;=&amp;gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;Observable&lt;/span&gt;.&lt;span style=&quot;color:#74531f;&quot;&gt;Repeat&lt;/span&gt;(&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;b&lt;/span&gt;&amp;nbsp;%&amp;nbsp;2&amp;nbsp;==&amp;nbsp;0,&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;b&lt;/span&gt;);
 
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;IObservable&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:blue;&quot;&gt;char&lt;/span&gt;&amp;gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;m&lt;/span&gt;&amp;nbsp;=&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;f&lt;/span&gt;(&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;a&lt;/span&gt;);
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;IList&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:blue;&quot;&gt;bool&lt;/span&gt;&amp;gt;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;left&lt;/span&gt;&amp;nbsp;=&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#8f08c4;&quot;&gt;await&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;m&lt;/span&gt;.&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;SelectMany&lt;/span&gt;(&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;g&lt;/span&gt;).&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;SelectMany&lt;/span&gt;(&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;h&lt;/span&gt;).&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;ToList&lt;/span&gt;();
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;IList&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:blue;&quot;&gt;bool&lt;/span&gt;&amp;gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;right&lt;/span&gt;&amp;nbsp;=&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#8f08c4;&quot;&gt;await&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;m&lt;/span&gt;.&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;SelectMany&lt;/span&gt;(&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;x&lt;/span&gt;&amp;nbsp;=&amp;gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;g&lt;/span&gt;(&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;x&lt;/span&gt;).&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;SelectMany&lt;/span&gt;(&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;h&lt;/span&gt;)).&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;ToList&lt;/span&gt;();
 
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;Assert&lt;/span&gt;.&lt;span style=&quot;color:#74531f;&quot;&gt;Equal&lt;/span&gt;(&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;left&lt;/span&gt;,&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;right&lt;/span&gt;);
}&lt;/pre&gt;
    &lt;/p&gt;
    &lt;p&gt;
        This test composes three observable-producing functions in two different ways, to verify that they produce the same values.
    &lt;/p&gt;
    &lt;p&gt;
        The first function, &lt;code&gt;f&lt;/code&gt;, simply turns a string into an observable stream. The string &lt;code&gt;&quot;foo&quot;&lt;/code&gt; becomes the stream of characters &lt;code&gt;&apos;f&apos;&lt;/code&gt;, &lt;code&gt;&apos;o&apos;&lt;/code&gt;, &lt;code&gt;&apos;o&apos;&lt;/code&gt;, and so on.
    &lt;/p&gt;
    &lt;p&gt;
        The next function, &lt;code&gt;g&lt;/code&gt;, tries to parse the incoming character as a number. I&apos;ve chosen &lt;code&gt;byte&lt;/code&gt; as the data type, since there&apos;s no reason trying to parse a value that can, at best, be one of the digits &lt;code&gt;0&lt;/code&gt; to &lt;code&gt;9&lt;/code&gt; into a full 32-bit integer. A &lt;code&gt;byte&lt;/code&gt; is already too large. If the character can be parsed, it&apos;s published as a byte value; if not, an empty stream of data is returned. For example, the character stream &lt;code&gt;&apos;f&apos;&lt;/code&gt;, &lt;code&gt;&apos;o&apos;&lt;/code&gt;, &lt;code&gt;&apos;o&apos;&lt;/code&gt; results in three empty streams, whereas the stream &lt;code&gt;4&lt;/code&gt;, &lt;code&gt;t&lt;/code&gt;, &lt;code&gt;2&lt;/code&gt; produces one singleton stream containing the &lt;code&gt;byte&lt;/code&gt; &lt;code&gt;4&lt;/code&gt;, followed by an empty stream, followed again by a stream containing the single number &lt;code&gt;2&lt;/code&gt;.
    &lt;/p&gt;
    &lt;p&gt;
        The third and final function, &lt;code&gt;h&lt;/code&gt;, turns a number into a stream of Boolean values; &lt;code&gt;true&lt;/code&gt; if the number is even, and &lt;code&gt;false&lt;/code&gt; if it&apos;s odd. The number of values is equal to the number itself. Thus, when composed together, &lt;code&gt;&quot;123&quot;&lt;/code&gt; becomes the stream &lt;code&gt;false&lt;/code&gt;, &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt;. This is true for both the &lt;code&gt;left&lt;/code&gt; and the &lt;code&gt;right&lt;/code&gt; list, even though they&apos;re results of two different compositions.
    &lt;/p&gt;
    &lt;h3 id=&quot;e4efefbebe564e30a27720fdd3f65f7f&quot;&gt;
        Conclusion &lt;a href=&quot;#e4efefbebe564e30a27720fdd3f65f7f&quot;&gt;#&lt;/a&gt;
    &lt;/h3&gt;
    &lt;p&gt;
        The point of this article is mostly that monads are commonplace. While you may discover them in your own code, they may also come in a reusable library. If you already know C# LINQ based off &lt;code&gt;IEnumerable&amp;lt;T&amp;gt;&lt;/code&gt;, parts of Rx will be easy for you to learn. After all, it&apos;s the same abstraction, and &lt;em&gt;familiar abstractions make code readable&lt;/em&gt;.
    &lt;/p&gt;
    &lt;p&gt;
        &lt;strong&gt;Next:&lt;/strong&gt; &lt;a href=&quot;/2023/01/09/the-io-monad&quot;&gt;The IO monad&lt;/a&gt;.
    &lt;/p&gt;
&lt;/div&gt;&lt;hr&gt;
      This blog is totally free, but if you like it, please consider &lt;a href="https://blog.ploeh.dk/support"&gt;supporting it&lt;/a&gt;.</description>
        <author>Mark Seemann</author>
        <guid isPermaLink="false">https://blog.ploeh.dk/2025/03/03/reactive-monad</guid>
      </item>
    
      <item>
        <title>Easier encapsulation with static types</title>
        <link>https://blog.ploeh.dk/2025/02/24/easier-encapsulation-with-static-types/</link>
        <pubDate>Mon, 24 Feb 2025 14:05:00 UTC</pubDate>
        <description>


&lt;div id=&quot;post&quot;&gt;
    &lt;p&gt;
        &lt;em&gt;A metaphor.&lt;/em&gt;
    &lt;/p&gt;
    &lt;p&gt;
        While I&apos;m still &lt;a href=&quot;/2021/08/09/am-i-stuck-in-a-local-maximum&quot;&gt;struggling&lt;/a&gt; with the notion that &lt;a href=&quot;/2024/12/09/implementation-and-usage-mindsets&quot;&gt;dynamically typed languages may have compelling advantages&lt;/a&gt;, I keep coming back to the benefits of statically typed languages. One such benefit is how it enables the communication of contracts, as I recently discussed in &lt;a href=&quot;/2025/01/06/encapsulating-rod-cutting&quot;&gt;Encapsulating rod-cutting&lt;/a&gt;.
    &lt;/p&gt;
    &lt;p&gt;
        As usual, I base my treatment of &lt;a href=&quot;/encapsulation-and-solid&quot;&gt;encapsulation&lt;/a&gt; on my reading of &lt;a href=&quot;https://en.wikipedia.org/wiki/Bertrand_Meyer&quot;&gt;Bertrand Meyer&lt;/a&gt;&apos;s seminal &lt;a href=&quot;/ref/oosc&quot;&gt;Object-Oriented Software Construction&lt;/a&gt;. A major aspect of encapsulation is the explicit establishment of &lt;em&gt;contracts&lt;/em&gt;. What is expected of client code before it can invoke an operation (preconditions)? What is guaranteed to be true after the operation completes (postconditions)? And what is always true of a particular data structure (invariants)?
    &lt;/p&gt;
    &lt;p&gt;
        Contracts constitute the practical part of encapsulation. A contract can give you a rough sense of how well-encapsulated an API is: The more statements you can utter about the contract, the better encapsulation. You may even be able to take all those assertions about the contract and implement them as property-based tests. In other words, if you can think of many properties to write as tests, the API in question probably has good encapsulation. If, on the other hand, you can&apos;t think of a single precondition, postcondition, or invariant, this may indicate that encapsulation is lacking.
    &lt;/p&gt;
    &lt;p&gt;
        Contracts are the practical part of encapsulation. The overall notion provides guidance of &lt;em&gt;how&lt;/em&gt; to achieve encapsulation. Specific contracts describe &lt;em&gt;what&lt;/em&gt; is possible, and &lt;em&gt;how&lt;/em&gt; to successfully interact with an API. Clearly, the &lt;em&gt;what&lt;/em&gt; and &lt;em&gt;how&lt;/em&gt;.
    &lt;/p&gt;
    &lt;p&gt;
        They don&apos;t, however, explain &lt;em&gt;why&lt;/em&gt; encapsulation is valuable.
    &lt;/p&gt;
    &lt;h3 id=&quot;1a06496713174bba99d05dad211205c2&quot;&gt;
        Why encapsulate? &lt;a href=&quot;#1a06496713174bba99d05dad211205c2&quot;&gt;#&lt;/a&gt;
    &lt;/h3&gt;
    &lt;p&gt;
        Successful code bases are big. Such a code base rarely &lt;a href=&quot;/code-that-fits-in-your-head&quot;&gt;fits in your head&lt;/a&gt; in its entirety. And the situation is only exacerbated by multiple programmers working concurrently on the code. Even if you knew most of the code base by heart, your team members are changing it, and you aren&apos;t going to be aware of all the modifications.
    &lt;/p&gt;
    &lt;p&gt;
        Encapsulation offers a solution to this problem. Instead of knowing every detail of the entire code base, encapsulation should enable you to interact with an API (originally, an &lt;em&gt;object&lt;/em&gt;) &lt;em&gt;without&lt;/em&gt; knowing all the implementation details. This is the raison d&apos;être of contracts. Ideally, knowing the contract and the purpose of an object and its methods should be enough.
    &lt;/p&gt;
    &lt;p&gt;
        Imagine that you&apos;ve designed an API with a strong contract. Is your work done? Not yet. Somehow, you&apos;ll have to communicate the contract to all present and future client developers.
    &lt;/p&gt;
    &lt;p&gt;
        How do you convey a contract to potential users? I can think of a few ways. Good names are important, but &lt;a href=&quot;/2020/11/23/good-names-are-skin-deep&quot;&gt;only skin-deep&lt;/a&gt;. You can also publish documentation, or use the type system. The following metaphor explores those two alternatives.
    &lt;/p&gt;
    &lt;h3 id=&quot;5ad0b635686f436d80a753622d6e4f22&quot;&gt;
        Doing a puzzle &lt;a href=&quot;#5ad0b635686f436d80a753622d6e4f22&quot;&gt;#&lt;/a&gt;
    &lt;/h3&gt;
    &lt;p&gt;
        When I was a boy, I had a puzzle called &lt;em&gt;Das verflixte Hunde-Spiel&lt;/em&gt;, which roughly translates to &lt;em&gt;the confounded dog game&lt;/em&gt;. I&apos;ve &lt;a href=&quot;/2024/10/03/das-verflixte-hunde-spiel&quot;&gt;previously described the game and an algorithm for solving it&lt;/a&gt;, but that&apos;s not my concern here. Rather, I&apos;d like to discuss how one might abstract the information carried by each tile.
    &lt;/p&gt;
    &lt;p&gt;
        &lt;img src=&quot;/content/binary/hunde-spiel.jpg&quot; alt=&quot;A picture of the box of the puzzle, together with the tiles spread out in unordered fashion.&quot;&gt;
    &lt;/p&gt;
    &lt;p&gt;
        As the picture suggests, the game consists of nine square tiles, each with two dog heads and two tails. The objective of the puzzle is to lay all nine tiles in a three-by-three grid such that all the heads fit the opposing tails. The dogs come in four different colour patterns, and each head must fit a tail of the same pattern.
    &lt;/p&gt;
    &lt;p&gt;
        It turns out that there are umpteen variations of this kind of puzzle. This one has cartoon dogs, but you can find similar games with frogs, cola bottles, &lt;a href=&quot;https://en.wikipedia.org/wiki/Playing_card_suit&quot;&gt;playing card suits&lt;/a&gt;, trains, ladybirds, fast food, flowers, baseball players, owls, etc. This suggests that a &lt;em&gt;generalization&lt;/em&gt; may exist. Perhaps an abstraction, even.
    &lt;/p&gt;
	&lt;blockquote&gt;
		&lt;p&gt;
			&quot;Abstraction is the elimination of the irrelevant and the amplification of the essential&quot;
		&lt;/p&gt;
		&lt;footer&gt;&lt;cite&gt;Robert C. Martin, &lt;a href=&quot;/ref/doocautbm&quot;&gt;Designing Object-Oriented C++ Applications Using The Booch Method&lt;/a&gt;, ch. 00&lt;/cite&gt;&lt;/footer&gt;
	&lt;/blockquote&gt;
    &lt;p&gt;
        How to eliminate the irrelevant and amplify the essential of a tile?
    &lt;/p&gt;
    &lt;p&gt;
        To recapitulate, a single tile looks like this:
    &lt;/p&gt;
    &lt;p&gt;
        &lt;img src=&quot;/content/binary/hundespiel-tile1.jpg&quot; width=&quot;200&quot; alt=&quot;One of the tiles of the Hunde-Spiel.&quot;&gt;
    &lt;/p&gt;
    &lt;p&gt;
        In a sense, we may regard most of the information on such a tile as &apos;implementation details&apos;. In a code metaphor, imagine looking at a tile like this as being equivalent to looking at the source code of a method or function (i.e. API). That&apos;s not the &lt;em&gt;essence&lt;/em&gt; we need to correctly assemble the puzzle.
    &lt;/p&gt;
    &lt;p&gt;
        Imagine that you have to lay down the tiles according to &lt;a href=&quot;/2024/10/03/das-verflixte-hunde-spiel&quot;&gt;a known solution&lt;/a&gt;. Since you already know the solution, this task only involves locating and placing each of the nine tiles. In this case, there are only nine tiles, each with four possible rotations, so if you already know what you&apos;re looking for, that is, of course, a tractable endeavour.
    &lt;/p&gt;
    &lt;p&gt;
        Now imagine that you&apos;d like to undertake putting together the tiles &lt;em&gt;without&lt;/em&gt; having to navigate by the full information content of each tile. In programming, we often need to do this. We have to identify objects that are likely to perform some subtask for us, and we have to figure out how to interact with such an object to achieve our goals. Preferably, we&apos;d like to be able to do this &lt;em&gt;without&lt;/em&gt; having to read all the source code of the candidate object. &lt;em&gt;Encapsulation&lt;/em&gt; promises that this should be possible.
    &lt;/p&gt;
    &lt;h3 id=&quot;f87bc2bd17584b63808bb0581eeb1523&quot;&gt;
        The backside of the tiles &lt;a href=&quot;#f87bc2bd17584b63808bb0581eeb1523&quot;&gt;#&lt;/a&gt;
    &lt;/h3&gt;
    &lt;p&gt;
        If we want to eliminate the irrelevant, we have to hide the information on each tile. As a first step, consider what happens if we flip the tiles around so that we only see their backs.
    &lt;/p&gt;
    &lt;p&gt;
        &lt;img src=&quot;/content/binary/empty-tile-backside.png&quot; alt=&quot;An empty square, symbolizing the backside of a tile.&quot; width=&quot;200&quot;&gt;
    &lt;/p&gt;
    &lt;p&gt;
        Obviously, each backside is entirely devoid of information, which means that we&apos;re now flying blind. Even if we know how to solve the puzzle, our only recourse is to blindly pick and rotate each of the nine tiles. As the &lt;a href=&quot;/2024/10/03/das-verflixte-hunde-spiel&quot;&gt;previous article&lt;/a&gt; calculated, when picking at random, the odds of arriving at any valid solution is 1 to 5,945,425,920. Not surprisingly, total absence of information doesn&apos;t work.
    &lt;/p&gt;
    &lt;p&gt;
        We already knew that, because, while we want to eliminate the irrelevant, we also must amplify the essential. Thus, we need to figure out what that might be.
    &lt;/p&gt;
    &lt;p&gt;
        Perhaps we could write the essential information on the back of each tile. In the metaphor, this would correspond to writing documentation for an API.
    &lt;/p&gt;
    &lt;h3 id=&quot;86c6695ffa884ec28be560309779ab98&quot;&gt;
        Documentation &lt;a href=&quot;#86c6695ffa884ec28be560309779ab98&quot;&gt;#&lt;/a&gt;
    &lt;/h3&gt;
    &lt;p&gt;
        To continue the metaphor, I asked various acquaintances to each &apos;document&apos; a title. I deliberately only gave them the instruction that they should enable me to assemble the puzzle based on what was on the back of each tile. Some asked for additional directions, as to format, etc., but I refused to give any. People document code in various different ways, and I wanted to capture similar variation. Let&apos;s review some of the documentation I received.
    &lt;/p&gt;
    &lt;p&gt;
        &lt;img src=&quot;/content/binary/tile2-doc.jpg&quot; alt=&quot;The back of a tile, with written documentation and some arrows.&quot; width=&quot;200&quot;&gt;
    &lt;/p&gt;
    &lt;p&gt;
        Since I asked around among acquaintances, all respondents were Danes, and some chose to write the documentation in Danish, as is the case with this one.
    &lt;/p&gt;
    &lt;p&gt;
        Unless you have an explicit, enforced policy, you might run into a similar situation in software documentation. I&apos;ve seen more than one example of software documentation written in Danish, simply because the programmer who wrote it didn&apos;t consider anything else than his or her native language. I&apos;m sure most Europeans have similar experiences.
    &lt;/p&gt;
    &lt;p&gt;
        The text on the tile says, from the top and clockwise:
    &lt;/p&gt;
    &lt;ul&gt;
        &lt;li&gt;light brown dog/light snout/dark ears&lt;/li&gt;
        &lt;li&gt;dark brown, white/snout&lt;/li&gt;
        &lt;li&gt;orange tail/brown spots on/back&lt;/li&gt;
        &lt;li&gt;orange tail/orange back&lt;/li&gt;
    &lt;/ul&gt;
    &lt;p&gt;
        Notice the disregard for capitalization rules or punctuation, a tendency among programmers that I&apos;ve commented upon in &lt;a href=&quot;/2021/06/14/new-book-code-that-fits-in-your-head&quot;&gt;Code That Fits in Your Head&lt;/a&gt;.
    &lt;/p&gt;
    &lt;p&gt;
        In addition to the text, the back of the above tile also includes six arrows. Four of them ought to be self-evident, but can you figure out what the two larger arrows indicate?
    &lt;/p&gt;
    &lt;p&gt;
        It turns out that the person writing this piece of documentation eventually realized that the description should be mirrored, because it was on the backside of the tile. To be fair to that person, I&apos;d asked everyone to write with a permanent marker or pen, so correcting a mistake involved either a &apos;hack&apos; like the two arrows, or starting over from scratch.
    &lt;/p&gt;
    &lt;p&gt;
        Let&apos;s look at some more &apos;documentation&apos;. Another tile looks like this:
    &lt;/p&gt;
    &lt;p&gt;
        &lt;img src=&quot;/content/binary/tile3-doc.jpg&quot; alt=&quot;The back of a tile, with some fairly cryptic symbols in the corners.&quot; width=&quot;200&quot;&gt;
    &lt;/p&gt;
    &lt;p&gt;
        At first glance, I thought those symbols were Greek letters, but once you look at it, you start to realize what&apos;s going on. In the upper right corner, you see a stylized back and tail. Likewise, the lower left corner has a stylized face in the form of a smiley. The lines then indicate that the sides indicated by a corner has a head or tail.
    &lt;/p&gt;
    &lt;p&gt;
        Additionally, each side is encoded with a letter. I&apos;ll leave it as an exercise for the reader to figure out what &lt;em&gt;G&lt;/em&gt; and &lt;em&gt;B&lt;/em&gt; indicate, but also notice the two examples of a modified &lt;em&gt;R&lt;/em&gt;. The one to the right indicates &lt;em&gt;red with spots&lt;/em&gt;, and the other one uses the minus symbol to indicate &lt;em&gt;red without spots&lt;/em&gt;.
    &lt;/p&gt;
    &lt;p&gt;
        On the one hand, this example does an admirable job of eliminating the irrelevant, but you may also find that it errs on the side of terseness. At the very least, it demands of the reader that he or she is already intimately familiar with the overall problem domain. You have to know the game well enough to be able to figure out that &lt;em&gt;R-&lt;/em&gt; probably means &lt;em&gt;red without spots&lt;/em&gt;.
    &lt;/p&gt;
    &lt;p&gt;
        Had this been software documentation, we might have been less than happy with this level of information. It may meet formal requirements, but is perhaps too idiosyncratic or esoteric.
    &lt;/p&gt;
    &lt;p&gt;
        Be that as it may, it&apos;s also possible to err on the other side.
    &lt;/p&gt;
    &lt;p&gt;
        &lt;img src=&quot;/content/binary/Tile5-doc.jpg&quot; alt=&quot;The back of a tile, this time with an almost one-to-one replica of the picture on the front.&quot; width=&quot;200&quot;&gt;
    &lt;/p&gt;
    &lt;p&gt;
        In this example, the person writing the documentation essentially copied and described every detail on the front of the tile. Having no colours available, the person instead chose to describe in words the colour of each dog. Metaphorically speaking, the documentation replicates the implementation. It doesn&apos;t eliminate any irrelevant detail, and thereby it also fails to amplify the essential.
    &lt;/p&gt;
    &lt;p&gt;
        Here&apos;s another interesting example:
    &lt;/p&gt;
    &lt;p&gt;
        &lt;img src=&quot;/content/binary/tile8-doc.jpg&quot; alt=&quot;The back of a tile, with text along all four sides.&quot; width=&quot;200&quot;&gt;
    &lt;/p&gt;
    &lt;p&gt;
        The text is in Danish. From the top clockwise, it says:
    &lt;/p&gt;
    &lt;ul&gt;
        &lt;li&gt;dark brown dog with blue collar&lt;/li&gt;
        &lt;li&gt;light brown dog with red collar&lt;/li&gt;
        &lt;li&gt;brown dog with small spots on back&lt;/li&gt;
        &lt;li&gt;Brown dog with big spots on back&lt;/li&gt;
    &lt;/ul&gt;
    &lt;p&gt;
        Notice how the person writing this were aware that a tile has no natural up or down. Instead, each side is described with letters facing up when that side is up. You have to rotate the documentation in order to read all four sides. You may find that impractical, but I actually consider that to represent something essential about each tile. To me, this is positive.
    &lt;/p&gt;
    &lt;p&gt;
        Even so, an important piece of information is missing. It doesn&apos;t say which sides have heads, and which ones have tails.
    &lt;/p&gt;
    &lt;p&gt;
        Finally, here&apos;s one that, in my eyes, amplifies the essential and eliminates the irrelevant:
    &lt;/p&gt;
    &lt;p&gt;
        &lt;img src=&quot;/content/binary/tile6-doc.jpg&quot; alt=&quot;The back of a tile, with text along all four sides.&quot; width=&quot;200&quot;&gt;
    &lt;/p&gt;
    &lt;p&gt;
        Like the previous example, you have to rotate the documentation in order to read all four sides, but the text is much terser. If you ask me, &lt;em&gt;Grey head&lt;/em&gt;, &lt;em&gt;Burnt umber tail&lt;/em&gt;, &lt;em&gt;Brown tail&lt;/em&gt;, and &lt;em&gt;Spotted head&lt;/em&gt; amplifies the essential and eliminates everything else.
    &lt;/p&gt;
    &lt;p&gt;
        Notice, however, how inconsistent the documentation is. People chose various different ways in their attempt to communicate what they found important. Some people inadvertently left out essential information. Other people provided too much information. Some people never came through, so in a few cases, documentation was entirely absent. And finally, I&apos;ve hinted at this already, most people forgot to &apos;mirror&apos; the information, but a few did remember.
    &lt;/p&gt;
    &lt;p&gt;
        All of this has direct counterparts in software documentation. The level of detail you get from documentation varies greatly, and often, the information that I actually care about is absent: Can I call this method with a negative number? Does the input string need to be formatted in a particular way? Does the method ever return null? Which exceptions may it throw?
    &lt;/p&gt;
    &lt;p&gt;
        I&apos;m not against documentation, but it has limitations. As far as I can tell, though, that&apos;s your only option if you&apos;re working in a dynamically typed language.
    &lt;/p&gt;
    &lt;h3 id=&quot;dfb325aa94c6490b8ecbb36107d8be32&quot;&gt;
        Static types with limited expression &lt;a href=&quot;#dfb325aa94c6490b8ecbb36107d8be32&quot;&gt;#&lt;/a&gt;
    &lt;/h3&gt;
    &lt;p&gt;
        Can you think of a way to constrain which puzzle pieces fit together with other pieces?
    &lt;/p&gt;
    &lt;p&gt;
        That&apos;s how &lt;a href=&quot;https://en.wikipedia.org/wiki/Jigsaw_puzzle&quot;&gt;jigsaw puzzles&lt;/a&gt; work. As a first attempt, we may try to cut out out the pieces like this:
    &lt;/p&gt;
    &lt;p&gt;
        &lt;img src=&quot;/content/binary/one-jigsaw-tile.png&quot; alt=&quot;An anonymous jigsaw puzzle piece&quot; width=&quot;226&quot;&gt;
    &lt;/p&gt;
    &lt;p&gt;
        This does help some, because when presented with the subtask of having to locate and find the next piece, at least we can&apos;t rotate the next piece in four different positions. Instead, we have only two options. Perhaps we&apos;ll choose to lay down the next piece like this:
    &lt;/p&gt;
    &lt;p&gt;
        &lt;img src=&quot;/content/binary/two-jigsaw-tiles.png&quot; alt=&quot;Two anonymous jigsaw pieces fit together&quot; width=&quot;426&quot;&gt;
    &lt;/p&gt;
    &lt;p&gt;
        You may also decide to rotate the right piece ninety degrees clockwise, but those are your only two rotation options.
    &lt;/p&gt;
    &lt;p&gt;
        We may decide to encode the shape of the pieces so that, say, the tabs indicate heads and the indentations indicate tails. This, at least, prevents us from joining head with head, or tail with tail.
    &lt;/p&gt;
    &lt;p&gt;
        This strikes me as an apt metaphor for &lt;a href=&quot;https://en.wikipedia.org/wiki/C_(programming_language)&quot;&gt;C&lt;/a&gt;, or how many programmers use the type systems of C# or &lt;a href=&quot;https://www.java.com/&quot;&gt;Java&lt;/a&gt;. It does prevent some easily preventable mistakes, but the types still don&apos;t carry enough information to enable you to identify exactly the pieces you need.
    &lt;/p&gt;
    &lt;h3 id=&quot;2196a52cce924b1ab0998f6a840a3e6c&quot;&gt;
        More expressive static types &lt;a href=&quot;#2196a52cce924b1ab0998f6a840a3e6c&quot;&gt;#&lt;/a&gt;
    &lt;/h3&gt;
    &lt;p&gt;
        Static type systems come in various forms, and some are more expressive than others. To be honest, C#&apos;s type system does come with good expressive powers, although it tends to &lt;a href=&quot;/2019/12/16/zone-of-ceremony&quot;&gt;require much ceremony&lt;/a&gt;. As far as I can tell, Java&apos;s type system is on par with C#. Let&apos;s assume that we either take the time to jump through the hoops that make these type systems expressive, or that we&apos;re using a language with a more expressive type system.
    &lt;/p&gt;
    &lt;p&gt;
        In the puzzle metaphor, we may decide to give a tile this shape:
    &lt;/p&gt;
    &lt;p&gt;
        &lt;img src=&quot;/content/binary/strongly-typed-tile.png&quot; alt=&quot;A jigsaw puzzle piece with four distinct tab and indentation shapes.&quot; width=&quot;225&quot;&gt;
    &lt;/p&gt;
    &lt;p&gt;
        Such a shape encodes all the information that we need, because each tab or indentation has a unique shape. We may not even have to remember exactly what a square indentation represents. If we&apos;re presented with the above tile and asked to lay down a compatible tile, we have to find one with a square tab.
    &lt;/p&gt;
    &lt;p&gt;
        &lt;img src=&quot;/content/binary/strongly-typed-tile-pair.png&quot; alt=&quot;Two jigsaw puzzle pieces with distinct tab and indentation shapes, arranged so that they fit together.&quot; width=&quot;425&quot;&gt;
    &lt;/p&gt;
    &lt;p&gt;
        Encoding the essential information into tile &lt;em&gt;shapes&lt;/em&gt; enables us to not only prevent mistakes, but identify the correct composition of all the tiles.
    &lt;/p&gt;
    &lt;p&gt;
        &lt;img src=&quot;/content/binary/strongly-typed-completed-puzzle.png&quot; alt=&quot;Completed puzzle with nine distinctly shaped pieces.&quot; width=&quot;625&quot;&gt;
    &lt;/p&gt;
    &lt;p&gt;
        For years, I&apos;ve thought about static types as &lt;em&gt;shapes&lt;/em&gt; of objects or functions. For practical purposes, &lt;a href=&quot;/2022/08/22/can-types-replace-validation&quot;&gt;static types can&apos;t express everything&lt;/a&gt; an operation may do, but I find it useful to use a good type system to my advantage.
    &lt;/p&gt;
    &lt;h3 id=&quot;5342222c3624472ab9b638aff7ecc65e&quot;&gt;
        Code examples &lt;a href=&quot;#5342222c3624472ab9b638aff7ecc65e&quot;&gt;#&lt;/a&gt;
    &lt;/h3&gt;
    &lt;p&gt;
        You may find this a nice metaphor, and still fail to see how it translates to actual code. I&apos;m not going to go into details here, but rather point to existing articles that give some introductions.
    &lt;/p&gt;
    &lt;p&gt;
        One place to start is to refactor &lt;a href=&quot;/2015/01/19/from-primitive-obsession-to-domain-modelling&quot;&gt;from primitive obsession to domain models&lt;/a&gt;. Just wrapping a string or an integer in a &lt;a href=&quot;https://www.hillelwayne.com/post/constructive/&quot;&gt;predicative type&lt;/a&gt; helps communicate the purpose and constraints of a data type. Consider a constructor like this:
    &lt;/p&gt;
	&lt;p&gt;
		&lt;pre&gt;&lt;span style=&quot;color:blue;&quot;&gt;public&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;Reservation&lt;/span&gt;(
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Guid&amp;nbsp;id,
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;DateTime&amp;nbsp;at,
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Email&amp;nbsp;email,
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Name&amp;nbsp;name,
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;NaturalNumber&amp;nbsp;quantity)&lt;/pre&gt;
	&lt;/p&gt;
    &lt;p&gt;
        While hardly sophisticated, it already communicates much information about preconditions for creating a &lt;code&gt;Reservation&lt;/code&gt; object. Some of the constituent types (&lt;code&gt;Guid&lt;/code&gt; and &lt;code&gt;DateTime&lt;/code&gt;) are built in, so likely well-known to any developer working on a relevant code base. If you&apos;re wondering whether you can create a reservation with a negative &lt;code&gt;quantity&lt;/code&gt;, the types already answer that.
    &lt;/p&gt;
    &lt;p&gt;
        Languages with native support for &lt;a href=&quot;https://en.wikipedia.org/wiki/Tagged_union&quot;&gt;sum types&lt;/a&gt; let you easily model mutually exclusive, heterogeneous closed type hierarchies, as shown in &lt;a href=&quot;/2016/11/28/easy-domain-modelling-with-types&quot;&gt;this example&lt;/a&gt;:
    &lt;/p&gt;
	&lt;p&gt;
		&lt;pre&gt;&lt;span style=&quot;color:blue;&quot;&gt;type&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:teal;&quot;&gt;PaymentService&lt;/span&gt;&amp;nbsp;=&amp;nbsp;{&amp;nbsp;Name&amp;nbsp;:&amp;nbsp;&lt;span style=&quot;color:teal;&quot;&gt;string&lt;/span&gt;;&amp;nbsp;Action&amp;nbsp;:&amp;nbsp;&lt;span style=&quot;color:teal;&quot;&gt;string&lt;/span&gt;&amp;nbsp;}
 
&lt;span style=&quot;color:blue;&quot;&gt;type&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:teal;&quot;&gt;PaymentType&lt;/span&gt;&amp;nbsp;=
|&amp;nbsp;&lt;span style=&quot;color:navy;&quot;&gt;Individual&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;of&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:teal;&quot;&gt;PaymentService&lt;/span&gt;
|&amp;nbsp;&lt;span style=&quot;color:navy;&quot;&gt;Parent&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;of&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:teal;&quot;&gt;PaymentService&lt;/span&gt;
|&amp;nbsp;&lt;span style=&quot;color:navy;&quot;&gt;Child&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;of&lt;/span&gt;&amp;nbsp;originalTransactionKey&amp;nbsp;:&amp;nbsp;&lt;span style=&quot;color:teal;&quot;&gt;string&lt;/span&gt;&amp;nbsp;*&amp;nbsp;paymentService&amp;nbsp;:&amp;nbsp;&lt;span style=&quot;color:teal;&quot;&gt;PaymentService&lt;/span&gt;&lt;/pre&gt;
	&lt;/p&gt;
    &lt;p&gt;
        And if your language doesn&apos;t natively support sum types, you can &lt;a href=&quot;/2018/06/25/visitor-as-a-sum-type&quot;&gt;emulate them with the Visitor design pattern&lt;/a&gt;.
    &lt;/p&gt;
    &lt;p&gt;
        You can, in fact, do some &lt;a href=&quot;/2025/02/03/modelling-data-relationships-with-c-types&quot;&gt;quite sophisticated tricks even with .NET&apos;s type system&lt;/a&gt;.
    &lt;/p&gt;
    &lt;h3 id=&quot;783cb14749b64aafac68d97a0096b349&quot;&gt;
        Conclusion &lt;a href=&quot;#783cb14749b64aafac68d97a0096b349&quot;&gt;#&lt;/a&gt;
    &lt;/h3&gt;
    &lt;p&gt;
        People often argue about static types with the assumption that their main use is to prevent mistakes. They can help do that, too, but I also find static types an excellent communication medium. The benefits of using a static type system to model contracts is that, when a type system is already part of a language, it&apos;s a consistent, formalized framework for communication. Instead of inconsistent and idiosyncratic documentation, you can embed much information about a contract in the types of an API.
    &lt;/p&gt;
    &lt;p&gt;
        And indeed, not only can the types help communicate pre- and postconditions. The type checker &lt;em&gt;also&lt;/em&gt; prevents errors.
    &lt;/p&gt;
    &lt;p&gt;
        A sufficiently sophisticated type system carries more information that most people realize. When I write &lt;a href=&quot;https://www.haskell.org/&quot;&gt;Haskell&lt;/a&gt; code, I often need to look up a function that I need. Contrary to other languages, I don&apos;t try to search for a function by guessing what name it might have. Rather, the &lt;a href=&quot;https://hoogle.haskell.org/&quot;&gt;Hoogle&lt;/a&gt; search engine enables you to search for a function &lt;em&gt;by type&lt;/em&gt;.
    &lt;/p&gt;
    &lt;p&gt;
        Types are shapes, and shapes are like outlines of objects. Used well, they enable you to eliminate the irrelevant, and amplify the essential information about an API.
    &lt;/p&gt;
&lt;/div&gt;&lt;hr&gt;
      This blog is totally free, but if you like it, please consider &lt;a href="https://blog.ploeh.dk/support"&gt;supporting it&lt;/a&gt;.</description>
        <author>Mark Seemann</author>
        <guid isPermaLink="false">https://blog.ploeh.dk/2025/02/24/easier-encapsulation-with-static-types</guid>
      </item>
    
      <item>
        <title>In defence of multiple WiP</title>
        <link>https://blog.ploeh.dk/2025/02/17/in-defence-of-multiple-wip/</link>
        <pubDate>Mon, 17 Feb 2025 08:52:00 UTC</pubDate>
        <description>


&lt;div id=&quot;post&quot;&gt;
    &lt;p&gt;
        &lt;em&gt;Programming isn&apos;t like factory work.&lt;/em&gt;
    &lt;/p&gt;
    &lt;p&gt;
        I was recently stuck on a programming problem. Specifically, &lt;a href=&quot;https://adventofcode.com/2024/day/19&quot;&gt;part two of an Advent of Code puzzle&lt;/a&gt;, if you must know. As is my routine, I went for a run, which always helps to get unstuck. During the few hours away from the keyboard, I&apos;d had a new idea. When I returned to the computer, I had my new algorithm implemented in about an hour, and it calculated the correct result in sub-second time.
    &lt;/p&gt;
    &lt;p&gt;
        I&apos;m not writing this to brag. On the contrary, I suck at Advent of Code (which is a major &lt;a href=&quot;/2020/01/13/on-doing-katas&quot;&gt;reason that I do it&lt;/a&gt;). The point is rather that programming is fundamentally non-linear in effort. Not only are some algorithms orders of magnitudes faster than other algorithms, but it&apos;s also the case that the amount of time you put into solving a problem doesn&apos;t always correlate with the outcome.
    &lt;/p&gt;
    &lt;p&gt;
        Sometimes, the most productive way to solve a problem is to let it rest and &lt;em&gt;go do something else&lt;/em&gt;.
    &lt;/p&gt;
    &lt;h3 id=&quot;007252aeb07e4b0c9c514185a7f9699f&quot;&gt;
        One-piece flow &lt;a href=&quot;#007252aeb07e4b0c9c514185a7f9699f&quot;&gt;#&lt;/a&gt;
    &lt;/h3&gt;
    &lt;p&gt;
        Doesn&apos;t this conflict with the ideal of one-piece flow? That is, that you should only have one piece of work in progress (WiP).
    &lt;/p&gt;
    &lt;p&gt;
        Yes, it does.
    &lt;/p&gt;
    &lt;p&gt;
        It&apos;s not that I don&apos;t understand basic queue theory, haven&apos;t read &lt;a href=&quot;/ref/the-goal&quot;&gt;The Goal&lt;/a&gt;, or that I&apos;m unaware of the &lt;a href=&quot;https://youtu.be/Yqi9Gwt-OEA?si=9qLo77p3iJZKBwcx&quot;&gt;compelling explanations given by, among other people, Henrik Kniberg&lt;/a&gt;. I do, myself, &lt;a href=&quot;/2023/01/23/agilean&quot;&gt;lean (pun intended) towards lean software development&lt;/a&gt;.
    &lt;/p&gt;
    &lt;p&gt;
        I only offer the following as a counterpoint to other voices. As I&apos;ve described before, when I seem to disagree with the mainstream view on certain topics, the explanation may rather be that &lt;a href=&quot;/2021/08/09/am-i-stuck-in-a-local-maximum&quot;&gt;I&apos;m concerned with a different problem than other people are&lt;/a&gt;. If your problem is a dysfunctional organization where everyone have dozens of tasks in progress, nothing ever gets done because it&apos;s considered more important to start new work items than completing ongoing work, where &apos;utilization&apos; is at 100% because of &apos;efficiency&apos;, then yes, I&apos;d also recommend limiting WiP.
    &lt;/p&gt;
    &lt;p&gt;
        The idea in one-piece flow is that you&apos;re only working on one thing at a time.
    &lt;/p&gt;
    &lt;p&gt;
        &lt;img src=&quot;/content/binary/one-piece-flow2.png&quot; alt=&quot;One-piece flow illustrated as a series of boxes in a row.&quot;&gt;
    &lt;/p&gt;
    &lt;p&gt;
        Perhaps you can divide the task into subtasks, but you&apos;re only supposed to start something new when you&apos;re done with the current job. Compared to the alternative of starting a lot concurrent tasks in order to deal with wait times in the system, I agree with the argument that this is often better. One-piece flow often prompts you to take a good, hard look at where and how delays occur in your process.
    &lt;/p&gt;
    &lt;p&gt;
        Even so, I find it ironic that most of &apos;the Lean squad&apos; is so busy blaming &lt;a href=&quot;https://en.wikipedia.org/wiki/Scientific_management&quot;&gt;Taylorism&lt;/a&gt; for everything that&apos;s wrong with many software development organizations, only to go advocate for another management style rooted in factory work.
    &lt;/p&gt;
    &lt;p&gt;
        Programming isn&apos;t manufacturing.
    &lt;/p&gt;
    &lt;h3 id=&quot;28c7eb05dd1342d7a3140aae5618db4f&quot;&gt;
        Urgent or important &lt;a href=&quot;#28c7eb05dd1342d7a3140aae5618db4f&quot;&gt;#&lt;/a&gt;
    &lt;/h3&gt;
    &lt;p&gt;
        As &lt;a href=&quot;https://en.wikipedia.org/wiki/Dwight_D._Eisenhower&quot;&gt;Eisenhower&lt;/a&gt; quoted an unnamed college president:
    &lt;/p&gt;
    &lt;blockquote&gt;
        &lt;p&gt;
            &quot;I have two kinds of problems, the urgent and the important. The urgent are not important, and the important are never urgent.&quot;
        &lt;/p&gt;
    &lt;/blockquote&gt;
    &lt;p&gt;
        It&apos;s hard to overstate how liberating it can be to ignore the urgent and focus on the important. Over decades, I keep returning to the realization that you often reach the best solutions to software problems by letting them stew.
    &lt;/p&gt;
    &lt;p&gt;
        I&apos;m sure I&apos;ve already told the following story elsewhere, but it bears repeating. Back in 2009 I started an open-source project called &lt;a href=&quot;https://github.com/AutoFixture/AutoFixture&quot;&gt;AutoFixture&lt;/a&gt; and also managed to convince my then-employer, &lt;a href=&quot;https://www.safewhere.com/&quot;&gt;Safewhere&lt;/a&gt;, to use it in our code base.
    &lt;/p&gt;
    &lt;p&gt;
        Maintaining or evolving AutoFixture wasn&apos;t my job, though. It was a work-related hobby, so nothing related to it was urgent. When in the office, I worked on Safewhere code, but biking back and forth between home and work, I thought about AutoFixture problems. Often, these problems would be informed by how we used it in Safewhere. My point is that the problems I was thinking about were real problems that I&apos;d encountered in my day job, not just something I&apos;d dreamt up for fun.
    &lt;/p&gt;
    &lt;p&gt;
        I was mostly thinking about API designs. Given that this was ideally a general-purpose open-source project, I didn&apos;t want to solve narrow problems with specific solutions. I wanted to find general designs that would address not only the immediate concerns, but also other problems that I had yet to discover.
    &lt;/p&gt;
    &lt;p&gt;
        Many an evening I spent trying out an idea I&apos;d had on my bicycle. Often, it turned out that the idea wouldn&apos;t work. While that might be, in one sense, dismaying, on the other hand, it only meant that I&apos;d &lt;a href=&quot;https://quoteinvestigator.com/2012/07/31/edison-lot-results/&quot;&gt;learned about yet another way that didn&apos;t work&lt;/a&gt;.
    &lt;/p&gt;
    &lt;p&gt;
        Because there was no pressure to release a new version of AutoFixture, I could take the time to get it right. (After a fashion. You may disagree with the notion that AutoFixture is well-designed. I designed its APIs to the best of my abilities during the decade I lead the project. And when I discovered property-based testing, I &lt;a href=&quot;https://github.com/AutoFixture/AutoFixture/issues/703&quot;&gt;passed on the reins&lt;/a&gt;.)
    &lt;/p&gt;
    &lt;h3 id=&quot;ae07d9022e714de689fc1900d68a866d&quot;&gt;
        Get there earlier by starting later &lt;a href=&quot;#ae07d9022e714de689fc1900d68a866d&quot;&gt;#&lt;/a&gt;
    &lt;/h3&gt;
    &lt;p&gt;
        There&apos;s a 1944 science fiction short story by &lt;a href=&quot;https://en.wikipedia.org/wiki/A._E._van_Vogt&quot;&gt;A. E. van Vogt&lt;/a&gt; called &lt;a href=&quot;https://en.wikipedia.org/wiki/Far_Centaurus&quot;&gt;Far Centaurus&lt;/a&gt; that I&apos;m now going to spoil.
    &lt;/p&gt;
    &lt;p&gt;
        In it, four astronauts embark on a 500-year journey to &lt;a href=&quot;https://en.wikipedia.org/wiki/Alpha_Centauri&quot;&gt;Alpha Centauri&lt;/a&gt;, using &lt;a href=&quot;https://en.wikipedia.org/wiki/Suspended_animation_in_fiction&quot;&gt;suspended animation&lt;/a&gt;. When they arrive, they discover that the system is long settled, from Earth.
    &lt;/p&gt;
    &lt;p&gt;
        During their 500 years en route, humans invented faster space travel. Even though later generations started later, they arrived earlier. They discovered a better way to get from a to b.
    &lt;/p&gt;
    &lt;p&gt;
        Compared to one-piece flow, we may illustrate this metaphor like this:
    &lt;/p&gt;
    &lt;p&gt;
        &lt;img src=&quot;/content/binary/one-piece-flow-vs-thinking.png&quot; alt=&quot;A row of boxes above another row of thinner boxes that are more spread out, but indicates an earlier finish.&quot;&gt;
    &lt;/p&gt;
    &lt;p&gt;
        When presented with a problem, we don&apos;t start working on it right away. Or, we do, but the work we do is &lt;em&gt;thinking&lt;/em&gt; rather than typing. We may even do some prototyping at that stage, but if no good solution presents itself, we put away the problem for a while.
    &lt;/p&gt;
    &lt;p&gt;
        We may return to the problem from time to time, and what may happen is that we realize that there&apos;s a much better, quicker way of accomplishing the goal than we first believed (as, again, &lt;a href=&quot;/2025/02/10/geographic-hulls&quot;&gt;recently happened to me&lt;/a&gt;). Once we have that realization, we may initiate the work, and it it may even turn out that we&apos;re done earlier than if we&apos;d immediately started hacking at the problem.
    &lt;/p&gt;
    &lt;p&gt;
        By starting later, we&apos;ve learned more. Like much knowledge work, software development is a profoundly non-linear endeavour. You may find a new way of doing things that are orders of magnitudes faster than what you originally had in mind. Not only in terms of &lt;a href=&quot;https://en.wikipedia.org/wiki/Big_O_notation&quot;&gt;big-O notation&lt;/a&gt;, but also in terms of implementation effort.
    &lt;/p&gt;
    &lt;p&gt;
        When doing Advent of Code, I&apos;ve repeatedly been struck how the more efficient algorithm is often also simpler to implement.
    &lt;/p&gt;
    &lt;h3 id=&quot;95ed780f2c3b496383f1af9b68aa2b1b&quot;&gt;
        Multiple WiP &lt;a href=&quot;#95ed780f2c3b496383f1af9b68aa2b1b&quot;&gt;#&lt;/a&gt;
    &lt;/h3&gt;
    &lt;p&gt;
        As the above figure suggests, you&apos;re probably not going to spend all your time thinking or doing. The figure has plenty of air in between the activities.
    &lt;/p&gt;
    &lt;p&gt;
        This may seem wasteful to efficiency nerds, but again: Knowledge work isn&apos;t factory work.
    &lt;/p&gt;
    &lt;p&gt;
        You can&apos;t think by command. If you&apos;ve ever tried meditating, you&apos;ll know just how hard it is to empty your mind, or in any way control what goes on in your head. Focus on your breath. Indeed, and a few minutes later you snap out of a reverie about what to make for dinner, only to discover that you were able to focus on your breath for all of ten seconds.
    &lt;/p&gt;
    &lt;p&gt;
        As I already alluded to in the introduction, I regularly exercise during the work day. I also go grocery shopping, or do other chores. I&apos;ve consistently found that I solve all hard problems when I&apos;m &lt;em&gt;away&lt;/em&gt; from the computer, not while I&apos;m at it. I think &lt;a href=&quot;https://en.wikipedia.org/wiki/Rich_Hickey&quot;&gt;Rich Hickey&lt;/a&gt; calls it hammock-driven development.
    &lt;/p&gt;
    &lt;p&gt;
        When presented with an interesting problem, I usually can&apos;t help thinking about it. What often happens, however, is that I&apos;m mulling over multiple interesting problems during my day.
    &lt;/p&gt;
    &lt;p&gt;
        &lt;img src=&quot;/content/binary/multiple-thinking-processes-interleaved.png&quot; alt=&quot;Same diagram as above, but now with more boxes representing thinking activities interleaved among each other.&quot;&gt;
    &lt;/p&gt;
    &lt;p&gt;
        You could say that I actually have multiple pieces of work in progress. Some of them lie dormant for a long time, only to occasionally pop up and be put away again. Even so, I&apos;ve had problems that I&apos;d essentially given up on, only to resurface later when I&apos;d learned a sufficient amount of new things. At that time, then, I sometimes realize that what I previously thought was impossible is actually quite simple.
    &lt;/p&gt;
    &lt;p&gt;
        It&apos;s amazing what you can accomplish when you focus on the things that are important, rather than the things that are urgent.
    &lt;/p&gt;
    &lt;h3 id=&quot;216b1e2dee074e249ad8044a6ad88a97&quot;&gt;
        One size doesn&apos;t fit all &lt;a href=&quot;#216b1e2dee074e249ad8044a6ad88a97&quot;&gt;#&lt;/a&gt;
    &lt;/h3&gt;
    &lt;p&gt;
        How do I know that this will always work? How can I be sure that an orders-of-magnitude insight will occur if I just wait long enough?
    &lt;/p&gt;
    &lt;p&gt;
        There are no guarantees. My point is rather that this happens with surprising regularity. To me, at least.
    &lt;/p&gt;
    &lt;p&gt;
        Your software organization may include tasks that represent truly menial work. Yet, if you have too much of that, why haven&apos;t you automated it away?
    &lt;/p&gt;
    &lt;p&gt;
        Still, I&apos;m not going to tell anyone how to run their development team. I&apos;m only pointing out a weakness with the common one-piece narrative: It treats work as mostly a result of effort, and as if it were somehow interchangeable with other development tasks.
    &lt;/p&gt;
    &lt;p&gt;
        Most crucially, it models the amount of time required to complete a task as being independent of time: Whether you start a job today or in a month, it&apos;ll take &lt;em&gt;x&lt;/em&gt; days to complete.
    &lt;/p&gt;
    &lt;p&gt;
        What if, instead, the effort was an function of time (as well as other factors)? The later you start, the simpler the work might be.
    &lt;/p&gt;
    &lt;p&gt;
        This of course doesn&apos;t happen automatically. Even if I have all my good ideas &lt;em&gt;away&lt;/em&gt; from the keyboard, I still spend quite a bit of time &lt;em&gt;at&lt;/em&gt; the keyboard. You need to work enough with a problem before inspiration can strike.
    &lt;/p&gt;
    &lt;p&gt;
        I&apos;d recommend more slack time, more walks in the park, more grocery shopping, more doing the dishes.
    &lt;/p&gt;
    &lt;h3 id=&quot;ea87f59e4b014bb4861e71d8b6264394&quot;&gt;
        Conclusion &lt;a href=&quot;#ea87f59e4b014bb4861e71d8b6264394&quot;&gt;#&lt;/a&gt;
    &lt;/h3&gt;
    &lt;p&gt;
        Programming is knowledge work. We may even consider it creative work. And while you can nurture creativity, you can&apos;t force it.
    &lt;/p&gt;
    &lt;p&gt;
        I find it useful to have multiple things going on at the same time, because concurrent tasks often cross-pollinate. What I learn from engaging with one task may produce a significant insight into another, otherwise unrelated problem. The lack of urgency, the lack of deadlines, foster this approach to problem-solving.
    &lt;/p&gt;
    &lt;p&gt;
        But I&apos;m not going to tell you how to run your software development process. If you want to treat it as an assembly line, that&apos;s your decision.
    &lt;/p&gt;
    &lt;p&gt;
        You&apos;ll probably get work done anyway. Months of work can save days of thinking.
    &lt;/p&gt;
&lt;/div&gt;
&lt;hr&gt;
      This blog is totally free, but if you like it, please consider &lt;a href="https://blog.ploeh.dk/support"&gt;supporting it&lt;/a&gt;.</description>
        <author>Mark Seemann</author>
        <guid isPermaLink="false">https://blog.ploeh.dk/2025/02/17/in-defence-of-multiple-wip</guid>
      </item>
    
      <item>
        <title>Geographic hulls</title>
        <link>https://blog.ploeh.dk/2025/02/10/geographic-hulls/</link>
        <pubDate>Mon, 10 Feb 2025 07:14:00 UTC</pubDate>
        <description>


&lt;div id=&quot;post&quot;&gt;
    &lt;p&gt;
        &lt;em&gt;Seven lines of Python code.&lt;/em&gt;
    &lt;/p&gt;
    &lt;p&gt;
        Can you tell what this is?
    &lt;/p&gt;
    &lt;p&gt;
        &lt;img src=&quot;/content/binary/dk-hull.svg&quot; alt=&quot;Convex hulls of each of the major Danish islands, as well as Jutland.&quot;&gt;
    &lt;/p&gt;
    &lt;p&gt;
        I showed this to both my wife and my son, and they immediately recognized it for what it is. On the other hand, they&apos;re also both culturally primed for it.
    &lt;/p&gt;
    &lt;p&gt;
        After all, it&apos;s a map of &lt;a href=&quot;https://en.wikipedia.org/wiki/Denmark&quot;&gt;Denmark&lt;/a&gt;, although I&apos;ve transformed each of the major islands, as well as the peninsula of &lt;a href=&quot;https://en.wikipedia.org/wiki/Jutland&quot;&gt;Jutland&lt;/a&gt; to their &lt;a href=&quot;https://en.wikipedia.org/wiki/Convex_hull&quot;&gt;convex hulls&lt;/a&gt;.
    &lt;/p&gt;
    &lt;p&gt;
        Here&apos;s the original map I used for the transformation:
    &lt;/p&gt;
    &lt;p&gt;
        &lt;img src=&quot;/content/binary/dk-outline.svg&quot; alt=&quot;Map of Denmark.&quot;&gt;
    &lt;/p&gt;
    &lt;p&gt;
        I had a reason to do this, having to do with &lt;a href=&quot;https://en.wikipedia.org/wiki/Coastline_paradox&quot;&gt;the coastline paradox&lt;/a&gt;, but my underlying motivation isn&apos;t really that important for this article, since I rather want to discuss how I did it.
    &lt;/p&gt;
    &lt;p&gt;
        The short answer is that I used &lt;a href=&quot;https://www.python.org/&quot;&gt;Python&lt;/a&gt;. You have to admit that Python has a fabulous ecosystem for all kinds of data crunching, including visualizations. I&apos;d actually geared up to implementing a &lt;a href=&quot;https://en.wikipedia.org/wiki/Graham_scan&quot;&gt;Graham scan&lt;/a&gt; myself, but that turned out not to be necessary.
    &lt;/p&gt;
    &lt;h3 id=&quot;2c60300f58f645d7b45cad678b076ad4&quot;&gt;
        GeoPandas to the rescue &lt;a href=&quot;#2c60300f58f645d7b45cad678b076ad4&quot;&gt;#&lt;/a&gt;
    &lt;/h3&gt;
    &lt;p&gt;
        I&apos;m a novice Python programmer, but I&apos;ve used &lt;a href=&quot;https://matplotlib.org/&quot;&gt;Matplotlib&lt;/a&gt; before to visualize data, so I found it natural to start with a few web searches to figure out how to get to grips with the problem.
    &lt;/p&gt;
    &lt;p&gt;
        I quickly found &lt;a href=&quot;https://geopandas.org/&quot;&gt;GeoPandas&lt;/a&gt;, which works on top of Matplotlib to render and visualize geographical data.
    &lt;/p&gt;
    &lt;p&gt;
        My next problem was to find a data set for Denmark, which &lt;a href=&quot;https://simplemaps.com/gis/country/dk#all&quot;&gt;I found on SimpleMaps&lt;/a&gt;. I chose to download and work with the &lt;a href=&quot;https://geojson.org/&quot;&gt;GeoJSON&lt;/a&gt; format.
    &lt;/p&gt;
    &lt;p&gt;
        Originally, I&apos;d envisioned implementing a Graham scan myself. After all, &lt;a href=&quot;/2015/10/19/visual-value-verification&quot;&gt;I&apos;d done that before in F#&lt;/a&gt;, and it&apos;s a compelling &lt;a href=&quot;/2020/01/13/on-doing-katas&quot;&gt;exercise&lt;/a&gt;. It turned out, however, that this function is already available in the GeoPandas API.
    &lt;/p&gt;
    &lt;p&gt;
        I had trouble separating the data file&apos;s multi-part geometry into multiple single geometries. This meant that when I tried to find the convex hull, I got the hull of the entire map, instead of each island individually. The solution was to use the &lt;a href=&quot;https://geopandas.org/en/stable/docs/reference/api/geopandas.GeoDataFrame.explode.html&quot;&gt;explode&lt;/a&gt; function.
    &lt;/p&gt;
    &lt;p&gt;
        Once I figured that out, it turned out that all I needed was seven lines of Python code, including imports and a blank line:
    &lt;/p&gt;
    &lt;p&gt;
        &lt;pre&gt;&lt;span style=&quot;color:blue;&quot;&gt;import&lt;/span&gt;&amp;nbsp;geopandas&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;as&lt;/span&gt;&amp;nbsp;gpd
&lt;span style=&quot;color:blue;&quot;&gt;import&lt;/span&gt;&amp;nbsp;matplotlib.pyplot&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;as&lt;/span&gt;&amp;nbsp;plt
 
&lt;span style=&quot;color:blue;&quot;&gt;map&lt;/span&gt;&amp;nbsp;=&amp;nbsp;gpd.read_file(&lt;span style=&quot;color:#a31515;&quot;&gt;&amp;#39;dk.json&amp;#39;&lt;/span&gt;)
&lt;span style=&quot;color:blue;&quot;&gt;map&lt;/span&gt;.explode().boundary.plot(edgecolor=&lt;span style=&quot;color:#a31515;&quot;&gt;&amp;#39;green&amp;#39;&lt;/span&gt;).set_axis_off()
&lt;span style=&quot;color:blue;&quot;&gt;map&lt;/span&gt;.explode().convex_hull.boundary.plot().set_axis_off()
plt.show()&lt;/pre&gt;
    &lt;/p&gt;
    &lt;p&gt;
        In this script, I display the unmodified &lt;code&gt;map&lt;/code&gt; before the convex hulls. This is only an artefact of my process. As I&apos;ve already admitted, this is new ground for me, and I initially wanted to verify that I could even read in and display a GeoJSON file.
    &lt;/p&gt;
    &lt;p&gt;
        For both maps I use the &lt;code&gt;boundary&lt;/code&gt; property to draw only the outline of the map, rather than filled polygons.
    &lt;/p&gt;
    &lt;h3 id=&quot;2b5f206417b542f386497d43d1bde322&quot;&gt;
        Enveloping the map parts &lt;a href=&quot;#2b5f206417b542f386497d43d1bde322&quot;&gt;#&lt;/a&gt;
    &lt;/h3&gt;
    &lt;p&gt;
        Mostly for fun, but also to illustrate what a convex hull is, we can layer the two visualizations in a single image. In order to do that, a few changes to the code are required.
    &lt;/p&gt;
    &lt;p&gt;
        &lt;pre&gt;&lt;span style=&quot;color:blue;&quot;&gt;import&lt;/span&gt;&amp;nbsp;geopandas&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;as&lt;/span&gt;&amp;nbsp;gpd
&lt;span style=&quot;color:blue;&quot;&gt;import&lt;/span&gt;&amp;nbsp;matplotlib.pyplot&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;as&lt;/span&gt;&amp;nbsp;plt
 
&lt;span style=&quot;color:blue;&quot;&gt;map&lt;/span&gt;&amp;nbsp;=&amp;nbsp;gpd.read_file(&lt;span style=&quot;color:#a31515;&quot;&gt;&amp;#39;dk.json&amp;#39;&lt;/span&gt;)
_,&amp;nbsp;ax&amp;nbsp;=&amp;nbsp;plt.subplots()
&lt;span style=&quot;color:blue;&quot;&gt;map&lt;/span&gt;.explode().boundary.plot(ax=ax,&amp;nbsp;edgecolor=&lt;span style=&quot;color:#a31515;&quot;&gt;&amp;#39;green&amp;#39;&lt;/span&gt;).set_axis_off()
&lt;span style=&quot;color:blue;&quot;&gt;map&lt;/span&gt;.explode().convex_hull.boundary.plot(ax=ax).set_axis_off()
plt.show()&lt;/pre&gt;
    &lt;/p&gt;
    &lt;p&gt;
        This little script now produces this image:
    &lt;/p&gt;
    &lt;p&gt;
        &lt;img src=&quot;/content/binary/dk-outlines-in-hulls.svg&quot; alt=&quot;Map of Denmark, with each island, as well as the Jutland peninsula, enveloped in their convex hulls.&quot;&gt;
    &lt;/p&gt;
    &lt;p&gt;
        Those readers who know Danish geography may wonder what&apos;s going on with &lt;a href=&quot;https://en.wikipedia.org/wiki/Falster&quot;&gt;Falster&lt;/a&gt;. Since it&apos;s the sixth-largest Island in Denmark, shouldn&apos;t it have its own convex hull? Yes, it should, yet here it&apos;s connected to &lt;a href=&quot;https://en.wikipedia.org/wiki/Zealand&quot;&gt;Zealand&lt;/a&gt;. Granted, two bridges connect the two, but that&apos;s hardly sufficient to consider them one island. There are plenty of bridges in Denmark, so according to that criterion, most of Denmark is connected. In fact, on the above map, only &lt;a href=&quot;https://en.wikipedia.org/wiki/Bornholm&quot;&gt;Bornholm&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/Sams%C3%B8&quot;&gt;Samsø&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/L%C3%A6s%C3%B8&quot;&gt;Læsø&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/%C3%86r%C3%B8&quot;&gt;Ærø&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/Fan%C3%B8&quot;&gt;Fanø&lt;/a&gt;, and &lt;a href=&quot;https://en.wikipedia.org/wiki/Anholt_(Denmark)&quot;&gt;Anholt&lt;/a&gt; would then remain as islands.
    &lt;/p&gt;
    &lt;p&gt;
        Rather, this only highlights the quality, or lack thereof, of the data set. I don&apos;t want to complain about a free resource, and the data set has served my purposes well enough. I mostly point this out in case readers were puzzled about this. In fact, a similar case applies to &lt;a href=&quot;https://en.wikipedia.org/wiki/North_Jutlandic_Island&quot;&gt;Nørrejyske Ø&lt;/a&gt;, which in the GeoJSON map is connected to Jutland at &lt;a href=&quot;https://en.wikipedia.org/wiki/Aalborg&quot;&gt;Aalborg&lt;/a&gt;. Yes, there&apos;s a bridge there. No, that shouldn&apos;t qualify as a land connection.
    &lt;/p&gt;
    &lt;h3 id=&quot;92812a33519c47d3a90b20a447ddb7dc&quot;&gt;
        Other countries &lt;a href=&quot;#92812a33519c47d3a90b20a447ddb7dc&quot;&gt;#&lt;/a&gt;
    &lt;/h3&gt;
    &lt;p&gt;
        As you may have noticed, apart from the hard-coded file name, nothing in the code is specific to Denmark. This means that you can play around with other countries. Here I&apos;ve downloaded various GeoJSON data sets from &lt;a href=&quot;https://geojson-maps.kyd.au/&quot;&gt;GeoJSON Maps of the globe&lt;/a&gt;, which seems to be using the same source data set that the Danish data set is also based on. In other words, if I download the file for Denmark from that site, it looks exactly as above.
    &lt;/p&gt;
    &lt;p&gt;
        Can you guess which country this is?
    &lt;/p&gt;
    &lt;p&gt;
        &lt;img src=&quot;/content/binary/gr-outline.svg&quot; alt=&quot;Convex hull of the Greek mainland, and hulls of many Greek islands.&quot; title=&quot;Convex hull of the Greek mainland, and hulls of many Greek islands.&quot;&gt;
    &lt;/p&gt;
    &lt;p&gt;
        Or this one?
    &lt;/p&gt;
    &lt;p&gt;
        &lt;img src=&quot;/content/binary/jp-outline.svg&quot; alt=&quot;Convex hull of each larger island of Japan.&quot; title=&quot;Convex hull of each larger island of Japan.&quot;&gt;
    &lt;/p&gt;
    &lt;p&gt;
        While this is all good fun, not all countries have interesting convex hull:
    &lt;/p&gt;
    &lt;p&gt;
        &lt;img src=&quot;/content/binary/ch-outline.svg&quot; alt=&quot;Convex hull of Switzerland.&quot; title=&quot;Convex hull of Switzerland.&quot;&gt;
    &lt;/p&gt;
    &lt;p&gt;
        While I&apos;ll let you have a bit of fun guessing, you can hover your cursor over each image to reveal which country it is.
    &lt;/p&gt;
    &lt;h3 id=&quot;ad89b110fca040ebb37db7788ddcf6d6&quot;&gt;
        Conclusion &lt;a href=&quot;#ad89b110fca040ebb37db7788ddcf6d6&quot;&gt;#&lt;/a&gt;
    &lt;/h3&gt;
    &lt;p&gt;
        Your default position when working with Python should probably be: &lt;em&gt;There&apos;s already a library for that.&lt;/em&gt;
    &lt;/p&gt;
    &lt;p&gt;
        In this article, I&apos;ve described how I wanted to show Denmark, but only the convex hull of each of the larger islands, as well as the Jutland peninsula. Of course, there was already a library for that, so that I only needed to write seven lines of code to produce the figures I wanted.
    &lt;/p&gt;
    &lt;p&gt;
        Granted, it took a few hours of research to put those seven lines together, but I&apos;m only a novice Python programmer, and I&apos;m sure an old hand could do it much faster.
    &lt;/p&gt;
&lt;/div&gt;&lt;hr&gt;
      This blog is totally free, but if you like it, please consider &lt;a href="https://blog.ploeh.dk/support"&gt;supporting it&lt;/a&gt;.</description>
        <author>Mark Seemann</author>
        <guid isPermaLink="false">https://blog.ploeh.dk/2025/02/10/geographic-hulls</guid>
      </item>
    
      <item>
        <title>Modelling data relationships with C# types</title>
        <link>https://blog.ploeh.dk/2025/02/03/modelling-data-relationships-with-c-types/</link>
        <pubDate>Mon, 03 Feb 2025 07:24:00 UTC</pubDate>
        <description>


&lt;div id=&quot;post&quot;&gt;
    &lt;p&gt;
        &lt;em&gt;A C# example implementation of Ghosts of Departed Proofs.&lt;/em&gt;
    &lt;/p&gt;
    &lt;p&gt;
        This article continues where &lt;a href=&quot;/2025/01/20/modelling-data-relationships-with-f-types&quot;&gt;Modelling data relationships with F# types&lt;/a&gt; left off. It ports the &lt;a href=&quot;https://fsharp.org/&quot;&gt;F#&lt;/a&gt; example code to C#. If you don&apos;t read F# source code, you may instead want to read &lt;a href=&quot;/2024/12/23/implementing-rod-cutting&quot;&gt;Implementing rod-cutting&lt;/a&gt; to get a sense of the problem being addressed.
    &lt;/p&gt;
    &lt;p&gt;
        I&apos;m going to assume that you&apos;ve read enough of the previous articles to get a sense of the example, but in short, this article examines if it&apos;s possible to use the type system to model data relationships. Specifically, we have methods that operate on a collection and a number. The precondition for calling these methods is that the number is a valid (one-based) index into the collection.
    &lt;/p&gt;
    &lt;p&gt;
        While you would typically implement such a precondition with a &lt;a href=&quot;https://en.wikipedia.org/wiki/Guard_(computer_science)&quot;&gt;Guard Clause&lt;/a&gt; and communicate it via documentation, you can also use the &lt;em&gt;Ghosts of Departed Proofs&lt;/em&gt; technique to instead leverage the type system. Please see &lt;a href=&quot;/2025/01/20/modelling-data-relationships-with-f-types&quot;&gt;the previous article for an overview&lt;/a&gt;.
    &lt;/p&gt;
    &lt;p&gt;
        That said, I&apos;ll repeat one point here: The purpose of these articles is to showcase a technique, using a simple example to make it, I hope, sufficiently clear what&apos;s going on. All this machinery is hardly warranted for an example as simple as this. All of this is a demonstration, not a recommendation.
    &lt;/p&gt;
    &lt;h3 id=&quot;24f5e14404424695aca0a2c7e049b0a5&quot;&gt;
        Size proofs &lt;a href=&quot;#24f5e14404424695aca0a2c7e049b0a5&quot;&gt;#&lt;/a&gt;
    &lt;/h3&gt;
    &lt;p&gt;
        As in the previous article, we may start by defining what a &apos;size proof&apos; looks like. In C#, it may &lt;a href=&quot;/2015/08/03/idiomatic-or-idiosyncratic&quot;&gt;idiomatically&lt;/a&gt; be a class with an &lt;code&gt;internal&lt;/code&gt; constructor.
    &lt;/p&gt;
    &lt;p&gt;
        &lt;pre&gt;&lt;span style=&quot;color:blue;&quot;&gt;public&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;sealed&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;class&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;Size&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;T&lt;/span&gt;&amp;gt;
{
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;public&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;int&lt;/span&gt;&amp;nbsp;Value&amp;nbsp;{&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;get&lt;/span&gt;;&amp;nbsp;}
 
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;internal&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;Size&lt;/span&gt;(&lt;span style=&quot;color:blue;&quot;&gt;int&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;value&lt;/span&gt;)
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Value&amp;nbsp;=&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;value&lt;/span&gt;;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}
 
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:green;&quot;&gt;//&amp;nbsp;Also&amp;nbsp;override&amp;nbsp;ToString,&amp;nbsp;Equals,&amp;nbsp;and&amp;nbsp;GetHashCode...&lt;/span&gt;
}&lt;/pre&gt;
    &lt;/p&gt;
    &lt;p&gt;
        Since the constructor is &lt;code&gt;internal&lt;/code&gt; it means that client code can&apos;t create &lt;code&gt;&lt;span style=&quot;color:#2b91af;&quot;&gt;Size&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;T&lt;/span&gt;&amp;gt;&lt;/code&gt; instances, and thereby client code can&apos;t decide a concrete type for the phantom type &lt;code&gt;T&lt;/code&gt;.
    &lt;/p&gt;
    &lt;h3 id=&quot;0f22adf378da484b8dc85e372f82a0d6&quot;&gt;
        Issuing size proofs &lt;a href=&quot;#0f22adf378da484b8dc85e372f82a0d6&quot;&gt;#&lt;/a&gt;
    &lt;/h3&gt;
    &lt;p&gt;
        How may client code create &lt;code&gt;&lt;span style=&quot;color:#2b91af;&quot;&gt;Size&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;T&lt;/span&gt;&amp;gt;&lt;/code&gt; objects? It may ask a &lt;code&gt;&lt;span style=&quot;color:#2b91af;&quot;&gt;PriceList&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;T&lt;/span&gt;&amp;gt;&lt;/code&gt; object to issue a proof:
    &lt;/p&gt;
    &lt;p&gt;
        &lt;pre&gt;&lt;span style=&quot;color:blue;&quot;&gt;public&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;sealed&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;class&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;PriceList&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;T&lt;/span&gt;&amp;gt;
{
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;public&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;IReadOnlyCollection&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:blue;&quot;&gt;int&lt;/span&gt;&amp;gt;&amp;nbsp;Prices&amp;nbsp;{&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;get&lt;/span&gt;;&amp;nbsp;}
 
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;internal&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;PriceList&lt;/span&gt;(&lt;span style=&quot;color:#2b91af;&quot;&gt;IReadOnlyCollection&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:blue;&quot;&gt;int&lt;/span&gt;&amp;gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;prices&lt;/span&gt;)
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Prices&amp;nbsp;=&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;prices&lt;/span&gt;;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}
 
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;public&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;Size&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;T&lt;/span&gt;&amp;gt;?&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;TryCreateSize&lt;/span&gt;(&lt;span style=&quot;color:blue;&quot;&gt;int&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;candidate&lt;/span&gt;)
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#8f08c4;&quot;&gt;if&lt;/span&gt;&amp;nbsp;(0&amp;nbsp;&amp;lt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;candidate&lt;/span&gt;&amp;nbsp;&amp;amp;&amp;amp;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;candidate&lt;/span&gt;&amp;nbsp;&amp;lt;=&amp;nbsp;Prices.Count)
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#8f08c4;&quot;&gt;return&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;new&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;Size&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;T&lt;/span&gt;&amp;gt;(&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;candidate&lt;/span&gt;);
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#8f08c4;&quot;&gt;else&lt;/span&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#8f08c4;&quot;&gt;return&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;null&lt;/span&gt;;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}
 
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:green;&quot;&gt;//&amp;nbsp;More&amp;nbsp;members&amp;nbsp;go&amp;nbsp;here...&lt;/span&gt;&lt;/pre&gt;
    &lt;/p&gt;
    &lt;p&gt;
        If the requested &lt;code&gt;candidate&lt;/code&gt; integer represents a valid (one-indexed) position in the &lt;code&gt;&lt;span style=&quot;color:#2b91af;&quot;&gt;PriceList&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;T&lt;/span&gt;&amp;gt;&lt;/code&gt; object, the return value is a &lt;code&gt;&lt;span style=&quot;color:#2b91af;&quot;&gt;Size&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;T&lt;/span&gt;&amp;gt;&lt;/code&gt; object that contains the &lt;code&gt;candidate&lt;/code&gt;. If, on the other hand, the &lt;code&gt;candidate&lt;/code&gt; isn&apos;t in the valid range, no object is returned.
    &lt;/p&gt;
    &lt;p&gt;
        Since both &lt;code&gt;&lt;span style=&quot;color:#2b91af;&quot;&gt;PriceList&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;T&lt;/span&gt;&amp;gt;&lt;/code&gt; and &lt;code&gt;&lt;span style=&quot;color:#2b91af;&quot;&gt;Size&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;T&lt;/span&gt;&amp;gt;&lt;/code&gt; classes are immutable, once a &apos;size proof&apos; has been issued, it remains valid. As I&apos;ve previously argued, &lt;a href=&quot;/2024/06/12/simpler-encapsulation-with-immutability&quot;&gt;immutability makes encapsulation simpler&lt;/a&gt;.
    &lt;/p&gt;
    &lt;p&gt;
        This kind of API does, however, look like it&apos;s &lt;a href=&quot;https://en.wikipedia.org/wiki/Turtles_all_the_way_down&quot;&gt;turtles all the way down&lt;/a&gt;. After all, the &lt;code&gt;&lt;span style=&quot;color:#2b91af;&quot;&gt;PriceList&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;T&lt;/span&gt;&amp;gt;&lt;/code&gt; constructor is also &lt;code&gt;internal&lt;/code&gt;. Now the question becomes: How does client code create &lt;code&gt;&lt;span style=&quot;color:#2b91af;&quot;&gt;PriceList&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;T&lt;/span&gt;&amp;gt;&lt;/code&gt; objects?
    &lt;/p&gt;
    &lt;p&gt;
        The short answer is that it doesn&apos;t. Instead, it&apos;ll be given an object by the library API. You&apos;ll see how that works later, but first, let&apos;s review what such an API enables us to express.
    &lt;/p&gt;
    &lt;h3 id=&quot;079355423c6d4a7d8daaeffc08661adb&quot;&gt;
        Proof-based Cut API &lt;a href=&quot;#079355423c6d4a7d8daaeffc08661adb&quot;&gt;#&lt;/a&gt;
    &lt;/h3&gt;
    &lt;p&gt;
        As described in &lt;a href=&quot;/2025/01/06/encapsulating-rod-cutting&quot;&gt;Encapsulating rod-cutting&lt;/a&gt;, returning a collection of &apos;cut&apos; objects better communicates postconditions than returning a tuple of two arrays, as &lt;a href=&quot;/2024/12/23/implementing-rod-cutting&quot;&gt;the original algorithm suggested&lt;/a&gt;. In other words, we&apos;re going to need a type for that.
    &lt;/p&gt;
    &lt;p&gt;
        &lt;pre&gt;&lt;span style=&quot;color:blue;&quot;&gt;public&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;sealed&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;record&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;Cut&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;T&lt;/span&gt;&amp;gt;(&lt;span style=&quot;color:blue;&quot;&gt;int&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;Revenue&lt;/span&gt;,&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;Size&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;T&lt;/span&gt;&amp;gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;Size&lt;/span&gt;);&lt;/pre&gt;
    &lt;/p&gt;
    &lt;p&gt;
        In this case we can get by with a simple &lt;a href=&quot;https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/record&quot;&gt;record type&lt;/a&gt;. Since one of the properties is of the type &lt;code&gt;&lt;span style=&quot;color:#2b91af;&quot;&gt;Size&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;T&lt;/span&gt;&amp;gt;&lt;/code&gt;, client code can&apos;t create &lt;code&gt;&lt;span style=&quot;color:#2b91af;&quot;&gt;Cut&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;T&lt;/span&gt;&amp;gt;&lt;/code&gt; instances, just like it can&apos;t create &lt;code&gt;&lt;span style=&quot;color:#2b91af;&quot;&gt;Size&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;T&lt;/span&gt;&amp;gt;&lt;/code&gt; or &lt;code&gt;&lt;span style=&quot;color:#2b91af;&quot;&gt;PriceList&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;T&lt;/span&gt;&amp;gt;&lt;/code&gt; objects. This is what we want, because a &lt;code&gt;&lt;span style=&quot;color:#2b91af;&quot;&gt;Cut&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;T&lt;/span&gt;&amp;gt;&lt;/code&gt; object encapsulates a proof that it&apos;s valid, related to the original collection of prices.
    &lt;/p&gt;
    &lt;p&gt;
        We can now define the &lt;code&gt;Cut&lt;/code&gt; method as an instance method on &lt;code&gt;&lt;span style=&quot;color:#2b91af;&quot;&gt;PriceList&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;T&lt;/span&gt;&amp;gt;&lt;/code&gt;. Notice how all the &lt;code&gt;T&lt;/code&gt; type arguments line up. As input, the &lt;code&gt;Cut&lt;/code&gt; method only accepts &lt;code&gt;&lt;span style=&quot;color:#2b91af;&quot;&gt;Size&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;T&lt;/span&gt;&amp;gt;&lt;/code&gt; proofs issued by a compatible price list. This is enforced at compile time, not at run time.
    &lt;/p&gt;
    &lt;p&gt;
        &lt;pre&gt;&lt;span style=&quot;color:blue;&quot;&gt;public&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;IReadOnlyCollection&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;Cut&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;T&lt;/span&gt;&amp;gt;&amp;gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;Cut&lt;/span&gt;(&lt;span style=&quot;color:#2b91af;&quot;&gt;Size&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;T&lt;/span&gt;&amp;gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;n&lt;/span&gt;)
{
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;var&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;p&lt;/span&gt;&amp;nbsp;=&amp;nbsp;Prices.&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;Prepend&lt;/span&gt;(0).&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;ToArray&lt;/span&gt;();
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;var&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;r&lt;/span&gt;&amp;nbsp;=&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;new&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;int&lt;/span&gt;[&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;n&lt;/span&gt;.Value&amp;nbsp;+&amp;nbsp;1];
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;var&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;s&lt;/span&gt;&amp;nbsp;=&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;new&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;int&lt;/span&gt;[&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;n&lt;/span&gt;.Value&amp;nbsp;+&amp;nbsp;1];
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;r&lt;/span&gt;[0]&amp;nbsp;=&amp;nbsp;0;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#8f08c4;&quot;&gt;for&lt;/span&gt;&amp;nbsp;(&lt;span style=&quot;color:blue;&quot;&gt;int&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;j&lt;/span&gt;&amp;nbsp;=&amp;nbsp;1;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;j&lt;/span&gt;&amp;nbsp;&amp;lt;=&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;n&lt;/span&gt;.Value;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;j&lt;/span&gt;++)
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;var&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;q&lt;/span&gt;&amp;nbsp;=&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;int&lt;/span&gt;.MinValue;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#8f08c4;&quot;&gt;for&lt;/span&gt;&amp;nbsp;(&lt;span style=&quot;color:blue;&quot;&gt;int&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;i&lt;/span&gt;&amp;nbsp;=&amp;nbsp;1;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;i&lt;/span&gt;&amp;nbsp;&amp;lt;=&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;j&lt;/span&gt;;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;i&lt;/span&gt;++)
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;var&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;candidate&lt;/span&gt;&amp;nbsp;=&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;p&lt;/span&gt;[&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;i&lt;/span&gt;]&amp;nbsp;+&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;r&lt;/span&gt;[&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;j&lt;/span&gt;&amp;nbsp;-&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;i&lt;/span&gt;];
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#8f08c4;&quot;&gt;if&lt;/span&gt;&amp;nbsp;(&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;q&lt;/span&gt;&amp;nbsp;&amp;lt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;candidate&lt;/span&gt;)
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;q&lt;/span&gt;&amp;nbsp;=&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;candidate&lt;/span&gt;;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;s&lt;/span&gt;[&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;j&lt;/span&gt;]&amp;nbsp;=&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;i&lt;/span&gt;;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;r&lt;/span&gt;[&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;j&lt;/span&gt;]&amp;nbsp;=&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;q&lt;/span&gt;;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}
 
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;var&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;cuts&lt;/span&gt;&amp;nbsp;=&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;new&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;List&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;Cut&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;T&lt;/span&gt;&amp;gt;&amp;gt;();
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#8f08c4;&quot;&gt;for&lt;/span&gt;&amp;nbsp;(&lt;span style=&quot;color:blue;&quot;&gt;int&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;i&lt;/span&gt;&amp;nbsp;=&amp;nbsp;1;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;i&lt;/span&gt;&amp;nbsp;&amp;lt;=&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;n&lt;/span&gt;.Value;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;i&lt;/span&gt;++)
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;var&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;revenue&lt;/span&gt;&amp;nbsp;=&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;r&lt;/span&gt;[&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;i&lt;/span&gt;];
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;var&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;size&lt;/span&gt;&amp;nbsp;=&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;new&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;Size&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;T&lt;/span&gt;&amp;gt;(&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;s&lt;/span&gt;[&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;i&lt;/span&gt;]);
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;cuts&lt;/span&gt;.&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;Add&lt;/span&gt;(&lt;span style=&quot;color:blue;&quot;&gt;new&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;Cut&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;T&lt;/span&gt;&amp;gt;(&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;revenue&lt;/span&gt;,&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;size&lt;/span&gt;));
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#8f08c4;&quot;&gt;return&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;cuts&lt;/span&gt;;
}&lt;/pre&gt;
    &lt;/p&gt;
    &lt;p&gt;
        For good measure, I&apos;m showing the entire implementation, but you only need to pay attention to the method signature. The point is that &lt;code&gt;n&lt;/code&gt; is constrained &lt;em&gt;by the type system&lt;/em&gt; to be in a valid range.
    &lt;/p&gt;
    &lt;h3 id=&quot;ce55a32904434bd99c7f42d896fa7102&quot;&gt;
        Proof-based Solve API &lt;a href=&quot;#ce55a32904434bd99c7f42d896fa7102&quot;&gt;#&lt;/a&gt;
    &lt;/h3&gt;
    &lt;p&gt;
        The same technique can be applied to the &lt;code&gt;Solve&lt;/code&gt; method. Just align the &lt;code&gt;T&lt;/code&gt;s.
    &lt;/p&gt;
    &lt;p&gt;
        &lt;pre&gt;&lt;span style=&quot;color:blue;&quot;&gt;public&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;IReadOnlyCollection&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;Size&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;T&lt;/span&gt;&amp;gt;&amp;gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;Solve&lt;/span&gt;(&lt;span style=&quot;color:#2b91af;&quot;&gt;Size&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;T&lt;/span&gt;&amp;gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;n&lt;/span&gt;)
{
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;var&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;cuts&lt;/span&gt;&amp;nbsp;=&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;Cut&lt;/span&gt;(&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;n&lt;/span&gt;).&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;ToArray&lt;/span&gt;();
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;var&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;sizes&lt;/span&gt;&amp;nbsp;=&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;new&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;List&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;Size&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;T&lt;/span&gt;&amp;gt;&amp;gt;();
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;var&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;size&lt;/span&gt;&amp;nbsp;=&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;n&lt;/span&gt;;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#8f08c4;&quot;&gt;while&lt;/span&gt;&amp;nbsp;(&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;size&lt;/span&gt;.Value&amp;nbsp;&amp;gt;&amp;nbsp;0)
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;sizes&lt;/span&gt;.&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;Add&lt;/span&gt;(&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;cuts&lt;/span&gt;[&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;size&lt;/span&gt;.Value&amp;nbsp;-&amp;nbsp;1].Size);
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;size&lt;/span&gt;&amp;nbsp;=&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;new&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;Size&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;T&lt;/span&gt;&amp;gt;(&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;size&lt;/span&gt;.Value&amp;nbsp;-&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;cuts&lt;/span&gt;[&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;size&lt;/span&gt;.Value&amp;nbsp;-&amp;nbsp;1].Size.Value);
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#8f08c4;&quot;&gt;return&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;sizes&lt;/span&gt;;
}&lt;/pre&gt;
    &lt;/p&gt;
    &lt;p&gt;
        This is another instance method on &lt;code&gt;&lt;span style=&quot;color:#2b91af;&quot;&gt;PriceList&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;T&lt;/span&gt;&amp;gt;&lt;/code&gt;, which is where &lt;code&gt;T&lt;/code&gt; is defined.
    &lt;/p&gt;
    &lt;h3 id=&quot;57994590468c40fa87ba24f0d158720b&quot;&gt;
        Proof-based revenue API &lt;a href=&quot;#57994590468c40fa87ba24f0d158720b&quot;&gt;#&lt;/a&gt;
    &lt;/h3&gt;
    &lt;p&gt;
        Finally, we may also implement a method to calculate the revenue from a given sequence of cuts.
    &lt;/p&gt;
    &lt;p&gt;
        &lt;pre&gt;&lt;span style=&quot;color:blue;&quot;&gt;public&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;int&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;CalculateRevenue&lt;/span&gt;(&lt;span style=&quot;color:#2b91af;&quot;&gt;IReadOnlyCollection&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;Size&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;T&lt;/span&gt;&amp;gt;&amp;gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;cuts&lt;/span&gt;)
{
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;var&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;arr&lt;/span&gt;&amp;nbsp;=&amp;nbsp;Prices.&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;ToArray&lt;/span&gt;();
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#8f08c4;&quot;&gt;return&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;cuts&lt;/span&gt;.&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;Sum&lt;/span&gt;(&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;c&lt;/span&gt;&amp;nbsp;=&amp;gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;arr&lt;/span&gt;[&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;c&lt;/span&gt;.Value&amp;nbsp;-&amp;nbsp;1]);
}&lt;/pre&gt;
    &lt;/p&gt;
    &lt;p&gt;
        Not surprisingly, I hope, &lt;code&gt;CalculateRevenue&lt;/code&gt; is another instance method on &lt;code&gt;&lt;span style=&quot;color:#2b91af;&quot;&gt;PriceList&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;T&lt;/span&gt;&amp;gt;&lt;/code&gt;. The &lt;code&gt;cuts&lt;/code&gt; will typically come from a call to &lt;code&gt;Solve&lt;/code&gt;, but it&apos;s entirely possible for client code to create an ad-hoc collection of &lt;code&gt;&lt;span style=&quot;color:#2b91af;&quot;&gt;Size&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;T&lt;/span&gt;&amp;gt;&lt;/code&gt; objects by repeatedly calling &lt;code&gt;TryCreateSize&lt;/code&gt;.
    &lt;/p&gt;
    &lt;h3 id=&quot;97eba480d25e4ed8a5f7b8b0efb3a528&quot;&gt;
        Running client code &lt;a href=&quot;#97eba480d25e4ed8a5f7b8b0efb3a528&quot;&gt;#&lt;/a&gt;
    &lt;/h3&gt;
    &lt;p&gt;
        How does client code use this API? It calls an &lt;code&gt;Accept&lt;/code&gt; method with an implementation of this interface:
    &lt;/p&gt;
    &lt;p&gt;
        &lt;pre&gt;&lt;span style=&quot;color:blue;&quot;&gt;public&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;interface&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;IPriceListVisitor&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;TResult&lt;/span&gt;&amp;gt;
{
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;TResult&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;Visit&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;T&lt;/span&gt;&amp;gt;(&lt;span style=&quot;color:#2b91af;&quot;&gt;PriceList&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;T&lt;/span&gt;&amp;gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;priceList&lt;/span&gt;);
}&lt;/pre&gt;
    &lt;/p&gt;
    &lt;p&gt;
        Why &apos;visitor&apos;? This doesn&apos;t quite look like a &lt;a href=&quot;https://en.wikipedia.org/wiki/Visitor_pattern&quot;&gt;Visitor&lt;/a&gt;, and yet, it still does.
    &lt;/p&gt;
    &lt;p&gt;
        Imagine, for a moment, that we could enumerate all types that &lt;code&gt;T&lt;/code&gt; could inhabit.
    &lt;/p&gt;
    &lt;p&gt;
        &lt;pre&gt;&lt;span style=&quot;color:#2b91af;&quot;&gt;TResult&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;Visit&lt;/span&gt;(&lt;span style=&quot;color:#2b91af;&quot;&gt;PriceList&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;Type1&lt;/span&gt;&amp;gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;priceList&lt;/span&gt;);
&lt;span style=&quot;color:#2b91af;&quot;&gt;TResult&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;Visit&lt;/span&gt;(&lt;span style=&quot;color:#2b91af;&quot;&gt;PriceList&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;Type2&lt;/span&gt;&amp;gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;priceList&lt;/span&gt;);
&lt;span style=&quot;color:#2b91af;&quot;&gt;TResult&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;Visit&lt;/span&gt;(&lt;span style=&quot;color:#2b91af;&quot;&gt;PriceList&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;Type3&lt;/span&gt;&amp;gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;priceList&lt;/span&gt;);
&lt;span style=&quot;color:green;&quot;&gt;//&amp;nbsp;⋮&lt;/span&gt;
&lt;span style=&quot;color:#2b91af;&quot;&gt;TResult&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;Visit&lt;/span&gt;(&lt;span style=&quot;color:#2b91af;&quot;&gt;PriceList&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;TypeN&lt;/span&gt;&amp;gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;priceList&lt;/span&gt;);&lt;/pre&gt;
    &lt;/p&gt;
    &lt;p&gt;
        Clearly we can&apos;t do that, since &lt;code&gt;T&lt;/code&gt; is infinite, but &lt;em&gt;if&lt;/em&gt; we could, the interface would look like a Visitor.
    &lt;/p&gt;
    &lt;p&gt;
        I find the situation sufficiently similar to name the interface with the &lt;em&gt;Visitor&lt;/em&gt; suffix. Now we only need a class with an &lt;code&gt;Accept&lt;/code&gt; method.
    &lt;/p&gt;
    &lt;p&gt;
        &lt;pre&gt;&lt;span style=&quot;color:blue;&quot;&gt;public&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;sealed&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;class&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;RodCutter&lt;/span&gt;(&lt;span style=&quot;color:#2b91af;&quot;&gt;IReadOnlyCollection&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:blue;&quot;&gt;int&lt;/span&gt;&amp;gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;prices&lt;/span&gt;)
{
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;public&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;TResult&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;Accept&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;TResult&lt;/span&gt;&amp;gt;(&lt;span style=&quot;color:#2b91af;&quot;&gt;IPriceListVisitor&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;TResult&lt;/span&gt;&amp;gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;visitor&lt;/span&gt;)
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#8f08c4;&quot;&gt;return&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;visitor&lt;/span&gt;.&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;Visit&lt;/span&gt;(&lt;span style=&quot;color:blue;&quot;&gt;new&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;PriceList&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:blue;&quot;&gt;object&lt;/span&gt;&amp;gt;(&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;prices&lt;/span&gt;));
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}
}&lt;/pre&gt;
    &lt;/p&gt;
    &lt;p&gt;
        Client code may create a &lt;code&gt;RodCutter&lt;/code&gt; object, as well as one or more classes that implement &lt;code&gt;&lt;span style=&quot;color:#2b91af;&quot;&gt;IPriceListVisitor&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;TResult&lt;/span&gt;&amp;gt;&lt;/code&gt;, and in this way interact with the library API.
    &lt;/p&gt;
    &lt;p&gt;
        Let&apos;s see some examples. We&apos;ll start with the original &lt;a href=&quot;/ref/clrs&quot;&gt;CLRS&lt;/a&gt; example, written as an &lt;a href=&quot;https://xunit.net/&quot;&gt;xUnit.net&lt;/a&gt; test.
    &lt;/p&gt;
    &lt;p&gt;
        &lt;pre&gt;[&lt;span style=&quot;color:#2b91af;&quot;&gt;Fact&lt;/span&gt;]
&lt;span style=&quot;color:blue;&quot;&gt;public&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;void&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;ClrsExample&lt;/span&gt;()
{
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;var&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;sut&lt;/span&gt;&amp;nbsp;=&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;new&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;RodCutter&lt;/span&gt;([1,&amp;nbsp;5,&amp;nbsp;8,&amp;nbsp;9,&amp;nbsp;10,&amp;nbsp;17,&amp;nbsp;17,&amp;nbsp;20,&amp;nbsp;24,&amp;nbsp;30]);
 
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;var&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;actual&lt;/span&gt;&amp;nbsp;=&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;sut&lt;/span&gt;.&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;Accept&lt;/span&gt;(&lt;span style=&quot;color:blue;&quot;&gt;new&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;CutRodVisitor&lt;/span&gt;(10));
 
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;var&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;expected&lt;/span&gt;&amp;nbsp;=&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;new&lt;/span&gt;[]&amp;nbsp;{
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(&amp;nbsp;1,&amp;nbsp;&amp;nbsp;1),
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(&amp;nbsp;5,&amp;nbsp;&amp;nbsp;2),
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(&amp;nbsp;8,&amp;nbsp;&amp;nbsp;3),
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(10,&amp;nbsp;&amp;nbsp;2),
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(13,&amp;nbsp;&amp;nbsp;2),
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(17,&amp;nbsp;&amp;nbsp;6),
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(18,&amp;nbsp;&amp;nbsp;1),
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(22,&amp;nbsp;&amp;nbsp;2),
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(25,&amp;nbsp;&amp;nbsp;3),
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(30,&amp;nbsp;10)
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;};
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;Assert&lt;/span&gt;.&lt;span style=&quot;color:#74531f;&quot;&gt;Equal&lt;/span&gt;(&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;expected&lt;/span&gt;,&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;actual&lt;/span&gt;);
}&lt;/pre&gt;
    &lt;/p&gt;
    &lt;p&gt;
        &lt;code&gt;CutRodVisitor&lt;/code&gt; is a nested class that implements the &lt;code&gt;&lt;span style=&quot;color:#2b91af;&quot;&gt;IPriceListVisitor&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;TResult&lt;/span&gt;&amp;gt;&lt;/code&gt; interface:
    &lt;/p&gt;
    &lt;p&gt;
        &lt;pre&gt;&lt;span style=&quot;color:blue;&quot;&gt;private&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;class&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;CutRodVisitor&lt;/span&gt;(&lt;span style=&quot;color:blue;&quot;&gt;int&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;i&lt;/span&gt;)&amp;nbsp;:
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;IPriceListVisitor&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;IReadOnlyCollection&lt;/span&gt;&amp;lt;(&lt;span style=&quot;color:blue;&quot;&gt;int&lt;/span&gt;,&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;int&lt;/span&gt;)&amp;gt;&amp;gt;
{
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;public&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;IReadOnlyCollection&lt;/span&gt;&amp;lt;(&lt;span style=&quot;color:blue;&quot;&gt;int&lt;/span&gt;,&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;int&lt;/span&gt;)&amp;gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;Visit&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;T&lt;/span&gt;&amp;gt;(&lt;span style=&quot;color:#2b91af;&quot;&gt;PriceList&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;T&lt;/span&gt;&amp;gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;priceList&lt;/span&gt;)
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;var&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;n&lt;/span&gt;&amp;nbsp;=&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;priceList&lt;/span&gt;.&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;TryCreateSize&lt;/span&gt;(&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;i&lt;/span&gt;);
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#8f08c4;&quot;&gt;if&lt;/span&gt;&amp;nbsp;(&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;n&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;is&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;null&lt;/span&gt;)
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#8f08c4;&quot;&gt;return&lt;/span&gt;&amp;nbsp;[];
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#8f08c4;&quot;&gt;else&lt;/span&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;var&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;cuts&lt;/span&gt;&amp;nbsp;=&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;priceList&lt;/span&gt;.&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;Cut&lt;/span&gt;(&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;n&lt;/span&gt;);
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#8f08c4;&quot;&gt;return&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;cuts&lt;/span&gt;.&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;Select&lt;/span&gt;(&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;c&lt;/span&gt;&amp;nbsp;=&amp;gt;&amp;nbsp;(&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;c&lt;/span&gt;.Revenue,&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;c&lt;/span&gt;.Size.Value)).&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;ToArray&lt;/span&gt;();
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}
}&lt;/pre&gt;
    &lt;/p&gt;
    &lt;p&gt;
        The &lt;code&gt;CutRodVisitor&lt;/code&gt; class returns a collection of tuples. Why doesn&apos;t it just return &lt;code&gt;cuts&lt;/code&gt; directly?
    &lt;/p&gt;
    &lt;p&gt;
        It can&apos;t, because it wouldn&apos;t type-check. Think about it for a moment. When you implement the interface, you need to pick a type for &lt;code&gt;TResult&lt;/code&gt;. You can&apos;t, however, declare it to implement &lt;code&gt;&lt;span style=&quot;color:#2b91af;&quot;&gt;IPriceListVisitor&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;Cut&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;T&lt;/span&gt;&amp;gt;&amp;gt;&lt;/code&gt; (where &lt;code&gt;T&lt;/code&gt; would be the &lt;code&gt;T&lt;/code&gt; from &lt;code&gt;&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;Visit&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;T&lt;/span&gt;&amp;gt;&lt;/code&gt;), because at the class level, you don&apos;t know what &lt;code&gt;T&lt;/code&gt; is. Neither does the compiler.
    &lt;/p&gt;
    &lt;p&gt;
        Your &lt;code&gt;&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;Visit&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;T&lt;/span&gt;&amp;gt;&lt;/code&gt; implementation must work for &lt;em&gt;any&lt;/em&gt; &lt;code&gt;T&lt;/code&gt;.
    &lt;/p&gt;
    &lt;h3 id=&quot;39d9ed0b81044e5a8f7ac990cd457fad&quot;&gt;
        Preventing misalignment &lt;a href=&quot;#39d9ed0b81044e5a8f7ac990cd457fad&quot;&gt;#&lt;/a&gt;
    &lt;/h3&gt;
    &lt;p&gt;
        Finally, here&apos;s a demonstration of how the phantom type prevents confusing or mixing up two (or more) different price lists. Consider this rather artificial example:
    &lt;/p&gt;
    &lt;p&gt;
        &lt;pre&gt;[&lt;span style=&quot;color:#2b91af;&quot;&gt;Fact&lt;/span&gt;]
&lt;span style=&quot;color:blue;&quot;&gt;public&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;void&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;NestTwoSolutions&lt;/span&gt;()
{
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;var&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;sut&lt;/span&gt;&amp;nbsp;=&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;new&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;RodCutter&lt;/span&gt;([1,&amp;nbsp;2,&amp;nbsp;2]);
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;var&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;inner&lt;/span&gt;&amp;nbsp;=&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;new&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;RodCutter&lt;/span&gt;([1]);
 
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(&lt;span style=&quot;color:blue;&quot;&gt;int&lt;/span&gt;,&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;int&lt;/span&gt;)?&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;actual&lt;/span&gt;&amp;nbsp;=&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;sut&lt;/span&gt;.&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;Accept&lt;/span&gt;(&lt;span style=&quot;color:blue;&quot;&gt;new&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;NestedRevenueVisitor&lt;/span&gt;(&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;inner&lt;/span&gt;));
 
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;Assert&lt;/span&gt;.&lt;span style=&quot;color:#74531f;&quot;&gt;Equal&lt;/span&gt;((3,&amp;nbsp;1),&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;actual&lt;/span&gt;);
}&lt;/pre&gt;
    &lt;/p&gt;
    &lt;p&gt;
        This unit test creates two price arrays and calls &lt;code&gt;Accept&lt;/code&gt; on one of them (the &apos;outer&apos; one, you may say), while passing the &lt;code&gt;inner&lt;/code&gt; one to the Visitor, which at first glance just looks like this:
    &lt;/p&gt;
    &lt;p&gt;
        &lt;pre&gt;&lt;span style=&quot;color:blue;&quot;&gt;private&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;class&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;NestedRevenueVisitor&lt;/span&gt;(&lt;span style=&quot;color:#2b91af;&quot;&gt;RodCutter&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;inner&lt;/span&gt;)&amp;nbsp;:
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;IPriceListVisitor&lt;/span&gt;&amp;lt;(&lt;span style=&quot;color:blue;&quot;&gt;int&lt;/span&gt;,&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;int&lt;/span&gt;)?&amp;gt;
{
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;public&lt;/span&gt;&amp;nbsp;(&lt;span style=&quot;color:blue;&quot;&gt;int&lt;/span&gt;,&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;int&lt;/span&gt;)?&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;Visit&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;T&lt;/span&gt;&amp;gt;(&lt;span style=&quot;color:#2b91af;&quot;&gt;PriceList&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;T&lt;/span&gt;&amp;gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;priceList&lt;/span&gt;)
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#8f08c4;&quot;&gt;return&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;inner&lt;/span&gt;.&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;Accept&lt;/span&gt;(&lt;span style=&quot;color:blue;&quot;&gt;new&lt;/span&gt;&amp;nbsp;InnerRevenueVisitor&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;T&lt;/span&gt;&amp;gt;(&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;priceList&lt;/span&gt;));
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}
 
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:green;&quot;&gt;//&amp;nbsp;Inner&amp;nbsp;visitor&amp;nbsp;goes&amp;nbsp;here...&lt;/span&gt;
}&lt;/pre&gt;
    &lt;/p&gt;
    &lt;p&gt;
        Notice that it only delegates to yet another Visitor, passing the &apos;outer&apos; &lt;code&gt;priceList&lt;/code&gt; as a constructor parameter to the next Visitor. The purpose of this is to bring two &lt;code&gt;&lt;span style=&quot;color:#2b91af;&quot;&gt;PriceList&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;T&lt;/span&gt;&amp;gt;&lt;/code&gt; objects in scope at the same time. This will enable us to examine what happens if we make a programming mistake.
    &lt;/p&gt;
    &lt;p&gt;
        First, however, here&apos;s the proper, working implementation &lt;em&gt;without&lt;/em&gt; mistakes:
    &lt;/p&gt;
    &lt;p&gt;
        &lt;pre&gt;&lt;span style=&quot;color:blue;&quot;&gt;private&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;class&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;InnerRevenueVisitor&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;T&lt;/span&gt;&amp;gt;(&lt;span style=&quot;color:#2b91af;&quot;&gt;PriceList&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;T&lt;/span&gt;&amp;gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;priceList1&lt;/span&gt;)&amp;nbsp;:&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;IPriceListVisitor&lt;/span&gt;&amp;lt;(&lt;span style=&quot;color:blue;&quot;&gt;int&lt;/span&gt;,&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;int&lt;/span&gt;)?&amp;gt;
{
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;public&lt;/span&gt;&amp;nbsp;(&lt;span style=&quot;color:blue;&quot;&gt;int&lt;/span&gt;,&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;int&lt;/span&gt;)?&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;Visit&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;T1&lt;/span&gt;&amp;gt;(&lt;span style=&quot;color:#2b91af;&quot;&gt;PriceList&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;T1&lt;/span&gt;&amp;gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;priceList2&lt;/span&gt;)
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;var&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;n1&lt;/span&gt;&amp;nbsp;=&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;priceList1&lt;/span&gt;.&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;TryCreateSize&lt;/span&gt;(3);
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#8f08c4;&quot;&gt;if&lt;/span&gt;&amp;nbsp;(&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;n1&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;is&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;null&lt;/span&gt;)
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#8f08c4;&quot;&gt;return&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;null&lt;/span&gt;;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#8f08c4;&quot;&gt;else&lt;/span&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;var&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;cuts1&lt;/span&gt;&amp;nbsp;=&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;priceList1&lt;/span&gt;.&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;Solve&lt;/span&gt;(&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;n1&lt;/span&gt;);
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;var&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;revenue1&lt;/span&gt;&amp;nbsp;=&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;priceList1&lt;/span&gt;.&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;CalculateRevenue&lt;/span&gt;(&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;cuts1&lt;/span&gt;);
 
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;var&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;n2&lt;/span&gt;&amp;nbsp;=&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;priceList2&lt;/span&gt;.&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;TryCreateSize&lt;/span&gt;(1);
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#8f08c4;&quot;&gt;if&lt;/span&gt;&amp;nbsp;(&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;n2&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;is&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;null&lt;/span&gt;)
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#8f08c4;&quot;&gt;return&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;null&lt;/span&gt;;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#8f08c4;&quot;&gt;else&lt;/span&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;var&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;cuts2&lt;/span&gt;&amp;nbsp;=&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;priceList2&lt;/span&gt;.&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;Solve&lt;/span&gt;(&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;n2&lt;/span&gt;);
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;var&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;revenue2&lt;/span&gt;&amp;nbsp;=&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;priceList2&lt;/span&gt;.&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;CalculateRevenue&lt;/span&gt;(&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;cuts2&lt;/span&gt;);
 
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#8f08c4;&quot;&gt;return&lt;/span&gt;&amp;nbsp;(&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;revenue1&lt;/span&gt;,&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;revenue2&lt;/span&gt;);
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}
}&lt;/pre&gt;
    &lt;/p&gt;
    &lt;p&gt;
        Notice how both &lt;code&gt;priceList1&lt;/code&gt; and &lt;code&gt;priceList2&lt;/code&gt; are now both in scope. So far, they&apos;re &lt;em&gt;not&lt;/em&gt; mixed up, so the &lt;code&gt;Visit&lt;/code&gt; implementation queries first one and then another for the optimal revenue. If all works well (which it does), it returns a tuple with the two revenues.
    &lt;/p&gt;
    &lt;p&gt;
        What happens if I make a mistake? What if, for example, I write &lt;code&gt;priceList2.Solve(n1)&lt;/code&gt;? It shouldn&apos;t be possible to use &lt;code&gt;n1&lt;/code&gt;, which was issued by &lt;code&gt;pricelist1&lt;/code&gt;, with &lt;code&gt;priceList2&lt;/code&gt;. And indeed this isn&apos;t possible. With that mistake, the code doesn&apos;t compile. The compiler error is:
    &lt;/p&gt;
    &lt;blockquote&gt;
        &lt;p&gt;
            Argument 1: cannot convert from &apos;Ploeh.Samples.RodCutting.Size&amp;lt;T&amp;gt;&apos; to &apos;Ploeh.Samples.RodCutting.Size&amp;lt;T1&amp;gt;&apos;
        &lt;/p&gt;
    &lt;/blockquote&gt;
    &lt;p&gt;
        When you look at the types, that makes sense. After all, there&apos;s no guarantee that &lt;code&gt;T&lt;/code&gt; is equal to &lt;code&gt;T1&lt;/code&gt;.
    &lt;/p&gt;
    &lt;p&gt;
        You&apos;ll run into similar problems if you mix up the two &apos;contexts&apos; in other ways. The code doesn&apos;t compile. Which is what you want.
    &lt;/p&gt;
    &lt;h3 id=&quot;1075e4f3ff6548cf8806ae9f419910b1&quot;&gt;
        Conclusion &lt;a href=&quot;#1075e4f3ff6548cf8806ae9f419910b1&quot;&gt;#&lt;/a&gt;
    &lt;/h3&gt;
    &lt;p&gt;
        This article demonstrates how to use the &lt;em&gt;Ghosts of Departed Proofs&lt;/em&gt; technique in C#. In some ways, I find that it comes across as more idiomatic in C# than in F#. I think this is because rank-2 polymorphism is only possible in F# when using its object-oriented features. Since F# is a functional-first programming language, it seems a little out of place there, whereas it looks more at home in C#.
    &lt;/p&gt;
    &lt;p&gt;
        Perhaps I should have designed the F# code to make use of objects to the same degree as I&apos;ve done here in C#.
    &lt;/p&gt;
    &lt;p&gt;
        I think I actually like how the C# API turned out, although having to define and implement a class every time you need to supply a Visitor may feel a bit cumbersome. Even so, &lt;a href=&quot;/2024/05/13/gratification&quot;&gt;developer experience shouldn&apos;t be exclusively about saving a few keystrokes&lt;/a&gt;. After all, &lt;a href=&quot;/2018/09/17/typing-is-not-a-programming-bottleneck&quot;&gt;typing isn&apos;t a bottleneck&lt;/a&gt;.
    &lt;/p&gt;
&lt;/div&gt;&lt;hr&gt;
      This blog is totally free, but if you like it, please consider &lt;a href="https://blog.ploeh.dk/support"&gt;supporting it&lt;/a&gt;.</description>
        <author>Mark Seemann</author>
        <guid isPermaLink="false">https://blog.ploeh.dk/2025/02/03/modelling-data-relationships-with-c-types</guid>
      </item>
    
      <item>
        <title>Dependency inversion without inversion of control</title>
        <link>https://blog.ploeh.dk/2025/01/27/dependency-inversion-without-inversion-of-control/</link>
        <pubDate>Mon, 27 Jan 2025 13:02:00 UTC</pubDate>
        <description>


&lt;div id=&quot;post&quot;&gt;
    &lt;p&gt;
        &lt;em&gt;Here, have a sandwich.&lt;/em&gt;
    &lt;/p&gt;
    &lt;p&gt;
        For years I&apos;ve been thinking about the &lt;a href=&quot;https://en.wikipedia.org/wiki/Dependency_inversion_principle&quot;&gt;Dependency Inversion Principle&lt;/a&gt; (DIP) and &lt;a href=&quot;https://en.wikipedia.org/wiki/Inversion_of_control&quot;&gt;Inversion of Control&lt;/a&gt; (IoC) as two different things. While there&apos;s some overlap, they&apos;re not the same. To make matters more confusing, most people seem to consider IoC and Dependency Injection (DI) as interchangeable synonyms. As &lt;a href=&quot;https://blogs.cuttingedge.it/&quot;&gt;Steven van Deursen&lt;/a&gt; and I explain in &lt;a href=&quot;/dippp&quot;&gt;DIPPP&lt;/a&gt;, they&apos;re not the same.
    &lt;/p&gt;
    &lt;p&gt;
        I recently found myself in a discussion on Stack Overflow where I was &lt;a href=&quot;https://stackoverflow.com/a/78796558/126014&quot;&gt;trying to untangle that confusion&lt;/a&gt; for a fellow Stack Overflow user. While I hadn&apos;t included a pedagogical Venn diagram, perhaps I should have.
    &lt;/p&gt;
    &lt;p&gt;
        &lt;img src=&quot;/content/binary/dip-ioc-venn.png&quot; alt=&quot;Venn diagram with DIP to the left and IoC to the right. The intersection is substantial, but not overwhelming.&quot;&gt;
    &lt;/p&gt;
    &lt;p&gt;
        This figure suggests that the sets are of equal size, which doesn&apos;t have to be the case. The point, rather, is that while the intersection may be substantial, each &lt;a href=&quot;https://en.wikipedia.org/wiki/Complement_(set_theory)&quot;&gt;relative complement&lt;/a&gt; is not only not empty, but richly populated.
    &lt;/p&gt;
    &lt;p&gt;
        In this article, I&apos;m not going to spend more time on the complement IoC without DIP. Rather, I&apos;ll expand on how to apply the DIP without IoC.
    &lt;/p&gt;
    &lt;h3 id=&quot;a51dd63df2474002b81bee601c86eb8d&quot;&gt;
        Appeal to authority? &lt;a href=&quot;#a51dd63df2474002b81bee601c86eb8d&quot;&gt;#&lt;/a&gt;
    &lt;/h3&gt;
    &lt;p&gt;
        While writing the Stack Overflow answer, I&apos;d tried to keep citations to &apos;original sources&apos;. Sometimes, when a problem is technically concrete, it makes sense for me to link to one of my own works, but I&apos;ve found that when the discussion is more abstract, that rarely helps convincing people. That&apos;s understandable. I&apos;d also be sceptical if I were to run into some rando that immediately proceeded to argue a case by linking to his or her own blog.
    &lt;/p&gt;
    &lt;p&gt;
        This strategy, however elicited this response:
    &lt;/p&gt;
    &lt;blockquote&gt;
        &lt;p&gt;
            &quot;Are you aware of any DIP-compliant example from Robert Martin that does not utilize polymorphism? The &lt;a href=&quot;https://web.archive.org/web/20110714224327/http://www.objectmentor.com/resources/articles/dip.pdf&quot;&gt;original paper&lt;/a&gt; along with some of Martin&apos;s &lt;a href=&quot;https://www.youtube.com/watch?v=1XRTvj__ZPY&quot;&gt;lectures&lt;/a&gt; certainly seem to imply the DIP requires polymorphism.&quot;
        &lt;/p&gt;
        &lt;p&gt;
        &lt;footer&gt;&lt;cite&gt;&lt;a href=&quot;https://stackoverflow.com/questions/78796242/does-the-dependency-inversion-principle-apply-within-application-layers/78796558#comment138931008_78796558&quot;&gt;comment&lt;/a&gt;, jaco0646&lt;/footer&gt;
    &lt;/blockquote&gt;
    &lt;p&gt;
        That&apos;s a fair question, and once I started looking for such examples, I had to admit that I couldn&apos;t find any. Eventually, I asked &lt;a href=&quot;https://en.wikipedia.org/wiki/Robert_C._Martin&quot;&gt;Robert C. Martin&lt;/a&gt; directly.
    &lt;/p&gt;
    &lt;blockquote&gt;
        &lt;p&gt;
            &quot;Does the DIP require polymorphism? I argue that it does&apos;t, but I&apos;ve managed to entangle myself in a debate where original sources count. Could you help us out?&quot;
        &lt;/p&gt;
        &lt;footer&gt;&lt;cite&gt;&lt;a href=&quot;https://x.com/ploeh/status/1817141831500542202&quot;&gt;Tweet&lt;/a&gt;, me&lt;/cite&gt;&lt;/footer&gt;
    &lt;/blockquote&gt;
    &lt;p&gt;
        To which he answered in much detail, but of which the essential response was:
    &lt;/p&gt;
    &lt;blockquote&gt;
        &lt;p&gt;
            &quot;The DIP does not require polymorphism. Polymorphism is just one of several mechanisms to achieve dependency inversion.&quot;
        &lt;/p&gt;
        &lt;footer&gt;&lt;cite&gt;&lt;a href=&quot;https://x.com/unclebobmartin/status/1817263979774816379&quot;&gt;Tweet&lt;/a&gt;, Robert C. Martin&lt;/cite&gt;&lt;/footer&gt;
    &lt;/blockquote&gt;
    &lt;p&gt;
        While this was the answer I&apos;d hoped for, it&apos;s easy to dismiss this exchange as an &lt;a href=&quot;https://en.wikipedia.org/wiki/Argument_from_authority&quot;&gt;appeal to authority&lt;/a&gt;. On the other hand, as Carl Sagan said, &quot;If you wish to make an apple pie from scratch, you must first invent the universe,&quot; which obviously isn&apos;t practical, and so we instead &lt;a href=&quot;https://en.wikipedia.org/wiki/Standing_on_the_shoulders_of_giants&quot;&gt;stand on the shoulders of giants&lt;/a&gt;.
    &lt;/p&gt;
    &lt;p&gt;
        In this context, asking Robert C. Martin was relevant because he&apos;s the original author of works that introduce the DIP. It&apos;s reasonable to assume that he has relevant insights on the topic.
    &lt;/p&gt;
    &lt;p&gt;
        It&apos;s not that I can&apos;t argue my case independently, but rather that I didn&apos;t think that the comments section of a Stack Overflow question was the right place to do that. This blog, on the other hand, is mine, I can use all the words I&apos;d like, and I&apos;ll now proceed to do so.
    &lt;/p&gt;
    &lt;h3 id=&quot;bfe353d609ea45e48ffb0efe939f4c01&quot;&gt;
        Kernel of the idea &lt;a href=&quot;#bfe353d609ea45e48ffb0efe939f4c01&quot;&gt;#&lt;/a&gt;
    &lt;/h3&gt;
    &lt;p&gt;
        All of Robert C. Martin&apos;s treatments of the DIP that I&apos;ve found starts with the general idea and then proceeds to show examples of implementing it in code. As I&apos;ve already mentioned, I haven&apos;t found a text of Martin&apos;s where the &lt;em&gt;example&lt;/em&gt; doesn&apos;t utilize IoC.
    &lt;/p&gt;
    &lt;p&gt;
        The central idea, however, says nothing about IoC.
    &lt;/p&gt;
    &lt;blockquote&gt;
        &lt;p&gt;
            &quot;A. High-level modules should not depend on low-level modules. Both should depend on abstractions.
        &lt;/p&gt;
        &lt;p&gt;
            &quot;B. Abstractions should not depend on details. Details should depend upon abstractions.&quot;
        &lt;/p&gt;
        &lt;footer&gt;&lt;cite&gt;&lt;a href=&quot;/ref/appp&quot;&gt;APPP&lt;/a&gt;, Robert C. Martin&lt;/cite&gt;&lt;/footer&gt;
    &lt;/blockquote&gt;
    &lt;p&gt;
        While only Martin knows what he actually meant, I can attempt a congenial reading of the work. What is most important here, I think, is that the word &lt;em&gt;abstraction&lt;/em&gt; doesn&apos;t have to denote a particular kind of language construct, such as an abstract class or interface. Rather,
    &lt;/p&gt;
    &lt;blockquote&gt;
        &lt;p&gt;
            &quot;Abstraction is &lt;em&gt;the elimination of the irrelevant and the amplification of the essential.&lt;/em&gt;&quot;
        &lt;/p&gt;
        &lt;footer&gt;&lt;cite&gt;&lt;a href=&quot;/ref/doocautbm&quot;&gt;Designing Object-Oriented C++ Applications Using The Booch Method&lt;/a&gt;, ch. 00, Robert C. Martin, his emphasis&lt;/cite&gt;&lt;/footer&gt;
    &lt;/blockquote&gt;
    &lt;p&gt;
        The same connotation of &lt;em&gt;abstraction&lt;/em&gt; seems to apply to the definition of the DIP. If, for example, we imagine that we consider a Domain Model, the business logic, as the essence we&apos;d like to amplify, we may rightfully consider a particular persistence mechanism a detail. Even more concretely, if you want to take restaurant reservations via a &lt;a href=&quot;https://en.wikipedia.org/wiki/REST&quot;&gt;REST&lt;/a&gt; API, the &lt;a href=&quot;/2020/01/27/the-maitre-d-kata&quot;&gt;business rules that determine whether or not you can accept a reservation&lt;/a&gt; shouldn&apos;t depend on a particular database technology.
    &lt;/p&gt;
    &lt;p&gt;
        While code examples are useful, there&apos;s evidently a risk that if the examples are too much alike, it may constrain readers&apos; thinking. All Martin&apos;s examples seem to involve IoC, but for years now, I&apos;ve mostly been interested in the Dependency Inversion &lt;em&gt;Principle&lt;/em&gt; itself. Abstractions should not depend on details. That&apos;s the kernel of the idea.
    &lt;/p&gt;
    &lt;h3 id=&quot;cd07b6543fda4612bb0cce38c098cfbc&quot;&gt;
        IoC isn&apos;t functional &lt;a href=&quot;#cd07b6543fda4612bb0cce38c098cfbc&quot;&gt;#&lt;/a&gt;
    &lt;/h3&gt;
    &lt;p&gt;
        My thinking was probably helped along by exploring functional programming (FP). A natural question arises when one embarks on learning FP: How does IoC fit with FP? The short answer, it turns out, is that &lt;a href=&quot;/2017/01/27/from-dependency-injection-to-dependency-rejection&quot;&gt;it doesn&apos;t&lt;/a&gt;. DI, at least, &lt;a href=&quot;/2017/01/30/partial-application-is-dependency-injection&quot;&gt;makes everything impure&lt;/a&gt;.
    &lt;/p&gt;
    &lt;p&gt;
        Does this mean, then, that FP precludes the DIP? That would be a problem, since the notion that abstractions shouldn&apos;t depend on details seems important. Doing FP shouldn&apos;t entail giving up on important architectural rules. And fortunately, it turns out not being the case. Quite the contrary, a consistent application of &lt;a href=&quot;/2018/11/19/functional-architecture-a-definition&quot;&gt;functional architecture&lt;/a&gt; seems to &lt;a href=&quot;/2016/03/18/functional-architecture-is-ports-and-adapters&quot;&gt;lead to Ports and Adapters&lt;/a&gt;. It&apos;d go against the grain of FP to have a Domain Model query a relational database. Even if abstracted away, a database exists outside the process space of an application, and is inherently impure. IoC doesn&apos;t address that concern.
    &lt;/p&gt;
    &lt;p&gt;
        In FP, there are other ways to address such problems.
    &lt;/p&gt;
    &lt;h3 id=&quot;53b158bd928e4883992c578be989baf5&quot;&gt;
        DIP sandwich &lt;a href=&quot;#53b158bd928e4883992c578be989baf5&quot;&gt;#&lt;/a&gt;
    &lt;/h3&gt;
    &lt;p&gt;
        While you can always model &lt;a href=&quot;/2017/07/10/pure-interactions&quot;&gt;pure interactions&lt;/a&gt; with free &lt;a href=&quot;/2022/03/28/monads&quot;&gt;monads&lt;/a&gt;, it&apos;s usually not necessary. In most cases, an &lt;a href=&quot;/2020/03/02/impureim-sandwich&quot;&gt;Impureim Sandwich&lt;/a&gt; suffices.
    &lt;/p&gt;
    &lt;p&gt;
        The sample code base that accompanies &lt;a href=&quot;/2021/06/14/new-book-code-that-fits-in-your-head&quot;&gt;Code That Fits in Your Head&lt;/a&gt; takes a similar approach. While it&apos;s &lt;a href=&quot;/2024/12/16/a-restaurant-sandwich&quot;&gt;possible to refactor it to an explicit Impureim Sandwich&lt;/a&gt;, the code presented in the book follows the kindred notion of &lt;a href=&quot;https://www.destroyallsoftware.com/screencasts/catalog/functional-core-imperative-shell&quot;&gt;Functional Core, Imperative Shell&lt;/a&gt;.
    &lt;/p&gt;
    &lt;p&gt;
        The code base implements an online restaurant reservation system, and the Domain Model is a set of data structures and pure functions that operate on them. The central and most complex function is the &lt;code&gt;WillAccept&lt;/code&gt; method &lt;a href=&quot;/2020/11/30/name-by-role&quot;&gt;shown here&lt;/a&gt;. It decides whether to accept a reservation request, based on restaurant table configurations, existing reservations, business rules related to seating durations, etc. It does this without depending on details. It doesn&apos;t know about databases, the application&apos;s configuration system, or how to send emails in case it decides to accept a reservation.
    &lt;/p&gt;
    &lt;p&gt;
        All of this is handled by the application&apos;s HTTP Model, using the demarcation shown in &lt;a href=&quot;/2023/09/04/decomposing-ctfiyhs-sample-code-base&quot;&gt;Decomposing CTFiYH&apos;s sample code base&lt;/a&gt;. The HTTP Model defines Controllers, &lt;a href=&quot;https://en.wikipedia.org/wiki/Data_transfer_object&quot;&gt;Data Transfer Objects&lt;/a&gt; (DTOs), middleware, and other building blocks required to drive the actual REST API.
    &lt;/p&gt;
    &lt;p&gt;
        The &lt;code&gt;ReservationsController&lt;/code&gt; class contains, among many other methods, this helper method that illustrates the point:
    &lt;/p&gt;
    &lt;p&gt;
        &lt;pre&gt;&lt;span style=&quot;color:blue;&quot;&gt;private&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;async&lt;/span&gt;&amp;nbsp;Task&amp;lt;ActionResult&amp;gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;TryCreate&lt;/span&gt;(Restaurant&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;restaurant&lt;/span&gt;,&amp;nbsp;Reservation&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;reservation&lt;/span&gt;)
{
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;using&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;var&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;scope&lt;/span&gt;&amp;nbsp;=&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;new&lt;/span&gt;&amp;nbsp;TransactionScope(TransactionScopeAsyncFlowOption.Enabled);
 
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;var&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;reservations&lt;/span&gt;&amp;nbsp;=&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;await&lt;/span&gt;&amp;nbsp;Repository.ReadReservations(restaurant.Id,&amp;nbsp;reservation.At);
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;var&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;now&lt;/span&gt;&amp;nbsp;=&amp;nbsp;Clock.GetCurrentDateTime();
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#8f08c4;&quot;&gt;if&lt;/span&gt;&amp;nbsp;(!restaurant.MaitreD.WillAccept(now,&amp;nbsp;reservations,&amp;nbsp;reservation))
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#8f08c4;&quot;&gt;return&lt;/span&gt;&amp;nbsp;NoTables500InternalServerError();
 
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;await&lt;/span&gt;&amp;nbsp;Repository.Create(restaurant.Id,&amp;nbsp;reservation);
 
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;scope.Complete();
 
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#8f08c4;&quot;&gt;return&lt;/span&gt;&amp;nbsp;Reservation201Created(restaurant.Id,&amp;nbsp;reservation);
}&lt;/pre&gt;
    &lt;/p&gt;
    &lt;p&gt;
        Notice the call to &lt;code&gt;restaurant.MaitreD.WillAccept&lt;/code&gt;. The Controller gathers all data required to call the &lt;a href=&quot;https://en.wikipedia.org/wiki/Pure_function&quot;&gt;pure function&lt;/a&gt; and subsequently acts on the return value. This keeps the abstraction (&lt;code&gt;MaitreD&lt;/code&gt;) free of implementation details.
    &lt;/p&gt;
    &lt;h3 id=&quot;cb60ef67d81e4754b959ff93d213ed80&quot;&gt;
        DI addressing another concern &lt;a href=&quot;#cb60ef67d81e4754b959ff93d213ed80&quot;&gt;#&lt;/a&gt;
    &lt;/h3&gt;
    &lt;p&gt;
        You may be wondering what exactly &lt;code&gt;Repository&lt;/code&gt; is. If you&apos;ve bought the book, you also have access to the sample code base, in which case you&apos;d be able to look it up. It turns out that it&apos;s an injected dependency. While this may seem a bit contradictory, it also gives me the opportunity to discuss that this isn&apos;t an all-or-nothing proposition.
    &lt;/p&gt;
    &lt;p&gt;
        Consider the architecture diagram from &lt;a href=&quot;/2023/09/04/decomposing-ctfiyhs-sample-code-base&quot;&gt;Decomposing CTFiYH&apos;s sample code base&lt;/a&gt;, repeated here for convenience:
    &lt;/p&gt;
    &lt;p&gt;
        &lt;img src=&quot;/content/binary/ctfiyh-decomposed-architecture.png&quot; alt=&quot;Ports-and-adapters architecture diagram.&quot;&gt;
    &lt;/p&gt;
    &lt;p&gt;
        In the context of this diagram, the DIP is being applied in two different ways. From the outer Web Host to the HTTP Model, the decomposed code base uses ordinary DI. From the HTTP Model to the Domain Model, there&apos;s no inversion of control, but rather the important essence of the DIP: That the Domain Model doesn&apos;t depend on any of the details that surrounds it. Even so, the dependencies remain inverted, as indicated by the arrows.
    &lt;/p&gt;
    &lt;p&gt;
        What little DI that&apos;s left remains to support automated testing. Injecting &lt;code&gt;Repository&lt;/code&gt; and a few other &lt;a href=&quot;https://stackoverflow.blog/2022/01/03/favor-real-dependencies-for-unit-testing/&quot;&gt;real dependencies&lt;/a&gt; enabled me to test-drive the externally visible behaviour of the system with &lt;a href=&quot;/2019/02/18/from-interaction-based-to-state-based-testing&quot;&gt;state-based&lt;/a&gt; &lt;a href=&quot;/2021/01/25/self-hosted-integration-tests-in-aspnet&quot;&gt;self-hosted tests&lt;/a&gt;.
    &lt;/p&gt;
    &lt;p&gt;
        If I hadn&apos;t cared about that, I could have hard-coded the &lt;code&gt;SqlReservationsRepository&lt;/code&gt; object directly into the Controller and merged the Web Host with the HTTP Module. The Web Host is quite minimal anyway. This would, of course, have meant that the DIP no longer applied at that level, but even so, the interaction between the HTTP Model and the Domain Model would still follow the principle.
    &lt;/p&gt;
    &lt;p&gt;
        One important point about the above figure is that it&apos;s not to scale. The Web Host is in reality just six small classes, and the SQL and SMTP libraries each only contain a single class.
    &lt;/p&gt;
    &lt;h3 id=&quot;4f8fe34378a34bf4b3a6ebe9188c8d9b&quot;&gt;
        Conclusion &lt;a href=&quot;#4f8fe34378a34bf4b3a6ebe9188c8d9b&quot;&gt;#&lt;/a&gt;
    &lt;/h3&gt;
    &lt;p&gt;
        Despite the name similarity, the Dependency Inversion Principle isn&apos;t equivalent with Inversion of Control or Dependency Injection. There&apos;s a sizeable intersection between the two, but the DIP doesn&apos;t &lt;em&gt;require&lt;/em&gt; IoC.
    &lt;/p&gt;
    &lt;p&gt;
        I often use the Functional Core, Imperative Shell architecture, or the Impureim Sandwich pattern to invert the dependencies without inverting control. This keeps most of my code more functional, which also means that it &lt;a href=&quot;/2021/07/28/referential-transparency-fits-in-your-head&quot;&gt;fits better in my head&lt;/a&gt; and is &lt;a href=&quot;/2015/05/07/functional-design-is-intrinsically-testable&quot;&gt;intrinsically testable&lt;/a&gt;.
    &lt;/p&gt;
&lt;/div&gt;&lt;hr&gt;
      This blog is totally free, but if you like it, please consider &lt;a href="https://blog.ploeh.dk/support"&gt;supporting it&lt;/a&gt;.</description>
        <author>Mark Seemann</author>
        <guid isPermaLink="false">https://blog.ploeh.dk/2025/01/27/dependency-inversion-without-inversion-of-control</guid>
      </item>
    
      <item>
        <title>Modelling data relationships with F# types</title>
        <link>https://blog.ploeh.dk/2025/01/20/modelling-data-relationships-with-f-types/</link>
        <pubDate>Mon, 20 Jan 2025 07:24:00 UTC</pubDate>
        <description>


&lt;div id=&quot;post&quot;&gt;
    &lt;p&gt;
        &lt;em&gt;An F# example implementation of Ghosts of Departed Proofs.&lt;/em&gt;
    &lt;/p&gt;
    &lt;p&gt;
        In a previous article, &lt;a href=&quot;/2025/01/06/encapsulating-rod-cutting&quot;&gt;Encapsulating rod-cutting&lt;/a&gt;, I used a code example to discuss how to communicate an API&apos;s contract to client developers; that is, users of the API. In the article, I wrote
    &lt;/p&gt;
    &lt;blockquote&gt;
        &lt;p&gt;
            &quot;All this said, however, it&apos;s also possible that I&apos;m missing an obvious design alternative. If you can think of a way to model this relationship in a non-&lt;a href=&quot;https://www.hillelwayne.com/post/constructive/&quot;&gt;predicative&lt;/a&gt; way, please &lt;a href=&quot;https://github.com/ploeh/ploeh.github.com?tab=readme-ov-file#comments&quot;&gt;write a comment&lt;/a&gt;.&quot;
        &lt;/p&gt;
    &lt;/blockquote&gt;
    &lt;p&gt;
        And indeed, a reader helpfully offered an alternative:
    &lt;/p&gt;
    &lt;blockquote&gt;
        &lt;p&gt;
            &quot;Regarding the relation between the array and the index, you will find the paper called &quot;Ghosts of departed proofs&quot; interesting. Maybe an overkill in this case, maybe not, but a very interesting and useful technique in general.&quot;
        &lt;/p&gt;
        &lt;footer&gt;&lt;cite&gt;&lt;a href=&quot;https://x.com/Savlambda/status/1876227452886012014&quot;&gt;borar&lt;/a&gt;&lt;/cite&gt;&lt;/footer&gt;
    &lt;/blockquote&gt;
    &lt;p&gt;
        I wouldn&apos;t call it &apos;an &lt;em&gt;obvious&lt;/em&gt; design alternative&apos;, but nonetheless find it interesting. In this article, I&apos;ll pick up the code from &lt;a href=&quot;/2025/01/06/encapsulating-rod-cutting&quot;&gt;Encapsulating rod-cutting&lt;/a&gt; and show how the &apos;Ghosts of Departed Proofs&apos; (GDP) technique may be applied.
    &lt;/p&gt;
    &lt;h3 id=&quot;c43d4e8c8e414b46bf65817e7b00e85e&quot;&gt;
        Problem review &lt;a href=&quot;#c43d4e8c8e414b46bf65817e7b00e85e&quot;&gt;#&lt;/a&gt;
    &lt;/h3&gt;
    &lt;p&gt;
        Before we start with the GDP technique, a brief review of the problem is in order. For the complete overview, you should read the &lt;a href=&quot;/2025/01/06/encapsulating-rod-cutting&quot;&gt;Encapsulating rod-cutting&lt;/a&gt; article. In the present article, however, we&apos;ll focus on one particular problem related to &lt;a href=&quot;/2022/10/24/encapsulation-in-functional-programming&quot;&gt;encapsulation&lt;/a&gt;:
    &lt;/p&gt;
    &lt;p&gt;
        Ideally, the &lt;code&gt;cut&lt;/code&gt; function should take two input arguments. The first argument, &lt;code&gt;p&lt;/code&gt;, is an array or list of prices. The second argument, &lt;code&gt;n&lt;/code&gt;, is the size of a rod to cut optimally. One precondition states that &lt;code&gt;n&lt;/code&gt; must be less than or equal to the length of &lt;code&gt;p&lt;/code&gt;. This is because the algorithm needs to look up the price of a rod of size &lt;code&gt;n&lt;/code&gt;, and it can&apos;t do that if &lt;code&gt;n&lt;/code&gt; is greater than the length of &lt;code&gt;p&lt;/code&gt;. The implied relationship is that &lt;code&gt;p&lt;/code&gt; is indexed by rod size, so that if you want to find the price of a rod of size &lt;code&gt;n&lt;/code&gt;, you look at the nth element in &lt;code&gt;p&lt;/code&gt;.
    &lt;/p&gt;
    &lt;p&gt;
        How may we model such a relationship in a way that protects the precondition?
    &lt;/p&gt;
    &lt;p&gt;
        An obvious choice, particularly in object-oriented design, is to use a &lt;a href=&quot;https://en.wikipedia.org/wiki/Guard_(computer_science)&quot;&gt;Guard Clause&lt;/a&gt;. In the &lt;a href=&quot;https://fsharp.org/&quot;&gt;F#&lt;/a&gt; code base, it might look like this:
    &lt;/p&gt;
    &lt;p&gt;
        &lt;pre&gt;&lt;span style=&quot;color:blue;&quot;&gt;let&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#74531f;&quot;&gt;cut&lt;/span&gt;&amp;nbsp;(&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;p&lt;/span&gt;&amp;nbsp;:&amp;nbsp;_&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;array&lt;/span&gt;)&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;n&lt;/span&gt;&amp;nbsp;=
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;if&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;p&lt;/span&gt;.Length&amp;nbsp;&amp;lt;=&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;n&lt;/span&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;then&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;raise&lt;/span&gt;&amp;nbsp;(&lt;span style=&quot;color:#2b91af;&quot;&gt;ArgumentOutOfRangeException&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#a31515;&quot;&gt;&amp;quot;n&amp;nbsp;must&amp;nbsp;be&amp;nbsp;less&amp;nbsp;than&amp;nbsp;the&amp;nbsp;length&amp;nbsp;of&amp;nbsp;p&amp;quot;&lt;/span&gt;)
 
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:green;&quot;&gt;//&amp;nbsp;The&amp;nbsp;rest&amp;nbsp;of&amp;nbsp;the&amp;nbsp;function&amp;nbsp;body...&lt;/span&gt;&lt;/pre&gt;
    &lt;/p&gt;
    &lt;p&gt;
        You might argue that in F# and other functional programming languages, throwing exceptions isn&apos;t &lt;a href=&quot;/2015/08/03/idiomatic-or-idiosyncratic&quot;&gt;idiomatic&lt;/a&gt;. Instead, you ought to return &lt;code&gt;Result&lt;/code&gt; or &lt;code&gt;Option&lt;/code&gt; values, here the latter:
    &lt;/p&gt;
    &lt;p&gt;
        &lt;pre&gt;&lt;span style=&quot;color:blue;&quot;&gt;let&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#74531f;&quot;&gt;cut&lt;/span&gt;&amp;nbsp;(&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;p&lt;/span&gt;&amp;nbsp;:&amp;nbsp;_&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;array&lt;/span&gt;)&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;n&lt;/span&gt;&amp;nbsp;=
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;if&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;p&lt;/span&gt;.Length&amp;nbsp;&amp;lt;=&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;n&lt;/span&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;then&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;None&lt;/span&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;else&lt;/span&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:green;&quot;&gt;//&amp;nbsp;The&amp;nbsp;rest&amp;nbsp;of&amp;nbsp;the&amp;nbsp;function&amp;nbsp;body...&lt;/span&gt;&lt;/pre&gt;
    &lt;/p&gt;
    &lt;p&gt;
        To be clear, in most code bases, this is exactly what I would do. What follows is rather exotic, and hardly suitable for all use cases.
    &lt;/p&gt;
    &lt;h3 id=&quot;9457df27904b4b9ea65b4713dea20fbd&quot;&gt;
        Proofs as values &lt;a href=&quot;#9457df27904b4b9ea65b4713dea20fbd&quot;&gt;#&lt;/a&gt;
    &lt;/h3&gt;
    &lt;p&gt;
        It&apos;s not too hard to model the lower boundary of the &lt;code&gt;n&lt;/code&gt; parameter. As is often the case, it turns out that the number must be a natural number. I already covered that in the &lt;a href=&quot;/2025/01/06/encapsulating-rod-cutting&quot;&gt;previous article&lt;/a&gt;. It&apos;s much harder, however, to model the upper boundary of the value, because it depends on the size of &lt;code&gt;p&lt;/code&gt;.
    &lt;/p&gt;
    &lt;p&gt;
        The following is based on the paper &lt;a href=&quot;https://dl.acm.org/doi/10.1145/3242744.3242755&quot;&gt;Ghosts of Departed Proofs&lt;/a&gt;, as well as &lt;a href=&quot;https://gist.github.com/Savelenko/9f21c63fdc00b52a64739122176b7453&quot;&gt;a helpful Gist&lt;/a&gt; also provided by Borar. (The link to the paper is to what I believe is the &apos;official&apos; page for it, and since it&apos;s part of the ACM digital library, it&apos;s behind a paywall. Even so, as is the case with most academic papers, it&apos;s easy enough to find a PDF of it somewhere else. Not that I endorse content piracy, but it&apos;s my impression that academic papers are usually disseminated by the authors themselves.)
    &lt;/p&gt;
    &lt;p&gt;
        The idea is to enable a library to issue a &apos;proof&apos; about a certain condition. In the example I&apos;m going to use here, the proof is that a certain number is in the valid range for a given list of prices.
    &lt;/p&gt;
    &lt;p&gt;
        We actually can&apos;t entirely escape the need for a run-time check, but we do gain two other benefits. The first is that we&apos;re now using the type system to communicate a relationship that otherwise would have to be described in written documentation. The second is that once the proof has been issued, there&apos;s no need to perform additional run-time checks.
    &lt;/p&gt;
    &lt;p&gt;
        This can help move an API towards a more total, as opposed to &lt;a href=&quot;https://en.wikipedia.org/wiki/Partial_function&quot;&gt;partial&lt;/a&gt;, definition, which again moves towards what Michael Feathers calls &lt;a href=&quot;https://youtu.be/AnZ0uTOerUI?si=1gJXYFoVlNTSbjEt&quot;&gt;unconditional code&lt;/a&gt;. This is particularly useful if the alternative is an API that &apos;forgets&apos; which run-time guarantees have already been checked. The paper has some examples. I&apos;ve also recently encountered similar situations when doing &lt;a href=&quot;https://adventofcode.com/2024&quot;&gt;Advent of Code 2024&lt;/a&gt;. Many days my solution involved immutable maps (like hash tables) that I&apos;d recurse over. In many cases I&apos;d write an algorithm where I with absolute certainty knew that a particular key was in the map (if, for example, I&apos;d just put it there three lines earlier). In such cases, you don&apos;t want a total function that returns an option or &lt;a href=&quot;/2022/04/25/the-maybe-monad&quot;&gt;Maybe&lt;/a&gt; value. You want a partial function. Or a type-level guarantee that the value is, indeed, in the map.
    &lt;/p&gt;
    &lt;p&gt;
        For the example in this article, it&apos;s overkill, so you may wonder what the point is. On the other hand, a simple example makes it easier to follow what&apos;s going on. Hopefully, once you understand the technique, you can extrapolate it to situations where it might be more warranted.
    &lt;/p&gt;
    &lt;h3 id=&quot;46bc8e47a37f43b3b126946ac29239b0&quot;&gt;
        Proof contexts &lt;a href=&quot;#46bc8e47a37f43b3b126946ac29239b0&quot;&gt;#&lt;/a&gt;
    &lt;/h3&gt;
    &lt;p&gt;
        The overall idea should look familiar to practitioners of statically-typed functional programming. Instead of plain functions and data structures, we introduce a special &apos;context&apos; in which we have to run our computations. This is similar to how &lt;a href=&quot;/2023/01/09/the-io-monad&quot;&gt;the IO monad&lt;/a&gt; works, or, in fact, most monads. You&apos;re not supposed to &lt;a href=&quot;/2019/02/04/how-to-get-the-value-out-of-the-monad&quot;&gt;get the value out of the monad&lt;/a&gt;. Rather, you should inject the desired behaviour &lt;em&gt;into&lt;/em&gt; the monad.
    &lt;/p&gt;
    &lt;p&gt;
        We find a similar design with existential types, or with the &lt;a href=&quot;https://hackage.haskell.org/package/base/docs/Control-Monad-ST.html&quot;&gt;ST monad&lt;/a&gt;, on which the ideas in the GDP paper are acknowledged to be based. We even see a mutation-based variation in the article &lt;a href=&quot;/2024/06/24/a-mutable-priority-collection&quot;&gt;A mutable priority collection&lt;/a&gt;, where we may think of the &lt;code&gt;Edit&lt;/code&gt; API as a variation of the ST monad, since it allows &apos;localized&apos; state mutation.
    &lt;/p&gt;
    &lt;p&gt;
        I&apos;ll attempt to illustrate it like this:
    &lt;/p&gt;
    &lt;p&gt;
        &lt;img src=&quot;/content/binary/library-with-computation-context.png&quot; alt=&quot;A box labelled &apos;library&apos; with a &apos;sandbox&apos; area inside. To its left, another box labelled &apos;Client code&apos; with an arrow to the library box, as well as an arrow to a box inside the sandbox area labelled &apos;Client computation&apos;.&quot;&gt;
    &lt;/p&gt;
    &lt;p&gt;
        A library offers a set of functions and data structures for immediate use. In addition, it also provides a &lt;a href=&quot;https://en.wikipedia.org/wiki/Higher-order_function&quot;&gt;higher-oder function&lt;/a&gt; that enables client code to embed a computation into a special &apos;sandbox&apos; area where special rules apply. The paper calls such a context a &apos;name&apos;, which it does because it&apos;s trying to be as general as possible. As I&apos;m writing this, I find it easier to think of this &apos;sandbox&apos; as a &apos;proof context&apos;. It&apos;s a context in which proof values exist. Crucially, as we shall see, they don&apos;t exist outside of this context.
    &lt;/p&gt;
    &lt;h3 id=&quot;50d1ba9968d04529be3cbccfd6b05061&quot;&gt;
        Size proofs &lt;a href=&quot;#50d1ba9968d04529be3cbccfd6b05061&quot;&gt;#&lt;/a&gt;
    &lt;/h3&gt;
    &lt;p&gt;
        In the rod-cutting example, we particularly care about proving that a given number &lt;code&gt;n&lt;/code&gt; is within the size of the price list. We do this by representing the proof as a value:
    &lt;/p&gt;
    &lt;p&gt;
        &lt;pre&gt;&lt;span style=&quot;color:blue;&quot;&gt;type&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;Size&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;&amp;#39;a&lt;/span&gt;&amp;gt;&amp;nbsp;=&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;private&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;Size&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;of&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;int&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;with&lt;/span&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;member&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;this&lt;/span&gt;.Value&amp;nbsp;=&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;let&lt;/span&gt;&amp;nbsp;(&lt;span style=&quot;color:#2b91af;&quot;&gt;Size&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;i&lt;/span&gt;)&amp;nbsp;=&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;this&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;in&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;i&lt;/span&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;override&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;this&lt;/span&gt;.&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;ToString&lt;/span&gt;&amp;nbsp;()&amp;nbsp;=&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;let&lt;/span&gt;&amp;nbsp;(&lt;span style=&quot;color:#2b91af;&quot;&gt;Size&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;i&lt;/span&gt;)&amp;nbsp;=&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;this&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;in&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#74531f;&quot;&gt;string&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;i&lt;/span&gt;&lt;/pre&gt;
    &lt;/p&gt;
    &lt;p&gt;
        Two things are special about this type definition:
    &lt;/p&gt;
    &lt;ul&gt;
        &lt;li&gt;The constructor is &lt;code&gt;private&lt;/code&gt;.&lt;/li&gt;
        &lt;li&gt;It has a phantom type &lt;code&gt;&apos;a&lt;/code&gt;.&lt;/li&gt;
    &lt;/ul&gt;
    &lt;p&gt;
        A phantom type is a generic type parameter that has no run-time value. Notice that &lt;code&gt;&lt;span style=&quot;color:#2b91af;&quot;&gt;Size&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;&amp;#39;a&lt;/span&gt;&amp;gt;&lt;/code&gt; contains no value of the type &lt;code&gt;&apos;a&lt;/code&gt;. The type only exists at compile-time.
    &lt;/p&gt;
    &lt;p&gt;
        You can think of the type parameter as similar to a security token. The issuer of the proof associates a particular security token to vouch for its validity. Usually, when we talk about security tokens, they do have a run-time representation (typically a byte array) because we need to exchange them with other processes. This is, for example, how claims-based authentication works.
    &lt;/p&gt;
    &lt;p&gt;
        &lt;img src=&quot;/content/binary/claim-with-certificate.png&quot; alt=&quot;A box labelled &apos;claim&apos;. The box has a ribboned seal in the lower right corner.&quot; width=&quot;200&quot;&gt;
    &lt;/p&gt;
    &lt;p&gt;
        In this case, our concern isn&apos;t security. Rather, we wish to communicate and enforce certain relationships. Since we wish to leverage the type system, we use a type as a token.
    &lt;/p&gt;
    &lt;p&gt;
        &lt;img src=&quot;/content/binary/size-with-phantom-type.png&quot; alt=&quot;A box labelled &apos;size&apos;. The box has another label in the lower right corner with the generic type argument &apos;a.&quot; width=&quot;200&quot;&gt;
    &lt;/p&gt;
    &lt;p&gt;
        Since the &lt;code&gt;Size&lt;/code&gt; constructor is &lt;code&gt;private&lt;/code&gt;, the library controls how it issues proofs, a bit like a claims issuer can sign a claim with its private key.
    &lt;/p&gt;
    &lt;p&gt;
        Okay, but how are &lt;code&gt;Size&lt;/code&gt; proofs issued?
    &lt;/p&gt;
    &lt;h3 id=&quot;28af8638928c4327b0c3a43d6c36711f&quot;&gt;
        Issuing size proofs &lt;a href=&quot;#28af8638928c4327b0c3a43d6c36711f&quot;&gt;#&lt;/a&gt;
    &lt;/h3&gt;
    &lt;p&gt;
        As you&apos;ll see later, more than one API may issue &lt;code&gt;Size&lt;/code&gt; proofs, but the most fundamental is that you can query a price list for such a proof:
    &lt;/p&gt;
    &lt;p&gt;
        &lt;pre&gt;&lt;span style=&quot;color:blue;&quot;&gt;type&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;PriceList&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;&amp;#39;a&lt;/span&gt;&amp;gt;&amp;nbsp;=&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;private&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;PriceList&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;of&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;int&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;list&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;with&lt;/span&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;member&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;this&lt;/span&gt;.Length&amp;nbsp;=&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;let&lt;/span&gt;&amp;nbsp;(&lt;span style=&quot;color:#2b91af;&quot;&gt;PriceList&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;prices&lt;/span&gt;)&amp;nbsp;=&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;this&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;in&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;prices&lt;/span&gt;.Length
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;member&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;this&lt;/span&gt;.&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;trySize&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;candidate&lt;/span&gt;&amp;nbsp;:&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;Size&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;&amp;#39;a&lt;/span&gt;&amp;gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;option&lt;/span&gt;&amp;nbsp;=
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;if&lt;/span&gt;&amp;nbsp;0&amp;nbsp;&amp;lt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;candidate&lt;/span&gt;&amp;nbsp;&amp;amp;&amp;amp;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;candidate&lt;/span&gt;&amp;nbsp;&amp;lt;=&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;this&lt;/span&gt;.Length
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;then&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;Some&lt;/span&gt;&amp;nbsp;(&lt;span style=&quot;color:#2b91af;&quot;&gt;Size&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;candidate&lt;/span&gt;)
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;else&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;None&lt;/span&gt;&lt;/pre&gt;
    &lt;/p&gt;
    &lt;p&gt;
        The &lt;code&gt;trySize&lt;/code&gt; member function issues a &lt;code&gt;&lt;span style=&quot;color:#2b91af;&quot;&gt;Some&lt;/span&gt; &lt;span style=&quot;color:#2b91af;&quot;&gt;Size&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;&amp;#39;a&lt;/span&gt;&amp;gt;&lt;/code&gt; value if the &lt;code&gt;candidate&lt;/code&gt; is within the size of the price array. As discussed above, we can&apos;t completely avoid a run-time check, but now that we have the proof, we don&apos;t need to &lt;em&gt;repeat&lt;/em&gt; that run-time check if we wanted to use a particular &lt;code&gt;Size&lt;/code&gt; value with the same &lt;code&gt;PriceList&lt;/code&gt;.
    &lt;/p&gt;
    &lt;p&gt;
        Notice how immutability is an essential part of this design. If, in the object-oriented manner, we allow a price list to change, we could make it shorter. This could invalidate some proof that we previously issued. Since, however, the price list is immutable, we can trust that once we&apos;ve checked a size, it remains valid. You can also think of this as a sort of &lt;a href=&quot;/encapsulation-and-solid&quot;&gt;encapsulation&lt;/a&gt;, in the sense that once we&apos;ve assured ourselves that an object, or here rather a value, is valid, it remains valid. Indeed, &lt;a href=&quot;/2024/06/12/simpler-encapsulation-with-immutability&quot;&gt;encapsulation is simpler with immutability&lt;/a&gt;.
    &lt;/p&gt;
    &lt;p&gt;
        You probably still have some questions. For instance, how do we ensure that a size proof issued by one price list can&apos;t be used against another price list? Imagine that you have two price lists. One has ten prices, the other twenty. You could have the larger one issue a proof that &lt;em&gt;size 17&lt;/em&gt; is valid. What prevents you from using that proof with the smaller price list?
    &lt;/p&gt;
    &lt;p&gt;
        That&apos;s the job of that phantom type. Notice how a &lt;code&gt;&lt;span style=&quot;color:#2b91af;&quot;&gt;PriceList&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;&amp;#39;a&lt;/span&gt;&amp;gt;&lt;/code&gt; issues a &lt;code&gt;&lt;span style=&quot;color:#2b91af;&quot;&gt;Size&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;&amp;#39;a&lt;/span&gt;&amp;gt;&lt;/code&gt; proof. It&apos;s the same generic type argument.
    &lt;/p&gt;
    &lt;p&gt;
        Usually, I &lt;a href=&quot;/2024/11/04/pendulum-swing-no-haskell-type-annotation-by-default&quot;&gt;extol F#&apos;s type inference&lt;/a&gt;. I prefer not having to use type annotations unless I have to. When it comes to GDP, however, type annotations are necessary, because we need these phantom types to line up. Without the type annotations, they wouldn&apos;t do that.
    &lt;/p&gt;
    &lt;p&gt;
        In the above example, the smaller price list might have the type &lt;code&gt;&lt;span style=&quot;color:#2b91af;&quot;&gt;PriceList&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;&amp;#39;a&lt;/span&gt;&amp;gt;&lt;/code&gt; and the larger one the type &lt;code&gt;&lt;span style=&quot;color:#2b91af;&quot;&gt;PriceList&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;&amp;#39;b&lt;/span&gt;&amp;gt;&lt;/code&gt;. The smaller would issue proofs of the type &lt;code&gt;&lt;span style=&quot;color:#2b91af;&quot;&gt;Size&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;&amp;#39;a&lt;/span&gt;&amp;gt;&lt;/code&gt;, and the larger one proofs of the type &lt;code&gt;&lt;span style=&quot;color:#2b91af;&quot;&gt;Size&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;&amp;#39;b&lt;/span&gt;&amp;gt;&lt;/code&gt;. As you&apos;ll see, you can&apos;t use a &lt;code&gt;&lt;span style=&quot;color:#2b91af;&quot;&gt;Size&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;&amp;#39;a&lt;/span&gt;&amp;gt;&lt;/code&gt; where a &lt;code&gt;&lt;span style=&quot;color:#2b91af;&quot;&gt;Size&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;&amp;#39;b&lt;/span&gt;&amp;gt;&lt;/code&gt; is required, or vice versa.
    &lt;/p&gt;
    &lt;p&gt;
        You may still wonder how one then creates &lt;code&gt;&lt;span style=&quot;color:#2b91af;&quot;&gt;PriceList&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;&amp;#39;a&lt;/span&gt;&amp;gt;&lt;/code&gt; values. After all, that type also has a &lt;code&gt;private&lt;/code&gt; constructor.
    &lt;/p&gt;
    &lt;p&gt;
        We&apos;ll get back to that later.
    &lt;/p&gt;
    &lt;h3 id=&quot;193350b5b4ab4327b021ac42403dab11&quot;&gt;
        Proof-based cut API &lt;a href=&quot;#193350b5b4ab4327b021ac42403dab11&quot;&gt;#&lt;/a&gt;
    &lt;/h3&gt;
    &lt;p&gt;
        Before we look at how client code may consume APIs based on proofs such as &lt;code&gt;&lt;span style=&quot;color:#2b91af;&quot;&gt;Size&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;&amp;#39;a&lt;/span&gt;&amp;gt;&lt;/code&gt;, we should review their expressive power. What does this design enable us to say?
    &lt;/p&gt;
    &lt;p&gt;
        While the first example above, with the Guard Clause alternative, was based on the initial imperative implementation shown in the article &lt;a href=&quot;/2024/12/23/implementing-rod-cutting&quot;&gt;Implementing rod-cutting&lt;/a&gt;, the rest of the present article builds on the refactored code from &lt;a href=&quot;/2025/01/06/encapsulating-rod-cutting&quot;&gt;Encapsulating rod-cutting&lt;/a&gt;.
    &lt;/p&gt;
    &lt;p&gt;
        The first change I need to introduce is to the &lt;code&gt;Cut&lt;/code&gt; record type:
    &lt;/p&gt;
    &lt;p&gt;
        &lt;pre&gt;&lt;span style=&quot;color:blue;&quot;&gt;type&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;Cut&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;&amp;#39;a&lt;/span&gt;&amp;gt;&amp;nbsp;=&amp;nbsp;{&amp;nbsp;Revenue&amp;nbsp;:&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;int&lt;/span&gt;;&amp;nbsp;Size&amp;nbsp;:&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;Size&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;&amp;#39;a&lt;/span&gt;&amp;gt;&amp;nbsp;}&lt;/pre&gt;
    &lt;/p&gt;
    &lt;p&gt;
        Notice that I&apos;ve changed the type of the &lt;code&gt;Size&lt;/code&gt; property to &lt;code&gt;&lt;span style=&quot;color:#2b91af;&quot;&gt;Size&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;&amp;#39;a&lt;/span&gt;&amp;gt;&lt;/code&gt;. This has the implication that &lt;code&gt;&lt;span style=&quot;color:#2b91af;&quot;&gt;Cut&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;&amp;#39;a&lt;/span&gt;&amp;gt;&lt;/code&gt; now also has a phantom type, and since client code can&apos;t create &lt;code&gt;&lt;span style=&quot;color:#2b91af;&quot;&gt;Size&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;&amp;#39;a&lt;/span&gt;&amp;gt;&lt;/code&gt; values, by transitivity it means that neither can client code create &lt;code&gt;&lt;span style=&quot;color:#2b91af;&quot;&gt;Cut&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;&amp;#39;a&lt;/span&gt;&amp;gt;&lt;/code&gt; values. These values can only be issued as proofs.
    &lt;/p&gt;
    &lt;p&gt;
        This enables us to change the type definition of the &lt;code&gt;cut&lt;/code&gt; function:
    &lt;/p&gt;
    &lt;p&gt;
        &lt;pre&gt;&lt;span style=&quot;color:blue;&quot;&gt;let&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#74531f;&quot;&gt;cut&lt;/span&gt;&amp;nbsp;(&lt;span style=&quot;color:#2b91af;&quot;&gt;PriceList&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;prices&lt;/span&gt;&amp;nbsp;:&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;PriceList&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;&amp;#39;a&lt;/span&gt;&amp;gt;)&amp;nbsp;(&lt;span style=&quot;color:#2b91af;&quot;&gt;Size&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;n&lt;/span&gt;&amp;nbsp;:&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;Size&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;&amp;#39;a&lt;/span&gt;&amp;gt;)&amp;nbsp;:&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;Cut&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;&amp;#39;a&lt;/span&gt;&amp;gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;list&lt;/span&gt;&amp;nbsp;=
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:green;&quot;&gt;//&amp;nbsp;Implementation&amp;nbsp;follows&amp;nbsp;here...&lt;/span&gt;&lt;/pre&gt;
    &lt;/p&gt;
    &lt;p&gt;
        Notice how all the phantom types line up. In order to call the function, client code must supply a &lt;code&gt;&lt;span style=&quot;color:#2b91af;&quot;&gt;Size&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;&amp;#39;a&lt;/span&gt;&amp;gt;&lt;/code&gt; value issued by a compatible &lt;code&gt;&lt;span style=&quot;color:#2b91af;&quot;&gt;PriceList&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;&amp;#39;a&lt;/span&gt;&amp;gt;&lt;/code&gt; value. Upon a valid call, the function returns a list of &lt;code&gt;&lt;span style=&quot;color:#2b91af;&quot;&gt;Cut&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;&amp;#39;a&lt;/span&gt;&amp;gt;&lt;/code&gt; values.
    &lt;/p&gt;
    &lt;p&gt;
        Pay attention to what is being communicated. You may find this strange and impenetrable, but for a reader who understands GDP, much about the contract is communicated through the types. We can see that &lt;code&gt;n&lt;/code&gt; relates to &lt;code&gt;prices&lt;/code&gt;, because the &apos;proof token&apos; (the generic type parameter &lt;code&gt;&apos;a&lt;/code&gt;) is the same for both arguments. A reader who understands how &lt;code&gt;&lt;span style=&quot;color:#2b91af;&quot;&gt;Size&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;&amp;#39;a&lt;/span&gt;&amp;gt;&lt;/code&gt; proofs are issued will now understand what the preconditions is: The &lt;code&gt;n&lt;/code&gt; argument must be valid according to the size of the &lt;code&gt;prices&lt;/code&gt; argument.
    &lt;/p&gt;
    &lt;p&gt;
        The type of the &lt;code&gt;cut&lt;/code&gt; function also communicates a postcondition: It guarantees that the &lt;code&gt;Size&lt;/code&gt; values of each &lt;code&gt;&lt;span style=&quot;color:#2b91af;&quot;&gt;Cut&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;&amp;#39;a&lt;/span&gt;&amp;gt;&lt;/code&gt; returned is valid according to the supplied &lt;code&gt;prices&lt;/code&gt;. In other words, it means that no &lt;a href=&quot;/2013/07/08/defensive-coding&quot;&gt;defensive coding&lt;/a&gt; is necessary. Client code doesn&apos;t have to check whether or not the price of each indicated cut can actually be found in &lt;code&gt;prices&lt;/code&gt;. The types guarantee that they can.
    &lt;/p&gt;
    &lt;p&gt;
        You may consider the &lt;code&gt;cut&lt;/code&gt; function a &apos;secondary&apos; issuer of &lt;code&gt;&lt;span style=&quot;color:#2b91af;&quot;&gt;Size&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;&amp;#39;a&lt;/span&gt;&amp;gt;&lt;/code&gt; proofs, since it returns such values. If you wanted to call &lt;code&gt;cut&lt;/code&gt; again with one of those values, you could.
    &lt;/p&gt;
    &lt;p&gt;
        Compared to the previous article, I don&apos;t think I changed much else in the &lt;code&gt;cut&lt;/code&gt; function, besides the initial function declaration, and the last line of code, but for good measure, here&apos;s the entire function:
    &lt;/p&gt;
    &lt;p&gt;
        &lt;pre&gt;&lt;span style=&quot;color:blue;&quot;&gt;let&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#74531f;&quot;&gt;cut&lt;/span&gt;&amp;nbsp;(&lt;span style=&quot;color:#2b91af;&quot;&gt;PriceList&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;prices&lt;/span&gt;&amp;nbsp;:&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;PriceList&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;&amp;#39;a&lt;/span&gt;&amp;gt;)&amp;nbsp;(&lt;span style=&quot;color:#2b91af;&quot;&gt;Size&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;n&lt;/span&gt;&amp;nbsp;:&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;Size&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;&amp;#39;a&lt;/span&gt;&amp;gt;)&amp;nbsp;:&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;Cut&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;&amp;#39;a&lt;/span&gt;&amp;gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;list&lt;/span&gt;&amp;nbsp;=
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:green;&quot;&gt;//&amp;nbsp;Implementation&amp;nbsp;follows&amp;nbsp;here...&lt;/span&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;let&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;p&lt;/span&gt;&amp;nbsp;=&amp;nbsp;0&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;::&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;prices&lt;/span&gt;&amp;nbsp;|&amp;gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;Array&lt;/span&gt;.&lt;span style=&quot;color:#74531f;&quot;&gt;ofList&lt;/span&gt;
 
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;let&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#74531f;&quot;&gt;findBestCut&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;revenues&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;j&lt;/span&gt;&amp;nbsp;=
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[1..&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;j&lt;/span&gt;]
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|&amp;gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;List&lt;/span&gt;.&lt;span style=&quot;color:#74531f;&quot;&gt;map&lt;/span&gt;&amp;nbsp;(&lt;span style=&quot;color:blue;&quot;&gt;fun&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;i&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;-&amp;gt;&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;p&lt;/span&gt;[&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;i&lt;/span&gt;]&amp;nbsp;+&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;Map&lt;/span&gt;.&lt;span style=&quot;color:#74531f;&quot;&gt;find&lt;/span&gt;&amp;nbsp;(&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;j&lt;/span&gt;&amp;nbsp;-&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;i&lt;/span&gt;)&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;revenues&lt;/span&gt;,&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;i&lt;/span&gt;)
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|&amp;gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;List&lt;/span&gt;.&lt;span style=&quot;color:#74531f;&quot;&gt;maxBy&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#74531f;&quot;&gt;fst&lt;/span&gt;
 
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;let&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#74531f;&quot;&gt;aggregate&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;acc&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;j&lt;/span&gt;&amp;nbsp;=
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;let&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;revenues&lt;/span&gt;&amp;nbsp;=&amp;nbsp;&lt;span style=&quot;color:#74531f;&quot;&gt;snd&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;acc&lt;/span&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;let&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;q&lt;/span&gt;,&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;i&lt;/span&gt;&amp;nbsp;=&amp;nbsp;&lt;span style=&quot;color:#74531f;&quot;&gt;findBestCut&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;revenues&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;j&lt;/span&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;let&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#74531f;&quot;&gt;cuts&lt;/span&gt;&amp;nbsp;=&amp;nbsp;&lt;span style=&quot;color:#74531f;&quot;&gt;fst&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;acc&lt;/span&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:#74531f;&quot;&gt;cuts&lt;/span&gt;&amp;nbsp;&amp;lt;&amp;lt;&amp;nbsp;(&lt;span style=&quot;color:#74531f;&quot;&gt;cons&lt;/span&gt;&amp;nbsp;(&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;q&lt;/span&gt;,&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;i&lt;/span&gt;)),&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;Map&lt;/span&gt;.&lt;span style=&quot;color:#74531f;&quot;&gt;add&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;revenues&lt;/span&gt;.Count&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;q&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;revenues&lt;/span&gt;
 
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[1..&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;n&lt;/span&gt;]
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|&amp;gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;List&lt;/span&gt;.&lt;span style=&quot;color:#74531f;&quot;&gt;fold&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#74531f;&quot;&gt;aggregate&lt;/span&gt;&amp;nbsp;(&lt;span style=&quot;color:#74531f;&quot;&gt;id&lt;/span&gt;,&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;Map&lt;/span&gt;.&lt;span style=&quot;color:#74531f;&quot;&gt;add&lt;/span&gt;&amp;nbsp;0&amp;nbsp;0&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;Map&lt;/span&gt;.empty)
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|&amp;gt;&amp;nbsp;&lt;span style=&quot;color:#74531f;&quot;&gt;fst&lt;/span&gt;&amp;nbsp;&amp;lt;|&amp;nbsp;[]&amp;nbsp;&lt;span style=&quot;color:green;&quot;&gt;//&amp;nbsp;Evaluate&amp;nbsp;Hughes&amp;nbsp;list&lt;/span&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|&amp;gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;List&lt;/span&gt;.&lt;span style=&quot;color:#74531f;&quot;&gt;map&lt;/span&gt;&amp;nbsp;(&lt;span style=&quot;color:blue;&quot;&gt;fun&lt;/span&gt;&amp;nbsp;(&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;r&lt;/span&gt;,&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;i&lt;/span&gt;)&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;-&amp;gt;&lt;/span&gt;&amp;nbsp;{&amp;nbsp;Revenue&amp;nbsp;=&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;r&lt;/span&gt;;&amp;nbsp;Size&amp;nbsp;=&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;Size&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;i&lt;/span&gt;&amp;nbsp;})&lt;/pre&gt;
    &lt;/p&gt;
    &lt;p&gt;
        The &lt;code&gt;cut&lt;/code&gt; function is part of the same module as &lt;code&gt;&lt;span style=&quot;color:#2b91af;&quot;&gt;Size&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;&amp;#39;a&lt;/span&gt;&amp;gt;&lt;/code&gt;, so even though the constructor is &lt;code&gt;private&lt;/code&gt;, the &lt;code&gt;cut&lt;/code&gt; function can still use it.
    &lt;/p&gt;
    &lt;p&gt;
        Thus, the entire proof mechanism is for external use. Internally, the library code may take shortcuts, so it&apos;s up to the library author to convince him- or herself that the contract holds. In this case, I&apos;m quite confident that the function only issues valid proofs. After all, I&apos;ve lifted the algorithm from &lt;a href=&quot;/ref/clrs&quot;&gt;an acclaimed text book&lt;/a&gt;, and this particular implementation is covered by more than 10,000 test cases.
    &lt;/p&gt;
    &lt;h3 id=&quot;dcbcbee557a54a8aaa701484ad89e90f&quot;&gt;
        Proof-based solve API &lt;a href=&quot;#dcbcbee557a54a8aaa701484ad89e90f&quot;&gt;#&lt;/a&gt;
    &lt;/h3&gt;
    &lt;p&gt;
        The &lt;code&gt;solve&lt;/code&gt; code hasn&apos;t changed, I believe:
    &lt;/p&gt;
    &lt;p&gt;
        &lt;pre&gt;&lt;span style=&quot;color:blue;&quot;&gt;let&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#74531f;&quot;&gt;solve&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;prices&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;n&lt;/span&gt;&amp;nbsp;=
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;let&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;cuts&lt;/span&gt;&amp;nbsp;=&amp;nbsp;&lt;span style=&quot;color:#74531f;&quot;&gt;cut&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;prices&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;n&lt;/span&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;let&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;rec&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#74531f;&quot;&gt;imp&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;n&lt;/span&gt;&amp;nbsp;=
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;if&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;n&lt;/span&gt;&amp;nbsp;&amp;lt;=&amp;nbsp;0&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;then&lt;/span&gt;&amp;nbsp;[]&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;else&lt;/span&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;let&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;idx&lt;/span&gt;&amp;nbsp;=&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;n&lt;/span&gt;&amp;nbsp;-&amp;nbsp;1
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;let&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;s&lt;/span&gt;&amp;nbsp;=&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;cuts&lt;/span&gt;[&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;idx&lt;/span&gt;].Size
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;s&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;::&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#74531f;&quot;&gt;imp&lt;/span&gt;&amp;nbsp;(&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;n&lt;/span&gt;&amp;nbsp;-&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;s&lt;/span&gt;.Value)
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:#74531f;&quot;&gt;imp&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;n&lt;/span&gt;.Value&lt;/pre&gt;
    &lt;/p&gt;
    &lt;p&gt;
        While the code hasn&apos;t changed, the type has. In this case, no explicit type annotations are necessary, because the types are already correctly inferred from the use of &lt;code&gt;cut&lt;/code&gt;:
    &lt;/p&gt;
    &lt;p&gt;
        &lt;pre&gt;solve:&amp;nbsp;prices:&amp;nbsp;PriceList&amp;lt;&amp;#39;a&amp;gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;-&amp;gt;&lt;/span&gt;&amp;nbsp;n:&amp;nbsp;Size&amp;lt;&amp;#39;a&amp;gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;-&amp;gt;&lt;/span&gt;&amp;nbsp;Size&amp;lt;&amp;#39;a&amp;gt;&amp;nbsp;list&lt;/pre&gt;
    &lt;/p&gt;
    &lt;p&gt;
        Again, the phantom types line up as desired.
    &lt;/p&gt;
    &lt;h3 id=&quot;f2e9d4cab42b4d74bb472c3aee2e45ef&quot;&gt;
        Proof-based revenue calculation &lt;a href=&quot;#f2e9d4cab42b4d74bb472c3aee2e45ef&quot;&gt;#&lt;/a&gt;
    &lt;/h3&gt;
    &lt;p&gt;
        Although I didn&apos;t show it in the previous article, I also included a function to calculate the revenue from a list of cuts. It gets the same treatment as the other functions:
    &lt;/p&gt;
    &lt;p&gt;
        &lt;pre&gt;&lt;span style=&quot;color:blue;&quot;&gt;let&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#74531f;&quot;&gt;calculateRevenue&lt;/span&gt;&amp;nbsp;(&lt;span style=&quot;color:#2b91af;&quot;&gt;PriceList&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;prices&lt;/span&gt;&amp;nbsp;:&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;PriceList&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;&amp;#39;a&lt;/span&gt;&amp;gt;)&amp;nbsp;(&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;cuts&lt;/span&gt;&amp;nbsp;:&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;Size&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;&amp;#39;a&lt;/span&gt;&amp;gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;list&lt;/span&gt;)&amp;nbsp;=
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;cuts&lt;/span&gt;&amp;nbsp;|&amp;gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;List&lt;/span&gt;.&lt;span style=&quot;color:#74531f;&quot;&gt;sumBy&lt;/span&gt;&amp;nbsp;(&lt;span style=&quot;color:blue;&quot;&gt;fun&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;s&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;-&amp;gt;&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;prices&lt;/span&gt;[&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;s&lt;/span&gt;.Value&amp;nbsp;-&amp;nbsp;1])&lt;/pre&gt;
    &lt;/p&gt;
    &lt;p&gt;
        Again we see how the GDP-based API communicates a precondition: The &lt;code&gt;cuts&lt;/code&gt; must be valid according to the &lt;code&gt;prices&lt;/code&gt;; that is, each cut, indicated by its &lt;code&gt;Size&lt;/code&gt; property, must be guaranteed to be within the range defined by the price list. This makes the function total; or, unconditional code, as Michael Feathers would put it. The function can&apos;t fail at run time.
    &lt;/p&gt;
    &lt;p&gt;
        (I am, once more, deliberately ignoring the entirely independent problem of potential integer overflows.)
    &lt;/p&gt;
    &lt;p&gt;
        While you could repeatedly call &lt;code&gt;&lt;span style=&quot;color:#2b91af;&quot;&gt;PriceList&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;&amp;#39;a&lt;/span&gt;&amp;gt;.&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;trySize&lt;/span&gt;&lt;/code&gt; to produce a list of cuts, the most natural way to produce such a list of cuts is to first call &lt;code&gt;cut&lt;/code&gt;, and then pass its result to &lt;code&gt;calculateRevenue&lt;/code&gt;.
    &lt;/p&gt;
    &lt;p&gt;
        The function returns &lt;code&gt;int&lt;/code&gt;.
    &lt;/p&gt;
    &lt;h3 id=&quot;0a22569816ad4b179a365d2dc3ad81f4&quot;&gt;
        Proof-based printing &lt;a href=&quot;#0a22569816ad4b179a365d2dc3ad81f4&quot;&gt;#&lt;/a&gt;
    &lt;/h3&gt;
    &lt;p&gt;
        Finally, here&apos;s &lt;code&gt;printSolution&lt;/code&gt;:
    &lt;/p&gt;
    &lt;p&gt;
        &lt;pre&gt;&lt;span style=&quot;color:blue;&quot;&gt;let&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#74531f;&quot;&gt;printSolution&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;p&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;n&lt;/span&gt;&amp;nbsp;=&amp;nbsp;&lt;span style=&quot;color:#74531f;&quot;&gt;solve&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;p&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;n&lt;/span&gt;&amp;nbsp;|&amp;gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;List&lt;/span&gt;.&lt;span style=&quot;color:#74531f;&quot;&gt;iter&lt;/span&gt;&amp;nbsp;(&lt;span style=&quot;color:#74531f;&quot;&gt;printfn&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#a31515;&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#2b91af;&quot;&gt;%O&lt;/span&gt;&lt;span style=&quot;color:#a31515;&quot;&gt;&amp;quot;&lt;/span&gt;)&lt;/pre&gt;
    &lt;/p&gt;
    &lt;p&gt;
        It hasn&apos;t changed much since the previous incarnation, but the type is now &lt;code&gt;PriceList&amp;lt;&amp;#39;a&amp;gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;-&amp;gt;&lt;/span&gt;&amp;nbsp;Size&amp;lt;&amp;#39;a&amp;gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;-&amp;gt;&lt;/span&gt;&amp;nbsp;unit&lt;/code&gt;. Again, the precondition is the same as for &lt;code&gt;cut&lt;/code&gt;.
    &lt;/p&gt;
    &lt;h3 id=&quot;2216067c41c44ade8855e4c6f8216d6d&quot;&gt;
        Running client code &lt;a href=&quot;#2216067c41c44ade8855e4c6f8216d6d&quot;&gt;#&lt;/a&gt;
    &lt;/h3&gt;
    &lt;p&gt;
        How in the world do you write client code against this API? After all, the types all have &lt;code&gt;private&lt;/code&gt; constructors, so we can&apos;t create any values.
    &lt;/p&gt;
    &lt;p&gt;
        If you trace the code dependencies, you&apos;ll notice that &lt;code&gt;&lt;span style=&quot;color:#2b91af;&quot;&gt;PriceList&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;&amp;#39;a&lt;/span&gt;&amp;gt;&lt;/code&gt; sits at the heart of the API. If you have a &lt;code&gt;&lt;span style=&quot;color:#2b91af;&quot;&gt;PriceList&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;&amp;#39;a&lt;/span&gt;&amp;gt;&lt;/code&gt;, you&apos;d be able to produce the other values, too.
    &lt;/p&gt;
    &lt;p&gt;
        So how do you create a &lt;code&gt;&lt;span style=&quot;color:#2b91af;&quot;&gt;PriceList&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;&amp;#39;a&lt;/span&gt;&amp;gt;&lt;/code&gt; value?
    &lt;/p&gt;
    &lt;p&gt;
        You don&apos;t. You call the following &lt;code&gt;runPrices&lt;/code&gt; function, and give it a &lt;code&gt;PriceListRunner&lt;/code&gt; that it&apos;ll embed and run in the &apos;sandbox&apos; illustrated above.
    &lt;/p&gt;
    &lt;p&gt;
        &lt;pre&gt;&lt;span style=&quot;color:blue;&quot;&gt;type&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;PriceListRunner&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;&amp;#39;r&lt;/span&gt;&amp;gt;&amp;nbsp;=
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;abstract&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;Run&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;&amp;#39;a&lt;/span&gt;&amp;gt;&amp;nbsp;:&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;PriceList&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;&amp;#39;a&lt;/span&gt;&amp;gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;-&amp;gt;&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;&amp;#39;r&lt;/span&gt;
 
&lt;span style=&quot;color:blue;&quot;&gt;let&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#74531f;&quot;&gt;runPrices&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;pl&lt;/span&gt;&amp;nbsp;(&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;ctx&lt;/span&gt;&amp;nbsp;:&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;PriceListRunner&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;&amp;#39;r&lt;/span&gt;&amp;gt;)&amp;nbsp;=&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;ctx&lt;/span&gt;.&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;Run&lt;/span&gt;&amp;nbsp;(&lt;span style=&quot;color:#2b91af;&quot;&gt;PriceList&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;pl&lt;/span&gt;)&lt;/pre&gt;
    &lt;/p&gt;
    &lt;p&gt;
        As the paper describes, the GDP trick hinges on rank-2 polymorphism, and the only way (that I know of) this is supported in F# is on methods. An object is therefore required, and we define the abstract &lt;code&gt;&lt;span style=&quot;color:#2b91af;&quot;&gt;PriceListRunner&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;&amp;#39;r&lt;/span&gt;&amp;gt;&lt;/code&gt; class for that purpose.
    &lt;/p&gt;
    &lt;p&gt;
        Client code must implement the abstract class to call the &lt;code&gt;runPrices&lt;/code&gt; function. Fortunately, since F# has &lt;a href=&quot;https://learn.microsoft.com/dotnet/fsharp/language-reference/object-expressions&quot;&gt;object expressions&lt;/a&gt;, client code might look like this:
    &lt;/p&gt;
    &lt;p&gt;
        &lt;pre&gt;[&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;Fact&lt;/span&gt;&amp;gt;]
&lt;span style=&quot;color:blue;&quot;&gt;let&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#74531f;&quot;&gt;``CLRS&amp;nbsp;example``&lt;/span&gt;&amp;nbsp;()&amp;nbsp;=
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;let&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;p&lt;/span&gt;&amp;nbsp;=&amp;nbsp;[1;&amp;nbsp;5;&amp;nbsp;8;&amp;nbsp;9;&amp;nbsp;10;&amp;nbsp;17;&amp;nbsp;17;&amp;nbsp;20;&amp;nbsp;24;&amp;nbsp;30]
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;let&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;actual&lt;/span&gt;&amp;nbsp;=&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;Rod&lt;/span&gt;.&lt;span style=&quot;color:#74531f;&quot;&gt;runPrices&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;p&lt;/span&gt;&amp;nbsp;{&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;new&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;PriceListRunner&lt;/span&gt;&amp;lt;_&amp;gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;with&lt;/span&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;member&lt;/span&gt;&amp;nbsp;__.&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;Run&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;pl&lt;/span&gt;&amp;nbsp;=&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;option&lt;/span&gt;&amp;nbsp;{
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;let!&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;n&lt;/span&gt;&amp;nbsp;=&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;pl&lt;/span&gt;.&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;trySize&lt;/span&gt;&amp;nbsp;10
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;let&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;cuts&lt;/span&gt;&amp;nbsp;=&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;Rod&lt;/span&gt;.&lt;span style=&quot;color:#74531f;&quot;&gt;cut&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;pl&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;n&lt;/span&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;return&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;List&lt;/span&gt;.&lt;span style=&quot;color:#74531f;&quot;&gt;map&lt;/span&gt;&amp;nbsp;(&lt;span style=&quot;color:blue;&quot;&gt;fun&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;c&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;-&amp;gt;&lt;/span&gt;&amp;nbsp;(&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;c&lt;/span&gt;.Revenue,&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;c&lt;/span&gt;.Size.Value))&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;cuts&lt;/span&gt;&amp;nbsp;}&amp;nbsp;}
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(&amp;nbsp;1,&amp;nbsp;&amp;nbsp;1)
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(&amp;nbsp;5,&amp;nbsp;&amp;nbsp;2)
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(&amp;nbsp;8,&amp;nbsp;&amp;nbsp;3)
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(10,&amp;nbsp;&amp;nbsp;2)
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(13,&amp;nbsp;&amp;nbsp;2)
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(17,&amp;nbsp;&amp;nbsp;6)
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(18,&amp;nbsp;&amp;nbsp;1)
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(22,&amp;nbsp;&amp;nbsp;2)
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(25,&amp;nbsp;&amp;nbsp;3)
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(30,&amp;nbsp;10)
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;]&amp;nbsp;|&amp;gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;Some&lt;/span&gt;&amp;nbsp;=!&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;actual&lt;/span&gt;&lt;/pre&gt;
    &lt;/p&gt;
    &lt;p&gt;
        This is an &lt;a href=&quot;https://xunit.net/&quot;&gt;xUnit.net&lt;/a&gt; test where &lt;code&gt;actual&lt;/code&gt; is produced by &lt;code&gt;runPrices&lt;/code&gt; and an object expression that defines the code to run in the proof context. When the &lt;code&gt;Run&lt;/code&gt; method runs, it runs with a concrete type that the compiler picked for &lt;code&gt;&apos;a&lt;/code&gt;. This type is only in scope within that method, and can&apos;t escape it.
    &lt;/p&gt;
    &lt;p&gt;
        The implementing class is given a &lt;code&gt;&lt;span style=&quot;color:#2b91af;&quot;&gt;PriceList&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;&amp;#39;a&lt;/span&gt;&amp;gt;&lt;/code&gt; as an input argument. In this example, it tries to create a size of 10, which succeeds because the price list has ten elements.
    &lt;/p&gt;
    &lt;p&gt;
        Notice that the &lt;code&gt;Run&lt;/code&gt; method transforms the &lt;code&gt;cuts&lt;/code&gt; to tuples. Why doesn&apos;t it return &lt;code&gt;cuts&lt;/code&gt; directly?
    &lt;/p&gt;
    &lt;p&gt;
        It can&apos;t. It&apos;s part of the deal. If I change the last line of &lt;code&gt;Run&lt;/code&gt; to &lt;code&gt;return cuts&lt;/code&gt;, the code no longer compiles. The compiler error is:
    &lt;/p&gt;
    &lt;blockquote&gt;
        &lt;p&gt;
            This code is not sufficiently generic. The type variable &apos;a could not be generalized because it would escape its scope.
        &lt;/p&gt;
    &lt;/blockquote&gt;
    &lt;p&gt;
        Remember I wrote that &lt;code&gt;&apos;a&lt;/code&gt; can&apos;t escape the scope of &lt;code&gt;Run&lt;/code&gt;? This is enforced by the type system.
    &lt;/p&gt;
    &lt;h3 id=&quot;6583d683c77c4bfba53f3f2c1195603e&quot;&gt;
        Preventing misalignment &lt;a href=&quot;#6583d683c77c4bfba53f3f2c1195603e&quot;&gt;#&lt;/a&gt;
    &lt;/h3&gt;
    &lt;p&gt;
        You may already consider it a benefit that this kind of API design uses the type system to communicate pre- and postconditions. Perhaps you also wonder how it prevents errors. As already discussed, if you&apos;re dealing with multiple price lists, it shouldn&apos;t be possible to use a size proof issued by one, with another. Let&apos;s see how that might look. We&apos;ll start with a correctly coded unit test:
    &lt;/p&gt;
    &lt;p&gt;
        &lt;pre&gt;[&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;Fact&lt;/span&gt;&amp;gt;]
&lt;span style=&quot;color:blue;&quot;&gt;let&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#74531f;&quot;&gt;``Nest&amp;nbsp;two&amp;nbsp;solutions``&lt;/span&gt;&amp;nbsp;()&amp;nbsp;=
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;let&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;p1&lt;/span&gt;&amp;nbsp;=&amp;nbsp;[1;&amp;nbsp;2;&amp;nbsp;2]
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;let&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;p2&lt;/span&gt;&amp;nbsp;=&amp;nbsp;[1]
 
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;let&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;actual&lt;/span&gt;&amp;nbsp;=&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;Rod&lt;/span&gt;.&lt;span style=&quot;color:#74531f;&quot;&gt;runPrices&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;p1&lt;/span&gt;&amp;nbsp;{&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;new&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;PriceListRunner&lt;/span&gt;&amp;lt;_&amp;gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;with&lt;/span&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;member&lt;/span&gt;&amp;nbsp;__.&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;Run&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;pl1&lt;/span&gt;&amp;nbsp;=&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;option&lt;/span&gt;&amp;nbsp;{
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;let!&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;n1&lt;/span&gt;&amp;nbsp;=&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;pl1&lt;/span&gt;.&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;trySize&lt;/span&gt;&amp;nbsp;3
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;let&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;cuts1&lt;/span&gt;&amp;nbsp;=&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;Rod&lt;/span&gt;.&lt;span style=&quot;color:#74531f;&quot;&gt;solve&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;pl1&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;n1&lt;/span&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;let&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;r&lt;/span&gt;&amp;nbsp;=&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;Rod&lt;/span&gt;.&lt;span style=&quot;color:#74531f;&quot;&gt;calculateRevenue&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;pl1&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;cuts1&lt;/span&gt;
 
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;let!&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;inner&lt;/span&gt;&amp;nbsp;=&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;Rod&lt;/span&gt;.&lt;span style=&quot;color:#74531f;&quot;&gt;runPrices&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;p2&lt;/span&gt;&amp;nbsp;{&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;new&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;PriceListRunner&lt;/span&gt;&amp;lt;_&amp;gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;with&lt;/span&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;member&lt;/span&gt;&amp;nbsp;__.&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;Run&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;pl2&lt;/span&gt;&amp;nbsp;=&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;option&lt;/span&gt;&amp;nbsp;{
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;let!&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;n2&lt;/span&gt;&amp;nbsp;=&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;pl2&lt;/span&gt;.&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;trySize&lt;/span&gt;&amp;nbsp;1
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;let&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;cuts2&lt;/span&gt;&amp;nbsp;=&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;Rod&lt;/span&gt;.&lt;span style=&quot;color:#74531f;&quot;&gt;solve&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;pl2&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;n2&lt;/span&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;return&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;Rod&lt;/span&gt;.&lt;span style=&quot;color:#74531f;&quot;&gt;calculateRevenue&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;pl2&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;cuts2&lt;/span&gt;&amp;nbsp;}&amp;nbsp;}
 
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;return&lt;/span&gt;&amp;nbsp;(&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;r&lt;/span&gt;,&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;inner&lt;/span&gt;)&amp;nbsp;}&amp;nbsp;}
 
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;Some&lt;/span&gt;&amp;nbsp;(3,&amp;nbsp;1)&amp;nbsp;=!&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;actual&lt;/span&gt;&lt;/pre&gt;
    &lt;/p&gt;
    &lt;p&gt;
        This code compiles because I haven&apos;t mixed up the &lt;code&gt;Size&lt;/code&gt; or &lt;code&gt;Cut&lt;/code&gt; values. What happens if I &apos;accidentally&apos; change the &apos;inner&apos; &lt;code&gt;Rod.solve&lt;/code&gt; call to &lt;code&gt;&lt;span style=&quot;color:blue;&quot;&gt;let&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;cuts2&lt;/span&gt;&amp;nbsp;=&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;Rod&lt;/span&gt;.&lt;span style=&quot;color:#74531f;&quot;&gt;solve&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;pl2&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;n1&lt;/span&gt;&lt;/code&gt;?
    &lt;/p&gt;
    &lt;p&gt;
        The code doesn&apos;t compile:
    &lt;/p&gt;
    &lt;blockquote&gt;
        &lt;p&gt;
            Type mismatch. Expecting a     &apos;Size&amp;lt;&apos;a&amp;gt;&apos;     but given a     &apos;Size&amp;lt;&apos;b&amp;gt;&apos;     The type &apos;&apos;a&apos; does not match the type &apos;&apos;b&apos;
        &lt;/p&gt;
    &lt;/blockquote&gt;
    &lt;p&gt;
        This is fortunate, because &lt;code&gt;n1&lt;/code&gt; wouldn&apos;t work with &lt;code&gt;pl2&lt;/code&gt;. Consider that &lt;code&gt;n1&lt;/code&gt; contains the number &lt;code&gt;3&lt;/code&gt;, which is valid for the larger list &lt;code&gt;pl1&lt;/code&gt;, but not the shorter list &lt;code&gt;pl2&lt;/code&gt;.
    &lt;/p&gt;
    &lt;p&gt;
        Proofs are issued with a particular generic type argument - the type-level &apos;token&apos;, if you will. It&apos;s possible for a library API to explicitly propagate such proofs; you see a hint of that in &lt;code&gt;cut&lt;/code&gt;, which not only takes as input a &lt;code&gt;&lt;span style=&quot;color:#2b91af;&quot;&gt;Size&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;&amp;#39;a&lt;/span&gt;&amp;gt;&lt;/code&gt; value, but also issues new proofs as a result.
    &lt;/p&gt;
    &lt;p&gt;
        At the same time, this design prevents proofs from being mixed up. Each set of proofs belongs to a particular proof context.
    &lt;/p&gt;
    &lt;p&gt;
        You get the same compiler error if you accidentally mix up some of the other terms.
    &lt;/p&gt;
    &lt;h3 id=&quot;d143cd141fc143c49e14d8e600492dc0&quot;&gt;
        Conclusion &lt;a href=&quot;#d143cd141fc143c49e14d8e600492dc0&quot;&gt;#&lt;/a&gt;
    &lt;/h3&gt;
    &lt;p&gt;
        One goal in the GDP paper is to introduce a type-safe API design that&apos;s also &lt;em&gt;ergonomic&lt;/em&gt;. Matt Noonan, the author, defines &lt;em&gt;ergonomic&lt;/em&gt; as a design where correct use of the API doesn&apos;t place an undue burden on the client developer. The paper&apos;s example language is &lt;a href=&quot;https://www.haskell.org/&quot;&gt;Haskell&lt;/a&gt; where &lt;a href=&quot;https://wiki.haskell.org/Rank-N_types&quot;&gt;rank-2 polymorphism&lt;/a&gt; has a low impact on the user.
    &lt;/p&gt;
    &lt;p&gt;
        F# only supports rank-2 polymorphism in method definitions, which makes consuming a GDP API more awkward than in Haskell. The need to create a new type, and the few lines of boilerplate that entails, is a drawback.
    &lt;/p&gt;
    &lt;p&gt;
        Even so, the GDP trick is a nice addition to your functional tool belt. You&apos;ll hardly need it every day, but I personally like having some specialized tools lying around together with the everyday ones.
    &lt;/p&gt;
    &lt;p&gt;
        But wait! The reason that F# has support for rank-2 polymorphism through object methods is because C# has that language feature. This must mean that the GDP technique works in C# as well, doesn&apos;t it? Indeed it does.
    &lt;/p&gt;
    &lt;p&gt;
        &lt;strong&gt;Next:&lt;/strong&gt; &lt;a href=&quot;/2025/02/03/modelling-data-relationships-with-c-types&quot;&gt;Modelling data relationships with C# types&lt;/a&gt;.
    &lt;/p&gt;
&lt;/div&gt;&lt;hr&gt;
      This blog is totally free, but if you like it, please consider &lt;a href="https://blog.ploeh.dk/support"&gt;supporting it&lt;/a&gt;.</description>
        <author>Mark Seemann</author>
        <guid isPermaLink="false">https://blog.ploeh.dk/2025/01/20/modelling-data-relationships-with-f-types</guid>
      </item>
    
      <item>
        <title>Recawr Sandwich</title>
        <link>https://blog.ploeh.dk/2025/01/13/recawr-sandwich/</link>
        <pubDate>Mon, 13 Jan 2025 15:52:00 UTC</pubDate>
        <description>


&lt;div id=&quot;post&quot;&gt;
    &lt;p&gt;
        &lt;em&gt;A pattern variation.&lt;/em&gt;
    &lt;/p&gt;
    &lt;p&gt;
        After writing the articles &lt;a href=&quot;/2024/11/18/collecting-and-handling-result-values&quot;&gt;Collecting and handling result values&lt;/a&gt; and &lt;a href=&quot;/2024/12/02/short-circuiting-an-asynchronous-traversal&quot;&gt;Short-circuiting an asynchronous traversal&lt;/a&gt;, I realized that it might be valuable to describe a more disciplined variation of the &lt;a href=&quot;/2020/03/02/impureim-sandwich&quot;&gt;Impureim Sandwich&lt;/a&gt; pattern.
    &lt;/p&gt;
    &lt;p&gt;
        The book &lt;a href=&quot;/ref/dp&quot;&gt;Design Patterns&lt;/a&gt; describes each pattern over a number of sections. There&apos;s a description of the overall motivation, the structure of the pattern, UML diagrams, examples code, and more. One section discusses various implementation variations. I find it worthwhile, too, to explicitly draw attention to a particular variation of the more overall Impureim Sandwich pattern.
    &lt;/p&gt;
    &lt;p&gt;
        This variation imposes an additional constraint to the general pattern. While this may, at first glance, seem limiting, &lt;a href=&quot;https://www.dotnetrocks.com/details/1542&quot;&gt;constraints liberate&lt;/a&gt;.
    &lt;/p&gt;
    &lt;p&gt;
        &lt;img src=&quot;/content/binary/impureim-superset-of-recawr.png&quot; alt=&quot;A subset labeled &apos;Recawr Sandwiches&apos; contained in a superset labeled &apos;Impureim Sandwiches&apos;.&quot;&gt;
    &lt;/p&gt;
    &lt;p&gt;
        As a specialization, you may consider Recawr Sandwiches as a subset of all Impureim Sandwiches.
    &lt;/p&gt;
    &lt;h3 id=&quot;7b076cc0cc9148b9ba464bf41feb6128&quot;&gt;
        Read, calculate, write &lt;a href=&quot;#7b076cc0cc9148b9ba464bf41feb6128&quot;&gt;#&lt;/a&gt;
    &lt;/h3&gt;
    &lt;p&gt;
        In short, the constraint is that the Sandwich should be organized in the following order:
    &lt;/p&gt;
    &lt;ul&gt;
        &lt;li&gt;Read data. This step is impure.&lt;/li&gt;
        &lt;li&gt;Calculate a result from the data. This step is a &lt;a href=&quot;https://en.wikipedia.org/wiki/Pure_function&quot;&gt;pure function&lt;/a&gt;.&lt;/li&gt;
        &lt;li&gt;Write data. This step is impure.&lt;/li&gt;
    &lt;/ul&gt;
    &lt;p&gt;
        If the sandwich has &lt;a href=&quot;/2023/10/09/whats-a-sandwich&quot;&gt;more than three layers&lt;/a&gt;, this order should still be maintained. Once you start writing data to the network, to disk, to a database, or to the user interface, you shouldn&apos;t go back to reading in more data.
    &lt;/p&gt;
    &lt;h3 id=&quot;12089f0da99644849da33faf7dd8ffa4&quot;&gt;
        Naming &lt;a href=&quot;#12089f0da99644849da33faf7dd8ffa4&quot;&gt;#&lt;/a&gt;
    &lt;/h3&gt;
    &lt;p&gt;
        The name &lt;em&gt;Recawr Sandwich&lt;/em&gt; is made from the first letters of &lt;em&gt;REad CAlculate WRite&lt;/em&gt;. It&apos;s pronounced &lt;em&gt;recover sandwich&lt;/em&gt;.
    &lt;/p&gt;
    &lt;p&gt;
        When the idea of naming this variation originally came to me, I first thought of the name &lt;em&gt;read/write sandwich&lt;/em&gt;, but then I thought that the most important ingredient, the pure function, was missing. I&apos;ve considered some other variations, such as &lt;em&gt;read, pure, write sandwich&lt;/em&gt; or &lt;em&gt;input, referential transparency, output sandwich&lt;/em&gt;, but none of them quite gets the point across, I think, in the same way as &lt;em&gt;read, calculate, write&lt;/em&gt;.
    &lt;/p&gt;
    &lt;h3 id=&quot;954558da563244edbb98a6685b3f9460&quot;&gt;
        Precipitating example &lt;a href=&quot;#954558da563244edbb98a6685b3f9460&quot;&gt;#&lt;/a&gt;
    &lt;/h3&gt;
    &lt;p&gt;
        To be clear, I&apos;ve been applying the Recawr Sandwich pattern for years, but it sometimes takes a counter-example before you realize that some implicit, tacit knowledge should be made explicit. This happened to me as I was discussing &lt;a href=&quot;/2024/11/18/collecting-and-handling-result-values&quot;&gt;this implementation&lt;/a&gt; of Impureim Sandwich:
    &lt;/p&gt;
    &lt;p&gt;
        &lt;pre&gt;&lt;span style=&quot;color:green;&quot;&gt;//&amp;nbsp;Impure&lt;/span&gt;
&lt;span style=&quot;color:#2b91af;&quot;&gt;IEnumerable&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;OneOf&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;ShoppingListItem&lt;/span&gt;,&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;NotFound&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;ShoppingListItem&lt;/span&gt;&amp;gt;,&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;Error&lt;/span&gt;&amp;gt;&amp;gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;results&lt;/span&gt;&amp;nbsp;=
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;await&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;itemsToUpdate&lt;/span&gt;.&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;Traverse&lt;/span&gt;(&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;item&lt;/span&gt;&amp;nbsp;=&amp;gt;&amp;nbsp;&lt;span style=&quot;color:#74531f;&quot;&gt;UpdateItem&lt;/span&gt;(&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;item&lt;/span&gt;,&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;dbContext&lt;/span&gt;));
 
&lt;span style=&quot;color:green;&quot;&gt;//&amp;nbsp;Pure&lt;/span&gt;
&lt;span style=&quot;color:blue;&quot;&gt;var&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;result&lt;/span&gt;&amp;nbsp;=&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;results&lt;/span&gt;.&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;Aggregate&lt;/span&gt;(
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;new&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;BulkUpdateResult&lt;/span&gt;([],&amp;nbsp;[],&amp;nbsp;[]),
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;state&lt;/span&gt;,&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;result&lt;/span&gt;)&amp;nbsp;=&amp;gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;result&lt;/span&gt;.&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;Match&lt;/span&gt;(
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;storedItem&lt;/span&gt;&amp;nbsp;=&amp;gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;state&lt;/span&gt;.&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;Store&lt;/span&gt;(&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;storedItem&lt;/span&gt;),
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;notFound&lt;/span&gt;&amp;nbsp;=&amp;gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;state&lt;/span&gt;.&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;Fail&lt;/span&gt;(&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;notFound&lt;/span&gt;.Item),
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;error&lt;/span&gt;&amp;nbsp;=&amp;gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;state&lt;/span&gt;.&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;Error&lt;/span&gt;(&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;error&lt;/span&gt;)));
 
&lt;span style=&quot;color:green;&quot;&gt;//&amp;nbsp;Impure&lt;/span&gt;
&lt;span style=&quot;color:blue;&quot;&gt;await&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;dbContext&lt;/span&gt;.&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;SaveChangesAsync&lt;/span&gt;();
&lt;span style=&quot;font-weight:bold;color:#8f08c4;&quot;&gt;return&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;new&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;OkResult&lt;/span&gt;(&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;result&lt;/span&gt;);&lt;/pre&gt;
    &lt;/p&gt;
    &lt;p&gt;
        Notice that the top impure step traverses a collection of items to apply each to an action called &lt;code&gt;UpdateItem&lt;/code&gt;. As I discussed in the article, I don&apos;t actually know what &lt;code&gt;UpdateItem&lt;/code&gt; does, but the name strongly suggests that it updates a particular database row. Even if the actual write doesn&apos;t happen until &lt;code&gt;SaveChangesAsync&lt;/code&gt; is called, this still seems off.
    &lt;/p&gt;
    &lt;p&gt;
        To be honest, I didn&apos;t realize this until I started thinking about how I&apos;d go about solving the implied problem, if I had to do it from scratch. Because I probably wouldn&apos;t do it like that at all.
    &lt;/p&gt;
    &lt;p&gt;
        It strikes me that doing the update &apos;too early&apos; makes the code more complicated than it has to be.
    &lt;/p&gt;
    &lt;p&gt;
        What would a Recawr Sandwich look like?
    &lt;/p&gt;
    &lt;h3 id=&quot;e599dadd006a4d179289ba72a1978c1f&quot;&gt;
        Recawr example &lt;a href=&quot;#e599dadd006a4d179289ba72a1978c1f&quot;&gt;#&lt;/a&gt;
    &lt;/h3&gt;
    &lt;p&gt;
        Perhaps one could instead start by querying the database about which items are actually in it, then prepare the result, and finally make the update.
    &lt;/p&gt;
    &lt;p&gt;
        &lt;pre&gt;&lt;span style=&quot;color:green;&quot;&gt;//&amp;nbsp;Read&lt;/span&gt;
&lt;span style=&quot;color:blue;&quot;&gt;var&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;existing&lt;/span&gt;&amp;nbsp;=&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;await&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#74531f;&quot;&gt;FilterExisting&lt;/span&gt;(&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;itemsToUpdate&lt;/span&gt;,&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;dbContext&lt;/span&gt;);
 
&lt;span style=&quot;color:green;&quot;&gt;//&amp;nbsp;Calculate&lt;/span&gt;
&lt;span style=&quot;color:blue;&quot;&gt;var&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;result&lt;/span&gt;&amp;nbsp;=&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;new&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;BulkUpdateResult&lt;/span&gt;([..&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;existing&lt;/span&gt;],&amp;nbsp;[..&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;itemsToUpdate&lt;/span&gt;.&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;Except&lt;/span&gt;(&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;existing&lt;/span&gt;)],&amp;nbsp;[]);
 
&lt;span style=&quot;color:green;&quot;&gt;//&amp;nbsp;Write&lt;/span&gt;
&lt;span style=&quot;color:blue;&quot;&gt;var&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;results&lt;/span&gt;&amp;nbsp;=&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;await&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;existing&lt;/span&gt;.&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;Traverse&lt;/span&gt;(&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;item&lt;/span&gt;&amp;nbsp;=&amp;gt;&amp;nbsp;&lt;span style=&quot;color:#74531f;&quot;&gt;UpdateItem&lt;/span&gt;(&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;item&lt;/span&gt;,&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;dbContext&lt;/span&gt;));
&lt;span style=&quot;color:blue;&quot;&gt;await&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;dbContext&lt;/span&gt;.&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;SaveChangesAsync&lt;/span&gt;();
&lt;span style=&quot;font-weight:bold;color:#8f08c4;&quot;&gt;return&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;new&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;OkResult&lt;/span&gt;(&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;result&lt;/span&gt;);&lt;/pre&gt;
    &lt;/p&gt;
    &lt;p&gt;
        To be honest, this variation has different behaviour when &lt;code&gt;Error&lt;/code&gt; values occur, but then again, I wasn&apos;t entirely sure what was even the purpose of the error value. If it&apos;s to &lt;a href=&quot;/2024/01/29/error-categories-and-category-errors&quot;&gt;model errors that client code can&apos;t recover from&lt;/a&gt;, throw an exception instead.
    &lt;/p&gt;
    &lt;p&gt;
        In any case, the example is typical of many &lt;a href=&quot;https://en.wikipedia.org/wiki/Input/output&quot;&gt;I/O&lt;/a&gt;-heavy operations, which veer dangerously close to the degenerate. There really isn&apos;t a lot of logic required, so one may reasonably ask whether the example is useful. It was, however, the example that got me thinking about giving the Recawr Sandwich an explicit name.
    &lt;/p&gt;
    &lt;h3 id=&quot;ef69b33222b44b3e889fc0c861537d48&quot;&gt;
        Other examples &lt;a href=&quot;#ef69b33222b44b3e889fc0c861537d48&quot;&gt;#&lt;/a&gt;
    &lt;/h3&gt;
    &lt;p&gt;
        All the examples in the original &lt;a href=&quot;/2020/03/02/impureim-sandwich&quot;&gt;Impureim Sandwich&lt;/a&gt; article are actually Recawr Sandwiches. Other articles with clear Recawr Sandwich examples are:
    &lt;/p&gt;
    &lt;ul&gt;
        &lt;li&gt;&lt;a href=&quot;/2019/09/09/picture-archivist-in-haskell&quot;&gt;Picture archivist in Haskell&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&quot;/2019/09/16/picture-archivist-in-f&quot;&gt;Picture archivist in F#&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&quot;/2021/09/06/the-command-handler-contravariant-functor&quot;&gt;The Command Handler contravariant functor&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&quot;/2024/12/16/a-restaurant-sandwich&quot;&gt;A restaurant sandwich&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
    &lt;p&gt;
        In other words, I&apos;m just retroactively giving these examples a more specific label.
    &lt;/p&gt;
    &lt;p&gt;
        What&apos;s an example of an Impureim Sandwich which is &lt;em&gt;not&lt;/em&gt; a Recawr Sandwich? Ironically, the first example in this article.
    &lt;/p&gt;
    &lt;h3 id=&quot;95dbd8e6364d429db7f040835d89e8e7&quot;&gt;
        Conclusion &lt;a href=&quot;#95dbd8e6364d429db7f040835d89e8e7&quot;&gt;#&lt;/a&gt;
    &lt;/h3&gt;
    &lt;p&gt;
        A Recawr Sandwich is a specialization of the slightly more general Impureim Sandwich pattern. It specializes by assigning roles to the two impure layers of the sandwich. In the first, the code reads data. In the second impure layer, it writes data. In between, it performs referentially transparent calculations.
    &lt;/p&gt;
    &lt;p&gt;
        While more constraining, this specialization offers a good rule of thumb. Most well-designed sandwiches follow this template.
    &lt;/p&gt;
&lt;/div&gt;&lt;hr&gt;
      This blog is totally free, but if you like it, please consider &lt;a href="https://blog.ploeh.dk/support"&gt;supporting it&lt;/a&gt;.</description>
        <author>Mark Seemann</author>
        <guid isPermaLink="false">https://blog.ploeh.dk/2025/01/13/recawr-sandwich</guid>
      </item>
    
      <item>
        <title>Encapsulating rod-cutting</title>
        <link>https://blog.ploeh.dk/2025/01/06/encapsulating-rod-cutting/</link>
        <pubDate>Mon, 06 Jan 2025 10:45:00 UTC</pubDate>
        <description>


&lt;div id=&quot;post&quot;&gt;
    &lt;p&gt;
        &lt;em&gt;Focusing on usage over implementation.&lt;/em&gt;
    &lt;/p&gt;
    &lt;p&gt;
        This article is a part of a small article series about &lt;a href=&quot;/2024/12/09/implementation-and-usage-mindsets&quot;&gt;implementation and usage mindsets&lt;/a&gt;. The hypothesis is that programmers who approach a problem with an implementation mindset may gravitate toward dynamically typed languages, whereas developers concerned with long-term maintenance and sustainability of a code base may be more inclined toward statically typed languages. This could be wrong, and is almost certainly too simplistic, but is still, I hope, worth thinking about. In the &lt;a href=&quot;/2024/12/23/implementing-rod-cutting&quot;&gt;previous article&lt;/a&gt; you saw examples of an implementation-centric approach to problem-solving. In this article, I&apos;ll discuss what a usage-first perspective entails.
    &lt;/p&gt;
    &lt;p&gt;
        A usage perspective indicates that you&apos;re first and foremost concerned with how useful a programming interface is. It&apos;s what you do when you take advantage of test-driven development (TDD). First, you write a test, which furnishes an example of what a usage scenario looks like. Only then do you figure out how to implement the desired API.
    &lt;/p&gt;
    &lt;p&gt;
        In this article I didn&apos;t use TDD since I already had a particular implementation. Even so, while I didn&apos;t mention it in the previous article, I did add tests to verify that the code works as intended. In fact, because I wrote a few &lt;a href=&quot;https://github.com/hedgehogqa/fsharp-hedgehog/&quot;&gt;Hedgehog&lt;/a&gt; properties, I have more than 10.000 test cases covering my implementation.
    &lt;/p&gt;
    &lt;p&gt;
        I bring this up because TDD is only one way to focus on sustainability and &lt;a href=&quot;/encapsulation-and-solid&quot;&gt;encapsulation&lt;/a&gt;. It&apos;s the most scientific methodology that I know of, but you can employ more ad-hoc, ex-post analysis processes. I&apos;ll do that here.
    &lt;/p&gt;
    &lt;h3 id=&quot;03ca7a9c8c8146b6b7f0c1275ae9abcc&quot;&gt;
        Imperative origin &lt;a href=&quot;#03ca7a9c8c8146b6b7f0c1275ae9abcc&quot;&gt;#&lt;/a&gt;
    &lt;/h3&gt;
    &lt;p&gt;
        In the &lt;a href=&quot;/2024/12/23/implementing-rod-cutting&quot;&gt;previous article&lt;/a&gt; you saw how the &lt;code&gt;Extended-Bottom-Up-Cut-Rod&lt;/code&gt; pseudocode was translated to this &lt;a href=&quot;https://fsharp.org/&quot;&gt;F#&lt;/a&gt; function:
    &lt;/p&gt;
    &lt;p&gt;
        &lt;pre&gt;&lt;span style=&quot;color:blue;&quot;&gt;let&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#74531f;&quot;&gt;cut&lt;/span&gt;&amp;nbsp;(&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;p&lt;/span&gt;&amp;nbsp;:&amp;nbsp;_&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;array&lt;/span&gt;)&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;n&lt;/span&gt;&amp;nbsp;=
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;let&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;r&lt;/span&gt;&amp;nbsp;=&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;Array&lt;/span&gt;.&lt;span style=&quot;color:#74531f;&quot;&gt;zeroCreate&lt;/span&gt;&amp;nbsp;(&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;n&lt;/span&gt;&amp;nbsp;+&amp;nbsp;1)
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;let&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;s&lt;/span&gt;&amp;nbsp;=&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;Array&lt;/span&gt;.&lt;span style=&quot;color:#74531f;&quot;&gt;zeroCreate&lt;/span&gt;&amp;nbsp;(&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;n&lt;/span&gt;&amp;nbsp;+&amp;nbsp;1)
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;r&lt;/span&gt;[0]&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;&amp;lt;-&lt;/span&gt;&amp;nbsp;0
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;for&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;j&lt;/span&gt;&amp;nbsp;=&amp;nbsp;1&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;to&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;n&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;do&lt;/span&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;let&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;mutable&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#a08000;&quot;&gt;q&lt;/span&gt;&amp;nbsp;=&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;Int32&lt;/span&gt;.MinValue
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;for&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;i&lt;/span&gt;&amp;nbsp;=&amp;nbsp;1&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;to&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;j&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;do&lt;/span&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;if&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#a08000;&quot;&gt;q&lt;/span&gt;&amp;nbsp;&amp;lt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;p&lt;/span&gt;[&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;i&lt;/span&gt;]&amp;nbsp;+&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;r&lt;/span&gt;[&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;j&lt;/span&gt;&amp;nbsp;-&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;i&lt;/span&gt;]&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;then&lt;/span&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:#a08000;&quot;&gt;q&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;&amp;lt;-&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;p&lt;/span&gt;[&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;i&lt;/span&gt;]&amp;nbsp;+&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;r&lt;/span&gt;[&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;j&lt;/span&gt;&amp;nbsp;-&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;i&lt;/span&gt;]
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;s&lt;/span&gt;[&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;j&lt;/span&gt;]&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;&amp;lt;-&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;i&lt;/span&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;r&lt;/span&gt;[&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;j&lt;/span&gt;]&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;&amp;lt;-&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#a08000;&quot;&gt;q&lt;/span&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;r&lt;/span&gt;,&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;s&lt;/span&gt;&lt;/pre&gt;
    &lt;/p&gt;
    &lt;p&gt;
        In case anyone is wondering: This is a bona-fide &lt;a href=&quot;https://en.wikipedia.org/wiki/Pure_function&quot;&gt;pure function&lt;/a&gt;, even if the implementation is as imperative as can be. Given the same input, &lt;code&gt;cut&lt;/code&gt; always returns the same output, and there are no side effects. We may wish to implement the function in a more &lt;a href=&quot;/2015/08/03/idiomatic-or-idiosyncratic&quot;&gt;idiomatic&lt;/a&gt; way, but that&apos;s not our first concern. &lt;em&gt;My&lt;/em&gt; first concern, at least, is to make sure that preconditions, invariants, and postconditions are properly communicated.
    &lt;/p&gt;
    &lt;p&gt;
        The same goal applies to the &lt;code&gt;printSolution&lt;/code&gt; action, also repeated here for your convenience.
    &lt;/p&gt;
    &lt;p&gt;
        &lt;pre&gt;&lt;span style=&quot;color:blue;&quot;&gt;let&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#74531f;&quot;&gt;printSolution&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;p&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;n&lt;/span&gt;&amp;nbsp;=
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;let&lt;/span&gt;&amp;nbsp;_,&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;s&lt;/span&gt;&amp;nbsp;=&amp;nbsp;&lt;span style=&quot;color:#74531f;&quot;&gt;cut&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;p&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;n&lt;/span&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;let&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;mutable&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#a08000;&quot;&gt;n&lt;/span&gt;&amp;nbsp;=&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;n&lt;/span&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;while&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#a08000;&quot;&gt;n&lt;/span&gt;&amp;nbsp;&amp;gt;&amp;nbsp;0&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;do&lt;/span&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:#74531f;&quot;&gt;printfn&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#a31515;&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#2b91af;&quot;&gt;%i&lt;/span&gt;&lt;span style=&quot;color:#a31515;&quot;&gt;&amp;quot;&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;s&lt;/span&gt;[&lt;span style=&quot;color:#a08000;&quot;&gt;n&lt;/span&gt;]
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:#a08000;&quot;&gt;n&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;&amp;lt;-&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#a08000;&quot;&gt;n&lt;/span&gt;&amp;nbsp;-&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;s&lt;/span&gt;[&lt;span style=&quot;color:#a08000;&quot;&gt;n&lt;/span&gt;]&lt;/pre&gt;
    &lt;/p&gt;
    &lt;p&gt;
        Not that I&apos;m not interested in more idiomatic implementations, but after all, they&apos;re &lt;em&gt;by definition&lt;/em&gt; just implementation details, so first, I&apos;ll discuss encapsulation. Or, if you will, the usage perspective.
    &lt;/p&gt;
    &lt;h3 id=&quot;bb978144e56743639e83448c9b1d4f01&quot;&gt;
        Names and types &lt;a href=&quot;#bb978144e56743639e83448c9b1d4f01&quot;&gt;#&lt;/a&gt;
    &lt;/h3&gt;
    &lt;p&gt;
        Based on the above two code snippets, we&apos;re given two artefacts: &lt;code&gt;cut&lt;/code&gt; and &lt;code&gt;printSolution&lt;/code&gt;. Since F# is a statically typed language, each operation also has a type.
    &lt;/p&gt;
    &lt;p&gt;
        The type of &lt;code&gt;cut&lt;/code&gt; is &lt;code&gt;int array -&amp;gt; int -&amp;gt; int array * int array&lt;/code&gt;. If you&apos;re not super-comfortable with F# type signatures, this means that &lt;code&gt;cut&lt;/code&gt; is a function that takes an integer array and an integer as inputs, and returns a tuple as output. The output tuple is a pair; that is, it contains two elements, and in this particular case, both elements have the same type: They are both integer arrays.
    &lt;/p&gt;
    &lt;p&gt;
        Likewise, the type of &lt;code&gt;printSolution&lt;/code&gt; is &lt;code&gt;int array -&amp;gt; int -&amp;gt; unit&lt;/code&gt;, which again indicates that inputs must be an integer array and an integer. In this case the output is &lt;code&gt;unit&lt;/code&gt;, which, in a sense, corresponds to &lt;code&gt;void&lt;/code&gt; in many &lt;a href=&quot;https://en.wikipedia.org/wiki/C_(programming_language)&quot;&gt;C&lt;/a&gt;-based languages.
    &lt;/p&gt;
    &lt;p&gt;
        Both operations belong to a module called &lt;code&gt;Rod&lt;/code&gt;, so their slightly longer, more formal names are &lt;code&gt;Rod.cut&lt;/code&gt; and &lt;code&gt;Rod.printSolution&lt;/code&gt;. Even so, &lt;a href=&quot;/2020/11/23/good-names-are-skin-deep&quot;&gt;good names are only skin-deep&lt;/a&gt;, and I&apos;m not even convinced that these are particularly good names. To be fair to myself, I adopted the names from the pseudocode from &lt;a href=&quot;/ref/clrs&quot;&gt;Introduction to Algorithms&lt;/a&gt;. Had I been freer to name function and design APIs, I might have chosen different names. As it is, currently, there&apos;s no documentation, so the types are the only source of additional information.
    &lt;/p&gt;
    &lt;p&gt;
        Can we infer proper usage from these types? Do they sufficiently well communicate preconditions, invariants, and postconditions? In other words, do the types satisfactorily indicate the &lt;em&gt;contract&lt;/em&gt; of each operation? Do the functions exhibit good &lt;a href=&quot;/encapsulation-and-solid&quot;&gt;encapsulation&lt;/a&gt;?
    &lt;/p&gt;
    &lt;p&gt;
        We may start with the &lt;code&gt;cut&lt;/code&gt; function. It takes as inputs an integer array and an integer. Are empty arrays allowed? Are all integers valid, or perhaps only natural numbers? What about zeroes? Are duplicates allowed? Does the array need to be sorted? Is there a relationship between the array and the integer? Can the single integer parameter be negative?
    &lt;/p&gt;
    &lt;p&gt;
        And what about the return value? Are the two integer arrays related in any way? Can one be empty, but the other large? Can they both be empty? May negative numbers or zeroes be present?
    &lt;/p&gt;
    &lt;p&gt;
        Similar questions apply to the &lt;code&gt;printSolution&lt;/code&gt; action.
    &lt;/p&gt;
    &lt;p&gt;
        &lt;a href=&quot;/2022/08/22/can-types-replace-validation&quot;&gt;Not all such questions can be answered by types&lt;/a&gt;, but since we already have a type system at our disposal, we might as well use it to address those questions that are easily modelled.
    &lt;/p&gt;
    &lt;h3 id=&quot;2a9f41707fb9425da8078a7181f6e7d6&quot;&gt;
        Encapsulating the relationship between price array and rod length &lt;a href=&quot;#2a9f41707fb9425da8078a7181f6e7d6&quot;&gt;#&lt;/a&gt;
    &lt;/h3&gt;
    &lt;p&gt;
        The first question I decided to answer was this: &lt;em&gt;Is there a relationship between the array and the integer?&lt;/em&gt;
    &lt;/p&gt;
    &lt;p&gt;
        The array, you may recall, is an array of prices. The integer is the length of the rod to cut up.
    &lt;/p&gt;
    &lt;p&gt;
        A relationship clearly exists. The length of the rod must not exceed the length of the array. If it does, &lt;code&gt;cut&lt;/code&gt; throws an &lt;a href=&quot;https://learn.microsoft.com/dotnet/api/system.indexoutofrangeexception&quot;&gt;IndexOutOfRangeException&lt;/a&gt;. We can&apos;t calculate the optimal cuts if we lack price information.
    &lt;/p&gt;
    &lt;p&gt;
        Likewise, we can already infer that the length must be a non-negative number.
    &lt;/p&gt;
    &lt;p&gt;
        While we could choose to enforce this relationship with Guard Clauses, we may also consider a simpler API. Let the function infer the rod length from the array length.
    &lt;/p&gt;
    &lt;p&gt;
        &lt;pre&gt;&lt;span style=&quot;color:blue;&quot;&gt;let&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#74531f;&quot;&gt;cut&lt;/span&gt;&amp;nbsp;(&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;p&lt;/span&gt;&amp;nbsp;:&amp;nbsp;_&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;array&lt;/span&gt;)&amp;nbsp;=
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;let&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;n&lt;/span&gt;&amp;nbsp;=&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;p&lt;/span&gt;.Length&amp;nbsp;-&amp;nbsp;1
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;let&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;r&lt;/span&gt;&amp;nbsp;=&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;Array&lt;/span&gt;.&lt;span style=&quot;color:#74531f;&quot;&gt;zeroCreate&lt;/span&gt;&amp;nbsp;(&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;n&lt;/span&gt;&amp;nbsp;+&amp;nbsp;1)
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;let&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;s&lt;/span&gt;&amp;nbsp;=&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;Array&lt;/span&gt;.&lt;span style=&quot;color:#74531f;&quot;&gt;zeroCreate&lt;/span&gt;&amp;nbsp;(&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;n&lt;/span&gt;&amp;nbsp;+&amp;nbsp;1)
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;r&lt;/span&gt;[0]&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;&amp;lt;-&lt;/span&gt;&amp;nbsp;0
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;for&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;j&lt;/span&gt;&amp;nbsp;=&amp;nbsp;1&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;to&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;n&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;do&lt;/span&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;let&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;mutable&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#a08000;&quot;&gt;q&lt;/span&gt;&amp;nbsp;=&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;Int32&lt;/span&gt;.MinValue
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;for&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;i&lt;/span&gt;&amp;nbsp;=&amp;nbsp;1&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;to&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;j&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;do&lt;/span&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;if&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#a08000;&quot;&gt;q&lt;/span&gt;&amp;nbsp;&amp;lt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;p&lt;/span&gt;[&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;i&lt;/span&gt;]&amp;nbsp;+&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;r&lt;/span&gt;[&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;j&lt;/span&gt;&amp;nbsp;-&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;i&lt;/span&gt;]&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;then&lt;/span&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:#a08000;&quot;&gt;q&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;&amp;lt;-&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;p&lt;/span&gt;[&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;i&lt;/span&gt;]&amp;nbsp;+&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;r&lt;/span&gt;[&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;j&lt;/span&gt;&amp;nbsp;-&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;i&lt;/span&gt;]
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;s&lt;/span&gt;[&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;j&lt;/span&gt;]&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;&amp;lt;-&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;i&lt;/span&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;r&lt;/span&gt;[&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;j&lt;/span&gt;]&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;&amp;lt;-&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#a08000;&quot;&gt;q&lt;/span&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;r&lt;/span&gt;,&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;s&lt;/span&gt;&lt;/pre&gt;
    &lt;/p&gt;
    &lt;p&gt;
        You may argue that this API is more implicit, which &lt;a href=&quot;https://peps.python.org/pep-0020/&quot;&gt;we generally don&apos;t like&lt;/a&gt;. The implication is that the rod length is determined by the array length. If you have a (one-indexed) price array of length &lt;em&gt;10&lt;/em&gt;, then how do you calculate the optimal cuts for a rod of length &lt;em&gt;7?&lt;/em&gt;
    &lt;/p&gt;
    &lt;p&gt;
        By shortening the price array:
    &lt;/p&gt;
    &lt;p&gt;
        &lt;pre&gt;&amp;gt; let p = [|0; 1; 5; 8; 9; 10; 17; 17; 20; 24; 30|];;
val p: int array = [|0; 1; 5; 8; 9; 10; 17; 17; 20; 24; 30|]

&amp;gt; cut (p |&amp;gt; Array.take (7 + 1));;
val it: int array * int array =
  ([|0; 1; 5; 8; 10; 13; 17; 18|], [|0; 1; 2; 3; 2; 2; 6; 1|])&lt;/pre&gt;
    &lt;/p&gt;
    &lt;p&gt;
        This is clearly still sub-optimal. Notice, for example, how you need to add &lt;code&gt;1&lt;/code&gt; to &lt;code&gt;7&lt;/code&gt; in order to deal with the prefixed &lt;code&gt;0&lt;/code&gt;. On the other hand, we&apos;re not done with the redesign, so it may be worth pursuing this course a little further.
    &lt;/p&gt;
    &lt;p&gt;
        (To be honest, while this is the direction I ultimately choose, I&apos;m not blind to the disadvantages of this implicit design. It makes it less clear to a client developer how to indicate a rod length. An alternative design would keep the price array and the rod length as two separate parameters, but then introduce a Guard Clause to check that the rod length doesn&apos;t exceed the length of the price array. Outside of &lt;a href=&quot;https://en.wikipedia.org/wiki/Dependent_type&quot;&gt;dependent types&lt;/a&gt; I can&apos;t think of a way to model such a relationship between two values, and I admit to having no practical experience with dependent types. All this said, however, it&apos;s also possible that I&apos;m missing an obvious design alternative. If you can think of a way to model this relationship in a non-&lt;a href=&quot;https://www.hillelwayne.com/post/constructive/&quot;&gt;predicative&lt;/a&gt; way, please &lt;a href=&quot;https://github.com/ploeh/ploeh.github.com?tab=readme-ov-file#comments&quot;&gt;write a comment&lt;/a&gt;.)
    &lt;/p&gt;
    &lt;p&gt;
        I gave the &lt;code&gt;printSolution&lt;/code&gt; the same treatment, after first having extracted a &lt;code&gt;solve&lt;/code&gt; function in order to &lt;a href=&quot;/2016/09/26/decoupling-decisions-from-effects&quot;&gt;separate decisions from effects&lt;/a&gt;.
    &lt;/p&gt;
    &lt;p&gt;
        &lt;pre&gt;&lt;span style=&quot;color:blue;&quot;&gt;let&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#74531f;&quot;&gt;solve&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;p&lt;/span&gt;&amp;nbsp;=
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;let&lt;/span&gt;&amp;nbsp;_,&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;s&lt;/span&gt;&amp;nbsp;=&amp;nbsp;&lt;span style=&quot;color:#74531f;&quot;&gt;cut&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;p&lt;/span&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;let&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;l&lt;/span&gt;&amp;nbsp;=&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;ResizeArray&lt;/span&gt;&amp;nbsp;()
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;let&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;mutable&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#a08000;&quot;&gt;n&lt;/span&gt;&amp;nbsp;=&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;p&lt;/span&gt;.Length&amp;nbsp;-&amp;nbsp;1
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;while&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#a08000;&quot;&gt;n&lt;/span&gt;&amp;nbsp;&amp;gt;&amp;nbsp;0&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;do&lt;/span&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;l&lt;/span&gt;.&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;Add&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;s&lt;/span&gt;[&lt;span style=&quot;color:#a08000;&quot;&gt;n&lt;/span&gt;]
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:#a08000;&quot;&gt;n&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;&amp;lt;-&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#a08000;&quot;&gt;n&lt;/span&gt;&amp;nbsp;-&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;s&lt;/span&gt;[&lt;span style=&quot;color:#a08000;&quot;&gt;n&lt;/span&gt;]
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;l&lt;/span&gt;&amp;nbsp;|&amp;gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;List&lt;/span&gt;.&lt;span style=&quot;color:#74531f;&quot;&gt;ofSeq&lt;/span&gt;
 
&lt;span style=&quot;color:blue;&quot;&gt;let&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#74531f;&quot;&gt;printSolution&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;p&lt;/span&gt;&amp;nbsp;=&amp;nbsp;&lt;span style=&quot;color:#74531f;&quot;&gt;solve&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;p&lt;/span&gt;&amp;nbsp;|&amp;gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;List&lt;/span&gt;.&lt;span style=&quot;color:#74531f;&quot;&gt;iter&lt;/span&gt;&amp;nbsp;(&lt;span style=&quot;color:#74531f;&quot;&gt;printfn&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#a31515;&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#2b91af;&quot;&gt;%i&lt;/span&gt;&lt;span style=&quot;color:#a31515;&quot;&gt;&amp;quot;&lt;/span&gt;)&lt;/pre&gt;
    &lt;/p&gt;
    &lt;p&gt;
        The &lt;em&gt;implementation&lt;/em&gt; of the &lt;code&gt;solve&lt;/code&gt; function is still imperative, but if you view it as a black box, it&apos;s &lt;a href=&quot;https://en.wikipedia.org/wiki/Referential_transparency&quot;&gt;referentially transparent&lt;/a&gt;. We&apos;ll get back to the implementation later.
    &lt;/p&gt;
    &lt;h3 id=&quot;01d4ef562a9d4552870ef093ae907f45&quot;&gt;
        Returning a list of cuts &lt;a href=&quot;#01d4ef562a9d4552870ef093ae907f45&quot;&gt;#&lt;/a&gt;
    &lt;/h3&gt;
    &lt;p&gt;
        Let&apos;s return to all the questions I enumerated above, particularly the questions about the return value. Are the two integer arrays related?
    &lt;/p&gt;
    &lt;p&gt;
        Indeed they are! In fact, they have the same length.
    &lt;/p&gt;
    &lt;p&gt;
        As explained in the &lt;a href=&quot;/2024/12/23/implementing-rod-cutting&quot;&gt;previous article&lt;/a&gt;, in the original pseudocode, the &lt;code&gt;r&lt;/code&gt; array is supposed to be zero-indexed, but non-empty and containing &lt;code&gt;0&lt;/code&gt; as the first element. The &lt;code&gt;s&lt;/code&gt; array is supposed to be one-indexed, and be exactly one element shorter than the &lt;code&gt;r&lt;/code&gt; array. In practice, in all three implementations shown in that article, I made both arrays zero-indexed, non-empty, and of the exact same length. This is also true for the F# implementation.
    &lt;/p&gt;
    &lt;p&gt;
        We can communicate this relationship much better to client developers by changing the return type of the &lt;code&gt;cut&lt;/code&gt; function. Currently, the return type is &lt;code&gt;int array * int array&lt;/code&gt;, indicating a pair of arrays. Instead, we can change the return type to an array of pairs, thereby indicating that the values are related two-and-two.
    &lt;/p&gt;
    &lt;p&gt;
        That would be a decent change, but we can further improve the API. A pair of integers are still implicit, because it isn&apos;t clear which integer represents the revenue and which one represents the size. Instead, we introduce a custom type with clear labels:
    &lt;/p&gt;
    &lt;p&gt;
        &lt;pre&gt;&lt;span style=&quot;color:blue;&quot;&gt;type&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;Cut&lt;/span&gt;&amp;nbsp;=&amp;nbsp;{&amp;nbsp;Revenue&amp;nbsp;:&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;int&lt;/span&gt;;&amp;nbsp;Size&amp;nbsp;:&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;int&lt;/span&gt;&amp;nbsp;}&lt;/pre&gt;
    &lt;/p&gt;
    &lt;p&gt;
        Then we change the &lt;code&gt;cut&lt;/code&gt; function to return a collection of &lt;code&gt;Cut&lt;/code&gt; values:
    &lt;/p&gt;
    &lt;p&gt;
        &lt;pre&gt;&lt;span style=&quot;color:blue;&quot;&gt;let&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#74531f;&quot;&gt;cut&lt;/span&gt;&amp;nbsp;(&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;p&lt;/span&gt;&amp;nbsp;:&amp;nbsp;_&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;array&lt;/span&gt;)&amp;nbsp;=
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;let&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;n&lt;/span&gt;&amp;nbsp;=&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;p&lt;/span&gt;.Length&amp;nbsp;-&amp;nbsp;1
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;let&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;r&lt;/span&gt;&amp;nbsp;=&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;Array&lt;/span&gt;.&lt;span style=&quot;color:#74531f;&quot;&gt;zeroCreate&lt;/span&gt;&amp;nbsp;(&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;n&lt;/span&gt;&amp;nbsp;+&amp;nbsp;1)
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;let&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;s&lt;/span&gt;&amp;nbsp;=&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;Array&lt;/span&gt;.&lt;span style=&quot;color:#74531f;&quot;&gt;zeroCreate&lt;/span&gt;&amp;nbsp;(&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;n&lt;/span&gt;&amp;nbsp;+&amp;nbsp;1)
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;r&lt;/span&gt;[0]&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;&amp;lt;-&lt;/span&gt;&amp;nbsp;0
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;for&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;j&lt;/span&gt;&amp;nbsp;=&amp;nbsp;1&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;to&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;n&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;do&lt;/span&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;let&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;mutable&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#a08000;&quot;&gt;q&lt;/span&gt;&amp;nbsp;=&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;Int32&lt;/span&gt;.MinValue
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;for&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;i&lt;/span&gt;&amp;nbsp;=&amp;nbsp;1&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;to&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;j&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;do&lt;/span&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;if&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#a08000;&quot;&gt;q&lt;/span&gt;&amp;nbsp;&amp;lt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;p&lt;/span&gt;[&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;i&lt;/span&gt;]&amp;nbsp;+&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;r&lt;/span&gt;[&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;j&lt;/span&gt;&amp;nbsp;-&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;i&lt;/span&gt;]&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;then&lt;/span&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:#a08000;&quot;&gt;q&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;&amp;lt;-&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;p&lt;/span&gt;[&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;i&lt;/span&gt;]&amp;nbsp;+&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;r&lt;/span&gt;[&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;j&lt;/span&gt;&amp;nbsp;-&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;i&lt;/span&gt;]
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;s&lt;/span&gt;[&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;j&lt;/span&gt;]&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;&amp;lt;-&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;i&lt;/span&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;r&lt;/span&gt;[&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;j&lt;/span&gt;]&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;&amp;lt;-&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#a08000;&quot;&gt;q&lt;/span&gt;
&amp;nbsp;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;let&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;result&lt;/span&gt;&amp;nbsp;=&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;ResizeArray&lt;/span&gt;&amp;nbsp;()
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;for&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;i&lt;/span&gt;&amp;nbsp;=&amp;nbsp;0&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;to&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;n&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;do&lt;/span&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;result&lt;/span&gt;.&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;Add&lt;/span&gt;&amp;nbsp;{&amp;nbsp;Revenue&amp;nbsp;=&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;r&lt;/span&gt;[&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;i&lt;/span&gt;];&amp;nbsp;Size&amp;nbsp;=&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;s&lt;/span&gt;[&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;i&lt;/span&gt;]&amp;nbsp;}
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;result&lt;/span&gt;&amp;nbsp;|&amp;gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;List&lt;/span&gt;.&lt;span style=&quot;color:#74531f;&quot;&gt;ofSeq&lt;/span&gt;&lt;/pre&gt;
    &lt;/p&gt;
    &lt;p&gt;
        The type of &lt;code&gt;cut&lt;/code&gt; is now &lt;code&gt;int array -&amp;gt; Cut list&lt;/code&gt;. Notice that I decided to return a linked list rather than an array. This is mostly because I consider linked lists to be more idiomatic than arrays in a context of functional programming (FP), but to be honest, I&apos;m not sure that it makes much difference as a return value.
    &lt;/p&gt;
    &lt;p&gt;
        In any case, you&apos;ll observe that the implementation is still imperative. The main topic of this article is how to give an API good encapsulation, so I treat the actual code as an implementation detail. It&apos;s not the most important thing.
    &lt;/p&gt;
    &lt;h3 id=&quot;8dca0872ab584d0ebefc10200877adde&quot;&gt;
        Linked list input &lt;a href=&quot;#8dca0872ab584d0ebefc10200877adde&quot;&gt;#&lt;/a&gt;
    &lt;/h3&gt;
    &lt;p&gt;
        Although I wrote that I&apos;m not sure it makes much difference whether &lt;code&gt;cut&lt;/code&gt; returns an array or a list, it does matter when it comes to input values. Currently, &lt;code&gt;cut&lt;/code&gt; takes an &lt;code&gt;int array&lt;/code&gt; as input.
    &lt;/p&gt;
    &lt;p&gt;
        As the implementation so amply demonstrates, F# arrays are mutable; you can mutate the cells of an array. A client developer may worry, then, whether &lt;code&gt;cut&lt;/code&gt; modifies the input array.
    &lt;/p&gt;
    &lt;p&gt;
        From the implementation code we know that it doesn&apos;t, but encapsulation is all about sparing client developers the burden of having to read the implementation. Rather, an API should communicate its contract in as succinct a way as possible, either via documentation or the type system.
    &lt;/p&gt;
    &lt;p&gt;
        In this case, we can use the type system to communicate this postcondition. Changing the input type to a linked list effectively communicates to all users of the API that &lt;code&gt;cut&lt;/code&gt; doesn&apos;t mutate the input. This is because F# linked lists are truly immutable.
    &lt;/p&gt;
    &lt;p&gt;
        &lt;pre&gt;&lt;span style=&quot;color:blue;&quot;&gt;let&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#74531f;&quot;&gt;cut&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;prices&lt;/span&gt;&amp;nbsp;=
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;let&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;p&lt;/span&gt;&amp;nbsp;=&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;prices&lt;/span&gt;&amp;nbsp;|&amp;gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;Array&lt;/span&gt;.&lt;span style=&quot;color:#74531f;&quot;&gt;ofList&lt;/span&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;let&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;n&lt;/span&gt;&amp;nbsp;=&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;p&lt;/span&gt;.Length&amp;nbsp;-&amp;nbsp;1
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;let&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;r&lt;/span&gt;&amp;nbsp;=&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;Array&lt;/span&gt;.&lt;span style=&quot;color:#74531f;&quot;&gt;zeroCreate&lt;/span&gt;&amp;nbsp;(&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;n&lt;/span&gt;&amp;nbsp;+&amp;nbsp;1)
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;let&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;s&lt;/span&gt;&amp;nbsp;=&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;Array&lt;/span&gt;.&lt;span style=&quot;color:#74531f;&quot;&gt;zeroCreate&lt;/span&gt;&amp;nbsp;(&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;n&lt;/span&gt;&amp;nbsp;+&amp;nbsp;1)
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;r&lt;/span&gt;[0]&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;&amp;lt;-&lt;/span&gt;&amp;nbsp;0
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;for&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;j&lt;/span&gt;&amp;nbsp;=&amp;nbsp;1&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;to&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;n&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;do&lt;/span&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;let&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;mutable&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#a08000;&quot;&gt;q&lt;/span&gt;&amp;nbsp;=&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;Int32&lt;/span&gt;.MinValue
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;for&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;i&lt;/span&gt;&amp;nbsp;=&amp;nbsp;1&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;to&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;j&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;do&lt;/span&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;if&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#a08000;&quot;&gt;q&lt;/span&gt;&amp;nbsp;&amp;lt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;p&lt;/span&gt;[&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;i&lt;/span&gt;]&amp;nbsp;+&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;r&lt;/span&gt;[&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;j&lt;/span&gt;&amp;nbsp;-&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;i&lt;/span&gt;]&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;then&lt;/span&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:#a08000;&quot;&gt;q&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;&amp;lt;-&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;p&lt;/span&gt;[&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;i&lt;/span&gt;]&amp;nbsp;+&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;r&lt;/span&gt;[&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;j&lt;/span&gt;&amp;nbsp;-&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;i&lt;/span&gt;]
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;s&lt;/span&gt;[&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;j&lt;/span&gt;]&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;&amp;lt;-&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;i&lt;/span&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;r&lt;/span&gt;[&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;j&lt;/span&gt;]&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;&amp;lt;-&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#a08000;&quot;&gt;q&lt;/span&gt;
&amp;nbsp;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;let&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;result&lt;/span&gt;&amp;nbsp;=&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;ResizeArray&lt;/span&gt;&amp;nbsp;()
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;for&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;i&lt;/span&gt;&amp;nbsp;=&amp;nbsp;0&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;to&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;n&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;do&lt;/span&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;result&lt;/span&gt;.&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;Add&lt;/span&gt;&amp;nbsp;{&amp;nbsp;Revenue&amp;nbsp;=&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;r&lt;/span&gt;[&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;i&lt;/span&gt;];&amp;nbsp;Size&amp;nbsp;=&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;s&lt;/span&gt;[&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;i&lt;/span&gt;]&amp;nbsp;}
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;result&lt;/span&gt;&amp;nbsp;|&amp;gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;List&lt;/span&gt;.&lt;span style=&quot;color:#74531f;&quot;&gt;ofSeq&lt;/span&gt;&lt;/pre&gt;
    &lt;/p&gt;
    &lt;p&gt;
        The type of the &lt;code&gt;cut&lt;/code&gt; function is now &lt;code&gt;int list -&amp;gt; Cut list&lt;/code&gt;, which informs client developers of an invariant. You can trust that &lt;code&gt;cut&lt;/code&gt; will not change the input arguments.
    &lt;/p&gt;
    &lt;h3 id=&quot;fe67c3b6121e4be780bc3d7f3b166a00&quot;&gt;
        Natural numbers &lt;a href=&quot;#fe67c3b6121e4be780bc3d7f3b166a00&quot;&gt;#&lt;/a&gt;
    &lt;/h3&gt;
    &lt;p&gt;
        You&apos;ve probably gotten the point by now, so let&apos;s move a bit quicker. There are still issues that we&apos;d like to document. Perhaps the worst part of the current API is that client code is required to supply a &lt;code&gt;prices&lt;/code&gt; list where the first element &lt;em&gt;must&lt;/em&gt; be zero. That&apos;s a very specific requirement. It&apos;s easy to forget, and if you do, the &lt;code&gt;cut&lt;/code&gt; function just silently fails. It doesn&apos;t throw an exception; it just gives you a wrong answer.
    &lt;/p&gt;
    &lt;p&gt;
        We may choose to add a Guard Clause, but why are we even putting that responsibility on the client developer? Why can&apos;t the &lt;code&gt;cut&lt;/code&gt; function add that prefix itself? It can, and it turns out that once you do that, and also remove the initial zero element from the output, you&apos;re now working with natural numbers.
    &lt;/p&gt;
    &lt;p&gt;
        First, add a &lt;code&gt;NaturalNumber&lt;/code&gt; wrapper of integers:
    &lt;/p&gt;
    &lt;p&gt;
        &lt;pre&gt;type&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;NaturalNumber&lt;/span&gt;&amp;nbsp;=&amp;nbsp;private&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;NaturalNumber&lt;/span&gt;&amp;nbsp;of&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;int&lt;/span&gt;&amp;nbsp;with
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;member&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;this&lt;/span&gt;.Value&amp;nbsp;=&amp;nbsp;let&amp;nbsp;(&lt;span style=&quot;color:#2b91af;&quot;&gt;NaturalNumber&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;i&lt;/span&gt;)&amp;nbsp;=&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;this&lt;/span&gt;&amp;nbsp;in&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;i&lt;/span&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;static&amp;nbsp;member&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;tryCreate&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;candidate&lt;/span&gt;&amp;nbsp;=
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;candidate&lt;/span&gt;&amp;nbsp;&amp;lt;&amp;nbsp;1&amp;nbsp;then&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;None&lt;/span&gt;&amp;nbsp;else&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;Some&lt;/span&gt;&amp;nbsp;&amp;lt;|&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;NaturalNumber&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;candidate&lt;/span&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;override&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;this&lt;/span&gt;.&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;ToString&lt;/span&gt;&amp;nbsp;()&amp;nbsp;=&amp;nbsp;let&amp;nbsp;(&lt;span style=&quot;color:#2b91af;&quot;&gt;NaturalNumber&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;i&lt;/span&gt;)&amp;nbsp;=&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;this&lt;/span&gt;&amp;nbsp;in&amp;nbsp;&lt;span style=&quot;color:#74531f;&quot;&gt;string&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;i&lt;/span&gt;&lt;/pre&gt;
    &lt;/p&gt;
    &lt;p&gt;
        Since the case constructor is &lt;code&gt;private&lt;/code&gt;, external code can only &lt;em&gt;try&lt;/em&gt; to create values. Once you have a &lt;code&gt;NaturalNumber&lt;/code&gt; value, you know that it&apos;s valid, but creation requires a run-time check. In other words, this is what Hillel Wayne calls &lt;a href=&quot;https://www.hillelwayne.com/post/constructive/&quot;&gt;predicative data&lt;/a&gt;.
    &lt;/p&gt;
    &lt;p&gt;
        Armed with this new type, however, we can now strengthen the definition of the &lt;code&gt;Cut&lt;/code&gt; record type:
    &lt;/p&gt;
    &lt;p&gt;
        &lt;pre&gt;&lt;span style=&quot;color:blue;&quot;&gt;type&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;Cut&lt;/span&gt;&amp;nbsp;=&amp;nbsp;{&amp;nbsp;Revenue&amp;nbsp;:&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;int&lt;/span&gt;;&amp;nbsp;Size&amp;nbsp;:&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;NaturalNumber&lt;/span&gt;&amp;nbsp;}&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;with&lt;/span&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;static&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;member&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;tryCreate&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;revenue&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;size&lt;/span&gt;&amp;nbsp;=
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;NaturalNumber&lt;/span&gt;.&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;tryCreate&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;size&lt;/span&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|&amp;gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;Option&lt;/span&gt;.&lt;span style=&quot;color:#74531f;&quot;&gt;map&lt;/span&gt;&amp;nbsp;(&lt;span style=&quot;color:blue;&quot;&gt;fun&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;size&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;-&amp;gt;&lt;/span&gt;&amp;nbsp;{&amp;nbsp;Revenue&amp;nbsp;=&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;revenue&lt;/span&gt;;&amp;nbsp;Size&amp;nbsp;=&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;size&lt;/span&gt;&amp;nbsp;})&lt;/pre&gt;
    &lt;/p&gt;
    &lt;p&gt;
        The &lt;code&gt;Revenue&lt;/code&gt; may still be any integer, because it turns out that the algorithm also works with negative prices. (For a book that&apos;s very meticulous in its analysis of algorithms, &lt;a href=&quot;/ref/clrs&quot;&gt;CLRS&lt;/a&gt; is surprisingly silent on this topic. Thorough testing with &lt;a href=&quot;https://github.com/hedgehogqa/fsharp-hedgehog&quot;&gt;Hedgehog&lt;/a&gt;, however, indicates that this is so.) On the other hand, the &lt;code&gt;Size&lt;/code&gt; of the &lt;code&gt;Cut&lt;/code&gt; must be a &lt;code&gt;NaturalNumber&lt;/code&gt;. Since, again, we don&apos;t have any constructive way (outside of using &lt;a href=&quot;https://en.wikipedia.org/wiki/Refinement_type&quot;&gt;refinement types&lt;/a&gt;) of modelling this requirement, we also supply a &lt;code&gt;tryCreate&lt;/code&gt; function.
    &lt;/p&gt;
    &lt;p&gt;
        This enables us to define the &lt;code&gt;cut&lt;/code&gt; function like this:
    &lt;/p&gt;
    &lt;p&gt;
        &lt;pre&gt;&lt;span style=&quot;color:blue;&quot;&gt;let&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#74531f;&quot;&gt;cut&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;prices&lt;/span&gt;&amp;nbsp;=
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;let&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;p&lt;/span&gt;&amp;nbsp;=&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;prices&lt;/span&gt;&amp;nbsp;|&amp;gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;List&lt;/span&gt;.&lt;span style=&quot;color:#74531f;&quot;&gt;append&lt;/span&gt;&amp;nbsp;[0]&amp;nbsp;|&amp;gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;Array&lt;/span&gt;.&lt;span style=&quot;color:#74531f;&quot;&gt;ofList&lt;/span&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;let&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;n&lt;/span&gt;&amp;nbsp;=&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;p&lt;/span&gt;.Length&amp;nbsp;-&amp;nbsp;1
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;let&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;r&lt;/span&gt;&amp;nbsp;=&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;Array&lt;/span&gt;.&lt;span style=&quot;color:#74531f;&quot;&gt;zeroCreate&lt;/span&gt;&amp;nbsp;(&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;n&lt;/span&gt;&amp;nbsp;+&amp;nbsp;1)
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;let&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;s&lt;/span&gt;&amp;nbsp;=&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;Array&lt;/span&gt;.&lt;span style=&quot;color:#74531f;&quot;&gt;zeroCreate&lt;/span&gt;&amp;nbsp;(&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;n&lt;/span&gt;&amp;nbsp;+&amp;nbsp;1)
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;r&lt;/span&gt;[0]&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;&amp;lt;-&lt;/span&gt;&amp;nbsp;0
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;for&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;j&lt;/span&gt;&amp;nbsp;=&amp;nbsp;1&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;to&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;n&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;do&lt;/span&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;let&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;mutable&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#a08000;&quot;&gt;q&lt;/span&gt;&amp;nbsp;=&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;Int32&lt;/span&gt;.MinValue
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;for&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;i&lt;/span&gt;&amp;nbsp;=&amp;nbsp;1&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;to&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;j&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;do&lt;/span&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;if&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#a08000;&quot;&gt;q&lt;/span&gt;&amp;nbsp;&amp;lt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;p&lt;/span&gt;[&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;i&lt;/span&gt;]&amp;nbsp;+&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;r&lt;/span&gt;[&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;j&lt;/span&gt;&amp;nbsp;-&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;i&lt;/span&gt;]&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;then&lt;/span&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:#a08000;&quot;&gt;q&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;&amp;lt;-&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;p&lt;/span&gt;[&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;i&lt;/span&gt;]&amp;nbsp;+&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;r&lt;/span&gt;[&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;j&lt;/span&gt;&amp;nbsp;-&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;i&lt;/span&gt;]
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;s&lt;/span&gt;[&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;j&lt;/span&gt;]&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;&amp;lt;-&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;i&lt;/span&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;r&lt;/span&gt;[&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;j&lt;/span&gt;]&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;&amp;lt;-&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#a08000;&quot;&gt;q&lt;/span&gt;
&amp;nbsp;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;let&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;result&lt;/span&gt;&amp;nbsp;=&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;ResizeArray&lt;/span&gt;&amp;nbsp;()
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;for&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;i&lt;/span&gt;&amp;nbsp;=&amp;nbsp;1&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;to&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;n&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;do&lt;/span&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;Cut&lt;/span&gt;.&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;tryCreate&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;r&lt;/span&gt;[&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;i&lt;/span&gt;]&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;s&lt;/span&gt;[&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;i&lt;/span&gt;]&amp;nbsp;|&amp;gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;Option&lt;/span&gt;.&lt;span style=&quot;color:#74531f;&quot;&gt;iter&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;result&lt;/span&gt;.&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;Add&lt;/span&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;result&lt;/span&gt;&amp;nbsp;|&amp;gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;List&lt;/span&gt;.&lt;span style=&quot;color:#74531f;&quot;&gt;ofSeq&lt;/span&gt;&lt;/pre&gt;
    &lt;/p&gt;
    &lt;p&gt;
        It still has the type &lt;code&gt;int list -&amp;gt; Cut list&lt;/code&gt;, but the &lt;code&gt;Cut&lt;/code&gt; type is now more restrictively designed. In other words, we&apos;ve provided a more conservative definition of what we return, in keeping with &lt;a href=&quot;https://en.wikipedia.org/wiki/Robustness_principle&quot;&gt;Postel&apos;s law&lt;/a&gt;.
    &lt;/p&gt;
    &lt;p&gt;
        Furthermore, notice that the first line prepends &lt;code&gt;0&lt;/code&gt; to the &lt;code&gt;p&lt;/code&gt; array, so that the client developer doesn&apos;t have to do that. Likewise, when returning the result, the &lt;code&gt;for&lt;/code&gt; loop goes from &lt;code&gt;1&lt;/code&gt; to &lt;code&gt;n&lt;/code&gt;, which means that it omits the first zero cut.
    &lt;/p&gt;
    &lt;p&gt;
        These changes ripple through and also improves encapsulation of the &lt;code&gt;solve&lt;/code&gt; function:
    &lt;/p&gt;
    &lt;p&gt;
        &lt;pre&gt;&lt;span style=&quot;color:blue;&quot;&gt;let&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#74531f;&quot;&gt;solve&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;prices&lt;/span&gt;&amp;nbsp;=
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;let&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;cuts&lt;/span&gt;&amp;nbsp;=&amp;nbsp;&lt;span style=&quot;color:#74531f;&quot;&gt;cut&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;prices&lt;/span&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;let&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;l&lt;/span&gt;&amp;nbsp;=&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;ResizeArray&lt;/span&gt;&amp;nbsp;()
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;let&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;mutable&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#a08000;&quot;&gt;n&lt;/span&gt;&amp;nbsp;=&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;prices&lt;/span&gt;.Length
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;while&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#a08000;&quot;&gt;n&lt;/span&gt;&amp;nbsp;&amp;gt;&amp;nbsp;0&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;do&lt;/span&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;let&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;idx&lt;/span&gt;&amp;nbsp;=&amp;nbsp;&lt;span style=&quot;color:#a08000;&quot;&gt;n&lt;/span&gt;&amp;nbsp;-&amp;nbsp;1
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;let&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;s&lt;/span&gt;&amp;nbsp;=&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;cuts&lt;/span&gt;.[&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;idx&lt;/span&gt;].Size
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;l&lt;/span&gt;.&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;Add&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;s&lt;/span&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:#a08000;&quot;&gt;n&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;&amp;lt;-&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#a08000;&quot;&gt;n&lt;/span&gt;&amp;nbsp;-&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;s&lt;/span&gt;.Value
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;l&lt;/span&gt;&amp;nbsp;|&amp;gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;List&lt;/span&gt;.&lt;span style=&quot;color:#74531f;&quot;&gt;ofSeq&lt;/span&gt;&lt;/pre&gt;
    &lt;/p&gt;
    &lt;p&gt;
        The type of &lt;code&gt;solve&lt;/code&gt; is now &lt;code&gt;int list -&amp;gt; NaturalNumber list&lt;/code&gt;.
    &lt;/p&gt;
    &lt;p&gt;
        This is about as strong as I can think of making the API using F#&apos;s type system. A type like &lt;code&gt;int list -&amp;gt; NaturalNumber list&lt;/code&gt; tells you something about what you&apos;re allowed to do, what you&apos;re expected to do, and what you can expect in return. You can provide (almost) any list of integers, both positive, zero, or negative. You may also give an empty list. If we had wanted to prevent that, we could have used a &lt;code&gt;NonEmpty&lt;/code&gt; list, as seen (among other places) in the article &lt;a href=&quot;/2024/05/06/conservative-codomain-conjecture&quot;&gt;Conservative codomain conjecture&lt;/a&gt;.
    &lt;/p&gt;
    &lt;p&gt;
        Okay, to be perfectly honest, there&apos;s one more change that might be in order, but this is where I ran out of steam.  One remaining precondition that I haven&apos;t yet discussed is that the input list must not contain &apos;too big&apos; numbers. The problem is that the algorithm adds numbers together, and since 32-bit integers are bounded, you could run into overflow situations. Ask me how I know.
    &lt;/p&gt;
    &lt;p&gt;
        Changing the types to use 64-bit integers doesn&apos;t solve that problem (it only moves the boundary of where overflow happens), but consistently changing the API to work with &lt;a href=&quot;https://learn.microsoft.com/dotnet/api/system.numerics.biginteger&quot;&gt;BigInteger&lt;/a&gt; values might. To be honest, I haven&apos;t tried.
    &lt;/p&gt;
    &lt;h3 id=&quot;641bc16e730542a1a4a231886d208f24&quot;&gt;
        Functional programming &lt;a href=&quot;#641bc16e730542a1a4a231886d208f24&quot;&gt;#&lt;/a&gt;
    &lt;/h3&gt;
    &lt;p&gt;
        From an encapsulation perspective, we&apos;re done now. By using the type system, we&apos;ve emphasized how to &lt;em&gt;use&lt;/em&gt; the API, rather than how it&apos;s implemented. Along the way, we even hid away some warts that came with the implementation. If I wanted to take this further, I would seriously consider making the &lt;code&gt;cut&lt;/code&gt; function a &lt;code&gt;private&lt;/code&gt; helper function, because it doesn&apos;t really return a solution. It only returns an intermediary value that makes it easier for the &lt;code&gt;solve&lt;/code&gt; function to return the actual solution.
    &lt;/p&gt;
    &lt;p&gt;
        If you&apos;re even just a little bit familiar with F# or functional programming, you may have found it painful to read this far. &lt;em&gt;All that imperative code. My eyes! For the love of God, please rewrite the implementation with proper FP idioms and patterns.&lt;/em&gt;
    &lt;/p&gt;
    &lt;p&gt;
        Well, the point of the whole article is that the implementation doesn&apos;t really matter. It&apos;s how client code may &lt;em&gt;use&lt;/em&gt; the API that&apos;s important.
    &lt;/p&gt;
    &lt;p&gt;
        That is, of course, until you have to go and change the implementation code. In any case, as a little consolation prize for those brave FP readers who&apos;ve made it all this way, here follows more functional implementations of the functions.
    &lt;/p&gt;
    &lt;p&gt;
        The &lt;code&gt;NaturalNumber&lt;/code&gt; and &lt;code&gt;Cut&lt;/code&gt; types haven&apos;t changed, so the first change comes with the &lt;code&gt;cut&lt;/code&gt; function:
    &lt;/p&gt;
    &lt;p&gt;
        &lt;pre&gt;&lt;span style=&quot;color:blue;&quot;&gt;let&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;private&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#74531f;&quot;&gt;cons&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;x&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;xs&lt;/span&gt;&amp;nbsp;=&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;x&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;::&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;xs&lt;/span&gt;
 
&lt;span style=&quot;color:blue;&quot;&gt;let&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#74531f;&quot;&gt;cut&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;prices&lt;/span&gt;&amp;nbsp;=
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;let&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;p&lt;/span&gt;&amp;nbsp;=&amp;nbsp;0&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;::&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;prices&lt;/span&gt;&amp;nbsp;|&amp;gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;Array&lt;/span&gt;.&lt;span style=&quot;color:#74531f;&quot;&gt;ofList&lt;/span&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;let&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;n&lt;/span&gt;&amp;nbsp;=&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;p&lt;/span&gt;.Length&amp;nbsp;-&amp;nbsp;1
 
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;let&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#74531f;&quot;&gt;findBestCut&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;revenues&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;j&lt;/span&gt;&amp;nbsp;=
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[1..&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;j&lt;/span&gt;]
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|&amp;gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;List&lt;/span&gt;.&lt;span style=&quot;color:#74531f;&quot;&gt;map&lt;/span&gt;&amp;nbsp;(&lt;span style=&quot;color:blue;&quot;&gt;fun&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;i&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;-&amp;gt;&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;p&lt;/span&gt;[&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;i&lt;/span&gt;]&amp;nbsp;+&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;Map&lt;/span&gt;.&lt;span style=&quot;color:#74531f;&quot;&gt;find&lt;/span&gt;&amp;nbsp;(&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;j&lt;/span&gt;&amp;nbsp;-&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;i&lt;/span&gt;)&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;revenues&lt;/span&gt;,&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;i&lt;/span&gt;)
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|&amp;gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;List&lt;/span&gt;.&lt;span style=&quot;color:#74531f;&quot;&gt;maxBy&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#74531f;&quot;&gt;fst&lt;/span&gt;
 
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;let&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#74531f;&quot;&gt;aggregate&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;acc&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;j&lt;/span&gt;&amp;nbsp;=
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;let&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;revenues&lt;/span&gt;&amp;nbsp;=&amp;nbsp;&lt;span style=&quot;color:#74531f;&quot;&gt;snd&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;acc&lt;/span&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;let&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;q&lt;/span&gt;,&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;i&lt;/span&gt;&amp;nbsp;=&amp;nbsp;&lt;span style=&quot;color:#74531f;&quot;&gt;findBestCut&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;revenues&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;j&lt;/span&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;let&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#74531f;&quot;&gt;cuts&lt;/span&gt;&amp;nbsp;=&amp;nbsp;&lt;span style=&quot;color:#74531f;&quot;&gt;fst&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;acc&lt;/span&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:#74531f;&quot;&gt;cuts&lt;/span&gt;&amp;nbsp;&amp;lt;&amp;lt;&amp;nbsp;(&lt;span style=&quot;color:#74531f;&quot;&gt;cons&lt;/span&gt;&amp;nbsp;(&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;q&lt;/span&gt;,&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;i&lt;/span&gt;)),&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;Map&lt;/span&gt;.&lt;span style=&quot;color:#74531f;&quot;&gt;add&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;revenues&lt;/span&gt;.Count&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;q&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;revenues&lt;/span&gt;
 
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[1..&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;n&lt;/span&gt;]
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|&amp;gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;List&lt;/span&gt;.&lt;span style=&quot;color:#74531f;&quot;&gt;fold&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#74531f;&quot;&gt;aggregate&lt;/span&gt;&amp;nbsp;(&lt;span style=&quot;color:#74531f;&quot;&gt;id&lt;/span&gt;,&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;Map&lt;/span&gt;.&lt;span style=&quot;color:#74531f;&quot;&gt;add&lt;/span&gt;&amp;nbsp;0&amp;nbsp;0&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;Map&lt;/span&gt;.empty)
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|&amp;gt;&amp;nbsp;&lt;span style=&quot;color:#74531f;&quot;&gt;fst&lt;/span&gt;&amp;nbsp;&amp;lt;|&amp;nbsp;[]&amp;nbsp;&lt;span style=&quot;color:green;&quot;&gt;//&amp;nbsp;Evaluate&amp;nbsp;Hughes&amp;nbsp;list&lt;/span&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|&amp;gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;List&lt;/span&gt;.&lt;span style=&quot;color:#74531f;&quot;&gt;choose&lt;/span&gt;&amp;nbsp;(&lt;span style=&quot;color:blue;&quot;&gt;fun&lt;/span&gt;&amp;nbsp;(&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;r&lt;/span&gt;,&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;i&lt;/span&gt;)&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;-&amp;gt;&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;Cut&lt;/span&gt;.&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;tryCreate&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;r&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;i&lt;/span&gt;)&lt;/pre&gt;
    &lt;/p&gt;
    &lt;p&gt;
        Even here, however, some implementation choices are dubious at best. For instance, I decided to use a Hughes list or difference list (see &lt;a href=&quot;/2015/12/22/tail-recurse&quot;&gt;Tail Recurse&lt;/a&gt; for a detailed explanation of how this works in F#) without measuring whether or not it was better than just using normal &lt;em&gt;list consing&lt;/em&gt; followed by &lt;code&gt;List.rev&lt;/code&gt; (which is, in fact, often faster). That&apos;s one of the advantages of writing code for articles; such things don&apos;t really matter that much in that context.
    &lt;/p&gt;
    &lt;p&gt;
        Another choice that may leave you scratching your head is that I decided to model the &lt;code&gt;revenues&lt;/code&gt; as a map (that is, an immutable dictionary) rather than an array. I did this because I was concerned that with the move towards immutable code, I&apos;d have &lt;code&gt;n&lt;/code&gt; reallocations of arrays. Perhaps, I thought, adding incrementally to a &lt;code&gt;Map&lt;/code&gt; structure would be more efficient.
    &lt;/p&gt;
    &lt;p&gt;
        But really, all of that is just wanking, because I haven&apos;t measured.
    &lt;/p&gt;
    &lt;p&gt;
        The FP-style implementation of &lt;code&gt;solve&lt;/code&gt; is, I believe, less controversial:
    &lt;/p&gt;
    &lt;p&gt;
        &lt;pre&gt;&lt;span style=&quot;color:blue;&quot;&gt;let&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#74531f;&quot;&gt;solve&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;prices&lt;/span&gt;&amp;nbsp;=
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;let&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;cuts&lt;/span&gt;&amp;nbsp;=&amp;nbsp;&lt;span style=&quot;color:#74531f;&quot;&gt;cut&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;prices&lt;/span&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;let&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;rec&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#74531f;&quot;&gt;imp&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;n&lt;/span&gt;&amp;nbsp;=
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;if&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;n&lt;/span&gt;&amp;nbsp;&amp;lt;=&amp;nbsp;0&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;then&lt;/span&gt;&amp;nbsp;[]&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;else&lt;/span&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;let&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;idx&lt;/span&gt;&amp;nbsp;=&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;n&lt;/span&gt;&amp;nbsp;-&amp;nbsp;1
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;let&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;s&lt;/span&gt;&amp;nbsp;=&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;cuts&lt;/span&gt;[&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;idx&lt;/span&gt;].Size
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;s&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;::&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#74531f;&quot;&gt;imp&lt;/span&gt;&amp;nbsp;(&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;n&lt;/span&gt;&amp;nbsp;-&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;s&lt;/span&gt;.Value)
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:#74531f;&quot;&gt;imp&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;prices&lt;/span&gt;.Length&lt;/pre&gt;
    &lt;/p&gt;
    &lt;p&gt;
        This is a fairly standard implementation using a local recursive helper function.
    &lt;/p&gt;
    &lt;p&gt;
        Both &lt;code&gt;cut&lt;/code&gt; and &lt;code&gt;solve&lt;/code&gt; have the types previously reported. In other words, this final refactoring to functional implementations didn&apos;t change their types.
    &lt;/p&gt;
    &lt;h3 id=&quot;c009b6e42470466c9556f52a7c5af175&quot;&gt;
        Conclusion &lt;a href=&quot;#c009b6e42470466c9556f52a7c5af175&quot;&gt;#&lt;/a&gt;
    &lt;/h3&gt;
    &lt;p&gt;
        This article goes through a series of code improvements to illustrate how a static type system can make it easier to use an API. Use it &lt;em&gt;correctly&lt;/em&gt;, that is.
    &lt;/p&gt;
    &lt;p&gt;
        There&apos;s a common misconception about ease of use that it implies typing fewer characters, or getting instant &lt;a href=&quot;/2024/05/13/gratification&quot;&gt;gratification&lt;/a&gt;. That&apos;s not my position. &lt;a href=&quot;/2018/09/17/typing-is-not-a-programming-bottleneck&quot;&gt;Typing is not a bottleneck&lt;/a&gt;, and in any case, not much is gained if you make it easier for client developers to get the wrong answers from your API.
    &lt;/p&gt;
    &lt;p&gt;
        Static types gives you a consistent vocabulary you can use to communicate an API&apos;s contract to client developers. What must client code do in order to make a valid method or function call? What guarantees can client code rely on? &lt;a href=&quot;/encapsulation-and-solid&quot;&gt;Encapsulation&lt;/a&gt;, in other words.
    &lt;/p&gt;
    &lt;ins datetime=&quot;2025-01-20&quot;&gt;
        &lt;p&gt;
            &lt;strong&gt;P.S. 2025-01-20:&lt;/strong&gt;
        &lt;/p&gt;
        &lt;p&gt;
            For a type-level technique for modelling the relationship between rod size and price list, see &lt;a href=&quot;/2025/01/20/modelling-data-relationships-with-f-types&quot;&gt;Modelling data relationships with F# types&lt;/a&gt;.
        &lt;/p&gt;
    &lt;/ins&gt;
&lt;/div&gt;
&lt;hr&gt;
      This blog is totally free, but if you like it, please consider &lt;a href="https://blog.ploeh.dk/support"&gt;supporting it&lt;/a&gt;.</description>
        <author>Mark Seemann</author>
        <guid isPermaLink="false">https://blog.ploeh.dk/2025/01/06/encapsulating-rod-cutting</guid>
      </item>
    

  </channel>
</rss>
