<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Ardalis RSS Feed]]></title><description><![CDATA[Steve is an experienced software architect and trainer, focusing currently on ASP.NET Core and Domain-Driven Design.]]></description><link>https://ardalis.com</link><generator>GatsbyJS</generator><lastBuildDate>Thu, 13 Mar 2025 13:55:13 GMT</lastBuildDate><item><title><![CDATA[Ardalis Specification v9 Released]]></title><description><![CDATA[A new major version of the Ardalis Specification library has been released. This library is used to create and compose specifications for‚Ä¶]]></description><link>https://ardalis.com/ardalis-specification-v9-release/</link><guid isPermaLink="false">https://ardalis.com/ardalis-specification-v9-release/</guid><pubDate>Thu, 13 Mar 2025 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;A new major version of the Ardalis Specification library has been released. This library is used to create and compose specifications for querying data from repositories. It&apos;s a key part of the Ardalis Clean Architecture libraries and is used in many applications to help simplify querying logic and make it more testable. If your application suffers from LINQ pollution, with query logic spread through every part of it, this library may help.&lt;/p&gt;
&lt;p&gt;Note that 99% of this effort was done by &lt;a href=&quot;https://github.com/fiseni&quot;&gt;Fati Iseni&lt;/a&gt;, who has been doing a great job maintaining and improving this library. I&apos;m grateful for his contributions and leadership on this project.&lt;/p&gt;
&lt;h2&gt;What&apos;s New in v9&lt;/h2&gt;
&lt;p&gt;The v9 release of the Ardalis Specification library includes several new features and improvements. This &lt;a href=&quot;https://github.com/ardalis/Specification/issues/427&quot;&gt;issue serves as the full release notes&lt;/a&gt;. Here are some of the highlights:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Reduce memory footprint&lt;/li&gt;
&lt;li&gt;Update TFMs to latest (dropping net6, net7; adding net8, net9)&lt;/li&gt;
&lt;li&gt;Remove unused &lt;code class=&quot;language-text&quot;&gt;IEntity&lt;/code&gt; interface&lt;/li&gt;
&lt;li&gt;Make Take/Skip non-nullable (reduces memory)&lt;/li&gt;
&lt;li&gt;Remove internal state for Evaluator/Validator (reduces memory)&lt;/li&gt;
&lt;li&gt;Remove internal state for Query builder (reduces memory)&lt;/li&gt;
&lt;li&gt;Improve C# implementation of SQL &lt;code class=&quot;language-text&quot;&gt;LIKE&lt;/code&gt; operator&lt;/li&gt;
&lt;li&gt;Improve in-memory search&lt;/li&gt;
&lt;li&gt;Search validator refactored to zero allocations (reduces memory)&lt;/li&gt;
&lt;li&gt;Improve search EF evaluator (reduces memory)&lt;/li&gt;
&lt;li&gt;Refactor Include evaluator and add caching&lt;/li&gt;
&lt;li&gt;Reduce expression construct size (reduces memory)&lt;/li&gt;
&lt;li&gt;Remove obsolete APIs&lt;/li&gt;
&lt;li&gt;Add TagWith feature&lt;/li&gt;
&lt;li&gt;Add EF IgnoreAutoIncludes feature&lt;/li&gt;
&lt;li&gt;Fix EnableCache key generator to drop trailing hyphen&lt;/li&gt;
&lt;li&gt;Return rows affected from &lt;code class=&quot;language-text&quot;&gt;Update&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;Delete&lt;/code&gt; methods on sample repository implementation&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Breaking Changes&lt;/h2&gt;
&lt;p&gt;There are a number of small breaking changes in the list above. If you relied on obsolete methods or some of the removed types like &lt;code class=&quot;language-text&quot;&gt;IEntity&lt;/code&gt; you will need to make minor adjustments (and perhaps define your own &lt;code class=&quot;language-text&quot;&gt;IEntity&lt;/code&gt; interface). However for the most part, your existing Specification types will continue to work as they did before.&lt;/p&gt;
&lt;h2&gt;How to Get It&lt;/h2&gt;
&lt;p&gt;You can get the latest version of the Ardalis Specification library from NuGet. The package is named &lt;code class=&quot;language-text&quot;&gt;Ardalis.Specification&lt;/code&gt; and you can install it using the following command:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;dotnet add package Ardalis.Specification&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Learn More&lt;/h2&gt;
&lt;p&gt;You can see full examples that make use of specifications in the following open source projects:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/nimblepros/eshoponweb&quot;&gt;eShopOnWeb&lt;/a&gt; (MS reference architecture)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ardalis/CleanArchitecture&quot;&gt;CleanArchitecture&lt;/a&gt; (see sample folder as well)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Be sure to give the package a star and follow it if you want additional updates. And if you have any issues or feature requests, please open an issue on the GitHub repository.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[2024 Year In Review]]></title><description><![CDATA[Better late than never, as I'm writing this in late February 2025... First, here's a few links to past years in review: My 2017 Year in‚Ä¶]]></description><link>https://ardalis.com/2024-year-in-review/</link><guid isPermaLink="false">https://ardalis.com/2024-year-in-review/</guid><pubDate>Wed, 26 Feb 2025 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Better late than never, as I&apos;m writing this in late February 2025...&lt;/p&gt;
&lt;p&gt;First, here&apos;s a few links to past years in review:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://ardalis.com/2017-in-review&quot;&gt;My 2017 Year in Review&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://ardalis.com/2018-year-in-review&quot;&gt;My 2018 Year in Review&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://ardalis.com/2019-year-in-review&quot;&gt;My 2019 Year in Review&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://ardalis.com/2020-year-in-review&quot;&gt;My 2020 Year in Review&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://ardalis.com/2021-year-in-review&quot;&gt;My 2021 Year in Review&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://ardalis.com/2022-year-in-review&quot;&gt;My 2022 Year in Review&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://ardalis.com/2023-year-in-review&quot;&gt;My 2022 Year in Review&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://ardalis.com/year-in-review-post-checklist&quot;&gt;My Year in Review Post Checklist&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now on to the various categories...&lt;/p&gt;
&lt;h2&gt;Blogging ‚úçÔ∏è&lt;/h2&gt;
&lt;p&gt;Blogging continues its slide into obscurity. In 2024 I had just 18 new articles, which is down from 20 in 2023. I think part of the reason for this is that I&apos;ve been focusing more on video content. I also tend to get more immediate feedback on video content, even though it&apos;s more effort to create, and there are vanity metrics like YouTube subscribers which offer more of a dopamine hit than page views on a blog. In 2023 I had 20 articles so this is a slight decrease.&lt;/p&gt;
&lt;p&gt;In 2025 I think I&apos;ll keep my goal pretty modest and aim for 1-2 new articles per month. I&apos;m already behind, but hopefully I&apos;ll be able to hit the 12-24 range. Last year my goal as only 12 for the year, which I did hit, so yay for that I guess. üòÅ&lt;/p&gt;
&lt;h3&gt;Google Analytics üìà&lt;/h3&gt;
&lt;p&gt;I very rarely even look at Google Analytics for my blog anymore. Probably the last time I did so was when I was writing my 2023 year in review post.&lt;/p&gt;
&lt;p&gt;In 2023 I had about 645k page views for ardalis.com.
In 2024 I had about 535k page views, so a drop of about 17%.&lt;/p&gt;
&lt;p&gt;That&apos;s continuing a downward trend. I had about 750k page views in 2022, and 842k in 2021. Probably if I posted more often, I&apos;d get more views...&lt;/p&gt;
&lt;p&gt;I did have two obvious spikes on my traffic graph, which correspond to two popular articles: &lt;a href=&quot;/from-microservices-to-modular-monoliths/&quot;&gt;From Microservices to Modular Monoliths&lt;/a&gt; and &lt;a href=&quot;/avoid-using-csharp-events-in-aspnetcore-apps/&quot;&gt;Avoid Using C# Events in ASP.NET Core Apps&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/2024-blog-traffic.png&quot; alt=&quot;2024 Traffic&quot;&gt;&lt;/p&gt;
&lt;h3&gt;Most Popular Articles ‚≠ê&lt;/h3&gt;
&lt;p&gt;Naturally those two were among my most popular articles. Here&apos;s the top 10 list for the year:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;/attempt-made-to-access-socket/&quot;&gt;Solved - An attempt was made to access a socket in a way forbidden&lt;/a&gt; (29k views UP from 16k in 2023)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://ardalis.com/the-more-you-know-the-more-you-realize-you-dont-know&quot;&gt;The More You Know The More You Realize You Don&apos;t Know&lt;/a&gt; (21k views)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/from-microservices-to-modular-monoliths/&quot;&gt;From Microservices to Modular Monoliths&lt;/a&gt; (19k views)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/avoid-using-csharp-events-in-aspnetcore-apps/&quot;&gt;Avoid Using C# Events in ASP.NET Core Apps&lt;/a&gt; (14k views)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://ardalis.com/clean-architecture-sucks/&quot;&gt;Clean Architecture Sucks&lt;/a&gt; (12k views)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://ardalis.com/force-nuget-to-reinstall-packages-without-updating&quot;&gt;Force Nuget to Reinstall Packages Without Updating&lt;/a&gt; (12k views)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://ardalis.com/stop-debugging-start-running-visual-studio/&quot;&gt;Stop Debugging and Start Running in Visual Studio&lt;/a&gt; (10k views)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://ardalis.com/log-request-headers-middleware/&quot;&gt;Log Request Headers Middleware for ASP.NET Core&lt;/a&gt; (9k views)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://ardalis.com/introducing-modular-monoliths-goldilocks-architecture/&quot;&gt;Introducing Modular Monoliths: The Goldilocks Architecture&lt;/a&gt; (9k views)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://ardalis.com/aspnetcore-clean-architecture-template-version-8/&quot;&gt;ASP.NET Core Clean Architecture Template v8 Released&lt;/a&gt; (9k views)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Currently I have about &lt;strong&gt;1682 blog posts&lt;/strong&gt; on this site.&lt;/p&gt;
&lt;p&gt;I do notice this year that most of these top articles were actually published in 2024. That&apos;s different - in past years a lot of older articles would be in the top 10. I wonder if this indicates a change in Google algorithms, favoring newer content, or something else. ü§∑&lt;/p&gt;
&lt;h2&gt;Weekly Dev Tips Podcast Stats&lt;/h2&gt;
&lt;p&gt;I have (had) a podcast, &lt;a href=&quot;http://weeklydevtips.com/&quot;&gt;Weekly Dev Tips&lt;/a&gt; (which is the same name as my emailed newsletter that goes out every Wednesday). You can find it on the usual podcasting apps, its website, and also on &lt;a href=&quot;https://youtube.com/weeklydevtips&quot;&gt;YouTube&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Still haven&apos;t published anything new to it since 2021. Still focusing more on YouTube and Dometrain video content. If the mood strikes me I may record some new episodes in 2025 for the podcast (or maybe start a new one, who knows?).&lt;/p&gt;
&lt;p&gt;That doesn&apos;t mean you shouldn&apos;t listen to the existing shows. Most of them are meant to be evergreen content that you would listen to in order, with a lot of great stuff packed into the first couple dozen episodes. Check them out if you haven&apos;t and you&apos;re interested in my take on things.&lt;/p&gt;
&lt;h2&gt;Weekly Dev Tips Mailing List&lt;/h2&gt;
&lt;p&gt;I&apos;ve gotten kind of hit or miss on sending out newsletters, too. So, if you sign up, don&apos;t be surprised if I &lt;em&gt;don&apos;t&lt;/em&gt; spam you with new content &lt;strong&gt;every&lt;/strong&gt; week. But I do aim for weekly. Subscriber wise it&apos;s still holding on in the high 4k range.&lt;/p&gt;
&lt;p&gt;You can &lt;a href=&quot;/tips&quot;&gt;sign up here&lt;/a&gt;, if you&apos;re interested.&lt;/p&gt;
&lt;h2&gt;Social Media Stats&lt;/h2&gt;
&lt;p&gt;It can be difficult to get this information after the fact, so here are my stats for various social media things as of February 2025.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://bsky.app/profile/ardalis.com&quot;&gt;BlueSky (ardalis.com)&lt;/a&gt;: 2.9k followers. 983 posts.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.youtube.com/ardalis&quot;&gt;YouTube.com/ardalis&lt;/a&gt;: 14.3k subscribers. 129 videos. 196k views in 2024.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.linkedin.com/in/stevenandrewsmith/&quot;&gt;LinkedIn&lt;/a&gt;: 13.1k followers. 1.1M post impressions in 2024.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ardalis&quot;&gt;GitHub.com/ardalis&lt;/a&gt;: 9.1k followers; 287 repositories, 87 Stars.
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ardalis/CleanArchitecture&quot;&gt;CleanArchitecture repo&lt;/a&gt;: 16.8k stars; 2.9k forks&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ardalis/GuardClauses&quot;&gt;GuardClauses repo&lt;/a&gt;: 3.1k stars; 273 forks&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ardalis/ApiEndpoints&quot;&gt;ApiEndpoints repo&lt;/a&gt;: 3.2k stars; 225 forks&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ardalis/SmartEnum&quot;&gt;SmartEnum repo&lt;/a&gt;: 2.3k stars; 172 forks&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ardalis/Specification&quot;&gt;Specification repo&lt;/a&gt;: 2k stars; 249 forks&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ardalis/Result&quot;&gt;Result repo&lt;/a&gt;: 915 stars; 111 forks&lt;/li&gt;
&lt;li&gt;1,486 contributions in last year (everywhere)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Mostly inactive platforms/accounts:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.youtube.com/weeklydevtips&quot;&gt;YouTube.com/weeklydevtips&lt;/a&gt;: 1.1k subscribers. 75 videos.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.twitch.tv/ardalis&quot;&gt;Twitch.tv/ardalis&lt;/a&gt;: 2.1k followers; 0 subscribers. Inactive since 2021.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://mastodon.social/@ardalis@fosstodon.org&quot;&gt;Mastodon (@ardalis@fosstodon.org)&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.instagram.com/ardalis_steve/&quot;&gt;Instagram.com/ardalis_steve&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.tiktok.com/@ardalis0&quot;&gt;TikTok (@ardalis0)&lt;/a&gt;: Inactive.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://twitter.com/ardalis&quot;&gt;Twitter.com/ardalis&lt;/a&gt;: 25,323 followers. 56.8k tweets sent (ever). &lt;strong&gt;I&apos;ve moved to BlueSky.&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Both BlueSky and LinkedIn have become my two top social media platforms. Twitter is basically dead to me, and I was never really active on Instagram or TikTok. For some reason Mastodon never got the traction BlueSky has - I think because of the whole need to choose a server thing. But anyway, if you&apos;re looking for a good tech community, I recommend BlueSky and LinkedIn.&lt;/p&gt;
&lt;h2&gt;New Courses and Books üìö&lt;/h2&gt;
&lt;p&gt;In 2024, I published the following books and courses:&lt;/p&gt;
&lt;h3&gt;Dometrain&lt;/h3&gt;
&lt;p&gt;(&lt;a href=&quot;https://dometrain.com/author/steve-ardalis-smith/?ref=steve-ardalis-smith&amp;#x26;coupon_code=ARDALIS&quot;&gt;View All&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;I published 4 new courses on Dometrain in 2024:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://dometrain.com/course/getting-started-modular-monoliths-in-dotnet/?ref=steve-ardalis-smith&amp;#x26;coupon_code=ARDALIS&quot;&gt;Getting Started: Modular Monoliths in .NET&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://dometrain.com/course/deep-dive-modular-monoliths-in-dotnet/?ref=steve-ardalis-smith&amp;#x26;coupon_code=ARDALIS&quot;&gt;Modular Monoliths: Deep Dive&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://dometrain.com/course/from-zero-to-hero-microservices-to-modular-monoliths/?ref=steve-ardalis-smith&amp;#x26;coupon_code=ARDALIS&quot;&gt;From Zero to Hero: From Microservices to Modular Monoliths&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://dometrain.com/course/getting-started-asp-dotnet-core/?ref=steve-ardalis-smith&amp;#x26;coupon_code=ARDALIS&quot;&gt;Getting Started: ASP.NET Core&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;NOTE: You can use code &apos;ARDALIS&apos; on any individual course to get 20% off.&lt;/p&gt;
&lt;h3&gt;Pluralsight&lt;/h3&gt;
&lt;p&gt;(&lt;a href=&quot;https://www.pluralsight.com/authors/steve-smith&quot;&gt;View All&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;I published 3 &lt;em&gt;updated&lt;/em&gt; courses last year (24 total - they&apos;ve completely de-listed a few so it shows 20).&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.pluralsight.com/courses/csharp-solid-principles&quot;&gt;SOLID Principles for C# Developers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.pluralsight.com/courses/aspdotnet-core-6-web-api-best-practices&quot;&gt;ASP.NET Core Web API Best Practices&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.pluralsight.com/courses/fundamentals-domain-driven-design&quot;&gt;Domain-Driven Design Fundamentals&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Speaking üé§&lt;/h2&gt;
&lt;p&gt;I spoke at a few conferences last year, including some in person events:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://codemash.org/&quot;&gt;CodeMash&lt;/a&gt; 2024 (aka CodeMash Prime) (clean architecture, prime factoring)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://stirtrek.com/&quot;&gt;Stir Trek&lt;/a&gt; (May 2024) (modular monoliths)&lt;/li&gt;
&lt;li&gt;Authority Partners webinar (distributed events)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.techorama.nl/&quot;&gt;TechoramaNL&lt;/a&gt; (October 2024) (clean architecture/modular monolith/ddd workshop, ddd session, modular monolith session)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.youtube.com/playlist?list=PLdo4fOcmZ0oXeSG8BgCVru3zQtw_K4ANY&quot;&gt;dotnetconf 2024&lt;/a&gt; (clean architecture)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;My talks and workshops often focus on domain driven design, clean architecture, cloud design patterns, and ASP.NET Core. &lt;a href=&quot;/contact&quot;&gt;Contact me&lt;/a&gt; if you&apos;re interested in private presentations or training for your team.&lt;/p&gt;
&lt;h2&gt;Travel ‚úàÔ∏è&lt;/h2&gt;
&lt;p&gt;Most of the rest of this is less interesting if you just follow me for technical content. You&apos;ve been warned.&lt;/p&gt;
&lt;p&gt;As part of the TechoramaNL conference, my wife and twin boys and I traveled to Switzerland and southern Germany (and Liechtenstein!), ticking off two countries I hadn&apos;t previously visited.&lt;/p&gt;
&lt;h3&gt;Fitbit Stats üèÉ‚Äç‚ôÇÔ∏è&lt;/h3&gt;
&lt;p&gt;You used to be able to get &lt;a href=&quot;https://www.fitbit.com/activities&quot;&gt;annual stats from Fitbit in the Activities tab&lt;/a&gt;. But for some idiotic reason they decided they don&apos;t need a web site, they have an &lt;em&gt;app&lt;/em&gt;. Asinine.&lt;/p&gt;
&lt;p&gt;2024:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;2.7M total steps counted (down about 1M)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Still playing soccer year-round (and coaching my now 10yo boys). Also inconsistently lifting in 2024 (but started a program in Jan 2025 with more consistency).&lt;/p&gt;
&lt;p&gt;Weight-wise 2024 started at about 224 pounds (27% bf) and ended at about 225 pounds (28% bf). So, not great but not getting too much worse.&lt;/p&gt;
&lt;p&gt;Goal this year (like most years) is to get in better shape, and I&apos;m already on track to do so in 2025.&lt;/p&gt;
&lt;p&gt;Dropping a few sections I had in previous years just to keep this more streamlined...&lt;/p&gt;
&lt;h2&gt;That&apos;s It&lt;/h2&gt;
&lt;p&gt;Thanks for reading this far. This post is mostly for my own reference, but maybe you found it interesting or useful.&lt;/p&gt;
&lt;p&gt;If you want to &lt;a href=&quot;https://ardalis.com/year-in-review-post-checklist&quot;&gt;write your own year in review blog post, I wrote a checklist here&lt;/a&gt;. It&apos;s probably longer than most people will want but you can just pick and choose what works for you.&lt;/p&gt;
&lt;p&gt;Good luck this year and beyond!&lt;/p&gt;</content:encoded></item><item><title><![CDATA[When QA Keeps Finding Bugs]]></title><description><![CDATA[A developer manager recently reached out with a concern: their new QA team member was finding too many bugs, leading to frustration among‚Ä¶]]></description><link>https://ardalis.com/when-qa-keeps-finding-bugs/</link><guid isPermaLink="false">https://ardalis.com/when-qa-keeps-finding-bugs/</guid><pubDate>Wed, 12 Feb 2025 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;A developer manager recently reached out with a concern: their new QA team member was finding too many bugs, leading to frustration among developers. Overall velocity of the dev team (in terms of features being shipped) was rapidly falling. The question was, how can they reduce the number of issues being kicked back from QA without discouraging the testers from doing their job well?&lt;/p&gt;
&lt;h2&gt;QA Isn&apos;t the Problem&lt;/h2&gt;
&lt;p&gt;First and foremost, if QA is finding bugs, that means they&apos;re doing their job well. The goal shouldn&apos;t be to stop QA from finding bugs. The goal should be to reduce the number of bugs that reach QA &lt;em&gt;in the first place&lt;/em&gt;. The real issue likely lies upstream in the development process.&lt;/p&gt;
&lt;h2&gt;Where Are the Bugs Coming From?&lt;/h2&gt;
&lt;p&gt;The first question to ask is: &lt;strong&gt;Are these bugs in new features, or are they defects in existing functionality?&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;New Features&lt;/strong&gt;: If the majority of bugs are coming from newly developed features, that&apos;s a sign your developers are shipping poor-quality code. The solution isn&apos;t to rush fixes‚Äîit&apos;s to improve the development process so that fewer defects are introduced in the first place.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Existing Features&lt;/strong&gt;: If QA is uncovering longstanding issues that aren&apos;t directly tied to recent work, these should be triaged and added to the backlog based on priority.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If the bugs are coming from new work, developers need to adopt better quality practices. Yes, this might slow them down in the short term, but fixing defects after the fact is always more expensive than preventing them upfront. If you continuously produce poor quality code, you&apos;re just going to face an increasing load of technical debt as well as user support tickets and you&apos;ll end up in constant fire-fighting mode and your velocity will drop to zero. I&apos;ve seen this time and time again.&lt;/p&gt;
&lt;h2&gt;Build Quality In&lt;/h2&gt;
&lt;p&gt;A core principle of lean software development is &lt;strong&gt;&quot;Build Quality In&quot;&lt;/strong&gt;. What this means is that quality shouldn&apos;t be something you check at the end, but something that is part of the entire development process. There&apos;s a quote I like that drives this home:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&quot;If you have a process that produces defects, then you have a defective process.&quot;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;If developers are getting frustrated by the fact that work keeps getting kicked back to them, they need to understand that fixing issues earlier in the process will ultimately save them time and frustration. Here&apos;s how they can do that.&lt;/p&gt;
&lt;h2&gt;Practical Steps to Improve Quality&lt;/h2&gt;
&lt;h3&gt;1. Define &quot;Done&quot;&lt;/h3&gt;
&lt;p&gt;Have a &lt;strong&gt;Definition of Done&lt;/strong&gt; that includes basic quality checks. This can be a simple checklist that ensures:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;All acceptance criteria are met.&lt;/li&gt;
&lt;li&gt;The code passes automated tests.&lt;/li&gt;
&lt;li&gt;The feature has been reviewed by at least one other developer.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;2. Write Tests&lt;/h3&gt;
&lt;p&gt;Testing should be a core part of development, not an afterthought. Use &lt;a href=&quot;https://deviq.com/practices/test-driven-development&quot;&gt;Test-Driven Development (TDD)&lt;/a&gt; where it makes sense, but at the very least, ensure that the most important paths in the application are covered by automated tests.&lt;/p&gt;
&lt;h3&gt;3. Use Code Reviews and Pair Programming&lt;/h3&gt;
&lt;p&gt;Code reviews should be more than a formality‚Äîthey should catch defects &lt;strong&gt;before&lt;/strong&gt; they reach QA. If your team&apos;s review process consistently lets bugs through, then clearly your reviews are not as effective as they should be. Caution reviewers against quickly signing off on pull requests with &quot;Looks good to me&quot; without properly looking over the code. &lt;a href=&quot;https://deviq.com/practices/pair-programming&quot;&gt;Pair programming&lt;/a&gt; can also help catch issues early by getting another set of eyes on the code as it&apos;s written. Teams using pair programming are also more likely to hold one another to a higher standard of quality, ensuring that code is written with maintainability in mind.&lt;/p&gt;
&lt;h3&gt;4. Have Clear Acceptance Criteria&lt;/h3&gt;
&lt;p&gt;Developers can&apos;t deliver high-quality features if the requirements are vague. Acceptance criteria should be &lt;strong&gt;explicit&lt;/strong&gt; and, ideally, &lt;strong&gt;testable&lt;/strong&gt;. If something isn&apos;t clear, push for clarification before development starts.&lt;/p&gt;
&lt;h3&gt;5. Use Static Analysis Tools&lt;/h3&gt;
&lt;p&gt;Static analysis tools can catch common issues like null reference exceptions, unused variables, and more. Tools like &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=josefpihrt.Roslynator&quot;&gt;Roslynator&lt;/a&gt; can be integrated into your build process to catch these issues before they reach QA.&lt;/p&gt;
&lt;h3&gt;6. Metrics&lt;/h3&gt;
&lt;p&gt;Identify metrics that can help you guide the process and inform both developers and QA teams about the quality of the code. For example, you might track the number of defects found in QA, the number of defects found in production, the number of defects found in code reviews, and the number of defects found in automated tests. Use these metrics to identify trends and areas for improvement. Other metrics like cyclomatic complexity, code coverage, and code churn can also be useful.&lt;/p&gt;
&lt;p&gt;Be careful that your metrics don&apos;t become targets, as this can lead to incentivizing the wrong behavior. Keep &lt;a href=&quot;https://deviq.com/laws/goodharts-law&quot;&gt;Goodhart&apos;s Law&lt;/a&gt; in mind: &quot;When a measure becomes a target, it ceases to be a good measure.&quot; Remember, not everything easily measured is important, and not everything that&apos;s important is easily measured.&lt;/p&gt;
&lt;h2&gt;Handling Incoming Bugs&lt;/h2&gt;
&lt;p&gt;Even with improved quality, some bugs will still slip through. If QA is constantly uncovering small defects, consider:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Triage and Prioritization&lt;/strong&gt;: Not all bugs are equal. If they aren&apos;t showstoppers, add them to the backlog and prioritize them alongside feature work.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Bug Rotation&lt;/strong&gt;: Assign a developer (or rotate responsibility) to handle bug fixes during a given sprint/week.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Separate Bug Swimlane&lt;/strong&gt;: Use a separate board or swimlane for bug fixing to prevent it from derailing feature development.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;The key takeaway is that &lt;strong&gt;QA finding bugs isn&apos;t a problem‚Äîshipping too many bugs is&lt;/strong&gt;. If defects are being caught late, you likely have a development process issue. Focus on improving quality &lt;strong&gt;before&lt;/strong&gt; features reach QA through better requirements, testing, and reviews. In the long run, this will make everyone&apos;s lives easier‚Äîincluding the developers who are currently frustrated.&lt;/p&gt;
&lt;p&gt;If you&apos;ve implemented changes like these, I&apos;d love to hear how they worked for you. Leave your experience and favorits tips in the comments below, or in a post on &lt;a href=&quot;https://www.linkedin.com/in/stevenandrewsmith/&quot;&gt;LinkedIn&lt;/a&gt; or &lt;a href=&quot;https://bsky.app/profile/ardalis.com&quot;&gt;BlueSky&lt;/a&gt;!&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Avoid Using C# Events in ASP.NET Core Applications]]></title><description><![CDATA[This post is part of the C# Advent Calendar 2024 - check out all of the C# articles from this year! C# events are a powerful feature of the‚Ä¶]]></description><link>https://ardalis.com/avoid-using-csharp-events-in-aspnetcore-apps/</link><guid isPermaLink="false">https://ardalis.com/avoid-using-csharp-events-in-aspnetcore-apps/</guid><pubDate>Sun, 15 Dec 2024 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;&lt;em&gt;This post is part of the &lt;a href=&quot;https://csadvent.christmas/&quot;&gt;C# Advent Calendar 2024 - check out all of the C# articles from this year!&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;C# events are a powerful feature of the language, providing a simple mechanism for building publish-subscribe communication patterns. However, when used in ASP.NET Core applications, events can lead to subtle, hard-to-diagnose issues that can harm the reliability and scalability of your application. In this article, I&apos;ll highlight the main issues with using C# events in ASP.NET Core and share better alternatives.&lt;/p&gt;
&lt;p&gt;The associated code samples can be found in this &lt;a href=&quot;https://github.com/ardalis/AvoidCSharpEventsAspNetCore&quot;&gt;GitHub repository: AvoidCSharpEventsAspNetCore&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;The Appeal of C# Events&lt;/h2&gt;
&lt;p&gt;At first glance, C# events seem like a natural choice for situations where you want to notify other parts of the application about something that has happened. Here&apos;s a simple example of an event-based system in a hypothetical alarm service:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;csharp&quot;&gt;&lt;pre class=&quot;language-csharp&quot;&gt;&lt;code class=&quot;language-csharp&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;AlarmService&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;event&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;EventHandler&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;Alarm&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;?&lt;/span&gt;&lt;/span&gt; AlarmAdded&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;AddAlarm&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Alarm&lt;/span&gt; alarm&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token comment&quot;&gt;// Business logic for adding an alarm&lt;/span&gt;
        AlarmAdded&lt;span class=&quot;token punctuation&quot;&gt;?.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Invoke&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; alarm&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// Notify subscribers&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;AlarmSubscriber&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;AlarmSubscriber&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;AlarmService&lt;/span&gt; service&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        service&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;AlarmAdded &lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt; OnAlarmAdded&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// C# event subscription&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;OnAlarmAdded&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;?&lt;/span&gt;&lt;/span&gt; sender&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Alarm&lt;/span&gt; alarm&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        Console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;WriteLine&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token interpolation-string&quot;&gt;&lt;span class=&quot;token string&quot;&gt;$&quot;Alarm received: &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token expression language-csharp&quot;&gt;alarm&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Code&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In this example, the &lt;code class=&quot;language-text&quot;&gt;AlarmService&lt;/code&gt; notifies subscribers whenever a new alarm is added. While this works well for small, simple applications, it introduces problems when used in larger or more complex systems, like ASP.NET Core applications.&lt;/p&gt;
&lt;h2&gt;The Problems with Events in ASP.NET Core&lt;/h2&gt;
&lt;p&gt;There are several issues with using C# events in ASP.NET Core applications. Let&apos;s look at a few of them just so you have some concrete reasons to avoid them and understand it&apos;s not just because I said so.&lt;/p&gt;
&lt;h3&gt;Memory Leaks&lt;/h3&gt;
&lt;p&gt;One of the most common issues with events is that they can lead to memory leaks if you forget to unsubscribe (or you remember but &lt;strong&gt;bad things happen&lt;/strong&gt; and the code that would have cleaned them up doesn&apos;t end up running). In .NET, the event publisher holds a strong reference to the event handler. If a subscriber is not unsubscribed, it cannot be garbage-collected even if it is no longer in use. This is particularly problematic in ASP.NET Core, where transient objects are common. As you may know, in .NET the garbage collector is the thing that makes sure unused memory is reclaimed for the application. If your application continues to create objects that cannot be garbage collected, you will eventually run out of memory and your application will crash.&lt;/p&gt;
&lt;p&gt;Example of a Memory Leak:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;csharp&quot;&gt;&lt;pre class=&quot;language-csharp&quot;&gt;&lt;code class=&quot;language-csharp&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;LeakyAlarmSubscriber&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;LeakyAlarmSubscriber&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;AlarmService&lt;/span&gt; service&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token comment&quot;&gt;// Subscribing to the event but never unsubscribing&lt;/span&gt;
        service&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;AlarmAdded &lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt; OnAlarmAdded&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;OnAlarmAdded&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;?&lt;/span&gt;&lt;/span&gt; sender&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Alarm&lt;/span&gt; alarm&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        Console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;WriteLine&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token interpolation-string&quot;&gt;&lt;span class=&quot;token string&quot;&gt;$&quot;Alarm received: &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token expression language-csharp&quot;&gt;alarm&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Code&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Every time a new &lt;code class=&quot;language-text&quot;&gt;LeakyAlarmSubscriber&lt;/code&gt; is created, it stays in memory indefinitely because the &lt;code class=&quot;language-text&quot;&gt;AlarmService&lt;/code&gt; holds a reference to its event handler. You can see this in the following memory snapshots taken with the Visual Studio debugger:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/memory-snapshots-csharp-events.png&quot; alt=&quot;Memory Leak in Visual Studio Debugger&quot;&gt;&lt;/p&gt;
&lt;p&gt;You can also demonstrate the issue using BenchmarkDotNet to measure the memory usage of your application over time. Set up the benchmark:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;csharp&quot;&gt;&lt;pre class=&quot;language-csharp&quot;&gt;&lt;code class=&quot;language-csharp&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;BenchmarkDotNet&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Attributes&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token attribute&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;MemoryDiagnoser&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;MemoryLeakBenchmark&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;EventPublisher&lt;/span&gt; _publisher&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token attribute&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;GlobalSetup&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Setup&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        _publisher &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token constructor-invocation class-name&quot;&gt;EventPublisher&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token attribute&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;Benchmark&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;CauseLeak&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt;&lt;/span&gt; subscriber &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token constructor-invocation class-name&quot;&gt;EventSubscriber&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;_publisher&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        _publisher&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;RaiseEvent&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// run it from Main()&lt;/span&gt;
BenchmarkRunner&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token generic-method&quot;&gt;&lt;span class=&quot;token function&quot;&gt;Run&lt;/span&gt;&lt;span class=&quot;token generic class-name&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;MemoryLeakBenchmark&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then add a FixedSubscriber that uses IDisposable to unsubscribe from the event:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;csharp&quot;&gt;&lt;pre class=&quot;language-csharp&quot;&gt;&lt;code class=&quot;language-csharp&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;FixedSubscriber&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token type-list&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;IDisposable&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;readonly&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;EventPublisher&lt;/span&gt; _publisher&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;FixedSubscriber&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;EventPublisher&lt;/span&gt; publisher&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        _publisher &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; publisher&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        _publisher&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;SomethingHappened &lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt; OnSomethingHappened&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;OnSomethingHappened&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;?&lt;/span&gt;&lt;/span&gt; sender&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;EventArgs&lt;/span&gt; e&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token comment&quot;&gt;//Console.WriteLine(&quot;Event received.&quot;);&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Dispose&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        _publisher&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;SomethingHappened &lt;span class=&quot;token operator&quot;&gt;-=&lt;/span&gt; OnSomethingHappened&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// and another benchmark method&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Benchmark&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;ProperlyDisposeSubscriber&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt;&lt;/span&gt; subscriber &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token constructor-invocation class-name&quot;&gt;FixedSubscriber&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;_publisher&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    _publisher&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;RaiseEvent&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It will take a few minutes (be sure to comment out the &lt;code class=&quot;language-text&quot;&gt;Console.WriteLine&lt;/code&gt; call, too), and then you&apos;ll see the results:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/benchmarkdotnet-comparison.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;The allocated memory is the same in both cases, but notice that garbage collection is happening in the second case. This is because the &lt;code class=&quot;language-text&quot;&gt;FixedSubscriber&lt;/code&gt; is properly unsubscribing from the event, allowing the garbage collector to reclaim the memory.&lt;/p&gt;
&lt;p&gt;But even if you&apos;re always diligent about unsubscribing from events, there are other issues to consider.&lt;/p&gt;
&lt;h3&gt;Where&apos;s the increase in RAM over time?&lt;/h3&gt;
&lt;p&gt;To see the increase in memory usage over time, you can put the leaky code into a big loop like this one:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;csharp&quot;&gt;&lt;pre class=&quot;language-csharp&quot;&gt;&lt;code class=&quot;language-csharp&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1_000_000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// Create a new leaking subscriber&lt;/span&gt;
    &lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt;&lt;/span&gt; subscriber &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token constructor-invocation class-name&quot;&gt;LeakySubscriber&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;publisher&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token comment&quot;&gt;// Optionally raise an event to simulate activity&lt;/span&gt;
    publisher&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;RaiseEvent&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token comment&quot;&gt;// Periodically log memory usage&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i &lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;10_000&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        Console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;WriteLine&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token interpolation-string&quot;&gt;&lt;span class=&quot;token string&quot;&gt;$&quot;Iteration: &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token expression language-csharp&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;, Memory: &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token expression language-csharp&quot;&gt;GC&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;GetTotalMemory&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token format-string&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;N0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt; bytes&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Running that yields something like this:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;plaintext&quot;&gt;&lt;pre class=&quot;language-plaintext&quot;&gt;&lt;code class=&quot;language-plaintext&quot;&gt;Iteration: 0, Memory: 64,168 bytes
Iteration: 10000, Memory: 1,860,584 bytes
Iteration: 20000, Memory: 3,646,528 bytes
Iteration: 30000, Memory: 5,170,200 bytes
Iteration: 40000, Memory: 7,218,032 bytes
Iteration: 50000, Memory: 8,741,808 bytes
Iteration: 60000, Memory: 6,668,840 bytes
Iteration: 70000, Memory: 9,247,104 bytes
Iteration: 80000, Memory: 10,768,544 bytes
Iteration: 90000, Memory: 12,297,072 bytes
Iteration: 100000, Memory: 13,820,848 bytes
Iteration: 110000, Memory: 11,798,080 bytes
Iteration: 120000, Memory: 13,327,744 bytes
Iteration: 130000, Memory: 14,849,184 bytes
Iteration: 140000, Memory: 18,469,752 bytes
Iteration: 150000, Memory: 19,993,272 bytes
Iteration: 160000, Memory: 21,517,048 bytes
Iteration: 170000, Memory: 17,547,392 bytes
Iteration: 180000, Memory: 19,068,832 bytes
Iteration: 190000, Memory: 20,590,272 bytes
Iteration: 200000, Memory: 22,118,816 bytes
Iteration: 210000, Memory: 23,642,336 bytes
Iteration: 220000, Memory: 21,500,744 bytes
Iteration: 230000, Memory: 23,024,520 bytes
Iteration: 240000, Memory: 24,548,296 bytes
Iteration: 250000, Memory: 26,071,720 bytes
Iteration: 260000, Memory: 27,595,496 bytes
Iteration: 270000, Memory: 33,321,824 bytes
Iteration: 280000, Memory: 29,327,472 bytes&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Thread-Safety Issues&lt;/h3&gt;
&lt;p&gt;C# events are not thread-safe by default. If multiple threads raise or subscribe to an event at the same time, it can lead to race conditions or even &lt;code class=&quot;language-text&quot;&gt;NullReferenceException&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Example of a Potential Race Condition:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;csharp&quot;&gt;&lt;pre class=&quot;language-csharp&quot;&gt;&lt;code class=&quot;language-csharp&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;AlarmService&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;event&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;EventHandler&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;Alarm&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;?&lt;/span&gt;&lt;/span&gt; AlarmAdded&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;AddAlarm&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Alarm&lt;/span&gt; alarm&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token comment&quot;&gt;// A race condition can occur if AlarmAdded is modified on another thread&lt;/span&gt;
        AlarmAdded&lt;span class=&quot;token punctuation&quot;&gt;?.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Invoke&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; alarm&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To avoid these issues, you would need to introduce thread-safety mechanisms, such as copying the event delegate to a local variable before invoking it.&lt;/p&gt;
&lt;h3&gt;Tight Coupling&lt;/h3&gt;
&lt;p&gt;C# events create tight coupling between the publisher and the subscribers. The publisher directly depends on the existence of the subscribers, making it harder to maintain and test the system. Other patterns can be more flexible because subscribers (handlers) can be instantiated as needed.&lt;/p&gt;
&lt;p&gt;Why This Is Problematic:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;code class=&quot;language-text&quot;&gt;AlarmService&lt;/code&gt; has no control over what the subscribers do.&lt;/li&gt;
&lt;li&gt;Subscribers may unintentionally introduce performance issues or exceptions that impact the entire system.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Better Alternatives&lt;/h2&gt;
&lt;p&gt;To avoid these issues, consider the following alternatives to C# events:&lt;/p&gt;
&lt;h3&gt;Use a Mediator Pattern&lt;/h3&gt;
&lt;p&gt;The Mediator pattern decouples the publisher and subscribers, making the system more scalable and testable. Libraries like &lt;a href=&quot;https://github.com/jbogard/MediatR&quot;&gt;MediatR&lt;/a&gt; are great for implementing this pattern in ASP.NET Core. Here&apos;s how you could rewrite the alarm example using MediatR:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;csharp&quot;&gt;&lt;pre class=&quot;language-csharp&quot;&gt;&lt;code class=&quot;language-csharp&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;AlarmAdded&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token type-list&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;INotification&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;Alarm&lt;/span&gt; Alarm &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;AlarmAdded&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Alarm&lt;/span&gt; alarm&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        Alarm &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; alarm&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;AlarmService&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;readonly&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;IMediator&lt;/span&gt; _mediator&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;AlarmService&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;IMediator&lt;/span&gt; mediator&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        _mediator &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; mediator&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;AddAlarm&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Alarm&lt;/span&gt; alarm&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token comment&quot;&gt;// Business logic for adding an alarm&lt;/span&gt;
        _mediator&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Publish&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token constructor-invocation class-name&quot;&gt;AlarmAdded&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;alarm&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;AlarmHandler&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token type-list&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;INotificationHandler&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;AlarmAdded&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;Task&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Handle&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;AlarmAdded&lt;/span&gt; notification&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;CancellationToken&lt;/span&gt; cancellationToken&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        Console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;WriteLine&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token interpolation-string&quot;&gt;&lt;span class=&quot;token string&quot;&gt;$&quot;Alarm received: &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token expression language-csharp&quot;&gt;notification&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Alarm&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Code&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; Task&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;CompletedTask&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In this example, the &lt;code class=&quot;language-text&quot;&gt;AlarmService&lt;/code&gt; publishes an &lt;code class=&quot;language-text&quot;&gt;AlarmAdded&lt;/code&gt; notification using MediatR, and the &lt;code class=&quot;language-text&quot;&gt;AlarmHandler&lt;/code&gt; subscribes to it. This approach decouples the publisher and subscribers, making the system more maintainable and testable. There&apos;s no direct dependency between the components, so there&apos;s no risk of memory leaks or tight coupling.&lt;/p&gt;
&lt;h3&gt;Use an Event Aggregator&lt;/h3&gt;
&lt;p&gt;An Event Aggregator is a centralized hub for managing events and subscribers. This pattern is particularly useful in applications with complex communication requirements.&lt;/p&gt;
&lt;p&gt;An example of an Event Aggregator in ASP.NET Core:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;csharp&quot;&gt;&lt;pre class=&quot;language-csharp&quot;&gt;&lt;code class=&quot;language-csharp&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;EventAggregator&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;readonly&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Dictionary&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;Type&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; List&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;Action&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; _subscribers &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token generic-method&quot;&gt;&lt;span class=&quot;token function&quot;&gt;Subscribe&lt;/span&gt;&lt;span class=&quot;token generic class-name&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;T&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Action&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;T&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; handler&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;_subscribers&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;TryGetValue&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;typeof&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token type-expression class-name&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;out&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt;&lt;/span&gt; handlers&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            handlers &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token constructor-invocation class-name&quot;&gt;List&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;Action&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
            _subscribers&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;typeof&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token type-expression class-name&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; handlers&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

        handlers&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;obj &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;T&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;obj&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token generic-method&quot;&gt;&lt;span class=&quot;token function&quot;&gt;Publish&lt;/span&gt;&lt;span class=&quot;token generic class-name&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;T&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;T&lt;/span&gt; message&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;_subscribers&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;TryGetValue&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;typeof&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token type-expression class-name&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;out&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt;&lt;/span&gt; handlers&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot;&gt;foreach&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt;&lt;/span&gt; handler &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; handlers&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;token function&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;message&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;AlarmService&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;readonly&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;EventAggregator&lt;/span&gt; _eventAggregator&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;AlarmService&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;EventAggregator&lt;/span&gt; eventAggregator&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        _eventAggregator &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; eventAggregator&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;AddAlarm&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Alarm&lt;/span&gt; alarm&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token comment&quot;&gt;// Business logic for adding an alarm&lt;/span&gt;
        _eventAggregator&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Publish&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;alarm&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;AlarmSubscriber&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;AlarmSubscriber&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;EventAggregator&lt;/span&gt; eventAggregator&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        eventAggregator&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token generic-method&quot;&gt;&lt;span class=&quot;token function&quot;&gt;Subscribe&lt;/span&gt;&lt;span class=&quot;token generic class-name&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;Alarm&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;OnAlarmAdded&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;OnAlarmAdded&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Alarm&lt;/span&gt; alarm&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        Console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;WriteLine&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token interpolation-string&quot;&gt;&lt;span class=&quot;token string&quot;&gt;$&quot;Alarm received: &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token expression language-csharp&quot;&gt;alarm&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Code&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In this example, the &lt;code class=&quot;language-text&quot;&gt;EventAggregator&lt;/code&gt; acts as a central hub for managing events and subscribers. The &lt;code class=&quot;language-text&quot;&gt;AlarmService&lt;/code&gt; publishes an &lt;code class=&quot;language-text&quot;&gt;Alarm&lt;/code&gt; message, and the &lt;code class=&quot;language-text&quot;&gt;AlarmSubscriber&lt;/code&gt; subscribes to it. This pattern provides a flexible and scalable way to manage communication between components, without the issues associated with C# events or dependency on third-party libraries.&lt;/p&gt;
&lt;h3&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;C# events can be a useful tool in small, isolated systems, but they often cause more problems than they solve in modern ASP.NET Core applications. By understanding their limitations and considering alternative approaches, you can build more robust, maintainable systems.&lt;/p&gt;
&lt;h2&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://learn.microsoft.com/dotnet/csharp/programming-guide/events/&quot;&gt;C# Events&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://learn.microsoft.com/en-us/dotnet/standard/events/&quot;&gt;Handle and Raise Events&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.reddit.com/r/dotnet/comments/lrby7j/events_and_delegates_in_an_aspnet_core/&quot;&gt;Reddit: Events and delegates in ASP.NET Core&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://csadvent.christmas/&quot;&gt;C# Advent Calendar&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.youtube.com/@Ardalis&quot;&gt;Follow Me on YouTube&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[Interfaces Describe What - Implementations Describe How]]></title><description><![CDATA[When working with software development, especially in object-oriented or component-based systems, understanding the distinction between‚Ä¶]]></description><link>https://ardalis.com/interfaces-describe-what-implementations-describe-how/</link><guid isPermaLink="false">https://ardalis.com/interfaces-describe-what-implementations-describe-how/</guid><pubDate>Mon, 23 Sep 2024 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;When working with software development, especially in object-oriented or component-based systems, understanding the distinction between interfaces and implementations is crucial. The two terms often come up in conversations about architecture, design patterns, and coding best practices, but what do they really mean? In this post, we&apos;ll break down the difference and why it matters.&lt;/p&gt;
&lt;h2&gt;YouTube&lt;/h2&gt;
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/Cg4w-MgjkLA?si=LcOwZQKK3c4Q_y7U&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&quot; referrerpolicy=&quot;strict-origin-when-cross-origin&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;h2&gt;What is an Interface?&lt;/h2&gt;
&lt;p&gt;An interface in software development defines &lt;em&gt;what&lt;/em&gt; a component or class can do. Think of it like a contract or a blueprint. It specifies the methods or behaviors that must be available without dictating &lt;em&gt;how&lt;/em&gt; they should be carried out. (While &lt;a href=&quot;https://learn.microsoft.com/en-us/dotnet/csharp/advanced-topics/interface-implementation/default-interface-methods-versions&quot;&gt;default interface methods&lt;/a&gt; are a special case in modern languages like C#, they don&apos;t change the fundamental role of interfaces as abstractions).&lt;/p&gt;
&lt;p&gt;For example, imagine you&apos;re creating an interface for a file reader. The interface might define methods like &lt;code class=&quot;language-text&quot;&gt;Open()&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;Read()&lt;/code&gt;, and &lt;code class=&quot;language-text&quot;&gt;Close()&lt;/code&gt;. However, it doesn&apos;t specify whether the file is read from a local drive, from the cloud, or even from a database. It simply outlines &lt;em&gt;what&lt;/em&gt; the class should be able to do.&lt;/p&gt;
&lt;p&gt;In simpler terms, the interface focuses on the &lt;strong&gt;what&lt;/strong&gt;‚Äîthe behavior and capabilities your system should expose. This allows different parts of a system to interact without needing to know the internal workings of the other parts. It&apos;s a definite &lt;a href=&quot;https://deviq.com/antipatterns/code-smells&quot;&gt;code smell&lt;/a&gt; if your interface indicates &lt;strong&gt;how&lt;/strong&gt; it accomplishes the operations it exposes.&lt;/p&gt;
&lt;p&gt;Remember:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Interfaces describe what; Implementations describe how.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;What is an Implementation?&lt;/h2&gt;
&lt;p&gt;The implementation, on the other hand, defines &lt;em&gt;how&lt;/em&gt; those methods or behaviors are actually carried out. Continuing with the file reader example, the implementation would contain the logic to open, read, and close files in a specific environment, such as reading a local file or making HTTP requests to download a file from the cloud.&lt;/p&gt;
&lt;p&gt;While the interface lays out &lt;em&gt;what&lt;/em&gt; needs to be done, the implementation handles the nitty-gritty details of &lt;em&gt;how&lt;/em&gt; it&apos;s done. This separation is essential because it allows for flexibility and scalability. For example, you could have multiple implementations of the same interface: one for local files, another for cloud storage, and yet another for database access, all without changing how the rest of your system interacts with those components.&lt;/p&gt;
&lt;p&gt;Again, the interface&apos;s job is to simply describe &lt;strong&gt;what&lt;/strong&gt; needs to happen. The implementation is responsible for &lt;strong&gt;how&lt;/strong&gt; it&apos;s done, in some specific manner. (and if you&apos;re wondering about &lt;strong&gt;why&lt;/strong&gt;, see &lt;a href=&quot;https://ardalis.com/getting-started-with-architecture-decision-records/&quot;&gt;architecture decision records&lt;/a&gt;).&lt;/p&gt;
&lt;h2&gt;Why the Separation Matters&lt;/h2&gt;
&lt;h3&gt;Flexibility&lt;/h3&gt;
&lt;p&gt;By separating the &lt;em&gt;what&lt;/em&gt; and the &lt;em&gt;how&lt;/em&gt;, you gain tremendous flexibility. Changing how something is done (such as switching from reading a local file to reading from a cloud storage service) doesn&apos;t require changes to every part of the code that interacts with the file reader. Instead, you simply swap out one implementation for another.&lt;/p&gt;
&lt;p&gt;From the calling code&apos;s perspective, it shouldn&apos;t be concerned about &lt;em&gt;how&lt;/em&gt; the task is performed, as long as it &lt;em&gt;is&lt;/em&gt; performed. When you&apos;re able to achieve this kind of separation, it makes your software design much simpler.&lt;/p&gt;
&lt;h3&gt;Testability&lt;/h3&gt;
&lt;p&gt;This separation also makes your code much easier to test. You can mock or stub out the &lt;em&gt;how&lt;/em&gt; part (the implementation) when writing unit tests and focus solely on whether the system behaves as expected based on the interface. Maybe in production the file access implementation works with real files. However, in your tests you need to change how it works. The test implementation may simply return an expected string or result, or maybe it throws an exception saying the file doesn&apos;t exist. It&apos;s often much easier to set up and run tests using mock or fake implementations of &lt;em&gt;how&lt;/em&gt; than by using the production &quot;real&quot; version of &lt;em&gt;how&lt;/em&gt; the code implements the interface in question.&lt;/p&gt;
&lt;h3&gt;Maintainability&lt;/h3&gt;
&lt;p&gt;Lastly, maintaining code becomes easier when the &lt;em&gt;what&lt;/em&gt; and &lt;em&gt;how&lt;/em&gt; are decoupled. Consumers of the interface need only worry about the interface, not the underlying details, making such code simpler and more loosely coupled. Implementations, too, become simpler since they too can focus solely on implementing the (hopefully &lt;a href=&quot;https://deviq.com/principles/interface-segregation&quot;&gt;small and cohesive&lt;/a&gt;) interface, without regard for every possible way the whole system might need to perform related tasks.&lt;/p&gt;
&lt;h2&gt;Real-World Example&lt;/h2&gt;
&lt;p&gt;Let&apos;s consider another common real-world example: sending notifications.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Interface&lt;/strong&gt;: You might define an interface called &lt;code class=&quot;language-text&quot;&gt;ISendEmail&lt;/code&gt; with a single method: &lt;code class=&quot;language-text&quot;&gt;Send()&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Implementation&lt;/strong&gt;: One implementation might send emails using an SMTP server, while another might send emails using a cloud service provider. Yet another might simply send a message on a message queue for some other part of the system to deal with. The rest of the system doesn&apos;t care how notifications are sent; it only interacts with the &lt;code class=&quot;language-text&quot;&gt;ISendEmail&lt;/code&gt; interface.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If later on you need to switch from SMTP to a cloud provider or your own microservice, you need only switch out implementations. The &lt;strong&gt;what&lt;/strong&gt; described by the interface remains unchanged, and so too does all of your code that consumes that interface. Only the implementations, which describe &lt;strong&gt;how&lt;/strong&gt; the sending is done, need to be changed. Ideally, instead of modifying existing implementations, you introduce new ones as needed, ensuring minimal disruption to the system. &lt;a href=&quot;https://www.weeklydevtips.com/episodes/015&quot;&gt;Learn more.&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Understanding the difference between interfaces (what) and implementations (how) is a foundational concept in software design that improves flexibility, testability, and maintainability. It allows you to build systems where the underlying functionality can evolve without breaking the contracts that the rest of your application depends on.&lt;/p&gt;
&lt;p&gt;By focusing on the &lt;em&gt;what&lt;/em&gt; with interfaces, and leaving the &lt;em&gt;how&lt;/em&gt; to implementations, you can create modular, scalable, and adaptable codebases that are easier to manage over time.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[You Should Blog]]></title><description><![CDATA[As a software developer, you might spend most of your time immersed in code, solving problems, and building innovative solutions. But have‚Ä¶]]></description><link>https://ardalis.com/you-should-blog/</link><guid isPermaLink="false">https://ardalis.com/you-should-blog/</guid><pubDate>Mon, 26 Aug 2024 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;As a software developer, you might spend most of your time immersed in code, solving problems, and building innovative solutions. But have you ever considered starting a blog? If you haven&apos;t, let me give you some compelling reasons why you should. This is advice I frequently give to members of my &lt;a href=&quot;https://devBetter.com&quot;&gt;developer group coaching program at devBetter.com&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Watch the Video&lt;/h2&gt;
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/yRLaoq_q1a8?si=AhncsYcrusSLaOat&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&quot; referrerpolicy=&quot;strict-origin-when-cross-origin&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;h2&gt;1. Sharpen Your Skills&lt;/h2&gt;
&lt;p&gt;One of the best ways to deepen your understanding of any topic is to teach it to others.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&quot;To teach is to learn twice.&quot;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;When you blog, you have to explain concepts clearly and coherently, which forces you to truly grasp the material. Whether you&apos;re writing about complex algorithms, new technologies, or simple tips and tricks, blogging solidifies your knowledge.&lt;/p&gt;
&lt;p&gt;Every time you sit down to write, it&apos;s like attending a mini bootcamp. You&apos;re researching, organizing your thoughts, and sometimes even learning new things in the process. Over time, this consistent practice can significantly sharpen your skills.&lt;/p&gt;
&lt;p&gt;If writing doesn&apos;t come easily to you, well, that&apos;s another reason to start a blog! &lt;a href=&quot;https://weeklydevtips.com/episodes/040&quot;&gt;If it hurts, do it more often&lt;/a&gt;. The more often you do it, the better and more efficient you&apos;ll become!&lt;/p&gt;
&lt;h2&gt;2. Build Your Personal Brand&lt;/h2&gt;
&lt;p&gt;In today&apos;s digital age, your online presence is more important than ever. A blog is a fantastic way to showcase your expertise, interests, and &lt;em&gt;unique voice&lt;/em&gt;. Imagine someone Googles your name and finds a collection of high-quality, insightful content that you&apos;ve created. That&apos;s a powerful personal brand!&lt;/p&gt;
&lt;p&gt;A well-maintained blog can open doors to job opportunities, speaking engagements, and collaborations that you might not have anticipated. It positions you as an authority in your field and sets you apart from others in the industry. It&apos;s also an excellent way to establish &lt;em&gt;trust&lt;/em&gt;. Having an online presence where you share information about yourself and your expertise in a curated and professional manner is a great way to develop an audience who, over time, will begin to feel like &lt;em&gt;they know you&lt;/em&gt; - even though you&apos;ve never met! Think about some of the folks in our industry you&apos;ve heard, seen, or read and you&apos;ll know what I mean. Videos and podcasts can provide an even closer connection. However, publishing text is often a much easier entry point for developers than jumping into podcasting or YouTube/TikTok...&lt;/p&gt;
&lt;p&gt;Why do you care about your personal brand? Maybe you&apos;re not a consultant or independent developer, but rather you just work at a regular job for some company. That&apos;s fine, but perhaps you&apos;ve noticed that many of those regular jobs keep encountering sweeping and often completely unexpected layoffs in the last few years. If, and hopefully not, but if you were to be impacted by such an event, would you rather be trying to find a new position as a relatively unknown entity (along side everyone else applying for similar positions)? Or would you rather write a blog post announcing your newfound availability and, with a large enough audience, have some confidence that someone would &lt;strong&gt;reach out to you&lt;/strong&gt; with an opportunity to talk about a role in their organization?&lt;/p&gt;
&lt;h2&gt;3. Document Your Learning Journey&lt;/h2&gt;
&lt;p&gt;Blogging is also an excellent way to document your learning journey. We all start somewhere, and having a record of your progress can be incredibly rewarding. Plus, it&apos;s beneficial to others who might be just a few steps behind you in &lt;em&gt;their&lt;/em&gt; learning journey. In fact, if you&apos;ve ever thought &lt;em&gt;&quot;I don&apos;t have anything to say - someone smarter has already written about it&quot;&lt;/em&gt; remember (if nothing else), your content will be more recent than anyone else&apos;s. It&apos;s going to reflect your personal experience. Your assumptions. The latest version of whatever you&apos;re working with. The steps &lt;strong&gt;you&lt;/strong&gt; took to approach and hopefully solve any problems encountered.&lt;/p&gt;
&lt;p&gt;Yes, someone else may be the expert, but a lot of the time beginners learn best from a fellow beginner who just went through the process. And guess what? &lt;strong&gt;There are always a lot more beginners than experts&lt;/strong&gt; so writing content focused on beginners is a great way to reach a larger audience!&lt;/p&gt;
&lt;p&gt;Your early posts might serve as inspiration or guidance for those who are new to the field. It&apos;s a great way to show that learning is a continuous process, and everyone develops at their own pace. Nobody knows everything, and nobody expects you to know everything. Write about things that interest you, including things you&apos;re just starting to investigate, and many others who share that interest will tune in.&lt;/p&gt;
&lt;h2&gt;4. Contribute to the Community&lt;/h2&gt;
&lt;p&gt;The developer community thrives on shared knowledge. We&apos;ve all benefited from tutorials, forums, and blog posts that have helped us solve tough problems or learn something new. By starting your own blog, you can contribute back to this collective pool of resources.&lt;/p&gt;
&lt;p&gt;Your insights and experiences could be exactly what someone else needs to overcome a challenge. It&apos;s a great way to give back to the community that has supported your growth as a developer.&lt;/p&gt;
&lt;h2&gt;5. Help Out Future You&lt;/h2&gt;
&lt;p&gt;Have you ever solved a tricky problem, only to forget the details when you run into it again months or even years later? Blogging is a great way to document the solutions you&apos;ve discovered, creating a personal knowledge base that you can refer back to whenever you need it. I often search for &quot;some topic ardalis&quot; to find things I&apos;ve written about in the past. If you&apos;re already taking notes somewhere (paper, Notion, OneNote, whatever) think of your blog as another place you can take notes, but with the added benefit of being able to search for them later from anywhere &lt;strong&gt;and&lt;/strong&gt; you get all the other benefits in this article! Win-Win!&lt;/p&gt;
&lt;p&gt;By writing about the problems you encounter and the solutions you devise, you&apos;re not just helping others‚Äîyou&apos;re helping your future self. Instead of spending time retracing your steps or searching for that obscure fix you found ages ago, you can simply revisit your own blog and get back on track quickly. It&apos;s like creating a manual for your future self, saving you time and frustration down the road. Future You will thank Present You!&lt;/p&gt;
&lt;h2&gt;6. Improve Your Communication Skills&lt;/h2&gt;
&lt;p&gt;Effective communication is a crucial skill in any profession, and blogging is a great way to practice it. Writing forces you to explain technical concepts in a clear, concise, and engaging way. Over time, this practice will enhance your ability to communicate not just in writing, but also in meetings, presentations, and interviews.&lt;/p&gt;
&lt;p&gt;Improved communication skills can lead to better job performance, stronger leadership abilities, and more effective teamwork. It&apos;s a(nother) win-win!&lt;/p&gt;
&lt;h2&gt;But But But&lt;/h2&gt;
&lt;p&gt;&quot;But... I&apos;m already on social media&quot;&lt;/p&gt;
&lt;p&gt;Social media content, generally, isn&apos;t optimized for long term access. A post you write on Twitter, LinkedIn, or Facebook is unlikely to come up on the first page of Google unless it&apos;s &lt;em&gt;really&lt;/em&gt; popular, even if content is an exact match for the search. Also, there&apos;s nothing to prevent any 3rd party platform from de-listing you, or changing their algorithm to stop featuring you, etc. It&apos;s always better for you to own your own content so this can&apos;t happen.&lt;/p&gt;
&lt;p&gt;&quot;But... I don&apos;t have time&quot;&lt;/p&gt;
&lt;p&gt;This is a common concern, especially when you&apos;re juggling a full-time job, personal projects, and maybe even a family. But here&apos;s the thing‚Äîblogging doesn&apos;t have to consume your life. Start small - write one post a month, or even just a few times a year. The key is consistency, not frequency. Over time, these small efforts add up and can have a big impact. And remember your blog posts don&apos;t have to be a certain number of words. Sometimes a short post (unlike this one) is all you need!&lt;/p&gt;
&lt;p&gt;&quot;But... I&apos;m not a good writer&quot;&lt;/p&gt;
&lt;p&gt;You don&apos;t need to be a professional writer to start a blog. Blogging is about sharing your thoughts, experiences, and knowledge, not about crafting perfect prose. In fact, the more authentic and relatable your voice, the better. Your writing will improve with practice, and the important thing is to get started. Plus, the developer community is generally more interested in the value of your content than your writing style.&lt;/p&gt;
&lt;p&gt;&quot;But... I don&apos;t have anything unique to say&quot;&lt;/p&gt;
&lt;p&gt;You might feel that there&apos;s already so much content out there, and you don&apos;t have anything new to add. But remember, your perspective is unique. The way you explain something might resonate with someone in a way that other content hasn&apos;t. Plus, even if the topic has been covered before, your personal experiences, tips, and insights can provide a fresh take. Don&apos;t underestimate the value of your voice. See point 3 above.&lt;/p&gt;
&lt;p&gt;If you need help coming up with ideas for things to write about, I posted &lt;a href=&quot;https://ardalis.com/5-solid-ways-to-come-up-with-good-blog-post-topics/&quot;&gt;5 Solid Ways to Come Up with Good Blog Post Topics&lt;/a&gt; a few years ago, and I plan on writing an updated version of this soon (since that one doesn&apos;t cover things like AI and how it can help you with your blogging).&lt;/p&gt;
&lt;p&gt;&quot;But... Nobody will read it&quot;&lt;/p&gt;
&lt;p&gt;At first, your blog might not have a large audience, and that&apos;s okay. It takes time to build a readership. However, even if only a few people read your posts, those people could find your content incredibly valuable. And as your blog grows, so will your audience. Focus on creating content that&apos;s useful, and the readers will come. And remember, you can start out by just writing your blog as notes &lt;strong&gt;just for you&lt;/strong&gt;. That&apos;s what I did, and it just so happened that other folks found some of my articles useful, too.&lt;/p&gt;
&lt;p&gt;&quot;But... Blogging is outdated&quot;&lt;/p&gt;
&lt;p&gt;Some might argue that blogging has been replaced by video content or social media, but that&apos;s not true. While these platforms are popular, blogging remains a powerful medium for in-depth content, tutorials, and technical explanations. It&apos;s also highly searchable, which means your content can continue to be discovered long after it&apos;s published. Blogs provide a space for deeper dives into topics that short-form content just can&apos;t cover.&lt;/p&gt;
&lt;p&gt;For developers, blogs provide a great place to share content that has to do with &lt;em&gt;code&lt;/em&gt;. It&apos;s much harder for content consumers to search for or extract code from a video or a podcast. Inlining and explaining code blocks in blogs/text is much easier to consume and understand.&lt;/p&gt;
&lt;h2&gt;Start Your Blog Today&lt;/h2&gt;
&lt;p&gt;If you&apos;ve been thinking about starting a blog, there&apos;s no better time than now. Grab a domain, pick a platform, and start writing. The benefits you&apos;ll gain‚Äîfrom sharpening your skills to building your personal brand‚Äîmake it a worthwhile investment in your career and personal development.&lt;/p&gt;
&lt;p&gt;Don&apos;t let perfect be the enemy of good. If coming up with a domain or figuring out how to blog is slowing you down from writing that first article, just go to &lt;a href=&quot;https://dev.to&quot;&gt;DEV.to&lt;/a&gt; and start there. I highly recommend that you own your own content, including your blog, so I wouldn&apos;t &lt;em&gt;stay&lt;/em&gt; at a third-party site. But it&apos;s a good way to get started. Similarly, anyone in my devBetter program can blog on &lt;a href=&quot;https://blogs.devbetter.com/&quot;&gt;blogs.devbetter.com&lt;/a&gt; at least until they have their own site.&lt;/p&gt;
&lt;p&gt;Blogging might seem daunting at first, but remember, everyone starts somewhere. Your future self will thank you for taking the plunge. So go ahead, start your blog today, and watch how it transforms your journey as a software developer.&lt;/p&gt;
&lt;p&gt;Thanks for reading! If you have any questions or if you&apos;re already blogging, I&apos;d love to hear about your experiences in the comments below. Also, if you have a favorite developer blog that isn&apos;t already listed in the comments below, please share, and feel free to share your own as well! Finally, if you&apos;re interested in learning about how I use AI to support my blogging habit, let me know that as well and I&apos;ll integrate your requests into an upcoming article.&lt;/p&gt;
&lt;p&gt;Happy blogging!&lt;/p&gt;
&lt;h2&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=yRLaoq_q1a8&quot;&gt;You Should Blog (YouTube)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.youtube.com/@Ardalis&quot;&gt;Follow Me on YouTube&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[From Microservices to Modular Monoliths]]></title><description><![CDATA[What do you do when you find yourself in microservice hell? How do you keep the gains you (hopefully) made in breaking up your legacy ball‚Ä¶]]></description><link>https://ardalis.com/from-microservices-to-modular-monoliths/</link><guid isPermaLink="false">https://ardalis.com/from-microservices-to-modular-monoliths/</guid><pubDate>Wed, 10 Jul 2024 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;What do you do when you find yourself in microservice hell? How do you keep the gains you (hopefully) made in breaking up your legacy ball of mud, without having to constantly contend with a massively distributed system? Migrate to a modular monolith.&lt;/p&gt;
&lt;h2&gt;Microservices&lt;/h2&gt;
&lt;p&gt;Microservices have been all the rage for the past several years. They offer a way to break up large, monolithic applications into smaller, more manageable pieces. This can make it easier to scale, deploy, and maintain your application. However, microservices come with their own set of challenges. They can be difficult to manage, especially as the number of services grows. They can also introduce latency and complexity into your system.&lt;/p&gt;
&lt;p&gt;You know who really loves microservices? Cloud hosting companies like Microsoft, Amazon, and Google. They make a lot of money hosting microservices. They also make a lot of money selling you tools to manage your microservices. They make even more money when you have to scale up your microservices to handle the increased load on your system.&lt;/p&gt;
&lt;p&gt;Who else? Consultants. They love microservices. They can charge you a lot of money to help you break up your monolith into microservices. They can charge you even more money to help you manage your microservices. They can charge you even more money to help you scale your microservices.&lt;/p&gt;
&lt;p&gt;And let&apos;s not forget your developers. They love microservices. They get to work on lots of different services. They get to learn lots of different technologies. Most importantly, they get to practice Resume-Driven Development, as they happily add microservices experience to their CVs.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/dinosaur-howareyouwithmicroservices.png&quot; alt=&quot;how are you with microservices?&quot;&gt;&lt;/p&gt;
&lt;h2&gt;Modular Monoliths&lt;/h2&gt;
&lt;p&gt;So what do you do when you find yourself in microservice hell? How do you keep the gains you (hopefully) made in breaking up your legacy ball of mud, without having to constantly contend with a massively distributed system?&lt;/p&gt;
&lt;p&gt;It may be time to (re)consider the modular monolith.&lt;/p&gt;
&lt;p&gt;A modular monolith is a monolithic application that is broken up into modules. Each module is responsible for a specific part of the application. Modules can communicate with each other through well-defined interfaces. This allows you to keep the benefits of a monolithic architecture, while still being able to break up your application into smaller, more manageable pieces.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/modular-monoliths-vs-microservices-graph.png&quot; alt=&quot;modularity vs number of deployed applications&quot;&gt;&lt;/p&gt;
&lt;p&gt;Yes, you&apos;ll still need to deal with some complexity inherent to modularity, such as ensuring modules remain independent while still being able to communicate with one another efficiently. But you&apos;ll avoid having to deal with the &lt;a href=&quot;https://en.wikipedia.org/wiki/Fallacies_of_distributed_computing&quot;&gt;fallacies of distributed computing&lt;/a&gt;, such as network latency, bandwidth, and failure.&lt;/p&gt;
&lt;h2&gt;From Microservices to Modular Monoliths&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://dometrain.com/course/from-zero-to-hero-microservices-to-modular-monoliths/&quot;&gt;&lt;img src=&quot;/img/micro-to-mod.jpg&quot; alt=&quot;Microservices to Modular Monoliths - From Zero to Hero&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Migrating from microservices to a modular monolith is not a trivial task. It will require careful planning and execution.&lt;/p&gt;
&lt;p&gt;I&apos;ve authored a short course on &lt;a href=&quot;https://dometrain.com/author/steve-ardalis-smith/&quot;&gt;Dometrain&lt;/a&gt; (where I also have two courses on building modular monoliths in .NET) that covers this topic in more detail. You can check it out here: &lt;a href=&quot;https://dometrain.com/course/from-zero-to-hero-microservices-to-modular-monoliths/&quot;&gt;From Microservices to Modular Monoliths&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Use code &lt;strong&gt;SUMMER24&lt;/strong&gt; to get 30% off until July 14th, 2024.&lt;/p&gt;
&lt;h2&gt;Keep Up With Me&lt;/h2&gt;
&lt;p&gt;If you&apos;re looking for more content from me in your inbox &lt;a href=&quot;/tips&quot;&gt;subscribe to my weekly tips newsletter&lt;/a&gt; and be sure to follow me on &lt;a href=&quot;https://www.youtube.com/ardalis?sub_confirmation=1&quot;&gt;YouTube&lt;/a&gt;.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Modeling Navigation Properties Between Aggregates or Modules]]></title><description><![CDATA[One of the key challenges in developing a modular monolith is managing the communication between different modules, especially when it comes‚Ä¶]]></description><link>https://ardalis.com/navigation-properties-between-aggregates-modules/</link><guid isPermaLink="false">https://ardalis.com/navigation-properties-between-aggregates-modules/</guid><pubDate>Wed, 19 Jun 2024 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;One of the key challenges in developing a modular monolith is managing the communication between different modules, especially when it comes to handling data dependencies across module boundaries. Recently, I received an interesting question from one of the students of &lt;a href=&quot;https://dometrain.com/bundle/from-zero-to-hero-modular-monoliths-in-dotnet/&quot;&gt;my modular monoliths course&lt;/a&gt;, which I thought others might appreciate.&lt;/p&gt;
&lt;h2&gt;Student Query&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Modular Monolith course question (EFCore Navigation Properties)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Message:
&lt;em&gt;Hi Steve,&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Just got done with your modular monoliths course and loved it. I have a question about how navigation properties work inside each module using EFCore.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Let&apos;s say I have an entity called Booking, that has a foreign key to a CustomerId, how would I map that using EFCore&apos;s &lt;code class=&quot;language-text&quot;&gt;EntityTypeBuilder&lt;/code&gt;? I could usually do:&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;csharp&quot;&gt;&lt;pre class=&quot;language-csharp&quot;&gt;&lt;code class=&quot;language-csharp&quot;&gt;builder&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token generic-method&quot;&gt;&lt;span class=&quot;token function&quot;&gt;HasOne&lt;/span&gt;&lt;span class=&quot;token generic class-name&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;Customer&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;WithMany&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;HasForeignKey&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;booking &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; booking&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;CustomerId&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;IsRequired&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;However this doesn&apos;t work, as the Customer entity is in another module so I cannot reference it as the navigation property?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Just wondering if you had the answer to this, as i&apos;m struggling to understand it.&lt;/em&gt;&lt;/p&gt;
&lt;h3&gt;My Response&lt;/h3&gt;
&lt;p&gt;Hi &lt;em&gt;NAME&lt;/em&gt;,&lt;/p&gt;
&lt;p&gt;Yes, it&apos;s a common question, so don&apos;t feel bad about having it. :)&lt;/p&gt;
&lt;p&gt;There are a few ways to look at it but the key is to reframe how you think about related data that belongs to a different module. It&apos;s natural to think about that data as being all part of &quot;your&quot; application and its data store, and as such to use conveniences like navigation properties and, at the database level, tools like foreign keys to ensure referential integrity. While sometimes you can get away with this (if you opt to use a single database for all of your modules, for instance), it&apos;s a tradeoff and always sacrifices independence for that convenience.&lt;/p&gt;
&lt;p&gt;Imagine instead that the data owned by other modules is outside not just that module but outside your organization. You&apos;re trying to link to a Customer in this example, via a CustomerId. Well, pretend that the Customer record actually lives in a Salesforce.com CRM (or some other external CRM) and all you have is its key/ID. Sure, if you need info on that customer, you can always make an API call to Salesforce to fetch their data. But you&apos;re not going to perform a database join on it, because you don&apos;t own that data locally. Does that make sense?&lt;/p&gt;
&lt;p&gt;So, the short answer is, &lt;em&gt;don&apos;t use navigation properties for entities that live outside your module&lt;/em&gt;. Instead always just use keys, and then use a strategy to get the data like you saw me do in &lt;a href=&quot;https://dometrain.com/bundle/from-zero-to-hero-modular-monoliths-in-dotnet/&quot;&gt;the course&lt;/a&gt;. You can use MediatR queries to make in-process calls to fetch data as-needed between modules. And if you &lt;em&gt;really&lt;/em&gt; want to have the data locally in your database, you can use the &lt;a href=&quot;https://learn.microsoft.com/en-us/azure/architecture/patterns/materialized-view&quot;&gt;Materialized View pattern&lt;/a&gt; that I demonstrated to keep a local copy of another module&apos;s data in your database (and keep it synchronized using events or another strategy). At that point you &lt;em&gt;can&lt;/em&gt; have navigation properties and perform joins on that data, but you should take care not to modify any of the data in the MV because it&apos;s essentially a read-only cache. If you need to make changes, send a command to the module that owns that data.&lt;/p&gt;
&lt;p&gt;Hopefully that helps,
Steve&lt;/p&gt;
&lt;h2&gt;Student Response&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Hi Steve,&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Thanks for getting back to me so quickly and really appreciate the thorough response.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;That totally makes sense to me now!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;I think what helped me grasp it was changing my mindset on where the other modules could potentially be stored.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Makes complete sense to not have any hard dependencies on other modules (basically modular monolith 101).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Much appreciated and look forward to any future content you put out!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;Whenever you&apos;re segmenting your application into discrete parts, whether these are &lt;a href=&quot;https://deviq.com/domain-driven-design/aggregate-pattern&quot;&gt;DDD Aggregates&lt;/a&gt; or Modules in a &lt;a href=&quot;https://dometrain.com/bundle/from-zero-to-hero-modular-monoliths-in-dotnet/&quot;&gt;Modular Monolith&lt;/a&gt;, you&apos;re going to want to isolate data dependencies between the parts. One way this manifests is in your design of your domain entities. With Aggregates, a general good practice to follow is to only have navigation properties flowing in &lt;strong&gt;only&lt;/strong&gt; one direction from the root to its children (and if necessary, their children). If you follow this advice, your modules will automatically be fine, since there will never be a child of an aggregate defined in a separate module from the aggregate&apos;s root. But in any case, data that is outside of an aggregate or module should only be referenced using its key or ID, not as a navigation property.&lt;/p&gt;
&lt;p&gt;Note that if, for performance or other reasons, you need to have local access to related data that is owned by another module or system, you can use the Materialized View pattern to keep a local read-only cache of the data you need. And then when it makes sense you can join on this data or include it in EF queries using navigation properties.&lt;/p&gt;
&lt;h3&gt;References&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://ardalis.com/effectively-sharing-resources-between-modules-modular-monolith/&quot;&gt;Effectively Sharing Resources Between Modules in a Modular Monolith&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://learn.microsoft.com/en-us/azure/architecture/patterns/materialized-view&quot;&gt;Materialized View pattern&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Keep Up With Me&lt;/h2&gt;
&lt;p&gt;If you&apos;re looking for more content from me in your inbox &lt;a href=&quot;/tips&quot;&gt;subscribe to my weekly tips newsletter&lt;/a&gt; and be sure to follow me on &lt;a href=&quot;https://www.youtube.com/ardalis?sub_confirmation=1&quot;&gt;YouTube&lt;/a&gt;.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Comparing Unit Testable Code with Maintainable Code]]></title><description><![CDATA[Writing maintainable code should be a goal in most software engineering projects. Although definitions and especially hard measurements of‚Ä¶]]></description><link>https://ardalis.com/comparing-unit-testable-code-with-maintainable-code/</link><guid isPermaLink="false">https://ardalis.com/comparing-unit-testable-code-with-maintainable-code/</guid><pubDate>Wed, 12 Jun 2024 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Writing maintainable code should be a goal in most software engineering projects. Although definitions and especially hard measurements of what maintainable means with regard to software may vary, it can be useful to compare maintainable code to the much more easily verified unit testability of that code.&lt;/p&gt;
&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;When discussing software quality, two important concepts often arise: unit testable code and maintainable code. While these concepts are distinct, they share many characteristics. This article explores the overlap between unit testable code and maintainable code in C#, highlighting how striving for one often leads to achieving the other.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/unit-testable-maintainable-code.png&quot; alt=&quot;venn diagram of unit testable code and maintainable code&quot;&gt;&lt;/p&gt;
&lt;h2&gt;Characteristics of Unit Testable Code&lt;/h2&gt;
&lt;p&gt;Unit testable code is designed to be easily and effectively tested in isolation. Key characteristics include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Loose Coupling&lt;/strong&gt;: Dependencies are minimized and managed through interfaces or dependency injection.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Single Responsibility&lt;/strong&gt;: Each class or method has a single responsibility, making it easier to test.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Minimal External Dependencies&lt;/strong&gt;: Code avoids direct dependencies on external systems (e.g., databases, file systems) during tests.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Deterministic Behavior&lt;/strong&gt;: Code produces consistent results, which is crucial for repeatable tests.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Testable Design Patterns&lt;/strong&gt;: Use of design patterns like Dependency Injection (DI) and Inversion of Control (IoC) to facilitate testing.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Fast&lt;/strong&gt;: Unit tests are incredibly fast to run and typically should be capable of being run in parallel to optimize for speed of execution.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Characteristics of Maintainable Code&lt;/h2&gt;
&lt;p&gt;Maintainable code is designed to be easily understood, modified, and extended. Key characteristics include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Readability&lt;/strong&gt;: Code is easy to read and understand.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Modularity&lt;/strong&gt;: Code is divided into distinct, loosely-coupled modules, each with a clear purpose.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Consistency&lt;/strong&gt;: Code follows consistent naming conventions and coding standards.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Documentation&lt;/strong&gt;: Code is well-documented, making it easier for others to understand its purpose and functionality.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Test Coverage&lt;/strong&gt;: Code is well-tested, ensuring that changes do not introduce new bugs.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Overlap Between Unit Testable Code and Maintainable Code&lt;/h2&gt;
&lt;p&gt;The overlap between unit testable code and maintainable code includes the following aspects:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Loose Coupling and Single Responsibility&lt;/strong&gt;: Both characteristics enhance readability, maintainability, and testability.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Minimal External Dependencies&lt;/strong&gt;: Reduces complexity and makes code more robust and easier to test and maintain.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Deterministic Behavior&lt;/strong&gt;: Ensures reliability and predictability, essential for both quality and maintainability.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Testable Design Patterns&lt;/strong&gt;: Encourage best practices that improve code quality and maintainability.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Code Example&lt;/h2&gt;
&lt;h3&gt;Tightly Coupled Code (Difficult to Test and Maintain)&lt;/h3&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;csharp&quot;&gt;&lt;pre class=&quot;language-csharp&quot;&gt;&lt;code class=&quot;language-csharp&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;FileLogger&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;string&lt;/span&gt;&lt;/span&gt; message&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        System&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;IO&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;File&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;WriteAllText&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;log.txt&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; message&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;OrderProcessor&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;readonly&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;FileLogger&lt;/span&gt; _logger &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token constructor-invocation class-name&quot;&gt;FileLogger&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;ProcessOrder&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Order&lt;/span&gt; order&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token comment&quot;&gt;// Logic required to process the order&lt;/span&gt;

        _logger&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Order processed: &quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; order&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Id&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The above code example is difficult to unit test because of the direct dependency on the &lt;code class=&quot;language-text&quot;&gt;FileLogger&lt;/code&gt; type, resulting in tight coupling (remember, &lt;a href=&quot;/new-is-glue&quot;&gt;New is Glue&lt;/a&gt;). Any attempt to unit test the &lt;code class=&quot;language-text&quot;&gt;ProcessOrder&lt;/code&gt; method (running to its completion, and thus hitting the logger call) will fail if the test cannot access the log.txt file. Tests run in parallel are likely to result in file access errors, as well.&lt;/p&gt;
&lt;p&gt;Aside from testing concerns, the above code cannot take advantage of alternative file stores, such as Azure Blob Storage or Amazon S3, not to mention redirecting log output to other locations, as may be desirable in various environments.&lt;/p&gt;
&lt;h3&gt;Loosely Coupled Code (Easy to Test and Maintain)&lt;/h3&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;csharp&quot;&gt;&lt;pre class=&quot;language-csharp&quot;&gt;&lt;code class=&quot;language-csharp&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ILogger&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token return-type class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;string&lt;/span&gt;&lt;/span&gt; message&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;FileLogger&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token type-list&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;ILogger&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;string&lt;/span&gt;&lt;/span&gt; message&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        System&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;IO&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;File&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;WriteAllText&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;log.txt&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; message&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;OrderProcessor&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;readonly&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ILogger&lt;/span&gt; _logger&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;OrderProcessor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;ILogger&lt;/span&gt; logger&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        _logger &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; logger&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;ProcessOrder&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Order&lt;/span&gt; order&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token comment&quot;&gt;// Process the order&lt;/span&gt;
        _logger&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Order processed: &quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; order&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Id&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Notice that the above &lt;code class=&quot;language-text&quot;&gt;OrderProcessor&lt;/code&gt; version doesn&apos;t include any instance of the &lt;code class=&quot;language-text&quot;&gt;new&lt;/code&gt; keyword. Instead if follows the Explicit Dependencies Principle and clearly informs anyone calling or simply reading this class that it requires a logger of type &lt;code class=&quot;language-text&quot;&gt;ILogger&lt;/code&gt;, which is an incredibly simple abstraction.&lt;/p&gt;
&lt;p&gt;As you&apos;ll see below, it&apos;s now trivial to test the &lt;code class=&quot;language-text&quot;&gt;ProcessOrder&lt;/code&gt; method, and also trivial to swap out the file logger implementation with any number of alternative loggers (or even several using a &lt;a href=&quot;https://deviq.com/design-patterns/decorator-pattern&quot;&gt;Decorator&lt;/a&gt; or &lt;a href=&quot;https://deviq.com/design-patterns/chain-of-responsibility-pattern&quot;&gt;Chain of Responsibility pattern&lt;/a&gt;). The resulting code is much more extensible with zero additional cyclomatic complexity and only one additional interface type.&lt;/p&gt;
&lt;h3&gt;Unit Test for Loosely Coupled Code&lt;/h3&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;csharp&quot;&gt;&lt;pre class=&quot;language-csharp&quot;&gt;&lt;code class=&quot;language-csharp&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;FakeLogger&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token type-list&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;ILogger&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;string&lt;/span&gt;&lt;/span&gt; LoggedMessage &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;string&lt;/span&gt;&lt;/span&gt; message&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        LoggedMessage &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; message&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;OrderProcessorTests&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token attribute&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;Fact&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;ProcessOrder_LogsOrderProcessedMessage&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token comment&quot;&gt;// Arrange&lt;/span&gt;
        &lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt;&lt;/span&gt; fakeLogger &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token constructor-invocation class-name&quot;&gt;FakeLogger&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt;&lt;/span&gt; processor &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token constructor-invocation class-name&quot;&gt;OrderProcessor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;fakeLogger&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt;&lt;/span&gt; order &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token constructor-invocation class-name&quot;&gt;Order&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; Id &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;123&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;token comment&quot;&gt;// Act&lt;/span&gt;
        processor&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;ProcessOrder&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;order&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;token comment&quot;&gt;// Assert&lt;/span&gt;
        Assert&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Equal&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Order processed: 123&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; fakeLogger&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;LoggedMessage&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Striving for unit testable code often results in maintainable code. By focusing on loose coupling, single responsibility, minimal external dependencies, and deterministic behavior, developers can achieve code that is both easy to test and maintain. Incorporating testable design patterns further ensures code quality, making it more robust and scalable.&lt;/p&gt;
&lt;h2&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://martinfowler.com/articles/injection.html&quot;&gt;Martin Fowler: Inversion of Control Containers and the Dependency Injection pattern&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.oreilly.com/library/view/clean-architecture-a/9780134494272/&quot;&gt;Robert C. Martin: Clean Architecture: A Craftsman&apos;s Guide to Software Structure and Design&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/core/testing/&quot;&gt;Microsoft Docs: Unit Testing in .NET&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Keep Up With Me&lt;/h2&gt;
&lt;p&gt;If you&apos;re looking for more content from me in your inbox &lt;a href=&quot;/tips&quot;&gt;subscribe to my weekly tips newsletter&lt;/a&gt; and be sure to follow me on &lt;a href=&quot;https://www.youtube.com/ardalis?sub_confirmation=1&quot;&gt;YouTube&lt;/a&gt;.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Effectively Sharing Resources Between Modules in a Modular Monolith]]></title><description><![CDATA[One of the key challenges in developing a modular monolith is managing the communication between different modules, especially when it comes‚Ä¶]]></description><link>https://ardalis.com/effectively-sharing-resources-between-modules-modular-monolith/</link><guid isPermaLink="false">https://ardalis.com/effectively-sharing-resources-between-modules-modular-monolith/</guid><pubDate>Fri, 24 May 2024 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;One of the key challenges in developing a modular monolith is managing the communication between different modules, especially when it comes to handling data dependencies across module boundaries. Recently, I received an interesting question from one of the students of &lt;a href=&quot;https://dometrain.com/bundle/from-zero-to-hero-modular-monoliths-in-dotnet/&quot;&gt;my modular monoliths course&lt;/a&gt;, which I thought others might appreciate.&lt;/p&gt;
&lt;h2&gt;Student Query&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Hi Steve, I have another question for you after finishing the deep dive course. Let&apos;s say that now I have multiple modules, each of them with IDs of other entities in their domain. I don&apos;t want to serve data from module A in module B, so I just return the ID to the consumer and let them call module A with it. The problem is that following this pattern, the consumer could be forced to do a lot of calls just to jump between our domains. Could it make sense to implement an API Gateway? How could it be implemented in a modular monolith environment?&lt;/em&gt;&lt;/p&gt;
&lt;h3&gt;My Response&lt;/h3&gt;
&lt;p&gt;If you have a single client, like a SPA (Angular, React, Blazor), I would typically use the Backend-For-Frontend (BFF) pattern, which can be implemented either as its own separate project or simply configured as an API Gateway (using something like &lt;a href=&quot;https://learn.microsoft.com/en-us/azure/api-management/api-management-key-concepts#api-gateway&quot;&gt;Azure API Gateway&lt;/a&gt; or something as simple as &lt;a href=&quot;https://microsoft.github.io/reverse-proxy/&quot;&gt;YARP&lt;/a&gt;). In microservices architectures, it&apos;s usually a separate standalone instance that has access to the public internet while the rest of the services are behind the firewall. In a modular monolith scenario, it would typically be the same ‚Äî a separate instance.&lt;/p&gt;
&lt;p&gt;The tradeoff you&apos;re making is between modularity/coupling and performance. If you just pass an ID all the way to the client, and then it needs to make a new call to get the details for that record, it&apos;s another round trip compared to if you just gave it the data directly. This is a minor problem if it&apos;s just one thing, but it gets much worse if it&apos;s a collection of things (the &lt;a href=&quot;https://stackoverflow.com/questions/97197/what-is-the-n1-selects-problem-in-orm-object-relational-mapping&quot;&gt;classic N+1 problem&lt;/a&gt; but via APIs not database queries).&lt;/p&gt;
&lt;p&gt;My usual approach is to not worry about the performance problems prematurely, but once you can see (and ideally measure!) them, take some steps to mitigate them. These steps include some usual suspects and some unique to this problem:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Add Indexes&lt;/strong&gt;: Ensure fetching the data is as fast as you can easily make it. Optimized database queries can significantly reduce the latency of data retrieval.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Read Store Optimization&lt;/strong&gt;: Consider having a separate read store that&apos;s optimized for queries. This store can be updated asynchronously from the main data store.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Server Caching&lt;/strong&gt;: Implement server-side caching. It&apos;s always faster to serve data from memory than to fetch it from a database. Use an in-memory cache or a separate service like Redis.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Materialized Views&lt;/strong&gt;: Add a materialized view to module A containing module B&apos;s data. When module A returns data referencing module B items, it can (optionally, with an API parameter specifying the extra data should be pulled back) include those items in its payload directly without the need for any server-side communication (and also eliminating the need for any client-side fetches for the module B items).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Batch Fetching&lt;/strong&gt;: Add APIs for fetching multiple IDs at a time. For instance, when module A returns 10 records and those 10 records include references to 10 module B IDs, those 10 records can be fetched with one call to module B.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;By implementing these strategies, you can maintain the modularity of your monolith while also mitigating potential performance issues that arise from cross-module data dependencies.&lt;/p&gt;
&lt;p&gt;Does that make sense?&lt;/p&gt;
&lt;h2&gt;Student Response&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Steve, you‚Äôre simply the best. Thanks for the detailed answer, everything makes sense. Have a wonderful day!&lt;/em&gt;&lt;/p&gt;
&lt;h3&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;It&apos;s worth considering how the client of your APIs will consume them, and how it may be necessary for it to make separate calls to fetch the details of any associated IDs you include in your payloads. It&apos;s always a tradeoff in API design between sending too much or too little data, and &lt;a href=&quot;https://ardalis.com/data-deficient-messages&quot;&gt;data deficient messages&lt;/a&gt; are a common problem.&lt;/p&gt;
&lt;p&gt;By leveraging patterns such as BFF (which lets you customize your APIs and their messages specifically to suit the needs of your client), server caching, and optimized data fetching techniques, you can achieve a balance between modular design and system performance.&lt;/p&gt;
&lt;h3&gt;References&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/azure/architecture/patterns/backends-for-frontends&quot;&gt;Backend For Frontend Pattern&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.miclocrosoft.com/en-us/azure/architecture/best-practices/caching&quot;&gt;Caching Guidance&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://learn.microsoft.com/en-us/azure/architecture/patterns/materialized-view&quot;&gt;Materialized Views&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://martinfowler.com/bliki/CQRS.html&quot;&gt;Optimizing Read Stores - CQRS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://microservices.io/patterns/apigateway.html&quot;&gt;API Gateway Pattern&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Keep Up With Me&lt;/h2&gt;
&lt;p&gt;If you&apos;re looking for more content from me in your inbox &lt;a href=&quot;/tips&quot;&gt;subscribe to my weekly tips newsletter&lt;/a&gt; and be sure to follow me on &lt;a href=&quot;https://www.youtube.com/ardalis?sub_confirmation=1&quot;&gt;YouTube&lt;/a&gt;.&lt;/p&gt;</content:encoded></item></channel></rss>