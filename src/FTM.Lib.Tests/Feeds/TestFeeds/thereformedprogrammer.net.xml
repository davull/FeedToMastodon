<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>The Reformed Programmer</title>
	<atom:link href="https://www.thereformedprogrammer.net/feed/" rel="self" type="application/rss+xml" />
	<link>https://www.thereformedprogrammer.net</link>
	<description>I am a freelance .NET Core back-end developer</description>
	<lastBuildDate>Thu, 09 Jan 2025 08:47:52 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=6.8.1</generator>
	<item>
		<title>A detailed look at EF Core’s JSON Columns feature</title>
		<link>https://www.thereformedprogrammer.net/a-detailed-look-at-ef-cores-json-column-feature/</link>
					<comments>https://www.thereformedprogrammer.net/a-detailed-look-at-ef-cores-json-column-feature/#comments</comments>
		
		<dc:creator><![CDATA[Jon P Smith]]></dc:creator>
		<pubDate>Tue, 07 Jan 2025 16:47:31 +0000</pubDate>
				<category><![CDATA[.NET Core]]></category>
		<category><![CDATA[Entity Framework]]></category>
		<category><![CDATA[Performance]]></category>
		<category><![CDATA[EF Core]]></category>
		<category><![CDATA[JSON]]></category>
		<guid isPermaLink="false">https://www.thereformedprogrammer.net/?p=2970</guid>

					<description><![CDATA[Some developers used EF Core JSON Columns in their DbContext when using my EfCore.SchemaCompare library, then &#8230; <a href="https://www.thereformedprogrammer.net/a-detailed-look-at-ef-cores-json-column-feature/" class="more-link">Continue reading <span class="screen-reader-text">A detailed look at EF Core’s JSON Columns feature</span></a>]]></description>
										<content:encoded><![CDATA[
<p>Some developers used EF Core <a href="https://learn.microsoft.com/en-us/ef/core/what-is-new/ef-core-7.0/whatsnew#json-columns">JSON Columns</a> in their DbContext when using my <a href="https://github.com/JonPSmith/EfCore.SchemaCompare">EfCore.SchemaCompare</a> library, then they had a problem. That’s because I hadn’t added support for <a href="https://learn.microsoft.com/en-us/ef/core/what-is-new/ef-core-7.0/whatsnew#json-columns">JSON Columns</a> to my <a href="https://github.com/JonPSmith/EfCore.SchemaCompare">EfCore.SchemaCompare</a> library (this library compares a EF Core&#8217;s Model of the database against a database&#8217;s schema). When I added support for JSON Columns feature to the library, I found it had a rather complex internal design. In fact <a href="https://github.com/roji">Shay Rojansky</a> talks about this complex design in the EF Core 9 release EF Core community standup (<a href="https://youtu.be/wG8D5HJMzjA?t=862">click this</a> to hear what he says) and they want to improve it in EF Core 10.</p>



<p>So the combination of a complex design, not much documentation, and my <a href="https://www.cdc.gov/aging/dementia/index.html">dementia</a> (See the <a href="https://www.thereformedprogrammer.net/a-detailed-look-at-ef-cores-json-column-feature/#endnote-dementia-and-programming"><em>ENDNOTE&nbsp;dementia and</em> programming</a> section at the end of this article) made it pretty hard for me to work out what to do. Thankfully the EF Core team responded to <a href="https://github.com/dotnet/efcore/issues/34568">my issue</a>, which helped me a lot.</p>



<p>So, I decided to create this article to provide more documentation to help other developers when using JSON Columns. The article compares the EF Core normal approach of using SQL Tables, columns, Indexes, etc., (shortened to “Tables/Indexes approach” in this article) against the JSON Columns approach so that you can compare / contrast the two approaches.</p>



<h2 class="wp-block-heading">TL;DR; – Summary of this article</h2>



<ul class="wp-block-list">
<li>EF Core added a feature called <a href="https://learn.microsoft.com/en-us/ef/core/what-is-new/ef-core-7.0/whatsnew#json-columns">JSON Columns</a> in .NET 7, which stores data in an JSON string, and was also updated in EF Core’s .NET 8 release.</li>



<li>This article compares the JSON Columns approach against the normal Tables/Indexes approach.</li>



<li>I use a &#8220;list of books&#8221; app using both the JSON Columns approach and the Tables/Indexes approach</li>



<li>The way relationships are configured and stored are different &#8211; The JSON Columns&#8217; relationships are held inside the its JSON string, while the the Tables/Indexes approach has multiple tables, linked by Indexes.</li>



<li>The create and read of both approaches are (nearly) the same, while selecting particular entries is different in the two approaches.</li>



<li>There is a large section looking at the performance of eight tasks with different numbers of the entities to give you an idea where JSON Columns would work in your application.</li>



<li>At the end I give you my, and EF Core&#8217;s, view of what sort of data that works with JSON Columns: The data must be “Coherent”,&nbsp; i.e. there no links outside the data. Logging data is one example where JSON Columns would work well.</li>
</ul>



<h2 class="wp-block-heading">Introduction of storing data in a database using JSON</h2>



<p>JSON (Full name: JavaScript Object Notation) is a lightweight format for storing and transporting data in strings. The JSON’s format has a beautifully simple design, which makes it easy to understand and use. JSON is used everywhere, for instance Web Applications to send data from the server to the client and to send back inputs from the client.</p>



<p>I also used JSON in my early use of EF Core by using the JsonSerializer.Serialize and JsonSerializer.Deserialize methods to store data in a database. But in the <a href="https://learn.microsoft.com/en-us/ef/core/what-is-new/ef-core-7.0/whatsnew#json-columns">.NET 7 release of EF Core</a> added dedicated code to convert data into a JSON string (this is known as “JSON Columns” in EF Core). In&nbsp; <a href="https://learn.microsoft.com/en-us/ef/core/what-is-new/ef-core-8.0/whatsnew#enhancements-to-json-column-mapping">.NET 8 release of EF Core</a> to improve its performance and added JSON Columns to SQLite. And <a href="https://github.com/roji">Shay Rojansky</a>, who is part of the EF Core team, said they will improve how JSON Columns in .NET 10 EF Core.</p>



<p>The JSON Columns feature allows you to put some code in your EF Core’s DbContext’s OnModelCreating method to automatically convert a class’s properties into a JSON string. It also allows multiple classes, including relationships, to be stored in one JSON string.</p>



<p>The <a href="https://learn.microsoft.com/en-us/ef/core/what-is-new/ef-core-7.0/whatsnew#json-columns">.NET 7 what’s new JSON Columns section</a> says “JSON columns allow relational databases to take on some of the characteristics of document databases, creating a useful hybrid between the two.“ JSON Columns can contain any basic types: e.g., string, int, bool, DateTime and relationships, although JSON Columns’ relationships are handed differently to the normal Tables / Index approach.</p>



<h2 class="wp-block-heading">Creating an example application</h2>



<p>I wanted an example application that to covers relationships, configured, read/write and performance. I also I wanted an application that both the Tables/Indexes approach and JSON Columns approach can use. I choose a “list of books” app (think a very simple Amazon book app).</p>



<p>I have to say that the “list of books” app is NOT something that I would build using JSON Columns, but it does show all the JSON Columns’ relationships. Also, the “list of books” app provides a good way to compare the JSON Columns’ performance against the Tables/Indexes approach.</p>



<blockquote class="wp-block-quote is-layout-flow wp-block-quote-is-layout-flow">
<p>NOTE: I used a “list of books” app in my <a href="https://bit.ly/EfCoreBookEd2">Entity Framework Core in Action</a> (2nd. Edition). In chapter 2 I used the “list of books” app to show the main types of EF Core’s relations, and in <a href="https://www.thereformedprogrammer.net/five-levels-of-performance-tuning-for-an-ef-core-query/#the-book-app-and-its-features">chapter 15 looked at performance</a> and <a href="https://www.thereformedprogrammer.net/an-in-depth-study-of-cosmos-db-and-ef-core-3-0-database-provider/">chapter 16 using Cosmos DB</a>.</p>
</blockquote>



<p>I created a GitHub called&nbsp; <a href="https://github.com/JonPSmith/ExploringJsonColumns/tree/main">ExploringJsonColumns</a> which holds the code to check that the code was correct, and also to run performance tests to compare the two approaches. The sections in this article are:</p>



<ol class="wp-block-list">
<li><a href="https://www.thereformedprogrammer.net/a-detailed-look-at-ef-cores-json-column-feature/#1-an-overview-of-the-list-of-books-data">An overview of the “list of books” data</a></li>



<li><a href="https://www.thereformedprogrammer.net/a-detailed-look-at-ef-cores-json-column-feature/#2-the-relationships-and-how-they-are-configured">The relationships and how they are configured</a></li>



<li><a href="https://www.thereformedprogrammer.net/a-detailed-look-at-ef-cores-json-column-feature/#4-writing-into-the-database">Writing into the database</a></li>



<li><a href="https://www.thereformedprogrammer.net/a-detailed-look-at-ef-cores-json-column-feature/#5-selecting-data-from-the-database">Selecting data from the database</a></li>



<li><a href="https://www.thereformedprogrammer.net/a-detailed-look-at-ef-cores-json-column-feature/#6-reading-data-from-the-database">Reading data from the database</a></li>



<li><a href="https://www.thereformedprogrammer.net/a-detailed-look-at-ef-cores-json-column-feature/#4-performance-comparisons">Performance comparisons</a></li>



<li><a href="https://www.thereformedprogrammer.net/a-detailed-look-at-ef-cores-json-column-feature/#5-my-thoughts-on-where-json-columns-are-a-good-fit">My thoughts on where JSON Columns are a good fit</a></li>
</ol>



<h2 class="wp-block-heading">1. An overview of the “list of books” data</h2>



<p>My <a href="https://github.com/JonPSmith/ExploringJsonColumns">ExploringJsonColumns</a> solution holds two versions of the “list of books” app code: one using the normal Tables/Indexes approach and the other the JSON Columns approach, and provides the same output into common class called <a href="https://github.com/JonPSmith/ExploringJsonColumns/blob/main/Test/Dtos/BookListDto.cs">BookListDto</a> (The BookListDto class contains all the data to show a book’s details, e.g., book title, author(s), price, star ratings, etc.. This ensures that we can compare their performances the results because both approaches are the same data. The screenshot below shows one (fictional) book showing the book&#8217;s data.</p>


<div class="wp-block-image">
<figure class="aligncenter size-full"><a href="https://www.thereformedprogrammer.net/wp-content/uploads/2025/01/BookDisplay.png"><img fetchpriority="high" decoding="async" width="516" height="154" src="https://www.thereformedprogrammer.net/wp-content/uploads/2025/01/BookDisplay.png" alt="" class="wp-image-2971" srcset="https://www.thereformedprogrammer.net/wp-content/uploads/2025/01/BookDisplay.png 516w, https://www.thereformedprogrammer.net/wp-content/uploads/2025/01/BookDisplay-300x90.png 300w" sizes="(max-width: 516px) 100vw, 516px" /></a></figure></div>


<h3 class="wp-block-heading">2. The relationships and how they are configured</h3>



<p>The “list of books” app has the three types of relationships, and the diagram below shows the Tables/Indexes approach on the left and the JSON Columns approach on the right.</p>



<p class="has-text-align-center"><strong><em>NOTE: click on the picture below to get a bigger picture.</em></strong></p>



<figure class="wp-block-image size-large"><a href="https://www.thereformedprogrammer.net/wp-content/uploads/2025/01/Ef-Core-TwoWaysToStoreDate.png"><img decoding="async" width="1024" height="382" src="https://www.thereformedprogrammer.net/wp-content/uploads/2025/01/Ef-Core-TwoWaysToStoreDate-1024x382.png" alt="" class="wp-image-2972" srcset="https://www.thereformedprogrammer.net/wp-content/uploads/2025/01/Ef-Core-TwoWaysToStoreDate-1024x382.png 1024w, https://www.thereformedprogrammer.net/wp-content/uploads/2025/01/Ef-Core-TwoWaysToStoreDate-300x112.png 300w, https://www.thereformedprogrammer.net/wp-content/uploads/2025/01/Ef-Core-TwoWaysToStoreDate-768x286.png 768w, https://www.thereformedprogrammer.net/wp-content/uploads/2025/01/Ef-Core-TwoWaysToStoreDate.png 1368w" sizes="(max-width: 1024px) 100vw, 1024px" /></a></figure>



<figure class="wp-block-table"><table class="has-fixed-layout"><tbody><tr><td>See Tables/Indexes classes in <a href="https://github.com/JonPSmith/ExploringJsonColumns/tree/main/DataLayer/SqlBookClasses">this folder</a>.</td><td>See JSON Columns classes in <a href="https://github.com/JonPSmith/ExploringJsonColumns/tree/main/DataLayer/JsonBookClasses">this folder</a>.</td></tr></tbody></table></figure>



<p>The JSON Columns part of the diagram above isn’t as clear as the Tables/Indexes approach, so the screenshot below shows the JSON in the BookData’s nvarchar(max) string.</p>



<figure class="wp-block-image size-full"><a href="https://www.thereformedprogrammer.net/wp-content/uploads/2025/01/QuantumNetworkingJsonString-1.png"><img decoding="async" width="730" height="585" src="https://www.thereformedprogrammer.net/wp-content/uploads/2025/01/QuantumNetworkingJsonString-1.png" alt="" class="wp-image-2974" srcset="https://www.thereformedprogrammer.net/wp-content/uploads/2025/01/QuantumNetworkingJsonString-1.png 730w, https://www.thereformedprogrammer.net/wp-content/uploads/2025/01/QuantumNetworkingJsonString-1-300x240.png 300w" sizes="(max-width: 730px) 100vw, 730px" /></a></figure>



<p>The configuring of JSON Columns is added in your DbContext’s OnModelCreating method – see the diagram below which shows the <a href="https://github.com/JonPSmith/ExploringJsonColumns/blob/main/DataLayer/JsonBookEfCore/BookJsonContext.cs">BookJsonContext class</a> with comments about where the JSON Columns&#8217; OwnsOne and OwnsMany methods are used</p>



<figure class="wp-block-image size-full"><a href="https://www.thereformedprogrammer.net/wp-content/uploads/2025/01/ExampleJsonColumnsConfigure.png"><img loading="lazy" decoding="async" width="611" height="318" src="https://www.thereformedprogrammer.net/wp-content/uploads/2025/01/ExampleJsonColumnsConfigure.png" alt="" class="wp-image-2983" srcset="https://www.thereformedprogrammer.net/wp-content/uploads/2025/01/ExampleJsonColumnsConfigure.png 611w, https://www.thereformedprogrammer.net/wp-content/uploads/2025/01/ExampleJsonColumnsConfigure-300x156.png 300w" sizes="auto, (max-width: 611px) 100vw, 611px" /></a></figure>



<p>Here is a link to another the <a href="https://github.com/JonPSmith/EfCore.SchemaCompare/blob/master/DataLayer/JsonColumnDb/JsonCustomerContext.cs">JsonCustomerContext</a> DbContext which I used in testing my JSON Columns code added to my <a href="https://github.com/JonPSmith/EfCore.SchemaCompare">EfCore.SchemaCompare</a> library. This shows how you can configure multiple layers (e.g., grandfather, father, son) relationships and handing multiples JSON Columns’ entities.</p>



<h3 class="wp-block-heading">The differences between Tables/Indexes and JSON Columns version’s “many” relationships</h3>



<p>When showing a book with multiple authors you must ensure the authors’ names are in the correct order. In the Tables/Indexes approach: the <a href="https://github.com/JonPSmith/ExploringJsonColumns/blob/main/DataLayer/SqlBookClasses/BookAuthor.cs">BookAuthor class</a> has an byte “Order” column to make sure that Author’s Names are shown in the correct order.</p>



<p>But in the JSON Columns approach the <a href="https://github.com/JonPSmith/ExploringJsonColumns/blob/main/DataLayer/JsonBookClasses/JsonAuthor.cs">JsonAuthor class</a> doesn’t need a “Order” property because the List&lt;JsonAuthor&gt; holds the authors’ names in the order they were added. &nbsp;Therefore you don’t need a “Order” property.</p>



<h3 class="wp-block-heading">4. Writing into the database</h3>



<p>From the developer’s perspective the writing of data to the database uses the same process for the Table / Index approach and JSON Columns &#8211; you put data into a class and EF Core will store it into the database. EF Core will store Table / Index data into tables and columns, while with JSON Columns EF Core will store the data in a JSON string.</p>



<h3 class="wp-block-heading">5. Selecting data from the database</h3>



<p>In the first version (EF Core 7) of the JSON Columns the only way to select data is using the Table / Index approach, i.e. by using column(s) to in the top entity, for instance in the&nbsp; “lists of books” you could its Id (Index) in the <a href="https://github.com/JonPSmith/ExploringJsonColumns/blob/main/DataLayer/JsonBookClasses/BookTop.cs">BookTop</a> class.</p>



<p>But in EF Core 8 there was a new <a href="https://learn.microsoft.com/en-us/ef/core/what-is-new/ef-core-8.0/whatsnew#enhancements-to-json-column-mapping">Enhancements to JSON column mapping</a>” feature which enables you to filter each entry (i.e. book) using data point(s) in the JSON string. I use this feature in my performance tasks to find all the books that has a specific author’s name. You can find that <a href="https://github.com/JonPSmith/ExploringJsonColumns/blob/main/Test/MappingCode/MapJsonBooksByAuthor.cs">code here</a>.</p>



<h3 class="wp-block-heading">6. Reading data from the database</h3>



<p>The reading of JSON Columns’ data is very easy – you simply access the classes / properties just like the Table / Index approach. The only small difference is that any relationship in the JSON Columns is immediately available, so you don’t need to add code to load relationships (e.g., context.Books.Include(book =&gt; book.Reviews)… isn’t needed).</p>



<p>NOTE: There are some rare situations when you need to a) read in many JSON Columns entities, and b) combine data, or you only need a subset of the data points, then using IEnumerable&lt;&gt; input and an IEnumerable&lt;&gt; out can make the process (a bit) quicker (see <a href="https://github.com/JonPSmith/ExploringJsonColumns/blob/main/Test/MappingCode/MapJsonBooks.cs">MapJsonBooks</a> for an example). I found this when reading all the books ordered by each book’s star rating, because I had two ToList’s – using IEnumerable&lt;&gt; in/out removes one of the ToList method.</p>



<h2 class="wp-block-heading">4. Performance comparisons</h2>



<p>I had a project called <a href="https://github.com/JonPSmith/ExploringJsonColumns/blob/main/Benchmark/ConsoleBenchmark.cs">ConsoleBenchmark</a> in my ExploringJsonColumns solution which used &nbsp;<a href="https://github.com/dotnet/BenchmarkDotNet">BenchmarkDotNet</a> to get the performance of the two approaches, i.e., the normal Tables/Indexes approach and the JSON Columns approach. There are four tasks to compare, with two types of data:</p>



<ul class="wp-block-list">
<li>Simple data: This has the least relationships, with each book having one Author’s Name and no reviews or promotions.</li>



<li>Complex data: This has many relationships, with each book having two Author’s Name and many reviews and a few promotions.</li>
</ul>



<figure class="wp-block-table"><table class="has-fixed-layout"><tbody><tr><td><strong>Task name</strong></td><td><strong>What is does</strong></td></tr><tr><td>1. Add</td><td>Add N sample data to an empty SQL database</td></tr><tr><td>2. Read</td><td>Read N sample data from the SQL database</td></tr><tr><td>3. Order</td><td>Read N sample data and order the books using their star rating</td></tr><tr><td>4. Author</td><td>Find all the books that has a specific author’s name in the N sample data.</td></tr></tbody></table></figure>



<p>The first two tasks (Add, Read) don’t favour either approach, but last two tasks (Order, Author) should favour the Tables/Indexes approach because it can use indexes to get to the information more easily. NOTE: that the “Order” and &nbsp;“Author” tasks don’t work in the Simple type.</p>



<p>Below are the benchmark results for the two setups: Simple and Complex, with a performance summary after the BenchmarkDotNet’s results.</p>



<figure class="wp-block-image size-full"><a href="https://www.thereformedprogrammer.net/wp-content/uploads/2025/01/ExploringJsonColumns-Simple-benchmark-28-12-24.png"><img loading="lazy" decoding="async" width="542" height="329" src="https://www.thereformedprogrammer.net/wp-content/uploads/2025/01/ExploringJsonColumns-Simple-benchmark-28-12-24.png" alt="" class="wp-image-2976" srcset="https://www.thereformedprogrammer.net/wp-content/uploads/2025/01/ExploringJsonColumns-Simple-benchmark-28-12-24.png 542w, https://www.thereformedprogrammer.net/wp-content/uploads/2025/01/ExploringJsonColumns-Simple-benchmark-28-12-24-300x182.png 300w" sizes="auto, (max-width: 542px) 100vw, 542px" /></a></figure>



<figure class="wp-block-image size-full"><a href="https://www.thereformedprogrammer.net/wp-content/uploads/2025/01/ExploringJsonColumns-Complex-10-100-1000-28-12-24.png"><img loading="lazy" decoding="async" width="556" height="582" src="https://www.thereformedprogrammer.net/wp-content/uploads/2025/01/ExploringJsonColumns-Complex-10-100-1000-28-12-24.png" alt="" class="wp-image-2977" srcset="https://www.thereformedprogrammer.net/wp-content/uploads/2025/01/ExploringJsonColumns-Complex-10-100-1000-28-12-24.png 556w, https://www.thereformedprogrammer.net/wp-content/uploads/2025/01/ExploringJsonColumns-Complex-10-100-1000-28-12-24-287x300.png 287w" sizes="auto, (max-width: 556px) 100vw, 556px" /></a></figure>



<p>From the performance of this “list of books” code of you can say:</p>



<ul class="wp-block-list">
<li><strong>Add tests</strong>: The JSON Columns is as good, or better than the Table / Index version, and the 1,000 books with JSON Columns is nearly half the time of the Table / Index code. I suspect the number of relationships will have some effect on the Table / Index version’s performance.</li>



<li><strong>Read tests</strong>: The JSON Columns performance is near to the Table / Index version when there aren’t many books, i.e., 10, but once you get to 100 books takes 8 times longer, and with 1,000 test Columns takes 10 times longer.</li>



<li><strong>Order tests</strong> (complex only): I thought the Table / Index version would win every time because it could use the LINQ Average method on all the review’s star rating, but in the “ten books” JSON Columns works well. However, compared against the Table / Index version the 100 books JSON Columns take 7 times longer, and 1,000 JSON Columns takes 7 times longer.</li>



<li><strong>Author tests</strong> (complex only): &nbsp;This task finds all the books that have a specific author’s name. The JSON Columns approach was better than I expected, but it’s always slower than the Table/Index approach. The worse was 1,000 JSON Columns version, which was 8 times slower that the Table/Index approach.</li>
</ul>



<h2 class="wp-block-heading">5. My thoughts on where JSON Columns are a good fit</h2>



<p>I used the “list of books” code because it covers the JSON Columns’ relationships, configuration, types of reading, etc. which makes a good example. As I said earlier, I was sure that the normal Table / Index approach would have the best performance on the “list of books” tests, and I was right. But I was surprised that the JSON Columns did so well!</p>



<p>So, what types of data is a good fit for using JSON Columns? My take is:</p>



<ul class="wp-block-list">
<li>The data has many parts.</li>



<li>Each data point can be held in a built-in type, e.g. int, bool, string…</li>



<li>The data points are “coherent”,&nbsp; i.e. there no links outside this data.</li>
</ul>



<p>This means the JSON Columns approach is good if you have lots of data about one thing that doesn’t need links to another entity. The <a href="https://learn.microsoft.com/en-us/ef/core/what-is-new/ef-core-7.0/whatsnew#json-columns">.NET 7 release the EF Core</a> documentation gives you examples that work well with JSON Columns, for instance:</p>



<ul class="wp-block-list">
<li>Contact Details: name, phones, address, etc.</li>



<li>Logging: what, where, when, who…</li>
</ul>



<p>The other thing to consider is the performance comparison where the JSON Columns approach is better that the Table / Index approach. The Performance comparisons section show that:</p>



<ul class="wp-block-list">
<li>Adding a lot of JSON Columns data is normally faster than the Table / Index approach (I think this because the Table / Index approach of the “”list of books” app has to create more indexing and relationships on adding).</li>



<li>Do you need to read a lot of entities using JSON Columns, then a JSON Columns can be slow. For instance, “list of books”:<ul><li>JSON Columns: 10 takes the same as the Table / Index approach, but…</li></ul><ul><li>JSON Columns: 100 takes 2 times of the Table / Index approach</li></ul>
<ul class="wp-block-list">
<li>JSON Columns: 1,000 takes 8 times of the Table / Index approach</li>
</ul>
</li>



<li>If there are lookups (e.g., finding all the books for a specific Author) or ordering, then the Table / Index approach, with its links using Indexing, is likely to perform better that JSON Columns approach. For instance, in the Author task the JSON Columns approach has read every AuthorName in each entity, while the &nbsp;Table / Index approach only has to look at the at the links via the BookAuthor class, which are 10.</li>
</ul>



<h2 class="wp-block-heading">Conclusion</h2>



<p>I hope this article helps you to understand how to setup and use EF Core’s JSON Columns feature. Also the performance figures give you some idea of what JSON Columns will do in add, read, and filter tasks.</p>



<p>Just to end, if your data fits a JSON Columns approach, but performance is critical, then I would recommend <a href="https://learn.microsoft.com/en-us/azure/cosmos-db/use-cases">Cosmos DB</a>. I used Cosmos DB with the <a href="https://learn.microsoft.com/en-us/azure/architecture/patterns/cqrs">CQRS pattern</a> in chapter 16 of my book <a href="https://bit.ly/EfCoreBookEd2">Entity Framework Core in Action</a> (2nd. Edition) and I found it very fast. For instance, the Order task in this article was way faster than the normal Tables / Indexes approach.&nbsp;&nbsp;</p>



<h2 class="wp-block-heading has-black-color has-text-color has-link-color wp-elements-1126ea8ae0024c5661ab855fd09a6d7b"><em>ENDNOTE dementia and programming</em></h2>



<p><em>I wrote an article in the end of May 2024 which had an </em><a href="https://www.thereformedprogrammer.net/how-to-update-a-nuget-library-once-the-author-isnt-available/#endnote-dementia-and-programming"><em>endnote about my dementia</em></a><em>, talking about my diagnosis of Alzheimer&#8217;s disease in January 2024. Alzheimer&#8217;s disease is a progressive disease that worsens over time; this endnote talks about how I am in January 2025.</em></p>



<p><em>I am very happy to say my programming skills are better! and that’s what this endnote talks abouts. However I have to say that there are a few negative symptoms as well, like something I call “sensory overload,” where if I do lots of different tasks one after another (or lots of people or sounds), then I feel overloaded. But I’m going to focus on how my programming skills got better, because developers will be reading this.</em></p>



<p><em>In my first </em><a href="https://www.thereformedprogrammer.net/how-to-update-a-nuget-library-once-the-author-isnt-available/#endnote-dementia-and-programming"><em>endnote about my dementia</em></a><em> I talked about using lists more to cover the problem of memory loss, and using my version </em><a href="https://neuraleffects.com/blog/cognitive-stimulation-therapy-activities/"><em>Cognitive Stimulation Therapy</em></a><em> (CST) approach. The typical CST ‘s suggestions are to do crossword puzzles, Sudoku, Rubik’s Cube, etc. I do some of these but for me the best CST work is programming! I had to change my approach to programming to counter the dementia’s symptoms – and for me it works.</em></p>



<p><em>It turns out in the last three months I have done a lot of programming:</em></p>



<ul class="wp-block-list">
<li><em>Added JSON Columns to my EfCore.SchemaCompare (very difficult!)</em></li>



<li><em>Fixed a tricky problem my EfCore.SchemaCompare (complex)</em></li>



<li><em>I updated five these libraries to .NET 9 (mostly easy)</em></li>



<li><em>The </em><a href="https://github.com/JonPSmith/ExploringJsonColumns"><em>ExploringJsonColumns </em></a><em>for this article (complex)</em></li>
</ul>



<p><em>Doing all this has helps me to regain some of my programming skills!, like my “holding all of parts of the code in my head” skill back (I talked about this in </em><a href="https://www.thereformedprogrammer.net/how-to-update-a-nuget-library-once-the-author-isnt-available/#endnote-dementia-and-programming"><em>first endnote</em></a><em>). This skill gave a detailed understanding of design of any projects I was working on. This allows me to think about additions or improvements “in my head”, often after work without the code in front of me. I though everyone could do this, but when I lost this gift, I was devastated, but I also realised that my “in my head” skill might be rare. But now I have seen that I can get back my “in my head” skill, it makes it easier to do programming</em>!</p>



<p><em>However dementia effects many parts of the brain, and the big ones for me are remembering words and spelling. Here are two that I have, with examples from my programming:</em></p>



<ul class="wp-block-list">
<li><strong><em>Correct name</em></strong><em>: For instance, when coding I usually know that I can do a task, but I can’t remember the name of the method I need. For instance, I knew I could select a subset of a list, but didn’t remember its name (it turns out is the LINQ’s Take method). This happened many times on my small ExploringJsonColumns project.</em></li>



<li><strong><em>Correct spelling</em></strong><em>: The coding is bad, but the real problem is to remember how to spell a word, even when using Word to help me! I can’t put a number of the times I had to type a word, and it wasn’t correct, then I have to try different spelling or look up on the web (I found that Google Search is better that Word when figuring out what my incorrect version of a word should be).</em></li>
</ul>



<p><em>The other things I do when coding are:</em></p>



<ul class="wp-block-list">
<li><em><strong>Unit Tests: Indispensable</strong> : I have always used unit tests, but now I have dementia I need it more!</em></li>



<li><em><strong>Task list: Now used:</strong> Before dementia I could handle many things in my head. Now I must create a task list to help me to not miss something. For this article I wrote the section names first, and then created the code for each section.</em></li>



<li><em><strong>Use two monitors:</strong> If I am changing some code it’s useful to remember what the original code was, but my dementia removes the ability to remember things (short-term memory). Therefore I often have the original code on my second monitor while I updating the code using my main monitor.</em></li>
</ul>



<p>END</p>



<p></p>
]]></content:encoded>
					
					<wfw:commentRss>https://www.thereformedprogrammer.net/a-detailed-look-at-ef-cores-json-column-feature/feed/</wfw:commentRss>
			<slash:comments>1</slash:comments>
		
		
			</item>
		<item>
		<title>How to update a NuGet library once the author isn’t available</title>
		<link>https://www.thereformedprogrammer.net/how-to-update-a-nuget-library-once-the-author-isnt-available/</link>
					<comments>https://www.thereformedprogrammer.net/how-to-update-a-nuget-library-once-the-author-isnt-available/#comments</comments>
		
		<dc:creator><![CDATA[Jon P Smith]]></dc:creator>
		<pubDate>Mon, 27 May 2024 10:32:02 +0000</pubDate>
				<category><![CDATA[.NET Core]]></category>
		<category><![CDATA[.NET]]></category>
		<category><![CDATA[.Net versions]]></category>
		<category><![CDATA[NuGet]]></category>
		<guid isPermaLink="false">https://www.thereformedprogrammer.net/?p=2938</guid>

					<description><![CDATA[I’m writing this article because I have an illness called dementia, which over time degrades a &#8230; <a href="https://www.thereformedprogrammer.net/how-to-update-a-nuget-library-once-the-author-isnt-available/" class="more-link">Continue reading <span class="screen-reader-text">How to update a NuGet library once the author isn’t available</span></a>]]></description>
										<content:encoded><![CDATA[
<p>I’m writing this article because I have an illness called <a href="https://www.cdc.gov/aging/dementia/index.html">dementia</a>, which over time degrades a person&#8217;s ability to remember, think, and make decisions. This means at some point I won’t be able to build or update my open-source NuGet libraries, so this article shows you how to update my libraries when I’m not available.</p>



<p>I detected that something had changed because it affected my programming, in a bad way! This gave me early detection of my dementia, and the ways to overcome some the loss of me programming skills that dementia had taken away. (See the <a href="https://www.thereformedprogrammer.net/how-to-update-a-nuget-library-once-the-author-isnt-available/#endnote-dementia-and-programming"><em>ENDNOTE&nbsp; dementia and</em> programming</a> section at the end of this article)</p>



<p>But my time is limited, so I have focused on making sure that users can still use my libraries before my dementia stops me from updating my libraries myself. Dementia works differently with each person so I won’t know if I can update my libraries to any new .NET, but I’m pretty sure I will be able to update my libraries to .NET 9, but I can’t say for sure on other years.<em></em></p>



<p>The rest of this article tells you which of my libraries need to be updated when Microsoft creates a new .NET version, e.g. .NET 9. While <a href="https://www.nuget.org/profiles/jon%20smith">I have 20 NuGets</a> in nuget.org, only seven of the NuGets use a specific .NET version &#8211; the others NuGets use NET Standard which doesn’t change.</p>



<blockquote class="wp-block-quote is-layout-flow wp-block-quote-is-layout-flow">
<p>NOTE: The approaches I describe in this article for updating my libraries also works on any NuGet libraries that aren’t being updated by their author(s).&nbsp;</p>
</blockquote>



<h2 class="wp-block-heading">TL;DR; – Summary of this article</h2>



<ul class="wp-block-list">
<li>In this article I use the following names:<ul><li><strong>Library</strong>: I refer to the source code of a library with the name “library”.</li></ul><ul><li><strong>NuGet</strong>: I refer to a library that has been turned into an easy-to-use file referred to as a&nbsp; NuGet. <a href="https://www.nuget.org">https://www.nuget.org</a> is one place which holds NuGets. NuGet are normally managed by your development app, e.g. Visual Studio.</li></ul>
<ul class="wp-block-list">
<li><strong>.nupkg file:</strong> When creating a new NuGet you might have to work with the file ending with&nbsp; .nupkg. Typically you will have to manually move / push a .nupkg file to code that handles NuGets.</li>
</ul>
</li>



<li>Many of my libraries use the NET Standard versions which will work with any supported .NET version . This means that you don’t have to update these libraries. <a href="https://www.thereformedprogrammer.net/how-to-update-a-nuget-library-once-the-author-isnt-available/#my-libraries-that-dont-need-an-update-when-a-new-net-version-comes-out">This section</a> covers this.</li>



<li>The pros and cons of building libraries that needs a specific .NET version is covers in <a href="https://www.thereformedprogrammer.net/how-to-update-a-nuget-library-once-the-author-isnt-available/#the-pros-and-cons-of-using-full-net-version-nugets">this section</a>.</li>



<li>I have seven libraries that use a specific .NET version, e.g. going from .NET 8 to .NET 9 (I call this a <em>“NET-specific library”</em>). These libraries needs to be updated when a new .NET version comes out, and some point I won’t be there to update them. There are two things I have done to make it easier to update:<ul><li>I have made NET-specific libraries easier to update when a new .NET version comes out. <a href="https://www.thereformedprogrammer.net/how-to-update-a-nuget-library-once-the-author-isnt-available/#making-net-specific-libraries-easier-to-update">This section</a> covers this.</li></ul>
<ul class="wp-block-list">
<li>Then I detail how you can Clone the library’s code, update the library to a newer .NET version, and create a NuGet version. <a href="https://www.thereformedprogrammer.net/how-to-update-a-nuget-library-once-the-author-isnt-available/#how-to-upgrade-a-net-specific-library-to-a-new-net-version">This section</a> covers this.</li>
</ul>
</li>



<li>At the end of this article I have a section called <em><a href="https://www.thereformedprogrammer.net/how-to-update-a-nuget-library-once-the-author-isnt-available/#endnote-dementia-and-programming">ENDNOTE dementia and programming</a></em>  covering my experience of dementia and programming, both good and bad.</li>
</ul>



<blockquote class="wp-block-quote is-layout-flow wp-block-quote-is-layout-flow">
<p>NOTE: I use Visual Studio Community to show you how to update a library because that what I use, but I expect other development tools can do this too.</p>
</blockquote>



<h2 class="wp-block-heading">My libraries that don’t need an update when a new .NET version comes out</h2>



<p>Libraries that only uses NET Standard NuGets don’t have to be updated when new .NET comes out, e.g. NET 9. NET Standard libraries contains a set of fundamental APIs (commonly referred to as base class library or BCL) that all .NET implementations must implement.</p>



<p>Eight of my libraries uses NET Standard and they typically provide a basic specific feature that can be used anywhere. For instance, the NetCore.AutoRegisterDi library can automatically register your services into the Microsoft NET&#8217;s Dependency injection provider &#8211; this library has the most downloads at 3.1 million and is the smallest library with ~200 lines of code.</p>



<p>The table below contains the eight libraries using NET Standard with links to the NuGet, documentation and an article which gives you an overview of each library.</p>



<figure class="wp-block-table"><table><tbody><tr><td><strong>NuGet Name</strong></td><td><strong>Docs link</strong></td><td><strong>Article link</strong></td></tr><tr><td><a href="https://www.nuget.org/packages/NetCore.AutoRegisterDi">NetCore.AutoRegisterDi</a></td><td><a href="https://github.com/JonPSmith/NetCore.AutoRegisterDi/blob/master/README.md">ReadMe</a></td><td><a href="https://www.thereformedprogrammer.net/asp-net-core-fast-and-automatic-dependency-injection-setup/">Article</a></td></tr><tr><td><a href="https://www.nuget.org/packages/GenericServices.StatusGeneric">GenericServices.StatusGeneric</a></td><td><a href="https://github.com/JonPSmith/GenericServices.StatusGeneric/blob/master/README.md">ReadMe</a></td><td><a href="https://www.thereformedprogrammer.net/a-pattern-library-for-methods-that-return-a-status-including-localization/">Article</a></td></tr><tr><td><a href="https://www.nuget.org/packages/EfCore.GenericBizRunner">EfCore.GenericBizRunner</a></td><td><a href="https://github.com/JonPSmith/EfCore.GenericBizRunner/wiki">Wiki</a></td><td><a href="https://www.thereformedprogrammer.net/a-library-to-run-your-business-logic-when-using-entity-framework-core/">Article</a></td></tr><tr><td><a href="https://www.nuget.org/packages/Net.RunMethodsSequentially">Net.RunMethodsSequentially</a></td><td><a href="https://github.com/JonPSmith/RunStartupMethodsSequentially/blob/main/README.md">ReadMe</a></td><td><a href="https://www.thereformedprogrammer.net/how-to-safely-apply-an-ef-core-migrate-on-asp-net-core-startup/">Article</a></td></tr><tr><td><a href="https://www.nuget.org/packages/EfCore.GenericServices.AspNetCore">EfCore.GenericServices.AspNetCore</a></td><td><a href="https://github.com/JonPSmith/EfCore.GenericServices.AspNetCore/blob/master/README.md">ReadMe</a></td><td><a href="https://www.thereformedprogrammer.net/how-to-write-good-testable-asp-net-core-web-api-code-quickly/">Article</a></td></tr><tr><td><a href="https://www.nuget.org/packages/Net.DistributedFileStoreCache">Net.DistributedFileStoreCache</a></td><td><a href="https://github.com/JonPSmith/Net.DistributedFileStoreCache/wiki">Wiki</a></td><td><a href="https://www.thereformedprogrammer.net/a-net-distributed-cache-with-a-25-nanosecond-read-time/">Article</a></td></tr><tr><td><a href="https://www.nuget.org/packages/EfCore.GenericEventRunner">EfCore.GenericEventRunner</a> and …<a href="https://www.nuget.org/packages/EfCore.GenericEventRunner.DomainParts">DomainParts</a></td><td><a href="https://github.com/JonPSmith/EfCore.GenericEventRunner/wiki">Wiki</a></td><td><a href="https://www.thereformedprogrammer.net/efcore-genericeventrunner-an-event-driven-library-that-works-with-ef-core/">Article</a></td></tr></tbody></table></figure>



<p>The rest of this article covers the libraries that works with a specific .NET version, e.g. .NET 9. These libraries are focused on EF Core and ASP.NET Core applications.</p>



<h2 class="wp-block-heading">The pros and cons of using full .NET version NuGets</h2>



<p>Microsoft releases a new .NET version, e.g. .NET 9, every year. This has allowed Microsoft to add new features and improve performance of .NET applications. These yearly releases have allowed .NET to up to date and very fast. But the downside is if you want to update your application to a new .NET version, then you need to upgrade all the <em><u>NuGets that uses a NET-specific version</u></em>, e.g. NET 9.</p>



<p>So, if you can’t get every NuGet for the .NET version you are moving to, then your application might not work!</p>



<p>I have six libraries that uses NET-specific that need updating every year. These libraries are listed below, ordered by the most downloaded version coming first.</p>



<figure class="wp-block-table"><table><tbody><tr><td><strong>NuGet Name</strong></td><td><strong>Docs</strong></td><td><strong>Article</strong></td></tr><tr><td><a href="https://www.nuget.org/packages/EfCore.TestSupport#readme-body-tab">EfCore.TestSupport</a></td><td><a href="https://github.com/JonPSmith/EfCore.TestSupport/wiki">Wiki</a></td><td><a href="https://www.thereformedprogrammer.net/new-features-for-unit-testing-your-entity-framework-core-5-code/">Article</a></td></tr><tr><td><a href="https://www.nuget.org/packages/EfCore.SchemaCompare#readme-body-tab">EfCore.SchemaCompare</a></td><td><a href="https://github.com/JonPSmith/EfCore.SchemaCompare/blob/master/README.md">ReadMe</a></td><td><a href="https://www.thereformedprogrammer.net/how-to-update-a-databases-schema-without-using-ef-cores-migrate-feature/">Article</a></td></tr><tr><td><a href="https://www.nuget.org/packages/EfCore.GenericServices#readme-body-tab">EfCore.GenericServices</a></td><td><a href="https://github.com/JonPSmith/EfCore.GenericServices/wiki">Wiki</a></td><td><a href="https://www.thereformedprogrammer.net/genericservices-a-library-to-provide-crud-front-end-services-from-a-ef-core-database/">Article</a></td></tr><tr><td><a href="https://www.nuget.org/packages/EfCore.SoftDeleteServices#readme-body-tab">EfCore.SoftDeleteServices</a></td><td><a href="https://github.com/JonPSmith/EfCore.SoftDeleteServices/wiki">Wiki</a></td><td><a href="https://www.thereformedprogrammer.net/introducing-the-efcore-softdeleteservices-library-to-automate-soft-deletes/">Article</a></td></tr><tr><td><a href="https://www.nuget.org/packages/AuthPermissions.AspNetCore#readme-body-tab">AuthPermissions.AspNetCore</a> and MultiProjPack</td><td><a href="https://github.com/JonPSmith/AuthPermissions.AspNetCore/wiki">Wiki</a></td><td><a href="https://www.thereformedprogrammer.net/building-asp-net-core-and-ef-core-multi-tenant-apps-part1-the-database/">Article</a></td></tr><tr><td><a href="https://www.nuget.org/packages/Net.LocalizeMessagesAndErrors#readme-body-tab">Net.LocalizeMessagesAndErrors</a></td><td><a href="https://github.com/JonPSmith/Net.LocalizeMessagesAndErrors/wiki">Wiki</a></td><td><a href="https://www.thereformedprogrammer.net/improving-the-support-of-multiple-languages-in-net-applications/">Article</a></td></tr></tbody></table></figure>



<p>Sometimes an older NET-specific NuGet version, e.g. .NET 8, will work for a new application using a higher .NET release, e.g. .NET 9. It depends on whether the new .NET version changes some part of the code that the older NuGet uses. I think most of my .NET 8 libraries will work with .NET 9 because my libraries typically use the basic features, <strong>but you can’t be sure it will work!</strong> If you have a lot of tests to check everything will work with the older NuGens, then it’s MUCH quicker.</p>



<p>I’m assume that most people will want a new NuGet that supports the new .NET version and rest of the rest of the rest of article shows you how to update a library yourself. But first I talk about how I have changed my libraries so that it much easier to update my libraries.</p>



<h2 class="wp-block-heading">Making NET-specific libraries easier to update</h2>



<p>When I created NET-specific libraries I usually created a NuGet which supported multiple .NET versions, for instance <a href="https://www.nuget.org/packages/EfCore.TestSupport/6.0.2#supportedframeworks-body-tab">EfCore.TestSupport version 6.0.2</a> supports .NET 6, 7 and 8. The upside of supporting multiple .NETs is that if I add a new feature or fix a bug, then I can release one NuGet with the features/bug fixes that covers multiple .NETs.</p>



<p>But the downside is that it’s very hard to update to a new .NET release for three reasons:</p>



<ol class="wp-block-list">
<li>You can’t use the Microsoft Visual Studio’s “NuGet Package Manager” features to update a library. Instead you must manually edit all the .csproj files in the library code. I have been doing this for years and it’s a pain to do.</li>



<li>It’s harder to find / update NuGets with a vulnerability. I found this when .NET 8 had a vulnerability in the <a href="https://techcommunity.microsoft.com/t5/sql-server-blog/released-security-updates-for-microsoft-data-sqlclient-and/ba-p/4024264">System.Data.SqlClient</a>. I had to go through my libraries to select the non-vulnerable replacement, including effected NuGets. You also can’t use the <a href="https://docs.github.com/en/code-security/dependabot/working-with-dependabot/managing-pull-requests-for-dependency-updates#about-dependabot-pull-requests">GitHub’s useful dependabot PRs</a> to fix vulnerability, but you must manually edit the .csproj files.</li>



<li>I found it’s harder to find depreciated NuGets because sometimes a NuGet is valid in an older .NET version but is depreciated in the latest .NET version.</li>
</ol>



<p>To make it easier for me, and you, I changed all my NET-specific libraries to only support one .NET version and fix any vulnerability and removed depreciated NuGets. I applied this to all of my NET-specific libraries and I released new versions of my NET-specific libraries that only support .NET 8.</p>



<blockquote class="wp-block-quote is-layout-flow wp-block-quote-is-layout-flow"><cite>NOTE: If you are still using .NET version below .NET 8, then the older versions of my libraries are still there for you.</cite></blockquote>



<p>After making my NET-specific libraries simpler to update and cleaner, then the next part shows you how to create a new version of these NuGets if the author (e.g. me!) can’t update the library when another .NET is released.</p>



<h2 class="wp-block-heading">How to upgrade a NET-specific library to a new .NET version</h2>



<p>This (long) section shows how you update a library that hasn’t been updated and the author(s) hasn’t updated to the new .NET version. I only assume you have access to the library’s code, e.g. GitHub, and you have a development application that can edit, compile and test the library’s code, e.g.&nbsp; Visual Studio.</p>



<p>The steps are:</p>



<p>1a. Get the NuGet’s code into your development app</p>



<p>1b. Update the .NET TargetFramework of the library</p>



<p>1c. Update the NuGets</p>



<p>1d. Compile the changed code</p>



<p>1e. Run the unit tests</p>



<p>1f. Update the NuGets information</p>



<p>1g. Create a local .nupkg file</p>



<p>1h. Add a local NuGet source to your application</p>



<h4 class="wp-block-heading">1a. Get the NuGet’s code into your development app</h4>



<p>Nowadays most Microsoft open-source libraries can be found in <a href="https://github.com/">GitHub</a>, and that’s where my libraries are situated. You usually can find the NuGet’s source code by looking the NuGet via <a href="http://www.nuget.org">www.nuget.org</a> and clicking the “Source repository” link found on the RHS. Then you need to “Clone” the source code into your Visual Studio app.</p>



<p>Once you have cloned the library, I suggest you compile and run any unit tests before you change anything. This will let you know if something isn’t working, e.g. the unit tests need the database connection string changed to match your setup and give you a set of unit test results to compare with the unit test after you have updated to a new .NET version. See section ??LINK?? if your tests use databases.</p>



<h4 class="wp-block-heading">1b. Update the .NET TargetFramework of the library</h4>



<p>Each CS project contains a file ending in .csproj which holds the version or versions that the project can work with. Because I have tidied-up libraries to only have one version, e.g., .NET 8, which means it’s very easy to change – you just have to update the &lt;TargetFramework&gt; line from the old .NET to the new .NET. This is simple to do via Visual Studio’s “Find and Replace&gt;Place in Files” feature, the screenshot below shows how to change a library using .NET 8 to .NET 9.</p>



<figure class="wp-block-image size-full"><a href="https://www.thereformedprogrammer.net/wp-content/uploads/2024/05/VisualStudio-PlaceInFiles.png"><img loading="lazy" decoding="async" width="542" height="548" src="https://www.thereformedprogrammer.net/wp-content/uploads/2024/05/VisualStudio-PlaceInFiles.png" alt="" class="wp-image-2940" srcset="https://www.thereformedprogrammer.net/wp-content/uploads/2024/05/VisualStudio-PlaceInFiles.png 542w, https://www.thereformedprogrammer.net/wp-content/uploads/2024/05/VisualStudio-PlaceInFiles-297x300.png 297w" sizes="auto, (max-width: 542px) 100vw, 542px" /></a></figure>



<p>Once you have clicked the “Replace All” button then each project will be updated to the new .NET version. At this point Visual Studio will show an error (see screenshot below) because Visual Studio can’t handle this change automatically. Clicking the “Reload projects” normally fixes this, but in some cases I had to close Visual Studio and reopen the library again remove the errors.</p>



<figure class="wp-block-image size-full"><a href="https://www.thereformedprogrammer.net/wp-content/uploads/2024/05/VIsualStudioReloadProjects.png"><img loading="lazy" decoding="async" width="649" height="41" src="https://www.thereformedprogrammer.net/wp-content/uploads/2024/05/VIsualStudioReloadProjects.png" alt="" class="wp-image-2941" srcset="https://www.thereformedprogrammer.net/wp-content/uploads/2024/05/VIsualStudioReloadProjects.png 649w, https://www.thereformedprogrammer.net/wp-content/uploads/2024/05/VIsualStudioReloadProjects-300x19.png 300w" sizes="auto, (max-width: 649px) 100vw, 649px" /></a></figure>



<h4 class="wp-block-heading">1c. Update the NuGets</h4>



<p>After the library has been updated to the new .NET, then you need to update all the NuGets in every project in the library. The simplest way to update all the projects’ NuGets is to use Visual Studio’s “Manage NuGets Packages” feature which is found by right-clicking the top “Solution” found in Solution Explorer window. The screenshot below shows the Manage NuGets Packages in Update mode &nbsp;(Note: the screenshot was taken before .NET 9 was released so I turned on “prerelease”, but normally you would have “prerelease” turned off).</p>



<figure class="wp-block-image size-full"><a href="https://www.thereformedprogrammer.net/wp-content/uploads/2024/05/NuGetPackagesForSolution.png"><img loading="lazy" decoding="async" width="769" height="419" src="https://www.thereformedprogrammer.net/wp-content/uploads/2024/05/NuGetPackagesForSolution.png" alt="" class="wp-image-2942" srcset="https://www.thereformedprogrammer.net/wp-content/uploads/2024/05/NuGetPackagesForSolution.png 769w, https://www.thereformedprogrammer.net/wp-content/uploads/2024/05/NuGetPackagesForSolution-300x163.png 300w" sizes="auto, (max-width: 769px) 100vw, 769px" /></a></figure>



<p></p>



<p>The obvious way to update all the NuGets in the library is to select the “Updates” button and tick the “Select all packages” to select all the NuGets to be updated to the latest version. This is it quick and it works, but it’s worth checking that you are using the lowest valid versions of the NuGets in the library &#8211; typically the lowest valid version that ends with “0.0”, e.g. 9.0.0. Having higher versions, e.g. 9.0.1, can cause problems if your application has the same NuGet at a lower version (i.e. 9.0.0) but of the same NuGet in the library has. In this case it will show an error saying that NuGet SomeName needs a &gt;= 9.0.1, but your app is using SomeName 9.0.0.</p>



<p>There are a couple of my libraries that have specific versions for some of its NuGets:</p>



<ul class="wp-block-list">
<li>EfCore.TestSupport: When updating my EfCore.TestSupport library you don’t want the highest versions of the xunit.core and xunit.assert NuGets. Thats because when Visual Studio creates a xUnit Test Project it doesn’t use the latest xunit versions. I suggest you create a xUnit Test Project via Visual Studio and find the xunit version it uses, then use the same version &nbsp;in EfCore.TestSupport xunit.core and xunit.assert NuGets.</li>



<li>AuthPermissions.AspNetCore: the AuthP library uses Microsoft.Graph version 4, not version 5. Therefore you should select Microsoft.Graph 4.54.0, and NOT the latest 5.?.? versions.</li>
</ul>



<h4 class="wp-block-heading">1d. Compile the changed code</h4>



<p>Once you have changed the library’s .NET version (step 1b) and updated the NuGets (step 1c) then you are ready to compile the code. I recommend you use the Build&gt;Rebuild Solution to compile the code because changing the version and NuGets have a lot of effects.</p>



<p>Normally the code compiles OK, but in some very rare cases the compile fails. In this case it’s likely that the new .NET version has changed, moved (e.g. changing the method’s name) or removed some code features. In this case you need to see what the problems are and decide what to do about it.</p>



<p>WARNING: In my EfCore.TestSupport library I added a feature called EnsureClean which uses code that is not supported by Microsoft (see <a href="https://www.thereformedprogrammer.net/new-features-for-unit-testing-your-entity-framework-core-5-code/#3-unique-database-name-plus-call-the-ensureclean-method-only-works-on-sql-server">this section</a> about EnsureClean and why it might fail). If this occurs, I suggest you remove the SqlServer EnsureClean code and use the normal EnsureDeleted / EnsureCreated approach of creating an empty database for a test. (I like EnsureClean because it makes my database tests run quicker than EnsureDeleted / EnsureCreated).</p>



<h4 class="wp-block-heading">1e. Run the unit tests</h4>



<p>All of my NET-specific &nbsp;libraries have a Test project which uses my EfCore.TestSupport library to test the library. You are looking for every test to be passed, but in some cases I have a failing test to say that a feature that doesn’t work (EfCore.SchemaCompare has one of those). That way I suggested you ran the unit tests on the original library in step 1a because you it will show you what a good run looks like.</p>



<blockquote class="wp-block-quote is-layout-flow wp-block-quote-is-layout-flow">
<p>NOTE: My EfCore.TestSupport library allows you <a href="https://github.com/JonPSmith/EfCore.TestSupport/wiki/Using-SQLite-in-memory-databases">set up a SQLite in-memory database</a>, and a way to set SqlServer and PostgreSQL connections strings – see <a href="https://github.com/JonPSmith/EfCore.TestSupport/wiki/Creating-connection-strings">this documentation</a> on how this.</p>
</blockquote>



<h4 class="wp-block-heading">1f. Update the NuGets information</h4>



<p>To define a NuGet there lots of values you need to provide to create a valid NuGet. For most of my libraries there is one project file (.csproj) in the code that contains the setting to create a NuGet file. For instance the EfCore.TestSupport NuGet has the NuGet information in the <a href="https://github.com/JonPSmith/EfCore.TestSupport/blob/master/TestSupport/TestSupport.csproj">TestSupport.csproj file</a>. So before you compile the library you need to update three values to create a new version, as shown below.</p>



<figure class="wp-block-table"><table><tbody><tr><td><strong>Name</strong></td><td><strong>Example values</strong></td><td><strong>Notes</strong></td></tr><tr><td>PackageVersion and Version</td><td>9.0.0</td><td>Must be unique on your computer</td></tr><tr><td>PackageReleaseNotes</td><td>Updated to .NET 9</td><td>&nbsp;</td></tr></tbody></table></figure>



<p>In the case of the AuthP library, which has multiple projects going into a NuGet, I had to create a dotnet tool called JonPSmith.MultiProjPack, <a href="https://www.nuget.org/packages/JonPSmith.MultiProjPack">found in nuget.org</a>. This used a file called <a href="https://github.com/JonPSmith/AuthPermissions.AspNetCore/blob/main/AuthPermissions.AspNetCore/MultiProjPack.xml">MultiProjPack.xml</a> in the AuthP and the values you need to change are:</p>



<figure class="wp-block-table"><table><tbody><tr><td><strong>Name</strong></td><td><strong>Example values</strong></td><td><strong>Notes</strong></td></tr><tr><td>version</td><td>9.0.0</td><td>Must be unique on your computer</td></tr><tr><td>releaseNotes</td><td>Updated to .NET 9</td><td>&nbsp;</td></tr></tbody></table></figure>



<h4 class="wp-block-heading">1g. Create a local .nupkg file</h4>



<p>All my libraries, apart from AuthP, are designed create a NuGet .nupkg file on every compile. You want to be in “Release” mode when compiling to create a NuGet because it will create a smaller and faster NuGet file (“Debug” NuGets are useful if you want to see debug information from the NuGet).</p>



<p>On compile in “Release” mode the NuGet file will be created in:</p>



<p>…&lt;SolutionName&gt;\&lt;PrimaryProjectName&gt;\bin\Release\&lt;NuGetName&gt;. nupkg</p>



<p>And here is a real example of my EfCore.TestSupport NuGet:</p>



<p>…\EfCore.TestSupport\TestSupport\bin\Release\EfCore.TestSupport.8.0.1.nupkg</p>



<p>In the case of the AuthP library, which has multiple projects to create the NuGet, I created a dotnet tool called <a href="https://www.nuget.org/packages/JonPSmith.MultiProjPack#readme-body-tab">JonPSmith.MultiProjPack</a> to create the .nupkg file. The “<a href="https://github.com/JonPSmith/AuthPermissions.AspNetCore/blob/main/README.md#how-to-create-an-authpermissionsaspnetcore-nuget-package">How to create an AuthPermissions.AspNetCore NuGet package</a>” in the AuthP’s ReadMe file shows how to install and run this dotnet tool.</p>



<blockquote class="wp-block-quote is-layout-flow wp-block-quote-is-layout-flow">
<blockquote class="wp-block-quote is-layout-flow wp-block-quote-is-layout-flow">
<p>NOTE: You can read about why I create the <a href="https://www.nuget.org/packages/JonPSmith.MultiProjPack#readme-body-tab">JonPSmith.MultiProjPack</a> dotnet tool in the <a href="https://github.com/JonPSmith/MultiProgPackTool/blob/main/README.md">ReadMe</a> of the code.</p>
</blockquote>
</blockquote>



<p>TIP: I recommend using the <a href="https://apps.microsoft.com/detail/9wzdncrdmdm3">NuGet Package Explorer</a> app to check that the NuGet Package you just created has the settings / information that you was expecting.</p>



<h4 class="wp-block-heading">1h. Add a local NuGet .nupkg file source to your application</h4>



<p>The previous step created the NuGet .nupkg file, but to use this file you need to setup Visual Studio’s &nbsp;NuGet Package Manager to handle local .nupkg files. Typically you would get NuGets via the <a href="https://www.nuget.org">https://www.nuget.org</a> app, but Visual Studio’s NuGet Package Manager has a way to find NuGet from a directory on your development computer.</p>



<p>To use this “local NuGets” feature you need to:</p>



<ol class="wp-block-list">
<li>Create a directory to hold the local NuGets. My local NuGet directory is called “LocalNuGet” in my user account, i.e. C:\Users\JonPSmith\LocalNuGet.</li>



<li>Then you manually copy the new .nupkg file in the Project &gt; bin &gt; Release directory to your local NuGet directory you set up in the last step.</li>



<li>You need go into the Options&gt;NuGet Package Manager&gt;Package Sources and add a new source where source is a directory on your development computer – see the screenshot below.</li>
</ol>



<figure class="wp-block-image size-full"><a href="https://www.thereformedprogrammer.net/wp-content/uploads/2024/05/SettingLocalNuGet.png"><img loading="lazy" decoding="async" width="737" height="429" src="https://www.thereformedprogrammer.net/wp-content/uploads/2024/05/SettingLocalNuGet.png" alt="" class="wp-image-2943" srcset="https://www.thereformedprogrammer.net/wp-content/uploads/2024/05/SettingLocalNuGet.png 737w, https://www.thereformedprogrammer.net/wp-content/uploads/2024/05/SettingLocalNuGet-300x175.png 300w" sizes="auto, (max-width: 737px) 100vw, 737px" /></a></figure>



<p>After that you can click on the “Package source” and select the “Local NuGet” you can access to the local NuGet(s) you updated. That allows you to update your application’s NuGets using the normal NuGets via <a href="https://www.nuget.org">https://www.nuget.org</a> and local NuGets you created yourself on your local computer.</p>



<blockquote class="wp-block-quote is-layout-flow wp-block-quote-is-layout-flow">
<p>NOTE: In the case of the AuthP library, the MultiProjPack dotnet tool automatically copies the new NuGet to the “{USERPROFILE}\LocalNuGet” directory.</p>
</blockquote>



<h2 class="wp-block-heading">Conclusion</h2>



<p>It would be great if all the NET-specific NuGets you use are always updated when a new .NET version comes out, but sometimes they aren’t. That usually means the author(s) should update a NET-specific NuGet and then add it into the <a href="https://www.nuget.org">https://www.nuget.org</a> application. But in my case, I know that some time I won’t be able update my libraries, which would be a pity for people who use my libraries.</p>



<p>I hope I’ll be able to still do programming for years, but with dementia you just don’t know. That’s why I created this article now while I’m doing well so that you‘re covered if I’m not around. The other reason for me to keep programming is that it helps me to counter dementia’s degrading of my brain – see the <em>ENDNOTE dementia and programming </em>after this conclusion.<em></em></p>



<p>One thing I would say is please don’t try to help me by sending me random Pull Requests. Even before I had dementia, I found some Pull Requests with no information, and typically no test results, and it takes me time to work out what the PR does and is it useful. The really good improvements come from someone opening an issue or PR with a conversation with me to work out what is the best way to do this &#8211; <a href="https://github.com/JonPSmith/EfCore.SchemaCompare/pull/26">this PR</a> as an example.</p>



<h2 class="wp-block-heading"><em>ENDNOTE dementia and programming</em></h2>



<p><em>It was my programming that alerted me that something had changed. Normally I can hold all of parts of the code in my head, and I would instinctively know where to go and what to do, but in 2022 I found I couldn’t hold the code in my head, which was devastating! It took over a year to get the diagnosis of dementia in Alzheimer&#8217;s disease which I got in early 2024. NOTE: Currently there are no known cures for Alzheimer&#8217;s.</em></p>



<p><em>Once I had the diagnosis there was no one to tell me what this means for me, so I googled “Alzheimer&#8217;s disease” and it wasn’t nice, or useful. Thankfully a friend who is a dementia nurse came over and talked about what is happening to me. They didn’t sugar-coat the future, but they said what will happen and what I could do to slow down my decline. Thankfully my programming changing meant that I caught the dementia early (most people are diagnosed in the middle stage of dementia) so had time to work on things.</em></p>



<p><em>From my perspective the best suggestion my nurse friend gave me was Cognitive Stimulation Therapy (CST). The core of CST is that you tackle jobs that are hard, but ones you can complete. The typical suggestions to do crossword puzzles, Sudoku, Rubik&#8217;s Cube, etc. I do some of these but for me the best CST work is programming! I had to change my approach to programming to counter the dementia’s symptoms, for instance:</em></p>



<ul class="wp-block-list">
<li><em>Because dementia affects my memory I have to use lists of the things to do and tick them off when I have done them (I rarely used worklists before).</em></li>



<li><em>Because dementia affects problem-solving I must accept that I will be slower when programming. I was very fast before (so my clients said) but now I’m five times slower or more.</em></li>



<li><em>I also have to handle the frustrations when I can’t do something I could before, or it took longer than before. I have found that trying to something while I’m frustrated will usually fail and I will feel bad. I have to accept my situation and enjoy the things I can do. &nbsp;</em></li>
</ul>



<p><em>A concrete example of how this works can been in this article and the many months of thinking, coding, and writing. I starting my cleaning with my biggest library, </em><a href="https://github.com/JonPSmith/AuthPermissions.AspNetCore/tree/main"><em>AuthP library</em></a><em>, which has 20 projects including seven example applications. During cleaning the AuthP library I felt I regained some of programming skills that I had before dementia, for instance I started get back a similar feeling that I could hold “the code is in my head” came back. That was a WONDERFUL feeling to see some of damage from dementia could be rolled back.</em></p>



<p><em>But on the other hand I now do need a worklist to help me manage the whole cleanup and update process, which covers many months. And I had to accept that I’m slower at programming, but the good news I that I CAN still code.</em></p>



<p><em>While I focused on dementia and programming because my blog is about programming, but I also have lots of other things outside programming, like talking to people to keep my speech up and using apps to make sure I remember things and dates. In fact writing this article is another CST’s “hard, but possible” job, especially as one part of dementia’s symptoms is not remembering words.</em></p>



<p class="has-black-color has-text-color has-link-color wp-elements-8144f0e2feb71c073afe2a9c7cbe12d9"><em>Thanks for reading this. &nbsp;&nbsp;&nbsp;</em></p>
]]></content:encoded>
					
					<wfw:commentRss>https://www.thereformedprogrammer.net/how-to-update-a-nuget-library-once-the-author-isnt-available/feed/</wfw:commentRss>
			<slash:comments>5</slash:comments>
		
		
			</item>
		<item>
		<title>The (long) journey to a better sharding multi-tenant application</title>
		<link>https://www.thereformedprogrammer.net/the-long-journey-to-a-better-sharding-multi-tenant-application/</link>
					<comments>https://www.thereformedprogrammer.net/the-long-journey-to-a-better-sharding-multi-tenant-application/#respond</comments>
		
		<dc:creator><![CDATA[Jon P Smith]]></dc:creator>
		<pubDate>Fri, 18 Aug 2023 11:00:55 +0000</pubDate>
				<category><![CDATA[ASP.NET Core]]></category>
		<category><![CDATA[Entity Framework]]></category>
		<category><![CDATA[EF Core]]></category>
		<category><![CDATA[Multi-tenant]]></category>
		<category><![CDATA[SaaS]]></category>
		<category><![CDATA[Sharding]]></category>
		<guid isPermaLink="false">https://www.thereformedprogrammer.net/?p=2917</guid>

					<description><![CDATA[This article focuses on the sharding approach of building a .NET multi-tenant application using the AuthPermissions.AspNetCore &#8230; <a href="https://www.thereformedprogrammer.net/the-long-journey-to-a-better-sharding-multi-tenant-application/" class="more-link">Continue reading <span class="screen-reader-text">The (long) journey to a better sharding multi-tenant application</span></a>]]></description>
										<content:encoded><![CDATA[
<p>This article focuses on the <a href="https://en.wikipedia.org/wiki/Shard_(database_architecture)">sharding approach</a> of building a .NET multi-tenant application using the <a href="https://github.com/JonPSmith/AuthPermissions.AspNetCore">AuthPermissions.AspNetCore</a> library (shortened to <em>AuthP</em>). After working exclusively on a sharding-only multi-tenant application I found various issues that make building and using such an application is difficult. This article describes the issues I found and the changes I made to the AuthP’s 6 release to improve sharding multi-tenant application.</p>



<p>This article is part of the series that covers AuthP’s multi-tenant applications in general. The other articles in “Building ASP.NET Core and EF Core multi-tenant apps” series are:</p>



<ol class="wp-block-list" type="1" start="1">
<li><a href="https://www.thereformedprogrammer.net/building-asp-net-core-and-ef-core-multi-tenant-apps-part1-the-database/">The database: Using a DataKey to only show data for users in their tenant</a></li>



<li><a href="https://www.thereformedprogrammer.net/building-asp-net-core-and-ef-core-multi-tenant-apps-part2-administration/">Administration: different ways to add and control tenants and users</a></li>



<li><a href="https://www.thereformedprogrammer.net/multi-tenant-apps-with-different-versions-can-increase-your-profits/">Versioning your app: Creating different versions to maximise your profits</a></li>



<li><a href="https://www.thereformedprogrammer.net/building-asp-net-core-and-ef-core-hierarchical-multi-tenant-apps/">Hierarchical multi-tenant: Handling tenants that have sub-tenants</a></li>



<li><a href="https://www.thereformedprogrammer.net/advanced-techniques-around-asp-net-core-users-and-their-claims/">Advanced techniques around ASP.NET Core Users and their claims</a></li>



<li><a href="https://www.thereformedprogrammer.net/part6-using-sharding-to-build-multi-tenant-apps-using-asp-net-core-and-ef-core/">Using sharding to build multi-tenant apps using EF Core and ASP.NET Core</a></li>



<li><a href="https://www.thereformedprogrammer.net/three-ways-to-securely-add-new-users-to-an-application-using-the-authp-library/">Three ways to securely add new users to an application using the AuthP library</a></li>



<li><a href="https://www.thereformedprogrammer.net/how-to-take-an-asp-net-core-web-site-down-for-maintenance/">How to take an ASP.NET Core web site “Down for maintenance”</a></li>



<li><a href="https://www.thereformedprogrammer.net/asp-net-core-three-ways-to-refresh-the-claims-of-a-logged-in-user/">Three ways to refresh the claims of a logged-in user</a></li>



<li><a href="https://www.thereformedprogrammer.net/using-custom-databases-with-the-authp-library-part1-normal-apps/">Use custom databases with the AuthP library – Part1: normal apps</a></li>



<li>Making .NET sharding multi-tenant apps easier to use with AuthP 5.1 (<strong>this article</strong>)</li>



<li>Use custom databases with the AuthP library – Part2: sharding / hybrid apps (coming soon)</li>
</ol>



<h2 class="wp-block-heading">TL;DR; – Summary of this article</h2>



<ul class="wp-block-list">
<li>This article is about a sharding multi-tenant application. AuthP has two types of sharding:<ul><li>Hybrid, which supports tenants that share a database with other users and tenants that have their own database, which I refer to <em>Sharding-only</em>.</li></ul>
<ul class="wp-block-list">
<li>Sharding-only, where every tenant have their own database.</li>
</ul>
</li>



<li>Part 1 covers two types of multi-tenant applications: one where admin is done by the app-maker and one where specific user(s) in a tenants handle the admin of their tenant.</li>



<li>Part 2 describes the changes the AuthP’s sharding-only multi-tenant application, which are<ul><li>Allow certain features to work, e.g. the “<a href="https://www.thereformedprogrammer.net/building-asp-net-core-and-ef-core-multi-tenant-apps-part2-administration/#1-automate-the-creation-of-a-new-tenant">Sign up now</a>” feature</li></ul><ul><li>To improve the administration of a sharding-only multi-tenant application.</li></ul>
<ul class="wp-block-list">
<li>Add a service to make creating / removing sharding-only tenants easier in code and human time.</li>
</ul>
</li>



<li>Part 3 covers how you can use the new features in AuthP version 6. They are<ul><li>Where does each tenant’s data is stored when using AuthP’s sharding?</li></ul><ul><li>A service that makes it simpler to create / delete a sharding-only tenant.</li></ul>
<ul class="wp-block-list">
<li>How the AuthP’s 6 “Sign up now” feature handles sharding-only tenants.</li>
</ul>
</li>



<li>At the end of this article it provides links to relevant documentation, the file containing steps to update an sharding multi-tenant using an older version, and a new example app.</li>
</ul>



<h2 class="wp-block-heading">Part 1: Two types of multi-tenant applications</h2>



<p>Recently I have been working on the multi-tenant features in the AuthP’s library, and I started to see that there are different <em>types</em> of multi-tenant applications. This insight came while building a new sharding-only app and it helped me to see areas where I need to improve the AuthP’s sharding futures. The two main types of multi-tenant are based on who is in administration of users and tenants – see the description of two types below.</p>



<h3 class="wp-block-heading">1. Multi-tenant app controlled by the app-maker</h3>



<p>This type of multi-tenant app is controlled by the organisation who owns the app. Normally there is some form of admin team (which I refer to as the <em>app admin</em>) in the organisation who manages the users and its data. Some examples of this type of multi-tenant apps are:</p>



<ul class="wp-block-list">
<li>A bank app allowing its users to manage their bank accounts.</li>



<li>An in-house app that controls the inventory in the organisation.</li>
</ul>



<p>The pro of this style is they have good control over who can access the app, but the downside is you need an admin team to manage the users, tenants etc., e.g. add / remove users, changing what they can do, etc.</p>



<h3 class="wp-block-heading">2. Multi-tenant app controlled by tenant user</h3>



<p>This type of multi-tenant app move much of the admin features out to a tenant user. The AuthP has the concept of a<em> tenant admin</em> allow a user to <a href="https://www.thereformedprogrammer.net/building-asp-net-core-and-ef-core-multi-tenant-apps-part2-administration/#1-automate-the-creation-of-a-new-tenant">create their own tenant</a> for their organisation (normally with a payment) and then manage the users in their tenant, such as <a href="https://www.thereformedprogrammer.net/building-asp-net-core-and-ef-core-multi-tenant-apps-part2-administration/#2-have-the-admin-user-invite-a-new-user-to-join-a-tenant">adding new users</a>, controlling what they can do, etc. Some examples of this type of multi-tenant apps are:</p>



<ul class="wp-block-list">
<li><a href="https://github.com/">GitHub</a>, which allows users to create their own space and manage.</li>



<li><a href="https://about.meta.com/">Facebook / Meta</a>,&nbsp; where you post comments, share photos and have friends.</li>
</ul>



<p>The pros of this style is that the tenant user can quickly makes changes and its reduces the size of the app admin team you need for to support your multi-tenant application. The downside is the multi-tenant administration code is more complex , but AuthP has built-in solutions to most of these admin features.</p>



<p><em>NOTE: I was asked to design a large multi-tenant application for a client, and I personally know that there is a LOT of admin code. Also, the app admin team were very busy when a large organisation joined their multi-tenant application. This is why I put a lot of work on the tenant admin features to reduce the amount of work the app admin team must deal with.</em></p>



<p>The AuthP library supports both multi-tenant types, but you will read how I needed to improve the AuthP’s features for sharding-only databases.</p>



<h2 class="wp-block-heading">Part 2: The problems I found and what I did to improve sharding features</h2>



<p>The AuthP’s implementation of sharding uses a “sharding entry” approach that links a tenant to a database. The diagram below the implementation of two types:&nbsp; “controlled by the app-maker” and the “controlled by tenant users”.</p>



<figure class="wp-block-image size-full"><a href="https://www.thereformedprogrammer.net/wp-content/uploads/2023/08/TwoWaysToSetupSharding.png"><img loading="lazy" decoding="async" width="721" height="420" src="https://www.thereformedprogrammer.net/wp-content/uploads/2023/08/TwoWaysToSetupSharding.png" alt="" class="wp-image-2902" srcset="https://www.thereformedprogrammer.net/wp-content/uploads/2023/08/TwoWaysToSetupSharding.png 721w, https://www.thereformedprogrammer.net/wp-content/uploads/2023/08/TwoWaysToSetupSharding-300x175.png 300w" sizes="auto, (max-width: 721px) 100vw, 721px" /></a></figure>



<p>What I found that both types could be improved, but the “controlled by tenants” had one feature didn’t work as it should, and admin code weren’t that easy to use, especially around creating / deleting sharding-only tenants. Part 2 (below) will cover the problems and how I solve them.</p>



<h2 class="wp-block-heading">Part 2: The problems I found and what I did to solve them</h2>



<p>The list below details the various problems and what I did about it&nbsp;</p>



<ol class="wp-block-list" type="1">
<li>The “<a href="https://www.thereformedprogrammer.net/multi-tenant-apps-with-different-versions-can-increase-your-profits/">Sign up for a new tenant</a>” feature doesn’t handle sharding tenants</li>



<li>Solved a limitation in ASP.Net Core’s IOptions feature (breaking changes)</li>



<li>Add a service to make creating / removing sharding-only tenants.</li>
</ol>



<h3 class="wp-block-heading">2.1. The “<a href="https://www.thereformedprogrammer.net/multi-tenant-apps-with-different-versions-can-increase-your-profits/">Sign up for a new tenant</a>” feature doesn’t handle sharding-only tenants</h3>



<p>The AuthP’s “Sign up for a new tenant” feature allows to a user to create a new tenant, which can significantly reduce the amount of work for your admin people. However the version 5.0.0 of the “Sign up” feature doesn’t contain code to setup a new sharding entry in a sharding-only tenant.</p>



<p>But it was then that is hit a limitation of the ASP.Net Core’s IOptions features &#8211; see the next section below what the problem is and how I got around it.</p>



<h3 class="wp-block-heading">2.2. Solved a limitation in ASP.Net Core’s IOptions feature (<strong>breaking changes</strong>)</h3>



<p>The current sharding entries are held in a json file and accessed via <a href="https://learn.microsoft.com/en-us/aspnet/core/fundamentals/configuration/options">ASP.NET Core’s IOptions feature</a> (similar to how ASP.NET Core uses a appsetting.json file). What I found was that the I added a new sharding entry to a json file the IOptionsMonitor won’t see the changes until a new HTTP request starts – I assume it looked for updates at the end of every HTTP request. This causes me a problem as there are cases where a new sharding entry is added and another service needs to retrieve sharding entry within the same HTTP request.</p>



<p>There are a few ways to get around this, but in the end I changed to using my <a href="https://github.com/JonPSmith/Net.DistributedFileStoreCache">Net.DistributedFileStoreCache</a> library (shortened to <a><em>FileStoreCache</em></a>) &nbsp;that uses the FileSystemWatcher and updates are immediately updated. The upside of using the FileStoreCache is has a similar very fast (~25ns) read-time that the IOptions approach had. The downside is this change creates a <a href="https://en.wiktionary.org/wiki/breaking_change">breaking change</a> to applications that have been created to older versions of AuthP. &nbsp;</p>



<p><em>NOTE: I have created a detail list of the changes in the <a href="https://github.com/JonPSmith/AuthPermissions.AspNetCore/blob/main/UpdateToVersion6.md">UpdateToVersion6</a> file and a console application to help with update your app’s sharding entries to the AuthP 6 format.</em></p>



<h3 class="wp-block-heading">2.3. Add a service to make creating / removing sharding-only tenants</h3>



<p>When you are adding a new sharding-only tenant there are four steps:</p>



<ol class="wp-block-list" type="1">
<li>Add a sharding entry to define the new database that the tenant will use.</li>



<li>Create the tenant using AuthP’s AuthTenantAdminService which will&#8230;</li>



<li>Run your <a href="https://github.com/JonPSmith/AuthPermissions.AspNetCore/blob/main/AuthPermissions/AdminCode/ITenantChangeService.cs">ITenantChangeService</a> code to set up the database.</li>
</ol>



<p>…And if you are using a cloud database service, then you need create a new database.</p>



<p><em>NOTE: If you need to create / delete cloud database, then you can do that withing your implementation of the ITenantChangeService – create your cloud database in the create tenant method and delete your cloud database in the delete tenant method.</em></p>



<p>You could do this yourself with the AuthP’s version 5 in two manual steps, but in AuthP version 6 there is a new service called <a href="https://github.com/JonPSmith/AuthPermissions.AspNetCore/blob/main/AuthPermissions.AspNetCore/ShardingServices/IShardingOnlyTenantAddRemove.cs">IShardingOnlyTenantAddRemove</a> which runs the three steps for creating and removing a tenant. This service makes it easier, and clearer, for an admin person to add or remove sharding-only tenants.</p>



<h2 class="wp-block-heading">Part 3 – How you can use these new features</h2>



<p>So, having told you what has changed in AuthP version 6 let’s see how you would use these updated features. I will cover the following topics, and I will point out the things that have changed</p>



<ol class="wp-block-list" type="1">
<li>Where does each tenant’s data is stored when using AuthP’s sharding?</li>



<li>A service that makes it simpler to create / delete a sharding-only tenant</li>



<li>How the AuthP’s 6 “<a href="https://www.thereformedprogrammer.net/building-asp-net-core-and-ef-core-multi-tenant-apps-part2-administration/#1-automate-the-creation-of-a-new-tenant">Sign up now</a>” feature handles sharding-only tenants</li>
</ol>



<h3 class="wp-block-heading">3.1 Where does each tenant’s data is stored when using AuthP’s sharding?</h3>



<p>A multi-tenant application provided a service for an organization / person finds useful, but instead of deploying a single web app / database for each tenant they have one web app and they segregate each tenant’s data. In AuthP provides three ways to segregate the tenant’s data, as shown in the table below.</p>



<figure class="wp-block-table"><table><tbody><tr><td><strong>Types</strong></td><td><strong>Description</strong></td><td><strong>How filter only tenant’s data?</strong></td></tr><tr><td>1. One database</td><td>All the tenant’s data in one database</td><td>Filter data be unique key</td></tr><tr><td>2. Hybrid</td><td>Some tenants have their own database, and some tenants share a database</td><td>Select the correct database<br>Filter data be unique key</td></tr><tr><td><strong>3. Sharding-Only</strong></td><td><strong>Each tenant has their own database for data</strong></td><td><strong>Select the correct database</strong></td></tr></tbody></table></figure>



<p>Since AuthP version 3&nbsp; supports all these ways to separate each tenant’s data, but when I ran a <a href="https://twitter.com/thereformedprog/status/1682052862568808448">twitter poll</a> on what type of approach they wanted the “Tenants have their own db” (4. In the diagram above) won by a large margin. That why this article (and the new release of the AuthP library) is all about.</p>



<p>AuthP version 3 defined a way that a tenant can be linked to a database. That database may have data from many tenants in it (shared) or a database has only one tenant’s data (shared-only). In this article we are mainly looking sharding, and in particular at the “Select the correct database” part, which applies to both hybrid and sharding-only approaches. The diagram shows the four stages that sets up the tenant’s data DbContext to the specific database for tenant that the logged-in user is linked to.</p>



<figure class="wp-block-image size-full"><a href="https://www.thereformedprogrammer.net/wp-content/uploads/2023/08/ShardingSettingsSteps2.png"><img loading="lazy" decoding="async" width="1003" height="754" src="https://www.thereformedprogrammer.net/wp-content/uploads/2023/08/ShardingSettingsSteps2.png" alt="" class="wp-image-2903" srcset="https://www.thereformedprogrammer.net/wp-content/uploads/2023/08/ShardingSettingsSteps2.png 1003w, https://www.thereformedprogrammer.net/wp-content/uploads/2023/08/ShardingSettingsSteps2-300x226.png 300w, https://www.thereformedprogrammer.net/wp-content/uploads/2023/08/ShardingSettingsSteps2-768x577.png 768w" sizes="auto, (max-width: 1003px) 100vw, 1003px" /></a></figure>



<p>AuthP version 6 stills these four steps, but it had to change the service that implements stage 2 was changed due the limitation in the ASP.NET Core IOptionsMonitor features. This created **<strong>breaking changes**</strong> in the version 6 release and I created <a href="https://github.com/JonPSmith/AuthPermissions.AspNetCore/blob/main/UpdateToVersion6.md">UpdateToVersion6.md</a> file which shows how to update your existing sharding multi-tenant built using a previous release of the AuthP library.</p>



<p><em>NOTE: When fixing the ASP.NET Core IOptionsMonitor limitation I also found the existing code rather hard to understand, partly because of the code being complex and partly because the names of some of the classes and methods didn’t really say what they were doing. Therefore I wanted to make the code easier to understand, but this created more breaking changes. Thankfully these changes are obvious i.e. there will be a compile error as the name have changed.</em></p>



<h3 class="wp-block-heading">3.2. A service that makes it simpler to create / delete a sharding-only tenant</h3>



<p>Section 1.3 talks about a new service called <a href="https://github.com/JonPSmith/AuthPermissions.AspNetCore/blob/main/AuthPermissions.AspNetCore/ShardingServices/IShardingOnlyTenantAddRemove.cs">IShardingOnlyTenantAddRemove</a> that combines the creation of the tenant and its sharding entry at the same time. This service means that the admin user only has one page to fill in and the code sets up the rest. The service does the following:</p>



<ul class="wp-block-list">
<li>Gathers the information to create the tenant and sharding entry needed:<ul><li>Tenant name – from the admin user</li></ul><ul><li>The connection string holding the database server (code or human – see diagram below)</li></ul>
<ul class="wp-block-list">
<li>Set the database provider used to create the tenant database (e.g. SqlServer) is set by your code</li>
</ul>
</li>



<li>Then, after various checks, it creates the sharding entry and Tenant in one go.</li>
</ul>



<p>The diagram below shows two web pages that the app admin user (think “controlled by app-maker” type) to create a new tenant on one go. The two pages show the two types of app: left is where the application has a single database server while on the right is for applications needing multiple database servers.</p>



<p><em>NOTE: The <a href="https://github.com/JonPSmith/AuthPermissions.AspNetCore/blob/main/Example7.MvcWebApp.ShardingOnly/Controllers/TenantController.cs">Example7’s TenantController</a> in the AuthP repo has an example of the multiple database servers option.</em></p>



<figure class="wp-block-image size-full"><a href="https://www.thereformedprogrammer.net/wp-content/uploads/2023/08/TwoWaysToCreateTenant.png"><img loading="lazy" decoding="async" width="839" height="518" src="https://www.thereformedprogrammer.net/wp-content/uploads/2023/08/TwoWaysToCreateTenant.png" alt="" class="wp-image-2904" srcset="https://www.thereformedprogrammer.net/wp-content/uploads/2023/08/TwoWaysToCreateTenant.png 839w, https://www.thereformedprogrammer.net/wp-content/uploads/2023/08/TwoWaysToCreateTenant-300x185.png 300w, https://www.thereformedprogrammer.net/wp-content/uploads/2023/08/TwoWaysToCreateTenant-768x474.png 768w, https://www.thereformedprogrammer.net/wp-content/uploads/2023/08/TwoWaysToCreateTenant-825x510.png 825w" sizes="auto, (max-width: 839px) 100vw, 839px" /></a></figure>



<p><em>NOTE: AuthP’s sharding muti-tenant feature uses connections strings to define the database server, authentication, and other options, but AuthP will add the name of the database. That’s why the  multiple database servers option above uses the name “Servers” for the connection strings names.</em></p>



<p>The service has a companion class called <a href="https://github.com/JonPSmith/AuthPermissions.AspNetCore/blob/main/AuthPermissions.AspNetCore/ShardingServices/ShardingOnlyTenantAddDto.cs">ShardingOnlyTenantAddDto</a> which makes setting up of the data very simple. In fact the code below will work for both create tenant options as it detects if you only have one valid connection string and sets the ConnectionStringName automatically.</p>


<div class="wp-block-syntaxhighlighter-code "><pre class="brush: csharp; title: ; notranslate">
public IActionResult Create(&#x5B;FromServices] 
    IGetSetShardingEntries shardingService)
{
    var dto = new ShardingOnlyTenantAddDto
    {
        DbProviderShortName = AuthPDatabaseTypes.SqlServer.ToString()
    };
    dto.SetConnectionStringNames(
        shardingService.GetConnectionStringNames());
    return View(dto);
}
</pre></div>


<p><em>NOTE: The name of the database and the sharding entry is created by the <a href="https://github.com/JonPSmith/AuthPermissions.AspNetCore/blob/main/AuthPermissions.AspNetCore/ShardingServices/ShardingOnlyTenantAddDto.cs">ShardingOnlyTenantAddDto</a>’s FormDatabaseInformation method which uses time as the database name, e.g. 20230808101149-892. If you want to use the tenant name then the FormDatabaseInformation method can be overridden by you.</em></p>



<h3 class="wp-block-heading">3.3 How the AuthP’s 6 “<a href="https://www.thereformedprogrammer.net/building-asp-net-core-and-ef-core-multi-tenant-apps-part2-administration/#1-automate-the-creation-of-a-new-tenant">Sign up now</a>” feature handles sharding-only tenants</h3>



<p>Earlier I said that the IOptionsMonitor limitation made it impossible to use the “Sign up now” feature to create a new sharding-only tenant (think “controlled by tenant user” type). Once the IOptionsMonitor limitation was overcome it wasn’t that hard to create a service that handles the tenant and its sharding entry.</p>



<p>The AuthP repo contains a <a href="https://github.com/JonPSmith/AuthPermissions.AspNetCore/blob/main/AuthPermissions.SupportCode/DemoShardOnlyGetDatabaseForNewTenant.cs">DemoShardOnlyGetDatabaseForNewTenant</a> which handles sharding-only tenant and the required sharding entry. The Example7 app in the repo has the “Sign up now” and uses the DemoShardOnlyGetDatabaseForNewTenant. The screenshot below shows this working – note that allows the user to decide where they wanted their data located.</p>



<figure class="wp-block-image size-full"><a href="https://www.thereformedprogrammer.net/wp-content/uploads/2023/08/SignUpNowShardinOnly.png"><img loading="lazy" decoding="async" width="476" height="365" src="https://www.thereformedprogrammer.net/wp-content/uploads/2023/08/SignUpNowShardinOnly.png" alt="" class="wp-image-2905" srcset="https://www.thereformedprogrammer.net/wp-content/uploads/2023/08/SignUpNowShardinOnly.png 476w, https://www.thereformedprogrammer.net/wp-content/uploads/2023/08/SignUpNowShardinOnly-300x230.png 300w" sizes="auto, (max-width: 476px) 100vw, 476px" /></a></figure>



<h2 class="wp-block-heading">Lots of new / updated documentation for AuthP version 6</h2>



<p>When I came back to programming after 21-year break (I went to the dark side, e.g. I was a manager) I picked Microsoft because their documentation was so good. Therefore I know that documentation is (nearly) as important as the code.</p>



<p>So, with the release of version 6 of the AuthP I have added / updated the documentation about sharding. Here is a list.</p>



<figure class="wp-block-table"><table><tbody><tr><td>Document</td><td>What about</td></tr><tr><td><a href="https://github.com/JonPSmith/AuthPermissions.AspNetCore/wiki/Multi-tenant-explained">Multi-tenant explained</a></td><td>Start here if new to AuthP</td></tr><tr><td><a href="https://github.com/JonPSmith/AuthPermissions.AspNetCore/wiki/Sharding-explained">Sharding explained</a></td><td>Describes two sharding modes, new</td></tr><tr><td><a href="https://github.com/JonPSmith/AuthPermissions.AspNetCore/wiki/How-AuthP-handles-sharding">How AuthP handles sharding</a></td><td>Describes internal code, new</td></tr><tr><td><a href="https://github.com/JonPSmith/AuthPermissions.AspNetCore/wiki/Configuring-sharding">Configuring sharding</a></td><td>How to setup sharding app, new</td></tr><tr><td><a href="https://github.com/JonPSmith/AuthPermissions.AspNetCore/wiki/Extra-help-for-shading-only-apps">Extra help for shading‐only apps</a></td><td>Docs on new features, new</td></tr><tr><td><a href="https://github.com/JonPSmith/AuthPermissions.AspNetCore/wiki/Managing-sharding-databases">Managing sharding databases</a></td><td>Showing / changing tenants, updated</td></tr><tr><td><a href="https://github.com/JonPSmith/AuthPermissions.AspNetCore/blob/main/UpdateToVersion6.md">UpdateToVersion6</a></td><td>How to update app to AuthP 6</td></tr></tbody></table></figure>



<p>The documents give you the overview of what to do, but I also take the time to add comments on all the code. That’s because sometimes it easier read the code to really what it does.</p>



<p>Also, the AuthP’s repo now has new example called <a href="https://github.com/JonPSmith/AuthPermissions.AspNetCore/tree/main/Example7.MvcWebApp.ShardingOnly">Example7</a> which implements a sharding-only multi-tenant application. The Example7 app uses all the new / updated features included in the new AuthP version 6 release.</p>



<h2 class="wp-block-heading">Conclusion</h2>



<p>When I started to look at improving Auth’s sharding-only tenant I kept finding things more and more issues and I wasn’t sure it was worth doing the update, so I did a <a href="https://twitter.com/thereformedprog/status/1682052862568808448">twitter poll</a> to find out what the users of the AuthP wanted. That poll clearly shows that developers preferred the sharding-only approach nearly twice more than a shared database approach. This feedback made my spend more time to make sharding-only really well.</p>



<p>I’m very happy about the AuthP version 6 update because it fixed the limitations in sharding-only multi-tenant applications and improved the admin of creating / deleting tenants. The only problem is that AuthP version 6 contains the <strong><em>breaking changes</em></strong>, which that means you have alter your the sharding multi-tenant application when update to AuthP version 6 – see <a href="https://github.com/JonPSmith/AuthPermissions.AspNetCore/blob/main/UpdateToVersion6.md">UpdateToVersion6</a> for the details.</p>



<p>There was always going to be some breaking changes, but I found my previous sharding code was hard to understand so I tided up that code at the same time. This adds extra breaking changes, but it turned out to fairly simple. For instance the update of the Example6 (hybrid multi-tenant) from version 5 to version 6 wasn’t hard – usually it was just changing the names of the services and methods, with the complex changed only in the internal code.</p>



<p>I hope AuthP’s user’s will find version 6 helps them, or anyone building a sharding-only multi-tenant application can gets some ideas for their project. Do give me feedback on version 6 and I am happy to answer your questions via the <a href="https://github.com/JonPSmith/AuthPermissions.AspNetCore/issues">AuthP ‘s GitHub issues pages</a>.</p>



<p>Happy coding.</p>
]]></content:encoded>
					
					<wfw:commentRss>https://www.thereformedprogrammer.net/the-long-journey-to-a-better-sharding-multi-tenant-application/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Using custom databases with the AuthP library – Part1: normal apps</title>
		<link>https://www.thereformedprogrammer.net/using-custom-databases-with-the-authp-library-part1-normal-apps/</link>
					<comments>https://www.thereformedprogrammer.net/using-custom-databases-with-the-authp-library-part1-normal-apps/#respond</comments>
		
		<dc:creator><![CDATA[Jon P Smith]]></dc:creator>
		<pubDate>Wed, 31 May 2023 18:52:56 +0000</pubDate>
				<category><![CDATA[.NET Core]]></category>
		<category><![CDATA[ASP.NET Core]]></category>
		<category><![CDATA[Entity Framework]]></category>
		<category><![CDATA[Multi-tenant]]></category>
		<guid isPermaLink="false">https://www.thereformedprogrammer.net/?p=2891</guid>

					<description><![CDATA[The AuthPermissions.AspNetCore library, referred to as AuthP library, provides enhanced Roles authentication and multi-tenant services to &#8230; <a href="https://www.thereformedprogrammer.net/using-custom-databases-with-the-authp-library-part1-normal-apps/" class="more-link">Continue reading <span class="screen-reader-text">Using custom databases with the AuthP library – Part1: normal apps</span></a>]]></description>
										<content:encoded><![CDATA[
<p>The <a href="https://github.com/JonPSmith/AuthPermissions.AspNetCore">AuthPermissions.AspNetCore</a><strong> </strong>library, referred to as <em>AuthP library</em>, provides <a href="https://www.thereformedprogrammer.net/finally-a-library-that-improves-role-authorization-in-asp-net-core/">enhanced Roles authentication</a> and <a href="https://github.com/JonPSmith/AuthPermissions.AspNetCore/wiki/Multi-tenant-explained">multi-tenant services</a> to an .NET application. The AuthP library needs to store information in a database, and the previous version (4.2.0) supported SQL Server and PostgreSQL, but with release of AuthP version 5.0.0 you can use the main database provider that <a href="https://learn.microsoft.com/en-us/ef/core/providers/">that EF Core supports</a>. This feature is called “<em>custom databases”</em> and which allows you to use other database providers other than the build-in SqlServer or PostgreSQL database providers.</p>



<p>This article explains the steps you need to use a different database provider with a normal (i.e. not sharding / hybrid) multi-tenant application. A second article called “Use custom databases with the AuthP library – Part2: sharding / hybrid apps” will cover using the “custom databases” feature with sharding / hybrid multi-tenant application.</p>



<p>This article is part of the series that covers AuthP’s multi-tenant applications in general. The other articles in “Building ASP.NET Core and EF Core multi-tenant apps” series are:</p>



<ol class="wp-block-list" type="1" start="1">
<li><a href="https://www.thereformedprogrammer.net/building-asp-net-core-and-ef-core-multi-tenant-apps-part1-the-database/">The database: Using a DataKey to only show data for users in their tenant</a></li>



<li><a href="https://www.thereformedprogrammer.net/building-asp-net-core-and-ef-core-multi-tenant-apps-part2-administration/">Administration: different ways to add and control tenants and users</a></li>



<li><a href="https://www.thereformedprogrammer.net/multi-tenant-apps-with-different-versions-can-increase-your-profits/">Versioning your app: Creating different versions to maximise your profits</a></li>



<li><a href="https://www.thereformedprogrammer.net/building-asp-net-core-and-ef-core-hierarchical-multi-tenant-apps/">Hierarchical multi-tenant: Handling tenants that have sub-tenants</a></li>



<li><a href="https://www.thereformedprogrammer.net/advanced-techniques-around-asp-net-core-users-and-their-claims/">Advanced techniques around ASP.NET Core Users and their claims</a></li>



<li><a href="https://www.thereformedprogrammer.net/part6-using-sharding-to-build-multi-tenant-apps-using-asp-net-core-and-ef-core/">Using sharding to build multi-tenant apps using EF Core and ASP.NET Core</a></li>



<li><a href="https://www.thereformedprogrammer.net/three-ways-to-securely-add-new-users-to-an-application-using-the-authp-library/">Three ways to securely add new users to an application using the AuthP library</a></li>



<li><a href="https://www.thereformedprogrammer.net/how-to-take-an-asp-net-core-web-site-down-for-maintenance/">How to take an ASP.NET Core web site “Down for maintenance”</a></li>



<li><a href="https://www.thereformedprogrammer.net/asp-net-core-three-ways-to-refresh-the-claims-of-a-logged-in-user/">Three ways to refresh the claims of a logged-in user</a></li>



<li>Use custom databases with the AuthP library – Part1: normal apps (<strong>this article</strong>)</li>



<li>Use custom databases with the AuthP library – Part2: sharding / hybrid apps (coming soon)</li>
</ol>



<h2 class="wp-block-heading">TL;DR; – Summary of this article</h2>



<ul class="wp-block-list">
<li>The AuthP library is designed to make building .NET <a href="https://github.com/JonPSmith/AuthPermissions.AspNetCore/wiki/Multi-tenant-explained">multi-tenant applications</a> by providing a the backend design and admin features to get your application build more quickly.</li>



<li>The new AuthP version 5.0.0 and contains the “custom databases” feature (plus other features &#8211; see next section), where you can now use any of the main of EF Core database providers with AuthP, focusing on normal (i.e. not sharding / hybrid) multi-tenant applications.</li>



<li>To use the “custom databases” feature with a normal multi-tenant applications you need to go three stages:<ul><li>Create an EF Core migration for your selected database provider</li></ul><ul><li>Create an extension method to register your custom database</li></ul>
<ul class="wp-block-list">
<li>Various minor changes to your tenant data to work with your custom database</li>
</ul>
</li>



<li>There is a working example of a normal multi-tenant applications using Sqlite as the custom database. You can find this in the <a href="https://github.com/JonPSmith/AuthPermissions.CustomDatabaseExamples/tree/main/CustomDatabase1.SqliteCustomParts/Migrations">AuthP.CustomDatabaseExamples</a> repo – look at projects with a name starting with “CustomDatabase1.”</li>



<li>This article compares a multi-tenant application using a build-in database and the same multi-tenant application using Sqlite as the custom database.</li>
</ul>



<h2 class="wp-block-heading">Summary of the new features in AuthP version 5.0.0</h2>



<p>Before getting to the details of the new “custom databases” in AuthP version 5.0.0 I provide an overall list of all the new in this release:</p>



<ul class="wp-block-list">
<li>BREAKING CHANGE in AuthP’s <a href="https://github.com/JonPSmith/AuthPermissions.AspNetCore/wiki/Multi-tenant-explained#2-defining-the-three-multi-tenant-database-arrangements">sharding / hybrid multi-tenant feature</a>: If you are using AuthP’s sharding /hybrid features, then look at the <a href="https://github.com/JonPSmith/AuthPermissions.AspNetCore/blob/main/UpdateToVersion5.md">UpdateToVersion5.md file</a> for what you need to do.</li>



<li>This new release makes it easier to use, and change, the <a href="https://github.com/JonPSmith/AuthPermissions.AspNetCore/wiki/Multi-tenant-explained#2-defining-the-three-multi-tenant-database-arrangements">sharding / hybrid multi-tenant feature</a>. The two items below cover the easy of use / change:<ul><li><em>Easier to use</em>: there is a new extension method called <code>SetupMultiTenantSharding</code> that sets up the sharding / hybrid multi-tenant feature. This makes it easier to set up this feature.</li></ul>
<ul class="wp-block-list">
<li><em>Easier to change</em>: You can change the internal services / setting of the sharding / hybrid feature, e.g. one developer wants to store sharding data in a database, instead of in a json file, which this release allows. This is done by creating a new extension method containing the code in the <code>SetupMultiTenantSharding</code> extension method with your changes.</li>
</ul>
</li>



<li>New feature: You can now use range of database providers (see list later) to use with the AuthP library. The table below shown the database providers AuthP 5.0.0 supports:</li>
</ul>



<figure class="wp-block-table"><table><tbody><tr><td><strong>Supported database providers in V5.0.0</strong></td><td>Comments</td></tr><tr><td>Microsoft.EntityFrameworkCore.SqlServer</td><td>Built-in – already in AuthP library</td></tr><tr><td>Npgsql.EntityFrameworkCore.PostgreSQL</td><td>Built-in – already in AuthP library</td></tr><tr><td>Microsoft.EntityFrameworkCore.Sqlite</td><td>&nbsp;</td></tr><tr><td>Microsoft.EntityFrameworkCore.Cosmos</td><td>&nbsp;</td></tr><tr><td>Pomelo.EntityFrameworkCore.MySql</td><td><a href="https://github.com/PomeloFoundation">Pomelo Foundation Project</a></td></tr><tr><td>MySql.EntityFrameworkCore</td><td><a href="https://dev.mysql.com">MySQL project</a> (Oracle)</td></tr><tr><td>Oracle.EntityFrameworkCore</td><td><a href="https://www.oracle.com/technetwork/topics/dotnet/">Oracle</a></td></tr></tbody></table></figure>



<blockquote class="wp-block-quote is-layout-flow wp-block-quote-is-layout-flow">
<p>NOTE: The AuthP library uses Giorgi Dalakishvili’s <a href="https://github.com/Giorgi/EntityFramework.Exceptions">EntityFramework.Exceptions</a> library to detect concurrency and unique errors, and Giorgi only supports the main EF Core database providers, i.e. SqlServer, PostgreSQL, SQLite, MySQL, MySQL.Pomelo, and Oracle.</p>
</blockquote>



<p>The rest of this article covers using a “custom database” with a single tenant database, and Part2 article will show to use “custom databases” with tenants in many databases (i.e. sharding / hybrid approach).</p>



<h2 class="wp-block-heading">Setting the scene – how AuthP’s multi-tenant features uses databases &nbsp;</h2>



<p>The AuthP’s multi-tenant feature provides nearly all the backend services / admin to build a multi-tenant application. I started building the AuthP library using one / two databases, which works for small / medium sized multi-tenant apps. Then in version 3.0.0 I added a “one db per tenant” approach (known as <em>sharding</em>) plus a hybrid design, which gives you more flexibility to handle both small and large tenants on the same multi-tenant app. The diagram below shows the four ways AuthP can handle databases to provide the right cost / performance for your multi-tenant project.</p>



<figure class="wp-block-image size-full"><a href="https://www.thereformedprogrammer.net/wp-content/uploads/2023/05/FourWaysToStoreAuthPAndTenantData.png"><img loading="lazy" decoding="async" width="732" height="329" src="https://www.thereformedprogrammer.net/wp-content/uploads/2023/05/FourWaysToStoreAuthPAndTenantData.png" alt="" class="wp-image-2892" srcset="https://www.thereformedprogrammer.net/wp-content/uploads/2023/05/FourWaysToStoreAuthPAndTenantData.png 732w, https://www.thereformedprogrammer.net/wp-content/uploads/2023/05/FourWaysToStoreAuthPAndTenantData-300x135.png 300w" sizes="auto, (max-width: 732px) 100vw, 732px" /></a></figure>



<blockquote class="wp-block-quote is-layout-flow wp-block-quote-is-layout-flow">
<p>NOTE: If you aren’t creating a multi-tenant project, then you follow the first, “All in in one Db” approach with AuthP data and any project data in one database.</p>
</blockquote>



<p>Up to this point the AuthP only supported SQL Server and Postgres database types, but a few developers asked if the I could support other database providers. So, when I found time, I created a new version of the AuthP I added the “custom database” feature that supports allows any database server that EF Core supports.</p>



<h2 class="wp-block-heading">Introducing the AuthP.CustomDatabaseExamples repo</h2>



<p>To help you, and to make sure the custom database feature works, I created a repo called <a href="https://github.com/JonPSmith/AuthP.CustomDatabaseExamples">AuthP.CustomDatabaseExamples</a> which contains two examples: this article covering multi-tenant application that keep all tenant data in one database (see 1 and 2 in the Four Ways diagram).</p>



<p>To use a custom database you must change various code and migrations, which this article will explain. I chose Sqlite for my custom database type because the Individual User Accounts authentication supports Sqlite.</p>



<blockquote class="wp-block-quote is-layout-flow wp-block-quote-is-layout-flow">
<p>NOTE: Using Sqlite for the custom database examples requires extra code over other database providers. That’s because the Sqlite’s connection string doesn’t have a Server / host part but has a filepath in the data source part. Other databases, such as MySql, should be slightly easier as the connection string fully defines the server and database name.</p>
</blockquote>



<p>The example which works with AuthP “add tenant data in one database” and has three projects, all starting with CustomDatabase1.</p>



<h2 class="wp-block-heading">Steps in building a normal AuthP application with a custom database</h2>



<p>We start with an application using AuthP which uses one / two databases, i.e. 1 and 2 in the previous “Four Ways” diagram. Here are the steps to use a custom database are listed below, which will detailed later.</p>



<ol class="wp-block-list" type="1">
<li>Create a migration of the AuthPermissionsDbContext for your custom database.</li>



<li>Create an extension method to register your custom database.</li>



<li>Other, non-AuthP things you need to think about</li>
</ol>



<p>These stages are explained below.</p>



<h3 class="wp-block-heading">1. Create a migration of the AuthPermissionsDbContext for your custom database</h3>



<p>To create or update the AuthPermissionsDbContext you need to create an EF Core migration, and each database provider needs its own migration based on your chosen custom database type.</p>



<p>If you are using AuthP’s build-in database providers, then the AuthP NuGet package contains migrations for SQL Server and Postgres. But when using the custom database feature, then you need to create the migration for your custom database type. There are <a href="https://learn.microsoft.com/en-us/ef/core/managing-schemas/migrations/">many ways to create a EF migration</a>, but personally I use a IDesignTimeDbContextFactor&lt;TContext>.   The code below comes from the <a href="https://github.com/JonPSmith/AuthP.CustomDatabaseExamples/blob/main/CustomDatabase1.SqliteCustomParts/AuthPermissionsDbMigrate/AuthPermissionsDbContextSqlite.cs">CustomDatabase1’s AuthPermissionsDbContextSqlite</a> class.</p>


<div class="wp-block-syntaxhighlighter-code "><pre class="brush: csharp; highlight: [6,7,13,16]; title: ; notranslate">
public class AuthPermissionsDbContextSqlite :
     IDesignTimeDbContextFactory&lt;AuthPermissionsDbContext&gt;
{
    // The connection string must be valid, but the  
    // connection string isn’t used when adding a migration.
    private const string connectionString = 
        &quot;Data source=PrimaryDatabase.sqlite&quot;;

    public AuthPermissionsDbContext CreateDbContext(string&#x5B;] args)
    {
        var optionsBuilder =
            new DbContextOptionsBuilder&lt;AuthPermissionsDbContext&gt;();
        optionsBuilder.UseSqlite(connectionString);

        return new AuthPermissionsDbContext(optionsBuilder.Options, 
            null, new SqliteDbConfig());
    }
}
</pre></div>


<p>The following lines you to change for your custom database provider</p>



<ul class="wp-block-list">
<li>Lines 6 and 7: You must have a connection string in the correct format for your custom database type, but if you are creating a migration then the database won&#8217;t be accessed. </li>



<li>Line 13: you need to use the correct “Use???” method for your custom database provider.</li>



<li>Line 16: The third parameter to the <a href="https://github.com/JonPSmith/AuthPermissions.AspNetCore/blob/main/AuthPermissions.BaseCode/DataLayer/EfCode/AuthPermissionsDbContext.cs">AuthPermissionsDbContext</a> class allows you to add any custom-specific set of EF Core model commands to be run at the start of the AuthPermissionsDbContext’s  OnModelCreating method.  The main use is to set up concurrency tokens to capture concurrent changes to the same table. See the <a href="https://github.com/JonPSmith/AuthPermissions.CustomDatabaseExamples/blob/main/CustomDatabase1.SqliteCustomParts/SqliteDbConfig.cs">SqliteDbConfig</a> class for Sqlite concurrent change commands.</li>
</ul>



<blockquote class="wp-block-quote is-layout-flow wp-block-quote-is-layout-flow">
<p>NOTE: Setting up the Sqlite concurrent change in the EF Core migration is a bit harder than from other database types. That’s because you need to add extra trigger code – see <a href="https://www.bricelam.net/2020/08/07/sqlite-and-efcore-concurrency-tokens.html">this article</a> on what Sqlite needs and see the <a href="https://github.com/JonPSmith/AuthP.CustomDatabaseExamples/tree/main/CustomDatabase1.SqliteCustomParts/Migrations">…Version5.cs in the SqliteCustomParts Migrations folder</a>.</p>
</blockquote>



<h3 class="wp-block-heading">2. Extension method to register your custom database</h3>



<p>You need to create an extension method to register your custom database. You do this by copying one of existing extension methods already in the AuthP code, such as <a href="https://github.com/JonPSmith/AuthPermissions.AspNetCore/blob/main/AuthPermissions/SetupExtensions.cs#L46-L89">UsingEfCoreSqlServer</a>, and alter six parts:</p>



<ol class="wp-block-list" type="1">
<li>You set the AuthPDatabaseType to the enum AuthPDatabaseTypes.CustomDatabase</li>



<li>Change the AuthPermissionsDbContext to your custom database provider.</li>



<li>Link to your assembly containing the AuthPermissionsDbContext migration.</li>



<li>Update the <a href="https://github.com/Giorgi/EntityFramework.Exceptions">EntityFramework.Exceptions</a> to your custom database provider.</li>



<li>Add new code to register custom database configuration code.</li>



<li>Optional: Update the RunMethodsSequentially code to provide a global lock</li>
</ol>



<p>The diagram below shows how you would take the <a href="https://github.com/JonPSmith/AuthPermissions.AspNetCore/blob/main/AuthPermissions/SetupExtensions.cs#L46-L89">UsingEfCoreSqlServer</a> extension method and alter it to become your custom database extension method (NOTE click to get a bigger version of the diagram).</p>



<figure class="wp-block-image size-full"><a href="https://www.thereformedprogrammer.net/wp-content/uploads/2023/05/ConvertUsingEfCoreSqlServerToCustomDb.png"><img loading="lazy" decoding="async" width="917" height="663" src="https://www.thereformedprogrammer.net/wp-content/uploads/2023/05/ConvertUsingEfCoreSqlServerToCustomDb.png" alt="" class="wp-image-2893" srcset="https://www.thereformedprogrammer.net/wp-content/uploads/2023/05/ConvertUsingEfCoreSqlServerToCustomDb.png 917w, https://www.thereformedprogrammer.net/wp-content/uploads/2023/05/ConvertUsingEfCoreSqlServerToCustomDb-300x217.png 300w, https://www.thereformedprogrammer.net/wp-content/uploads/2023/05/ConvertUsingEfCoreSqlServerToCustomDb-768x555.png 768w" sizes="auto, (max-width: 917px) 100vw, 917px" /></a></figure>



<p>The AuthP.CustomDatabaseExamples repo has a UsingEfCoreSqlite extension method in the <a href="https://github.com/JonPSmith/AuthP.CustomDatabaseExamples/blob/main/CustomDatabase1.SqliteCustomParts/SqliteSetupExtensions.cs">SqliteSetupExtensions</a> class which sets up a Sqlite database as the custom database. This has gone through the six steps shown in the diagram above.</p>



<h3 class="wp-block-heading">3. Other, non-AuthP things you need to think about</h3>



<p>There are a few other things to do that use your custom database outside the AuthP library. The main one is the tenant part provides some sort of application that users will use. In the AuthP library there is one that mimics an application where you can entry invoices. Another example is managing shops sales/stock. If you want to use your custom database in your tenant data, then you need to set that up too.</p>



<p>The first two options in the “Four Ways” diagram show that you two ways to handle the tenant part of the outside sharding.</p>



<ol class="wp-block-list" type="1">
<li>“All in one Db”: your tenant data is within the same database, so it must use the same custom database.</li>



<li>“Separate AuthP / tenant data”: In this case your tenant data doesn’t have to use the same custom database that AuthP uses.&nbsp;</li>
</ol>



<h2 class="wp-block-heading">Comparing two AuthP multi-tenant examples to see the changes</h2>



<p>I created an example multi-tenant application using Sqlite as the custom database, by copying an existing multi-tenant application that used the built-in SqlServer – see <a href="https://github.com/JonPSmith/AuthPermissions.AspNetCore/tree/main/Example3.MvcWebApp.IndividualAccounts">Example3 in the AuthP repo</a>. This allows me to compare the changes to my new Sqlite to show what has changed.</p>



<p>I created a new repo called <a href="https://github.com/JonPSmith/AuthP.CustomDatabaseExamples">AuthP.CustomDatabaseExamples</a> and copy / updated an&nbsp; example multi-tenant application, using three projects wholes names all starting with “CustomDatabase1.”. There are three projects are:</p>



<figure class="wp-block-table"><table><tbody><tr><td>Projects</td><td>&nbsp;</td></tr><tr><td>CustomDatabase1.InvoiceCode</td><td>Code for the tenant data / features</td></tr><tr><td>CustomDatabase1.SqliteCustomParts</td><td>Contains Sqlite code / migration</td></tr><tr><td>CustomDatabase1.WebApp</td><td>ASP.NET Core providing a runnable web app</td></tr></tbody></table></figure>



<h4 class="wp-block-heading">3a. Example3.InvoiceCode -&gt; CustomDatabase1.InvoiceCode</h4>



<p>The main changes are to so using Sqlite for the invoice code. Here are the changes:</p>



<ul class="wp-block-list">
<li><a href="https://github.com/JonPSmith/AuthP.CustomDatabaseExamples/blob/main/CustomDatabase1.InvoiceCode/AppStart/StartupExtensions.cs">&#8230;AppStart.RegisterInvoiceServices</a> – changed to use Sqlite</li>



<li><a href="https://github.com/JonPSmith/AuthP.CustomDatabaseExamples/blob/main/CustomDatabase1.InvoiceCode/EfCoreCode/InvoicesDesignTimeContextFactory.cs">InvoicesDesignTimeContextFactory</a> (IDesignTimeDbContextFactory) to create a migration for the Invoice DbContext to Sqlite (The AuthP Example3 Invoice DbContext used the build-in SqlServer). See my comments on the end of this class which provides one way to create the migration.</li>



<li>You need to create a <a href="https://github.com/JonPSmith/AuthP.CustomDatabaseExamples/tree/main/CustomDatabase1.InvoiceCode/EfCoreCode/Migrations">Sqlite Migration</a> for the Invoice DbContext using the InvoicesDesignTimeContextFactory detail above.</li>
</ul>



<p>3b. New <a href="https://github.com/JonPSmith/AuthP.CustomDatabaseExamples/tree/main/CustomDatabase1.SqliteCustomParts/Migrations">CustomDatabase1.SqliteCustomParts</a> project</p>



<p>This project contains the Sqlite extras that you need to use Sqlite with AuthP. They are:</p>



<ul class="wp-block-list">
<li>The <a href="https://github.com/JonPSmith/AuthP.CustomDatabaseExamples/blob/main/CustomDatabase1.SqliteCustomParts/SqliteDbConfig.cs">SqliteDbConfig class</a> which contains some extra EF Core commands to be run in the DbContext’s OnModelCreating method to set up extra concurrency tokens. Concurrency tokens are different for each database provider, so this use to the correct concurrency tokens for your custom database. NOTE: Sqlite concurrency tokens are <a href="https://www.bricelam.net/2020/08/07/sqlite-and-efcore-concurrency-tokens.html">quite difficult to add to a migration</a> – look at the code in the provided migration</li>



<li><a href="https://github.com/JonPSmith/AuthP.CustomDatabaseExamples/blob/main/CustomDatabase1.SqliteCustomParts/AuthPermissionsDbMigrate/AuthPermissionsDbContextSqlite.cs">AuthPermissionsDbContextSqlite</a> (IDesignTimeDbContextFactory) which will create a Sqlite migration for the AuthP’s DbContext which holds the admin data.</li>



<li><a href="https://github.com/JonPSmith/AuthPermissions.CustomDatabaseExamples/blob/main/CustomDatabase1.SqliteCustomParts/SqliteSetupExtensions.cs">SqliteSetupExtensions</a>, which I explained in section “<a href="https://www.thereformedprogrammer.net/using-custom-databases-with-the-authp-library-part1-normal-apps/#2-extension-method-to-register-your-custom-database">2. Extension method to register your custom database</a>”.</li>
</ul>



<h4 class="wp-block-heading">3.c. Example3.MvcWebApp.IndividualAccounts -&gt; CustomDatabase1.WebApp</h4>



<p>The big change in the ASP.NET Core project is changing is the Program class. In the <a href="https://github.com/JonPSmith/AuthP.CustomDatabaseExamples/blob/main/CustomDatabase1.WebApp/Program.cs">Program class</a> I have added #regions to show what has changed.</p>



<p>The other change is in the <a href="https://github.com/JonPSmith/AuthP.CustomDatabaseExamples/blob/main/CustomDatabase1.WebApp/appsettings.json">appsettings.json file</a> where you need to provide the Sqlite connection string, which is quite different from other database connection strings.</p>



<h2 class="wp-block-heading">Conclusion</h2>



<p>I haven’t had many requests for the “custom database” feature for AuthP, but like the support for multiple languages in AuthP many found it useful once its there.</p>



<p>Creating the “custom database” feature for a normal (non-sharding) applications was fairly quick to create, but doing the same to the sharding / hybrid applications it turns out to be quite more complex. I decided to release AuthP version 5.0.0 without the sharding / hybrid “custom database” feature because this release contains other improvements that people have asked for.</p>



<p>Watch this space for Part2 of the “custom databases” article to see how to use “custom database” feature when building sharding / hybrid multi-tenants applications. Happy cod</p>
]]></content:encoded>
					
					<wfw:commentRss>https://www.thereformedprogrammer.net/using-custom-databases-with-the-authp-library-part1-normal-apps/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>A pattern / library for methods that return a status, including localization</title>
		<link>https://www.thereformedprogrammer.net/a-pattern-library-for-methods-that-return-a-status-including-localization/</link>
					<comments>https://www.thereformedprogrammer.net/a-pattern-library-for-methods-that-return-a-status-including-localization/#comments</comments>
		
		<dc:creator><![CDATA[Jon P Smith]]></dc:creator>
		<pubDate>Thu, 26 Jan 2023 14:57:56 +0000</pubDate>
				<category><![CDATA[.NET Core]]></category>
		<category><![CDATA[ASP.NET Core]]></category>
		<category><![CDATA[.NET]]></category>
		<category><![CDATA[localization]]></category>
		<guid isPermaLink="false">https://www.thereformedprogrammer.net/?p=2878</guid>

					<description><![CDATA[This article is about a pattern / library that allows you to create methods that can &#8230; <a href="https://www.thereformedprogrammer.net/a-pattern-library-for-methods-that-return-a-status-including-localization/" class="more-link">Continue reading <span class="screen-reader-text">A pattern / library for methods that return a status, including localization</span></a>]]></description>
										<content:encoded><![CDATA[
<p>This article is about a pattern / library that allows you to create methods that can return a <em>status</em>, that is a success / fail value, plus the error messages – I call this “<em>returning a status</em>”. It then goes on to describe another library called <a href="https://github.com/JonPSmith/Net.LocalizeMessagesAndErrors">Net.LocalizeMessagesAndErrors</a> (shortened<strong> </strong>to <em>Localize-ME</em>) that returns a status where the errors can be in multiple languages (known as <em>localization</em>).</p>



<p>This article talks about a library called <a href="https://github.com/JonPSmith/GenericServices.StatusGeneric">GenericServices.StatusGeneric</a><strong> </strong>(shortened to <em>StatusGeneric</em><strong>) </strong>that implements the “return a status” pattern. Then it talks about a different library called  <a href="https://github.com/JonPSmith/Net.LocalizeMessagesAndErrors">Net.LocalizeMessagesAndErrors</a> (shortened to <em>Localize-ME</em>) that contains an implementation of “return a status” pattern, but handles multiple languages (known as <em>localization</em>) of the error messages.</p>



<p>This article is part of series about handling localization.<a href="https://github.com/JonPSmith/Net.LocalizeMessagesAndErrors/wiki"></a> The full list of the articles in this series are:</p>



<ol class="wp-block-list" type="1">
<li><a href="https://www.thereformedprogrammer.net/improving-the-support-of-multiple-languages-in-net-applications">Improving the support of multiple languages in .NET applications</a></li>



<li><a href="https://www.thereformedprogrammer.net/applying-an-improved-multiple-languages-library-to-net-applications/">Applying the improved multiple languages support to .NET applications</a></li>



<li>A pattern / library for methods that return a status, including localization (<strong>this article</strong>)</li>
</ol>



<h2 class="wp-block-heading">TL;DR; – Summary of this article</h2>



<ul class="wp-block-list">
<li>The “return a status” pattern is useful wherever a method could return an error.</li>



<li>The StatusGeneric library provides a simple, but powerful implementation of the “return a status” pattern and this article provides information on how to use the StatusGeneric library.</li>



<li>A second library, Localize-ME, contains an implementation of&nbsp; the “return a status” pattern, where the error’s message can be returned in different languages. The localization part uses Localize-ME library, which has extra features on top of the .NET localization services.</li>
</ul>



<h2 class="wp-block-heading">1. Introduction to the StatusGeneric library</h2>



<p>In 2014 I created <a href="https://github.com/JonPSmith/GenericServices">a library</a> using Entity Framework (known as EF6) which contains the “return a status” pattern inside it. Then in 2019, when .NET and EF Core were stable, I built a number of libraries that used the “return a status” pattern, so I created the standalone <a href="https://github.com/JonPSmith/GenericServices.StatusGeneric">StatusGeneric library</a><strong> </strong>so that I could use it in lots of places / libraries<strong>. </strong>So far, this library has been downloads > 200,000 times so obviously others find it useful too.</p>



<p>The following subsections will introduce you to the StatusGeneric library and how you can use it, starting with what the returned status contains.</p>



<h3 class="wp-block-heading">The returned status: IStatusGeneric and IStatusGeneric&lt;out T&gt;</h3>



<p>The key of the “return a status” is the <a href="https://github.com/JonPSmith/GenericServices.StatusGeneric/blob/master/StatusGeneric/IStatusGeneric.cs">IStatusGeneric</a>, which defines what the returned status contains. This list below defined each property in the</p>



<p>I created an interface, which I refer to as a <em>status</em>, that is returned to the calling method. This interface, called <a href="https://github.com/JonPSmith/GenericServices.StatusGeneric/blob/master/StatusGeneric/IStatusGeneric.cs">IStatusGeneric</a>, has the following properties:</p>



<ul class="wp-block-list">
<li>A IReadOnlyList <code>Errors </code>property where errors are stored. Each error is contained in a <a href="https://learn.microsoft.com/en-us/dotnet/api/system.componentmodel.dataannotations.validationresult">ValidationResult</a> class, which contains the error message and optionally the name of the member that error is linked to (ASP.NET Core uses this to show the error next to the actual entry that has an error.</li>



<li>A boolean <code>IsValid </code>property, which is true if there are no errors.</li>



<li>A boolean <code>HasErrors </code>property, which is true if there are errors.</li>



<li>A string <code>Message </code>property, which can contain a success message if there aren’t any Errors or contains “Failed with nn errors” if there are in the Errors property.</li>
</ul>



<p>I also created the <a href="https://github.com/JonPSmith/GenericServices.StatusGeneric/blob/master/StatusGeneric/IStatusGeneric.Generic.cshttps:/github.com/JonPSmith/GenericServices.StatusGeneric/blob/master/StatusGeneric/IStatusGeneric.Generic.cs">IStatusGeneric&lt;out T&gt;</a> interface, which adds a Result property to the IStatusGeneric for methods that want to return a value as part of the status. The Result property is set to default if there are errors to ensure that</p>



<h3 class="wp-block-heading">How to use the StatusGeneric library in your code</h3>



<p>The first step is to add the StatusGeneric’s <a href="https://www.nuget.org/packages/GenericServices.StatusGeneric/">NuGet package</a> to the project you want use the StatusGeneric library. Then you can create a method that returns a status, as shown below. Below the code I give a list of the various parts in the code:</p>


<div class="wp-block-syntaxhighlighter-code "><pre class="brush: csharp; title: ; notranslate">
public IStatusGeneric CheckNull(string? month)
{
    var status = new StatusGenericHandler();
    status.Message = &quot;All went well&quot;;

    if (month == null)
        return status.AddError(&quot;input must not be null&quot;, 
             nameof(month));

    return status;
}
</pre></div>


<p>The list below contains a description of the use of the StatusGeneric library in the method above</p>



<ul class="wp-block-list">
<li>Line 1: The method returns a class that matches the IStatusGeneric.</li>



<li>Line 3: You need to create a status using the StatusGenericHandler constructor. This sets up an empty status, i.e. has no errors.</li>



<li>Line 4: Optionally you can set a success Message. Note that if there are errors, then the Message contains the string “Failed with nn errors&#8221;;</li>



<li>Line 7: This adds a error to the status and then returns the status
<ul class="wp-block-list">
<li>Line 8: Optionally you can add the name of the member that has the error.</li>
</ul>
</li>



<li>Line 10: This returns the status. In this case there are no errors, so it is valid.</li>
</ul>



<blockquote class="wp-block-quote is-layout-flow wp-block-quote-is-layout-flow">
<p>NOTE: The name of the member that has the error (line 8) must have the actual name of the property in a class, which in the case above would be Month, not month. I use a method called CamelToPascal (see <a href="https://github.com/JonPSmith/Net.LocalizeMessagesAndErrors/blob/main/LocalizeMessagesAndErrors/NameExtension.cs">this extension class</a> in the Localize-ME library) that changes the first character to a capital character.</p>
</blockquote>



<p>And the code below provides an example of how use the CheckNull method in an ASP.NET Core application, with a list of the various parts after the code:</p>



<blockquote class="wp-block-quote is-layout-flow wp-block-quote-is-layout-flow">
<p>NOTE: You need to add the EfCore.GenericServices.AspNetCore <a href="https://www.nuget.org/packages/EfCore.GenericServices.AspNetCore/">NuGet package</a> to obtain access to the &nbsp;CopyErrorsToModelState method to copy and errors to the Razor pages.</p>
</blockquote>


<div class="wp-block-syntaxhighlighter-code "><pre class="brush: csharp; title: ; notranslate">
&#x5B;HttpPost]
&#x5B;ValidateAntiForgeryToken]
public IActionResult CheckNull(string? month)
{
    var status = _exampleMethods.CheckNull(month);
    if (status.IsValid)
        return RedirectToAction(nameof(Index), 
             new { message = status.Message });

    status.CopyErrorsToModelState(ModelState);
    return View();
}
</pre></div>


<p>The list below contains a description of how the CheckNull method could be used in an ASP.NET Core application:</p>



<ul class="wp-block-list">
<li>Line 5: You call the CheckNull method and you get back a status, which is of type IStatusGeneric.</li>



<li>Line 6: If the status is valid, then you go back to the Index page.</li>



<li>Line 8: The success message from the CheckNull method to show to the user.</li>



<li>Line 9: Otherwise, the status has errors, so we want to show the error(s).</li>



<li>Line 10: Using the CopyErrorsToModelState method from<strong> </strong><a href="https://github.com/JonPSmith/EfCore.GenericServices.AspNetCore">EfCore.GenericServices.AspNetCore</a> library the errors (which are stored using the <a href="https://learn.microsoft.com/en-us/dotnet/api/system.componentmodel.dataannotations.validationresult">ValidationResult</a> class) are added to the ASP.NET Core’s ModelState.</li>



<li>Line 11: This returns to the Get action and the error(s) in the ModelState are shown to the user.</li>
</ul>



<h3 class="wp-block-heading">Different ways to add errors to the status</h3>



<p>The last section provided a simple example of using the StatusGeneric library, but in real life the checking for errors can be must more complex. Here are some of the situations you might come across and how the StatusGeneric library:</p>



<ol class="wp-block-list" type="1">
<li>Using multiple checks to return all the errors to the user</li>



<li>Combining errors from multiple statuses</li>
</ol>



<h4 class="wp-block-heading">1. Using multiple checks to return all the errors to the user</h4>



<p>The example below show you might apply many checks so that the user gets all the errors in one go. This pattern is good for users as all the errors are returned at the same time.</p>


<div class="wp-block-syntaxhighlighter-code "><pre class="brush: plain; title: ; notranslate">
public IStatusGeneric CheckPassword(string password)
{
    var status = new StatusGenericHandler();

    //series of tests and then return all the errors together
    //Good because the user gets all the errors at once
    if (password.Length &lt; 10)
        status.AddError(&quot;A password must be 10 or more in length&quot;,
            nameof(password));
    if (!password.Any(char.IsUpper))
        status.AddError(&quot;A password must contain an upper case character&quot;,
            nameof(password));
    if (!password.Any(char.IsLower))
        status.AddError(&quot;A password must contain a lower case character&quot;,
            nameof(password));
    if (!password.Any(char.IsDigit))
        status.AddError(&quot;A password must contain an number&quot;,
            nameof(password));
    
    return status;
}
</pre></div>


<h4 class="wp-block-heading">2. Combining errors from multiple statuses</h4>



<p>Sometimes the testing for errors is best coded by called to other “return a status” methods so the StatusGeneric library has a CombineStatuses method. This method will copy the errors from one the called “return a status” method into the caller’s status.</p>



<p>The code below shows an example of logging in with tests on the email, password and the actual login part and, if successful, then returns the userId.</p>


<div class="wp-block-syntaxhighlighter-code "><pre class="brush: csharp; title: ; notranslate">
public IStatusGeneric&lt;string&gt; Login
    (string email, string password)
{
    var status = new StatusGenericHandler&lt;string&gt;();

    status.CombineStatuses(
        CheckValidEmail(email));

    if (status.HasErrors)
        return status;

    if (status.CombineStatuses(
            CheckPassword(password)).HasErrors)
        return status;

    var loginStatus = LoginUser(email, password);
    status.CombineStatuses(loginStatus);

    status.SetResult(loginStatus.Result);

    return status;
}
</pre></div>


<p>The list below contains a description of how the Login method works:</p>



<ul class="wp-block-list">
<li>Line 1: The Login method will return the logged-in user’s userId.</li>



<li>Lines 6,7: The Login method calls a CheckValidEmail method that returns a status which is copying into the caller’s status via the CombineStatuses method.</li>



<li>Lines 9,10: This returns the combine status if the status has errors.</li>



<li>Lines 12 to 14: This shows shorter way to return on a combined status that has errors.</li>



<li>Lines 16: The LoginUser method returns a status that contains (if there are no errors) the logged-in user’s userId. </li>



<li>Line 17: Its status is combined to pick up any errors.</li>



<li>Line 19: This sets the string Result to send back with the method’s status. NOTE: if there are errors the Result is set to default, which for a string is null.</li>
</ul>



<h3 class="wp-block-heading">Real-world examples of using the StatusGeneric library</h3>



<p>I built a large library called <a href="https://github.com/JonPSmith/AuthPermissions.AspNetCore">AuthPermissions.AspNetCore</a> (shortened to <em>AuthP</em>) which allow developers to create multi-tenant applications (and other features). Up to version 4.0.0 the AuthP  library uses the StatusGeneric library, and here is a link to <a href="https://github.com/JonPSmith/AuthPermissions.AspNetCore/blob/V4.0.0/AuthPermissions/AdminCode/Services/AuthTenantAdminService.cs">AuthTenantAdminService</a> in AuthP 4.0.0 version, which shows it handles errors (tip: start at line 126, because that’s where the error handling starts).</p>



<h2 class="wp-block-heading">2. How to use the Localize-ME library</h2>



<p>And in the end of 2022 I created another library, referred to as to <em>Localize-ME</em>, that includes a version that supports the StatusGeneric’s interfaces, but handles multiple languages of the error messages (known as localization). I created this library to add localization to my AuthP library and because because the AuthP already used the StatusGeneric library I added the StatusGenericLocalizer / StatusGenericLocalizer&lt;T> classes to replace the StatusGenericHandler / StatusGenericHandler&lt;T> classes.</p>



<p>The design of the StatusGenericLocalizer (and its IDefaultLocalizer service) is to have a default message / error within your code, in your selected language you define when register the IDefaultLocalizer service. This has two benefits, a) the code is easier to understand and b) if localization isn’t turned on it can still provide message / error (useful in NuGet packages).</p>



<blockquote class="wp-block-quote is-layout-flow wp-block-quote-is-layout-flow">
<p>NOTE: The Localize-ME library was build to add features that overcome certain restrictions in the .NET localization services – see <a href="https://www.thereformedprogrammer.net/improving-the-support-of-multiple-languages-in-net-applications/">this article</a> for more on this.</p>
</blockquote>



<p>The Localize-ME library has <a href="https://github.com/JonPSmith/Net.LocalizeMessagesAndErrors/wiki">comprehensive documentation</a> so this section is really about understanding the differences between the StatusGeneric library and the <a href="https://github.com/JonPSmith/Net.LocalizeMessagesAndErrors/blob/main/LocalizeMessagesAndErrors/StatusGenericLocalizer.cs">StatusGenericLocalizer</a> class and its IDefaultLocalizer service in the Localize-ME library.</p>



<h3 class="wp-block-heading">How the StatusGenericLocalizer is different from the StatusGeneric?</h3>



<p>The code below does exactly as the StatusGeneric shown in the “How to use the StatusGeneric library in your code” section ?LINK? but it’s a lot longer than the StatusGeneric version. That’s because we need to provide the service and keys to display the Message and Errors in different languages. The list after the code explains the different parts from the original StatusGeneric version ?LINK?.</p>


<div class="wp-block-syntaxhighlighter-code "><pre class="brush: csharp; title: ; notranslate">
public IStatusGeneric CheckNull(string? month)
{
    var status = new StatusGenericLocalizer(
         _defaultLocalizer);
    status.SetMessageString(
        &quot;Success&quot;.ClassMethodLocalizeKey(this, false), 
        &quot;All went well&quot;);

    if (month == null)
        return status.AddErrorString(
            &quot;NullParam&quot;.JustThisLocalizeKey(this), 
            &quot;The input must not be null.&quot;, 
            nameof(month).CamelToPascal())

    return status;
}
</pre></div>


<p>The list below contains a description of the use of the StatusGenericLocalizer class in the method above:</p>



<ul class="wp-block-list">
<li>Lines 3,4: The StatusGenericLocalizer constructor needs a IDefaultLocalizer service. This requires to <a href="https://github.com/JonPSmith/Net.LocalizeMessagesAndErrors/wiki/Steps-to-localize-your-ASP.NET-Core-app">localize your application</a> and  <a href="https://github.com/JonPSmith/Net.LocalizeMessagesAndErrors/wiki/Adding-this-library-to-a-ASP.NET-Core-app#adding-the-idefaultlocalizer-service">register the IDefaultLocalizer service</a> on startup.</li>



<li>Lines 5 to 7: This adds a default success Message with two parts:<ul><li>Line 6:  This creates a unique key (see <a href="https://github.com/JonPSmith/Net.LocalizeMessagesAndErrors/wiki/Creating-DefaultLocalization-localize-keys">this document</a>) to lookup the message/error in the localization resource files.</li></ul>
<ul class="wp-block-list">
<li>Line 7: This is the message to use if the culture (language) of the user / app matches the default culture. Note that if there are errors, then the Message contains the string “Failed with nn errors&#8221;;</li>
</ul>
</li>



<li>Lines 10 to 13: This adds an error to the status and then returns the status<ul><li>Line 10: This a method that adds an error in the form of a constant string. Other methods allow FormattableStrings, which can contain dynamic data in the error.</li></ul><ul><li>Line 11: Creates a key to lookup the error message in the localization resource files.</li></ul><ul><li>Line 12: The error string in the default culture.</li></ul>
<ul class="wp-block-list">
<li>Line 13: Optionally you can add the name of the member that has the error. In this case the Localize-ME library contains an implementation of the CamelToPascal method, which makes the member name used in a class.</li>
</ul>
</li>
</ul>



<h3 class="wp-block-heading">Real-world examples of using the Localize-ME library</h3>



<p>As I said I have a library called AuthP and I released version 4.1.0 with localization via the Localize-ME library. In the “Real-world examples of using the StatusGeneric library” section ?LINK? I gave you a link to the <a href="https://github.com/JonPSmith/AuthPermissions.AspNetCore/blob/V4.0.0/AuthPermissions/AdminCode/Services/AuthTenantAdminService.cs">AuthTenantAdminService</a> in AuthP 4.0.0, before the localization.</p>



<p>This link to the <a href="https://github.com/JonPSmith/AuthPermissions.AspNetCore/blob/main/AuthPermissions/AdminCode/Services/AuthTenantAdminService.cs">AuthTenantAdminService</a> comes from the main branch, which does the same as the AuthP 4.0.0 version, but it supports localization (tip: start at line 128, because that’s where the error handling starts).</p>



<h2 class="wp-block-heading">Conclusions</h2>



<p>The “returning a status” method pattern is simple, but powerful pattern. I have used this pattern so many times that I build “return a status” code in 2014. Then in 2019, when .NET was stable, I released the <a href="https://github.com/JonPSmith/GenericServices.StatusGeneric">StatusGeneric library</a> with an improved version over the 2014 implementation due to feedback of using the first version for many years.</p>



<p>What I didn’t do well on StatusGeneric library was documentation, and this article is one way to fix that issue, although I have also improved the StatusGeneric’s <a href="https://github.com/JonPSmith/GenericServices.StatusGeneric/blob/master/README.md">README file</a> a few times to provide better documentation.</p>



<p>The Localize-ME library DOES have <a href="https://github.com/JonPSmith/Net.LocalizeMessagesAndErrors/wiki">good documentation</a> right from the start, with <a href="https://github.com/JonPSmith/Net.LocalizeMessagesAndErrors/wiki/Introduction-to-StatusGenericLocalizer">this page</a> for the StatusGenericLocalizer classes. It needed the documentation because localization is MUCH more complex than the “return a status” pattern, but if you want to support multiple languages then you need it.</p>



<p>Happy coding.</p>
]]></content:encoded>
					
					<wfw:commentRss>https://www.thereformedprogrammer.net/a-pattern-library-for-methods-that-return-a-status-including-localization/feed/</wfw:commentRss>
			<slash:comments>1</slash:comments>
		
		
			</item>
		<item>
		<title>Applying an improved multiple languages library to .NET applications</title>
		<link>https://www.thereformedprogrammer.net/applying-an-improved-multiple-languages-library-to-net-applications/</link>
					<comments>https://www.thereformedprogrammer.net/applying-an-improved-multiple-languages-library-to-net-applications/#respond</comments>
		
		<dc:creator><![CDATA[Jon P Smith]]></dc:creator>
		<pubDate>Mon, 16 Jan 2023 14:55:30 +0000</pubDate>
				<category><![CDATA[.NET Core]]></category>
		<category><![CDATA[ASP.NET Core]]></category>
		<category><![CDATA[localization]]></category>
		<category><![CDATA[Multi-tenant]]></category>
		<guid isPermaLink="false">https://www.thereformedprogrammer.net/?p=2857</guid>

					<description><![CDATA[The last article covered why I added extra features to the .NET support of multiple languages &#8230; <a href="https://www.thereformedprogrammer.net/applying-an-improved-multiple-languages-library-to-net-applications/" class="more-link">Continue reading <span class="screen-reader-text">Applying an improved multiple languages library to .NET applications</span></a>]]></description>
										<content:encoded><![CDATA[
<p>The <a href="https://www.thereformedprogrammer.net/improving-the-support-of-multiple-languages-in-net-applications/">last article</a> covered why I added extra features to the .NET support of multiple languages &nbsp;(known as <em>localization</em> in .NET) and via the <a href="https://github.com/JonPSmith/Net.LocalizeMessagesAndErrors">Net.LocalizeMessagesAndErrors</a> library (shortened to <em>Localize-ME</em> library). This article provides the details of how you would use the Localize-ME library in to add localization to your .NET application.<a href="https://github.com/JonPSmith/Net.LocalizeMessagesAndErrors/wiki"></a> The full list of the articles in this series are:</p>



<ol class="wp-block-list" type="1">
<li><a href="https://www.thereformedprogrammer.net/improving-the-support-of-multiple-languages-in-net-applications">Improving the support of multiple languages in .NET applications</a></li>



<li>Applying the improved multiple languages support to .NET applications (<strong>this article</strong>)</li>



<li>A library / pattern for methods that return a status, including localization (coming soon)</li>
</ol>



<h2 class="wp-block-heading">TL;DR; – Summary of this article</h2>



<ul class="wp-block-list">
<li>This article assumes you know the terms / concepts of localization. If you don’t, then go to the “<a href="https://www.thereformedprogrammer.net/improving-the-support-of-multiple-languages-in-net-applications/#a-brief-view-of-how-net-localization-works">A brief view of how .NET localization works</a>” which introduces to the localization concepts.</li>



<li>The Localize-ME library adds extra localization features focused on a) making it easier to localize an existing application, and b) stop localization from making your code harder to understand.</li>



<li>The Localize-ME library provides two services<ul><li>SimpleLocalizer service is good in small / simple applications and is simple to use.</li></ul>
<ul class="wp-block-list">
<li>DefaultLocalizer service is good from large applications with many localizations because it uses a more formal pattern that makes it easier to find / set up the localized messages.</li>
</ul>
</li>



<li>This article provides eight steps to localize an ASP.NET Core application using either, or both Localize-ME services. Each step provides a summary of what you need to do with links to the <a href="https://github.com/JonPSmith/Net.LocalizeMessagesAndErrors/wiki">Localize-ME documentation</a> for the definitive details.</li>
</ul>



<h2 class="wp-block-heading">Super-quick explanation on the Localize-ME library provides</h2>



<p>The Localize-ME library adds extra localization features to improve localizing your application. The big difference from the .NET localization is that you keep your existing messages, error strings, etc. in your code (known as the <em>default messages</em>) while .NET localization would replace your messages with a key (referred to as <em>localize key</em>).</p>



<p>Keeping your existing messages in your application has lots of benefits, but the biggest are a) its easier to add localization an existing application, and b) your code is easier to understand and test.</p>



<p>To make this work you provide the language (referred to as <em>culture</em>) that your default messages are written in when the Localize-ME library is registered. This allows the Localize-ME services to return the message in your code when the user’s / app’s culture matches the default messages culture. If the user’s / app’s culture isn’t the same as the default messages culture, then it uses the .NET localisation services to lookup the message in the correct resource file for the required culture.</p>



<p>The diagram below shows this for French (LHS), which isn’t the default messages culture, and English (RHS), which is default messages culture. &nbsp;The <em>blue italic</em> words in the diagram explains the two different routes for the two cultures.</p>



<figure class="wp-block-image size-full"><img loading="lazy" decoding="async" width="711" height="460" src="https://www.thereformedprogrammer.net/wp-content/uploads/2023/01/DefaultLocalizerDiagram.png" alt="" class="wp-image-2836" srcset="https://www.thereformedprogrammer.net/wp-content/uploads/2023/01/DefaultLocalizerDiagram.png 711w, https://www.thereformedprogrammer.net/wp-content/uploads/2023/01/DefaultLocalizerDiagram-300x194.png 300w" sizes="auto, (max-width: 711px) 100vw, 711px" /></figure>



<h2 class="wp-block-heading">Setting the scene – the best places to use the Localize-ME library</h2>



<p>The Localize-ME library adds two localize services on top of the .NET localization services which provide new (better) ways to localize your application. From my experience I created two services, SimpleLocalizer and DefaultLocalizer, that both localize a message, but works better in different cases. The list below provides my take on where are best used.</p>



<h3 class="wp-block-heading">1. The SimpleLocalizer service is good for using in Razor pages etc.</h3>



<p>The SimpleLocalizer service provides the simplest approach to obtaining a localized message. Its features that make it simpler are:</p>



<ul class="wp-block-list">
<li><strong>Auto localize key:</strong> the SimpleLocalizer service uses your message as the lookup key (which I call <em>localise key</em>) which is unique, while the IStringLocalizer needs you to add a string that must be unique to your message.</li>



<li><strong>Simpler injection</strong>: the SimpleLocalizer’s TResource part (the later <a href="https://www.thereformedprogrammer.net/applying-an-improved-multiple-languages-library-to-net-applications/#3-adding-your-resource-files-and-tresource-classes">section 3</a> describes the TResource part) for what is set on startup so you only need ISimpleLocalizer to get an instance, while the IStringLocalizer needs IStringLocalizer&lt;TResource></li>
</ul>



<h3 class="wp-block-heading">2. The DefaultLocalizer service is better on large localizations with backend projects</h3>



<p>When I started adding localization to a medium size application, I found string constants for the localize key were hard to remember and hence error prone. The DefaultLocalizer service uses extension methods to create the localize key, which has the following benefits:</p>



<ul class="wp-block-list">
<li><strong>Formal localize key design</strong>: The localize key has a {class}, {method} and {localKey}, which tells you what class and method the message came from in your code.</li>



<li><strong>Auto fill in of {class} &#038; {method}</strong>: the extension methods will fill in the {class} &#038; {method} parts of the localize key for you.</li>



<li><strong>Short, but unique localize key</strong>: The library has various ways to make short, but unique localize keys. See <a href="https://github.com/JonPSmith/Net.LocalizeMessagesAndErrors/wiki/Creating-DefaultLocalization-localize-keys#the-balance-between-readable-localize-key-and-being-unique">this section</a> from the Localize-ME documentation on how that works.</li>
</ul>



<p>The common features of both the SimpleLocalizer and DefaultLocalizer are:</p>



<ul class="wp-block-list">
<li><strong>Your code is easier to understand</strong>: the .NET localization services replace your messages with a localise key. The SimpleLocalizer / DefaultLocalizer services keep your message</li>



<li><strong>Better missing entry handling</strong>: If the the .NET localization services can’t find the localized message, then it returns the localize key which isn’t that useful to the user. While SimpleLocalizer / DefaultLocalizer services returns the default message, which might be in the wrong language but can translated by the user (it also logs a warning with very detailed information what was missing – see <a href="https://github.com/JonPSmith/Net.LocalizeMessagesAndErrors/wiki/All-about-resource-files#what-happens-when-there-is-a-missing-resource-files--entries">this section</a> in the Localize-ME documentation.</li>
</ul>



<h3 class="wp-block-heading">Things that the Localize-ME library doesn’t provide</h3>



<p>The .NET localization services contain features that I don’t try to provide in the Localize-ME library. They are:</p>



<ul class="wp-block-list">
<li>The IHtmlLocalizer&lt;T&gt;, which will handle HTML strings</li>



<li><a href="https://learn.microsoft.com/en-us/aspnet/core/fundamentals/localization#dataannotations-localization">DataAnnotations localization</a>, which localizes Data Annotations</li>
</ul>



<h2 class="wp-block-heading">Using the Localize-ME library in an ASP.NET Core application</h2>



<p>The list below contains the eight steps for adding localization to an .NET application, with examples from an ASP.NET Core application. Each step provides a summary and examples for its steps, with links to the <a href="https://github.com/JonPSmith/Net.LocalizeMessagesAndErrors/wiki">Localize-ME documentation</a> which contains the more detailed information</p>



<ol class="wp-block-list" type="1">
<li>Setting up the .NET localization</li>



<li>Setting up the Localize-ME services</li>



<li>Adding your resource files and TResource classes</li>



<li>Getting an instance of the SimpleLocalizer</li>



<li>Getting an instance of the DefaultLocalizer</li>



<li>Using the SimpleLocalizer service</li>



<li>Using the DefaultLocalizer service</li>



<li>How to unit test your localized code</li>
</ol>



<h3 class="wp-block-heading">1. Setting up the .NET localization</h3>



<p>The Localize-ME library relies on the .NET localization services so we start with this (the Localize-ME adds its extra features, which are described later).</p>



<p>On startup you need to register the .NET localization, its resource files (see <a href="https://www.thereformedprogrammer.net/applying-an-improved-multiple-languages-library-to-net-applications/#3-adding-your-resource-files-and-tresource-classes">section 3</a> later about resource files) and, set up how to obtain the user’s / app’s language (known as <em>culture</em> in .NET). The Localize-ME documentation contains information on how to <a href="https://github.com/JonPSmith/Net.LocalizeMessagesAndErrors/wiki/Steps-to-localize-your-ASP.NET-Core-app">set this within an ASP.NET Core application</a> in some detail with lots of links to useful information and three example applications, so go to that document for the full information</p>



<p>I did want to point out how the .NET localization obtains user’s / app’s culture, which is needed to return the messages in the correct language. By default the parameter called <a href="https://learn.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.builder.requestlocalizationoptions.requestcultureproviders">RequestCultureProviders</a> within the .NET localization options has three ways to try to obtain the culture, which are used in turn until it gets a culture &nbsp;– see list below:</p>



<ol class="wp-block-list" type="1" start="1">
<li>QueryStringRequestCultureProvider – uses culture data in the query string, which allows you to create a URL that will set the culture.</li>



<li>CookieRequestCultureProvider – looks for a culture cookie, which is useful if want users to select the language they want.</li>



<li>AcceptLanguageHeaderRequestCultureProvider – this picks up data from the browser to set the culture.</li>
</ol>



<p>These are the main approaches to get the user / app cultures, and they are <a href="https://learn.microsoft.com/en-us/aspnet/core/fundamentals/localization#localization-middleware">described here</a>.</p>



<h3 class="wp-block-heading">2. Setting up the Localize-ME services</h3>



<p>I have made the setting up of the Localize-ME library as simple as possible. Here are the two registrations you need to add to your setup code in the Program class.</p>



<p>The code below registers the DefaultLocalizer – <a href="https://github.com/JonPSmith/Net.LocalizeMessagesAndErrors/wiki/Adding-this-library-to-a-ASP.NET-Core-app#adding-the-idefaultlocalizer-service">click here</a> for information on the two parameters.</p>


<div class="wp-block-syntaxhighlighter-code "><pre class="brush: csharp; title: ; notranslate">
builder.Services.RegisterDefaultLocalizer(
    &quot;en&quot;, supportedCultures);
</pre></div>


<p>The code below registers the SimpleLocalizer –<a href="https://github.com/JonPSmith/Net.LocalizeMessagesAndErrors/wiki/Adding-this-library-to-a-ASP.NET-Core-app#adding-the-isimplelocalizer-as-a-service"> click here</a> for information on the optional parameter</p>


<div class="wp-block-syntaxhighlighter-code "><pre class="brush: csharp; title: ; notranslate">
builder.Services.RegisterSimpleLocalizer
    &lt;HomeController&gt;();
</pre></div>


<blockquote class="wp-block-quote is-layout-flow wp-block-quote-is-layout-flow">
<p>NOTE: The DefaultLocalizer service must be registered for the SimpleLocalizer service to work.</p>
</blockquote>



<h3 class="wp-block-heading">3. Adding your resource files and TResource classes</h3>



<p>Resource files hold the messages, in a specific language, in the <strong>Value</strong> column while the localise key is held in the <strong>Name</strong> column. The .NET localization services uses the culture to pick the correct resource file and then the localize key obtain the correct message to show to the user.</p>



<p>You link a resource file to your localization service via a class, known as a <em>TResource class</em>, in the ASP.NET Core project. The resource file uses part of the TResource class’s FullName to the start of its filename. For instance, if you used the HomeController class as a TResource class and the language is USA English then the resource file name would be (but see <a href="https://learn.microsoft.com/en-us/aspnet/core/fundamentals/localization#resource-file-naming">this link</a> to see the other file formats)</p>



<p><code>Controllers.HomeController.</code>en-US<code>.resx</code></p>



<p>Resource files aren’t the easiest part of the localization service, so I suggest you read the Localize-ME <a href="https://github.com/JonPSmith/Net.LocalizeMessagesAndErrors/wiki/All-about-resource-files">All about resource files</a> documentation. This explains how to register them, and the different ways you can organise the resource files.</p>



<p>The other problem is finding all the localise keys and the appropriate localized message and then adding into the resource files. I give two approaches that I created when I was applying this library in to my AuthP library. See:</p>



<ul class="wp-block-list">
<li>The <a href="https://www.thereformedprogrammer.net/applying-an-improved-multiple-languages-library-to-net-applications/#8a-logging-localize-me-localization-during-unit-testing">8a section</a> about why logging localization data during unit testing helps you to add entries in the resource files.</li>



<li><a href="https://www.thereformedprogrammer.net/improving-the-support-of-multiple-languages-in-net-applications/#7-tip-use-excel-or-other-app-to-setup-the-data-for-the-resource-files">Tip: Use Excel (or other app) to setup the data for the resource files</a> from the first article.</li>
</ul>



<h3 class="wp-block-heading">4. Getting an instance of the SimpleLocalizer</h3>



<p>Obtaining an instance of the SimpleLocalizer service is easy, as you have already defined the TResource class on startup.</p>



<ul class="wp-block-list">
<li>If you are in C# code, then you use the interface ISimpleLocalizer via dependency injection to get SimpleLocalizer service.</li>



<li>If you are in a Razor page (cshtml), you use “@inject ISimpleLocalizer SimpleLocalizer”.</li>
</ul>



<blockquote class="wp-block-quote is-layout-flow wp-block-quote-is-layout-flow">
<p>NOTE: See <a href="https://github.com/JonPSmith/Net.LocalizeMessagesAndErrors/wiki/Using-the-SimpleLocalizer-methods#getting-an-instance-of-the-isimplelocalizer-service">this Localize-ME document</a> for example code and more on ISimpleLocalizerFactory service.</p>
</blockquote>



<h3 class="wp-block-heading">5. Getting an instance of the DefaultLocalizer</h3>



<p>The way to get an instance of the DefaultLocalizer service is the same as getting the SimpleLocalizer service, but you need to the TResource class to define which resource file group this service should look up for localized message.</p>



<p>The simplest approach is to use a dependency injection with the IDefaultLocalizer&lt;TResource&gt; interface, e.g. IDefaultLocalizer&lt;HomeController&gt;.</p>



<p>But if you have backend code in other projects you can’t do that because the TResource class must be in the ASP.NET Core project and your backend projects can’t link to these TResource because that would create a circular reference. In this case you need the IDefaultLocalizerFactory service and some options.</p>



<p>To use the IDefaultLocalizerFactory service you need to register singleton class (shown as MyOptions in the code below) which contains the Type of TResource class(es) you need in your backend code, and then use the IDefaultLocalizerFactory service, as shown below within your backend code.</p>


<div class="wp-block-syntaxhighlighter-code "><pre class="brush: csharp; title: ; notranslate">
public class MyBackendCode 
{
    private readonly IDefaultLocalizer _defaultLocalizer;

    /// &lt;summary&gt;
    /// ctor
    /// &lt;/summary&gt;
    public MyBackendCode(MyOptions options,
        IDefaultLocalizerFactory factory)
    {
        _localizeDefault = factory.Create(
            options.BackendResourceType) 
    }
    //… rest of class left out
}
</pre></div>


<blockquote class="wp-block-quote is-layout-flow wp-block-quote-is-layout-flow">
<p>NOTE: See the <a href="https://github.com/JonPSmith/Net.LocalizeMessagesAndErrors/wiki/Using-the-DefaultLocalizer-methods#getting-an-instance-of-the-idefaultlocalizer-service">Getting an instance of the IDefaultLocalizer service</a> documentation for more details.</p>
</blockquote>



<h3 class="wp-block-heading">6. Using the SimpleLocalizer service</h3>



<p>The SimpleLocalizer service is simple to use! It only has only two methods and the localise key is derived from the message (see <a href="https://github.com/JonPSmith/Net.LocalizeMessagesAndErrors/wiki/Using-the-SimpleLocalizer-methods#how-it-finds-messages-in-other-languages">this section</a> in the <a href="https://github.com/JonPSmith/Net.LocalizeMessagesAndErrors/wiki/Using-the-SimpleLocalizer-methods">Using SimpleLocalizer</a> documentation on how that works). The first method is shown below and handles a string message.</p>


<div class="wp-block-syntaxhighlighter-code "><pre class="brush: csharp; title: ; notranslate">
&lt;label for=&quot;month&quot;&gt;
    @(SimpleLocalizer.LocalizeString(
        &quot;Provide a string (can be null)&quot;, this))
&lt;/label&gt;
</pre></div>


<p>The other method shown below handles FormattableStrings, where you can provide dynamic data into the localized message.</p>


<div class="wp-block-syntaxhighlighter-code "><pre class="brush: csharp; title: ; notranslate">
&lt;h1&gt;
    @(SimpleLocalizer.LocalizeFormatted(
       $&quot;List of {Model.NumBooks} books&quot;, this))
&lt;/h1&gt;
</pre></div>


<blockquote class="wp-block-quote is-layout-flow wp-block-quote-is-layout-flow">
<p>NOTE: These two examples come from Razor pages, using the “@inject ISimpleLocalizer SimpleLocalizer” approach, but you can also use dependency injection within a ASP.NET Core Controller or Page.</p>
</blockquote>



<h3 class="wp-block-heading">7. Using the DefaultLocalizer service</h3>



<p>The DefaultLocalizer service has only two methods:</p>



<ul class="wp-block-list">
<li><a href="https://github.com/JonPSmith/Net.LocalizeMessagesAndErrors/wiki/Using-the-DefaultLocalizer-methods#localizestringmessage-method"><code>LocalizeStringMessage</code> method</a>, which handles string messages, e.g. &#8220;Welcome&#8221;</li>



<li><a href="https://github.com/JonPSmith/Net.LocalizeMessagesAndErrors/wiki/Using-the-DefaultLocalizer-methods#localizeformattedmessage-method"><code>LocalizeFormattedMessage</code> method</a>, which handles messages dynamic message, e.g. &#8220;The date is {DateTime.Now:d}&#8221;</li>
</ul>



<p>Both methods take in two parts</p>



<ol class="wp-block-list" type="1">
<li>The localize key that uses a formal design that can contain the {callingClass}, {method} and {localKey}.</li>



<li>The default message, either in a string or a FormattableString.</li>
</ol>



<p>The localize key is created by one of the localize key extension methods which contain various combinations of the {callingClass}, {method} and {localKey} &#8211; <a href="https://github.com/JonPSmith/Net.LocalizeMessagesAndErrors/wiki/Creating-DefaultLocalization-localize-keys#list-of-localize-key-extension-methods">this link</a> shows you the various methods / combinations and what situation each one is used for.</p>



<p>This makes calling a DefaultLocalizer method is a bit more work than the SimpleLocalizer method calls, but the extra effort provides you with a localise key that is easy to understand and easily track back to where you made the localize call.</p>



<blockquote class="wp-block-quote is-layout-flow wp-block-quote-is-layout-flow">
<p>NOTE: There is an interesting section about DefaultLocalizer localize key creation called <a href="https://github.com/JonPSmith/Net.LocalizeMessagesAndErrors/wiki/Creating-DefaultLocalization-localize-keys#the-balance-between-readable-localize-key-and-being-unique">the balance between readable localize key and being unique</a>, which provides two ways to create both short and unique localize keys.</p>
</blockquote>



<h3 class="wp-block-heading">8. How to unit test your localized code</h3>



<p>Once you change your code to use the Localize-ME library, then you will need to provide a ISimpleLocalizer or IDefaultLocalizer service to runs your tests. I recommend using a <em>stubbing out</em> approach (see <a href="https://learn.microsoft.com/en-us/visualstudio/test/using-stubs-to-isolate-parts-of-your-application-from-each-other-for-unit-testing">this Microsoft document</a> about stubbing) in your unit tests as because the stub to return the default message in your code, which makes it easier to update your unit tests and the tests are easier to understand.</p>



<p>The Localize-ME library contains stubs for the ISimpleLocalizer or IDefaultLocalizer services, called <a href="https://github.com/JonPSmith/Net.LocalizeMessagesAndErrors/blob/main/LocalizeMessagesAndErrors/UnitTestingCode/StubSimpleLocalizer.cs"><code>StubSimpleLocalizer</code></a> and <a href="https://github.com/JonPSmith/Net.LocalizeMessagesAndErrors/blob/main/LocalizeMessagesAndErrors/UnitTestingCode/StubDefaultLocalizer.cs"><code>StubDefaultLocalizer</code></a> respectively. The code below shows the using StubDefaultLocalizer (the StubSimpleLocalizer works the same)</p>


<div class="wp-block-syntaxhighlighter-code "><pre class="brush: csharp; title: ; notranslate">
&#x5B;Fact]
public void TestStubDefaultLocalizer()
{
    //SETUP
    var defaultLoc = new StubDefaultLocalizer();

    //ATTEMPT
    var message = defaultLoc.LocalizeStringMessage(
        &quot;MyLocalizeKey&quot;.MethodLocalizeKey(this),
        &quot;My message&quot;);

    //VERIFY
    message.ShouldEqual(&quot;My message&quot;);
    defaultLoc.LastKeyData.LocalizeKey.ShouldEqual(
        &quot;TestStubDefaultLocalizer_MyLocalizeKey&quot;);
}
</pre></div>


<blockquote class="wp-block-quote is-layout-flow wp-block-quote-is-layout-flow">
<p>NOTE: The <a href="https://github.com/JonPSmith/Net.LocalizeMessagesAndErrors/wiki/Unit-testing-your-localized-code">unit testing your localized code</a> document gives more information on the StubSimpleLocalizer and StubDefaultLocalizer classes.</p>
</blockquote>



<h4 class="wp-block-heading">8a. Logging Localize-ME localization during unit testing</h4>



<p>I also created a more powerful IDefaultLocalizer stub called <a href="https://github.com/JonPSmith/Net.LocalizeMessagesAndErrors/blob/main/Test/StubClasses/StubLocalizeDefaultWithLogging.cs">StubDefaultLocalizerWithLogging</a>, which returns the default message, which optionally logs the full information of the localization data to a database. This provides a quick way to look at the localized messages, and it can find certain problems.</p>



<p>This stub is much more complex to use, but it does provide a very useful list of the localised messages. This helps in checking the localize keys and also speeded up the process of building the resource files – see the <a href="https://www.thereformedprogrammer.net/improving-the-support-of-multiple-languages-in-net-applications/#6-i-wanted-to-check-the-localized-messages-with-their-localize-key">this section from the first article</a> where I explain why I found it so useful, but here is a screenshot of a section of the logged localization data. Note the PossibleErrors column which has found an existing entry in the database with the same localize key, but the message format is different. NOTE Click the screenshot to get a bigger version.</p>



<figure class="wp-block-image size-full"><a href="https://www.thereformedprogrammer.net/wp-content/uploads/2023/01/ExampleLoggingLog.png"><img loading="lazy" decoding="async" width="862" height="409" src="https://www.thereformedprogrammer.net/wp-content/uploads/2023/01/ExampleLoggingLog.png" alt="" class="wp-image-2839" srcset="https://www.thereformedprogrammer.net/wp-content/uploads/2023/01/ExampleLoggingLog.png 862w, https://www.thereformedprogrammer.net/wp-content/uploads/2023/01/ExampleLoggingLog-300x142.png 300w, https://www.thereformedprogrammer.net/wp-content/uploads/2023/01/ExampleLoggingLog-768x364.png 768w" sizes="auto, (max-width: 862px) 100vw, 862px" /></a></figure>



<blockquote class="wp-block-quote is-layout-flow wp-block-quote-is-layout-flow">
<p>NOTE: There is <a href="https://github.com/JonPSmith/Net.LocalizeMessagesAndErrors/wiki/Unit-testing-your-localized-code#using-the-stublocalizedefaultwithlogging-class">detailed documentation</a> about how to setup and use the StubDefaultLocalizerWithLogging class.</p>
</blockquote>



<h2 class="wp-block-heading">Conclusions</h2>



<p>I had a <a href="https://github.com/JonPSmith/AuthPermissions.AspNetCore/issues/58">requirement from a developer</a> to add localization to my <a href="https://github.com/JonPSmith/AuthPermissions.AspNetCore">AuthP library</a> so I started looking at .NET localization services. The .NET localization didn’t have the features to provide an <em>optional </em>localization feature (i.e. your code will still works without resource files) to my AuthP library as it was. So, I started to create the Localize-ME library that makes localization optional in my AuthP library.</p>



<p>Once I knew I had to create a new library, then I could reimagine how I would like to apply localization in a .NET application. For instance, I made it possible to keep your messages are in your non-localized application which means that your code is easier to update and understand. While the .NET localization approach, which would move the messages to the resource files and replace them with a localize key, makes the code (a bit) harder to understand.</p>



<p>Unfortunately, I didn’t come up a way to remove the manual / tedious job of building resource files, but you might like to look at <a href="https://www.thereformedprogrammer.net/applying-an-improved-multiple-languages-library-to-net-applications/#8a-logging-localize-me-localization-during-unit-testing">section 8a</a> about capturing the localize data while running your unit tests. Personally, I found this very useful in providing the data to help in building resource files.</p>



<p>Other improvements came as I started to use the Localize-ME library in different ways, from a <a href="https://github.com/JonPSmith/Net.LocalizeMessagesAndErrors/tree/main/LocalizedWebApp">test application</a>. updating the <a href="https://github.com/JonPSmith/AuthPermissions.AspNetCore">AuthP library</a> and creating another <a href="https://github.com/JonPSmith/AuthPermissions.AspNetCore/tree/main/Example1.RazorPages.IndividualAccounts">test example</a> in the AuthP library. Each usage was different which highlight different issues, and each issue often provided new approaches or features. This means it took way longer that I thought it would create the library, but I’m pleased with the final result. I hope the Localize-ME library will help you too.</p>



<p><em>Extra note:</em> I ran a twitter poll on whether users of AuthP library would use the new localization feature the votes were <a href="https://twitter.com/thereformedprog/status/1613904709139726337">10 to 1 in favour</a> of needing the localization feature. This makes sense as the AuthP library’s features is helping developers to create <a href="https://github.com/JonPSmith/AuthPermissions.AspNetCore/wiki/Multi-tenant-explained">multi-tenant applications</a>, which could be used in any country or countries.</p>



<p>Happy coding.</p>
]]></content:encoded>
					
					<wfw:commentRss>https://www.thereformedprogrammer.net/applying-an-improved-multiple-languages-library-to-net-applications/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Improving the support of multiple languages in .NET applications</title>
		<link>https://www.thereformedprogrammer.net/improving-the-support-of-multiple-languages-in-net-applications/</link>
					<comments>https://www.thereformedprogrammer.net/improving-the-support-of-multiple-languages-in-net-applications/#respond</comments>
		
		<dc:creator><![CDATA[Jon P Smith]]></dc:creator>
		<pubDate>Mon, 02 Jan 2023 18:27:49 +0000</pubDate>
				<category><![CDATA[ASP.NET Core]]></category>
		<category><![CDATA[.NET]]></category>
		<category><![CDATA[localization]]></category>
		<guid isPermaLink="false">https://www.thereformedprogrammer.net/?p=2835</guid>

					<description><![CDATA[One of users of my AuthPermissions.AspNetCore library (shortened to AuthP in this article) asked for support &#8230; <a href="https://www.thereformedprogrammer.net/improving-the-support-of-multiple-languages-in-net-applications/" class="more-link">Continue reading <span class="screen-reader-text">Improving the support of multiple languages in .NET applications</span></a>]]></description>
										<content:encoded><![CDATA[
<p>One of users of my <a href="https://github.com/JonPSmith/AuthPermissions.AspNetCore">AuthPermissions.AspNetCore</a><strong> </strong>library (shortened to AuthP in this article) asked for support for multiple languages – known in .NET as <a href="https://learn.microsoft.com/en-us/dotnet/core/extensions/localization"><em>Localization</em></a>. I looked at the .NET localization solution and it lacked some features I needed for my situation. I took some time to work out to use the .NET localization code and in the end, I built a small library called <a href="https://github.com/JonPSmith/Net.LocalizeMessagesAndErrors">Net.LocalizeMessagesAndErrors</a> which wraps the .NET version with a interface that adds a some extra features.</p>



<p>This article explains how this new library it easier to add / manage multiple languages in your applications, with articles showing how to use this new localization library. The full list of the articles in this series are:</p>



<ol class="wp-block-list" type="1">
<li>Improving the support of multiple languages in .NET applications (<strong>this article</strong>)</li>



<li><a href="https://www.thereformedprogrammer.net/applying-an-improved-multiple-languages-library-to-net-applications/">Applying an improved multiple languages library to .NET applications</a>.</li>



<li>A library / pattern for methods that return a status, including localization (coming soon)</li>
</ol>



<h2 class="wp-block-heading">TL;DR; – Summary of this article</h2>



<ul class="wp-block-list">
<li>This article provides a super-quick introduction to .NET localization feature, as some of the concepts weren’t obvious to me at the start.</li>



<li>My problem was if I added the .NET localization to my AuthP library, then no one could use the AuthP library unless they had set up the .NET localization with resource files, which is lot of work.</li>



<li>My solution was to build a service that wraps around the .NET localization service and provides extra features. Specifically, you can build applications without .NET localization, and it will still work. This feature will also help developer who need to add localization to an existing application, as you can apply localization in stages.</li>



<li>Once I started looking at localization, I found several ways to either make the code easier to understand, or easier to use. The result is the <a href="https://github.com/JonPSmith/Net.LocalizeMessagesAndErrors">Net.LocalizeMessagesAndErrors</a> library<strong>.</strong></li>



<li>After the quick explanation how the <a href="https://github.com/JonPSmith/Net.LocalizeMessagesAndErrors">Net.LocalizeMessagesAndErrors</a>’s IDefaultLocalizer service works I detail six<strong> </strong>localization<strong> </strong>challenges and how I got around them, plus a tip on how to setup localization resource files. &nbsp;</li>
</ul>



<h2 class="wp-block-heading">A brief view of how .NET localization works</h2>



<p>At first, I was confused by how to support multiple languages because I has no idea what the terms means and how they work together. Therefore, here is a short introduction from me with links at the end to other articles that I found very useful:</p>



<ul class="wp-block-list">
<li><a href="https://learn.microsoft.com/en-us/dotnet/core/extensions/localization"><em>Localization</em></a> means providing different languages, e.g. English, German, Mandarin, in your application – (I like the name <em>Multilingual support</em> as its more obvious, but I use localization because that what Microsoft calls it).</li>



<li><a href="https://learn.microsoft.com/en-us/dotnet/core/extensions/globalization"><em>Globalization</em></a> is about showing dates and numbers in the correct format, with some compare / order string methods.</li>



<li>With .NET localization you store the different messages in <a href="https://learn.microsoft.com/en-us/aspnet/core/fundamentals/localization#resource-files">resource files</a> in your application. Each resource file has a name based on:<ul><li>A name, usually taken from a class’s Fullname, e.g. Controllers.HomeController</li></ul><ul><li>A name representing the language it contains, eg. “en-GB”</li></ul>
<ul class="wp-block-list">
<li>And has extension of .resx.</li>
</ul>
</li>



<li>A resource file has entries with a Name (which I call the <em>localize key</em>) and Value which holds you’re message in the correct language. The Name / Value entries in the resource file works like a dictionary, with the Name being the key.</li>



<li>You add a resource file for each language (known as <em>culture</em>) and in each resource you would add an entry for each message (Value) you want to show, with a unique localize key (Name) to use as the lookup.</li>



<li>You also need to setup the localization services – <a href="https://learn.microsoft.com/en-us/aspnet/core/fundamentals/localization#implement-a-strategy-to-select-the-languageculture-for-each-request">see this</a> for how to setup an in ASP.NET Core application and the other links below.</li>



<li>You would get a localize service, like <a href="https://learn.microsoft.com/en-us/aspnet/core/fundamentals/localization#make-the-apps-content-localizable">IStringLocalizer&lt;TResource&gt;</a>, to obtain the localized message. There are three parts to get the localised message:<ul><li>The start of the resource filename is defined by the TResource’s FullName.It then adds the current culture Name from the user, cookie, or other source (depends on what you setup).Your .NET service which takes your localize key, e.g. <code>_localizer[“YourKey”]</code>, which return a string containing the entry found in the selected resource file.</li></ul>
<ul class="wp-block-list">
<li>You can also have formatted messages, such as $&#8221;Date is {0}&#8221;, which would need extra data, e.g. <code>_localizer[“YourKey”, DateTime.Now]</code>.</li>
</ul>
</li>
</ul>



<p>Once I understood the names / concepts the Microsoft’s documentation of .NET localization made much more sense to me. Here are links to articles about .NET localization that I found useful:</p>



<ul class="wp-block-list">
<li>Microsoft’s <a href="https://learn.microsoft.com/en-us/aspnet/core/fundamentals/localization">ASP.NET Core globalization and localization</a> document – good, but steps are confusing.</li>



<li><a href="https://www.ezzylearning.net/tutorial/building-multilingual-applications-in-asp-net-core">Building Multilingual Applications in ASP.NET Core</a> – excellent step-by-step article</li>



<li><a href="https://www.codeproject.com/Articles/5324504/Localization-in-ASP-NET-Core-Web-API">Localization in ASP.NET Core Web API</a> – another excellent step-by-step article (.NET 6)</li>



<li><a href="https://joonasw.net/view/aspnet-core-localization-deep-dive">ASP.NET Core Localization Deep Dive</a> – shows all the different localization parts</li>
</ul>



<h2 class="wp-block-heading">Super-quick explanation on the IDefaultLocalizer works</h2>



<p>This article is about why I implemented the Net.LocalizeMessagesAndErrors library and what new features that it contains, but here is an overview of the IDefaultLocalizer service to help you understand the extra features this service provides.</p>



<p>In the nutshell the IDefaultLocalizer service lets you to put strings like <code>“Hello!”</code> or FormattableString like <code>$"The date is {DateTime.Now}"</code> in your code (I use the term <em>message</em> for these two types), which makes your code easier to understand. Have look at the diagram below and read the <em>blue italic</em> words which explains how the IDefaultLocalizer service works.</p>



<figure class="wp-block-image size-full"><a href="https://www.thereformedprogrammer.net/wp-content/uploads/2023/01/DefaultLocalizerDiagram.png"><img loading="lazy" decoding="async" width="711" height="460" src="https://www.thereformedprogrammer.net/wp-content/uploads/2023/01/DefaultLocalizerDiagram.png" alt="" class="wp-image-2836" srcset="https://www.thereformedprogrammer.net/wp-content/uploads/2023/01/DefaultLocalizerDiagram.png 711w, https://www.thereformedprogrammer.net/wp-content/uploads/2023/01/DefaultLocalizerDiagram-300x194.png 300w" sizes="auto, (max-width: 711px) 100vw, 711px" /></a></figure>



<p>This article doesn’t tell you how to use the Net.LocalizeMessagesAndErrors library, but it highlights the main change – there is a message in each call. If you want more information on how use the library then see the “How to add multiple languages to a ASP.NET Core using the Net.LocalizeMessagesAndErrors library” (coming soon) or the <a href="https://github.com/JonPSmith/Net.LocalizeMessagesAndErrors/wiki">Net.LocalizeMessagesAndErrors documentation</a>.</p>



<h2 class="wp-block-heading">The localize challenges I found and how I fixed them in my library</h2>



<p>I spent a lot of time trying to come up with ways to use the .NET localization to work with my AuthP library, but it just didn’t work for me. Some of the problems were around adding localization to a NuGet package, but the biggest issue was the massive changes I would have to make to the AuthP library if I changed over to .NET localization.</p>



<p>The list below gives the localize challenges I found and how I overcame them. The list is in order with the biggest challenges first. They are:</p>



<ol class="wp-block-list" type="1">
<li><a href="https://www.thereformedprogrammer.net/improving-the-support-of-multiple-languages-in-net-applications/#1-i-didnt-want-to-turn-all-the-messages-errors-into-just-a-localize-key">I didn’t want to turn all the messages / errors into just a localize key</a>.</li>



<li><a href="https://www.thereformedprogrammer.net/improving-the-support-of-multiple-languages-in-net-applications/#2-i-wanted-a-nuget-that-works-without-having-to-setup-the-net-localization">I wanted a NuGet that works without having to setup the .NET localization</a>.</li>



<li><a href="https://www.thereformedprogrammer.net/improving-the-support-of-multiple-languages-in-net-applications/#3-i-didnt-like-nets-localizations-handling-of-missing-resource-files-entries">I didn’t like .NET’s localization’s handling of missing resource files / entries</a>.</li>



<li><a href="https://www.thereformedprogrammer.net/improving-the-support-of-multiple-languages-in-net-applications/#4-i-wanted-a-better-format-for-the-localise-key-to-help-creating-unique-strings">I wanted a better format for the localise key to help creating unique strings</a>.</li>



<li><a href="https://www.thereformedprogrammer.net/improving-the-support-of-multiple-languages-in-net-applications/#5-i-wanted-to-unit-test-without-setting-up-localization">I wanted to unit test without setting up localization</a>.</li>



<li><a href="https://www.thereformedprogrammer.net/improving-the-support-of-multiple-languages-in-net-applications/#6-i-wanted-to-check-the-localized-messages-with-their-localize-key">I wanted to check the localized messages with their localize key</a>.</li>



<li><a href="https://www.thereformedprogrammer.net/improving-the-support-of-multiple-languages-in-net-applications/#7-tip-use-excel-or-other-app-to-setup-the-data-for-the-resource-files">Tip: Use Excel (or other app) to setup the data for the resource files</a>.</li>
</ol>



<h3 class="wp-block-heading">1. I didn’t want to turn all the messages / errors into just a localize key</h3>



<p>As of version 4.0.0 of the AuthP library has 100+ messages over five projects. Most of these messages are error messages while the rest are success messages. Here are an example of success and error message:</p>



<ul class="wp-block-list">
<li><code>"Successfully added the new user."</code></li>



<li><code>$"There is already a Role with the name of {0}"</code></li>
</ul>



<p>If I used .NET localization these messages would be turned into a localize key, which from my view has the following downsides:</p>



<ul class="wp-block-list">
<li>The messages make great comments and turning into just a localise key messages would make the code harder to understand.</li>



<li>It’s a lot of work to move these messages to a resource file, and the messages are much harder to update.</li>
</ul>



<p>My solution was to leave the current success / error messages where they are and define them as generic English (culture “en”) – I call these messages as <em>default messages</em>. I already have a common pattern for my methods / services which handles success and error message, so it was easy to update the code to pass the default messages to my localization wrapper called <em>DefaultLocalizer</em>. The process the DefaultLocalizer follows are:</p>



<ol class="wp-block-list" type="1">
<li>On registration of the DefaultLocalizer service, I define the culture of the <em>default messages</em>, in this case “en”.</li>



<li>If the user’s / app’s culture started with default culture, then the default message is returned without having to use the .NET localization.</li>



<li>If the user’s / app’s culture doesn’t start with default culture, the DefaultLocalizer service uses the .NET localization to obtain the message from the resource files.</li>
</ol>



<p>Here is an example of my improved common method to handle localization showing a success message and an error message.</p>


<div class="wp-block-syntaxhighlighter-code "><pre class="brush: plain; title: ; notranslate">
public class ExamplesOfStatusGenericsLoc&lt;TResource&gt;
{
    private readonly IDefaultLocalizer&lt;TResource&gt; 
        _defaultLocalizer;

    public ExamplesOfStatusGenericsLoc(
        IDefaultLocalizer&lt;TResource&gt; defaultLocalizer)
    {
        _defaultLocalizer = defaultLocalizer;
    }

    public IStatusGeneric CheckNull(string? month)
    {
        var status = new StatusGenericLocalizer(_defaultLocalizer);
        status.SetMessageString(
            &quot;Success&quot;.ClassMethodLocalizeKey(this, false), 
            &quot;Successful completion.&quot;);

        if (month == null)
            return status.AddErrorString(
                &quot;NullParam&quot;.JustThisLocalizeKey(this), 
                &quot;The input must not be null.&quot;);

        return status;
    }
//...rest of class left out
</pre></div>


<blockquote class="wp-block-quote is-layout-flow wp-block-quote-is-layout-flow">
<p>NOTE: If any errors are added to the status, then the Message is changed to “Failed with {n} errors”. That’s just in case the success Message is incorrectly shown.</p>
</blockquote>



<h3 class="wp-block-heading">2. I wanted a NuGet that works without having to setup the .NET localization</h3>



<p>If I just applied the .NET localization to the AuthP NuGet library, it would mean everyone that used this library they would have to set up .NET localization with resources etc. The library is already complex and with the extra needed to understand / setup .NET localization would put off developers from using this library.</p>



<p>The solution I added is into the DefaultLocalizer service is to return the default message if the .NET localization hasn’t been setup. This means when the localization version of the AuthP library is released:</p>



<ul class="wp-block-list">
<li>The AuthP library doesn’t get any more complex unless the developer what’s to use this new localization feature.</li>



<li>Developers that are already using the AuthP library can upgrade to the localization version without needing to change their code.</li>
</ul>



<p>I hate to think what new and existing users would think if they had to set up .NET localization to use the AuthP library!</p>



<blockquote class="wp-block-quote is-layout-flow wp-block-quote-is-layout-flow">
<p>NOTE: You might not be creating a NuGet like I has, but if you are adding localization to an existing application, then this approach allows you to add localization in stages. That might be pretty useful.</p>
</blockquote>



<h3 class="wp-block-heading">3. I didn’t like .NET’s localization’s handling of missing resource files / entries</h3>



<p>The .NET localization will return the localize key if no entry is found in the resource files. This typically doesn’t provide a good experience for the user. The DefaultLocalizer service can provide the default message which isn’t in the correct language, but easy for the user to translate.</p>



<p>The other issue of missing resource files / entries is reporting. The NET localization does provide a ResourceNotFound parameter, which will be true if the localized message isn’t found, but if you want a log / event then you need to add that to each localization call. On the other hand, the DefaultLocalizer service provides a very detailed log – a example is shown below.</p>


<div class="wp-block-syntaxhighlighter-code "><pre class="brush: plain; title: ; notranslate">
The message with the localizeKey name of 
'MissingResourceEntry_MissingEntry' 
and culture of 'fr' was not found in the 
LocalizedWebApp.Resources.Controllers.HomeController' 
resource. 
The message came from 
DefaultLocalizerController.MissingResourceEntry, line 38.
</pre></div>


<p>This provides everything you need to correct this problem, including the class, method, and line number of where the localization came from.</p>



<h3 class="wp-block-heading">4. I wanted a better format for the localise key to help creating unique strings</h3>



<p>The .NET localization service allows you to use any string as the localize key, and its up to you to make sure it is unique. You can use string constants, e.g. &#8220;HelloMessage&#8221; for the localise key, but when I build (and used!) the DefaultLocalizer service I found string constants were hard work and error prone.</p>



<p>My view is that string constants are fine for small applications, but for larger applications the localize key needs a standard format and methods to help the developer to create unique localize keys quickly. My solution has a format of <code>“{className}_{methodName}_{localKey}”</code>, with the className and methodName being optional. The table below shows are three main versions that are used, with the first one used on 90% cases.</p>



<figure class="wp-block-table"><table><tbody><tr><td>Localise key string</td><td>Unique</td></tr><tr><td>“MyClass_MyMethod_SetByDev”</td><td>Unique in the class and method – most used</td></tr><tr><td>“MyClass_SetByDev”</td><td>Unique in the class – useful for common errors</td></tr><tr><td>“SetByDev”</td><td>It’s the developer’s job to ensure it is unique</td></tr></tbody></table></figure>



<p>To implement this localize key format I have created a set of extension methods that can automatically fills in the “{className}” and “{methodName}” for you. This has two advantages:</p>



<ul class="wp-block-list">
<li>Easier for the developer to create a unique localize key.</li>



<li>The developer can work out where the localize key was created.</li>



<li>You can cut / paste your localize code and the localise key will automatically change to the new class &#038; method parts of the localize key.</li>
</ul>



<p>Here are two examples taken from the ExamplesOfStatusGenericsLoc method shown earlier in this article:</p>



<ul class="wp-block-list">
<li><code>"Success".ClassMethodLocalizeKey(this, false)</code></li>



<li><code>"NullParam".JustThisLocalizeKey(this),</code></li>
</ul>



<p>You can get a full set of the extension methods in the “<a href="https://github.com/JonPSmith/Net.LocalizeMessagesAndErrors/wiki/Creating-DefaultLocalization-localize-keys">Creating localize keys</a>”  document also cover some of the problems and solutions of the balance between readable localize key and being unique in <a href="https://github.com/JonPSmith/Net.LocalizeMessagesAndErrors/wiki/Creating-DefaultLocalization-localize-keys#the-balance-between-readable-localize-key-and-being-unique">this section</a>.</p>



<h3 class="wp-block-heading">5. I wanted to unit test without setting up localization.</h3>



<p>As I said the AuthP library has five project containing code and I have nearly 400 unit tests, of which a third check errors or success messages. If I used .NET’s localization on its own, then I could easily stub out (see <a href="https://learn.microsoft.com/en-us/visualstudio/test/using-stubs-to-isolate-parts-of-your-application-from-each-other-for-unit-testing">this Microsoft document</a> about stubbing) the .NET’s localize methods but would still have to change many of the unit tests to use the localize key instead of the actual error / success messages. It’s more work and makes the unit tests less easy to understand as the actual error / success strings are gone.</p>



<p>Because the DefaultLocalizer can return the default messages it’s easy to create a DefaultLocalizer&nbsp; stub can return the actual error / success strings. The Net.LocalizeMessagesAndErrors repro contains several stubs, but in this case, you need the StubDefaultLocalizer class.</p>



<p>The <a href="https://github.com/JonPSmith/Net.LocalizeMessagesAndErrors/blob/main/LocalizeMessagesAndErrors/UnitTestingCode/StubDefaultLocalizer.cs">StubDefaultLocalizer</a> class has the same methods as the DefaultLocalizer class, but it a) returns the default message, and b) holds the localize key data of the last localize. This allows the unit test to continue in the same way, but if I want to you can check on the localizer key. See the code below which shows how the StubDefaultLocalizer class works.</p>


<div class="wp-block-syntaxhighlighter-code "><pre class="brush: csharp; title: ; notranslate">
&#x5B;Fact]
public void TestStubDefaultLocalizer()
{
    //SETUP
    var defaultLoc = new StubDefaultLocalizer();

    //ATTEMPT
    var message = defaultLoc.LocalizeStringMessage(
        &quot;MyLocalizeKey&quot;.MethodLocalizeKey(this),
        &quot;My message&quot;);

    //VERIFY
    message.ShouldEqual(&quot;My message&quot;);
    defaultLoc.LastKeyData.LocalizeKey.ShouldEqual(
        &quot;TestStubDefaultLocalizer_MyLocalizeKey&quot;);
}
</pre></div>


<p>This works fine, but I found another type of stub that solved another issue I came across, as described in the next section.</p>



<h3 class="wp-block-heading">6. I wanted to check the localized messages with their localize key</h3>



<p>Once I starting to localize my AuthP library, which has ~110 localization I soon found I really needed an overview of all the localizations to check on localise key uniqueness, format, duplicates etc. Stepping though the code to fine each message is hard work and its easy to miss one.</p>



<p>So, I thought – can I write the localize information to a database when running my unit tests. At that point I created <a href="https://github.com/JonPSmith/Net.LocalizeMessagesAndErrors/blob/main/Test/StubClasses/StubLocalizeDefaultWithLogging.cs">StubDefaultLocalizerWithLogging</a> class, which returns the default message, but (optionally) logs the full information of the localization data to a database. This provides a quick way to look at the localized messages, and it can find certain problems.</p>



<p>For each use of a DefaultLocalizer usage it logs the localize key, culture, the message and where the localised entry was created (the full list of what is in the log can be found in the <a href="https://github.com/JonPSmith/Net.LocalizeMessagesAndErrors/blob/main/LocalizeMessagesAndErrors/LocalizedLog.cs">LocalizedLog</a> class, which has 9 parameters).</p>



<p>The screenshot below is a section of the logged localization data. Note the PossibleErrors column which has found an existing entry in the database with the same localize key, but the message format is different. NOTE Click the screenshot to get a bigger version.</p>



<figure class="wp-block-image size-full"><a href="https://www.thereformedprogrammer.net/wp-content/uploads/2023/01/ExampleLoggingLog.png"><img loading="lazy" decoding="async" width="862" height="409" src="https://www.thereformedprogrammer.net/wp-content/uploads/2023/01/ExampleLoggingLog.png" alt="" class="wp-image-2839" srcset="https://www.thereformedprogrammer.net/wp-content/uploads/2023/01/ExampleLoggingLog.png 862w, https://www.thereformedprogrammer.net/wp-content/uploads/2023/01/ExampleLoggingLog-300x142.png 300w, https://www.thereformedprogrammer.net/wp-content/uploads/2023/01/ExampleLoggingLog-768x364.png 768w" sizes="auto, (max-width: 862px) 100vw, 862px" /></a></figure>



<p>I have found quite a few of localization issues by looking through the sorted data. I also I found the logged list very useful when building resource files for other languages because it gives me the Name (localize key) and the Value (string / format) that needs translating. My unit tests only find 75 localized messages when in fact that there are ~110 localized messages. For the 35 localize message ones that aren’t logged I had to go three extra steps to set up the entry in the resource file(s):</p>



<ol class="wp-block-list" type="1">
<li>Find the code that created the localized message.</li>



<li>Work out what the localize key is.</li>



<li>Copy the message format.</li>
</ol>



<p>These three manual steps are tedious and error prone. It enough to make me improve my unit test coverage <img src="https://s.w.org/images/core/emoji/15.1.0/72x72/1f60a.png" alt="😊" class="wp-smiley" style="height: 1em; max-height: 1em;" />.</p>



<p>The only downside of logging to a database is the unit tests are slower &#8211; in the Net.LocalizeMessagesAndErrors library that has ~100 the unit tests which take ~1.5 seconds without logging to the database, but ~2 seconds with logging to the database. In the AuthP library, which has nearly 400 tests the difference between log to database being on / off is a smaller percentage.</p>



<p>Thankfully you can turn the database logging on or off by setting the `SaveLocalizesToDb` to true or false respectively – see the documentation for the StubDefaultLocalizerWithLogging <a href="https://github.com/JonPSmith/Net.LocalizeMessagesAndErrors/wiki/Unit-testing-your-localized-code#using-the-stublocalizedefaultwithlogging-class">here</a>.</p>



<h3 class="wp-block-heading">7. Tip: Use Excel (or other app) to setup the data for the resource files.</h3>



<p>This isn’t anything to do using DefaultLocalizer, but I found that adding entries to a resource files isn’t a nice process in Visual Studio (VS Code, with the <a href="https://marketplace.visualstudio.com/items?itemName=DominicVonk.vscode-resx-editor">ResX Editor extension</a>, is better). In the end used Excel to entry the resource Name / Value and then turn in into a .csv file. The code below (taken from my AuthP repo) converts CVS to a resource file.</p>


<div class="wp-block-syntaxhighlighter-code "><pre class="brush: csharp; title: ; notranslate">
public void CreateResxFileFromCSV()
{
    var csvFilePath = &quot;filepath to csv file&quot;;
    var resxFilePath = &quot;filepath to EMPTY resource file&quot;;
    
    //see https://joshclose.github.io/CsvHelper/getting-started/#reading-a-csv-file
    using (var reader = new StreamReader(csvFilePath))
    using (var csv = new CsvReader(reader, 
          CultureInfo.InvariantCulture))
    {
        var records = csv.GetRecords&lt;CsvInputOfResx&gt;();
        //see https://learn.microsoft.com/en-us/dotnet/core/extensions/work-with-resx-files-programmatically#create-a-resx-fil

        using (ResXResourceWriter writer = 
             new ResXResourceWriter(@resxFilePath))
        {
            foreach (var entry in records)
            {
                writer.AddResource(entry.Name, entry.Value);
            }
        }
    }
}
</pre></div>


<p>I find this is especially useful if you need to change / add to your resource file, as its much easier to search / change in Excel.</p>



<h2 class="wp-block-heading">Conclusions</h2>



<p>The Net.LocalizeMessagesAndErrors is relatively small (the DefaultLocalizer is only has ~100 lines of code), but it took me more than five weeks of work! That’s because when I started to use the library I found a load of improvement – I got to local version 1.0.0-preview034 before I had finished. The result is that the library is much easier to use when updating an existing application to support multiple languages, and hopefully nicer to work with.</p>



<p>The changes I added came from applying the library to a) my AuthP library, b) adding a demo ASP.NET Core app within the library repo (see <a href="https://github.com/JonPSmith/Net.LocalizeMessagesAndErrors/tree/main/LocalizedWebApp">LocalizedWebApp</a>), c) localizing the <a href="https://github.com/JonPSmith/AuthPermissions.AspNetCore/tree/main/Example1.RazorPages.IndividualAccounts">Example1 ASP.NET Core in my AuthP library</a> and d) writing the <a href="https://github.com/JonPSmith/Net.LocalizeMessagesAndErrors/wiki">Net.LocalizeMessagesAndErrors documentation</a> (writing the docs always shows me any bad interfaces).</p>



<p>In the following articles I will show how to use the Net.LocalizeMessagesAndErrors library to build localized .NET applications. There also good <a href="https://github.com/JonPSmith/Net.LocalizeMessagesAndErrors/wiki">documentation for this library</a> now that contains all the details if you want to try it out now.</p>



<p>Happy coding.</p>
]]></content:encoded>
					
					<wfw:commentRss>https://www.thereformedprogrammer.net/improving-the-support-of-multiple-languages-in-net-applications/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>ASP.NET Core: Three(+1) ways to refresh the claims of a logged-in user</title>
		<link>https://www.thereformedprogrammer.net/asp-net-core-three-ways-to-refresh-the-claims-of-a-logged-in-user/</link>
					<comments>https://www.thereformedprogrammer.net/asp-net-core-three-ways-to-refresh-the-claims-of-a-logged-in-user/#comments</comments>
		
		<dc:creator><![CDATA[Jon P Smith]]></dc:creator>
		<pubDate>Tue, 18 Oct 2022 13:29:24 +0000</pubDate>
				<category><![CDATA[ASP.NET Core]]></category>
		<category><![CDATA[Authorization]]></category>
		<guid isPermaLink="false">https://www.thereformedprogrammer.net/?p=2794</guid>

					<description><![CDATA[An ASP.NET Core application uses claims to hold the logged-in user’s authentication and authorization data. These &#8230; <a href="https://www.thereformedprogrammer.net/asp-net-core-three-ways-to-refresh-the-claims-of-a-logged-in-user/" class="more-link">Continue reading <span class="screen-reader-text">ASP.NET Core: Three(+1) ways to refresh the claims of a logged-in user</span></a>]]></description>
										<content:encoded><![CDATA[
<p>An ASP.NET Core application uses claims to hold the logged-in user’s <a href="https://learn.microsoft.com/en-us/aspnet/core/security/authentication/">authentication</a> and <a href="https://learn.microsoft.com/en-us/aspnet/core/security/authorization/introduction">authorization</a> data. These claims are created on login and stored in a cookie or a JWT Token for quick access. This makes access to the claims is very fast, but downside is claims are fixed. Most of the time the “fixed claims” approach works fine, but there are some circumstances where you might need to update the user’s claims.</p>



<p>This article describes three different ways to dynamically change a user’s claims for cookie and/or JWT Token authentication. The article also introduces some of the deeper parts of ASP.NET Core’s authorization and <a href="https://learn.microsoft.com/en-us/aspnet/core/fundamentals/middleware/">middleware</a>, which might help you in understanding how ASP.NET Core works.</p>



<blockquote class="wp-block-quote is-layout-flow wp-block-quote-is-layout-flow"><p>NOTE: This article covers some similar topics in the <a href="https://www.thereformedprogrammer.net/advanced-techniques-around-asp-net-core-users-and-their-claims/">Advanced techniques around ASP.NET Core Users and their claims</a>, but includes new approaches provided by a new distributed cache <a href="https://github.com/JonPSmith/Net.DistributedFileStoreCache">Net.DistributedFileStoreCache</a> library (referred to as <em>FileStore cache</em> in this article). The first example has a small improvement, while the other two approaches are new and work with JWT Token authentication.</p></blockquote>



<p>This article is part of the series that covers .NET multi-tenant applications in general. The other articles in “Building ASP.NET Core and EF Core multi-tenant apps” series are:</p>



<ul class="wp-block-list"><li><a href="https://www.thereformedprogrammer.net/building-asp-net-core-and-ef-core-multi-tenant-apps-part1-the-database/">The database: Using a DataKey to only show data for users in their tenant</a></li><li><a href="https://www.thereformedprogrammer.net/building-asp-net-core-and-ef-core-multi-tenant-apps-part2-administration/">Administration: different ways to add and control tenants and users</a></li><li><a href="https://www.thereformedprogrammer.net/multi-tenant-apps-with-different-versions-can-increase-your-profits/">Versioning your app: Creating different versions to maximise your profits</a></li><li><a href="https://www.thereformedprogrammer.net/building-asp-net-core-and-ef-core-hierarchical-multi-tenant-apps/">Hierarchical multi-tenant: Handling tenants that have sub-tenants</a></li><li><a href="https://www.thereformedprogrammer.net/advanced-techniques-around-asp-net-core-users-and-their-claims/">Advanced techniques around ASP.NET Core Users and their claims</a></li><li><a href="https://www.thereformedprogrammer.net/part6-using-sharding-to-build-multi-tenant-apps-using-asp-net-core-and-ef-core/">Using sharding to build multi-tenant apps using EF Core and ASP.NET Core</a></li><li><a href="https://www.thereformedprogrammer.net/three-ways-to-securely-add-new-users-to-an-application-using-the-authp-library/">Three ways to securely add new users to an application using the AuthP library</a></li><li><a href="https://www.thereformedprogrammer.net/how-to-take-an-asp-net-core-web-site-down-for-maintenance/">How to take an ASP.NET Core web site “Down for maintenance”</a></li><li>ASP.NET Core: Three ways to refresh the claims of a logged-in user <strong>(This article)</strong></li></ul>



<h2 class="wp-block-heading">TL;DR; – Summary of this article</h2>



<ul class="wp-block-list"><li>ASP.NET Core creates HttpContext.User on login, which contains user information (like their name and email) in <a href="https://learn.microsoft.com/en-us/dotnet/api/system.security.claims.claim">claims</a>. The User, with its claims, is stored in a cookie or a JWT Token for quick access. You can think of the cookie / JWT Token as a kind of cache.</li><li>If you have data a) is used in almost every HTTP request, and b) it takes some time calculate, then it’s a good candidate to calculate/add it as a claim during the login. See <a href="https://www.thereformedprogrammer.net/advanced-techniques-around-asp-net-core-users-and-their-claims/#1-adding-extra-claims-on-to-authentication-handlers-on-login">this article</a> on how to do add your own claims on login.</li><li>By default, the claims in a logged-in user won’t change until they log out and log back in again. Normally the “fixed claims” is fine but have various situations where I need to update a user’s claims around managing multi-tenant users.</li><li>Therefore, I have needed to create ways to refresh the claims of a logged-in user. In this article I describe three approaches:<ul><li><strong>1. Update user claims via cookie event: </strong>This is a relatively easy way to update the user’s claims when using is the standard way to update an already logged-in user’s claims, but it only works for cookie authentication – see <a href="https://www.thereformedprogrammer.net/asp-net-core-three-ways-to-refresh-the-claims-of-a-logged-in-user/#1-update-user-claims-via-cookie-event-cookie-authentication-only">this section</a> on this approach.</li></ul><ul><li><strong>2. Replace a user claim on a change</strong>: This uses middleware to update a claim when the logged-in claim is out of date. This approach it works with both cookie and cookie authentication – see <a href="https://www.thereformedprogrammer.net/asp-net-core-three-ways-to-refresh-the-claims-of-a-logged-in-user/#2-replace-a-user-claim-on-a-change-jwt-token-and-cookie-authentication">this section</a> on this approach.</li></ul><ul><li><strong>3. On-demand add a new claim: </strong>This uses middleware to add a new claim not already in your JWT Token or Cookie. This is useful if you have secret / personal data that you don’t want in a JWT Token because the data isn’t encrypted – see <a href="https://www.thereformedprogrammer.net/asp-net-core-three-ways-to-refresh-the-claims-of-a-logged-in-user/#3-on-demand-add-a-new-claim-in-middleware-jwt-token-and-cookie">this section</a> on this approach.</li><li><strong>4. Extra, IClaimTransformation</strong>: After I released this article Mohammed Ahmed Hussien (twitter: @shoogn17) said that the <a href="https://learn.microsoft.com/en-us/aspnet/core/security/authentication/claims/#extend-or-add-custom-claims-using-iclaimstransformation">IClaimTransformation interface</a> can also help on change a user’s claims, so I have added something about using IClaimTransformation instead of the middleware approach.</li></ul></li><li>All these examples rely on a distributed cache called <a href="https://github.com/JonPSmith/Net.DistributedFileStoreCache">Net.DistributedFileStoreCache</a> I created for these types of situations. This get a cache value in ~25 nanoseconds, but adding a cache value is slow-ish ( &gt; 1 milliseconds). The very fast cache read means using these approaches won’t slow down your application.</li></ul>



<h2 class="wp-block-heading">Setting the scene – three types of dynamically updating a logged-in claims</h2>



<p>I have created the <a href="https://github.com/JonPSmith/AuthPermissions.AspNetCore">AuthPermissions.AspNetCore</a><strong> </strong>library (shortened to <em>AuthP</em> in this article) which contains a) an improved ASP.NET Core Roles authorization system<strong> and b) </strong>features to help create an ASP.NET Core multi-tenant database system<strong>. </strong>The AuthP’s improved Roles authorization adds a Roles/Permissions claim and if the multi-tenant feature is activated, then an DataKey claim is also added.</p>



<p>In certain circumstances these AuthP’s Roles/Permissions and DataKey claims may change, and to handle this I have developed code to dynamically change a user’s claims. Here are two that I have found:</p>



<ul class="wp-block-list"><li>In an AuthP multi-tenant application there is code to move a tenant’s data from one database to another, thus changing tenant DataKey. This requires the DataKey claim of all the user’s linked to the moved tenant. You can try this out on <a href="https://github.com/JonPSmith/AuthPermissions.AspNetCore/tree/main/Example4.MvcWebApp.IndividualAccounts">AuthP’s Example4</a> hierarchical multi-tenant application and <a href="https://github.com/JonPSmith/AuthPermissions.AspNetCore/tree/main/Example6.MvcWebApp.Sharding">Authp’s Example6</a> sharding multi-tenant application.</li><li>The AuthP library version of ASP.NET Core Roles allows a <a href="https://www.thereformedprogrammer.net/finally-a-library-that-improves-role-authorization-in-asp-net-core/">Role to be dynamically changed</a>, which means that an admin user can what pages / Web APIs are in a Role. If a Role is changed there might be security issues, so the user’s Roles/Permissions claim needs updating. You can try this out in the <a href="https://github.com/JonPSmith/AuthPermissions.AspNetCore/tree/main/Example2.WebApiWithToken.IndividualAccounts">AuthP’s Example2</a> WebApi application that uses the JWT Token authentication.</li><li>The third approach is useful if you need a secret or personal value claim when using JWT Token authentication. You shouldn’t be added to the JWT Token because the token data isn’t encrypted. For instance, various personal privacy laws stop you from adding Personal Identifiable Information (PII) values in a JWT Token. You can try this out in the <a href="https://github.com/JonPSmith/AuthPermissions.AspNetCore/tree/main/Example2.WebApiWithToken.IndividualAccounts">AuthP’s Example2</a> WebApi application that uses the JWT Token authentication.</li><li>At the end I also cover the IClaimTransformation interface that allows you to change a user’s claims. The IClaimTransformation service is an alternative from using middleware approach used in examples 2 and 3</li></ul>



<h2 class="wp-block-heading">Introducing the three examples of updating a user’s claims</h2>



<p>The three examples of updating a user’s claims use different approaches to implementation. This allows you to choose the approach that works for you, but even if you never need these approaches seeing how they use events and ASP.NET Core middleware might help you understand the ASP.NET Core code a bit more.</p>



<p>The three approaches in this article assume you have added extra claims to your users on login. This is &nbsp;described in <a href="https://www.thereformedprogrammer.net/advanced-techniques-around-asp-net-core-users-and-their-claims/#1-adding-extra-claims-on-to-authentication-handlers-on-login">this section</a> of the article called “<a href="https://www.thereformedprogrammer.net/advanced-techniques-around-asp-net-core-users-and-their-claims/">Advanced techniques around ASP.NET Core Users and their claims</a>”. I recommend you read this article if you aren’t aware how to add extra claims to a user on login.</p>



<p>All the solutions rely on a distributed cache called <a href="https://github.com/JonPSmith/Net.DistributedFileStoreCache">Net.DistributedFileStoreCache</a> I created for these types of situations (can find out more about the FileStore cache in <a href="https://www.thereformedprogrammer.net/a-net-distributed-cache-with-a-25-nanosecond-read-time/">this article</a>). The FileStore cache’s key feature is that it as a very fast read time, measured in nanoseconds, which is important if you want application to be fast because each implementation is called on every HTTP request. It also a distributed cache, so it will work on web sites using multiple instances.</p>



<p>Here is a list of the three examples with a quick summary, their pros and cons and a comment on performance:</p>



<ol class="wp-block-list" type="1"><li><strong>Update user claims via cookie event: Cookie authentication only.</strong><ol><li><strong>Summary</strong>: This is the standard way to update an already logged-in user’s claims.</li></ol><ol><li><strong>Pros</strong>: Can handle any type of change because it can change all the claims.</li></ol><ol><li><strong>Cons</strong>: Doesn’t work with JWT Token authentication</li></ol><ol><li><strong>Performance: </strong>It re-calculate all the extra claims, but only for logged-in users. Very efficient as the cookie is updated to the new claims.</li></ol></li><li><strong>Replace a user claim on a change: JWT Token and cookie authentication</strong><ol><li><strong>Summary</strong>: This uses middleware to update a claim when the logged-in claim is out of date.</li></ol><ol><li><strong>Pro</strong>: Can work with both JWT Token and cookie authentication.</li></ol><ol><li><strong>Cons</strong>: Could need a big cache file if lots of users.</li></ol><ol><li><strong>Performance:</strong> It re-calculates one claim for all users, not just logged-in users. If large number of users, then this can be slower than the third example.</li></ol></li><li><strong>On-demand add a new claim: JWT Token and cookie authentication</strong><ol><li><strong>Summary</strong>: This adds a new claim not already in your JWT Token or Cookie.</li></ol><ol><li><strong>Pro</strong>: Hide secret data, e.g. you shouldn’t add a Personal Identifiable Information (PII) claim when using JWT Token.</li></ol><ol><li><strong>Cons</strong>: None</li></ol><ol><li><strong>Performance:</strong> It has a very good performance because the claim only calculated if a user is logged in, but it would be slower than example 2 if a database change altered many users.</li></ol></li></ol>



<blockquote class="wp-block-quote is-layout-flow wp-block-quote-is-layout-flow"><p>NOTE: At the end I talk about using services that follow the IClaimTransformation interface, which could be used in example 2 and 3 instead of adding middleware. </p></blockquote>



<h3 class="wp-block-heading">1. Update user claims via cookie event: Cookie authentication only</h3>



<p>This example only works with cookie authentication only but its fairly simple and is fast, i.e. it doesn’t add much extra time to each HTTP request and It’s also quite easy to adapt to different situations. The downside is you can’t use this with a JWT Token.</p>



<p>The two parts of this implementation are:</p>



<ul class="wp-block-list"><li><strong>Detect Change:</strong> The code links to EF Core’s StateChanged event and detects a change to the entries that would change the claim. On such an event it writes the current UTC DateTime to the “LastChanged” entry in the cache – see the left side of the diagram below.</li><li><strong>Apply to User:</strong> The code links to the cookie’s <a href="https://learn.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.authentication.cookies.cookieauthenticationevents.onvalidateprincipal">OnValidatePrincipal</a> event and if the user’s “LastChanged” claim DateTime is older that the “LastChanged” DateTime from the cache, &nbsp;then it will update the user’s claims and also create a new authentication cookie – see the right side of the diagram below.</li></ul>



<p>The figure below shows how this example works.</p>



<figure class="wp-block-image size-full"><a href="https://www.thereformedprogrammer.net/wp-content/uploads/2022/10/CookieAuthenticationTenantChange.png"><img loading="lazy" decoding="async" width="750" height="354" src="https://www.thereformedprogrammer.net/wp-content/uploads/2022/10/CookieAuthenticationTenantChange.png" alt="" class="wp-image-2795" srcset="https://www.thereformedprogrammer.net/wp-content/uploads/2022/10/CookieAuthenticationTenantChange.png 750w, https://www.thereformedprogrammer.net/wp-content/uploads/2022/10/CookieAuthenticationTenantChange-300x142.png 300w" sizes="auto, (max-width: 750px) 100vw, 750px" /></a></figure>



<p>The main code to implement contains three pieces of code:</p>



<ol class="wp-block-list" type="1"><li>The event code to detect the database changes that require an update to user’s claims</li><li>The <a href="https://github.com/JonPSmith/AuthPermissions.AspNetCore/blob/main/AuthPermissions.SupportCode/DownStatusCode/GlobalChangeTimeService.cs">GlobalChangeTimeService</a> which sets / gets the “LastChanged” entry</li><li>The event code called by cookie’s OnValidatePrincipal to check / update a user’s claims</li></ol>



<p>With two support services</p>



<ul class="wp-block-list"><li>A service called <a href="https://github.com/JonPSmith/AuthPermissions.AspNetCore/blob/main/AuthPermissions/ClaimsCalculator.cs">ClaimsCalculator</a> that provides the extras claims to add to a user.</li><li>The <a href="https://github.com/JonPSmith/Net.DistributedFileStoreCache">Net.DistributedFileStoreCache</a> library to provide a cache with a very fast read.</li></ul>



<p>Let’s now look at the main code:</p>



<h4 class="wp-block-heading">1.3 The event code to detect the database changes</h4>



<p>I’m using EF Core which has a several events to track what is happing to the database. In this case I used EF Core’s ChangeTracker.StateChanged (see <a href="https://thecodeblogger.com/2021/07/17/how-to-use-net-evens-provided-by-ef-core/">this useful article</a> about EF Core events). The code can be found in the <a href="https://github.com/JonPSmith/AuthPermissions.AspNetCore/blob/main/AuthPermissions.SupportCode/DownStatusCode/TenantKeyOrShardChangeService.cs">TenantKeyOrShardChangeService</a> class inherits the IDatabaseStateChangeEvent interface and much be register via the ASP.NET Core DI provider. The constructor of the application’s DbContext contains an extra parameter containing an IEnumerable&lt;IDatabaseStateChangeEvent&gt; that contains any registered classes that have the IDatabaseStateChangeEvent interface.</p>



<p>In this example I am looking for two changes to the Tenant entity:</p>



<ul class="wp-block-list"><li>The ParentDataKey property being modified – this would change the DataKey claim, which defines the tenant filer key (lines 13 to 14).</li><li>The DatabaseInfoName property being modified – this is used in sharding and would change the DatabaseInfoName claim, which defines what database to use (lines 15 to 16).</li></ul>



<p>The code below is taken from the <a href="https://github.com/JonPSmith/AuthPermissions.AspNetCore/blob/main/AuthPermissions.SupportCode/DownStatusCode/TenantKeyOrShardChangeService.cs">TenantKeyOrShardChangeService</a> class and shows the code to register its event listener, and the actual event handler.</p>


<div class="wp-block-syntaxhighlighter-code "><pre class="brush: csharp; title: ; notranslate">
public void RegisterEventHandlers(
    AuthPermissionsDbContext context)
{
    context.ChangeTracker.StateChanged += 
        RegisterKeyOrShardChange;
}

private void RegisterKeyOrShardChange(object sender, 
    EntityStateChangedEventArgs e)
{
    if (e.Entry.Entity is Tenant
        &&amp; e.NewState == EntityState.Modified
        &&amp; (e.Entry.OriginalValues&#x5B;nameof(Tenant.ParentDataKey)] != 
               e.Entry.CurrentValues&#x5B;nameof(Tenant.ParentDataKey)] ||
            e.Entry.OriginalValues&#x5B;nameof(Tenant.DatabaseInfoName)] !=
               e.Entry.CurrentValues&#x5B;nameof(Tenant.DatabaseInfoName)])
        )
    {
        _globalAccessor.SetGlobalChangeTimeToNowUtc();
    }
}
</pre></div>


<p>The SetGlobalChangeTimeToNowUtc method is called if a modification is found. This method comes from the GlobalChangeTimeService class which is described next section.</p>



<h4 class="wp-block-heading">1.2 The GlobalChangeTimeService class</h4>



<p>The <a href="https://github.com/JonPSmith/AuthPermissions.AspNetCore/blob/main/AuthPermissions.SupportCode/DownStatusCode/GlobalChangeTimeService.cs">GlobalChangeTimeService</a> class provides a thin wrapper around the FileStore cache and has two methods that set and get the &#8220;ChangeAtThisTime&#8221; &nbsp;entry in the FileStore cache. Also handles the DateTime conversions. The methods are:</p>



<ul class="wp-block-list"><li>SetGlobalChangeTimeToNowUtc(), which sets the cache entry with the name &#8220;ChangeAtThisTime&#8221; with a value of DateTime.UtcNow.DateTimeToTicks()</li><li>GetGlobalChangeTimeUtc(), which returns a DateTime from the cache entry with the name &#8220;ChangeAtThisTime&#8221;, or DateTime.MinValue if that entry hasn’t been set.</li></ul>



<h4 class="wp-block-heading">1.3 The event code called by cookie’s OnValidatePrincipal</h4>



<p>The event code can be found in the <a href="https://github.com/JonPSmith/AuthPermissions.AspNetCore/blob/main/AuthPermissions.SupportCode/DownStatusCode/SomethingChangedCookieEvent.cs">SomethingChangedCookieEvent</a> class and needs to register it in your Program class using the code shown below</p>


<div class="wp-block-syntaxhighlighter-code "><pre class="brush: csharp; title: ; notranslate">
builder.Services.ConfigureApplicationCookie(options =&gt;
{
    options.Events.OnValidatePrincipal = 
      SomethingChangedCookieEvent
          .UpdateClaimsIfSomethingChangesAsync;
});
</pre></div>


<p>The code shown below comes from the <a href="https://github.com/JonPSmith/AuthPermissions.AspNetCore/blob/main/AuthPermissions.SupportCode/DownStatusCode/SomethingChangedCookieEvent.cs">SomethingChangedCookieEvent</a> class. The steps are:</p>



<ol class="wp-block-list" type="1"><li>Lines 4 to 7: Gets the current user’s claims and the latest time a Global Change was found.</li><li>Lines 9 to 11: If the user’s claims are older that the Global Change time it needs to update the user’s claims.</li><li>Lines 19 to 25: This updates the AuthP&#8217;s claims via its AuthP’s <a href="https://github.com/JonPSmith/AuthPermissions.AspNetCore/blob/main/AuthPermissions/ClaimsCalculator.cs">ClaimsCalculator</a> which will recalculate the extra claims, including the claim that holds the last time the claims were updated.</li><li>Lines 27 to 29: This a) creates a new User (of type ClaimsPrincipal) for this HTTP request, and b) in line 30 it says the authentication cookie should be updated with these new claims.</li></ol>


<div class="wp-block-syntaxhighlighter-code "><pre class="brush: csharp; title: ; notranslate">
public static async Task UpdateClaimsIfSomethingChangesAsync
    (CookieValidatePrincipalContext context)
{
    var originalClaims = context.Principal.Claims.ToList();
    var globalTimeService = context.HttpContext.RequestServices
       .GetRequiredService&lt;IGlobalChangeTimeService&gt;();
    var lastUpdateUtc = globalTimeService.GetGlobalChangeTimeUtc();

    if (originalClaims.
           GetClaimDateTimeTicksValue(EntityChangeClaimType) 
        &lt; lastUpdateUtc)
    {
        //Need to refresh the user's claims 
        var userId = originalClaims.GetUserIdFromClaims();
        if (userId == null)
            //this shouldn't happen, but best to return
            return;

        var claimsCalculator = context.HttpContext.RequestServices
            .GetRequiredService&lt;IClaimsCalculator&gt;();
        var newClaims = await claimsCalculator
            .GetClaimsForAuthUserAsync(userId);
        //Copy over unchanged claims
        newClaims.AddRange(originalClaims.
            RemoveUpdatedClaimsFromOriginalClaims(newClaims)); 

        var identity = new ClaimsIdentity(newClaims, &quot;Cookie&quot;);
        var newPrincipal = new ClaimsPrincipal(identity);
        context.ReplacePrincipal(newPrincipal);
        context.ShouldRenew = true;
    }
}

private static IEnumerable&lt;Claim&gt; 
    RemoveUpdatedClaimsFromOriginalClaims(
        this List&lt;Claim&gt; originalClaims, List&lt;Claim&gt; newClaims)
{
    var newClaimTypes = newClaims.Select(x =&gt; x.Type);
    return originalClaims
        .Where(x =&gt; !newClaimTypes.Contains(x.Type));
}
</pre></div>


<h3 class="wp-block-heading">2. Replace a user claim on a change: JWT Token and cookie authentication</h3>



<p>This approach uses middleware to replace a claim, not by updating the user’s claims in the first approach, but by updating the current HTTP User on every HTTP request. The pro of this approach is that it works for JWT Token and cookie authentication, but the con is needs code to run on every HTTP request which cause some performance problems. I only considered this approach after I had created a the FileStore distributed cache, as it has a read time of ~25 nanoseconds.</p>



<p>Like the first example there are two parts to this approach:</p>



<ul class="wp-block-list"><li><strong>Detect Change:</strong> The code links to EF Core’s StateChanged event and detects a change to the entries that would change the claim. In this case it calculates the new claim value for each affected user and stores each claim value in the cache – see the left side of the diagram below.</li><li><strong>Apply to User:</strong> The extra middleware code runs after the authorization middleware and if a new claim for the current user is found in the cache, then it replaces the out-of-date claim and creates a new ClaimsPrincipal – see the right side of the diagram below.</li></ul>



<p>The figure below shows how this example works.</p>



<figure class="wp-block-image size-full"><a href="https://www.thereformedprogrammer.net/wp-content/uploads/2022/10/MiddlewareUpdateAuthorization.png"><img loading="lazy" decoding="async" width="1017" height="414" src="https://www.thereformedprogrammer.net/wp-content/uploads/2022/10/MiddlewareUpdateAuthorization.png" alt="" class="wp-image-2796" srcset="https://www.thereformedprogrammer.net/wp-content/uploads/2022/10/MiddlewareUpdateAuthorization.png 1017w, https://www.thereformedprogrammer.net/wp-content/uploads/2022/10/MiddlewareUpdateAuthorization-300x122.png 300w, https://www.thereformedprogrammer.net/wp-content/uploads/2022/10/MiddlewareUpdateAuthorization-768x313.png 768w" sizes="auto, (max-width: 1017px) 100vw, 1017px" /></a></figure>



<p>The main code to implement contains pieces of code:</p>



<ol class="wp-block-list" type="1"><li>The event code to detect the database changes and add replacement claims to the cache.</li><li>The middleware which updates the HTTP User if a replacement claim is found in the cache.</li></ol>



<p>It also uses the <a href="https://github.com/JonPSmith/Net.DistributedFileStoreCache">Net.DistributedFileStoreCache</a> library to provide a cache with a very fast read.</p>



<p>Let’s now look at the main code:</p>



<h4 class="wp-block-heading">2.1 The event code to detect the database changes</h4>



<p>In the first example the database event code just had to detect a change, so it’s used EF Core’s StateChanged event. In this example we need to detect a change and then calculate the updated claim once the database has been updated, which makes the code more complex. You can find the code in the <a href="https://github.com/JonPSmith/AuthPermissions.AspNetCore/blob/main/Example2.WebApiWithToken.IndividualAccounts/ClaimsChangeCode/RoleChangedDetectorService.cs">RoleChangedDetectorService</a> class, but because the code is quite long, I will describe the various parts with pseudo-code</p>



<figure class="wp-block-image size-large"><a href="https://www.thereformedprogrammer.net/wp-content/uploads/2022/10/RoleChangedDetectorServicePseudoCode-1.png"><img loading="lazy" decoding="async" width="1024" height="685" src="https://www.thereformedprogrammer.net/wp-content/uploads/2022/10/RoleChangedDetectorServicePseudoCode-1-1024x685.png" alt="" class="wp-image-2798" srcset="https://www.thereformedprogrammer.net/wp-content/uploads/2022/10/RoleChangedDetectorServicePseudoCode-1-1024x685.png 1024w, https://www.thereformedprogrammer.net/wp-content/uploads/2022/10/RoleChangedDetectorServicePseudoCode-1-300x201.png 300w, https://www.thereformedprogrammer.net/wp-content/uploads/2022/10/RoleChangedDetectorServicePseudoCode-1-768x513.png 768w, https://www.thereformedprogrammer.net/wp-content/uploads/2022/10/RoleChangedDetectorServicePseudoCode-1-1536x1027.png 1536w, https://www.thereformedprogrammer.net/wp-content/uploads/2022/10/RoleChangedDetectorServicePseudoCode-1.png 1542w" sizes="auto, (max-width: 1024px) 100vw, 1024px" /></a></figure>



<p>The code in the AddPermissionOverridesToCache method calculates the claim for each effected Users and stores the new claim in the FileStore cache with a key containing the userId of user that the claim applies to.</p>



<p>The RoleChangedDetectorService inherits the the IDatabaseStateChangeEvent interface and much be register via the ASP.NET Core DI provider. The constructor of the application’s DbContext contains an extra parameter containing an IEnumerable&lt;IDatabaseStateChangeEvent&gt; that contains any registered classes that have the IDatabaseStateChangeEvent interface.</p>



<h4 class="wp-block-heading">2.2. The middleware which updates the HTTP User outdated claim</h4>



<p>The middleware code can be found in the <a href="https://github.com/JonPSmith/AuthPermissions.AspNetCore/blob/main/Example2.WebApiWithToken.IndividualAccounts/ClaimsChangeCode/UpdateRoleClaimMiddleware.cs">UpdateRoleClaimMiddleware</a> class which both provides the extension method to register the middleware, and the code that will be called on every HTTP request. Here is the code in you need to your Program class to add this code into the into the middleware pipeline (see highlighted line) – note that the UsePermissionsChange method must come after the UseAuthorization.</p>


<div class="wp-block-syntaxhighlighter-code "><pre class="brush: csharp; highlight: [4]; title: ; notranslate">
//other code left out
app.UseAuthentication();
app.UseAuthorization();
app.UsePermissionsChange();
//other code left out
</pre></div>


<p>The actual method in the <a href="https://github.com/JonPSmith/AuthPermissions.AspNetCore/blob/main/Example2.WebApiWithToken.IndividualAccounts/ClaimsChangeCode/UpdateRoleClaimMiddleware.cs">UpdateRoleClaimMiddleware</a> class that updates a claim if that claim has been updated is shown below, with this list explain what each part does and where that code is found:</p>



<ol class="wp-block-list" type="1"><li>Lines 4 to 5: It only looks at logged-in user. Not logged-in requests are ignored.</li><li>Lines 12 to 13: This looks for a replacement value for its Permissions’ claim value. If its null, then there no replacement and the current User is used.</li><li>Lines 17 to 23: This gets the current User’s claims and replaces the Permissions’ claim with a new claim where its value is taken from the found cache.</li><li>Lines 25 to 28:&nbsp; This creates a new ClaimsIdentity containing the updated claim. This new user sent back to the outer code which assigns it to the HTTPContext’s &nbsp;context.User property.</li></ol>


<div class="wp-block-syntaxhighlighter-code "><pre class="brush: csharp; title: ; notranslate">
public static async Task&lt;ClaimsPrincipal&gt; ReplacePermissionsMiddleware(
    IServiceProvider serviceProvider, ClaimsPrincipal user)
{
    var userId = user.GetUserIdFromUser();
    if (userId != null)
    {
        //There is a logged-in user, find if the
        //FileStore cache contains a new Permissions claim
        var fsCache = serviceProvider.GetRequiredService
            &lt;IDistributedFileStoreCacheClass&gt;();

        var replacementPermissions = await fsCache.GetAsync(
            userId.FormReplacementPermissionsKey());
        if (replacementPermissions != null)
            //Replacement permissions claim found, so update the User

            var updateClaims = user.Claims.ToList();
            var found = updateClaims.FirstOrDefault(c =&gt;
                c.Type == PermissionConstants.PackedPermissionClaimType);
            updateClaims.Remove(found); 
            updateClaims.Add(new Claim(
                PermissionConstants.PackedPermissionClaimType, 
                replacementPermissions));

            var appIdentity = new ClaimsIdentity(
                updateClaims, 
                user.Identity!.AuthenticationType);
            return new ClaimsPrincipal(appIdentity);
        }
    }
    
    return null; //no change to the current user
}
</pre></div>


<p>The ReplacePermissionsMiddleware method is called from the code that registers the middleware. If the method returns null, then the current HTTP User is unchanged as there was no update. If there is an update to the User’s claims the method returns a new User (ClaimsPrincipal), which is then assigned to the HttpContext.User property.</p>



<h3 class="wp-block-heading">3. On-demand add a new claim in middleware: JWT Token and cookie</h3>



<p>The final example is similar to the second example as its uses middleware, but it’s the middleware that calculates the claim rather than the database trigger. This approach is good when you have secret / sensitive claims that you don’t want to put in a JWT Token, because a JWT Token isn’t encrypted. For instance, various privacy rules say that Personal Identifiable Information (PII), e.g. user’s email address, when using JWT Token.</p>



<p>The two parts to this approach are:</p>



<ul class="wp-block-list"><li><strong>On-demand Claim:</strong> The middleware code will look for claim value from the cache. If the cache value is empty, then it will access the database to get the latest value and store that in the cache. Finally, the code will add the claim to the HTTP User.</li><li><strong>Detect Change:</strong> If a database change alters the cache value, then it removes any existing cache value, thus causing the middleware to recalculate the claim value for the user.</li></ul>



<p>The figure below shows how this example works.</p>



<figure class="wp-block-image size-large"><a href="https://www.thereformedprogrammer.net/wp-content/uploads/2022/10/MiddlewareOnDemandClaim.png"><img loading="lazy" decoding="async" width="1024" height="355" src="https://www.thereformedprogrammer.net/wp-content/uploads/2022/10/MiddlewareOnDemandClaim-1024x355.png" alt="" class="wp-image-2799" srcset="https://www.thereformedprogrammer.net/wp-content/uploads/2022/10/MiddlewareOnDemandClaim-1024x355.png 1024w, https://www.thereformedprogrammer.net/wp-content/uploads/2022/10/MiddlewareOnDemandClaim-300x104.png 300w, https://www.thereformedprogrammer.net/wp-content/uploads/2022/10/MiddlewareOnDemandClaim-768x266.png 768w, https://www.thereformedprogrammer.net/wp-content/uploads/2022/10/MiddlewareOnDemandClaim.png 1067w" sizes="auto, (max-width: 1024px) 100vw, 1024px" /></a></figure>



<p>The main code to implement contains pieces of code:</p>



<ol class="wp-block-list" type="1"><li>The middleware which adds a new claim to the HTTP User from the cache.</li><li>The event code to detect the database changes and removes the cache value.</li></ol>



<p>It also uses the <a href="https://github.com/JonPSmith/Net.DistributedFileStoreCache">Net.DistributedFileStoreCache</a> library to provide a cache with a very fast read.</p>



<p>Let’s now look at the main code:</p>



<h4 class="wp-block-heading">3.1 The middleware which adds a new claim</h4>



<p>The middleware code can be found in the <a href="https://github.com/JonPSmith/AuthPermissions.AspNetCore/blob/main/Example2.WebApiWithToken.IndividualAccounts/ClaimsChangeCode/AddEmailClaimMiddleware.cs">AddEmailClaimMiddleware</a> class which both provides the extension method to register the middleware, and the code that will be called on every HTTP request. Here is the code in you need to your Program class to add this code into the into the middleware pipeline (see highlighted line) – note that the UseAddEmailClaimToUsers method must come after the UseAuthorization.</p>


<div class="wp-block-syntaxhighlighter-code "><pre class="brush: csharp; highlight: [4]; title: ; notranslate">
//other code left out
app.UseAuthentication();
app.UseAuthorization();
app.UseAddEmailClaimToUsers();
//other code left out
</pre></div>


<p>The actual method in the AddEmailClaimMiddleware class that adds the new claim is shown below, with this list explain what each part does and where that code is found:</p>



<ol class="wp-block-list" type="1"><li>Lines 4 to 5: It only looks at logged-in user. Not logged-in requests are ignored.</li><li>Lines 11  to 13: This looks for a replacement value for its Email claim value. If its null, then it needs to access the database for the latest email of the current HTTP User.</li><li>Lines 16 to 26: This gets the current user email from the database and adds a cache entry so that the next time it doesn’t have to query the database.</li><li>Lines 30 to 35:&nbsp; This creates a new ClaimsIdentity containing the added email claim. This new user sent back to the outer code which assigns it to the HTTPContext’s &nbsp;User property.</li></ol>


<div class="wp-block-syntaxhighlighter-code "><pre class="brush: csharp; title: ; notranslate">
public static async Task&lt;ClaimsPrincipal&gt; AddEmailClaimToCurrentUser(
    IServiceProvider serviceProvider, ClaimsPrincipal user)
{
    var userId = user.GetUserIdFromUser();
    if (userId != null)
    {
        //There is a logged-in user, so cache contains a new Permissions claim
        var fsCache = serviceProvider.GetRequiredService
            &lt;IDistributedFileStoreCacheClass&gt;();

        var usersEmail = await fsCache.GetAsync(
            userId.FormAddedEmailClaimKey());
        if (usersEmail == null)
        {
            //Not set up yet, get the user's email 
            var context = serviceProvider.GetRequiredService
                 &lt;AuthPermissionsDbContext&gt;();
            usersEmail = context.AuthUsers
                 .Where(x =&gt; x.UserId == userId)
                 .Select(x =&gt; x.Email).FirstOrDefault();
            
            if (usersEmail == null)
                return null; //shouldn't happen, but could in certain updates

            //Add to cache so next time it will be quicker
            await fsCache.SetAsync(userId.FormAddedEmailClaimKey(), usersEmail);
        }

        //We need to add the Email from the cache
        var updateClaims = user.Claims.ToList();
        updateClaims.Add(new Claim(ClaimTypes.Email, usersEmail));

        var appIdentity = new ClaimsIdentity(updateClaims,
            user.Identity!.AuthenticationType);
        return new ClaimsPrincipal(appIdentity);
    }
    
    return null; //no change to the current user
}
</pre></div>


<p>The AddEmailClaimToCurrentUser method is called from the code that registers the middleware. If the user is logged in the method will return a new User (ClaimsPrincipal) with the email claim added, which is then assigned to the HttpContext.User property. For user that aren’t logged in, then the method returns null, which means the current User should be used.</p>



<h4 class="wp-block-heading">3.2. The event code to detect the change of a user’s email</h4>



<p>The database event code is very simple – if a user’s email has changed, then make sure the cache entry linked to the user’s email is removed. That means the next time that user accesses the web app the AddEmailClaimMiddleware will recalculate the user’s email (and add the cache entry).</p>



<p>The code below come from the <a href="https://github.com/JonPSmith/AuthPermissions.AspNetCore/blob/main/Example2.WebApiWithToken.IndividualAccounts/ClaimsChangeCode/EmailChangeDetectorService.cs">EmailChangeDetectorService</a> class.</p>


<div class="wp-block-syntaxhighlighter-code "><pre class="brush: csharp; title: ; notranslate">
public void RegisterEventHandlers(AuthPermissionsDbContext context)
{
    context.ChangeTracker.StateChanged += 
         delegate(object sender, EntityStateChangedEventArgs e)
    {
        if (e.Entry.Entity is AuthUser user
            &&amp; e.NewState == EntityState.Modified
            &&amp; e.Entry.OriginalValues&#x5B;nameof(AuthUser.Email)] 
               != e.Entry.CurrentValues&#x5B;nameof(AuthUser.Email)]
            )
            //Email has changed, so we remove the current cache value
            _fsCache.Remove(user.UserId.FormAddedEmailClaimKey());
    };
}
</pre></div>


<p>The EmailChangeDetectorService inherits the IDatabaseStateChangeEvent interface, and much be register via the ASP.NET Core DI provider. The constructor of the application’s DbContext contains an extra parameter containing an IEnumerable&lt;IDatabaseStateChangeEvent&gt; that contains any registered classes that have the IDatabaseStateChangeEvent interface.</p>



<h3 class="wp-block-heading">4. Extra: Using IClaimTransformation to update the user’s claims</h3>



<p>I wanted to add this extra part to talk about services that follow the IClaimTransformation interface to update the user’s claims. Like the middleware approach the IClaimTransformation services run on every HTTP request after the AuthenticateAsync middleware.</p>



<p>I haven’t used IClaimTransformation services but when Mohammed Ahmed Hussien (twitter: @shoogn17) pointed it out I can see that it might be easier for people to use because:</p>



<ul class="wp-block-list"><li>You can use the normal constructor dependency injection to inject other services you need in your code.</li><li>Unlike the middleware approach a IClaimTransformation service only runs if there a logged-in user, which means you don’t have to add code to ignore non-logged in users.</li></ul>



<p>This <a href="https://learn.microsoft.com/en-us/aspnet/core/security/authentication/claims#extend-or-add-custom-claims-using-iclaimstransformation">section from the Microsoft docs</a> gives you a simple example of how you would create and register a IClaimTransformation service.</p>



<p>I haven’t compared the middleware and IClaimTransformation service for performance, but I would expect both of them are fast, assuming your code doesn’t access a database every HTTP request. (I found a couple of articles about IClaimTransformation which has database accesses on every HTTP request. I don’t recommend that for performance reason, which is why I use the FileStore cache to keep the claim update fast.)</p>



<h2 class="wp-block-heading">Conclusions</h2>



<p>This article gives a detailed looks at three ways to update the claims of a logged-in user to a ASP.NET Core application. The three examples provide a wide range of approaches that cover most claim update situations. And each example can be tweaked to make them perform better for specific changes: for instance, the first example updates all logged-in users, but I could be changed to be more selective on which users are updated. &nbsp;&nbsp;&nbsp;</p>



<p>I start with the cookie-only approach which I used many years ago on my first ASP.NET Core application for a client. Its pretty simple and performs very well when changes are infrequent. I have used this for many years, including in client’s applications, and it well tried and tested. The only change I have added in this article is the use of the FileStore distributed cache, which makes it a bit faster.</p>



<p>For many years I didn’t have a viable solution for changing the claims when using JWT Token authentication, which is a problem as many frontend frameworks work better with a JWT Token. It wasn’t until I build the FileStore distributed cache, which has a very fast read time, e.g. ~25 nanoseconds (see <a href="https://github.com/JonPSmith/Net.DistributedFileStoreCache#performance-figures">FileStore distributed cache benchmark</a> for full data), that I found an approach that has a good per-HTTP request performance.</p>



<p>Examples 2 and 3 offer two approaches that work with both cookie and JWT Token authentication, with their implementations almost the reverse of each other: example 2 calculates the updated claims within the database event, while example 3 calculate the claim in the middleware code. These different approaches also provide different performance parameters – see the performance section in the list of the three approaches in <a href="https://www.thereformedprogrammer.net/asp-net-core-three-ways-to-refresh-the-claims-of-a-logged-in-user/#introducing-the-three-examples-of-updating-a-users-claims">introduction section</a> for more on this.</p>



<blockquote class="wp-block-quote is-layout-flow wp-block-quote-is-layout-flow"><p>NOTE: These three examples are in the AuthP’s repro examples and be tried by running various ASP.NET Core applications. The Update user claims via cookie event version can be found in <a href="https://github.com/JonPSmith/AuthPermissions.AspNetCore/tree/main/Example4.MvcWebApp.IndividualAccounts">AuthP’s Example4</a> hierarchical multi-tenant application and <a href="https://github.com/JonPSmith/AuthPermissions.AspNetCore/tree/main/Example6.MvcWebApp.Sharding">Authp’s Example6</a> sharding multi-tenant application. The last two examples work with JWT Token, so both middleware versions are in the <a href="https://github.com/JonPSmith/AuthPermissions.AspNetCore/tree/main/Example2.WebApiWithToken.IndividualAccounts">AuthP’s Example2</a> WebApi application that uses the JWT Token authentication.</p></blockquote>



<p>Happy coding.</p>
]]></content:encoded>
					
					<wfw:commentRss>https://www.thereformedprogrammer.net/asp-net-core-three-ways-to-refresh-the-claims-of-a-logged-in-user/feed/</wfw:commentRss>
			<slash:comments>10</slash:comments>
		
		
			</item>
		<item>
		<title>How to take an ASP.NET Core web site “Down for maintenance”</title>
		<link>https://www.thereformedprogrammer.net/how-to-take-an-asp-net-core-web-site-down-for-maintenance/</link>
					<comments>https://www.thereformedprogrammer.net/how-to-take-an-asp-net-core-web-site-down-for-maintenance/#respond</comments>
		
		<dc:creator><![CDATA[Jon P Smith]]></dc:creator>
		<pubDate>Tue, 20 Sep 2022 18:51:21 +0000</pubDate>
				<category><![CDATA[ASP.NET Core]]></category>
		<category><![CDATA[distributed cache]]></category>
		<category><![CDATA[Multi-tenant]]></category>
		<guid isPermaLink="false">https://www.thereformedprogrammer.net/?p=2769</guid>

					<description><![CDATA[If you have an e-commerce or business web app used by lots of users, then you &#8230; <a href="https://www.thereformedprogrammer.net/how-to-take-an-asp-net-core-web-site-down-for-maintenance/" class="more-link">Continue reading <span class="screen-reader-text">How to take an ASP.NET Core web site “Down for maintenance”</span></a>]]></description>
										<content:encoded><![CDATA[
<p>If you have an e-commerce or business web app used by lots of users, then you really don’t want that app to be “down” (e.g. “site offline” or “site not found”) because it’s bad for business. But at the same time some database changes are just too complex to allow users to access a database while the data being changed. This article describes a way to momentary divert users during a database is changed, which means that the database change code has exclusive access, and any change has the smallest effect on your logged-in users.</p>



<p>I designed this approach for <a href="https://github.com/JonPSmith/AuthPermissions.AspNetCore/wiki/Multi-tenant-explained">multi-tenant applications</a>, especially when using <a href="https://en.wikipedia.org/wiki/Shard_(database_architecture)">sharding</a>. In these sorts of applications a single tenant might need changing or moved and the code to do that needs exclusive access – see this <a href="https://docs.microsoft.com/en-us/azure/azure-sql/database/elastic-scale-overview-split-and-merge">Microsoft article</a> which describes the split and merge processes, which are two examples of changes that need exclusive access.</p>



<p>This article is part of the series that covers .NET multi-tenant applications in general. The other articles in “Building ASP.NET Core and EF Core multi-tenant apps” series are:</p>



<ol class="wp-block-list" type="1"><li><a href="https://www.thereformedprogrammer.net/building-asp-net-core-and-ef-core-multi-tenant-apps-part1-the-database/">The database: Using a DataKey to only show data for users in their tenant</a></li><li><a href="https://www.thereformedprogrammer.net/building-asp-net-core-and-ef-core-multi-tenant-apps-part2-administration/">Administration: different ways to add and control tenants and users</a></li><li><a href="https://www.thereformedprogrammer.net/multi-tenant-apps-with-different-versions-can-increase-your-profits/">Versioning your app: Creating different versions to maximise your profits</a></li><li><a href="https://www.thereformedprogrammer.net/building-asp-net-core-and-ef-core-hierarchical-multi-tenant-apps/">Hierarchical multi-tenant: Handling tenants that have sub-tenants</a></li><li><a href="https://www.thereformedprogrammer.net/advanced-techniques-around-asp-net-core-users-and-their-claims/">Advanced techniques around ASP.NET Core Users and their claims</a></li><li><a href="https://www.thereformedprogrammer.net/part6-using-sharding-to-build-multi-tenant-apps-using-asp-net-core-and-ef-core/">Using sharding to build multi-tenant apps using EF Core and ASP.NET Core</a> </li><li><a href="https://www.thereformedprogrammer.net/three-ways-to-securely-add-new-users-to-an-application-using-the-authp-library/">Three ways to securely add new users to an application using the AuthP library</a></li><li>How to take an ASP.NET Core web site “Down for maintenance” <strong>(This article)</strong></li><li><a href="https://www.thereformedprogrammer.net/asp-net-core-three-ways-to-refresh-the-claims-of-a-logged-in-user/">Three ways to refresh the claims of a logged-in user</a></li></ol>



<p></p>



<h2 class="wp-block-heading">TL;DR; – Summary of this article</h2>



<ul class="wp-block-list"><li>The feature described is solves a problem that can arise in multi-tenant applications, that is it can temporarily stop users from accessing a tenant’s data while a complex change is applied to the tenant data. A “complex change” might be moving a tenant’s data to another database.</li><li>The solution uses ASP.NET Core’s <a href="https://docs.microsoft.com/en-us/aspnet/core/fundamentals/middleware/">middleware</a> to intercept every HTTP request and checks that that data that the user might access isn’t “down”, i.e. that data is being changed and mustn’t accessed. If the data the user uses is “down” they are diverted to a “down for maintenance – back soon” page.</li><li>Because the middleware is called on every HTTP request, I have used the FileStore distributed cache, which has a read time of ~25 ns, which means this feature doesn’t slow down the application.</li><li>I have implemented the code in version 3.4.0 of my open-source <a href="https://github.com/JonPSmith/AuthPermissions.AspNetCore">AuthPermissions.AspNetCore</a> library – see the <a href="https://github.com/JonPSmith/AuthPermissions.AspNetCore/wiki/%22Down-for-maintenance%22-feature">“Down for Maintenance”</a> documentation. But the design and code of this feature can be copied to any ASP.NET Core application.</li></ul>



<h2 class="wp-block-heading">Setting the scene – why did I need this feature</h2>



<p>I have a library called my <a href="https://github.com/JonPSmith/AuthPermissions.AspNetCore">AuthPermissions.AspNetCore</a> library (referred to as AuthP in this article) that helps developers to build complex multi-tenant applications and it includes sharding, that is each tenant has their own database. One of the best ways to manage lots of databases is <a href="https://docs.microsoft.com/en-us/azure/azure-sql/database/elastic-pool-overview">Azure SQL Server elastic pools</a> but the suggested <a></a><a href="https://github.com/Azure/elastic-db-tools">elastic pool support</a> library is <a href="https://github.com/Azure/elastic-db-tools/issues/221">not supported any more</a>. So, if I wanted to use SQL Server elastic pools, then I needed to build code that implements the split-merge code.</p>



<p>I had built most of the features needed, like defining a tenant and the <a href="https://www.thereformedprogrammer.net/building-asp-net-core-and-ef-core-multi-tenant-apps-part1-the-database/">keys for each tenant</a> and <a href="https://www.thereformedprogrammer.net/part6-using-sharding-to-build-multi-tenant-apps-using-asp-net-core-and-ef-core/">sharding</a>, in version 3.0.0 of the AuthP library, but the last missing feature is the ability to stop users from accessing a tenant while it is changed / moved (I used the term <em>move</em> for both split and merge). That’s because if a user is accessing the tenant data at the same time as a, then the user might get the wrong data or more crucially, it can cause data loss during a move.</p>



<p>The diagram below shows the process I need to build if I want to successfully change / move a tenant’s data while the application is still running. &nbsp;Note that only tenant user linked to “tenant 123” are diverted while users not linked to “tenant 123” would work normally.</p>



<figure class="wp-block-image size-full"><a href="https://www.thereformedprogrammer.net/wp-content/uploads/2022/09/DownForMaintenanceTenantUpdate.png"><img loading="lazy" decoding="async" width="820" height="547" src="https://www.thereformedprogrammer.net/wp-content/uploads/2022/09/DownForMaintenanceTenantUpdate.png" alt="" class="wp-image-2770" srcset="https://www.thereformedprogrammer.net/wp-content/uploads/2022/09/DownForMaintenanceTenantUpdate.png 820w, https://www.thereformedprogrammer.net/wp-content/uploads/2022/09/DownForMaintenanceTenantUpdate-300x200.png 300w, https://www.thereformedprogrammer.net/wp-content/uploads/2022/09/DownForMaintenanceTenantUpdate-768x512.png 768w" sizes="auto, (max-width: 820px) 100vw, 820px" /></a></figure>



<blockquote class="wp-block-quote is-layout-flow wp-block-quote-is-layout-flow"><p>NOTE: In the AuthP library the keys to a tenant data key(s) are held in the user’s claims, which means that after a change / move the user’s tenant claims(s) need updating. The AuthP library has a feature called “<a href="https://github.com/JonPSmith/AuthPermissions.AspNetCore/wiki/Update-claims-on-tenant-change">update claims on tenant change</a>” &#8211; click the link to go to the documentation.</p></blockquote>



<p>It turns out that the solution to implement this “down” process is to use ASP.NET Core’s <a href="https://docs.microsoft.com/en-us/aspnet/core/fundamentals/middleware/">Middleware</a>. You can intercept a user and divert them to another page / url if a move / change is in action by adding an extra middleware in the correct place. I call a divert a “down” because the tenant is “down for maintenance” while the change / move is being executes.</p>



<p>The downside of the added the extra middleware is that the code is called on every HTTP request. This means the middleware needs to be is fast, otherwise you will slow down your whole application for a few, infrequent change / move diverts. I solved this by creating the <a href="https://www.thereformedprogrammer.net/a-net-distributed-cache-with-a-25-nanosecond-read-time/">FileStore distritributed cache</a>, which has a very fast read time (e.g. ~25 ns).</p>



<p>Read on to see how this works and how you could use it.</p>



<h2 class="wp-block-heading">Design aims: what database changes do I want to cover?</h2>



<p>The main “down” feature is temporarily diverting users accessing a tenant database while a change / move is being applied, but I also found some other added some extra diverts as well, which are listed below:</p>



<ul class="wp-block-list"><li><strong>Manual, application “down”:</strong> Allows an admin user to manually “down” the whole application. Every user apart from the admin who took the app “down” will be diverted to a page with an explanation and expected time when the app will be available.</li><li><strong>Manual, tenant database “down”:</strong> Allows an admin user to manually “down” a tenant database, thus diverting all users linked to the tenant database to a page saying, “stopped by admin”.&nbsp; Access to the tenant can be restored by an admin manually removing this this “down”.</li><li><strong>Tenant database Delete:</strong> This permanently diverts all users linked to the deleted tenant to a page saying, “the tenant is deleted”. This is a permanent divert, but it can be removed manually.&nbsp;</li></ul>



<p>Here is a diagram that shows how the“ down for maintenance” feature can be implemented in ASP.Net Core.</p>



<figure class="wp-block-image size-large"><a href="https://www.thereformedprogrammer.net/wp-content/uploads/2022/09/DownForMaintenance-flow.png"><img loading="lazy" decoding="async" width="1024" height="492" src="https://www.thereformedprogrammer.net/wp-content/uploads/2022/09/DownForMaintenance-flow-1024x492.png" alt="" class="wp-image-2771" srcset="https://www.thereformedprogrammer.net/wp-content/uploads/2022/09/DownForMaintenance-flow-1024x492.png 1024w, https://www.thereformedprogrammer.net/wp-content/uploads/2022/09/DownForMaintenance-flow-300x144.png 300w, https://www.thereformedprogrammer.net/wp-content/uploads/2022/09/DownForMaintenance-flow-768x369.png 768w, https://www.thereformedprogrammer.net/wp-content/uploads/2022/09/DownForMaintenance-flow.png 1145w" sizes="auto, (max-width: 1024px) 100vw, 1024px" /></a></figure>



<p>The rest of the article describes each step in “down for maintenance” feature, with references to the code in my AuthP library. The steps are:</p>



<ol class="wp-block-list" type="1"><li><a href="https://www.thereformedprogrammer.net/how-to-take-an-asp-net-core-web-site-down-for-maintenance/#1-startup-registering-the-services">Startup: Registering the services</a> </li><li><a href="https://www.thereformedprogrammer.net/how-to-take-an-asp-net-core-web-site-down-for-maintenance/#2-create-a-controller-web-apis-to-handle-the-down-for-maintenance">Adding a StatusController (or an equivalent Web API)</a> </li><li><a href="https://www.thereformedprogrammer.net/how-to-take-an-asp-net-core-web-site-down-for-maintenance/#3-using-the-isetremovestatus-service-to-set-remove-a-down-state">Using the ISetRemoveStatus service to set / remove a “down” state</a></li><li><a href="https://www.thereformedprogrammer.net/how-to-take-an-asp-net-core-web-site-down-for-maintenance/#4-understanding-the-down-for-maintenance-middleware">Understanding the “down for maintenance” middleware</a></li><li><a href="https://www.thereformedprogrammer.net/how-to-take-an-asp-net-core-web-site-down-for-maintenance/#5-other-things-to-consider-when-moving-a-tenant-database">Other things to consider when moving a tenant database</a></li></ol>



<h2 class="wp-block-heading">1. Startup: Registering the services</h2>



<p>There are two parts to setup the register the “down for maintenance” feature:</p>



<ul class="wp-block-list"><li>Registering the “down for maintenance” services</li><li>Adding the “down for maintenance” middleware.</li></ul>



<p>Both parts are applied in the ASP.NET Core Program / Startup code. First is the registering of the FileStore cache, which holds the various “down” statuses, and the <a href="https://github.com/JonPSmith/AuthPermissions.AspNetCore/blob/main/AuthPermissions.SupportCode/DownStatusCode/SetRemoveStatus.cs">SetRemoveStatus</a> class, which provide simple methods to add / remove “down” statuses. The code below is added in the startup section that registers services with the .NET dependency injection provider.</p>


<div class="wp-block-syntaxhighlighter-code "><pre class="brush: csharp; title: ; notranslate">
//previous code left out
builder.Services.AddDistributedFileStoreCache(options =&gt;
{
    options.WhichVersion = FileStoreCacheVersions.Class;
}, builder.Environment);

builder.Services.AddTransient
     &lt;ISetRemoveStatus, SetRemoveStatus&gt;(); 
</pre></div>


<p>The “down for maintenance” middleware is added in the “app” part of the ASP.NET Core startup code – see the highlighted line that adds the extra middleware.</p>


<div class="wp-block-syntaxhighlighter-code "><pre class="brush: csharp; highlight: [6]; title: ; notranslate">
var app = builder.Build();
//other app code left out

app.UseAuthentication();
app.UseAuthorization();
app.UseDownForMaintenance();

//other code left out
</pre></div>


<p>The important thing is that the “down for maintenance” middleware is added AFTER the UseAuthorization method. That’s because the “down for maintenance” middleware needs assess to the user’s claims.</p>



<h3 class="wp-block-heading">2. Create a Controller / web APIs to handle the “down for maintenance”</h3>



<p>You need pages / APIs to handle the following:</p>



<ul class="wp-block-list"><li>For the admin users<ul><li>Look at all the current “downs” and have the ability to remove any</li></ul><ul><li>Manually set the app “down” (with messages for the users)</li></ul><ul><li>Manually set a tenant “down”</li></ul></li><li>For diverted users<ul><li>App Down</li></ul><ul><li>Tenant down while being updated</li></ul><ul><li>Tenant down by admin</li></ul><ul><li>Tenant is deleted</li></ul></li></ul>



<p>In the <a href="https://github.com/JonPSmith/AuthPermissions.AspNetCore/tree/main/Example4.MvcWebApp.IndividualAccounts">Example4</a> web site (hierarchical tenant design) and <a href="https://github.com/JonPSmith/AuthPermissions.AspNetCore/tree/main/Example6.MvcWebApp.Sharding">Example6</a> web site (single-level + sharding) I have a controller called StatusController that contains the actions / pages listed above. Please look at the <a href="https://github.com/JonPSmith/AuthPermissions.AspNetCore/blob/main/Example4.MvcWebApp.IndividualAccounts/Controllers/StatusController.cs">Example4’s StatusController</a> for an example of what you need to create.</p>



<blockquote class="wp-block-quote is-layout-flow wp-block-quote-is-layout-flow"><p>NOTE: the diverted pages are hard coded into the <a href="https://github.com/JonPSmith/AuthPermissions.AspNetCore/blob/main/AuthPermissions.SupportCode/DownStatusCode/RedirectUsersViaStatusData.cs">RedirectUsersViaStatusData</a> class, while the controller’s name can be changed. If you want to have different urls for the diverted pages, then you need to copy the code and register your version of the RedirectUsersViaStatusData class.</p></blockquote>



<h3 class="wp-block-heading">3. Using the ISetRemoveStatus service to set / remove a “down” state</h3>



<p>The <a href="https://github.com/JonPSmith/AuthPermissions.AspNetCore/blob/main/AuthPermissions.SupportCode/DownStatusCode/SetRemoveStatus.cs">SetRemoveStatus</a> class contains the code to set, remove and display the “down” statues in the FileStore distributed cache. There are many types of diverts and this service creates the cache key which defines the type of divert that the user should be diverted to.</p>



<p>The AppDown divert is easy because it has one divert, but the tenant divert is more complex because a) it has three divert types and b) a divert is unique to a tenant. Each “down” entry in FileStore distributed database has a unique key name, which allows you to have multiple “downs” at once. And in the case of a tenant down the FileStore entry’s value is the tenant key, which is used to detect if the user is linked to a tenant that is in a “down” state.</p>



<p>The ISetRemoveStatus service makes it easy for the developer to wrap your change / move code with a “down” at the start and remove the “down”” at the end. The code below shows an example of how the ISetRemoveStatus service would work, with the “down” and remove “down” code highlighted.</p>


<div class="wp-block-syntaxhighlighter-code "><pre class="brush: csharp; highlight: [7,8,9,13]; title: ; notranslate">
&#x5B;HttpPost]
&#x5B;ValidateAntiForgeryToken]
&#x5B;HasPermission(Example6Permissions.MoveTenantDatabase)]
public async Task&lt;IActionResult&gt; MoveDatabase(
    ShardingSingleLevelTenantDto input)
{
    var removeDownAsync = await _upDownService
        .SetTenantDownWithDelayAsync(
              TenantDownVersions.Update, input.TenantId);
    var status = await _authTenantAdmin
        .MoveToDifferentDatabaseAsync(input.TenantId, 
              input.HasOwnDb, input.ConnectionName);
    await removeDownAsync();

    return status.HasErrors
        ? RedirectToAction(nameof(ErrorDisplay),
              new { errorMessage = status.GetAllErrors() })
        : RedirectToAction(nameof(Index), 
              new { message = status.Message });
}
</pre></div>


<p>As you can see you define what type of tenant change via the TenantDownVersions enums. The ISetRemoveStatus service handles creating the key name for the actual “down” entry in the FileStore distributed database. The “down” entry key string is designed to make finding / filtering the “down” values to work quickly, so the key string is a bit complex. The figure below shows the various combinations of key names to provide a) define what type of divert it is, and b) is unique name for each tenant.</p>



<figure class="wp-block-image size-full"><a href="https://www.thereformedprogrammer.net/wp-content/uploads/2022/09/DownForMaintenanceDivertKeys.png"><img loading="lazy" decoding="async" width="825" height="339" src="https://www.thereformedprogrammer.net/wp-content/uploads/2022/09/DownForMaintenanceDivertKeys.png" alt="" class="wp-image-2772" srcset="https://www.thereformedprogrammer.net/wp-content/uploads/2022/09/DownForMaintenanceDivertKeys.png 825w, https://www.thereformedprogrammer.net/wp-content/uploads/2022/09/DownForMaintenanceDivertKeys-300x123.png 300w, https://www.thereformedprogrammer.net/wp-content/uploads/2022/09/DownForMaintenanceDivertKeys-768x316.png 768w" sizes="auto, (max-width: 825px) 100vw, 825px" /></a></figure>



<blockquote class="wp-block-quote is-layout-flow wp-block-quote-is-layout-flow"><p>NOTE: For a tenant “down” entry the value is the tenant’s unique key, while for the AppDown the value contains a message, expected time, and UserId of the user that “downed” the whole app.</p></blockquote>



<h3 class="wp-block-heading">4. Understanding the “down for maintenance” middleware</h3>



<p>The middleware code (see <a href="https://github.com/JonPSmith/AuthPermissions.AspNetCore/blob/main/AuthPermissions.SupportCode/DownStatusCode/RedirectUsersViaStatusData.cs">RedirectUsersViaStatusData</a> class) is called on every HTTP request, and its job is to quickly let through a user if there isn’t an “down” status that effects the current user. There are three stages in this middleware to cover each part of the filter. They are:</p>



<blockquote class="wp-block-quote is-layout-flow wp-block-quote-is-layout-flow"><p>NOTE: I use the term <em>admin user</em> (see this link) to define a user who is managing the application. These types of users have a) access to high-level admin features and b) aren’t linked to a tenant.</p></blockquote>



<h4 class="wp-block-heading">STAGE 1: Allowed URLs get through</h4>



<p>The middleware allows two types of URLs.</p>



<ul class="wp-block-list"><li>You can login and logout. I added this when I “downed” the app and then rerun the app, at which point I couldn’t log to remove the “App down”!</li><li>I allow access to the Status controller. This allows an admin user and manually turn off a “down” if anything goes wrong.</li></ul>



<h4 class="wp-block-heading">STAGE 2: Handle AppDown</h4>



<p>The AppDown feature stops all users from using the application’s features, apart from the admin user that “downed” the app. This means that the admin user can check / fix the problem before removing the “down” on the app.</p>



<p>This feature is there for situations where the application’s software or data that can’t be updated by the normal deploy / migrate approach. You will rarely need the AppDown feature, but it’s there for emergencies.</p>



<h4 class="wp-block-heading">STAGE 3: Handle Tenant “down”</h4>



<p>The main usage of the middleware is to managing changes to a tenant’s data and the code uses the start of the “down” key to detect which types of divert is needed. The three types are:</p>



<ul class="wp-block-list"><li>Tenant down while being updated</li><li>Tenant down by an admin use (known as tenant “manual down”)</li><li>Tenant is deleted (this stops user trying a tenant that doesn’t exist)</li></ul>



<blockquote class="wp-block-quote is-layout-flow wp-block-quote-is-layout-flow"><p>NOTE: An example of the code to take a tenant “down” while being updated can be found in <a href="https://www.thereformedprogrammer.net/how-to-take-an-asp-net-core-web-site-down-for-maintenance/#3-using-the-isetremovestatus-service-to-set-remove-a-down-state">section 3</a>.</p></blockquote>



<p>The middleware code isn’t complex, but it’s a bit hard to follow so I have provided a flowchart to show how the three stages are handled. The important thing is the middleware is very fast (via using the FileStore distributed cache) at letting though users when no “down” is active.</p>



<figure class="wp-block-image size-full"><a href="https://www.thereformedprogrammer.net/wp-content/uploads/2022/09/DownForMaintenanceMiddlewareFlowChart.png"><img loading="lazy" decoding="async" width="736" height="734" src="https://www.thereformedprogrammer.net/wp-content/uploads/2022/09/DownForMaintenanceMiddlewareFlowChart.png" alt="" class="wp-image-2773" srcset="https://www.thereformedprogrammer.net/wp-content/uploads/2022/09/DownForMaintenanceMiddlewareFlowChart.png 736w, https://www.thereformedprogrammer.net/wp-content/uploads/2022/09/DownForMaintenanceMiddlewareFlowChart-300x300.png 300w, https://www.thereformedprogrammer.net/wp-content/uploads/2022/09/DownForMaintenanceMiddlewareFlowChart-150x150.png 150w" sizes="auto, (max-width: 736px) 100vw, 736px" /></a></figure>



<blockquote class="wp-block-quote is-layout-flow wp-block-quote-is-layout-flow"><p>NOTE: The <a href="https://github.com/JonPSmith/AuthPermissions.AspNetCore/blob/main/AuthPermissions.SupportCode/DownStatusCode/RedirectUsersViaStatusData.cs">RedirectUsersViaStatusData</a> class has comments starting with the three STAGES shown in the flowchart.</p></blockquote>



<h3 class="wp-block-heading">5. Other things to consider when moving a tenant database</h3>



<p>The tenant “Down for Maintenance” feature solves the most complex issue of ensuring that the tenant data isn’t accessed during the data is moved. But there are some extra issues you need to consider which the AuthP library already has solutions for. The issues are:</p>



<ol class="wp-block-list" type="1"><li>Updating the tenant user’s DataKey claims on a move</li><li>An internal hierarchical move needs to “down” two parts of the tenant data</li><li>The <a href="https://github.com/JonPSmith/AuthPermissions.AspNetCore/wiki/Multi-tenant:-Admin-access-tenant-data">admin access to tenant data</a> feature needs extra code in the middleware</li></ol>



<h4 class="wp-block-heading">5.1. Updating the tenant user’s DataKey claims on a move</h4>



<p>If you are moving a database in a <a href="https://www.thereformedprogrammer.net/part6-using-sharding-to-build-multi-tenant-apps-using-asp-net-core-and-ef-core/">sharding multi-tenant</a> application or <a href="https://github.com/JonPSmith/AuthPermissions.AspNetCore/wiki/Hierarchical-Multi-Tenant#moving-a-hierarchical-tenant">moving data in a hierarchical multi-tenant</a> application, then the information used by the user to access the tenant data will change. Therefore, you MUST update the information used by the user to access the tenant data.</p>



<p>In the AuthP library the user’s key to a tenant data is held in the user’s claims which makes the user access very fast (see <a href="https://www.thereformedprogrammer.net/advanced-techniques-around-asp-net-core-users-and-their-claims/#4-refreshing-the-logged-in-users-claims-on-an-event">this section</a> of an earlier article). But that means that the tenant claims need to be updated when the DataKey changes, and AuthP has feature that detects a change to the tenant DataKey parts and then makes sure all the logged-in users have their claims updated – see the AuthP “<a href="https://github.com/JonPSmith/AuthPermissions.AspNetCore/wiki/Update-claims-on-tenant-change">update claims on tenant change</a>” documentation on how this works.</p>



<h4 class="wp-block-heading">5.2. An internal hierarchical move needs to “down” two parts of the tenant data</h4>



<p>The AuthP hierarchical multi-tenant has a move feature where a section of the hierarchical data can be moved to another part of the hierarchy – known as the <em>parent</em> (see <a href="https://github.com/JonPSmith/AuthPermissions.AspNetCore/wiki/Hierarchical-Multi-Tenant#moving-a-hierarchical-tenant">this example</a>). In this case you need to “down” both the section to be moved and the section that the moved too.</p>



<p>For this reason, the SetTenantDownWithDelayAsync method has an optional parameter called parentId. If the parentId is not zero, then it will also “down” the parent during the hierarchical move. The code below shows the code, with the extra parentId parameter highlighted.</p>


<div class="wp-block-syntaxhighlighter-code "><pre class="brush: csharp; highlight: [4]; title: ; notranslate">
var removeDownAsync = await _upDownService
    .SetTenantDownWithDelayAsync(
        TenantDownVersions.Update, input.TenantId, 
        input.ParentId);
var status = await _authTenantAdmin
    .MoveHierarchicalTenantToAnotherParentAsync
        (input.TenantId, input.ParentId);
await removeDownAsync();

</pre></div>


<h4 class="wp-block-heading">5.3. The “admin access to tenant” data feature needs extra code in the middleware</h4>



<p>The AuthP library provides a feature that allows admin / support users (i.e. users not linked to a tenant) to temporary gain access to a tenant’s data (see the <a href="https://github.com/JonPSmith/AuthPermissions.AspNetCore/wiki/Multi-tenant:-Admin-access-tenant-data">admin access to tenant documentation</a> for more information).</p>



<p>This is implemented by using a cookie to contain the tenant DataKey, but the “down for maintenance” middleware doesn’t contain code to handle that. While giving admin user a way to access the tenant’s data is useful if a problem occurs in the change / move, but admin must be aware of any tenant change / move and not try to access that tenant (or turn off the “admin access to tenant” feature).</p>



<h2 class="wp-block-heading">Conclusions</h2>



<p>Back in 2015 I wrote an article about <a href="https://www.thereformedprogrammer.net/how-to-take-a-asp-net-mvc-web-site-down-for-maintenance/">how to take an ASP.NET MVC5 web site “Down for maintenance”</a> and now in 2022 I this article provides a version for an ASP.NET Core application. The basic approach of using middleware is the same, but this latest approach also contains features to handle multi-tenant applications.</p>



<p>Both the older ASP.NET MVC5 version and the latest ASP.NET Core are designed to be quick. This focus on high performance is because the code is run on every HTTP request. Both versions use a shared file to work across multiple instances of the web applications, for instance when you use Azure’s scale-out. But the new version has much more complex needs, with tenant-level “down” features, which required a more sophisticated approach, which is handled by the <a href="https://www.thereformedprogrammer.net/a-net-distributed-cache-with-a-25-nanosecond-read-time/">FileStore distributed cache</a> acting as a fast-read / slow-write database.</p>



<p>With this feature added to version 3.4.0 of the AuthP library you can safely manage tenants while users are accessing your multi-tenant application.</p>
]]></content:encoded>
					
					<wfw:commentRss>https://www.thereformedprogrammer.net/how-to-take-an-asp-net-core-web-site-down-for-maintenance/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>How to turn an ASP.NET Core appsettings.json file into a fast-read database</title>
		<link>https://www.thereformedprogrammer.net/how-to-turn-an-asp-net-core-appsettings-json-file-into-a-fast-read-database/</link>
					<comments>https://www.thereformedprogrammer.net/how-to-turn-an-asp-net-core-appsettings-json-file-into-a-fast-read-database/#respond</comments>
		
		<dc:creator><![CDATA[Jon P Smith]]></dc:creator>
		<pubDate>Thu, 15 Sep 2022 13:27:17 +0000</pubDate>
				<category><![CDATA[.NET Core]]></category>
		<category><![CDATA[ASP.NET Core]]></category>
		<category><![CDATA[Multi-tenant]]></category>
		<category><![CDATA[Sharding]]></category>
		<guid isPermaLink="false">https://www.thereformedprogrammer.net/?p=2752</guid>

					<description><![CDATA[This article describes a way to create a database using ASP.NET Core appsettings.json configuration feature. The &#8230; <a href="https://www.thereformedprogrammer.net/how-to-turn-an-asp-net-core-appsettings-json-file-into-a-fast-read-database/" class="more-link">Continue reading <span class="screen-reader-text">How to turn an ASP.NET Core appsettings.json file into a fast-read database</span></a>]]></description>
										<content:encoded><![CDATA[
<p>This article describes a way to create a database using ASP.NET Core appsettings.json configuration feature. The big benefit of this approach is the read is blistering fast, something like 1,000 times quicker than a SQL Server database query. The downside is the write is relatively slow (e.g. &gt;1 ms write) so this approach is best for situations where you have lots more reads than writes. I use this approach in an ASP.NET Core applications where certain data are read on every HTTP requests.</p>



<h2 class="wp-block-heading">TL;DR; – Summary of this article</h2>



<ul class="wp-block-list"><li>There is a way to use ASP.NET Core Configuration feature to create a type of database that has is much faster (~1,000 times faster) read than a typical database, but the write is slower than a database (small database = ~2 times slower, 400kb size database = ~10 times slower).</li><li>A good use for this type of database is where you have lots of reads and rare writes. I created this approach to handle a database query on every HTTP request.</li><li>This article describes the five steps to implement a database using ASP.NET Core Configuration feature.</li><li>There is a library called <a href="https://github.com/JonPSmith/Net.DistributedFileStoreCache">Net.DistributedFileStoreCache</a> (shortened to FileStore cache) which provides a pre-build version of this approach. You might like to refer to these articles:<ul><li>A .NET distributed cache with a ~25 nanosecond read time!</li></ul><ul><li>How to change/move databases on a live ASP.NET Core web site, which uses the FileStore cache as a database.</li></ul></li></ul>



<h2 class="wp-block-heading">Setting the scene – why did I use an appsettings.json file as a database?</h2>



<p>My <a href="https://github.com/JonPSmith/AuthPermissions.AspNetCore">AuthPermissions.AspNetCore</a> library (shortened to AuthP) provides back-end code for building <a href="https://www.gartner.com/en/information-technology/glossary/multitenancy">multi-tenant applications</a> using ASP.NET Core and EF Core, and in version 3 of the AuthP library I added support for <a href="https://www.thereformedprogrammer.net/part6-using-sharding-to-build-multi-tenant-apps-using-asp-net-core-and-ef-core/#setting-the-scene-what-is-sharding-and-why-it-is-useful">sharding</a>. To implement sharding I needed to create a connection string that points to the database server+database on every HTTP request from a tenant user.</p>



<p>Also, there were couple of extra features that I wanted my sharding implementation to support</p>



<ul class="wp-block-list"><li>Should work with Azure’s SQL Server elastic pools. Azure elastic pooling provides a cost-effective way to have lots of databases (see <a href="https://docs.microsoft.com/en-us/azure/azure-sql/database/elastic-pool-overview">this document</a> on why this is useful).</li><li>Support geographically placed database servers to improve performance when you have users that are geographically spread out.</li><li>Good security: the connection strings contains Username/Password of the servers, so for security reasons I store the <a href="https://docs.microsoft.com/en-us/azure/app-service/configure-common#configure-connection-strings">database strings in Azure</a>.</li></ul>



<p>The diagram below shows how the implementation of the sharding is changed to support these three extra features:</p>



<figure class="wp-block-image size-full"><a href="https://www.thereformedprogrammer.net/wp-content/uploads/2022/09/GeographicalSpreadServers.png"><img loading="lazy" decoding="async" width="690" height="369" src="https://www.thereformedprogrammer.net/wp-content/uploads/2022/09/GeographicalSpreadServers.png" alt="" class="wp-image-2753" srcset="https://www.thereformedprogrammer.net/wp-content/uploads/2022/09/GeographicalSpreadServers.png 690w, https://www.thereformedprogrammer.net/wp-content/uploads/2022/09/GeographicalSpreadServers-300x160.png 300w" sizes="auto, (max-width: 690px) 100vw, 690px" /></a></figure>



<p>The sharding code gets the sharding data for a specific tenant which contains the name of the connection string linked to a database server and the name of the database on that database server. From these two parts it forms the composite connection string needed to access the tenant database. This isn’t that complex procedure, but it does to read in the sharding data (name of connection string and name of the database) on every HTPP request for a tenant user.</p>



<p>I could go with a database access, but I’m really trying to make this library very fast, so I started to look at ASP.NET Core Configuration features i.e. appsettings.json and IOptions because I know that the read of configuration data is really fast because the data is cached by ASP.NET Code configuration code.</p>



<p>Therefore, I created a appsettings.json type file which I could update and then used the Configuration <code>IOptionsSnapshot&lt;T&gt;</code> method to get the latest data my settings file. (see Microsoft <a href="https://docs.microsoft.com/en-us/aspnet/core/fundamentals/configuration/optionsuse-ioptionssnapshot-to-read-updated-data">Options Pattern docs</a> for more info on this type of read). The diagram below shows the whole process.</p>



<figure class="wp-block-image size-full"><a href="https://www.thereformedprogrammer.net/wp-content/uploads/2022/09/ShardingSettingsSteps.png"><img loading="lazy" decoding="async" width="761" height="520" src="https://www.thereformedprogrammer.net/wp-content/uploads/2022/09/ShardingSettingsSteps.png" alt="" class="wp-image-2754" srcset="https://www.thereformedprogrammer.net/wp-content/uploads/2022/09/ShardingSettingsSteps.png 761w, https://www.thereformedprogrammer.net/wp-content/uploads/2022/09/ShardingSettingsSteps-300x205.png 300w" sizes="auto, (max-width: 761px) 100vw, 761px" /></a></figure>



<p>This might seem very complex, but it’s:</p>



<ol class="wp-block-list" type="1"><li>Very fast: something like 1,000 times quicker than using a database access.</li><li>Secure: The connection string isn’t in any of your code or your claims.</li><li>Doesn’t use a database: This means your tenant databases won’t be slowed by lots of small queries.</li></ol>



<p>The rest of this article describes the steps needed to create a generic fast-read database by using ASP.NET Core Configuration feature. In the steps I show examples from the sharding feature described above, with links to the code in the AuthP’s open-source repo. That way you have working code examples of how I used this approach.</p>



<h2 class="wp-block-heading">Steps to turn an appsettings.json file into a fast-read database</h2>



<blockquote class="wp-block-quote is-layout-flow wp-block-quote-is-layout-flow"><p>NOTE: I refer to the json file which will be used as database as the <em>database json file</em> in this article.</p></blockquote>



<p>The steps are to implementing a database json file are:</p>



<ol class="wp-block-list" type="1"><li>Create a json file to act as a database</li><li>Make sure the database json file isn’t overwritten</li><li>Register the database json file on startup</li><li>Write to the database json file within a distributed lock</li><li>Use <code>IOptionsSnapshot&lt;T&gt;</code> to read the database json file</li></ol>



<h3 class="wp-block-heading">1. Define a json file to act as a database</h3>



<p>The first thing to do is work out what data you need to store the database json file for your application. Once you have decided on the data you need, then you must implement the dats by using class(es) that contain parameters that can be serialized / deserialized to json by the .NET Text.Json library.</p>



<p>For my sharding settings I have a List of the class called <a href="https://github.com/JonPSmith/AuthPermissions.AspNetCore/blob/main/AuthPermissions.AspNetCore/Services/DatabaseInformation.cs">DatabaseInformation</a>, which has four properties (all of type string) that define a specific settings of each sharding server+database. The code below shows the type of json the sharding settings file would contain.</p>


<div class="wp-block-syntaxhighlighter-code "><pre class="brush: jscript; title: ; notranslate">
{
  &quot;ShardingDatabases&quot;: &#x5B;
    {
      &quot;Name&quot;: &quot;ShardWest1&quot;,
      &quot;DatabaseName&quot;: &quot;West1&quot;,
      &quot;ConnectionName&quot;: &quot;WestServer&quot;,
      &quot;DatabaseType&quot;: &quot;SqlServer&quot;
    },
    {
      &quot;Name&quot;: &quot;ShardWest2&quot;,
      //… rest of the content has been left out 
    }
  ]
}
</pre></div>


<blockquote class="wp-block-quote is-layout-flow wp-block-quote-is-layout-flow"><p>NOTE: The name of the section / array used in your database json file must be unique across all the configuration json files.</p></blockquote>



<h3 class="wp-block-heading">2. Make sure the database json file isn’t overwritten</h3>



<p>A normal appsettings.json file gets overwritten when an application is deployed. But because we want to use json file as a database, then you don’t want the file to overwritten. I do two things to make sure the database json file isn’t overwritten.</p>



<p>First, I use a filename which includes the environment name, e.g. Debug, Staging, Production, so my implementation the filename is $“shardingsettings.{EnvironmentName}.json”. This means that filename used developing the application in Debug mode can’t overwrite your Production database json file.</p>



<p>But the most important thing to do (but easy to forget) is to set the file’s “Copy to Output Director” property to “Do not copy”. This stops the database json file being copied in your deployment. You can manually set this via file properties, but I prefer to add a ItemGroup to the ASP.NET Core .csproj file, as shown below.</p>


<div class="wp-block-syntaxhighlighter-code "><pre class="brush: plain; title: ; notranslate">
&lt;ItemGroup&gt;
	&lt;Content Update=&quot;shardingsettings.Production.json&quot;&gt;
		&lt;CopyToOutputDirectory&gt;Never&lt;/CopyToOutputDirectory&gt;
	&lt;/Content&gt;
&lt;/ItemGroup&gt;
</pre></div>


<h3 class="wp-block-heading">3. Register the database json file on startup</h3>



<p>There are two parts to registering database json file on startup. They are:</p>



<ol class="wp-block-list" type="1"><li>Register the database json file to the ASP.NET Core’s Configuration</li><li>Register your IOptions access via the Configure&lt;T&gt; service</li></ol>



<h4 class="wp-block-heading">3.1 Register the database json file to the ASP.NET Core’s Configuration</h4>



<p>To register your database json file to be part of the Configuration you use the AddJsonFile method. The code below goes in the Program class and registers my shardingsettings file.</p>


<div class="wp-block-syntaxhighlighter-code "><pre class="brush: csharp; title: ; notranslate">
var shardingFileName = 
    $“shardingsettings.{builder.Environment.EnvironmentName}.json”
builder.Configuration.AddJsonFile(shardingFileName, 
      optional: true, reloadOnChange: true); 
</pre></div>


<p>You need to think what happens when you first deploy using a database json file. In this case I set the optional parameter to true, which means the application can start without the file. If you use <code>IOptionsSnapshot&lt;T&gt;</code> (see next subsection on IOptionsSnapshot&lt;T&gt;) it will return null if the database json file isn’t there or doesn’t have any json in it, but once you create the file the application will start tracking the file and the <code>IOptionsSnapshot&lt;T&gt;</code> Value will be non-null.</p>



<blockquote class="wp-block-quote is-layout-flow wp-block-quote-is-layout-flow"><p>NOTE: The other approach is set the optional parameter to false and ensure that there is a json file exists. But if the optional parameter is false, then if the json file isn’t there, then the application will fail on startup. This means you need to create on startup if no file exists. &nbsp;</p></blockquote>



<h4 class="wp-block-heading">3.2 Register your IOptions access via the Configure&lt;T&gt; service</h4>



<p>You must register a Configure&lt;T&gt; service, where T is the class which defines the json content of the database json file, to allow you use the IOptions access to the data inside. This is done by registering a class to a specific part of the <a href="https://docs.microsoft.com/en-us/aspnet/core/fundamentals/configuration/options#bind-hierarchical-configuration">configuration setting via a class</a>.</p>



<p>In my shardingsettings file I use a collection of data, so my options class looks like this:</p>


<div class="wp-block-syntaxhighlighter-code "><pre class="brush: csharp; title: ; notranslate">
public class ShardingSettingsOption
{
    public List&lt;DatabaseInformation&gt; 
          ShardingDatabases { get; set; }
} 
</pre></div>


<p>And configured by the code below, which will look for a json array in all the registered json files with the name of ShardingDatabases.</p>


<div class="wp-block-syntaxhighlighter-code "><pre class="brush: csharp; title: ; notranslate">
builder.Services.Configure&lt;ShardingSettingsOption&gt;
      (builder.Configuration);
</pre></div>


<h3 class="wp-block-heading">4. Write to the database json file within a distributed lock</h3>



<p>To update the data in the database json file you need to read in the current json, add your change and write back out. This read-&gt;update-&gt;write process is fairly easy to implement – Have a look at my <a href="https://github.com/JonPSmith/AuthPermissions.AspNetCore/blob/main/AuthPermissions.SupportCode/ShardingServices/AccessDatabaseInformation.cs">AccessDatabaseInformation</a> class for an example of what this would look like.</p>



<p>While the update part of the code is straightforward, we do need to handle simultaneous updates, because one update could overwrite another update. This type of simultaneous updates is rare, but because they can occur, we need to handle this. This means we need to wrap the update process with some code that would stop other updates from running until the current update has finished.</p>



<p>If you are only running one instance of your ASP.NET Core application, then you could use a .NET <a href="https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/statements/lock">lock</a>. But my library is designed with high performance applications where multiple instances of the application are running at the same time (Azure calls this <em>scale out</em>), so I need a distributed lock. I use an excellent library called <a href="https://github.com/madelson/DistributedLock">DistributedLock</a>. &nbsp;</p>



<p>The DistributedLock library uses a global resource, such as a database, to form a lock across all the running instances. The code below (adapted from the <a href="https://github.com/madelson/DistributedLock#acquire">Acquire section of the DistributedLock Readme</a>)</p>


<div class="wp-block-syntaxhighlighter-code "><pre class="brush: csharp; title: ; notranslate">
var myDistributedLock = 
     new SqlDistributedLock(name, connectionString); 
using (myDistributedLock.Acquire())
{
	//Run the read-&gt;update-&gt;write process within this lock
} // this releases the lock
</pre></div>


<h3 class="wp-block-heading">5. Use IOptionsSnapshot&lt;T&gt; to read the database json file</h3>



<p>Finally, you can access the information in the database json file via ASP.NET Core’s <code>IOptionsSnapshot&lt;T&gt;</code> method. The code below is a simplified version of the AuthP’s <a href="https://github.com/JonPSmith/AuthPermissions.AspNetCore/blob/main/AuthPermissions.AspNetCore/Services/ShardingConnections.cs">ShardingConnections constructor</a>. When the ShardingConnections service is created it uses the <code>IOptionsSnapshot&lt;T&gt;</code> method to get the data in the database json file, in this case my sharding settings file. (see Microsoft <a href="https://docs.microsoft.com/en-us/aspnet/core/fundamentals/configuration/optionsuse-ioptionssnapshot-to-read-updated-data">Options Pattern docs</a> for more info).</p>



<p>As I showed in the <a href="https://www.thereformedprogrammer.net/how-to-turn-an-asp-net-core-appsettings-json-file-into-a-fast-read-database/#setting-the-scene-why-did-i-use-an-appsettings-json-file-as-a-database">setting the scene section</a> using the <code>IOptionsSnapshot&lt;T&gt;</code> method in the code below reads in the current sharding settings.</p>


<div class="wp-block-syntaxhighlighter-code "><pre class="brush: csharp; title: ; notranslate">
private readonly ShardingSettingsOption _shardingSettings;
public ShardingConnections(
     IOptionsSnapshot&lt;ShardingSettingsOption&gt;
     shardingSettingsAccessor, AuthPermissionsOptions options,
     … other parameters left out)
{
    _shardingSettings = shardingSettingsAccessor.Value
        //If no sharding settings file, 
        //then add the default sharding setting
        ?? new List&lt;DatabaseInformation&gt;
       {
           DatabaseInformation.FormDefaultDatabaseInfo(options)
       };
}
</pre></div>


<p>Note that if the sharding settings file doesn’t exist the <code>IOptionsSnapshot&lt;T&gt;</code> Value will be null, and you need to work out in that case. You could return the null, but often the best solution is to create an empty collection or similar. In the AuthP’s sharding settings shown above a new deployment always has a single, default DatabaseInformation, which is formed from the multi-tenant setup information contains.</p>



<h2 class="wp-block-heading">Conclusions</h2>



<p>Creating a fast-read / slow-write database using ASP.NET Core’s Configuration / <code>IOptionsSnapshot&lt;T&gt;</code> might not be the first approach you would think of for creating a database, but in situations where you want a very fast read where the data changes rarely. For instance, the AuthP sharding feature is a very good fit to this approach because it needs two read queries (one to get the sharing data and another to get the database server connection string) on every HTTP tenant user request read with rare changes to the sharding data.</p>



<p>I also created a library called <a href="https://github.com/JonPSmith/Net.DistributedFileStoreCache">Net.DistributedFileStoreCache</a> (shortened to FileStore cache) which implement a <a href="https://docs.microsoft.com/en-us/aspnet/core/performance/caching/distributed">Distributed cache</a>. This library uses the approach that ASP.NET Core Configuration / IOptionsSnapshot&lt;T&gt; &nbsp;but uses .NET’s <a href="https://docs.microsoft.com/en-us/dotnet/api/system.io.filesystemwatcher">FileSystemWatcher</a> class instead to IOptionsSnapshot&lt;T&gt;. The FileStore cache has a ~25 ns. read time and a write time &gt; 1 ms. – see the FileStore cache <a href="https://github.com/JonPSmith/Net.DistributedFileStoreCache#performance-figures">full performance figures here</a>.</p>



<p>I use the FileStore cache in database mode in the article “How to change / move databases on a live ASP.NET Core web site” because this feature needs multiple reads on every HTTP request. Using FileStore cache removes the extra ~1 ms. that a database might have.</p>



<p>If nothing else you have learnt more about ASP.NET Core’s Configuration / IOptionsSnapshot&lt;T&gt;, and you have learnt a new way to store data with a different performance from a normal database.</p>



<p>Happy coding.</p>
]]></content:encoded>
					
					<wfw:commentRss>https://www.thereformedprogrammer.net/how-to-turn-an-asp-net-core-appsettings-json-file-into-a-fast-read-database/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
	</channel>
</rss>
