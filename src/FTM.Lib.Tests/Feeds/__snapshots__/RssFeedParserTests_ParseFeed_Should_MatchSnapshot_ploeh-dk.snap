{
  "Id": "https://blog.ploeh.dk",
  "Website": "https://blog.ploeh.dk",
  "Title": "ploeh blog",
  "LastUpdatedTime": "2025-06-09T14:03:02+02:00",
  "Description": "danish software design",
  "Language": "en-us",
  "Items": [
    {
      "FeedId": "https://blog.ploeh.dk",
      "ItemId": "https://blog.ploeh.dk/2025/06/09/song-recommendations-from-combinators",
      "Title": "Song recommendations from combinators",
      "PublishDate": "2025-06-09T14:02:00+02:00",
      "Summary": "\n\n\n<div id=\"post\">\n    <p>\n        <em>Interleaving impure actions with pure functions. Not really functional programming.</em>\n    </p>\n    <p>\n        This article is part of a larger article series about <a href=\"/2025/04/07/alternative-ways-to-design-with-functional-programming\">alternative ways to design with functional programming</a>, particularly when faced with massive data loads. In the previous few articles, you saw <a href=\"/2018/11/19/functional-architecture-a-definition\">functional architecture</a> at its apparent limit. With sufficiently large data sizes, the <a href=\"/2020/03/02/impureim-sandwich\">Impureim Sandwich</a> pattern starts to buckle. That's really not an indictment of that pattern; only an observation that no design pattern applies universally.\n    </p>\n    <p>\n        In this and the next few articles, we'll instead look at a more pragmatic option. In this article I'll discuss the general idea, and follow up in other articles with examples in three different languages.\n    </p>\n    <p>\n        In this overall article series, I'm using <a href=\"https://tyrrrz.me/\">Oleksii Holub</a>'s inspiring article <a href=\"https://tyrrrz.me/blog/pure-impure-segregation-principle\">Pure-Impure Segregation Principle</a> as an outset for the code example. Previous articles in this article series have already covered the basics, but the gist of it is a song recommendation service that uses past play information ('scrobbles') to suggest new songs to a user.\n    </p>\n    <h3 id=\"ae576d7ff83c4cf8b5ce96b861d3cad0\">\n        Separating pure functions from impure composition <a href=\"#ae576d7ff83c4cf8b5ce96b861d3cad0\">#</a>\n    </h3>\n    <p>\n        In the original article, Oleksii Holub suggests a way to separate <a href=\"https://en.wikipedia.org/wiki/Pure_function\">pure functions</a> from impure actions: We may extract as much pure code from the overall algorithm as possible, but we're still left with pure functions and impure actions mixed together.\n    </p>\n    <p>\n        Here's my reproduction of that suggestion, with trivial modifications:\n    </p>\n    <p>\n        <pre><span style=\"color:green;\">//&nbsp;Pure</span>\n<span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:blue;\">static</span>&nbsp;<span style=\"color:#2b91af;\">IReadOnlyList</span>&lt;<span style=\"color:blue;\">int</span>&gt;&nbsp;<span style=\"color:#74531f;\">HandleOwnScrobbles</span>(<span style=\"color:#2b91af;\">IReadOnlyCollection</span>&lt;<span style=\"color:#2b91af;\">Scrobble</span>&gt;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">scrobbles</span>)&nbsp;=&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">scrobbles</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.<span style=\"font-weight:bold;color:#74531f;\">OrderByDescending</span>(<span style=\"font-weight:bold;color:#1f377f;\">s</span>&nbsp;=&gt;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">s</span>.ScrobbleCount)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.<span style=\"font-weight:bold;color:#74531f;\">Take</span>(100)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.<span style=\"font-weight:bold;color:#74531f;\">Select</span>(<span style=\"font-weight:bold;color:#1f377f;\">s</span>&nbsp;=&gt;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">s</span>.Song.Id)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.<span style=\"font-weight:bold;color:#74531f;\">ToArray</span>();\n \n<span style=\"color:green;\">//&nbsp;Pure</span>\n<span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:blue;\">static</span>&nbsp;<span style=\"color:#2b91af;\">IReadOnlyList</span>&lt;<span style=\"color:blue;\">string</span>&gt;&nbsp;<span style=\"color:#74531f;\">HandleOtherListeners</span>(<span style=\"color:#2b91af;\">IReadOnlyCollection</span>&lt;<span style=\"color:#2b91af;\">User</span>&gt;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">users</span>)&nbsp;=&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">users</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.<span style=\"font-weight:bold;color:#74531f;\">Where</span>(<span style=\"font-weight:bold;color:#1f377f;\">u</span>&nbsp;=&gt;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">u</span>.TotalScrobbleCount&nbsp;&gt;=&nbsp;10_000)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.<span style=\"font-weight:bold;color:#74531f;\">OrderByDescending</span>(<span style=\"font-weight:bold;color:#1f377f;\">u</span>&nbsp;=&gt;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">u</span>.TotalScrobbleCount)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.<span style=\"font-weight:bold;color:#74531f;\">Take</span>(20)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.<span style=\"font-weight:bold;color:#74531f;\">Select</span>(<span style=\"font-weight:bold;color:#1f377f;\">u</span>&nbsp;=&gt;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">u</span>.UserName)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.<span style=\"font-weight:bold;color:#74531f;\">ToArray</span>();\n \n<span style=\"color:green;\">//&nbsp;Pure</span>\n<span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:blue;\">static</span>&nbsp;<span style=\"color:#2b91af;\">IReadOnlyList</span>&lt;<span style=\"color:#2b91af;\">Song</span>&gt;&nbsp;<span style=\"color:#74531f;\">HandleOtherScrobbles</span>(<span style=\"color:#2b91af;\">IReadOnlyCollection</span>&lt;<span style=\"color:#2b91af;\">Scrobble</span>&gt;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">scrobbles</span>)&nbsp;=&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">scrobbles</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.<span style=\"font-weight:bold;color:#74531f;\">Where</span>(<span style=\"font-weight:bold;color:#1f377f;\">s</span>&nbsp;=&gt;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">s</span>.Song.IsVerifiedArtist)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.<span style=\"font-weight:bold;color:#74531f;\">OrderByDescending</span>(<span style=\"font-weight:bold;color:#1f377f;\">s</span>&nbsp;=&gt;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">s</span>.Song.Rating)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.<span style=\"font-weight:bold;color:#74531f;\">Take</span>(10)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.<span style=\"font-weight:bold;color:#74531f;\">Select</span>(<span style=\"font-weight:bold;color:#1f377f;\">s</span>&nbsp;=&gt;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">s</span>.Song)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.<span style=\"font-weight:bold;color:#74531f;\">ToArray</span>();\n \n<span style=\"color:green;\">//&nbsp;Pure</span>\n<span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:blue;\">static</span>&nbsp;<span style=\"color:#2b91af;\">IReadOnlyList</span>&lt;<span style=\"color:#2b91af;\">Song</span>&gt;&nbsp;<span style=\"color:#74531f;\">FinalizeRecommendations</span>(<span style=\"color:#2b91af;\">IReadOnlyList</span>&lt;<span style=\"color:#2b91af;\">Song</span>&gt;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">songs</span>)&nbsp;=&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">songs</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.<span style=\"font-weight:bold;color:#74531f;\">OrderByDescending</span>(<span style=\"font-weight:bold;color:#1f377f;\">s</span>&nbsp;=&gt;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">s</span>.Rating)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.<span style=\"font-weight:bold;color:#74531f;\">Take</span>(200)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.<span style=\"font-weight:bold;color:#74531f;\">ToArray</span>();\n \n<span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:blue;\">async</span>&nbsp;<span style=\"color:#2b91af;\">Task</span>&lt;<span style=\"color:#2b91af;\">IReadOnlyList</span>&lt;<span style=\"color:#2b91af;\">Song</span>&gt;&gt;&nbsp;<span style=\"font-weight:bold;color:#74531f;\">GetRecommendationsAsync</span>(<span style=\"color:blue;\">string</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">userName</span>)\n{\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:green;\">//&nbsp;Impure</span>\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">var</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">scrobbles</span>&nbsp;=&nbsp;<span style=\"color:blue;\">await</span>&nbsp;_songService.<span style=\"font-weight:bold;color:#74531f;\">GetTopScrobblesAsync</span>(<span style=\"font-weight:bold;color:#1f377f;\">userName</span>);\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:green;\">//&nbsp;Pure</span>\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">var</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">songIds</span>&nbsp;=&nbsp;<span style=\"color:#74531f;\">HandleOwnScrobbles</span>(<span style=\"font-weight:bold;color:#1f377f;\">scrobbles</span>);\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">var</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">recommendationCandidates</span>&nbsp;=&nbsp;<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">List</span>&lt;<span style=\"color:#2b91af;\">Song</span>&gt;();\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#8f08c4;\">foreach</span>&nbsp;(<span style=\"color:blue;\">var</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">songId</span>&nbsp;<span style=\"font-weight:bold;color:#8f08c4;\">in</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">songIds</span>)\n&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:green;\">//&nbsp;Impure</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">var</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">otherListeners</span>&nbsp;=&nbsp;<span style=\"color:blue;\">await</span>&nbsp;_songService\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.<span style=\"font-weight:bold;color:#74531f;\">GetTopListenersAsync</span>(<span style=\"font-weight:bold;color:#1f377f;\">songId</span>);\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:green;\">//&nbsp;Pure</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">var</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">otherUserNames</span>&nbsp;=&nbsp;<span style=\"color:#74531f;\">HandleOtherListeners</span>(<span style=\"font-weight:bold;color:#1f377f;\">otherListeners</span>);\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#8f08c4;\">foreach</span>&nbsp;(<span style=\"color:blue;\">var</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">otherUserName</span>&nbsp;<span style=\"font-weight:bold;color:#8f08c4;\">in</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">otherUserNames</span>)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:green;\">//&nbsp;Impure</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">var</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">otherScrobbles</span>&nbsp;=&nbsp;<span style=\"color:blue;\">await</span>&nbsp;_songService\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.<span style=\"font-weight:bold;color:#74531f;\">GetTopScrobblesAsync</span>(<span style=\"font-weight:bold;color:#1f377f;\">otherUserName</span>);\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:green;\">//&nbsp;Pure</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">var</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">songsToRecommend</span>&nbsp;=&nbsp;<span style=\"color:#74531f;\">HandleOtherScrobbles</span>(<span style=\"font-weight:bold;color:#1f377f;\">otherScrobbles</span>);\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">recommendationCandidates</span>.<span style=\"font-weight:bold;color:#74531f;\">AddRange</span>(<span style=\"font-weight:bold;color:#1f377f;\">songsToRecommend</span>);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;}\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:green;\">//&nbsp;Pure</span>\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#8f08c4;\">return</span>&nbsp;<span style=\"color:#74531f;\">FinalizeRecommendations</span>(<span style=\"font-weight:bold;color:#1f377f;\">recommendationCandidates</span>);\n}</pre>\n    </p>\n    <p>\n        As Oleksii Holub writes,\n    </p>\n    <blockquote>\n        <p>\n            \"However, instead of having one cohesive element to reason about, we ended up with multiple fragments, each having no meaning or value of their own. While unit testing of individual parts may have become easier, the benefit is very questionable, as it provides no confidence in the correctness of the algorithm as a whole.\"\n        </p>\n    </blockquote>\n    <p>\n        I agree with that assessment, but still find it warranted to pursue the idea a little further. After all, my goal with this overall article series isn't to be prescriptive, but rather descriptive. By presenting and comparing alternatives, we become aware of more options. This, hopefully, helps us choose the 'right tool for the job'.\n    </p>\n    <h3 id=\"eba5c36720814300b4a4127359569b46\">\n        Triple-decker sandwich? <a href=\"#eba5c36720814300b4a4127359569b46\">#</a>\n    </h3>\n    <p>\n        If we look closer at this alternative, however, we find that we only need to deal with three impure actions. We might, then, postulate that this is an <a href=\"/2023/10/09/whats-a-sandwich\">expanded sandwich</a> - a triple-decker sandwich, if you will.\n    </p>\n    <p>\n        To be clear, I don't find this a reasonable argument. Even if you accept expanding the sandwich metaphor to add a pure validation step, the number of layers, and the structure of the sandwich would still be known at compile time. You may start at the impure boundary, then phase into pure validation, return to another impure step to gather data, call your 'main' pure function, and finally write the result to some kind of output. To borrow a figure from the <a href=\"/2023/10/09/whats-a-sandwich\">What's a sandwich?</a> article:\n    </p>\n    <p>\n        <img src=\"/content/binary/pure-impure-pure-impure-box.png\" alt=\"A box with green, red, green, and red horizontal tiers.\">\n    </p>\n    <p>\n        On the other hand, this isn't what the above code suggestion does. The problem with the song recommendation algorithm is that the impure actions cascade. While we start with a single impure out-of-process query, we then use the result of that to loop over, and perform <em>n</em> more queries. This, in fact, happens again, nested in the outer loop, so in terms of network calls, we're looking at an <em>O(n<sup>2</sup>)</em> algorithm.\n    </p>\n    <p>\n        We can actually be more precise than that, because the 'outer' queries actually limit their result sets. The first query only considers the top 100 results, so we know that <code>GetTopListenersAsync</code> is going to be called at most 100 times. The result of this call is again limited to the top 20, so that the inner calls to <code>GetTopScrobblesAsync</code> run at most 20 * 100 = 2,000 times. In all, the upper limit is 1 + 100 + 2,000 = 2,101 network calls. (Okay, so really, this is just an <em>O(1)</em> algorithm, although <em>1 ~ 2,101</em>.)\n    </p>\n    <p>\n        Not that that isn't going to take a bit of time.\n    </p>\n    <p>\n        All that said, it's not execution time that concerns me in this context. Assume that the algorithm is already as optimal as possible, and that those 2,101 network calls are necessary. What rather concerns me here is how to organize the code in a way that's as maintainable as possible. As usual, when that's the main concern, I'll remind the reader to consider the example problem as a stand-in for a more complicated problem. Even Oleksii Holub's original code example is only some fifty-odd lines of code, which in itself hardly warrants all the hand-wringing we're currently subjecting it to.\n    </p>\n    <p>\n        Rather, what I'd like to address is the dynamic back-and-forth between pure function and impure action. Each of these thousands of out-of-process calls are non-deterministic. If you're tasked with maintaining or editing this algorithm, your brain will be taxed by all that unpredictable behaviour. Many subtle bugs lurk there.\n    </p>\n    <p>\n        The more we can pull the code towards pure functions the better, because <a href=\"/2021/07/28/referential-transparency-fits-in-your-head\">referential transparency fits in your head</a>.\n    </p>\n    <p>\n        So, to be explicit, I don't consider this kind of composition as an expanded Impureim Sandwich.\n    </p>\n    <h3 id=\"4903416bdf924a29a6f6043b178da4df\">\n        Standard combinators <a href=\"#4903416bdf924a29a6f6043b178da4df\">#</a>\n    </h3>\n    <p>\n        Is it possible to somehow improve, even just a little, on the above suggestion? Can we somehow make it look a little 'more functional'?\n    </p>\n    <p>\n        We could use some standard combinators, like <a href=\"/2022/03/28/monads\">monadic <em>bind</em></a>, <a href=\"/2024/11/11/traversals\">traversals</a>, and so on.\n    </p>\n    <p>\n        To be honest, for the specific song-recommendations example, the benefit is marginal at best, but doing it would still demonstrate a particular technique. We'd be able to get rid of the local mutation of <code>recommendationCandidates</code>, but that's about it.\n    </p>\n    <p>\n        Even so, refactoring to self-contained expressions makes other refactoring easier. As a counter-example, imagine that you'd like to extract the inner <code>foreach</code> loop in the above code example to a helper method.\n    </p>\n    <p>\n        <pre><span style=\"color:blue;\">private</span>&nbsp;<span style=\"color:blue;\">async</span>&nbsp;<span style=\"color:#2b91af;\">Task</span>&nbsp;<span style=\"font-weight:bold;color:#74531f;\">CollectOtherUserTopScrobbles</span>(\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">List</span>&lt;<span style=\"color:#2b91af;\">Song</span>&gt;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">recommendationCandidates</span>,\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">IReadOnlyList</span>&lt;<span style=\"color:blue;\">string</span>&gt;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">otherUserNames</span>)\n{\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#8f08c4;\">foreach</span>&nbsp;(<span style=\"color:blue;\">var</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">otherUserName</span>&nbsp;<span style=\"font-weight:bold;color:#8f08c4;\">in</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">otherUserNames</span>)\n&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:green;\">//&nbsp;Impure</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">var</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">otherScrobbles</span>&nbsp;=&nbsp;<span style=\"color:blue;\">await</span>&nbsp;_songService\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.<span style=\"font-weight:bold;color:#74531f;\">GetTopScrobblesAsync</span>(<span style=\"font-weight:bold;color:#1f377f;\">otherUserName</span>);\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:green;\">//&nbsp;Pure</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">var</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">songsToRecommend</span>&nbsp;=&nbsp;<span style=\"color:#74531f;\">HandleOtherScrobbles</span>(<span style=\"font-weight:bold;color:#1f377f;\">otherScrobbles</span>);\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">recommendationCandidates</span>.<span style=\"font-weight:bold;color:#74531f;\">AddRange</span>(<span style=\"font-weight:bold;color:#1f377f;\">songsToRecommend</span>);\n&nbsp;&nbsp;&nbsp;&nbsp;}\n}</pre>\n    </p>\n    <p>\n        The call site would then look like this:\n    </p>\n    <p>\n        <pre><span style=\"color:green;\">//&nbsp;Pure</span>\n<span style=\"color:blue;\">var</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">otherUserNames</span>&nbsp;=&nbsp;<span style=\"color:#74531f;\">HandleOtherListeners</span>(<span style=\"font-weight:bold;color:#1f377f;\">otherListeners</span>);\n \n<span style=\"color:green;\">//&nbsp;Impure</span>\n<span style=\"color:blue;\">await</span>&nbsp;<span style=\"font-weight:bold;color:#74531f;\">CollectOtherUserTopScrobbles</span>(<span style=\"font-weight:bold;color:#1f377f;\">recommendationCandidates</span>,&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">otherUserNames</span>);</pre>\n    </p>\n    <p>\n        In this specific example, such a refactoring isn't too difficult, but it's more complicated than it could be. Because of state mutation, we have to pass the object to be modified, in this case <code>recommendationCandidates</code>, along as a method argument. Here, there's only one, but if you have code where you change the state of two objects, you'd have to pass two extra parameters, and so on.\n    </p>\n    <p>\n        You've most likely worked in a real code base where you have tried to extract a helper method, only to discover that it's so incredibly tangled with the objects that it modifies that you need a long parameter list. What should have been a simplification is in danger of making everything worse.\n    </p>\n    <p>\n        On the other hand, self-contained expressions, even if, as in this case, they're non-deterministic, don't mutate state. In general, this tends to make it easier to extract subexpressions as helper methods, if only because they are less coupled to the rest of the code. They may required inputs as parameters, but at least you don't have to pass around objects to be modified.\n    </p>\n    <p>\n        Thus, the reason I find it worthwhile to include articles about this kind of refactoring is that, since it demonstrates how to refactor to a more expression-based style, you may be able to extrapolate to your own context. And who knows, you may encounter a context where more substantial improvements can be made by moving in this direction.\n    </p>\n    <p>\n        As usual in this article series, you'll see how to apply this technique in three different languages.\n    </p>\n    <ul>\n        <li>Song recommendations from C# combinators</li>\n        <li>Song recommendations from F# combinators</li>\n        <li>Song recommendations from Haskell combinators</li>\n    </ul>\n    <p>\n        All that said, it's important to underscore that I don't consider this proper <a href=\"/2018/11/19/functional-architecture-a-definition\">functional architecture</a>. Even the Haskell example is too non-deterministic to my tastes.\n    </p>\n    <h3 id=\"d470d8b3fd2344788be43691aac8a29c\">\n        Conclusion <a href=\"#d470d8b3fd2344788be43691aac8a29c\">#</a>\n    </h3>\n    <p>\n        Perhaps the most pragmatic approach to a problem like the song-recommendations example is to allow the impure actions and pure functions to interleave. I don't mean to insist that functional programming is the only way to make code maintainable. You can organize code according to other principles, and some of them may also leave you with a code base that can serve its mission well, now and in the future.\n    </p>\n    <p>\n        Another factor to take into account is the skill level of the team tasked with maintaining a code base. What are they comfortable with?\n    </p>\n    <p>\n        Not that I think you should settle for status quo. Progress can only be made if you <a href=\"/2015/08/03/idiomatic-or-idiosyncratic\">push the envelop a little</a>, but you can also come up with a code base so alien to your colleagues that they can't work with it at all.\n    </p>\n    <p>\n        I could easily imagine a team where the solution in the next three articles is the only style they'd be able to maintain.\n    </p>\n    <p>\n        <strong>Next:</strong> Song recommendations from C# combinators.\n    </p>\n</div><hr>\n      This blog is totally free, but if you like it, please consider <a href=\"https://blog.ploeh.dk/support\">supporting it</a>.",
      "Content": null,
      "Language": "en-us",
      "Link": "https://blog.ploeh.dk/2025/06/09/song-recommendations-from-combinators/"
    },
    {
      "FeedId": "https://blog.ploeh.dk",
      "ItemId": "https://blog.ploeh.dk/2025/06/02/testing-races-with-a-slow-decorator",
      "Title": "Testing races with a slow Decorator",
      "PublishDate": "2025-06-02T08:03:00+02:00",
      "Summary": "\n\n\n<div id=\"post\">\n    <p>\n        <em>Delaying database interactions for test purposes.</em>\n    </p>\n    <p>\n        In chapter 12 in <a href=\"/2021/06/14/new-book-code-that-fits-in-your-head\">Code That Fits in Your Head</a>, I cover a typical <a href=\"https://en.wikipedia.org/wiki/Race_condition\">race condition</a> and how to test for it. The book comes with a pedagogical explanation of the problem, including a diagram in the style of <a href=\"/ref/ddia\">Designing Data-Intensive Applications</a>. In short, the problem occurs when two or more clients are competing for the last remaining seats in a particular time slot.\n    </p>\n    <p>\n        In my two-day workshop based on the book, I also cover this scenario. The goal is to show how to write automated tests for this kind of non-deterministic behaviour. In the book, and in the workshop, my approach is to rely on the <a href=\"https://en.wikipedia.org/wiki/Law_of_large_numbers\">law of large numbers</a>. An automated test attempts to trigger the race condition by trying 'enough' times. A timeout on the test assumes that if the test does not trigger the condition in the allotted time window, then the bug is addressed.\n    </p>\n    <p>\n        At one of my workshops, one participant told me of a more efficient and elegant way to test for this. I wish I could remember exactly at which workshop it was, and who the gentleman was, but alas, it escapes me.\n    </p>\n    <h3 id=\"05f24d2c08e34c5fbbd7e91dc8667969\">\n        Reproducing the condition <a href=\"#05f24d2c08e34c5fbbd7e91dc8667969\">#</a>\n    </h3>\n    <p>\n        How do you deterministically reproduce non-deterministic behaviour? The default answer is almost tautological. You can't, since it's non-deterministic.\n    </p>\n    <p>\n        The irony, however, is that in the workshop, I deterministically demonstrate the problem. The problem, in short, is that in order to decide whether or not to accept a reservation request, the system first reads data from its database, runs a fairly complex piece of decision logic, and finally writes the reservation to the database - if it decides to accept it, based on what it read. When competing processes vie for the last remaining seats, a race may occur where both (or all) base their decision on the same data, so they all come to the conclusion that they still have enough remaining capacity. Again, refer to the book, and its accompanying code base, for the details.\n    </p>\n    <p>\n        How do I demonstrate this condition in the workshop? I go into the Controller code and insert a temporary, human-scale delay after reading from the database, but before making the decision:\n    </p>\n    <p>\n        <pre><span style=\"color:blue;\">var</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">reservations</span>&nbsp;=&nbsp;<span style=\"font-weight:bold;color:#8f08c4;\">await</span>&nbsp;Repository.<span style=\"font-weight:bold;color:#74531f;\">ReadReservations</span>(<span style=\"font-weight:bold;color:#1f377f;\">r</span>.At);\n \n<span style=\"font-weight:bold;color:#8f08c4;\">await</span>&nbsp;<span style=\"color:#2b91af;\">Task</span>.<span style=\"color:#74531f;\">Delay</span>(<span style=\"color:#2b91af;\">TimeSpan</span>.<span style=\"color:#74531f;\">FromSeconds</span>(10));\n \n<span style=\"font-weight:bold;color:#8f08c4;\">if</span>&nbsp;(!MaitreD.<span style=\"font-weight:bold;color:#74531f;\">WillAccept</span>(<span style=\"color:#2b91af;\">DateTime</span>.Now,&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">reservations</span>,&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">r</span>))\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#8f08c4;\">return</span>&nbsp;<span style=\"color:#74531f;\">NoTables500InternalServerError</span>();\n\n<span style=\"font-weight:bold;color:#8f08c4;\">await</span>&nbsp;Repository.<span style=\"font-weight:bold;color:#74531f;\">Create</span>(<span style=\"font-weight:bold;color:#1f377f;\">restaurant</span>.Id,&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">reservation</span>);</pre>\n    </p>\n    <p>\n        Then I open two windows, from which I, within a couple of seconds of each other, try to make competing reservations. When the bug is present, both reservations are accepted, although, according to business rules, only one should be.\n    </p>\n    <p>\n        So that's how to deterministically demonstrate the problem. Just insert a long enough delay.\n    </p>\n    <p>\n        We can't, however, leave such delays in the production code, so I never even considered that this simple technique could be used for automated testing.\n    </p>\n    <h3 id=\"d908cad4489642babb34a58a37c678c7\">\n        Slowing things down with a Decorator <a href=\"#d908cad4489642babb34a58a37c678c7\">#</a>\n    </h3>\n    <p>\n        That's until my workshop participant told me his trick: Why don't you slow down the database interactions for test-purposes only? At first, I thought he had in mind some nasty compiler pragmas or environment hacks, but no. Why don't you use a <a href=\"https://en.wikipedia.org/wiki/Decorator_pattern\">Decorator</a> to slow things down?\n    </p>\n    <p>\n        Indeed, why not?\n    </p>\n    <p>\n        Fortunately, all database interaction already takes place behind an <code>IReservationsRepository</code> interface. Adding a test-only, delaying Decorator is straightforward.\n    </p>\n    <p>\n        <pre><span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:blue;\">sealed</span>&nbsp;<span style=\"color:blue;\">class</span>&nbsp;<span style=\"color:#2b91af;\">SlowReservationsRepository</span>&nbsp;:&nbsp;<span style=\"color:#2b91af;\">IReservationsRepository</span>\n{\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">private</span>&nbsp;<span style=\"color:blue;\">readonly</span>&nbsp;<span style=\"color:#2b91af;\">TimeSpan</span>&nbsp;halfDelay;\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:#2b91af;\">SlowReservationsRepository</span>(\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">TimeSpan</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">delay</span>,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">IReservationsRepository</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">inner</span>)\n&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Delay&nbsp;=&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">delay</span>;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;halfDelay&nbsp;=&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">delay</span>&nbsp;<span style=\"font-weight:bold;color:#74531f;\">/</span>&nbsp;2;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Inner&nbsp;=&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">inner</span>;\n&nbsp;&nbsp;&nbsp;&nbsp;}\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:#2b91af;\">TimeSpan</span>&nbsp;Delay&nbsp;{&nbsp;<span style=\"color:blue;\">get</span>;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:#2b91af;\">IReservationsRepository</span>&nbsp;Inner&nbsp;{&nbsp;<span style=\"color:blue;\">get</span>;&nbsp;}\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:blue;\">async</span>&nbsp;<span style=\"color:#2b91af;\">Task</span>&nbsp;<span style=\"font-weight:bold;color:#74531f;\">Create</span>(<span style=\"color:blue;\">int</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">restaurantId</span>,&nbsp;<span style=\"color:#2b91af;\">Reservation</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">reservation</span>)\n&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#8f08c4;\">await</span>&nbsp;<span style=\"color:#2b91af;\">Task</span>.<span style=\"color:#74531f;\">Delay</span>(halfDelay);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#8f08c4;\">await</span>&nbsp;Inner.<span style=\"font-weight:bold;color:#74531f;\">Create</span>(<span style=\"font-weight:bold;color:#1f377f;\">restaurantId</span>,&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">reservation</span>);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#8f08c4;\">await</span>&nbsp;<span style=\"color:#2b91af;\">Task</span>.<span style=\"color:#74531f;\">Delay</span>(halfDelay);\n&nbsp;&nbsp;&nbsp;&nbsp;}\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:blue;\">async</span>&nbsp;<span style=\"color:#2b91af;\">Task</span>&nbsp;<span style=\"font-weight:bold;color:#74531f;\">Delete</span>(<span style=\"color:blue;\">int</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">restaurantId</span>,&nbsp;<span style=\"color:#2b91af;\">Guid</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">id</span>)\n&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#8f08c4;\">await</span>&nbsp;<span style=\"color:#2b91af;\">Task</span>.<span style=\"color:#74531f;\">Delay</span>(halfDelay);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#8f08c4;\">await</span>&nbsp;Inner.<span style=\"font-weight:bold;color:#74531f;\">Delete</span>(<span style=\"font-weight:bold;color:#1f377f;\">restaurantId</span>,&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">id</span>);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#8f08c4;\">await</span>&nbsp;<span style=\"color:#2b91af;\">Task</span>.<span style=\"color:#74531f;\">Delay</span>(halfDelay);\n&nbsp;&nbsp;&nbsp;&nbsp;}\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:blue;\">async</span>&nbsp;<span style=\"color:#2b91af;\">Task</span>&lt;<span style=\"color:#2b91af;\">Reservation</span>?&gt;&nbsp;<span style=\"font-weight:bold;color:#74531f;\">ReadReservation</span>(\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">int</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">restaurantId</span>,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">Guid</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">id</span>)\n&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#8f08c4;\">await</span>&nbsp;<span style=\"color:#2b91af;\">Task</span>.<span style=\"color:#74531f;\">Delay</span>(halfDelay);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">var</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">result</span>&nbsp;=&nbsp;<span style=\"font-weight:bold;color:#8f08c4;\">await</span>&nbsp;Inner.<span style=\"font-weight:bold;color:#74531f;\">ReadReservation</span>(<span style=\"font-weight:bold;color:#1f377f;\">restaurantId</span>,&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">id</span>);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#8f08c4;\">await</span>&nbsp;<span style=\"color:#2b91af;\">Task</span>.<span style=\"color:#74531f;\">Delay</span>(halfDelay);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#8f08c4;\">return</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">result</span>;\n&nbsp;&nbsp;&nbsp;&nbsp;}\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:blue;\">async</span>&nbsp;<span style=\"color:#2b91af;\">Task</span>&lt;<span style=\"color:#2b91af;\">IReadOnlyCollection</span>&lt;<span style=\"color:#2b91af;\">Reservation</span>&gt;&gt;&nbsp;<span style=\"font-weight:bold;color:#74531f;\">ReadReservations</span>(\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">int</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">restaurantId</span>,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">DateTime</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">min</span>,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">DateTime</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">max</span>)\n&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#8f08c4;\">await</span>&nbsp;<span style=\"color:#2b91af;\">Task</span>.<span style=\"color:#74531f;\">Delay</span>(halfDelay);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">var</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">result</span>&nbsp;=&nbsp;<span style=\"font-weight:bold;color:#8f08c4;\">await</span>&nbsp;Inner.<span style=\"font-weight:bold;color:#74531f;\">ReadReservations</span>(<span style=\"font-weight:bold;color:#1f377f;\">restaurantId</span>,&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">min</span>,&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">max</span>);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#8f08c4;\">await</span>&nbsp;<span style=\"color:#2b91af;\">Task</span>.<span style=\"color:#74531f;\">Delay</span>(halfDelay);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#8f08c4;\">return</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">result</span>;\n&nbsp;&nbsp;&nbsp;&nbsp;}\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:blue;\">async</span>&nbsp;<span style=\"color:#2b91af;\">Task</span>&nbsp;<span style=\"font-weight:bold;color:#74531f;\">Update</span>(<span style=\"color:blue;\">int</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">restaurantId</span>,&nbsp;<span style=\"color:#2b91af;\">Reservation</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">reservation</span>)\n&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#8f08c4;\">await</span>&nbsp;<span style=\"color:#2b91af;\">Task</span>.<span style=\"color:#74531f;\">Delay</span>(halfDelay);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#8f08c4;\">await</span>&nbsp;Inner.<span style=\"font-weight:bold;color:#74531f;\">Update</span>(<span style=\"font-weight:bold;color:#1f377f;\">restaurantId</span>,&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">reservation</span>);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#8f08c4;\">await</span>&nbsp;<span style=\"color:#2b91af;\">Task</span>.<span style=\"color:#74531f;\">Delay</span>(halfDelay);\n&nbsp;&nbsp;&nbsp;&nbsp;}\n}</pre>\n    </p>\n    <p>\n        This one uniformly slows down all operations. I arbitrarily decided to split the <code>Delay</code> in half, in order to apply half of it before each action, and the other half after. Honestly, I didn't mull this over too much; I just thought that if I did it that way, I wouldn't have to speculate whether it would make a difference if the delay happened before or after the action in question.\n    </p>\n    <h3 id=\"a0e3b21e6def42b781e47a98b19f2294\">\n        Slowing down tests <a href=\"#a0e3b21e6def42b781e47a98b19f2294\">#</a>\n    </h3>\n    <p>\n        I added a few helper methods to the <code>RestaurantService</code> class that inherits from <a href=\"https://learn.microsoft.com/dotnet/api/microsoft.aspnetcore.mvc.testing.webapplicationfactory-1\"><span style=\"color:#2b91af;\">WebApplicationFactory</span>&lt;<span style=\"color:#2b91af;\">Startup</span>&gt;</a>, mainly to enable decoration of the injected Repository. With those changes, I could now rewrite my test like this:\n    </p>\n    <p>\n        <pre>[<span style=\"color:#2b91af;\">Fact</span>]\n<span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:blue;\">async</span>&nbsp;<span style=\"color:#2b91af;\">Task</span>&nbsp;<span style=\"font-weight:bold;color:#74531f;\">NoOverbookingRace</span>()\n{\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">var</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">date</span>&nbsp;=&nbsp;<span style=\"color:#2b91af;\">DateTime</span>.Now.Date.<span style=\"font-weight:bold;color:#74531f;\">AddDays</span>(1).<span style=\"font-weight:bold;color:#74531f;\">AddHours</span>(18.5);\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">using</span>&nbsp;<span style=\"color:blue;\">var</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">service</span>&nbsp;=&nbsp;<span style=\"color:#2b91af;\">RestaurantService</span>.<span style=\"color:#74531f;\">CreateWith</span>(<span style=\"font-weight:bold;color:#1f377f;\">repo</span>&nbsp;=&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">SlowReservationsRepository</span>(\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">TimeSpan</span>.<span style=\"color:#74531f;\">FromMilliseconds</span>(100),&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">repo</span>));\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">var</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">task1</span>&nbsp;=&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">service</span>.<span style=\"font-weight:bold;color:#74531f;\">PostReservation</span>(<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">ReservationDtoBuilder</span>()\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.<span style=\"font-weight:bold;color:#74531f;\">WithDate</span>(<span style=\"font-weight:bold;color:#1f377f;\">date</span>)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.<span style=\"font-weight:bold;color:#74531f;\">WithQuantity</span>(10)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.<span style=\"font-weight:bold;color:#74531f;\">Build</span>());\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">var</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">task2</span>&nbsp;=&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">service</span>.<span style=\"font-weight:bold;color:#74531f;\">PostReservation</span>(<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">ReservationDtoBuilder</span>()\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.<span style=\"font-weight:bold;color:#74531f;\">WithDate</span>(<span style=\"font-weight:bold;color:#1f377f;\">date</span>)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.<span style=\"font-weight:bold;color:#74531f;\">WithQuantity</span>(10)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.<span style=\"font-weight:bold;color:#74531f;\">Build</span>());\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">var</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">actual</span>&nbsp;=&nbsp;<span style=\"font-weight:bold;color:#8f08c4;\">await</span>&nbsp;<span style=\"color:#2b91af;\">Task</span>.<span style=\"color:#74531f;\">WhenAll</span>(<span style=\"font-weight:bold;color:#1f377f;\">task1</span>,&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">task2</span>);\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">Assert</span>.<span style=\"color:#74531f;\">Single</span>(\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">actual</span>,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">msg</span>&nbsp;=&gt;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">msg</span>.StatusCode&nbsp;==&nbsp;<span style=\"color:#2b91af;\">HttpStatusCode</span>.InternalServerError);\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">var</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">ok</span>&nbsp;=&nbsp;<span style=\"color:#2b91af;\">Assert</span>.<span style=\"color:#74531f;\">Single</span>(<span style=\"font-weight:bold;color:#1f377f;\">actual</span>,&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">msg</span>&nbsp;=&gt;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">msg</span>.IsSuccessStatusCode);\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:green;\">//&nbsp;Check&nbsp;that&nbsp;the&nbsp;reservation&nbsp;was&nbsp;actually&nbsp;created:</span>\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">var</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">resp</span>&nbsp;=&nbsp;<span style=\"font-weight:bold;color:#8f08c4;\">await</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">service</span>.<span style=\"font-weight:bold;color:#74531f;\">GetReservation</span>(<span style=\"font-weight:bold;color:#1f377f;\">ok</span>.Headers.Location);\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">resp</span>.<span style=\"font-weight:bold;color:#74531f;\">EnsureSuccessStatusCode</span>();\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">var</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">reservation</span>&nbsp;=&nbsp;<span style=\"font-weight:bold;color:#8f08c4;\">await</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">resp</span>.<span style=\"font-weight:bold;color:#74531f;\">ParseJsonContent</span>&lt;<span style=\"color:#2b91af;\">ReservationDto</span>&gt;();\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">Assert</span>.<span style=\"color:#74531f;\">Equal</span>(10,&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">reservation</span>.Quantity);\n}</pre>\n    </p>\n    <p>\n        The restaurant being tested has a maximum capacity of ten guests, so while it can accommodate either of the two requests, it can't make room for both.\n    </p>\n    <p>\n        For this example, I arbitrarily chose to configure the Decorator with a 100-millisecond delay. Every interaction with the database caused by that test gets a built-in 100-millisecond delay. 50 ms before each action, and 50 ms after.\n    </p>\n    <p>\n        The test starts both tasks, <code>task1</code> and <code>task2</code>, without awaiting them. This allows them to run concurrently. After starting both tasks, the test awaits both of them with <a href=\"https://learn.microsoft.com/dotnet/api/system.threading.tasks.task.whenall\">Task.WhenAll</a>.\n    </p>\n    <p>\n        The <a href=\"/2013/06/24/a-heuristic-for-formatting-code-according-to-the-aaa-pattern\">assertion phase</a> of the test is more involved than you may be used to see. The reason is that it deals with more than one possible failure scenario.\n    </p>\n    <p>\n        The first two assertions (<code>Assert.Single</code>) deal with the complete absence of transaction control in the application. In that case, both <code>POST</code> requests succeed, which they aren't supposed to. If the system works properly, it should accept one request and reject the other.\n    </p>\n    <p>\n        The rest of the assertions check that the successful reservation was actually created. That's another failure scenario.\n    </p>\n    <p>\n        The way I chose to deal with the race condition is standard in .NET. I used a <a href=\"https://learn.microsoft.com/dotnet/api/system.transactions.transactionscope\">TransactionScope</a>. This is peculiar and, in my opinion, questionable API that enables you to start a transaction <em>anywhere</em> in your code, and then complete when you you're done. In the code base that accompanies <a href=\"/code-that-fits-in-your-head\">Code That Fits in Your Head</a>, it looks like this:\n    </p>\n    <p>\n        <pre><span style=\"color:blue;\">private</span>&nbsp;<span style=\"color:blue;\">async</span>&nbsp;<span style=\"color:#2b91af;\">Task</span>&lt;<span style=\"color:#2b91af;\">ActionResult</span>&gt;&nbsp;<span style=\"font-weight:bold;color:#74531f;\">TryCreate</span>(<span style=\"color:#2b91af;\">Restaurant</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">restaurant</span>,&nbsp;<span style=\"color:#2b91af;\">Reservation</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">reservation</span>)\n{\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">using</span>&nbsp;<span style=\"color:blue;\">var</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">scope</span>&nbsp;=&nbsp;<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">TransactionScope</span>(<span style=\"color:#2b91af;\">TransactionScopeAsyncFlowOption</span>.Enabled);\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">var</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">reservations</span>&nbsp;=&nbsp;<span style=\"font-weight:bold;color:#8f08c4;\">await</span>&nbsp;Repository\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.<span style=\"font-weight:bold;color:#74531f;\">ReadReservations</span>(<span style=\"font-weight:bold;color:#1f377f;\">restaurant</span>.Id,&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">reservation</span>.At)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.<span style=\"font-weight:bold;color:#74531f;\">ConfigureAwait</span>(<span style=\"color:blue;\">false</span>);\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">var</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">now</span>&nbsp;=&nbsp;Clock.<span style=\"font-weight:bold;color:#74531f;\">GetCurrentDateTime</span>();\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#8f08c4;\">if</span>&nbsp;(!<span style=\"font-weight:bold;color:#1f377f;\">restaurant</span>.MaitreD.<span style=\"font-weight:bold;color:#74531f;\">WillAccept</span>(<span style=\"font-weight:bold;color:#1f377f;\">now</span>,&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">reservations</span>,&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">reservation</span>))\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#8f08c4;\">return</span>&nbsp;<span style=\"color:#74531f;\">NoTables500InternalServerError</span>();\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#8f08c4;\">await</span>&nbsp;Repository.<span style=\"font-weight:bold;color:#74531f;\">Create</span>(<span style=\"font-weight:bold;color:#1f377f;\">restaurant</span>.Id,&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">reservation</span>).<span style=\"font-weight:bold;color:#74531f;\">ConfigureAwait</span>(<span style=\"color:blue;\">false</span>);\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">scope</span>.<span style=\"font-weight:bold;color:#74531f;\">Complete</span>();\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#8f08c4;\">return</span>&nbsp;<span style=\"color:#74531f;\">Reservation201Created</span>(<span style=\"font-weight:bold;color:#1f377f;\">restaurant</span>.Id,&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">reservation</span>);\n}</pre>\n    </p>\n    <p>\n        Notice the <code>scope.Complete()</code> statement towards the end.\n    </p>\n    <p>\n        What happens if someone forgets to call <code>scope.Complete()</code>?\n    </p>\n    <p>\n        In that case, the thread that wins the race returns <code>201 Created</code>, but when the <code>scope</code> goes out of scope, it's disposed of. If <code>Complete()</code> wasn't called, the transaction is rolled back, but the HTTP response code remains <code>201</code>. Thus, the two assertions that inspect the response codes aren't enough to catch this particular kind of defect.\n    </p>\n    <p>\n        Instead, the test subsequently queries the System Under Test to verify that the resource was, indeed, created.\n    </p>\n    <h3 id=\"064b9e4646544b60b47b25e2cc4cc8a5\">\n        Wait time <a href=\"#064b9e4646544b60b47b25e2cc4cc8a5\">#</a>\n    </h3>\n    <p>\n        The original test shown in the book times out after 30 seconds if it can't produce the race condition. Compared to that, the refactored test shown here is <em>fast</em>. Even so, we may fear that it spends too much time doing nothing. How much time might that be?\n    </p>\n    <p>\n        The <code>TryCreate</code> helper method shown above is the only part of a <code>POST</code> request that interacts with the Repository. As you can see, it calls it twice: Once to read, and once to write, if it decides to do that. With a 100 ms delay, that's 200 ms.\n    </p>\n    <p>\n        And while the test issues two <code>POST</code> requests, they run in parallel. That's the whole point. It means that they'll still run in approximately 200 ms.\n    </p>\n    <p>\n        The test then issues a <code>GET</code> request to verify that the resource was created. That triggers another database read, which takes another 100 ms.\n    </p>\n    <p>\n        That's 300 ms in all. Given that these tests are part of a second-level test suite, and not your default developer test suite, that may be good enough.\n    </p>\n    <p>\n        Still, that's the <code>POST</code> scenario. I also wrote a test that checks for a race condition when doing <code>PUT</code> requests, and it performs more work.\n    </p>\n    <p>\n        <pre>[<span style=\"color:#2b91af;\">Fact</span>]\n<span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:blue;\">async</span>&nbsp;<span style=\"color:#2b91af;\">Task</span>&nbsp;<span style=\"font-weight:bold;color:#74531f;\">NoOverbookingPutRace</span>()\n{\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">var</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">date</span>&nbsp;=&nbsp;<span style=\"color:#2b91af;\">DateTime</span>.Now.Date.<span style=\"font-weight:bold;color:#74531f;\">AddDays</span>(1).<span style=\"font-weight:bold;color:#74531f;\">AddHours</span>(18.5);\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">using</span>&nbsp;<span style=\"color:blue;\">var</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">service</span>&nbsp;=&nbsp;<span style=\"color:#2b91af;\">RestaurantService</span>.<span style=\"color:#74531f;\">CreateWith</span>(<span style=\"font-weight:bold;color:#1f377f;\">repo</span>&nbsp;=&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">SlowReservationsRepository</span>(\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">TimeSpan</span>.<span style=\"color:#74531f;\">FromMilliseconds</span>(100),&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">repo</span>));\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">var</span>&nbsp;(<span style=\"font-weight:bold;color:#1f377f;\">address1</span>,&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">dto1</span>)&nbsp;=&nbsp;<span style=\"font-weight:bold;color:#8f08c4;\">await</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">service</span>.<span style=\"font-weight:bold;color:#74531f;\">PostReservation</span>(<span style=\"font-weight:bold;color:#1f377f;\">date</span>,&nbsp;4);\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">var</span>&nbsp;(<span style=\"font-weight:bold;color:#1f377f;\">address2</span>,&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">dto2</span>)&nbsp;=&nbsp;<span style=\"font-weight:bold;color:#8f08c4;\">await</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">service</span>.<span style=\"font-weight:bold;color:#74531f;\">PostReservation</span>(<span style=\"font-weight:bold;color:#1f377f;\">date</span>,&nbsp;4);\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">dto1</span>.Quantity&nbsp;+=&nbsp;2;\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">dto2</span>.Quantity&nbsp;+=&nbsp;2;\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">var</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">task1</span>&nbsp;=&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">service</span>.<span style=\"font-weight:bold;color:#74531f;\">PutReservation</span>(<span style=\"font-weight:bold;color:#1f377f;\">address1</span>,&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">dto1</span>);\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">var</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">task2</span>&nbsp;=&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">service</span>.<span style=\"font-weight:bold;color:#74531f;\">PutReservation</span>(<span style=\"font-weight:bold;color:#1f377f;\">address2</span>,&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">dto2</span>);\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">var</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">actual</span>&nbsp;=&nbsp;<span style=\"font-weight:bold;color:#8f08c4;\">await</span>&nbsp;<span style=\"color:#2b91af;\">Task</span>.<span style=\"color:#74531f;\">WhenAll</span>(<span style=\"font-weight:bold;color:#1f377f;\">task1</span>,&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">task2</span>);\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">Assert</span>.<span style=\"color:#74531f;\">Single</span>(\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">actual</span>,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">msg</span>&nbsp;=&gt;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">msg</span>.StatusCode&nbsp;==&nbsp;<span style=\"color:#2b91af;\">HttpStatusCode</span>.InternalServerError);\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">var</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">ok</span>&nbsp;=&nbsp;<span style=\"color:#2b91af;\">Assert</span>.<span style=\"color:#74531f;\">Single</span>(<span style=\"font-weight:bold;color:#1f377f;\">actual</span>,&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">msg</span>&nbsp;=&gt;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">msg</span>.IsSuccessStatusCode);\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:green;\">//&nbsp;Check&nbsp;that&nbsp;the&nbsp;reservations&nbsp;now&nbsp;have&nbsp;consistent&nbsp;values:</span>\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">var</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">client</span>&nbsp;=&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">service</span>.<span style=\"font-weight:bold;color:#74531f;\">CreateClient</span>();\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">var</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">resp1</span>&nbsp;=&nbsp;<span style=\"font-weight:bold;color:#8f08c4;\">await</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">client</span>.<span style=\"font-weight:bold;color:#74531f;\">GetAsync</span>(<span style=\"font-weight:bold;color:#1f377f;\">address1</span>);\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">var</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">resp2</span>&nbsp;=&nbsp;<span style=\"font-weight:bold;color:#8f08c4;\">await</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">client</span>.<span style=\"font-weight:bold;color:#74531f;\">GetAsync</span>(<span style=\"font-weight:bold;color:#1f377f;\">address2</span>);\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">resp1</span>.<span style=\"font-weight:bold;color:#74531f;\">EnsureSuccessStatusCode</span>();\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">resp2</span>.<span style=\"font-weight:bold;color:#74531f;\">EnsureSuccessStatusCode</span>();\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">var</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">body1</span>&nbsp;=&nbsp;<span style=\"font-weight:bold;color:#8f08c4;\">await</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">resp1</span>.<span style=\"font-weight:bold;color:#74531f;\">ParseJsonContent</span>&lt;<span style=\"color:#2b91af;\">ReservationDto</span>&gt;();\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">var</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">body2</span>&nbsp;=&nbsp;<span style=\"font-weight:bold;color:#8f08c4;\">await</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">resp2</span>.<span style=\"font-weight:bold;color:#74531f;\">ParseJsonContent</span>&lt;<span style=\"color:#2b91af;\">ReservationDto</span>&gt;();\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">Assert</span>.<span style=\"color:#74531f;\">Single</span>(<span style=\"color:blue;\">new</span>[]&nbsp;{&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">body1</span>.Quantity,&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">body2</span>.Quantity&nbsp;},&nbsp;6);\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">Assert</span>.<span style=\"color:#74531f;\">Single</span>(<span style=\"color:blue;\">new</span>[]&nbsp;{&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">body1</span>.Quantity,&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">body2</span>.Quantity&nbsp;},&nbsp;4);\n}</pre>\n    </p>\n    <p>\n        This test first has to create two reservations in a nice, sequential manner. Then it attempts to perform two concurrent updates, and finally it tests that all is as it should be: That both reservations still exist, but only one had its <code>Quantity</code> increased to <code>6</code>.\n    </p>\n    <p>\n        This test first makes two <code>POST</code> requests, nicely serialized so as to avoid a race condition. That's 400 ms.\n    </p>\n    <p>\n        Each <code>PUT</code> request triggers three Repository actions, for a total of 300 ms (since they run in parallel).\n    </p>\n    <p>\n        Finally, the test issues two <code>GET</code> requests for verification, for another 2 times 100 ms. Now that I'm writing this, I realize that I could also have parallelized these two calls, but as you read on, you'll see why that's not necessary.\n    </p>\n    <p>\n        In all, this test waits for 900 ms. That's almost a second.\n    </p>\n    <p>\n        Can we improve on that?\n    </p>\n    <h3 id=\"b5c26b0e8a80487db636d47cd408cf3a\">\n        Decreasing unnecessary wait time <a href=\"#b5c26b0e8a80487db636d47cd408cf3a\">#</a>\n    </h3>\n    <p>\n        In the latter example, the 300 ms wait time for the parallel <code>PUT</code> requests are necessary to trigger the race condition, but the rest of the test's actions don't need slowing down. We can remove the unwarranted wait time by setting up two services: One slow, and one normal.\n    </p>\n    <p>\n        To be honest, I could have modelled this by just instantiating two service objects, but why do something as pedestrian as that when you can turn <code>RestaurantService</code> into a <a href=\"/2020/10/19/monomorphic-functors\">monomorphic functor</a>?\n    </p>\n    <p>\n        <pre><span style=\"color:blue;\">internal</span>&nbsp;<span style=\"color:#2b91af;\">RestaurantService</span>&nbsp;<span style=\"font-weight:bold;color:#74531f;\">Select</span>(<span style=\"color:#2b91af;\">Func</span>&lt;<span style=\"color:#2b91af;\">IReservationsRepository</span>,&nbsp;<span style=\"color:#2b91af;\">IReservationsRepository</span>&gt;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">selector</span>)\n{\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#8f08c4;\">if</span>&nbsp;(<span style=\"font-weight:bold;color:#1f377f;\">selector</span>&nbsp;<span style=\"color:blue;\">is</span>&nbsp;<span style=\"color:blue;\">null</span>)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#8f08c4;\">throw</span>&nbsp;<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">ArgumentNullException</span>(<span style=\"color:blue;\">nameof</span>(<span style=\"font-weight:bold;color:#1f377f;\">selector</span>));\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#8f08c4;\">return</span>&nbsp;<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">RestaurantService</span>(<span style=\"font-weight:bold;color:#1f377f;\">selector</span>(repository));\n}</pre>\n    </p>\n    <p>\n        Granted, this is verging on the frivolous, but when writing code for a blog post, I think I'm allowed a little fun.\n    </p>\n    <p>\n        In any case, this now enables me to rewrite the test like this:\n    </p>\n    <p>\n        <pre>[<span style=\"color:#2b91af;\">Fact</span>]\n<span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:blue;\">async</span>&nbsp;<span style=\"color:#2b91af;\">Task</span>&nbsp;<span style=\"font-weight:bold;color:#74531f;\">NoOverbookingRace</span>()\n{\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">var</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">date</span>&nbsp;=&nbsp;<span style=\"color:#2b91af;\">DateTime</span>.Now.Date.<span style=\"font-weight:bold;color:#74531f;\">AddDays</span>(1).<span style=\"font-weight:bold;color:#74531f;\">AddHours</span>(18.5);\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">using</span>&nbsp;<span style=\"color:blue;\">var</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">service</span>&nbsp;=&nbsp;<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">RestaurantService</span>();\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">using</span>&nbsp;<span style=\"color:blue;\">var</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">slowService</span>&nbsp;=\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">from</span>&nbsp;repo&nbsp;<span style=\"color:blue;\">in</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">service</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">select</span>&nbsp;<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">SlowReservationsRepository</span>(<span style=\"color:#2b91af;\">TimeSpan</span>.<span style=\"color:#74531f;\">FromMilliseconds</span>(100),&nbsp;repo);\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">var</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">task1</span>&nbsp;=&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">slowService</span>.<span style=\"font-weight:bold;color:#74531f;\">PostReservation</span>(<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">ReservationDtoBuilder</span>()\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.<span style=\"font-weight:bold;color:#74531f;\">WithDate</span>(<span style=\"font-weight:bold;color:#1f377f;\">date</span>)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.<span style=\"font-weight:bold;color:#74531f;\">WithQuantity</span>(10)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.<span style=\"font-weight:bold;color:#74531f;\">Build</span>());\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">var</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">task2</span>&nbsp;=&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">slowService</span>.<span style=\"font-weight:bold;color:#74531f;\">PostReservation</span>(<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">ReservationDtoBuilder</span>()\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.<span style=\"font-weight:bold;color:#74531f;\">WithDate</span>(<span style=\"font-weight:bold;color:#1f377f;\">date</span>)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.<span style=\"font-weight:bold;color:#74531f;\">WithQuantity</span>(10)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.<span style=\"font-weight:bold;color:#74531f;\">Build</span>());\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">var</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">actual</span>&nbsp;=&nbsp;<span style=\"font-weight:bold;color:#8f08c4;\">await</span>&nbsp;<span style=\"color:#2b91af;\">Task</span>.<span style=\"color:#74531f;\">WhenAll</span>(<span style=\"font-weight:bold;color:#1f377f;\">task1</span>,&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">task2</span>);\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">Assert</span>.<span style=\"color:#74531f;\">Single</span>(\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">actual</span>,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">msg</span>&nbsp;=&gt;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">msg</span>.StatusCode&nbsp;==&nbsp;<span style=\"color:#2b91af;\">HttpStatusCode</span>.InternalServerError);\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">var</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">ok</span>&nbsp;=&nbsp;<span style=\"color:#2b91af;\">Assert</span>.<span style=\"color:#74531f;\">Single</span>(<span style=\"font-weight:bold;color:#1f377f;\">actual</span>,&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">msg</span>&nbsp;=&gt;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">msg</span>.IsSuccessStatusCode);\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:green;\">//&nbsp;Check&nbsp;that&nbsp;the&nbsp;reservation&nbsp;was&nbsp;actually&nbsp;created:</span>\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">var</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">resp</span>&nbsp;=&nbsp;<span style=\"font-weight:bold;color:#8f08c4;\">await</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">service</span>.<span style=\"font-weight:bold;color:#74531f;\">GetReservation</span>(<span style=\"font-weight:bold;color:#1f377f;\">ok</span>.Headers.Location);\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">resp</span>.<span style=\"font-weight:bold;color:#74531f;\">EnsureSuccessStatusCode</span>();\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">var</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">reservation</span>&nbsp;=&nbsp;<span style=\"font-weight:bold;color:#8f08c4;\">await</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">resp</span>.<span style=\"font-weight:bold;color:#74531f;\">ParseJsonContent</span>&lt;<span style=\"color:#2b91af;\">ReservationDto</span>&gt;();\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">Assert</span>.<span style=\"color:#74531f;\">Equal</span>(10,&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">reservation</span>.Quantity);\n}</pre>\n    </p>\n    <p>\n        Notice how only the parallel execution of <code>task1</code> and <code>task2</code> run on the slow system. The rest runs as fast as it can. It's as if the client was hitting two different servers that just happen to connect to the same database. Now the test only waits for the 200 ms described above. The <code>PUT</code> test, likewise, only idles for 300 ms instead of 900 ms.\n    </p>\n    <h3 id=\"90a4897a10b24d2c98d09129884f7e13\">\n        Near-deterministic tests <a href=\"#90a4897a10b24d2c98d09129884f7e13\">#</a>\n    </h3>\n    <p>\n        Does this deterministically reproduce the race condition? In practice, it may move us close enough, but theoretically the race is still on. With the increased wait time, it's now much more unlikely that the race condition does <em>not</em> happen, but it still could.\n    </p>\n    <p>\n        Imagine that <code>task1</code> queries the Repository. Just as it's received a response, but before <code>task2</code> starts its query, execution is paused, perhaps because of garbage collection. Once the program resumes, <code>task1</code> runs to completion before <code>task2</code> reads from the database. In that case, <code>task2</code> ends up making the right decision, rejecting the reservation. Even if no transaction control were in place.\n    </p>\n    <p>\n        This may not be a particularly realistic scenario, but I suppose it could happen if the computer is stressed in general. Even so, you might decide to make such <a href=\"https://en.wikipedia.org/wiki/False_positives_and_false_negatives\">false-negative</a> scenarios even more unlikely by increasing the delay time. Of course, the downside is that tests take even longer to run.\n    </p>\n    <p>\n        Another potential problem is that there's no <em>guarantee</em> that <code>task1</code> and <code>task2</code> run in parallel. Even if the test doesn't <code>await</code> any of the tasks, both start executing immediately. There's an (unlikely) chance that <code>task1</code> completes before <code>task2</code> starts. Again, I don't consider this likely, but I suppose it could happen because of thread starvation, generation 2 garbage collection, the disk running full, etc. The point is that the test shown here is still playing the odds, even if the odds are really good.\n    </p>\n    <h3 id=\"335493859fd0494488353e60de46c9c3\">\n        Conclusion <a href=\"#335493859fd0494488353e60de46c9c3\">#</a>\n    </h3>\n    <p>\n        Instead of running a scenario 'enough' times that reproducing a race condition is likely, you can increase the odds to near-certainty by slowing down the race. In this example, the race involves a database, but you might also encounter race conditions internally in multi-threaded code. I'm not insisting that the technique described in this article applies universally, but if you can slow down certain interactions in the right way, you may be able reproduce problems as automated tests.\n    </p>\n    <p>\n        If you've ever troubleshot a race condition, you've probably tried inserting sleeps into the code in various places to understand the problem. As described above, a single, strategically-placed <code>Task.Delay</code> may be all you need to reproduce a problem. What escaped me for a long time, however, was that I didn't realize that I could cleanly insert such pauses into production code. Until my workshop participant suggested using a Decorator.\n    </p>\n    <p>\n        A delaying Decorator slows interactions with the database down sufficiently to reproduce the race condition as an automated test.\n    </p>\n</div><hr>\n      This blog is totally free, but if you like it, please consider <a href=\"https://blog.ploeh.dk/support\">supporting it</a>.",
      "Content": null,
      "Language": "en-us",
      "Link": "https://blog.ploeh.dk/2025/06/02/testing-races-with-a-slow-decorator/"
    },
    {
      "FeedId": "https://blog.ploeh.dk",
      "ItemId": "https://blog.ploeh.dk/2025/05/26/song-recommendations-as-a-haskell-impureim-sandwich",
      "Title": "Song recommendations as a Haskell Impureim Sandwich",
      "PublishDate": "2025-05-26T07:15:00+02:00",
      "Summary": "\n\n\n<div id=\"post\">\n    <p>\n        <em>A pure function on potentially massive data.</em>\n    </p>\n    <p>\n        This article is part of a larger article series called <a href=\"/2025/04/07/alternative-ways-to-design-with-functional-programming\">Alternative ways to design with functional programming</a>. As the title suggests, these articles discuss various ways to apply functional-programming principles to a particular problem. All the articles engage with the same problem. In short, the task is to calculate song recommendations for a user, based on massive data sets. Earlier articles in this series give you detailed explanation of the problem.\n    </p>\n    <p>\n        In the <a href=\"/2025/05/19/song-recommendations-as-an-f-impureim-sandwich\">previous article</a>, you saw how to refactor the 'base' <a href=\"https://fsharp.org/\">F#</a> code base to a <a href=\"https://en.wikipedia.org/wiki/Pure_function\">pure function</a>. In this article, you'll see the same refactoring applied to the 'base' <a href=\"https://www.haskell.org/\">Haskell</a> code base shown in <a href=\"/2025/04/21/porting-song-recommendations-to-haskell\">Porting song recommendations to Haskell</a>.\n    </p>\n    <p>\n        The Git branch discussed in this article is the <em>pure-function</em> branch in the Haskell Git repository.\n    </p>\n    <h3 id=\"0ed27ab7abea4417918789c4e30e1204\">\n        Collecting all the data <a href=\"#0ed27ab7abea4417918789c4e30e1204\">#</a>\n    </h3>\n    <p>\n        Like in the previous articles, we may start by adding two more methods to the <code>SongService</code> type class, which will enable us to enumerate all songs and all users. The full type class, with all four methods, then looks like this:\n    </p>\n    <p>\n        <pre><span style=\"color:blue;\">class</span>&nbsp;<span style=\"color:#2b91af;\">SongService</span>&nbsp;a&nbsp;<span style=\"color:blue;\">where</span>\n&nbsp;&nbsp;<span style=\"color:#2b91af;\">getAllSongs</span>&nbsp;<span style=\"color:blue;\">::</span>&nbsp;a&nbsp;<span style=\"color:blue;\">-&gt;</span>&nbsp;<span style=\"color:#2b91af;\">IO</span>&nbsp;[<span style=\"color:blue;\">Song</span>]\n&nbsp;&nbsp;<span style=\"color:#2b91af;\">getAllUsers</span>&nbsp;<span style=\"color:blue;\">::</span>&nbsp;a&nbsp;<span style=\"color:blue;\">-&gt;</span>&nbsp;<span style=\"color:#2b91af;\">IO</span>&nbsp;[<span style=\"color:blue;\">User</span>]\n&nbsp;&nbsp;<span style=\"color:#2b91af;\">getTopListeners</span>&nbsp;<span style=\"color:blue;\">::</span>&nbsp;a&nbsp;<span style=\"color:blue;\">-&gt;</span>&nbsp;<span style=\"color:#2b91af;\">Int</span>&nbsp;<span style=\"color:blue;\">-&gt;</span>&nbsp;<span style=\"color:#2b91af;\">IO</span>&nbsp;[<span style=\"color:blue;\">User</span>]\n&nbsp;&nbsp;<span style=\"color:#2b91af;\">getTopScrobbles</span>&nbsp;<span style=\"color:blue;\">::</span>&nbsp;a&nbsp;<span style=\"color:blue;\">-&gt;</span>&nbsp;<span style=\"color:#2b91af;\">String</span>&nbsp;<span style=\"color:blue;\">-&gt;</span>&nbsp;<span style=\"color:#2b91af;\">IO</span>&nbsp;[<span style=\"color:blue;\">Scrobble</span>]</pre>\n    </p>\n    <p>\n        If you compare with the type class definition shown in the article <a href=\"/2025/04/21/porting-song-recommendations-to-haskell\">Porting song recommendations to Haskell</a>, you'll see that <code>getAllSongs</code> and <code>getAllUsers</code> are the new methods.\n    </p>\n    <p>\n        They enable you to collect all top listeners, and all top scrobbles, even though it may take some time. To gather all the top listeners, we may add this <code>collectAllTopListeners</code> action:\n    </p>\n    <p>\n        <pre>collectAllTopListeners&nbsp;srvc&nbsp;=&nbsp;<span style=\"color:blue;\">do</span>\n&nbsp;&nbsp;songs&nbsp;&lt;-&nbsp;getAllSongs&nbsp;srvc\n&nbsp;&nbsp;listeners&nbsp;&lt;-&nbsp;newIORef&nbsp;Map.empty\n&nbsp;&nbsp;forM_&nbsp;songs&nbsp;$&nbsp;\\song&nbsp;-&gt;&nbsp;<span style=\"color:blue;\">do</span>\n&nbsp;&nbsp;&nbsp;&nbsp;topListeners&nbsp;&lt;-&nbsp;getTopListeners&nbsp;srvc&nbsp;$&nbsp;songId&nbsp;song\n&nbsp;&nbsp;&nbsp;&nbsp;modifyIORef&nbsp;listeners&nbsp;(Map.insert&nbsp;(songId&nbsp;song)&nbsp;topListeners)\n&nbsp;&nbsp;readIORef&nbsp;listeners</pre>\n    </p>\n    <p>\n        Likewise, you can amass all the top scrobbles with a similar action:\n    </p>\n    <p>\n        <pre>collectAllTopScrobbles&nbsp;srvc&nbsp;=&nbsp;<span style=\"color:blue;\">do</span>\n&nbsp;&nbsp;users&nbsp;&lt;-&nbsp;getAllUsers&nbsp;srvc\n&nbsp;&nbsp;scrobbles&nbsp;&lt;-&nbsp;newIORef&nbsp;Map.empty\n&nbsp;&nbsp;forM_&nbsp;users&nbsp;$&nbsp;\\user&nbsp;-&gt;&nbsp;<span style=\"color:blue;\">do</span>\n&nbsp;&nbsp;&nbsp;&nbsp;topScrobbles&nbsp;&lt;-&nbsp;getTopScrobbles&nbsp;srvc&nbsp;$&nbsp;userName&nbsp;user\n&nbsp;&nbsp;&nbsp;&nbsp;modifyIORef&nbsp;scrobbles&nbsp;(Map.insert&nbsp;(userName&nbsp;user)&nbsp;topScrobbles)\n&nbsp;&nbsp;readIORef&nbsp;scrobbles</pre>\n    </p>\n    <p>\n        As you may have noticed, they're so similar that, had there been <a href=\"https://en.wikipedia.org/wiki/Rule_of_three_(computer_programming)\">more than two</a>, we might consider extracting the similar parts to a reusable operation.\n    </p>\n    <p>\n        In both cases, we start with the action that enables us to enumerate all the resources (songs or scrobbles) that we're interested in. For each of these, we then invoke the action to get the 'top' resources for that song or scrobble. There's a massive <em>n+1</em> problem here, but you could conceivably parallelize all these queries, as they're independent. Still, it's bound to take much time, possibly hours.\n    </p>\n    <p>\n        You may be wondering why I chose to use <code>IORef</code> values for both actions, instead of more <a href=\"/2015/08/03/idiomatic-or-idiosyncratic\">idiomatic</a> combinator-based expressions. Indeed, that is what I would usually do, but in this case, these two actions are heavily IO-bound already, and it makes the Haskell code more similar to the F# code. Not that that is normally a goal, but here I thought it might help you, the reader, to compare the different code bases.\n    </p>\n    <p>\n        All the data is kept in a <a href=\"https://hackage.haskell.org/package/containers/docs/Data-Map-Strict.html\">Map</a> per action, so two massive maps in all. Once these two actions return, we're done with the <em>read</em> phase of the <a href=\"/2025/01/13/recawr-sandwich\">Recawr Sandwich</a>.\n    </p>\n    <h3 id=\"5378c29512584cab95d484b1bdd97fd9\">\n        Referentially transparent function with local mutation <a href=\"#5378c29512584cab95d484b1bdd97fd9\">#</a>\n    </h3>\n    <p>\n        As a first step, we may wish to turn the <code>getRecommendations</code> action into a <a href=\"https://en.wikipedia.org/wiki/Referential_transparency\">referentially transparent</a> function. If you look through the commits in the Git repository, you can see that I actually did this through a series of <a href=\"https://www.industriallogic.com/blog/whats-this-about-micro-commits/\">micro-commits</a>, but here I only present a more coarse-grained version of the changes I made.\n    </p>\n    <p>\n        In this version, I've removed the <code>srvc</code> (<code>SongService</code>) parameter, and instead added the two maps <code>topScrobbles</code> and <code>topListeners</code>.\n    </p>\n    <p>\n        <pre><span style=\"color:#2b91af;\">getRecommendations</span>&nbsp;<span style=\"color:blue;\">::</span>&nbsp;<span style=\"color:blue;\">Map</span>&nbsp;<span style=\"color:#2b91af;\">String</span>&nbsp;[<span style=\"color:blue;\">Scrobble</span>]&nbsp;<span style=\"color:blue;\">-&gt;</span>&nbsp;<span style=\"color:blue;\">Map</span>&nbsp;<span style=\"color:#2b91af;\">Int</span>&nbsp;[<span style=\"color:blue;\">User</span>]&nbsp;<span style=\"color:blue;\">-&gt;</span>&nbsp;<span style=\"color:#2b91af;\">String</span>&nbsp;<span style=\"color:blue;\">-&gt;</span>&nbsp;<span style=\"color:#2b91af;\">IO</span>&nbsp;[<span style=\"color:blue;\">Song</span>]\ngetRecommendations&nbsp;topScrobbles&nbsp;topListeners&nbsp;un&nbsp;=&nbsp;<span style=\"color:blue;\">do</span>\n&nbsp;&nbsp;<span style=\"color:green;\">--&nbsp;1.&nbsp;Get&nbsp;user&#39;s&nbsp;own&nbsp;top&nbsp;scrobbles\n</span>&nbsp;&nbsp;<span style=\"color:green;\">--&nbsp;2.&nbsp;Get&nbsp;other&nbsp;users&nbsp;who&nbsp;listened&nbsp;to&nbsp;the&nbsp;same&nbsp;songs\n</span>&nbsp;&nbsp;<span style=\"color:green;\">--&nbsp;3.&nbsp;Get&nbsp;top&nbsp;scrobbles&nbsp;of&nbsp;those&nbsp;users\n</span>&nbsp;&nbsp;<span style=\"color:green;\">--&nbsp;4.&nbsp;Aggregate&nbsp;the&nbsp;songs&nbsp;into&nbsp;recommendations\n</span>\n&nbsp;&nbsp;<span style=\"color:blue;\">let</span>&nbsp;scrobbles&nbsp;=&nbsp;Map.findWithDefault&nbsp;<span style=\"color:blue;\">[]</span>&nbsp;un&nbsp;topScrobbles\n&nbsp;&nbsp;<span style=\"color:blue;\">let</span>&nbsp;scrobblesSnapshot&nbsp;=&nbsp;<span style=\"color:blue;\">take</span>&nbsp;100&nbsp;$&nbsp;sortOn&nbsp;(Down&nbsp;.&nbsp;scrobbleCount)&nbsp;scrobbles\n \n&nbsp;&nbsp;recommendationCandidates&nbsp;&lt;-&nbsp;newIORef&nbsp;<span style=\"color:blue;\">[]</span>\n&nbsp;&nbsp;forM_&nbsp;scrobblesSnapshot&nbsp;$&nbsp;\\scrobble&nbsp;-&gt;&nbsp;<span style=\"color:blue;\">do</span>\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">let</span>&nbsp;otherListeners&nbsp;=\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Map.findWithDefault&nbsp;<span style=\"color:blue;\">[]</span>&nbsp;(songId&nbsp;$&nbsp;scrobbledSong&nbsp;scrobble)&nbsp;topListeners\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">let</span>&nbsp;otherListenersSnapshot&nbsp;=\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">take</span>&nbsp;20&nbsp;$\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sortOn&nbsp;(Down&nbsp;.&nbsp;userScrobbleCount)&nbsp;$\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">filter</span>&nbsp;((10_000&nbsp;&lt;=)&nbsp;.&nbsp;userScrobbleCount)&nbsp;otherListeners\n \n&nbsp;&nbsp;&nbsp;&nbsp;forM_&nbsp;otherListenersSnapshot&nbsp;$&nbsp;\\otherListener&nbsp;-&gt;&nbsp;<span style=\"color:blue;\">do</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">let</span>&nbsp;otherScrobbles&nbsp;=\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Map.findWithDefault&nbsp;<span style=\"color:blue;\">[]</span>&nbsp;(userName&nbsp;otherListener)&nbsp;topScrobbles\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">let</span>&nbsp;otherScrobblesSnapshot&nbsp;=\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">take</span>&nbsp;10&nbsp;$\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sortOn&nbsp;(Down&nbsp;.&nbsp;songRating&nbsp;.&nbsp;scrobbledSong)&nbsp;$\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">filter</span>&nbsp;(songHasVerifiedArtist&nbsp;.&nbsp;scrobbledSong)&nbsp;otherScrobbles\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;forM_&nbsp;otherScrobblesSnapshot&nbsp;$&nbsp;\\otherScrobble&nbsp;-&gt;&nbsp;<span style=\"color:blue;\">do</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">let</span>&nbsp;song&nbsp;=&nbsp;scrobbledSong&nbsp;otherScrobble\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;modifyIORef&nbsp;recommendationCandidates&nbsp;(song&nbsp;:)\n \n&nbsp;&nbsp;recommendations&nbsp;&lt;-&nbsp;readIORef&nbsp;recommendationCandidates\n&nbsp;&nbsp;<span style=\"color:blue;\">return</span>&nbsp;$&nbsp;<span style=\"color:blue;\">take</span>&nbsp;200&nbsp;$&nbsp;sortOn&nbsp;(Down&nbsp;.&nbsp;songRating)&nbsp;recommendations</pre>\n    </p>\n    <p>\n        You've probably noticed that this action still looks impure, since it returns <code>IO [Song]</code>. Even so, it's referentially transparent, since it's fully deterministic and without side effects.\n    </p>\n    <p>\n        The way I refactored the action, this order of changes was what made most sense to me. Getting rid of the <code>SongService</code> parameter was more important to me than getting rid of the <code>IO</code> wrapper.\n    </p>\n    <p>\n        In any case, this is only an interim state towards a more idiomatic pure Haskell function.\n    </p>\n    <h3 id=\"5eba5b02d8724403b8ea6f26054fc9af\">\n        A single expression <a href=\"#5eba5b02d8724403b8ea6f26054fc9af\">#</a>\n    </h3>\n    <p>\n        A curious property of expression-based languages is that you can conceivably write functions in 'one line of code'. Granted, it would often be a terribly wide line, not at all readable, a beast to maintain, and often with poor performance, so not something you'd want to alway do.\n    </p>\n    <p>\n        In this case, however, we <em>can</em> do that, although in order to stay within an <a href=\"/2019/11/04/the-80-24-rule\">80x24 box</a>, we break the expression over multiple lines.\n    </p>\n    <p>\n        <pre><span style=\"color:#2b91af;\">getRecommendations</span>&nbsp;<span style=\"color:blue;\">::</span>&nbsp;<span style=\"color:blue;\">Map</span>&nbsp;<span style=\"color:#2b91af;\">String</span>&nbsp;[<span style=\"color:blue;\">Scrobble</span>]&nbsp;<span style=\"color:blue;\">-&gt;</span>&nbsp;<span style=\"color:blue;\">Map</span>&nbsp;<span style=\"color:#2b91af;\">Int</span>&nbsp;[<span style=\"color:blue;\">User</span>]&nbsp;<span style=\"color:blue;\">-&gt;</span>&nbsp;<span style=\"color:#2b91af;\">String</span>&nbsp;<span style=\"color:blue;\">-&gt;</span>&nbsp;[<span style=\"color:blue;\">Song</span>]\ngetRecommendations&nbsp;topScrobbles&nbsp;topListeners&nbsp;un&nbsp;=\n&nbsp;&nbsp;<span style=\"color:green;\">--&nbsp;1.&nbsp;Get&nbsp;user&#39;s&nbsp;own&nbsp;top&nbsp;scrobbles\n</span>&nbsp;&nbsp;<span style=\"color:green;\">--&nbsp;2.&nbsp;Get&nbsp;other&nbsp;users&nbsp;who&nbsp;listened&nbsp;to&nbsp;the&nbsp;same&nbsp;songs\n</span>&nbsp;&nbsp;<span style=\"color:green;\">--&nbsp;3.&nbsp;Get&nbsp;top&nbsp;scrobbles&nbsp;of&nbsp;those&nbsp;users\n</span>&nbsp;&nbsp;<span style=\"color:green;\">--&nbsp;4.&nbsp;Aggregate&nbsp;the&nbsp;songs&nbsp;into&nbsp;recommendations\n</span>\n&nbsp;&nbsp;<span style=\"color:blue;\">take</span>&nbsp;200&nbsp;$\n&nbsp;&nbsp;sortOn&nbsp;(Down&nbsp;.&nbsp;songRating)&nbsp;$\n&nbsp;&nbsp;<span style=\"color:blue;\">fmap</span>&nbsp;scrobbledSong&nbsp;$\n&nbsp;&nbsp;(\\otherListener&nbsp;-&gt;&nbsp;<span style=\"color:blue;\">take</span>&nbsp;10&nbsp;$\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sortOn&nbsp;(Down&nbsp;.&nbsp;songRating&nbsp;.&nbsp;scrobbledSong)&nbsp;$\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">filter</span>&nbsp;(songHasVerifiedArtist&nbsp;.&nbsp;scrobbledSong)&nbsp;$\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Map.findWithDefault&nbsp;<span style=\"color:blue;\">[]</span>&nbsp;(userName&nbsp;otherListener)&nbsp;topScrobbles)&nbsp;=&lt;&lt;\n&nbsp;&nbsp;(\\scrobble&nbsp;-&gt;&nbsp;<span style=\"color:blue;\">take</span>&nbsp;20&nbsp;$\n&nbsp;&nbsp;&nbsp;&nbsp;sortOn&nbsp;(Down&nbsp;.&nbsp;userScrobbleCount)&nbsp;$\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">filter</span>&nbsp;((10_000&nbsp;&lt;=)&nbsp;.&nbsp;userScrobbleCount)&nbsp;$\n&nbsp;&nbsp;&nbsp;&nbsp;Map.findWithDefault&nbsp;<span style=\"color:blue;\">[]</span>&nbsp;(songId&nbsp;$&nbsp;scrobbledSong&nbsp;scrobble)&nbsp;topListeners)&nbsp;=&lt;&lt;\n&nbsp;&nbsp;<span style=\"color:blue;\">take</span>&nbsp;100\n&nbsp;&nbsp;(sortOn&nbsp;(Down&nbsp;.&nbsp;scrobbleCount)&nbsp;$&nbsp;Map.findWithDefault&nbsp;<span style=\"color:blue;\">[]</span>&nbsp;un&nbsp;topScrobbles)</pre>\n    </p>\n    <p>\n        This snapshot also got rid of the <code>IORef</code> value, and <code>IO</code> in general. The function is still referentially transparent, but now Haskell can also see that.\n    </p>\n    <p>\n        Even so, this looks dense and confusing. It doesn't help that Haskell should usually be read right-to-left, and bottom-to-top. Is it possible to improve the readability of this function?\n    </p>\n    <h3 id=\"c621ff8635bd4eabaa085b7b7d4a8c75\">\n        Composition from smaller functions <a href=\"#c621ff8635bd4eabaa085b7b7d4a8c75\">#</a>\n    </h3>\n    <p>\n        To improve readability and maintainability, we may now extract helper functions. The first one easily suggests itself.\n    </p>\n    <p>\n        <pre><span style=\"color:#2b91af;\">getUsersOwnTopScrobbles</span>&nbsp;<span style=\"color:blue;\">::</span>&nbsp;<span style=\"color:blue;\">Ord</span>&nbsp;k&nbsp;<span style=\"color:blue;\">=&gt;</span>&nbsp;<span style=\"color:blue;\">Map</span>&nbsp;k&nbsp;[<span style=\"color:blue;\">Scrobble</span>]&nbsp;<span style=\"color:blue;\">-&gt;</span>&nbsp;k&nbsp;<span style=\"color:blue;\">-&gt;</span>&nbsp;[<span style=\"color:blue;\">Scrobble</span>]\ngetUsersOwnTopScrobbles&nbsp;topScrobbles&nbsp;un&nbsp;=\n&nbsp;&nbsp;<span style=\"color:blue;\">take</span>&nbsp;100&nbsp;$\n&nbsp;&nbsp;sortOn&nbsp;(Down&nbsp;.&nbsp;scrobbleCount)&nbsp;$&nbsp;Map.findWithDefault&nbsp;<span style=\"color:blue;\">[]</span>&nbsp;un&nbsp;topScrobbles</pre>\n    </p>\n    <p>\n        Each of the subexpressions in the above code listing are candidates for the same kind of treatment, like this one:\n    </p>\n    <p>\n        <pre><span style=\"color:#2b91af;\">getOtherUsersWhoListenedToTheSameSongs</span>&nbsp;<span style=\"color:blue;\">::</span>&nbsp;<span style=\"color:blue;\">Map</span>&nbsp;<span style=\"color:#2b91af;\">Int</span>&nbsp;[<span style=\"color:blue;\">User</span>]&nbsp;<span style=\"color:blue;\">-&gt;</span>&nbsp;<span style=\"color:blue;\">Scrobble</span>&nbsp;<span style=\"color:blue;\">-&gt;</span>&nbsp;[<span style=\"color:blue;\">User</span>]\ngetOtherUsersWhoListenedToTheSameSongs&nbsp;topListeners&nbsp;scrobble&nbsp;=\n&nbsp;&nbsp;<span style=\"color:blue;\">take</span>&nbsp;20&nbsp;$\n&nbsp;&nbsp;sortOn&nbsp;(Down&nbsp;.&nbsp;userScrobbleCount)&nbsp;$\n&nbsp;&nbsp;<span style=\"color:blue;\">filter</span>&nbsp;((10_000&nbsp;&lt;=)&nbsp;.&nbsp;userScrobbleCount)&nbsp;$\n&nbsp;&nbsp;Map.findWithDefault&nbsp;<span style=\"color:blue;\">[]</span>&nbsp;(songId&nbsp;$&nbsp;scrobbledSong&nbsp;scrobble)&nbsp;topListeners</pre>\n    </p>\n    <p>\n        You can't see it from the code listings themselves, but the module doesn't export these functions. They remain implementation details.\n    </p>\n    <p>\n        With a few more helper functions, you can now implement the <code>getRecommendations</code> function by composing the helpers.\n    </p>\n    <p>\n        <pre><span style=\"color:#2b91af;\">getRecommendations</span>&nbsp;<span style=\"color:blue;\">::</span>&nbsp;<span style=\"color:blue;\">Map</span>&nbsp;<span style=\"color:#2b91af;\">String</span>&nbsp;[<span style=\"color:blue;\">Scrobble</span>]&nbsp;<span style=\"color:blue;\">-&gt;</span>&nbsp;<span style=\"color:blue;\">Map</span>&nbsp;<span style=\"color:#2b91af;\">Int</span>&nbsp;[<span style=\"color:blue;\">User</span>]&nbsp;<span style=\"color:blue;\">-&gt;</span>&nbsp;<span style=\"color:#2b91af;\">String</span>&nbsp;<span style=\"color:blue;\">-&gt;</span>&nbsp;[<span style=\"color:blue;\">Song</span>]\ngetRecommendations&nbsp;topScrobbles&nbsp;topListeners&nbsp;un&nbsp;=\n&nbsp;&nbsp;<span style=\"color:green;\">--&nbsp;1.&nbsp;Get&nbsp;user&#39;s&nbsp;own&nbsp;top&nbsp;scrobbles\n</span>&nbsp;&nbsp;<span style=\"color:green;\">--&nbsp;2.&nbsp;Get&nbsp;other&nbsp;users&nbsp;who&nbsp;listened&nbsp;to&nbsp;the&nbsp;same&nbsp;songs\n</span>&nbsp;&nbsp;<span style=\"color:green;\">--&nbsp;3.&nbsp;Get&nbsp;top&nbsp;scrobbles&nbsp;of&nbsp;those&nbsp;users\n</span>&nbsp;&nbsp;<span style=\"color:green;\">--&nbsp;4.&nbsp;Aggregate&nbsp;the&nbsp;songs&nbsp;into&nbsp;recommendations\n</span>\n&nbsp;&nbsp;aggregateSongsIntoRecommendations&nbsp;$\n&nbsp;&nbsp;getTopSongsOfOtherUser&nbsp;topScrobbles&nbsp;=&lt;&lt;\n&nbsp;&nbsp;getOtherUsersWhoListenedToTheSameSongs&nbsp;topListeners&nbsp;=&lt;&lt;\n&nbsp;&nbsp;getUsersOwnTopScrobbles&nbsp;topScrobbles&nbsp;un</pre>\n    </p>\n    <p>\n        Since Haskell by default composes from right to left, when you break such a composition over multiple lines (in order to stay within a <a href=\"/2019/11/04/the-80-24-rule\">80x24</a> box), it should be read bottom-up.\n    </p>\n    <p>\n        You can remedy this situation by importing the <code>&</code> operator from <a href=\"https://hackage.haskell.org/package/base-4.21.0.0/docs/Data-Function.html\">Data.Function</a>:\n    </p>\n    <p>\n        <pre><span style=\"color:#2b91af;\">getRecommendations</span>&nbsp;<span style=\"color:blue;\">::</span>&nbsp;<span style=\"color:blue;\">Map</span>&nbsp;<span style=\"color:#2b91af;\">String</span>&nbsp;[<span style=\"color:blue;\">Scrobble</span>]&nbsp;<span style=\"color:blue;\">-&gt;</span>&nbsp;<span style=\"color:blue;\">Map</span>&nbsp;<span style=\"color:#2b91af;\">Int</span>&nbsp;[<span style=\"color:blue;\">User</span>]&nbsp;<span style=\"color:blue;\">-&gt;</span>&nbsp;<span style=\"color:#2b91af;\">String</span>&nbsp;<span style=\"color:blue;\">-&gt;</span>&nbsp;[<span style=\"color:blue;\">Song</span>]\ngetRecommendations&nbsp;topScrobbles&nbsp;topListeners&nbsp;un&nbsp;=&nbsp;\n&nbsp;&nbsp;getUsersOwnTopScrobbles&nbsp;topScrobbles&nbsp;un&nbsp;&gt;&gt;=\n&nbsp;&nbsp;getOtherUsersWhoListenedToTheSameSongs&nbsp;topListeners&nbsp;&gt;&gt;=\n&nbsp;&nbsp;getTopSongsOfOtherUser&nbsp;topScrobbles&nbsp;&amp;\n&nbsp;&nbsp;aggregateSongsIntoRecommendations</pre>\n    </p>\n    <p>\n        Notice that I've named each of the helper functions after the code comments that accompanied the previous incarnations of this function. If we consider <a href=\"http://butunclebob.com/ArticleS.TimOttinger.ApologizeIncode\">code comments apologies for not properly organizing the code</a>, we've now managed to structure it in such a way that those apologies are no longer required.\n    </p>\n    <h3 id=\"b934bca9ccf5403491d86a418d0ca8a3\">\n        Conclusion <a href=\"#b934bca9ccf5403491d86a418d0ca8a3\">#</a>\n    </h3>\n    <p>\n        If you accept the (perhaps preposterous) assumption that it's possible to fit the required data in <a href=\"https://en.wikipedia.org/wiki/Persistent_data_structure\">persistent data structures</a>, refactoring the recommendation algorithm to a pure function isn't that difficult. That's the pure part of a Recawr Sandwich. While I haven't shown the actual sandwich here, it's quite straightforward. You can find it in the tests in the Haskell Git repository. Also, once you've moved all the data collection to the boundary of the application, you may no longer need the <code>SongService</code> type class.\n    </p>\n    <p>\n        I find the final incarnation of the code shown here to be quite attractive. While I've kept the helper functions private to the module, it's always an option to export them if you find that warranted. This could improve testability of the overall code base, albeit at the risk of increasing the surface area of the API that you have to maintain and secure.\n    </p>\n    <p>\n        There are always trade-offs to be considered. Even if you, eventually, find that for this particular example, the input data size is just <em>too</em> big to make this alternative viable, there are, in my experience, many other situations when this kind of architecture is a good solution. Even if the input size is a decent amount of megabytes, the simplification offered by an <a href=\"/2020/03/02/impureim-sandwich\">Impureim Sandwich</a> may trump the larger memory footprint. As always, if you're concerned about performance, <a href=\"https://ericlippert.com/2012/12/17/performance-rant/\">measure it</a>.\n    </p>\n    <p>\n        This article concludes the overview of using an Recawr Sandwich to address the problem. Since it's, admittedly, a bit of a stretch to imagine running a program that uses terabytes (or more) of memory, we now turn to alternative architectures.\n    </p>\n    <p>\n        <strong>Next:</strong> <a href=\"/2025/06/09/song-recommendations-from-combinators\">Song recommendations from combinators</a>.\n    </p>\n</div><hr>\n      This blog is totally free, but if you like it, please consider <a href=\"https://blog.ploeh.dk/support\">supporting it</a>.",
      "Content": null,
      "Language": "en-us",
      "Link": "https://blog.ploeh.dk/2025/05/26/song-recommendations-as-a-haskell-impureim-sandwich/"
    },
    {
      "FeedId": "https://blog.ploeh.dk",
      "ItemId": "https://blog.ploeh.dk/2025/05/19/song-recommendations-as-an-f-impureim-sandwich",
      "Title": "Song recommendations as an F# Impureim Sandwich",
      "PublishDate": "2025-05-19T08:06:00+02:00",
      "Summary": "\n\n\n<div id=\"post\">\n    <p>\n        <em>A pure function on potentially massive data.</em>\n    </p>\n    <p>\n        This article is part of a larger article series titled <a href=\"/2025/04/07/alternative-ways-to-design-with-functional-programming\">Alternative ways to design with functional programming</a>. In the <a href=\"/2025/05/05/song-recommendations-as-a-c-impureim-sandwich\">previous article</a>, you saw an example of applying the <a href=\"/2020/03/02/impureim-sandwich\">Impureim Sandwich</a> pattern to the problem at hand: A song recommendation engine that sifts through much historical data.\n    </p>\n    <p>\n        As already covered in <a href=\"/2025/04/28/song-recommendations-as-an-impureim-sandwich\">Song recommendations as an Impureim Sandwich</a>, the drawback, if you will, of a <a href=\"/2025/01/13/recawr-sandwich\">Recawr Sandwich</a> is that you need to collect all data from impure sources before you can pass it to a <a href=\"https://en.wikipedia.org/wiki/Pure_function\">pure function</a>. It may happen that you need so much data that this strategy becomes untenable. <a href=\"/2025/05/12/song-recommendations-proof-of-concept-memory-measurements\">This may be the case here</a>, but surprisingly often, what strikes us humans as being vast amounts are peanuts for computers.\n    </p>\n    <p>\n        So even if you don't find this particular example realistic, I'll forge ahead and show how to apply the Recawr Sandwich pattern to this problem. This is essentially a port to <a href=\"https://fsharp.org/\">F#</a> of the C# code from the previous article. If you rather want to see some more realistic architectures to deal with the overall problem, you can always go back to the table of contents in the <a href=\"/2025/04/07/alternative-ways-to-design-with-functional-programming\">first article of the series</a>.\n    </p>\n    <p>\n        In this article, I'm working with the <em>fsharp-pure-function</em> branch of the Git repository.\n    </p>\n    <h3 id=\"090279ba52c044c1b9a38d6d29ce26f1\">\n        Collecting all the data <a href=\"#090279ba52c044c1b9a38d6d29ce26f1\">#</a>\n    </h3>\n    <p>\n        Like in the previous article, we may start by adding two more members to the <code>SongService</code> interface, which will enable us to enumerate all songs and all users. The full interface, with all four methods, then looks like this:\n    </p>\n    <p>\n        <pre><span style=\"color:blue;\">type</span>&nbsp;<span style=\"color:#2b91af;\">SongService</span>&nbsp;=\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">abstract</span>&nbsp;<span style=\"font-weight:bold;color:#74531f;\">GetAllSongs</span>&nbsp;:&nbsp;<span style=\"color:#2b91af;\">unit</span>&nbsp;<span style=\"color:blue;\">-&gt;</span>&nbsp;<span style=\"color:#2b91af;\">Task</span>&lt;<span style=\"color:#2b91af;\">IEnumerable</span>&lt;<span style=\"color:#2b91af;\">Song</span>&gt;&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">abstract</span>&nbsp;<span style=\"font-weight:bold;color:#74531f;\">GetAllUsers</span>&nbsp;:&nbsp;<span style=\"color:#2b91af;\">unit</span>&nbsp;<span style=\"color:blue;\">-&gt;</span>&nbsp;<span style=\"color:#2b91af;\">Task</span>&lt;<span style=\"color:#2b91af;\">IEnumerable</span>&lt;<span style=\"color:#2b91af;\">User</span>&gt;&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">abstract</span>&nbsp;<span style=\"font-weight:bold;color:#74531f;\">GetTopListenersAsync</span>&nbsp;:&nbsp;songId&nbsp;:&nbsp;<span style=\"color:#2b91af;\">int</span>&nbsp;<span style=\"color:blue;\">-&gt;</span>&nbsp;<span style=\"color:#2b91af;\">Task</span>&lt;<span style=\"color:#2b91af;\">IReadOnlyCollection</span>&lt;<span style=\"color:#2b91af;\">User</span>&gt;&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">abstract</span>&nbsp;<span style=\"font-weight:bold;color:#74531f;\">GetTopScrobblesAsync</span>&nbsp;:&nbsp;userName&nbsp;:&nbsp;<span style=\"color:#2b91af;\">string</span>&nbsp;<span style=\"color:blue;\">-&gt;</span>&nbsp;<span style=\"color:#2b91af;\">Task</span>&lt;<span style=\"color:#2b91af;\">IReadOnlyCollection</span>&lt;<span style=\"color:#2b91af;\">Scrobble</span>&gt;&gt;</pre>\n    </p>\n    <p>\n        If you compare with the interface definition shown in the article <a href=\"/2025/04/14/porting-song-recommendations-to-f\">Porting song recommendations to F#</a>, you'll see that <code>GetAllSongs</code> and <code>GetAllUsers</code> are the new methods.\n    </p>\n    <p>\n        They enable you to collect all top listeners, and all top scrobbles, even though it may take some time. To gather all the top listeners, we may add this <code>collectAllTopListeners</code> action:\n    </p>\n    <p>\n        <pre><span style=\"color:blue;\">let</span>&nbsp;<span style=\"color:#74531f;\">collectAllTopListeners</span>&nbsp;(<span style=\"font-weight:bold;color:#1f377f;\">songService</span>&nbsp;:&nbsp;<span style=\"color:#2b91af;\">SongService</span>)&nbsp;=&nbsp;<span style=\"color:blue;\">task</span>&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">let</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">d</span>&nbsp;=&nbsp;<span style=\"color:#2b91af;\">Dictionary</span>&lt;<span style=\"color:#2b91af;\">int</span>,&nbsp;<span style=\"color:#2b91af;\">IReadOnlyCollection</span>&lt;<span style=\"color:#2b91af;\">User</span>&gt;&gt;&nbsp;()\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">let!</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">songs</span>&nbsp;=&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">songService</span>.<span style=\"font-weight:bold;color:#74531f;\">GetAllSongs</span>&nbsp;()\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">do!</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">songs</span>&nbsp;|&gt;&nbsp;<span style=\"color:#2b91af;\">TaskSeq</span>.<span style=\"color:#74531f;\">iter</span>&nbsp;(<span style=\"color:blue;\">fun</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">s</span>&nbsp;<span style=\"color:blue;\">-&gt;</span>&nbsp;<span style=\"color:blue;\">task</span>&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">let!</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">topListeners</span>&nbsp;=&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">songService</span>.<span style=\"font-weight:bold;color:#74531f;\">GetTopListenersAsync</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">s</span>.Id\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">d</span>.<span style=\"font-weight:bold;color:#74531f;\">Add</span>&nbsp;(<span style=\"font-weight:bold;color:#1f377f;\">s</span>.Id,&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">topListeners</span>)&nbsp;}&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">return</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">d</span>&nbsp;:&gt;&nbsp;<span style=\"color:#2b91af;\">IReadOnlyDictionary</span>&lt;_,&nbsp;_&gt;&nbsp;}</pre>\n    </p>\n    <p>\n        Likewise, you can amass all the top scrobbles with a similar action:\n    </p>\n    <p>\n        <pre><span style=\"color:blue;\">let</span>&nbsp;<span style=\"color:#74531f;\">collectAllTopScrobbles</span>&nbsp;(<span style=\"font-weight:bold;color:#1f377f;\">songService</span>&nbsp;:&nbsp;<span style=\"color:#2b91af;\">SongService</span>)&nbsp;=&nbsp;<span style=\"color:blue;\">task</span>&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">let</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">d</span>&nbsp;=&nbsp;<span style=\"color:#2b91af;\">Dictionary</span>&lt;<span style=\"color:#2b91af;\">string</span>,&nbsp;<span style=\"color:#2b91af;\">IReadOnlyCollection</span>&lt;<span style=\"color:#2b91af;\">Scrobble</span>&gt;&gt;&nbsp;()\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">let!</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">users</span>&nbsp;=&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">songService</span>.<span style=\"font-weight:bold;color:#74531f;\">GetAllUsers</span>&nbsp;()\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">do!</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">users</span>&nbsp;|&gt;&nbsp;<span style=\"color:#2b91af;\">TaskSeq</span>.<span style=\"color:#74531f;\">iter</span>&nbsp;(<span style=\"color:blue;\">fun</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">u</span>&nbsp;<span style=\"color:blue;\">-&gt;</span>&nbsp;<span style=\"color:blue;\">task</span>&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">let!</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">topScrobbles</span>&nbsp;=&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">songService</span>.<span style=\"font-weight:bold;color:#74531f;\">GetTopScrobblesAsync</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">u</span>.UserName\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">d</span>.<span style=\"font-weight:bold;color:#74531f;\">Add</span>&nbsp;(<span style=\"font-weight:bold;color:#1f377f;\">u</span>.UserName,&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">topScrobbles</span>)&nbsp;}&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">return</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">d</span>&nbsp;:&gt;&nbsp;<span style=\"color:#2b91af;\">IReadOnlyDictionary</span>&lt;_,&nbsp;_&gt;&nbsp;}</pre>\n    </p>\n    <p>\n        As you may have noticed, they're so similar that, had there been <a href=\"https://en.wikipedia.org/wiki/Rule_of_three_(computer_programming)\">more than two</a>, we might consider extracting the similar parts to a reusable operation.\n    </p>\n    <p>\n        In both cases, we start with the action that enables us to enumerate all the resources (songs or scrobbles) that we're interested in. For each of these, we then invoke the action to get the 'top' resources for that song or scrobble. There's a massive <em>n+1</em> problem here, but you could conceivably parallelize all these queries, as they're independent. Still, it's bound to take much time, possibly hours.\n    </p>\n    <p>\n        All the data is kept in a dictionary per action, so two massive dictionaries in all. Once these two actions return, we're done with the <em>read</em> phase of the Recawr Sandwich.\n    </p>\n    <h3 id=\"5194a0ec946046068d42c086f7fd2697\">\n        Traversals <a href=\"#5194a0ec946046068d42c086f7fd2697\">#</a>\n    </h3>\n    <p>\n        You may have wondered about the above <code>TaskSeq.iter</code> action. That's not part of the standard library. What is it, and where does it come from?\n    </p>\n    <p>\n        It's a specialized <a href=\"/2024/11/11/traversals\">traversal</a>, designed to make asynchronous <a href=\"https://en.wikipedia.org/wiki/Command%E2%80%93query_separation\">Commands</a> more streamlined.\n    </p>\n    <p>\n        <pre><span style=\"color:blue;\">let</span>&nbsp;<span style=\"color:#74531f;\">iter</span>&nbsp;<span style=\"color:#74531f;\">f</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">xs</span>&nbsp;=&nbsp;<span style=\"color:blue;\">task</span>&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">let!</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">units</span>&nbsp;=&nbsp;<span style=\"color:#74531f;\">traverse</span>&nbsp;<span style=\"color:#74531f;\">f</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">xs</span>\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">Seq</span>.<span style=\"color:#74531f;\">iter</span>&nbsp;<span style=\"color:#74531f;\">id</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">units</span>&nbsp;}</pre>\n    </p>\n    <p>\n        If you've ever wondered why the <em>identity function</em> (<code>id</code>) is useful, here's an example. In the first line of code, <code>units</code> is a <code>unit seq</code> value; i.e. a sequence of <code>unit</code> values. To make <code>TaskSeq.iter</code> as easy to use as possible, it should turn that multitude of <code>unit</code> values into a single <code>unit</code> value. There's more than one way to do that, but I found that using <code>Seq.iter</code> was about the most succinct option I could think of. Be that as it may, <code>Seq.iter</code> requires as an argument a function that returns <code>unit</code>, and since we already have <code>unit</code> values, <code>id</code> does the job.\n    </p>\n    <p>\n        The <code>iter</code> action uses the <code>TaskSeq</code> module's <code>traverse</code> function, which is defined like this:\n    </p>\n    <p>\n        <pre><span style=\"color:blue;\">let</span>&nbsp;<span style=\"color:#74531f;\">traverse</span>&nbsp;<span style=\"color:#74531f;\">f</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">xs</span>&nbsp;=\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">let</span>&nbsp;<span style=\"color:#74531f;\">go</span>&nbsp;<span style=\"color:#1f377f;\">acc</span>&nbsp;<span style=\"color:#1f377f;\">x</span>&nbsp;=&nbsp;<span style=\"color:blue;\">task</span>&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">let!</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">x&#39;</span>&nbsp;=&nbsp;<span style=\"color:#1f377f;\">x</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">let!</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">acc&#39;</span>&nbsp;=&nbsp;<span style=\"color:#1f377f;\">acc</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">return</span>&nbsp;<span style=\"color:#2b91af;\">Seq</span>.<span style=\"color:#74531f;\">append</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">acc&#39;</span>&nbsp;[<span style=\"font-weight:bold;color:#1f377f;\">x&#39;</span>]&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">xs</span>&nbsp;|&gt;&nbsp;<span style=\"color:#2b91af;\">Seq</span>.<span style=\"color:#74531f;\">map</span>&nbsp;<span style=\"color:#74531f;\">f</span>&nbsp;|&gt;&nbsp;<span style=\"color:#2b91af;\">Seq</span>.<span style=\"color:#74531f;\">fold</span>&nbsp;<span style=\"color:#74531f;\">go</span>&nbsp;(<span style=\"color:blue;\">task</span>&nbsp;{&nbsp;<span style=\"color:blue;\">return</span>&nbsp;[]&nbsp;})</pre>\n    </p>\n    <p>\n        The type of <code>traverse</code> is <code>(&#39;a&nbsp;-&gt;&nbsp;#Task&lt;&#39;c&gt;)&nbsp;-&gt;&nbsp;&#39;a&nbsp;seq&nbsp;-&gt;&nbsp;Task&lt;&#39;c&nbsp;seq&gt;</code>; that is, it applies an asynchronous action to each of a sequence of <code>'a</code> values, and returns an asynchronous workflow that contains a sequence of <code>'c</code> values.\n    </p>\n    <h3 id=\"16c034285a8d41b39923e27c6b81788e\">\n        Dictionary lookups <a href=\"#16c034285a8d41b39923e27c6b81788e\">#</a>\n    </h3>\n    <p>\n        In .NET, queries that may fail are <a href=\"/2015/08/03/idiomatic-or-idiosyncratic\">idiomatically</a> modelled with methods that take <code>out</code> parameters. This is also true for dictionary lookups. Since that kind of design doesn't compose well, it's useful to add a little helper function that instead may return an empty value. While you'd <a href=\"/2019/07/15/tester-doer-isomorphisms\">generally do that by returning an option value</a>, in this case, an empty collection is more appropriate.\n    </p>\n    <p>\n        <pre><span style=\"color:blue;\">let</span>&nbsp;<span style=\"color:#74531f;\">findOrEmpty</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">key</span>&nbsp;(<span style=\"font-weight:bold;color:#1f377f;\">d</span>&nbsp;:&nbsp;<span style=\"color:#2b91af;\">IReadOnlyDictionary</span>&lt;_,&nbsp;<span style=\"color:#2b91af;\">IReadOnlyCollection</span>&lt;_&gt;&gt;)&nbsp;=\n&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">match</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">d</span>.<span style=\"font-weight:bold;color:#74531f;\">TryGetValue</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">key</span>&nbsp;<span style=\"color:blue;\">with</span>\n&nbsp;&nbsp;&nbsp;|&nbsp;<span style=\"color:blue;\">true</span>,&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">v</span>&nbsp;<span style=\"color:blue;\">-&gt;</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">v</span>\n&nbsp;&nbsp;&nbsp;|&nbsp;_&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">-&gt;</span>&nbsp;<span style=\"color:#2b91af;\">List</span>.empty</pre>\n    </p>\n    <p>\n        You may have noticed that I also added a similar helper function in <a href=\"/2025/05/05/song-recommendations-as-a-c-impureim-sandwich\">the C# example</a>, although there I called it <code>GetOrEmpty</code>.\n    </p>\n    <h3 id=\"cddd7cc72cf748b995fc0b58b0971c78\">\n        Pure function with local mutation <a href=\"#cddd7cc72cf748b995fc0b58b0971c78\">#</a>\n    </h3>\n    <p>\n        As a first step, we may wish to turn the <code>GetRecommendationsAsync</code> method into a pure function. If you look through the commits in the Git repository, you can see that I actually did this through a series of <a href=\"https://www.industriallogic.com/blog/whats-this-about-micro-commits/\">micro-commits</a>, but here I only present a more coarse-grained version of the changes I made.\n    </p>\n    <p>\n        Instead of a method on a class, we now have a self-contained function that takes, as arguments, two dictionaries, but no <code>SongService</code> dependency.\n    </p>\n    <p>\n        <pre><span style=\"color:blue;\">let</span>&nbsp;<span style=\"color:#74531f;\">getRecommendations</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">topScrobbles</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">topListeners</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">userName</span>&nbsp;=\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:green;\">//&nbsp;1.&nbsp;Get&nbsp;user&#39;s&nbsp;own&nbsp;top&nbsp;scrobbles</span>\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:green;\">//&nbsp;2.&nbsp;Get&nbsp;other&nbsp;users&nbsp;who&nbsp;listened&nbsp;to&nbsp;the&nbsp;same&nbsp;songs</span>\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:green;\">//&nbsp;3.&nbsp;Get&nbsp;top&nbsp;scrobbles&nbsp;of&nbsp;those&nbsp;users</span>\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:green;\">//&nbsp;4.&nbsp;Aggregate&nbsp;the&nbsp;songs&nbsp;into&nbsp;recommendations</span>\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">let</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">scrobbles</span>&nbsp;=&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">topScrobbles</span>&nbsp;|&gt;&nbsp;<span style=\"color:#2b91af;\">Dict</span>.<span style=\"color:#74531f;\">findOrEmpty</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">userName</span>\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">let</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">scrobblesSnapshot</span>&nbsp;=\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">scrobbles</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&gt;&nbsp;<span style=\"color:#2b91af;\">Seq</span>.<span style=\"color:#74531f;\">sortByDescending</span>&nbsp;(<span style=\"color:blue;\">fun</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">s</span>&nbsp;<span style=\"color:blue;\">-&gt;</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">s</span>.ScrobbleCount)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&gt;&nbsp;<span style=\"color:#2b91af;\">Seq</span>.<span style=\"color:#74531f;\">truncate</span>&nbsp;100\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&gt;&nbsp;<span style=\"color:#2b91af;\">Seq</span>.<span style=\"color:#74531f;\">toList</span>\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">let</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">recommendationCandidates</span>&nbsp;=&nbsp;<span style=\"color:#2b91af;\">ResizeArray</span>&nbsp;()\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">for</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">scrobble</span>&nbsp;<span style=\"color:blue;\">in</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">scrobblesSnapshot</span>&nbsp;<span style=\"color:blue;\">do</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">let</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">otherListeners</span>&nbsp;=\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">topListeners</span>&nbsp;|&gt;&nbsp;<span style=\"color:#2b91af;\">Dict</span>.<span style=\"color:#74531f;\">findOrEmpty</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">scrobble</span>.Song.Id\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">let</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">otherListenersSnapshot</span>&nbsp;=\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">otherListeners</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&gt;&nbsp;<span style=\"color:#2b91af;\">Seq</span>.<span style=\"color:#74531f;\">filter</span>&nbsp;(<span style=\"color:blue;\">fun</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">u</span>&nbsp;<span style=\"color:blue;\">-&gt;</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">u</span>.TotalScrobbleCount&nbsp;&gt;=&nbsp;10_000)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&gt;&nbsp;<span style=\"color:#2b91af;\">Seq</span>.<span style=\"color:#74531f;\">sortByDescending</span>&nbsp;(<span style=\"color:blue;\">fun</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">u</span>&nbsp;<span style=\"color:blue;\">-&gt;</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">u</span>.TotalScrobbleCount)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&gt;&nbsp;<span style=\"color:#2b91af;\">Seq</span>.<span style=\"color:#74531f;\">truncate</span>&nbsp;20\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&gt;&nbsp;<span style=\"color:#2b91af;\">Seq</span>.<span style=\"color:#74531f;\">toList</span>\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">for</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">otherListener</span>&nbsp;<span style=\"color:blue;\">in</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">otherListenersSnapshot</span>&nbsp;<span style=\"color:blue;\">do</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">let</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">otherScrobbles</span>&nbsp;=\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">topScrobbles</span>&nbsp;|&gt;&nbsp;<span style=\"color:#2b91af;\">Dict</span>.<span style=\"color:#74531f;\">findOrEmpty</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">otherListener</span>.UserName\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">let</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">otherScrobblesSnapshot</span>&nbsp;=\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">otherScrobbles</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&gt;&nbsp;<span style=\"color:#2b91af;\">Seq</span>.<span style=\"color:#74531f;\">filter</span>&nbsp;(<span style=\"color:blue;\">fun</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">s</span>&nbsp;<span style=\"color:blue;\">-&gt;</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">s</span>.Song.IsVerifiedArtist)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&gt;&nbsp;<span style=\"color:#2b91af;\">Seq</span>.<span style=\"color:#74531f;\">sortByDescending</span>&nbsp;(<span style=\"color:blue;\">fun</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">s</span>&nbsp;<span style=\"color:blue;\">-&gt;</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">s</span>.Song.Rating)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&gt;&nbsp;<span style=\"color:#2b91af;\">Seq</span>.<span style=\"color:#74531f;\">truncate</span>&nbsp;10\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&gt;&nbsp;<span style=\"color:#2b91af;\">Seq</span>.<span style=\"color:#74531f;\">toList</span>\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">otherScrobblesSnapshot</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&gt;&nbsp;<span style=\"color:#2b91af;\">List</span>.<span style=\"color:#74531f;\">map</span>&nbsp;(<span style=\"color:blue;\">fun</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">s</span>&nbsp;<span style=\"color:blue;\">-&gt;</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">s</span>.Song)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&gt;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">recommendationCandidates</span>.<span style=\"font-weight:bold;color:#74531f;\">AddRange</span>\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">let</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">recommendations</span>&nbsp;=\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">recommendationCandidates</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&gt;&nbsp;<span style=\"color:#2b91af;\">Seq</span>.<span style=\"color:#74531f;\">sortByDescending</span>&nbsp;(<span style=\"color:blue;\">fun</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">s</span>&nbsp;<span style=\"color:blue;\">-&gt;</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">s</span>.Rating)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&gt;&nbsp;<span style=\"color:#2b91af;\">Seq</span>.<span style=\"color:#74531f;\">truncate</span>&nbsp;200\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&gt;&nbsp;<span style=\"color:#2b91af;\">Seq</span>.<span style=\"color:#74531f;\">toList</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&gt;&nbsp;<span style=\"color:#2b91af;\">IReadOnlyCollection</span>&lt;_&gt;\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">recommendations</span></pre>\n    </p>\n    <p>\n        Since this is now a pure function, there's no need to run as an asynchronous workflow. The function no longer returns a <code>Task</code>, and I've also dispensed with the <em>Async</em> suffix.\n    </p>\n    <p>\n        The implementation still has imperative remnants. It initializes an empty <code>ResizeArray</code> (AKA <code>List&lt;T&gt;</code>), and loops through nested loops to repeatedly call <a href=\"https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1.addrange\">AddRange</a>.\n    </p>\n    <p>\n        Even though the function contains local state mutation, none of it escapes the function's scope. The function is <a href=\"https://en.wikipedia.org/wiki/Referential_transparency\">referentially transparent</a> because it always returns the same result when given the same input, and it has no side effects.\n    </p>\n    <p>\n        You might still wish that it was 'more functional', which is certainly possible.\n    </p>\n    <h3 id=\"dda1233fb2ff4bc3b21d49d910fabf6f\">\n        A single expression <a href=\"#dda1233fb2ff4bc3b21d49d910fabf6f\">#</a>\n    </h3>\n    <p>\n        A curious property of expression-based languages is that you can conceivably write functions in 'one line of code'. Granted, it would often be a terribly wide line, not at all readable, a beast to maintain, and often with poor performance, so not something you'd want to alway do.\n    </p>\n    <p>\n        In this case, however, we <em>can</em> do that, although in order to stay within an <a href=\"/2019/11/04/the-80-24-rule\">80x24 box</a>, we break the expression over multiple lines.\n    </p>\n    <p>\n        <pre><span style=\"color:blue;\">let</span>&nbsp;<span style=\"color:#74531f;\">getRecommendations</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">topScrobbles</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">topListeners</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">userName</span>&nbsp;=\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:green;\">//&nbsp;1.&nbsp;Get&nbsp;user&#39;s&nbsp;own&nbsp;top&nbsp;scrobbles</span>\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:green;\">//&nbsp;2.&nbsp;Get&nbsp;other&nbsp;users&nbsp;who&nbsp;listened&nbsp;to&nbsp;the&nbsp;same&nbsp;songs</span>\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:green;\">//&nbsp;3.&nbsp;Get&nbsp;top&nbsp;scrobbles&nbsp;of&nbsp;those&nbsp;users</span>\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:green;\">//&nbsp;4.&nbsp;Aggregate&nbsp;the&nbsp;songs&nbsp;into&nbsp;recommendations</span>\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">topScrobbles</span>\n&nbsp;&nbsp;&nbsp;&nbsp;|&gt;&nbsp;<span style=\"color:#2b91af;\">Dict</span>.<span style=\"color:#74531f;\">findOrEmpty</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">userName</span>\n&nbsp;&nbsp;&nbsp;&nbsp;|&gt;&nbsp;<span style=\"color:#2b91af;\">Seq</span>.<span style=\"color:#74531f;\">sortByDescending</span>&nbsp;(<span style=\"color:blue;\">fun</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">s</span>&nbsp;<span style=\"color:blue;\">-&gt;</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">s</span>.ScrobbleCount)\n&nbsp;&nbsp;&nbsp;&nbsp;|&gt;&nbsp;<span style=\"color:#2b91af;\">Seq</span>.<span style=\"color:#74531f;\">truncate</span>&nbsp;100\n&nbsp;&nbsp;&nbsp;&nbsp;|&gt;&nbsp;<span style=\"color:#2b91af;\">Seq</span>.<span style=\"color:#74531f;\">collect</span>&nbsp;(<span style=\"color:blue;\">fun</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">scrobble</span>&nbsp;<span style=\"color:blue;\">-&gt;</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">topListeners</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&gt;&nbsp;<span style=\"color:#2b91af;\">Dict</span>.<span style=\"color:#74531f;\">findOrEmpty</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">scrobble</span>.Song.Id\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&gt;&nbsp;<span style=\"color:#2b91af;\">Seq</span>.<span style=\"color:#74531f;\">filter</span>&nbsp;(<span style=\"color:blue;\">fun</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">u</span>&nbsp;<span style=\"color:blue;\">-&gt;</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">u</span>.TotalScrobbleCount&nbsp;&gt;=&nbsp;10_000)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&gt;&nbsp;<span style=\"color:#2b91af;\">Seq</span>.<span style=\"color:#74531f;\">sortByDescending</span>&nbsp;(<span style=\"color:blue;\">fun</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">u</span>&nbsp;<span style=\"color:blue;\">-&gt;</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">u</span>.TotalScrobbleCount)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&gt;&nbsp;<span style=\"color:#2b91af;\">Seq</span>.<span style=\"color:#74531f;\">truncate</span>&nbsp;20\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&gt;&nbsp;<span style=\"color:#2b91af;\">Seq</span>.<span style=\"color:#74531f;\">collect</span>&nbsp;(<span style=\"color:blue;\">fun</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">otherListener</span>&nbsp;<span style=\"color:blue;\">-&gt;</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">topScrobbles</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&gt;&nbsp;<span style=\"color:#2b91af;\">Dict</span>.<span style=\"color:#74531f;\">findOrEmpty</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">otherListener</span>.UserName\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&gt;&nbsp;<span style=\"color:#2b91af;\">Seq</span>.<span style=\"color:#74531f;\">filter</span>&nbsp;(<span style=\"color:blue;\">fun</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">s</span>&nbsp;<span style=\"color:blue;\">-&gt;</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">s</span>.Song.IsVerifiedArtist)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&gt;&nbsp;<span style=\"color:#2b91af;\">Seq</span>.<span style=\"color:#74531f;\">sortByDescending</span>&nbsp;(<span style=\"color:blue;\">fun</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">s</span>&nbsp;<span style=\"color:blue;\">-&gt;</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">s</span>.Song.Rating)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&gt;&nbsp;<span style=\"color:#2b91af;\">Seq</span>.<span style=\"color:#74531f;\">truncate</span>&nbsp;10\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&gt;&nbsp;<span style=\"color:#2b91af;\">Seq</span>.<span style=\"color:#74531f;\">map</span>&nbsp;(<span style=\"color:blue;\">fun</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">s</span>&nbsp;<span style=\"color:blue;\">-&gt;</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">s</span>.Song)))\n&nbsp;&nbsp;&nbsp;&nbsp;|&gt;&nbsp;<span style=\"color:#2b91af;\">Seq</span>.<span style=\"color:#74531f;\">sortByDescending</span>&nbsp;(<span style=\"color:blue;\">fun</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">s</span>&nbsp;<span style=\"color:blue;\">-&gt;</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">s</span>.Rating)\n&nbsp;&nbsp;&nbsp;&nbsp;|&gt;&nbsp;<span style=\"color:#2b91af;\">Seq</span>.<span style=\"color:#74531f;\">truncate</span>&nbsp;200\n&nbsp;&nbsp;&nbsp;&nbsp;|&gt;&nbsp;<span style=\"color:#2b91af;\">Seq</span>.<span style=\"color:#74531f;\">toList</span>\n&nbsp;&nbsp;&nbsp;&nbsp;:&gt;&nbsp;<span style=\"color:#2b91af;\">IReadOnlyCollection</span>&lt;_&gt;</pre>\n    </p>\n    <p>\n        To be honest, the four lines of comments push the function definition over the edge of 24 lines of code, but without them, this variation actually does fit an 80x24 box. Even so, I'm not arguing that this is the best possible way to organize and lay out this function.\n    </p>\n    <p>\n        You may rightly complain that it's too dense. Perhaps you're also concerned about the <a href=\"https://wiki.c2.com/?ArrowAntiPattern\">arrow code</a> tendency.\n    </p>\n    <p>\n        I'm not disagreeing, but at least this represents a milestone where the function is not only referentially transparent, but also implemented without local mutation. Not that that really should be the most important criterion, but once you have an entirely expression-based implementation, it's usually easier to break it up into smaller building blocks.\n    </p>\n    <h3 id=\"7d81ce38521b406fa306d4bfa79a44bb\">\n        Composition from smaller functions <a href=\"#7d81ce38521b406fa306d4bfa79a44bb\">#</a>\n    </h3>\n    <p>\n        To improve readability and maintainability, we may now extract helper functions. The first one easily suggests itself.\n    </p>\n    <p>\n        <pre><span style=\"color:blue;\">let</span>&nbsp;<span style=\"color:blue;\">private</span>&nbsp;<span style=\"color:#74531f;\">getUsersOwnTopScrobbles</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">topScrobbles</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">userName</span>&nbsp;=\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">topScrobbles</span>\n&nbsp;&nbsp;&nbsp;&nbsp;|&gt;&nbsp;<span style=\"color:#2b91af;\">Dict</span>.<span style=\"color:#74531f;\">findOrEmpty</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">userName</span>\n&nbsp;&nbsp;&nbsp;&nbsp;|&gt;&nbsp;<span style=\"color:#2b91af;\">Seq</span>.<span style=\"color:#74531f;\">sortByDescending</span>&nbsp;(<span style=\"color:blue;\">fun</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">s</span>&nbsp;<span style=\"color:blue;\">-&gt;</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">s</span>.ScrobbleCount)\n&nbsp;&nbsp;&nbsp;&nbsp;|&gt;&nbsp;<span style=\"color:#2b91af;\">Seq</span>.<span style=\"color:#74531f;\">truncate</span>&nbsp;100</pre>\n    </p>\n    <p>\n        Each of the subexpressions in the above code listing are candidates for the same kind of treatment, like this one:\n    </p>\n    <p>\n        <pre><span style=\"color:blue;\">let</span>&nbsp;<span style=\"color:blue;\">private</span>&nbsp;<span style=\"color:#74531f;\">getOtherUsersWhoListenedToTheSameSongs</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">topListeners</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">scrobble</span>&nbsp;=\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">topListeners</span>\n&nbsp;&nbsp;&nbsp;&nbsp;|&gt;&nbsp;<span style=\"color:#2b91af;\">Dict</span>.<span style=\"color:#74531f;\">findOrEmpty</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">scrobble</span>.Song.Id\n&nbsp;&nbsp;&nbsp;&nbsp;|&gt;&nbsp;<span style=\"color:#2b91af;\">Seq</span>.<span style=\"color:#74531f;\">filter</span>&nbsp;(<span style=\"color:blue;\">fun</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">u</span>&nbsp;-&gt;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">u</span>.TotalScrobbleCount&nbsp;&gt;=&nbsp;10_000)\n&nbsp;&nbsp;&nbsp;&nbsp;|&gt;&nbsp;<span style=\"color:#2b91af;\">Seq</span>.<span style=\"color:#74531f;\">sortByDescending</span>&nbsp;(<span style=\"color:blue;\">fun</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">u</span>&nbsp;-&gt;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">u</span>.TotalScrobbleCount)\n&nbsp;&nbsp;&nbsp;&nbsp;|&gt;&nbsp;<span style=\"color:#2b91af;\">Seq</span>.<span style=\"color:#74531f;\">truncate</span>&nbsp;20</pre>\n    </p>\n    <p>\n        Notice that these helper methods are marked <code>private</code> so that they remain implementation details within the module that exports the <code>getRecommendations</code> function.\n    </p>\n    <p>\n        With a few more helper functions, you can now implement the <code>getRecommendations</code> function by composing the helpers.\n    </p>\n    <p>\n        <pre><span style=\"color:blue;\">let</span>&nbsp;<span style=\"color:#74531f;\">getRecommendations</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">topScrobbles</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">topListeners</span>&nbsp;=\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#74531f;\">getUsersOwnTopScrobbles</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">topScrobbles</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&gt;&gt;&nbsp;<span style=\"color:#2b91af;\">Seq</span>.<span style=\"color:#74531f;\">collect</span>&nbsp;(\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#74531f;\">getOtherUsersWhoListenedToTheSameSongs</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">topListeners</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&gt;&gt;&nbsp;<span style=\"color:#2b91af;\">Seq</span>.<span style=\"color:#74531f;\">collect</span>&nbsp;(<span style=\"color:#74531f;\">getTopSongsOfOtherUser</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">topScrobbles</span>))\n&nbsp;&nbsp;&nbsp;&nbsp;&gt;&gt;&nbsp;<span style=\"color:#74531f;\">aggregateSongsIntoRecommendations</span></pre>\n    </p>\n    <p>\n        Notice that I've named each of the helper functions after the code comments that accompanied the previous incarnations of this function. If we consider <a href=\"http://butunclebob.com/ArticleS.TimOttinger.ApologizeIncode\">code comments apologies for not properly organizing the code</a>, we've now managed to structure it in such a way that those apologies are no longer required.\n    </p>\n    <h3 id=\"7467fbb8e803446ea3dff035e7388301\">\n        Conclusion <a href=\"#7467fbb8e803446ea3dff035e7388301\">#</a>\n    </h3>\n    <p>\n        If you accept the (perhaps preposterous) assumption that it's possible to fit the required data in <a href=\"https://en.wikipedia.org/wiki/Persistent_data_structure\">persistent data structures</a>, refactoring the recommendation algorithm to a pure function isn't that difficult. That's the pure part of a Recawr Sandwich. While I haven't shown the actual sandwich here, it's identical to the example shown in <a href=\"/2025/05/05/song-recommendations-as-a-c-impureim-sandwich\">Song recommendations as a C# Impureim Sandwich</a>.\n    </p>\n    <p>\n        I find the final incarnation of the code shown here to be quite attractive. While I've kept the helper functions <code>private</code>, it's always an option to promote them to <code>public</code> functions if you find that warranted. This could improve testability of the overall code base, albeit at the risk of increasing the surface area of the API that you have to maintain and secure.\n    </p>\n    <p>\n        There are always trade-offs to be considered. Even if you, eventually, find that for this particular example, the input data size is just <em>too</em> big to make this alternative viable, there are, in my experience, many other situations when this kind of architecture is a good solution. Even if the input size is a decent amount of megabytes, the simplification offered by an Impureim Sandwich may trump the larger memory footprint. As always, if you're concerned about performance, <a href=\"https://ericlippert.com/2012/12/17/performance-rant/\">measure it</a>.\n    </p>\n    <p>\n        Before we turn to alternative architectures, we'll survey how this variation looks in <a href=\"https://www.haskell.org/\">Haskell</a>. As is generally the case in this article series, if you don't care about Haskell, you can always go back to the table of contents in the <a href=\"/2025/04/07/alternative-ways-to-design-with-functional-programming\">first article in the series</a> and instead navigate to the next article that interests you.\n    </p>\n    <p>\n        <strong>Next:</strong> <a href=\"/2025/05/26/song-recommendations-as-a-haskell-impureim-sandwich\">Song recommendations as a Haskell Impureim Sandwich</a>.\n    </p>\n</div><hr>\n      This blog is totally free, but if you like it, please consider <a href=\"https://blog.ploeh.dk/support\">supporting it</a>.",
      "Content": null,
      "Language": "en-us",
      "Link": "https://blog.ploeh.dk/2025/05/19/song-recommendations-as-an-f-impureim-sandwich/"
    },
    {
      "FeedId": "https://blog.ploeh.dk",
      "ItemId": "https://blog.ploeh.dk/2025/05/12/song-recommendations-proof-of-concept-memory-measurements",
      "Title": "Song recommendations proof-of-concept memory measurements",
      "PublishDate": "2025-05-12T07:52:00+02:00",
      "Summary": "\n\n\n<div id=\"post\">\n    <p>\n        <em>An attempt at measurement, and some results.</em>\n    </p>\n    <p>\n        This is an article in a <a href=\"/2025/04/07/alternative-ways-to-design-with-functional-programming\">larger series about functional programming design alternatives</a>, and a direct continuation of the <a href=\"/2025/05/05/song-recommendations-as-a-c-impureim-sandwich\">previous article</a>. The question lingering after the <a href=\"/2020/03/02/impureim-sandwich\">Impureim Sandwich</a> proof of concept is: What are the memory requirements of front-loading all users, songs, and scrobbles?\n    </p>\n    <p>\n        One can guess, as I've <a href=\"/2025/04/28/song-recommendations-as-an-impureim-sandwich\">already done</a>, but it's safer to measure. In this article, you'll find a description of the experiment, as well as some results.\n    </p>\n    <h3 id=\"6f88f7533af54936a2a923903171c831\">\n        Test program <a href=\"#6f88f7533af54936a2a923903171c831\">#</a>\n    </h3>\n    <p>\n        Since I don't measure application memory profiles that often, I searched the web to learn how, and found <a href=\"https://stackoverflow.com/a/28514434/126014\">this answer</a> by <a href=\"https://stackoverflow.com/users/22656/jon-skeet\">Jon Skeet</a>. That's a reputable source, so I'm assuming that the described approach is appropriate.\n    </p>\n    <p>\n        I added a new command-line executable to the source code and made this the entry point:\n    </p>\n    <p>\n        <pre><span style=\"color:blue;\">const</span>&nbsp;<span style=\"color:blue;\">int</span>&nbsp;size&nbsp;=&nbsp;100_000;\n \n<span style=\"color:blue;\">static</span>&nbsp;<span style=\"color:blue;\">async</span>&nbsp;Task&nbsp;Main()\n{\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">var</span>&nbsp;before&nbsp;=&nbsp;GC.GetTotalMemory(<span style=\"color:blue;\">true</span>);\n \n&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;(listeners,&nbsp;scrobbles)&nbsp;=&nbsp;<span style=\"color:blue;\">await</span>&nbsp;Populate();\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">var</span>&nbsp;after&nbsp;=&nbsp;GC.GetTotalMemory(<span style=\"color:blue;\">true</span>);\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">var</span>&nbsp;diff&nbsp;=&nbsp;after&nbsp;-&nbsp;before;\n \n&nbsp;&nbsp;&nbsp;&nbsp;Console.WriteLine(<span style=\"color:#a31515;\">&quot;Total&nbsp;memory:&nbsp;{0:N0}B.&quot;</span>,&nbsp;diff);\n \n&nbsp;&nbsp;&nbsp;&nbsp;GC.KeepAlive(listeners);\n&nbsp;&nbsp;&nbsp;&nbsp;GC.KeepAlive(scrobbles);\n}</pre>\n    </p>\n    <p>\n        <code>listeners</code> and <code>scrobbles</code> are two dictionaries of data, as described in the <a href=\"/2025/05/05/song-recommendations-as-a-c-impureim-sandwich\">previous article</a>. Together, they contain the data that we measure. Both are populated by this method:\n    </p>\n    <p>\n        <pre><span style=\"color:blue;\">private</span>&nbsp;<span style=\"color:blue;\">static</span>&nbsp;<span style=\"color:blue;\">async</span>&nbsp;Task&lt;(\n&nbsp;&nbsp;&nbsp;&nbsp;IReadOnlyDictionary&lt;<span style=\"color:blue;\">int</span>,&nbsp;IReadOnlyCollection&lt;User&gt;&gt;,\n&nbsp;&nbsp;&nbsp;&nbsp;IReadOnlyDictionary&lt;<span style=\"color:blue;\">string</span>,&nbsp;IReadOnlyCollection&lt;Scrobble&gt;&gt;)&gt;&nbsp;Populate()\n{\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">var</span>&nbsp;service&nbsp;=&nbsp;PopulateService();\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">var</span>&nbsp;listeners&nbsp;=&nbsp;<span style=\"color:blue;\">await</span>&nbsp;service.CollectAllTopListeners();\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">var</span>&nbsp;scrobbles&nbsp;=&nbsp;<span style=\"color:blue;\">await</span>&nbsp;service.CollectAllTopScrobbles();\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">return</span>&nbsp;(listeners,&nbsp;scrobbles);\n}</pre>\n    </p>\n    <p>\n        The <code>service</code> variable is a <code>FakeSongService</code> object populated with randomly generated data. The <code>CollectAllTopListeners</code> and <code>CollectAllTopScrobbles</code> methods are the same as described in the previous article. When the method returns the two dictionaries, the <code>service</code> object goes out of scope and can be garbage-collected. When the program measures the memory load, it measures the size of the two dictionaries, but not <code>service</code>.\n    </p>\n    <p>\n        I've reused the <a href=\"https://fscheck.github.io/FsCheck/\">FsCheck</a> generators for random data generation:\n    </p>\n    <p>\n        <pre><span style=\"color:blue;\">private</span>&nbsp;<span style=\"color:blue;\">static</span>&nbsp;SongService&nbsp;PopulateService()\n{\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">var</span>&nbsp;users&nbsp;=&nbsp;RecommendationsProviderTests.Gen.UserName.Sample(size);\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">var</span>&nbsp;songs&nbsp;=&nbsp;RecommendationsProviderTests.Gen.Song.Sample(size);\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">var</span>&nbsp;scrobbleGen&nbsp;=\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">from</span>&nbsp;user&nbsp;<span style=\"color:blue;\">in</span>&nbsp;Gen.Elements(users)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">from</span>&nbsp;song&nbsp;<span style=\"color:blue;\">in</span>&nbsp;Gen.Elements(songs)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">from</span>&nbsp;scrobbleCount&nbsp;<span style=\"color:blue;\">in</span>&nbsp;Gen.Choose(1,&nbsp;10)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">select</span>&nbsp;(user,&nbsp;song,&nbsp;scrobbleCount);\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">var</span>&nbsp;service&nbsp;=&nbsp;<span style=\"color:blue;\">new</span>&nbsp;FakeSongService();\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">foreach</span>&nbsp;(var&nbsp;(user,&nbsp;song,&nbsp;scrobbleCount)&nbsp;<span style=\"color:blue;\">in</span>&nbsp;scrobbleGen.Sample(size))\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;service.Scrobble(user,&nbsp;song,&nbsp;scrobbleCount);\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">return</span>&nbsp;service;\n}</pre>\n    </p>\n    <p>\n        A <code>Gen&lt;T&gt;</code> object comes with a <code>Sample</code> method you can use to request a specified number of randomly generated values.\n    </p>\n    <p>\n        In order to keep the code simple, I used the <code>size</code> value for both the number of songs, number of users, and number of scrobbles. This probably creates too few scrobbles; a topic that requires further discussion later.\n    </p>\n    <h3 id=\"2759c45eda984c02871d99ff21d9936d\">\n        Measurements <a href=\"#2759c45eda984c02871d99ff21d9936d\">#</a>\n    </h3>\n    <p>\n        I ran the above program with various <code>size</code> values; <em>100,000</em> up to <em>1,000,000</em> in <em>100,000</em> increments, and from there up to <em>1,000,000</em> (one million) in <em>500,000</em> increments. At the higher values, it took a good ten minutes to run the program.\n    </p>\n    <p>\n        <img src=\"/content/binary/song-recommendations-memory-costs.png\" alt=\"Song recommendations memory cost line chart.\">\n    </p>\n    <p>\n        As the chart indicates, I ran the program with various data representations (more on that below). While there are four distinct data series, they overlap pairwise so perfectly that the graph doesn't show the difference. The <em>record</em> and <em>struct record</em> data series are so identical that you can't visibly see the difference. The same is true for the <em>bitmasked class</em> and the <em>bitmasked struct</em> data series, which only go to <code>size</code> <em>500,000</em>.\n    </p>\n    <p>\n        There are small, but noticeable jumps from <em>4,500,000</em> to <em>5,000,000</em> and again from <em>8,500,000</em> to <em>9,000,000</em>, but the overall impression is that the relationship is linear. It seems safe to conclude that the solution scales linearly with the data size.\n    </p>\n    <p>\n        The number of bytes per size is almost constant and averages to 178 bytes. How does that compare to <a href=\"/2025/04/28/song-recommendations-as-an-impureim-sandwich\">my previous memory size estimates</a>? There, I estimated a song and a scrobble to require 8 bytes each, and a user less than 32 bytes. The way the above simulation runs, it generates one song, one user, and one scrobble per size unit. Therefore, I'd expect the average memory cost per experiment size to be around <em>8 + 8 + 32 = 48</em>, plus some overhead from the dictionaries.\n    </p>\n    <p>\n        Given that the number I measure is 178, that's 130 bytes of overhead. Honestly, that's more than I expected. I expect a dictionary to maintain an array of keys, perhaps hashed with a bucket per hash value. Perhaps, had I picked another data structure than a plain old <a href=\"https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2\">Dictionary</a>, it's possible that the overhead would be different. Or perhaps I just don't understand .NET's memory model, when push comes to shove.\n    </p>\n    <p>\n        I then tried to split the single <code>size</code> parameter into three that would control the number of users, songs, and scrobbles independently. Setting both the number of users and songs to ten million, I then ran a series of simulations with increasing scrobble counts.\n    </p>\n    <p>\n        <img src=\"/content/binary/song-recommendations-scrobble-memory-costs.png\" alt=\"Scrobble memory cost line chart.\">\n    </p>\n    <p>\n        The relationship still looks linear, and at a hundred million scrobbles (and ten million users and ten million songs), the simulation uses 8.3 GB of memory.\n    </p>\n    <p>\n        I admit that I'm still a bit puzzled by the measurements, compared to my previous estimates. I would have expected those sizes to require about 1,2 GB, plus overhead, so the actual measurements are off by a factor of 7. Not quite an order of magnitude, but close.\n    </p>\n    <h3 id=\"b1a0539a274f49ef937b15fc07090990\">\n        Realism <a href=\"#b1a0539a274f49ef937b15fc07090990\">#</a>\n    </h3>\n    <p>\n        How useful are these measurements? How realistic are the experiments' parameters? Most streaming audio services report having catalogues with around 100 million songs, which is ten times more than what I've measured here. Such services may also have significantly more users than ten million, but what is going to make or break this architecture option (keeping all data in memory) is how many scrobbles users have, and how many times they listen to each song.\n    </p>\n    <p>\n        Even if we naively still believe that a scrobble only takes up 8 bytes, it doesn't follow automatically that 100 scrobbles take up 800 bytes. It depends on how many repeats there are. Recall how we may model a scrobble:\n    </p>\n    <p>\n        <pre><span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:blue;\">sealed</span>&nbsp;<span style=\"color:blue;\">record</span>&nbsp;<span style=\"color:#2b91af;\">Scrobble</span>(Song&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">Song</span>,&nbsp;<span style=\"color:blue;\">int</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">ScrobbleCount</span>);</pre>\n    </p>\n    <p>\n        If a user listens to the same song ten times, we don't have to create ten <code>Scrobble</code> objects; we can create one and set the <code>ScrobbleCount</code> to <code>10</code>.\n    </p>\n    <p>\n        The memory requirement to store users' scrobbles depend on the average listening pattern. Even with millions of users, we may be able to store scrobbles in memory if users listen to relatively few songs. On the other hand, if they only listen to each song once, it's probably not going to fit in memory.\n    </p>\n    <p>\n        Still, we're dangerously close to the edge of what we can fit in memory. Shouldn't I just declare bankruptcy on that idea and move on?\n    </p>\n    <p>\n        The purpose of this <a href=\"/2025/04/07/alternative-ways-to-design-with-functional-programming\">overall article series</a> is to demonstrate <em>alternatives</em> to the <a href=\"/2020/03/02/impureim-sandwich\">Impureim Sandwich</a> pattern, so I'm ultimately going to do exactly that: Move on.\n    </p>\n    <p>\n        But not yet.\n    </p>\n    <h3 id=\"a5fce68a31c7414386c451ea2fe219be\">\n        Sharding <a href=\"#a5fce68a31c7414386c451ea2fe219be\">#</a>\n    </h3>\n    <p>\n        Some applications are truly global in nature, and when that's the case, keeping everything in memory may not be 'web scale'.\n    </p>\n    <p>\n        Still, I've seen more than one international company treat geographic areas as separate entities. This may be for legal reasons, or other business concerns that are unrelated to technology constraints.\n    </p>\n    <p>\n        As a programmer, you may think that a song recommendations service ought to be truly global. After all, more data produces more accurate results, right?\n    </p>\n    <p>\n        Your business owners may not think so. They may be concerned that regional music tastes may 'bleed over' market boundaries, and that this could ultimately scare customers away.\n    </p>\n    <p>\n        Even if you can technically prove that this isn't a relevant concern, because you can write an algorithm that takes this into account, you may get a direct order that, say, Southeast Asian scrobbles may not be used in North America, or vice verse.\n    </p>\n    <p>\n        It's worth investigating whether such business or legal constraints are already in place, because if they are, this may mean that you can shard the data, and that each shard still fits in memory.\n    </p>\n    <p>\n        You may still think that I'm trying to salvage a bad idea, but that's not my agenda. I discuss these topics because in my experience, many programmers don't consider them. Understanding the wider context of a problem may suggest solutions that you might otherwise dismiss.\n    </p>\n    <p>\n        But what if the business constraints change in the future? Shouldn't we be ready for that?\n    </p>\n    <p>\n        Yes and no. You should consider how such changes would impact the architecture. Then you discuss the advantages and disadvantages with other stakeholders.\n    </p>\n    <p>\n        Keep in mind that the reason to consider an Impureim Sandwich is because it's <em>simple</em> and easy to implement and maintain. Other alternatives may be more 'scalable', but also riskier to implement. You should involve other stakeholders in such decisions.\n    </p>\n    <h3 id=\"2dee0af02fbb4ac9b9176685ecb2cc3a\">\n        Song representations <a href=\"#2dee0af02fbb4ac9b9176685ecb2cc3a\">#</a>\n    </h3>\n    <p>\n        The first of the above charts draws graphs for four data series:\n    </p>\n    <ul>\n        <li>struct record</li>\n        <li>record</li>\n        <li>bitmasked struct</li>\n        <li>bitmasked class</li>\n    </ul>\n    <p>\n        These measure four different ways to model data; here more specifically a song.\n    </p>\n    <p>\n        My initial model of a song was a <code>record</code>:\n    </p>\n    <p>\n        <pre><span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:blue;\">sealed</span>&nbsp;<span style=\"color:blue;\">record</span>&nbsp;<span style=\"color:#2b91af;\">Song</span>(<span style=\"color:blue;\">int</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">Id</span>,&nbsp;<span style=\"color:blue;\">bool</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">IsVerifiedArtist</span>,&nbsp;<span style=\"color:blue;\">byte</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">Rating</span>);</pre>\n    </p>\n    <p>\n        Then I thought that perhaps, since the type only contains <a href=\"https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/value-types\">value types</a>, it might be better to turn the above <code>record</code> into a <code>record struct</code>:\n    </p>\n    <p>\n        <pre><span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:blue;\">record</span>&nbsp;<span style=\"color:blue;\">struct</span>&nbsp;<span style=\"color:#2b91af;\">Song</span>(<span style=\"color:blue;\">int</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">Id</span>,&nbsp;<span style=\"color:blue;\">bool</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">IsVerifiedArtist</span>,&nbsp;<span style=\"color:blue;\">byte</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">Rating</span>);</pre>\n    </p>\n    <p>\n        It turns out that it makes no visible difference. In the chart, the two data series are so close to each other that you can't distinguish them.\n    </p>\n    <p>\n        Then I thought that instead of an <code>int</code>, a <code>bool</code>, and a <code>byte</code>, I could use a single bitmask to model all three values.\n    </p>\n    <p>\n        After all, I was only guessing when it came to data types anyway. It's likely that <code>Rating</code> is only a five-point or ten-point scale, but I still used a <code>byte</code> to model it. This suggests that I'm not using 96% of the data type's range. Perhaps I could use one of those redundant bits for <code>IsVerifiedArtist</code>, instead of an entire <code>bool</code>.\n    </p>\n    <p>\n        Taking this further, modelling the <code>Id</code> as an <code>int</code> suggests that you may have 4,294,967,295 unique songs. That's 4.3 <em>billion</em> songs - at least an order of magnitude more than those 100 million songs that we hear about. In reality though, most systems that use <code>int</code> for IDs only do so because <code>int</code> is CLS-compliant, and <a href=\"https://learn.microsoft.com/dotnet/api/system.uint32\">uint is not</a>. In other words, most systems that use <code>int</code> for IDs most likely only use the positive half, which means there are 16 bytes to use for other purposes. Enter the <em>bitmasked song:</em>\n    </p>\n    <p>\n        <pre><span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:blue;\">readonly</span>&nbsp;<span style=\"color:blue;\">struct</span>&nbsp;<span style=\"color:#2b91af;\">Song</span>\n{\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">private</span>&nbsp;<span style=\"color:blue;\">const</span>&nbsp;<span style=\"color:blue;\">uint</span>&nbsp;idMask&nbsp;=\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0b0000_0111_1111_1111_1111_1111_1111_1111;\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">private</span>&nbsp;<span style=\"color:blue;\">const</span>&nbsp;<span style=\"color:blue;\">uint</span>&nbsp;isVerifiedArtistMask&nbsp;=\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0b1000_0000_0000_0000_0000_0000_0000_0000;\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">private</span>&nbsp;<span style=\"color:blue;\">const</span>&nbsp;<span style=\"color:blue;\">uint</span>&nbsp;ratingMask&nbsp;=\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0b0111_1000_0000_0000_0000_0000_0000_0000;\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">private</span>&nbsp;<span style=\"color:blue;\">readonly</span>&nbsp;<span style=\"color:blue;\">uint</span>&nbsp;bits;\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:#2b91af;\">Song</span>(<span style=\"color:blue;\">int</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">id</span>,&nbsp;<span style=\"color:blue;\">bool</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">isVerifiedArtist</span>,&nbsp;<span style=\"color:blue;\">byte</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">rating</span>)\n&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">var</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">idBits</span>&nbsp;=&nbsp;(<span style=\"color:blue;\">uint</span>)id&nbsp;&amp;&nbsp;idMask;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">var</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">isVerifiedArtistBits</span>&nbsp;=&nbsp;isVerifiedArtist&nbsp;?&nbsp;isVerifiedArtistMask&nbsp;:&nbsp;0u;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">var</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">ratingBits</span>&nbsp;=&nbsp;((<span style=\"color:blue;\">uint</span>)rating&nbsp;&lt;&lt;&nbsp;27)&nbsp;&amp;&nbsp;ratingMask;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bits&nbsp;=&nbsp;idBits&nbsp;|&nbsp;isVerifiedArtistBits&nbsp;|&nbsp;ratingBits;\n&nbsp;&nbsp;&nbsp;&nbsp;}\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:blue;\">int</span>&nbsp;Id&nbsp;=&gt;&nbsp;(<span style=\"color:blue;\">int</span>)(bits&nbsp;&amp;&nbsp;idMask);\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:blue;\">bool</span>&nbsp;IsVerifiedArtist&nbsp;=&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(bits&nbsp;&amp;&nbsp;isVerifiedArtistMask)&nbsp;==&nbsp;isVerifiedArtistMask;\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:blue;\">byte</span>&nbsp;Rating&nbsp;=&gt;&nbsp;(<span style=\"color:blue;\">byte</span>)((bits&nbsp;&amp;&nbsp;ratingMask)&nbsp;&gt;&gt;&nbsp;27);\n}</pre>\n    </p>\n    <p>\n        In this representation, I've set aside the lower 27 bits for the ID, enabling IDs to range between 0 and 134,217,727. The top bit is used for <code>IsVerifiedArtist</code>, and the remaining four bits for <code>Rating</code>.\n    </p>\n    <p>\n        This data structure only holds a single <code>uint</code>, and since I made it a <code>struct</code>, I thought it'd have minimal overhead.\n    </p>\n    <p>\n        As you can see in the above chart, that's not the case. When I run the experiment, this representation requires <em>more</em> memory.\n    </p>\n    <p>\n        Just to make sure I wasn't missing anything obvious, I tried making the bitmasked <code>Song</code> a <code>class</code> instead. No visible difference.\n    </p>\n    <p>\n        If you're wondering why the bitmasked data series only go to 500,000, it's because this change made the experiments glacial. It took somewhere between 12 and 24 hours to run the experiment with a <code>size</code> of 500,000.\n    </p>\n    <p>\n        For what it's worth, I don't think the slowdown is directly related to the data representation, but rather to the change I had to make to the <a href=\"https://fscheck.github.io/FsCheck/\">FsCheck</a>-based data generator:\n    </p>\n    <p>\n        <pre><span style=\"color:blue;\">let</span>&nbsp;songParams&nbsp;=&nbsp;gen&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">let</span>&nbsp;maxId&nbsp;=&nbsp;0b0111_1111_1111_1111_1111_1111_1111\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">let!</span>&nbsp;songId&nbsp;=&nbsp;Gen.choose&nbsp;(1,&nbsp;maxId)\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">let!</span>&nbsp;isVerified&nbsp;=&nbsp;ArbMap.generate&nbsp;ArbMap.defaults\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">let!</span>&nbsp;rating&nbsp;=&nbsp;Gen.choose&nbsp;(0,&nbsp;10)&nbsp;|&gt;&nbsp;Gen.map&nbsp;byte\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">return</span>&nbsp;songId,&nbsp;isVerified,&nbsp;rating&nbsp;}\n \n[&lt;CompiledName&nbsp;<span style=\"color:#a31515;\">&quot;Song&quot;</span>&gt;]\n<span style=\"color:blue;\">let</span>&nbsp;song&nbsp;=&nbsp;gen&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">let!</span>&nbsp;(id,&nbsp;isVerifiedArtist,&nbsp;rating)&nbsp;=&nbsp;songParams\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">return</span>&nbsp;Song&nbsp;(id,&nbsp;isVerifiedArtist,&nbsp;rating)&nbsp;}</pre>\n    </p>\n    <p>\n        I can't explain why the bitmasked representation requires more memory, but I'm increasingly having a nagging feeling that I've made a mistake somewhere. If you can spot a mistake, please let me know by leaving a comment.\n    </p>\n    <h3 id=\"90e12771e0214d239cc2bc1c6a540c0a\">\n        Other data representations <a href=\"#90e12771e0214d239cc2bc1c6a540c0a\">#</a>\n    </h3>\n    <p>\n        I also considered whether it'd make sense to represent the entire data set as a huge matrix. One could, for example, let rows represent users, and columns songs, and let each element represent the number of times a user has listened to a particular song:\n    </p>\n    <table>\n        <tr>\n            <td>User</td>\n            <td>Song 1</td>\n            <td>Song 2</td>\n            <td>Song 3</td>\n            <td>...</td>\n        </tr>\n        <tr>\n            <td>123</td>\n            <td>0</td>\n            <td>0</td>\n            <td>4</td>\n            <td>...</td>\n        </tr>\n        <tr>\n            <td>456</td>\n            <td>2</td>\n            <td>0</td>\n            <td>4</td>\n            <td>...</td>\n        </tr>\n        <tr>\n            <td colspan=\"5\">...</td>\n        </tr>\n    </table>\n    <p>\n        Let's say that you may expect some users to listen to a song more than 255 times, but probably not more than 65,535 times. Thus, you could store each play count as a <a href=\"https://learn.microsoft.com/dotnet/api/system.uint16\">ushort</a>. Still, you would need <em>users x songs</em> values, so if you have 100 million songs and 10 million users, that implies 2 PB of memory. That doesn't sound useful.\n    </p>\n    <p>\n        On the other hand, most of those elements are going to be <em>0</em>, so perhaps one could use an <a href=\"https://en.wikipedia.org/wiki/Adjacency_list\">adjacency list</a> instead. That is, however, essentially what an <code>IReadOnlyDictionary&lt;<span style=\"color:blue;\">string</span>,&nbsp;IReadOnlyCollection&lt;Scrobble&gt;&gt;</code> is, so we're now back where we started.\n    </p>\n    <h3 id=\"80eaf0d1dd9848cb875f74b94cb64054\">\n        Conclusion <a href=\"#80eaf0d1dd9848cb875f74b94cb64054\">#</a>\n    </h3>\n    <p>\n        This article reports on some measurements I've made of memory requirements, assuming that we keep all scrobble data in memory. While I suspect that I've made a mistake, it still seems reasonable to conclude that the <em>song recommendations</em> scenario is on the edge of what's possible with the Impureim Sandwich pattern.\n    </p>\n    <p>\n        That's okay. I'm interested in understanding the limitations of solutions.\n    </p>\n    <p>\n        I do think, however, that it's worth taking note of just how massive amounts of data are required before the Impureim Sandwich pattern becomes untenable.\n    </p>\n    <p>\n        When I describe the pattern, the most common reaction is that it doesn't scale. And, as this article has explored, it's true that it doesn't scale. But it scales much, much better than you think. You may have billions of entities in your system, and they may still fit in a few gigabytes. Don't dismiss the Impureim Sandwich before you've made a real effort to understand the memory implications of it. Your intuition is likely to work against you.\n    </p>\n    <p>\n        I'll round off this part of the article series by showing how the Impureim Sandwich looks in other, more functional languages.\n    </p>\n    <p>\n        <strong>Next:</strong> <a href=\"/2025/05/19/song-recommendations-as-an-f-impureim-sandwich\">Song recommendations as an F# Impureim Sandwich</a>.\n    </p>\n</div><hr>\n      This blog is totally free, but if you like it, please consider <a href=\"https://blog.ploeh.dk/support\">supporting it</a>.",
      "Content": null,
      "Language": "en-us",
      "Link": "https://blog.ploeh.dk/2025/05/12/song-recommendations-proof-of-concept-memory-measurements/"
    },
    {
      "FeedId": "https://blog.ploeh.dk",
      "ItemId": "https://blog.ploeh.dk/2025/05/05/song-recommendations-as-a-c-impureim-sandwich",
      "Title": "Song recommendations as a C# Impureim Sandwich",
      "PublishDate": "2025-05-05T06:23:00+02:00",
      "Summary": "\n\n\n<div id=\"post\">\n    <p>\n        <em>A refactoring example.</em>\n    </p>\n    <p>\n        This is an article in a <a href=\"/2025/04/07/alternative-ways-to-design-with-functional-programming\">larger series about functional programming design alternatives</a>. I'm assuming that you've read the previous articles, but briefly told, I'm considering an example presented by <a href=\"https://tyrrrz.me/\">Oleksii Holub</a> in the article <a href=\"https://tyrrrz.me/blog/pure-impure-segregation-principle\">Pure-Impure Segregation Principle</a>. The example gathers song recommendations for a user in <a href=\"https://twitter.com/Tyrrrz/status/1493369905869213700\">a long-running process</a>.\n    </p>\n    <p>\n        In <a href=\"/2025/04/28/song-recommendations-as-an-impureim-sandwich\">the previous article</a> I argued that while the memory requirements for this problem seem so vast that an <a href=\"/2020/03/02/impureim-sandwich\">Impureim Sandwich</a> appears out of the question, it's nonetheless worthwhile to at least try it out. The refactoring isn't that difficult, and it turns out that it does simplify the code.\n    </p>\n    <h3 id=\"1fa2f097e260439fbc0bafb67a35a394\">\n        Enumeration API <a href=\"#1fa2f097e260439fbc0bafb67a35a394\">#</a>\n    </h3>\n    <p>\n        The data access API is a web service:\n    </p>\n    <blockquote>\n        <p>\n            \"I don't own the database, those are requests to an external API service (think Spotify API) that provides the data.\"\n        </p>\n        <footer><cite><a href=\"https://twitter.com/Tyrrrz/status/1495465374179119105\">Tweet</a></cite>, Oleksii Holub, 2022</footer>\n    </blockquote>\n    <p>\n        In order to read all data, we'll have to assume that there's a way to enumerate all songs and all users. With that assumption, I add the <code>GetAllSongs</code> and <code>GetAllUsers</code> methods to the <code>SongService</code> interface:\n    </p>\n    <p>\n        <pre><span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:blue;\">interface</span>&nbsp;<span style=\"color:#2b91af;\">SongService</span>\n{\n&nbsp;&nbsp;&nbsp;&nbsp;Task&lt;IEnumerable&lt;Song&gt;&gt;&nbsp;GetAllSongs();\n&nbsp;&nbsp;&nbsp;&nbsp;Task&lt;IEnumerable&lt;User&gt;&gt;&nbsp;GetAllUsers();\n&nbsp;&nbsp;&nbsp;&nbsp;Task&lt;IReadOnlyCollection&lt;User&gt;&gt;&nbsp;GetTopListenersAsync(<span style=\"color:blue;\">int</span>&nbsp;songId);\n&nbsp;&nbsp;&nbsp;&nbsp;Task&lt;IReadOnlyCollection&lt;Scrobble&gt;&gt;&nbsp;GetTopScrobblesAsync(<span style=\"color:blue;\">string</span>&nbsp;userName);\n}</pre>\n    </p>\n    <p>\n        It is, of course, a crucial assumption, and it's possible that no such API exists. On the other hand, a REST API could expose such functionality as a paged feed. Leafing through potentially hundreds (or thousands) such pages is bound to take some time, so it's good to know that this is a background process. As I briefly mentioned in <a href=\"/2025/04/28/song-recommendations-as-an-impureim-sandwich\">the previous article</a>, we could imagine that we have a dedicated indexing server for this kind purpose. While we may rightly expect the initial data load to take some time (hours, even), once it's in memory, we should be able to reuse it to calculate song recommendations for all users, instead of just one user.\n    </p>\n    <p>\n        In the previous article I estimated that it should be possible to keep all songs in memory with less than a gigabyte. Users, without scrobbles, also take up surprisingly little space, to the degree that a million users fit in a few dozen megabytes. Even if, eventually, we may be concerned about memory, we don't have to be concerned about this part.\n    </p>\n    <p>\n        In any case, the addition of these two new methods doesn't break the existing example code, although I did have to implement the method in the <code>FakeSongService</code> class that I introduced in the article <a href=\"/2025/04/10/characterising-song-recommendations\">Characterising song recommendations</a>:\n    </p>\n    <p>\n        <pre><span style=\"color:blue;\">public</span>&nbsp;Task&lt;IEnumerable&lt;Song&gt;&gt;&nbsp;GetAllSongs()\n{\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">return</span>&nbsp;Task.FromResult&lt;IEnumerable&lt;Song&gt;&gt;(songs.Values);\n}\n \n<span style=\"color:blue;\">public</span>&nbsp;Task&lt;IEnumerable&lt;User&gt;&gt;&nbsp;GetAllUsers()\n{\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">return</span>&nbsp;Task.FromResult(users.Select(kvp&nbsp;=&gt;&nbsp;<span style=\"color:blue;\">new</span>&nbsp;User(kvp.Key,&nbsp;kvp.Value.Values.Sum())));\n}</pre>\n    </p>\n    <p>\n        With those additions, we can load all data as the first layer (<em>phase</em>, really) of the sandwich.\n    </p>\n    <h3 id=\"9e69e4d3be8f4562b0cf9369610f6ebb\">\n        Front-loading the data <a href=\"#9e69e4d3be8f4562b0cf9369610f6ebb\">#</a>\n    </h3>\n    <p>\n        Loading all the data is the responsibility of this <code>DataCollector</code> module:\n    </p>\n    <p>\n        <pre><span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:blue;\">static</span>&nbsp;<span style=\"color:blue;\">class</span>&nbsp;<span style=\"color:#2b91af;\">DataCollector</span>\n{\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:blue;\">static</span>&nbsp;<span style=\"color:blue;\">async</span>&nbsp;Task&lt;IReadOnlyDictionary&lt;<span style=\"color:blue;\">int</span>,&nbsp;IReadOnlyCollection&lt;User&gt;&gt;&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CollectAllTopListeners(<span style=\"color:blue;\">this</span>&nbsp;SongService&nbsp;songService)\n&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">var</span>&nbsp;dict&nbsp;=&nbsp;<span style=\"color:blue;\">new</span>&nbsp;Dictionary&lt;<span style=\"color:blue;\">int</span>,&nbsp;IReadOnlyCollection&lt;User&gt;&gt;();\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">foreach</span>&nbsp;(var&nbsp;song&nbsp;<span style=\"color:blue;\">in</span>&nbsp;<span style=\"color:blue;\">await</span>&nbsp;songService.GetAllSongs())\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">var</span>&nbsp;topListeners&nbsp;=&nbsp;<span style=\"color:blue;\">await</span>&nbsp;songService.GetTopListenersAsync(song.Id);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dict.Add(song.Id,&nbsp;topListeners);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">return</span>&nbsp;dict;\n&nbsp;&nbsp;&nbsp;&nbsp;}\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:blue;\">static</span>&nbsp;<span style=\"color:blue;\">async</span>&nbsp;Task&lt;IReadOnlyDictionary&lt;<span style=\"color:blue;\">string</span>,&nbsp;IReadOnlyCollection&lt;Scrobble&gt;&gt;&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CollectAllTopScrobbles(<span style=\"color:blue;\">this</span>&nbsp;SongService&nbsp;songService)\n&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">var</span>&nbsp;dict&nbsp;=&nbsp;<span style=\"color:blue;\">new</span>&nbsp;Dictionary&lt;<span style=\"color:blue;\">string</span>,&nbsp;IReadOnlyCollection&lt;Scrobble&gt;&gt;();\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">foreach</span>&nbsp;(var&nbsp;user&nbsp;<span style=\"color:blue;\">in</span>&nbsp;<span style=\"color:blue;\">await</span>&nbsp;songService.GetAllUsers())\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">var</span>&nbsp;topScrobbles&nbsp;=&nbsp;<span style=\"color:blue;\">await</span>&nbsp;songService.GetTopScrobblesAsync(user.UserName);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dict.Add(user.UserName,&nbsp;topScrobbles);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">return</span>&nbsp;dict;\n&nbsp;&nbsp;&nbsp;&nbsp;}\n}</pre>\n    </p>\n    <p>\n        These two methods work with any <code>SongService</code> implementation, so while the code base will work with <code>FakeSongService</code>, real 'production code' might as well use an HTTP-based implementation that pages through the implied web API.\n    </p>\n    <p>\n        The dictionaries returned by the methods are likely to be huge. That's a major point of this exercise. Once the change is implemented and <a href=\"https://en.wikipedia.org/wiki/Characterization_test\">Characterisation Tests</a> show that it still works, it makes sense to generate data to get a sense of the memory footprint.\n    </p>\n    <h3 id=\"cad69cb800a146e9ac2556c7deaac655\">\n        Table-driven methods <a href=\"#cad69cb800a146e9ac2556c7deaac655\">#</a>\n    </h3>\n    <p>\n        Perhaps you wonder why the above <code>CollectAllTopListeners</code> and <code>CollectAllTopScrobbles</code> methods return dictionaries of exactly that shape.\n    </p>\n    <p>\n        <a href=\"http://amzn.to/1dLYr0r\">Code Complete</a> describes a programming technique called <em>table-driven methods</em>. The idea is to replace branching instructions such as <code>if</code>, <code>else</code>, and <code>switch</code> with a lookup table. The overall point, however, is that you can replace function calls with table lookups.\n    </p>\n    <p>\n        Consider the <code>GetTopListenersAsync</code> method. It takes an <code>int</code> as input, and returns a <code>Task&lt;IReadOnlyCollection&lt;User&gt;&gt;\n        </code> as output. If you ignore the <code>Task</code>, that's an <code>IReadOnlyCollection&lt;User&gt;</code>. In other words, you can exchange an <code>int</code> for an <code>IReadOnlyCollection&lt;User&gt;</code>.\n    </p>\n    <p>\n        If you have an <code>IReadOnlyDictionary&lt;<span style=\"color:blue;\">int</span>,&nbsp;IReadOnlyCollection&lt;User&gt;&gt;</code> you can <em>also</em> exchange an <code>int</code> for an <code>IReadOnlyCollection&lt;User&gt;</code>. These two APIs are functionally equivalent - although, of course, they have very different memory and run-time profiles.\n    </p>\n    <p>\n        The same goes for the <code>GetTopScrobblesAsync</code> method: It takes a <code>string</code> as input and returns an <code>IReadOnlyCollection&lt;Scrobble&gt;</code> as output (if you ignore the <code>Task</code>). An <code>IReadOnlyDictionary&lt;<span style=\"color:blue;\">string</span>,&nbsp;IReadOnlyCollection&lt;Scrobble&gt;&gt;</code> is equivalent.\n    </p>\n    <p>\n        To make it practical, it turns out that we also need a little helper method to deal with the case where the dictionary has no entry for a given key:\n    </p>\n    <p>\n        <pre><span style=\"color:blue;\">internal</span>&nbsp;<span style=\"color:blue;\">static</span>&nbsp;IReadOnlyCollection&lt;T&gt;&nbsp;GetOrEmpty&lt;<span style=\"color:#2b91af;\">T</span>,&nbsp;<span style=\"color:#2b91af;\">TKey</span>&gt;(\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">this</span>&nbsp;IReadOnlyDictionary&lt;TKey,&nbsp;IReadOnlyCollection&lt;T&gt;&gt;&nbsp;dict,\n&nbsp;&nbsp;&nbsp;&nbsp;TKey&nbsp;key)\n{\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">if</span>&nbsp;(dict.TryGetValue(key,&nbsp;<span style=\"color:blue;\">out</span>&nbsp;var&nbsp;result))\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">return</span>&nbsp;result;\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">return</span>&nbsp;Array.Empty&lt;T&gt;();\n}</pre>\n    </p>\n    <p>\n        If there's no entry for a key, this function instead returns an empty array.\n    </p>\n    <p>\n        That should make it as easy as possible to replace calls to <code>GetTopListenersAsync</code> and <code>GetTopScrobblesAsync</code> with dictionary lookups.\n    </p>\n    <h3 id=\"43b6cc924db64320a41f0a4093c65e29\">\n        Adding method parameters <a href=\"#43b6cc924db64320a41f0a4093c65e29\">#</a>\n    </h3>\n    <p>\n        When refactoring, it's a good idea to proceed in small, controlled steps. You can see each of my <a href=\"https://www.industriallogic.com/blog/whats-this-about-micro-commits/\">micro-commits</a> in the Git repository's <em>refactor-to-function</em> branch. Here, I'll give an overview.\n    </p>\n    <p>\n        First, I added two dictionaries as parameters to the <code>GetRecommendationsAsync</code> method. You may recall that the method used to look like this:\n    </p>\n    <p>\n        <pre><span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:blue;\">async</span>&nbsp;Task&lt;IReadOnlyList&lt;Song&gt;&gt;&nbsp;GetRecommendationsAsync(<span style=\"color:blue;\">string</span>&nbsp;userName)</pre>\n    </p>\n    <p>\n        After I added the two dictionaries, it looks like this:\n    </p>\n    <p>\n        <pre><span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:blue;\">async</span>&nbsp;Task&lt;IReadOnlyList&lt;Song&gt;&gt;&nbsp;GetRecommendationsAsync(\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">string</span>&nbsp;userName,\n&nbsp;&nbsp;&nbsp;&nbsp;IReadOnlyDictionary&lt;<span style=\"color:blue;\">string</span>,&nbsp;IReadOnlyCollection&lt;Scrobble&gt;&gt;&nbsp;topScrobbles,\n&nbsp;&nbsp;&nbsp;&nbsp;IReadOnlyDictionary&lt;<span style=\"color:blue;\">int</span>,&nbsp;IReadOnlyCollection&lt;User&gt;&gt;&nbsp;topListeners)</pre>\n    </p>\n    <p>\n        At this point, the <code>GetRecommendationsAsync</code> method uses neither the <code>topScrobbles</code> nor the <code>topListeners</code> parameter. Still, I consider this a <a href=\"https://stackoverflow.blog/2022/12/19/use-git-tactically/\">distinct checkpoint that I commit to Git</a>. As I've outlined in my book <a href=\"/2021/06/14/new-book-code-that-fits-in-your-head\">Code That Fits in Your Head</a>, it's safest to either refactor production code while keeping test code untouched, or refactor test code without editing the production code. An API change like the current is an example of a situation where that separation is impossible. This is the reason I want to keep it small and isolated. While the change does touch both production code and test code, I'm not editing the behaviour of the System Under Test.\n    </p>\n    <p>\n        Tests now look like this:\n    </p>\n    <p>\n        <pre>[&lt;Property&gt;]\n<span style=\"color:blue;\">let</span>&nbsp;``No&nbsp;data``&nbsp;()&nbsp;=\n&nbsp;&nbsp;&nbsp;&nbsp;Gen.userName&nbsp;|&gt;&nbsp;Arb.fromGen&nbsp;|&gt;&nbsp;Prop.forAll&nbsp;&lt;|&nbsp;<span style=\"color:blue;\">fun</span>&nbsp;userName&nbsp;<span style=\"color:blue;\">-&gt;</span>\n&nbsp;&nbsp;&nbsp;&nbsp;task&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">let</span>&nbsp;srvc&nbsp;=&nbsp;FakeSongService&nbsp;()\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">let</span>&nbsp;sut&nbsp;=&nbsp;RecommendationsProvider&nbsp;srvc\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">let!</span>&nbsp;topScrobbles&nbsp;=&nbsp;DataCollector.CollectAllTopScrobbles&nbsp;srvc\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">let!</span>&nbsp;topListeners&nbsp;=&nbsp;DataCollector.CollectAllTopListeners&nbsp;srvc\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">let!</span>&nbsp;actual&nbsp;=\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sut.GetRecommendationsAsync&nbsp;(userName,&nbsp;topScrobbles,&nbsp;topListeners)\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Assert.Empty&nbsp;actual&nbsp;}&nbsp;:&gt;&nbsp;Task</pre>\n    </p>\n    <p>\n        The test now uses the <code>DataCollector</code> to front-load data into dictionaries that it then passes to <code>GetRecommendationsAsync</code>. Keep in mind that <code>GetRecommendationsAsync</code> doesn't yet use that data, but it's available to it once I make a change to that effect.\n    </p>\n    <p>\n        You may wish to compare this version of the <code>No data</code> test with the previous version shown in the article <a href=\"/2025/04/10/characterising-song-recommendations\">Characterising song recommendations</a>.\n    </p>\n    <h3 id=\"02c3e9706d044528ad1d5acec6865385\">\n        Refactoring to function <a href=\"#02c3e9706d044528ad1d5acec6865385\">#</a>\n    </h3>\n    <p>\n        The code is now ready for refactoring <a href=\"/2017/01/27/from-dependency-injection-to-dependency-rejection\">from dependency injection to dependency rejection</a>. It's even possible to do it one method call at a time, because the data in the <code>FakeSongService</code> is the same as the data in the two dictionaries. It's just two different representations of the same data.\n    </p>\n    <p>\n        Since, as described above, the dictionaries are equivalent to the <code>SongService</code> queries, each is easily replaced with the other. The first impure action in <code>GetRecommendationsAsync</code>, for example, is this one:\n    </p>\n    <p>\n        <pre><span style=\"color:blue;\">var</span>&nbsp;scrobbles&nbsp;=&nbsp;<span style=\"color:blue;\">await</span>&nbsp;_songService.GetTopScrobblesAsync(userName);</pre>\n    </p>\n    <p>\n        The equivalent dictionary lookup enables us to change that line of code to this:\n    </p>\n    <p>\n        <pre><span style=\"color:blue;\">var</span>&nbsp;scrobbles&nbsp;=&nbsp;topScrobbles.GetOrEmpty(userName);</pre>\n    </p>\n    <p>\n        Notice that the dictionary lookup is a <a href=\"https://en.wikipedia.org/wiki/Pure_function\">pure function</a> that the method need not <code>await</code>.\n    </p>\n    <p>\n        Even though the rest of <code>GetRecommendationsAsync</code> still queries the injected <code>SongService</code>, all tests pass, and I can commit this small, isolated change to Git.\n    </p>\n    <p>\n        Proceeding in a similar fashion enables us to eliminate the <code>SongService</code> queries one by one. There are only three method calls, so this can be done in three controlled steps. Once the last impure query has been replaced, the C# compiler complains about the <code>async</code> keyword in the declaration of the <code>GetRecommendationsAsync</code> method.\n    </p>\n    <p>\n        Not only is the <code>async</code> keyword no longer required, the method is no longer asynchronous. There's no reason to return a <code>Task</code>, and the <code>Async</code> method name suffix is also misleading.\n    </p>\n    <p>\n        <pre><span style=\"color:blue;\">public</span>&nbsp;IReadOnlyList&lt;Song&gt;&nbsp;GetRecommendations(\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">string</span>&nbsp;userName,\n&nbsp;&nbsp;&nbsp;&nbsp;IReadOnlyDictionary&lt;<span style=\"color:blue;\">string</span>,&nbsp;IReadOnlyCollection&lt;Scrobble&gt;&gt;&nbsp;topScrobbles,\n&nbsp;&nbsp;&nbsp;&nbsp;IReadOnlyDictionary&lt;<span style=\"color:blue;\">int</span>,&nbsp;IReadOnlyCollection&lt;User&gt;&gt;&nbsp;topListeners)</pre>\n    </p>\n    <p>\n        The <code>GetRecommendations</code> method no longer uses the injected <code>SongService</code>, and since it's is the only method of the <code>RecommendationsProvider</code> class, we can now (r)eject the dependency.\n    </p>\n    <p>\n        This furthermore means that the class no longer has any class fields; we might as well make it (and the <code>GetRecommendations</code> function) <code>static</code>. Here's the final function in its entirety:\n    </p>\n    <p>\n        <pre><span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:blue;\">static</span>&nbsp;IReadOnlyList&lt;Song&gt;&nbsp;GetRecommendations(\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">string</span>&nbsp;userName,\n&nbsp;&nbsp;&nbsp;&nbsp;IReadOnlyDictionary&lt;<span style=\"color:blue;\">string</span>,&nbsp;IReadOnlyCollection&lt;Scrobble&gt;&gt;&nbsp;topScrobbles,\n&nbsp;&nbsp;&nbsp;&nbsp;IReadOnlyDictionary&lt;<span style=\"color:blue;\">int</span>,&nbsp;IReadOnlyCollection&lt;User&gt;&gt;&nbsp;topListeners)\n{\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:green;\">//&nbsp;1.&nbsp;Get&nbsp;user&#39;s&nbsp;own&nbsp;top&nbsp;scrobbles</span>\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:green;\">//&nbsp;2.&nbsp;Get&nbsp;other&nbsp;users&nbsp;who&nbsp;listened&nbsp;to&nbsp;the&nbsp;same&nbsp;songs</span>\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:green;\">//&nbsp;3.&nbsp;Get&nbsp;top&nbsp;scrobbles&nbsp;of&nbsp;those&nbsp;users</span>\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:green;\">//&nbsp;4.&nbsp;Aggregate&nbsp;the&nbsp;songs&nbsp;into&nbsp;recommendations</span>\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">var</span>&nbsp;scrobbles&nbsp;=&nbsp;topScrobbles.GetOrEmpty(userName);\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">var</span>&nbsp;scrobblesSnapshot&nbsp;=&nbsp;scrobbles\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.OrderByDescending(s&nbsp;=&gt;&nbsp;s.ScrobbleCount)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.Take(100)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.ToArray();\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">var</span>&nbsp;recommendationCandidates&nbsp;=&nbsp;<span style=\"color:blue;\">new</span>&nbsp;List&lt;Song&gt;();\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">foreach</span>&nbsp;(var&nbsp;scrobble&nbsp;<span style=\"color:blue;\">in</span>&nbsp;scrobblesSnapshot)\n&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">var</span>&nbsp;otherListeners&nbsp;=&nbsp;topListeners.GetOrEmpty(scrobble.Song.Id);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">var</span>&nbsp;otherListenersSnapshot&nbsp;=&nbsp;otherListeners\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.Where(u&nbsp;=&gt;&nbsp;u.TotalScrobbleCount&nbsp;&gt;=&nbsp;10_000)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.OrderByDescending(u&nbsp;=&gt;&nbsp;u.TotalScrobbleCount)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.Take(20)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.ToArray();\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">foreach</span>&nbsp;(var&nbsp;otherListener&nbsp;<span style=\"color:blue;\">in</span>&nbsp;otherListenersSnapshot)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">var</span>&nbsp;otherScrobbles&nbsp;=\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;topScrobbles.GetOrEmpty(otherListener.UserName);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">var</span>&nbsp;otherScrobblesSnapshot&nbsp;=&nbsp;otherScrobbles\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.Where(s&nbsp;=&gt;&nbsp;s.Song.IsVerifiedArtist)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.OrderByDescending(s&nbsp;=&gt;&nbsp;s.Song.Rating)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.Take(10)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.ToArray();\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;recommendationCandidates.AddRange(\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;otherScrobblesSnapshot.Select(s&nbsp;=&gt;&nbsp;s.Song)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;}\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">var</span>&nbsp;recommendations&nbsp;=&nbsp;recommendationCandidates\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.OrderByDescending(s&nbsp;=&gt;&nbsp;s.Rating)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.Take(200)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.ToArray();\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">return</span>&nbsp;recommendations;\n}</pre>\n    </p>\n    <p>\n        The overall structure is similar to <a href=\"https://tyrrrz.me/blog/pure-impure-segregation-principle\">the original version</a>. Now that the code is simpler (because there's no longer any asynchrony) you could keep refactoring. With this C# code example, I'm going to stop here, but when I port it to <a href=\"https://fsharp.org/\">F#</a> I'm going to refactor more aggressively.\n    </p>\n    <h3 id=\"b421654127ca4580995e008d4c01e3ab\">\n        Sandwich <a href=\"#b421654127ca4580995e008d4c01e3ab\">#</a>\n    </h3>\n    <p>\n        One point of the whole exercise is to demonstrate how to refactor to an Impureim Sandwich. The <code>GetRecommendations</code> method shown above constitutes the pure filling of the sandwich, but what does the entire sandwich look like?\n    </p>\n    <p>\n        In this code base, the sandwiches only exist as unit tests, the simplest of which is still the <code>No data</code> test:\n    </p>\n    <p>\n        <pre>[&lt;Property&gt;]\n<span style=\"color:blue;\">let</span>&nbsp;``No&nbsp;data``&nbsp;()&nbsp;=\n&nbsp;&nbsp;&nbsp;&nbsp;Gen.userName&nbsp;|&gt;&nbsp;Arb.fromGen&nbsp;|&gt;&nbsp;Prop.forAll&nbsp;&lt;|&nbsp;<span style=\"color:blue;\">fun</span>&nbsp;user&nbsp;<span style=\"color:blue;\">-&gt;</span>\n&nbsp;&nbsp;&nbsp;&nbsp;task&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">let</span>&nbsp;srvc&nbsp;=&nbsp;FakeSongService&nbsp;()\n \n<span style=\"background-color: lightsalmon;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">let!</span>&nbsp;topScrobbles&nbsp;=&nbsp;DataCollector.CollectAllTopScrobbles&nbsp;srvc\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">let!</span>&nbsp;topListeners&nbsp;=&nbsp;DataCollector.CollectAllTopListeners&nbsp;srvc</span>\n<span style=\"background-color: palegreen;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">let</span>&nbsp;actual&nbsp;=&nbsp;RecommendationsProvider.GetRecommendations&nbsp;(user,&nbsp;topScrobbles,&nbsp;topListeners)</span>\n \n<span style=\"background-color: lightsalmon;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Assert.Empty&nbsp;actual</span>&nbsp;}&nbsp;:&gt;&nbsp;Task</pre>\n    </p>\n    <p>\n        In the above code snippet, I've coloured in the relevant part of the test. I admit that it's a stretch to colour the last line red, since <code>Assert.Empty</code> is, at least, deterministic. One could argue that since it throws an exception on failure, it's not strictly free of side effects, but that's really a weak argument. It would be easy to refactor <a href=\"/2022/11/07/applicative-assertions\">assertions to pure functions</a>.\n    </p>\n    <p>\n        Instead, you may consider the bottom layer of the sandwich as a placeholder where something impure might happen. The background service that updates the song recommendations may, for example, save the result as a (CQRS-style) materialised view.\n    </p>\n    <p>\n        The above test snippet, then, is more of a sketch of how the Impureim Sandwich may look: First, front-load data using the <code>DataCollector</code> methods; second, call <code>GetRecommendations</code>; third, do something with the result.\n    </p>\n    <h3 id=\"26a74728792d494e814b8d86f2ad8531\">\n        Conclusion <a href=\"#26a74728792d494e814b8d86f2ad8531\">#</a>\n    </h3>\n    <p>\n        The changes demonstrated in this article serve two purposes. One is to show how to refactor an impure action to a pure function, pursuing the notion of an Impureim Sandwich. The second is to evaluate a proof-of-concept: If we do, indeed, front-load all of the data, is it realistic that all <a href=\"https://yourdatafitsinram.net/\">data fits in RAM</a>?\n    </p>\n    <p>\n        We have yet to address that question, but since the present article is already substantial, I'll address that in a separate article.\n    </p>\n    <strong>Next:</strong> <a href=\"/2025/05/12/song-recommendations-proof-of-concept-memory-measurements\">Song recommendations proof-of-concept memory measurements</a>.\n</div><hr>\n      This blog is totally free, but if you like it, please consider <a href=\"https://blog.ploeh.dk/support\">supporting it</a>.",
      "Content": null,
      "Language": "en-us",
      "Link": "https://blog.ploeh.dk/2025/05/05/song-recommendations-as-a-c-impureim-sandwich/"
    },
    {
      "FeedId": "https://blog.ploeh.dk",
      "ItemId": "https://blog.ploeh.dk/2025/04/28/song-recommendations-as-an-impureim-sandwich",
      "Title": "Song recommendations as an Impureim Sandwich",
      "PublishDate": "2025-04-28T07:16:00+02:00",
      "Summary": "\n\n\n<div id=\"post\">\n    <p>\n        <em>Does your data fit in RAM?</em>\n    </p>\n    <p>\n        This article is part of <a href=\"/2025/04/07/alternative-ways-to-design-with-functional-programming\">a series on functional programming design alternatives</a>. In a <a href=\"/2025/04/10/characterising-song-recommendations\">previous article</a> you saw how to add enough <a href=\"https://en.wikipedia.org/wiki/Characterization_test\">Characterisation Tests</a> to capture the intended behaviour of the example song recommendations system originally presented by <a href=\"https://tyrrrz.me/\">Oleksii Holub</a> in the article <a href=\"https://tyrrrz.me/blog/pure-impure-segregation-principle\">Pure-Impure Segregation Principle</a>.\n    </p>\n    <h3 id=\"572693e6fb56455a958ca0d62aa13319\">\n        Problem statement <a href=\"#572693e6fb56455a958ca0d62aa13319\">#</a>\n    </h3>\n    <p>\n        After showing how one problem can be refactored to <a href=\"https://en.wikipedia.org/wiki/Pure_function\">pure functions</a>, Oleksii Holub writes:\n    </p>\n    <blockquote>\n        <p>\n            \"Although very useful, the type of \"lossless\" refactoring shown earlier only works if the data required by the function can be easily encapsulated within its input parameters. Unfortunately, this is not always the case.\n        </p>\n        <p>\n            \"Often a function may need to dynamically resolve data from an external API or a database, with no way of knowing about it beforehand. This typically results in an implementation where pure and impure concerns are interleaved with each other, creating a tightly coupled cohesive structure.\"\n        </p>\n        <footer><cite>Oleksii Holub, <a href=\"https://tyrrrz.me/blog/pure-impure-segregation-principle\">Pure-Impure Segregation Principle</a></cite></footer>\n    </blockquote>\n    <p>\n        The article then proceeds to present the <em>song recommendations</em> example. It's a single C# method that queries a data store or third-party service to recommend songs. I'm imagining that it queries a third-party web service that contains usages data for a system like <a href=\"https://en.wikipedia.org/wiki/Spotify\">Spotify</a>.\n    </p>\n    <blockquote>\n        <p>\n            \"The above algorithm works by retrieving the user's most listened songs, finding other people who have also listened to the same titles, and then extracting their top songs as well. Those songs are then aggregated into a list of recommendations and returned to the caller.\n        </p>\n        <p>\n            \"It's quite clear that this function would benefit greatly from being pure, seeing how much business logic is encapsulated within it. Unfortunately, the technique we relied upon earlier won't work here.\n        </p>\n        <p>\n            \"In order to fully isolate <code>GetRecommendationsAsync(...)</code> from its impure dependencies, we would have to somehow supply the function with an entire list of songs, users, and their scrobbles upfront. If we assume that we're dealing with data on millions of users, it's obvious that this would be completely impractical and likely even impossible.\"\n        </p>\n        <footer><cite>Oleksii Holub, <a href=\"https://tyrrrz.me/blog/pure-impure-segregation-principle\">Pure-Impure Segregation Principle</a></cite></footer>\n    </blockquote>\n    <p>\n        It does, indeed, sound impractical.\n    </p>\n    <h3 id=\"ca5fdd1711554b3eb1ae7d516c003959\">\n        Data sizes <a href=\"#ca5fdd1711554b3eb1ae7d516c003959\">#</a>\n    </h3>\n    <p>\n        Can you, however, trust your intuition? Research suggests that the human brain is ill-equipped to think about randomness and probabilities, and I've observed something similar when it comes to data sizes.\n    </p>\n    <p>\n        <img src=\"/content/binary/dr-evil-one-million.jpg\" alt=\"Dr. Evil: One million.\">\n    </p>\n    <p>\n        In the real world, a million of anything countable is an almost incomprehensible amount, so it's no wonder if our intuition fails us. <em>A million records</em> sounds like a lot, but if it's only a few integers, is it really that bad?\n    </p>\n    <p>\n        Many systems use 32-bit integers for various IDs. A million IDs, then, is 32 million bits, or approximately 4 MB. As I'm writing this, the smallest Azure instance (<em>Free F1</em>) has 1 GB of memory, and while the OS takes a big bite out of that, 4 MB is nothing.\n    </p>\n    <p>\n        The <em>song recommendations</em> problem implies larger memory pressure. It may not fit on every machine, but it's worth considering if, after all, it doesn't fit in RAM.\n    </p>\n    <h3 id=\"0579cae8c684409f8a43eaf2baa1d5b0\">\n        My real-life experience with developing streaming services <a href=\"#0579cae8c684409f8a43eaf2baa1d5b0\">#</a>\n    </h3>\n    <p>\n        It just so happens that I have professional experience developing REST APIs for a white-label audio streaming service. Back in the early 2010s I helped design and implement the company's online music catalogue, user system, and a few other services. The catalogue is particularly interesting in this regard, since it only changed nightly, and we were planning on relying on HTTP for caching.\n    </p>\n    <p>\n        I vividly recall a meeting we had with the IT operations specialist responsible for the new catalogue service. We explained that we'd set HTTP cache timeouts to 6 hours, and asked if he'd be able to set up a <a href=\"https://en.wikipedia.org/wiki/Reverse_proxy\">reverse proxy</a> so that we didn't have to implement caching in our code base.\n    </p>\n    <p>\n        He asked how much cache space we needed.\n    </p>\n    <p>\n        We knew the size of a typical HTTP response, and the number of tracks, artists, and albums in the system, so after a back-of-the-envelope calculation, we told him: 18 GB.\n    </p>\n    <p>\n        He just shrugged and said <em>\"OK\"</em>.\n    </p>\n    <p>\n        In 2012 I though that 18 GB was a fair amount of data (I actually still think that). Even so, the operations team had plenty of servers with that capacity.\n    </p>\n    <p>\n        Later, I did more work for that company, but most of it is less relevant to the <em>song recommendations</em> example. What does turn out to be relevant to the topic is something I learned the first few days of my engagement.\n    </p>\n    <p>\n        Early on, before I was involved, the company needed a recommendation system, but hadn't been able to find any off-the-shelf component. This was in the early 2000s and before <a href=\"https://en.wikipedia.org/wiki/Apache_Solr\">Solr</a>, but after <a href=\"https://en.wikipedia.org/wiki/Apache_Lucene\">Lucene</a>. I'm not aware of all the forces that affected my then future client, but in the end, they decided to write their own search and recommendations engine.\n    </p>\n    <p>\n        Essentially, during the night a beefy server would read all relevant data from the database, crunch it, create data structures, and keep all data in memory. Like the reverse proxy, it required a server with more RAM than a normal <a href=\"https://en.wikipedia.org/wiki/Pizza_box_form_factor\">pizza box</a>, but not prohibitively so.\n    </p>\n    <h3 id=\"8fa70bcec92b4b8681af7ca819e82a22\">\n        Costs <a href=\"#8fa70bcec92b4b8681af7ca819e82a22\">#</a>\n    </h3>\n    <p>\n        Consider the cost of hardware, compared to developer time. A few specialised servers may set your organisation back a few thousand of dollars/pounds/euros. That's an amount you can easily burn through in salary if the code is too complicated, or has too many bugs.\n    </p>\n    <p>\n        You may argue that if you already have programmers on staff, they don't cost extra, but a too-complicated code base is still going to slow them down. Thus, the wrong software design could incur an <a href=\"https://en.wikipedia.org/wiki/Opportunity_cost\">opportunity cost</a> greater than the cost of a server.\n    </p>\n    <p>\n        One of many reasons I'm interested in functional programming (FP) is its potential to make code bases simpler. The <a href=\"/2020/03/02/impureim-sandwich\">Impureim Sandwich</a> is a wonderfully simple design, so it's worth pursuing; not only for some FP ideal, but because of its simplifying potential.\n    </p>\n    <p>\n        Intuition may tell us that the <em>song recommendations</em> scenario is prohibitively big, and therefore, an Impureim Sandwich is out of the question. As this overall article series explores, it's not the only alternative, but given its advantages, its worth giving it a second chance.\n    </p>\n    <h3 id=\"ac5d135ca06a472e88971ad6a8960aac\">\n        Analysis <a href=\"#ac5d135ca06a472e88971ad6a8960aac\">#</a>\n    </h3>\n    <p>\n        The <code>GetRecommendationsAsync</code> method from <a href=\"https://tyrrrz.me/blog/pure-impure-segregation-principle#interleaved-impurities\">the example</a> makes a lot of external calls, with its nested loops. The method uses the first call to <code>GetTopScrobblesAsync</code> to produce the <code>scrobblesSnapshot</code> variable, which is capped at 100 objects. If we assume that this method call returns at least 100 objects, the outer <code>foreach</code> loop will make 100 calls to <code>GetTopListenersAsync</code>.\n    </p>\n    <p>\n        If we again assume that each of these return enough data, the inner <code>foreach</code> loop will make 20 calls to <code>GetTopScrobblesAsync</code>, for each object in the outer loop. That's 2,000 external calls, plus the 100 calls in the outer loop, plus the initial call to <code>GetTopScrobblesAsync</code>, for a total of 2,101.\n    </p>\n    <p>\n        When I first saw the example, I didn't know much about the overall context. I didn't know if these impure actions were database queries or web service calls, so I asked Oleksii Holub.\n    </p>\n    <p>\n        It turns out that it's all web service calls, and as I interpret the response, <code>GetRecommendationsAsync</code> is being invoked from a background maintenance process.\n    </p>\n    <blockquote>\n        <p>\n            \"It takes around 10 min in total while maintaining it.\"\n        </p>\n        <footer><cite><a href=\"https://twitter.com/Tyrrrz/status/1493369905869213700\">Tweet</a>, Oleksii Holub, 2022</cite></footer>\n    </blockquote>\n    <p>\n        That's good to know, because if we're going to consider an Impureim Sandwich, it implies reading gigabytes of data in the first phase. That's going to take some time, but if this is a background process, we <em>do</em> have time.\n    </p>\n    <h3 id=\"2160fbaf60434edd9554ff585de5df2b\">\n        Memory estimates <a href=\"#2160fbaf60434edd9554ff585de5df2b\">#</a>\n    </h3>\n    <p>\n        One thing is to load an entire song catalogue into memory. That's what required 18 GB in 2012. Another thing is to load all scrobbles; i.e. statistics about plays. Fortunately, in order to produce song recommendations, we only need IDs. Consider again the data structures from the <a href=\"/2025/04/10/characterising-song-recommendations\">previous article</a>:\n    </p>\n    <p>\n        <pre><span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:blue;\">sealed</span>&nbsp;<span style=\"color:blue;\">record</span>&nbsp;<span style=\"color:#2b91af;\">Song</span>(<span style=\"color:blue;\">int</span>&nbsp;Id,&nbsp;<span style=\"color:blue;\">bool</span>&nbsp;IsVerifiedArtist,&nbsp;<span style=\"color:blue;\">byte</span>&nbsp;Rating);\n\n<span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:blue;\">sealed</span>&nbsp;<span style=\"color:blue;\">record</span>&nbsp;<span style=\"color:#2b91af;\">Scrobble</span>(Song&nbsp;Song,&nbsp;<span style=\"color:blue;\">int</span>&nbsp;ScrobbleCount);\n\n<span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:blue;\">sealed</span>&nbsp;<span style=\"color:blue;\">record</span>&nbsp;<span style=\"color:#2b91af;\">User</span>(<span style=\"color:blue;\">string</span>&nbsp;UserName,&nbsp;<span style=\"color:blue;\">int</span>&nbsp;TotalScrobbleCount);</pre>\n    </p>\n    <p>\n        Apart from the <code>UserName</code> all values are small predictable values: <code>int</code>, <code>byte</code>, and <code>bool</code>, and while a <code>string</code> may be arbitrarily long, we can make a guess at the average size of a user name. In the <a href=\"/2025/04/10/characterising-song-recommendations\">previous article</a>, I assumed that the user name would be an alphanumeric string between one and twenty characters.\n    </p>\n    <p>\n        How many songs might a system contain? Some numbers thrown around for a system like Spotify suggest a number on the order of 100 million. With an <code>int</code>, a <code>bool</code>, and a <code>byte</code>, we can estimate that a song requires 6 bytes, plus some overhead. Let's guess 8 bytes. A 100 million songs would then require 800 million bytes, or around 800 MB. That eliminates the smallest cloud instances, but is in itself easily within reach for all modern computers. Your phone has more memory than that.\n    </p>\n    <p>\n        How about scrobbles? While I don't use Spotify, <a href=\"https://www.last.fm/user/ploeh\">I do scrobble plays to Last.fm</a>. At the moment I have around 114,000 scrobbles, and while I don't listen to music as much as I used to when I was younger, I have, on the other hand, been at it for a long time: Since 2007. If we assume that each user has 200,000 scrobbles, and a scrobble requires 8 bytes, that's 1,600,000 bytes, or 1.6 MB. Practically nothing.\n    </p>\n    <p>\n        The size of a <code>User</code> object depends on how long the user name is, but will probably, on average, be less than 32 bytes. Compared to the user's scrobbles, we can ignore the memory pressure of the user object itself.\n    </p>\n    <p>\n        As the number of users grow, it will dominate the memory requirements for the catalogue. How many users should we assume?\n    </p>\n    <p>\n        A million is probably too few, but for a frame of reference, that would require 1,6 TB. This is where it starts to sound unfeasible to keep all data in RAM. Even though servers with that much RAM exist, they're so expensive (still) that the above cost consideration no longer applies.\n    </p>\n    <p>\n        Still, there are some naive assumptions above. Instead of storing each scrobble in a separate <code>Scrobble</code> object, you could store repeated plays as a single object with the appropriate <code>ScrobbleCount</code> value. If you've listened to the same song 50 times, it doesn't require 400 bytes of storage, but only 8 bytes. That is, after all, orders of magnitude less.\n    </p>\n    <p>\n        In the end, back-of-the-envelope calculations are fine, but measurements are better. It might be worthwhile to develop a proof of concept and measure how much memory it requires.\n    </p>\n    <p>\n        In three articles, I'll explore how a <em>song recommendations</em> Impureim Sandwich looks in various constellations:\n    </p>\n    <ul>\n        <li><a href=\"/2025/05/05/song-recommendations-as-a-c-impureim-sandwich\">Song recommendations as a C# Impureim Sandwich</a></li>\n        <li>Song recommendations as an F# Impureim Sandwich</li>\n        <li>Song recommendations as a Haskell Impureim Sandwich</li>\n    </ul>\n    <p>\n        In the end, it may turn out that for this particular system, an Impureim Sandwich truly is unfeasible. Keep in mind, though, that the purpose of this article series is to demonstrate alternative designs. The <em>song recommendations</em> problem is just a placeholder example. Perhaps you have another system where, intuitively, an Impureim Sandwich sounds impossible, but once you run the numbers, it might actually be not only possible, but desirable.\n    </p>\n    <h3 id=\"d38416a3535743159ba26abb4a78948b\">\n        Conclusion <a href=\"#d38416a3535743159ba26abb4a78948b\">#</a>\n    </h3>\n    <p>\n        Modern computers have so vast storage capacities that intuition often fails us. We may think that billions of data points sounds like something that can't possibly fit in RAM. When you run the numbers, however, it may turn out that the required data fits on a normal server.\n    </p>\n    <p>\n        If so, an Impureim Sandwich may still be an option. Load data into memory, pass it as argument to a pure function, and handle the return value.\n    </p>\n    <p>\n        The <em>song recommendations</em> scenario is interesting because an Impureim Sandwich seems to be pushing the envelope. It probably <em>is</em> impractical, but still worth a proof of concept. On the other hand, if it's impractical, it's worthwhile to also explore alternatives. Later articles will do that, but first, if you're interested, the next articles look at the proofs of concept in three languages.\n    </p>\n    <p>\n        <strong>Next:</strong> <a href=\"/2025/05/05/song-recommendations-as-a-c-impureim-sandwich\">Song recommendations as a C# Impureim Sandwich</a>.\n    </p>\n</div><hr>\n      This blog is totally free, but if you like it, please consider <a href=\"https://blog.ploeh.dk/support\">supporting it</a>.",
      "Content": null,
      "Language": "en-us",
      "Link": "https://blog.ploeh.dk/2025/04/28/song-recommendations-as-an-impureim-sandwich/"
    },
    {
      "FeedId": "https://blog.ploeh.dk",
      "ItemId": "https://blog.ploeh.dk/2025/04/21/porting-song-recommendations-to-haskell",
      "Title": "Porting song recommendations to Haskell",
      "PublishDate": "2025-04-21T10:19:00+02:00",
      "Summary": "\n\n\n<div id=\"post\">\n    <p>\n        <em>An F# code base translated to Haskell.</em>\n    </p>\n    <p>\n        This article is part of a <a href=\"/2025/04/07/alternative-ways-to-design-with-functional-programming\">larger article series</a> that examines variations of how to take on a non-trivial problem using <a href=\"/2018/11/19/functional-architecture-a-definition\">functional architecture</a>. In a <a href=\"/2025/04/10/characterising-song-recommendations\">previous article</a> we established a baseline C# code base. Future articles are going to use that C# code base as a starting point for refactored code. On the other hand, I also want to demonstrate what such solutions may look like in languages like <a href=\"https://fsharp.org/\">F#</a> or <a href=\"https://www.haskell.org/\">Haskell</a>. In this article, you'll see how to port the baseline to Haskell. To be honest, I first <a href=\"/2025/04/14/porting-song-recommendations-to-f\">ported the C# code to F#</a>, and then used the F# code as a guide to implement equivalent Haskell code.\n    </p>\n    <p>\n        If you're following along in the Git repositories, this is a repository separate from the .NET repositories. The code shown here is from its <em>master</em> branch.\n    </p>\n    <p>\n        If you don't care about Haskell, you can always go back to the table of contents in <a href=\"/2025/04/07/alternative-ways-to-design-with-functional-programming\">the 'root' article</a> and proceed to the next topic that interests you.\n    </p>\n    <h3 id=\"2c7511eb050b4d399f7e7fb154c5d990\">\n        Data structures <a href=\"#2c7511eb050b4d399f7e7fb154c5d990\">#</a>\n    </h3>\n    <p>\n        When working with statically typed functional languages like Haskell, it often makes most sense to start by declaring data structures.\n    </p>\n    <p>\n        <pre><span style=\"color:blue;\">data</span>&nbsp;User&nbsp;=&nbsp;User\n&nbsp;&nbsp;{&nbsp;userName&nbsp;::&nbsp;String\n&nbsp;&nbsp;,&nbsp;userScrobbleCount&nbsp;::&nbsp;Int&nbsp;}\n&nbsp;&nbsp;<span style=\"color:blue;\">deriving</span>&nbsp;(<span style=\"color:#2b91af;\">Show</span>,&nbsp;<span style=\"color:#2b91af;\">Eq</span>)</pre>\n    </p>\n    <p>\n        This is much like an F# or C# record declaration, and this one echoes the corresponding types in F# and C#. The most significant difference is that here, a user's total count of scrobbles is called <code>userScrobbleCount</code> rather than <code>TotalScrobbleCount</code>. The motivation behind that variation is that Haskell data 'getters' are actually top-level functions, so it's usually a good idea to prefix them with the name of the data structure they work on. Since the data structure is called <code>User</code>, both 'getter' functions get the <code>user</code> prefix.\n    </p>\n    <p>\n        I found <code>userTotalScrobbleCount</code> a bit too verbose to my tastes, so I dropped the <code>Total</code> part. Whether or not that's appropriate remains to be seen. Naming in programming is always hard, and there's a risk that you don't get it right the first time around. Unless you're publishing a reusable library, however, the option to rename it later remains.\n    </p>\n    <p>\n        The other two data structures are quite similar:\n    </p>\n    <p>\n        <pre><span style=\"color:blue;\">data</span>&nbsp;Song&nbsp;=&nbsp;Song\n&nbsp;&nbsp;{&nbsp;songId&nbsp;::&nbsp;Int\n&nbsp;&nbsp;,&nbsp;songHasVerifiedArtist&nbsp;::&nbsp;Bool\n&nbsp;&nbsp;,&nbsp;songRating&nbsp;::&nbsp;Word8&nbsp;}\n&nbsp;&nbsp;<span style=\"color:blue;\">deriving</span>&nbsp;(<span style=\"color:#2b91af;\">Show</span>,&nbsp;<span style=\"color:#2b91af;\">Eq</span>)\n \n<span style=\"color:blue;\">data</span>&nbsp;Scrobble&nbsp;=&nbsp;Scrobble\n&nbsp;&nbsp;{&nbsp;scrobbledSong&nbsp;::&nbsp;Song\n&nbsp;&nbsp;,&nbsp;scrobbleCount&nbsp;::&nbsp;Int&nbsp;}\n&nbsp;&nbsp;<span style=\"color:blue;\">deriving</span>&nbsp;(<span style=\"color:#2b91af;\">Show</span>,&nbsp;<span style=\"color:#2b91af;\">Eq</span>)</pre>\n    </p>\n    <p>\n        I thought that <code>scrobbledSong</code> was more descriptive than <code>scrobbleSong</code>, so I allowed myself that little deviation from the <a href=\"/2015/08/03/idiomatic-or-idiosyncratic\">idiomatic</a> naming convention. It didn't cause any problems, but I'm still not sure if that was a good decision.\n    </p>\n    <p>\n        How does one translate a C# interface to Haskell? Although type classes aren't quite the same as C# or Java interfaces, this language feature is close enough that I can use it in that role. I don't consider such a type class idiomatic in Haskell, but as an counterpart to the C# interface, it works well enough.\n    </p>\n    <p>\n        <pre><span style=\"color:blue;\">class</span>&nbsp;<span style=\"color:#2b91af;\">SongService</span>&nbsp;a&nbsp;<span style=\"color:blue;\">where</span>\n&nbsp;&nbsp;<span style=\"color:#2b91af;\">getTopListeners</span>&nbsp;<span style=\"color:blue;\">::</span>&nbsp;a&nbsp;<span style=\"color:blue;\">-&gt;</span>&nbsp;<span style=\"color:#2b91af;\">Int</span>&nbsp;<span style=\"color:blue;\">-&gt;</span>&nbsp;<span style=\"color:#2b91af;\">IO</span>&nbsp;[<span style=\"color:blue;\">User</span>]\n&nbsp;&nbsp;<span style=\"color:#2b91af;\">getTopScrobbles</span>&nbsp;<span style=\"color:blue;\">::</span>&nbsp;a&nbsp;<span style=\"color:blue;\">-&gt;</span>&nbsp;<span style=\"color:#2b91af;\">String</span>&nbsp;<span style=\"color:blue;\">-&gt;</span>&nbsp;<span style=\"color:#2b91af;\">IO</span>&nbsp;[<span style=\"color:blue;\">Scrobble</span>]</pre>\n    </p>\n    <p>\n        Any instance of the <code>SongService</code> class supports queries for top listeners of a particular song, as well as for top scrobbles for a user.\n    </p>\n    <p>\n        To reiterate, I don't intend to keep this type class around if I can help it, but for didactic reasons, it'll remain in some of the future refactorings, so that you can contrast and compare the Haskell code to its C# and F# peers.\n    </p>\n    <h3 id=\"83350f6a8a484249b466fcb72978c64d\">\n        Test Double <a href=\"#83350f6a8a484249b466fcb72978c64d\">#</a>\n    </h3>\n    <p>\n        To support tests, I needed a <a href=\"https://martinfowler.com/bliki/TestDouble.html\">Test Double</a>, so I defined the following <a href=\"http://xunitpatterns.com/Fake%20Object.html\">Fake</a> service, which is nothing but a deterministic in-memory instance. The type itself is just a wrapper of two maps.\n    </p>\n    <p>\n        <pre><span style=\"color:blue;\">data</span>&nbsp;FakeSongService&nbsp;=&nbsp;FakeSongService\n&nbsp;&nbsp;{&nbsp;fakeSongs&nbsp;::&nbsp;Map&nbsp;Int&nbsp;Song\n&nbsp;&nbsp;,&nbsp;fakeUsers&nbsp;::&nbsp;Map&nbsp;String&nbsp;(Map&nbsp;Int&nbsp;Int)&nbsp;}\n&nbsp;&nbsp;<span style=\"color:blue;\">deriving</span>&nbsp;(<span style=\"color:#2b91af;\">Show</span>,&nbsp;<span style=\"color:#2b91af;\">Eq</span>)</pre>\n    </p>\n    <p>\n        Like the equivalent C# class, <code>fakeSongs</code> is a map from song ID to <code>Song</code>, while <code>fakeUsers</code> is a bit more complex. It's a map keyed on user name, but the value is another map. The keys of that inner map are song IDs, while the values are the number of times each song was scrobbled by that user.\n    </p>\n    <p>\n        The <code>FakeSongService</code> data structure is a <code>SongService</code> instance by explicit implementation:\n    </p>\n    <p>\n        <pre><span style=\"color:blue;\">instance</span>&nbsp;<span style=\"color:blue;\">SongService</span>&nbsp;<span style=\"color:blue;\">FakeSongService</span>&nbsp;<span style=\"color:blue;\">where</span>\n&nbsp;&nbsp;getTopListeners&nbsp;srvc&nbsp;sid&nbsp;=&nbsp;<span style=\"color:blue;\">do</span>\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">return</span>&nbsp;$\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">uncurry</span>&nbsp;User&nbsp;&lt;$&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Map.toList&nbsp;(<span style=\"color:blue;\">sum</span>&nbsp;&lt;$&gt;&nbsp;Map.<span style=\"color:blue;\">filter</span>&nbsp;(Map.member&nbsp;sid)&nbsp;(fakeUsers&nbsp;srvc))\n&nbsp;&nbsp;getTopScrobbles&nbsp;srvc&nbsp;userName&nbsp;=&nbsp;<span style=\"color:blue;\">do</span>\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">return</span>&nbsp;$\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">fmap</span>&nbsp;(\\(sid,&nbsp;c)&nbsp;-&gt;&nbsp;Scrobble&nbsp;(fakeSongs&nbsp;srvc&nbsp;!&nbsp;sid)&nbsp;c)&nbsp;$\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Map.toList&nbsp;$\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Map.findWithDefault&nbsp;Map.empty&nbsp;userName&nbsp;(fakeUsers&nbsp;srvc)</pre>\n    </p>\n    <p>\n        In order to find all the top listeners of a song, it finds all the <code>fakeUsers</code> who have the song ID (<code>sid</code>) in their inner map, sum all of those users' scrobble counts together and creates <code>User</code> values from that data.\n    </p>\n    <p>\n        To find the top scrobbles of a user, the instance finds the user in the <code>fakeUsers</code> map, looks each of that user's scrobbled song up in <code>fakeSongs</code>, and creates <code>Scrobble</code> values from that information.\n    </p>\n    <p>\n        Finally, test code needs a way to add data to a <code>FakeSongService</code> value, which this <a href=\"http://xunitpatterns.com/Test%20Utility%20Method.html\">test-specific helper function</a> accomplishes:\n    </p>\n    <p>\n        <pre>scrobble&nbsp;userName&nbsp;s&nbsp;c&nbsp;(FakeSongService&nbsp;ss&nbsp;us)&nbsp;=\n&nbsp;&nbsp;<span style=\"color:blue;\">let</span>&nbsp;sid&nbsp;=&nbsp;songId&nbsp;s\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ss&#39;&nbsp;=&nbsp;Map.insertWith&nbsp;(\\_&nbsp;_&nbsp;-&gt;&nbsp;s)&nbsp;sid&nbsp;s&nbsp;ss\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;us&#39;&nbsp;=&nbsp;Map.insertWith&nbsp;(Map.unionWith&nbsp;<span style=\"color:#2b91af;\">(+)</span>)&nbsp;userName&nbsp;(Map.singleton&nbsp;sid&nbsp;c)&nbsp;us\n&nbsp;&nbsp;<span style=\"color:blue;\">in</span>&nbsp;FakeSongService&nbsp;ss&#39;&nbsp;us&#39;</pre>\n    </p>\n    <p>\n        Given a user name, a song, a scrobble count, and a <code>FakeSongService</code>, this function returns a new <code>FakeSongService</code> value with the new data added to the data already there.\n    </p>\n    <h3 id=\"1e89e2737f3e4fe1849f840052f305e2\">\n        QuickCheck Arbitraries <a href=\"#1e89e2737f3e4fe1849f840052f305e2\">#</a>\n    </h3>\n    <p>\n        In the F# test code I used <a href=\"https://fscheck.github.io/FsCheck/\">FsCheck</a> to get good coverage of the code. For Haskell, I'll use <a href=\"https://hackage.haskell.org/package/QuickCheck\">QuickCheck</a>.\n    </p>\n    <p>\n        Porting the ideas from the F# tests, I define a QuickCheck generator for user names:\n    </p>\n    <p>\n        <pre><span style=\"color:#2b91af;\">alphaNum</span>&nbsp;<span style=\"color:blue;\">::</span>&nbsp;<span style=\"color:blue;\">Gen</span>&nbsp;<span style=\"color:#2b91af;\">Char</span>\nalphaNum&nbsp;=&nbsp;elements&nbsp;([<span style=\"color:#a31515;\">&#39;a&#39;</span>..<span style=\"color:#a31515;\">&#39;z&#39;</span>]&nbsp;++&nbsp;[<span style=\"color:#a31515;\">&#39;A&#39;</span>..<span style=\"color:#a31515;\">&#39;Z&#39;</span>]&nbsp;++&nbsp;[<span style=\"color:#a31515;\">&#39;0&#39;</span>..<span style=\"color:#a31515;\">&#39;9&#39;</span>])\n \n<span style=\"color:#2b91af;\">userName</span>&nbsp;<span style=\"color:blue;\">::</span>&nbsp;<span style=\"color:blue;\">Gen</span>&nbsp;<span style=\"color:#2b91af;\">String</span>\nuserName&nbsp;=&nbsp;<span style=\"color:blue;\">do</span>\n&nbsp;&nbsp;len&nbsp;&lt;-&nbsp;choose&nbsp;(1,&nbsp;19)\n&nbsp;&nbsp;first&nbsp;&lt;-&nbsp;elements&nbsp;$&nbsp;[<span style=\"color:#a31515;\">&#39;a&#39;</span>..<span style=\"color:#a31515;\">&#39;z&#39;</span>]&nbsp;++&nbsp;[<span style=\"color:#a31515;\">&#39;A&#39;</span>..<span style=\"color:#a31515;\">&#39;Z&#39;</span>]\n&nbsp;&nbsp;rest&nbsp;&lt;-&nbsp;vectorOf&nbsp;len&nbsp;alphaNum\n&nbsp;&nbsp;<span style=\"color:blue;\">return</span>&nbsp;$&nbsp;first&nbsp;:&nbsp;rest</pre>\n    </p>\n    <p>\n        It's not that the algorithm only works if usernames are alphanumeric strings that start with a letter and are no longer than twenty characters, but whenever a property is falsified, I'd rather look at a user name like <code>\"Yvj0D1I\"</code> or <code>\"tyD9P1eOqwMMa1Q6u\"</code> (which are already bad enough), than something with line breaks and unprintable characters.\n    </p>\n    <p>\n        Working with QuickCheck, it's often <a href=\"/2019/09/02/naming-newtypes-for-quickcheck-arbitraries\">useful to wrap types from the System Under Test in test-specific Arbitrary wrappers</a>:\n    </p>\n    <p>\n        <pre><span style=\"color:blue;\">newtype</span>&nbsp;ValidUserName&nbsp;=&nbsp;ValidUserName&nbsp;{&nbsp;getUserName&nbsp;::&nbsp;String&nbsp;}&nbsp;<span style=\"color:blue;\">deriving</span>&nbsp;(<span style=\"color:#2b91af;\">Show</span>,&nbsp;<span style=\"color:#2b91af;\">Eq</span>)\n \n<span style=\"color:blue;\">instance</span>&nbsp;<span style=\"color:blue;\">Arbitrary</span>&nbsp;<span style=\"color:blue;\">ValidUserName</span>&nbsp;<span style=\"color:blue;\">where</span>\n&nbsp;&nbsp;arbitrary&nbsp;=&nbsp;ValidUserName&nbsp;&lt;$&gt;&nbsp;userName</pre>\n    </p>\n    <p>\n        I also defined a (simpler) <code>Arbitrary</code> instance for <code>Song</code> called <code>AnySong</code>.\n    </p>\n    <h3 id=\"fd6ddacfd3c34430abb30288f5fb37a6\">\n        A few properties <a href=\"#fd6ddacfd3c34430abb30288f5fb37a6\">#</a>\n    </h3>\n    <p>\n        With <code>FakeSongService</code> in place, I proceeded to add the test code, starting from the top of the F# test code, and translating each as faithfully as possible. The first one is an <a href=\"https://agileotter.blogspot.com/2008/12/unit-test-ice-breakers.html\">Ice Breaker Test</a> that only verifies that the System Under Test exists and doesn't crash when called.\n    </p>\n    <p>\n        <pre>testProperty&nbsp;<span style=\"color:#a31515;\">&quot;No&nbsp;data&quot;</span>&nbsp;$&nbsp;\\&nbsp;(ValidUserName&nbsp;un)&nbsp;-&gt;&nbsp;ioProperty&nbsp;$&nbsp;<span style=\"color:blue;\">do</span>\n&nbsp;&nbsp;actual&nbsp;&lt;-&nbsp;getRecommendations&nbsp;emptyService&nbsp;un\n&nbsp;&nbsp;<span style=\"color:blue;\">return</span>&nbsp;$&nbsp;<span style=\"color:blue;\">null</span>&nbsp;actual</pre>\n    </p>\n    <p>\n        As I've done since at least 2019, <a href=\"/2019/03/11/an-example-of-state-based-testing-in-haskell\">it seems</a>, I've <a href=\"/2018/05/07/inlined-hunit-test-lists\">inlined test cases as anonymous functions</a>; this time as QuickCheck properties. This one just creates a <code>FakeSongService</code> that contains no data, and asks for recommendations. The expected result is that <code>actual</code> is empty (<code>null</code>), since there's nothing to recommend.\n    </p>\n    <p>\n        A slightly more involved property adds some data to the service before requesting recommendations:\n    </p>\n    <p>\n        <pre>testProperty&nbsp;<span style=\"color:#a31515;\">&quot;One&nbsp;user,&nbsp;some&nbsp;songs&quot;</span>&nbsp;$&nbsp;\\\n&nbsp;&nbsp;(ValidUserName&nbsp;user)\n&nbsp;&nbsp;(<span style=\"color:blue;\">fmap</span>&nbsp;getSong&nbsp;-&gt;&nbsp;songs)\n&nbsp;&nbsp;-&gt;&nbsp;monadicIO&nbsp;$&nbsp;<span style=\"color:blue;\">do</span>\n&nbsp;&nbsp;scrobbleCounts&nbsp;&lt;-&nbsp;pick&nbsp;$&nbsp;vectorOf&nbsp;(<span style=\"color:blue;\">length</span>&nbsp;songs)&nbsp;$&nbsp;choose&nbsp;(1,&nbsp;100)\n&nbsp;&nbsp;<span style=\"color:blue;\">let</span>&nbsp;scrobbles&nbsp;=&nbsp;<span style=\"color:blue;\">zip</span>&nbsp;songs&nbsp;scrobbleCounts\n&nbsp;&nbsp;<span style=\"color:blue;\">let</span>&nbsp;srvc&nbsp;=&nbsp;<span style=\"color:blue;\">foldr</span>&nbsp;(<span style=\"color:blue;\">uncurry</span>&nbsp;(scrobble&nbsp;user))&nbsp;emptyService&nbsp;scrobbles\n \n&nbsp;&nbsp;actual&nbsp;&lt;-&nbsp;run&nbsp;$&nbsp;getRecommendations&nbsp;srvc&nbsp;user\n \n&nbsp;&nbsp;assertWith&nbsp;(<span style=\"color:blue;\">null</span>&nbsp;actual)&nbsp;<span style=\"color:#a31515;\">&quot;Should&nbsp;be&nbsp;empty&quot;</span></pre>\n    </p>\n    <p>\n        A couple of things are worthy of note. First, the property <a href=\"/2018/05/14/project-arbitraries-with-view-patterns\">uses a view pattern to project a list of songs from a list of Arbitraries</a>, where <code>getSong</code> is the 'getter' that belongs to the <code>AnySong</code> <code>newtype</code> wrapper.\n    </p>\n    <p>\n        I find view patterns quite useful as a declarative way to 'promote' a single <code>Arbitrary</code> instance to a list. In a third property, I take it a step further:\n    </p>\n    <p>\n        <pre>(<span style=\"color:blue;\">fmap</span>&nbsp;getUserName&nbsp;-&gt;&nbsp;NonEmpty&nbsp;users)</pre>\n    </p>\n    <p>\n        This not only turns the singular <code>ValidUserName</code> wrapper into a list, but by projecting it into <code>NonEmpty</code>, the test declares that <code>users</code> is a non-empty list. QuickCheck picks all that up and generates values accordingly.\n    </p>\n    <p>\n        If you're interested in seeing this more advanced view pattern in context, you may consult the Git repository.\n    </p>\n    <p>\n        Secondly, the <code>\"One user, some songs\"</code> test runs in <code>monadicIO</code>, which I didn't know existed before I wrote these tests. Together with <code>pick</code>, <code>run</code>, and <code>assertWith</code>, <code>monadicIO</code> is defined in <a href=\"https://hackage.haskell.org/package/QuickCheck/docs/Test-QuickCheck-Monadic.html\">Test.QuickCheck.Monadic</a>. It enables you to write properties that run in <code>IO</code>, which these properties need to do, because <code>getRecommendations</code> is <code>IO</code>-bound.\n    </p>\n    <p>\n        There's one more QuickCheck property in the code base, but it mostly repeats techniques already shown here. See the Git repository for all the details, if necessary.\n    </p>\n    <h3 id=\"76fa24be614e460e9af82b2652c82c07\">\n        Examples <a href=\"#76fa24be614e460e9af82b2652c82c07\">#</a>\n    </h3>\n    <p>\n        In addition to the properties, I also ported the F# examples; that is, 'normal' unit tests. Here's one of them:\n    </p>\n    <p>\n        <pre><span style=\"color:#a31515;\">&quot;One&nbsp;verified&nbsp;recommendation&quot;</span>&nbsp;~:&nbsp;<span style=\"color:blue;\">do</span>\n&nbsp;&nbsp;<span style=\"color:blue;\">let</span>&nbsp;srvc&nbsp;=\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;scrobble&nbsp;<span style=\"color:#a31515;\">&quot;ana&quot;</span>&nbsp;(Song&nbsp;2&nbsp;True&nbsp;5)&nbsp;9_9990&nbsp;$\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;scrobble&nbsp;<span style=\"color:#a31515;\">&quot;ana&quot;</span>&nbsp;(Song&nbsp;1&nbsp;False&nbsp;5)&nbsp;10&nbsp;$\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;scrobble&nbsp;<span style=\"color:#a31515;\">&quot;cat&quot;</span>&nbsp;(Song&nbsp;1&nbsp;False&nbsp;6)&nbsp;10&nbsp;emptyService\n \n&nbsp;&nbsp;actual&nbsp;&lt;-&nbsp;getRecommendations&nbsp;srvc&nbsp;<span style=\"color:#a31515;\">&quot;cat&quot;</span>\n \n&nbsp;&nbsp;[Song&nbsp;2&nbsp;True&nbsp;5]&nbsp;@=?&nbsp;actual</pre>\n    </p>\n    <p>\n        This one is straightforward, but as I already discussed when <a href=\"/2025/04/10/characterising-song-recommendations\">characterizing the original code</a>, some of the examples essentially document quirks in the implementation. Here's the relevant test, translated to Haskell:\n    </p>\n    <p>\n        <pre><span style=\"color:#a31515;\">&quot;Only&nbsp;top-rated&nbsp;songs&quot;</span>&nbsp;~:&nbsp;<span style=\"color:blue;\">do</span>\n&nbsp;&nbsp;<span style=\"color:green;\">--&nbsp;Scale&nbsp;ratings&nbsp;to&nbsp;keep&nbsp;them&nbsp;less&nbsp;than&nbsp;or&nbsp;equal&nbsp;to&nbsp;10.\n</span>&nbsp;&nbsp;<span style=\"color:blue;\">let</span>&nbsp;srvc&nbsp;=\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">foldr</span>&nbsp;(\\i&nbsp;-&gt;&nbsp;scrobble&nbsp;<span style=\"color:#a31515;\">&quot;hyle&quot;</span>&nbsp;(Song&nbsp;i&nbsp;True&nbsp;(<span style=\"color:blue;\">toEnum</span>&nbsp;i&nbsp;`div`&nbsp;2))&nbsp;500)&nbsp;emptyService&nbsp;[1..20]\n \n&nbsp;&nbsp;actual&nbsp;&lt;-&nbsp;getRecommendations&nbsp;srvc&nbsp;<span style=\"color:#a31515;\">&quot;hyle&quot;</span>\n \n&nbsp;&nbsp;assertBool&nbsp;<span style=\"color:#a31515;\">&quot;Should&nbsp;not&nbsp;be&nbsp;empty&quot;</span>&nbsp;(<span style=\"color:blue;\">not</span>&nbsp;$&nbsp;<span style=\"color:blue;\">null</span>&nbsp;actual)\n&nbsp;&nbsp;<span style=\"color:green;\">--&nbsp;Since&nbsp;there&#39;s&nbsp;only&nbsp;one&nbsp;user,&nbsp;but&nbsp;with&nbsp;20&nbsp;songs,&nbsp;the&nbsp;implementation\n</span>&nbsp;&nbsp;<span style=\"color:green;\">--&nbsp;loops&nbsp;over&nbsp;the&nbsp;same&nbsp;songs&nbsp;20&nbsp;times,&nbsp;so&nbsp;400&nbsp;songs&nbsp;in&nbsp;total&nbsp;(with\n</span>&nbsp;&nbsp;<span style=\"color:green;\">--&nbsp;duplicates).&nbsp;Ordering&nbsp;on&nbsp;rating,&nbsp;only&nbsp;the&nbsp;top-rated&nbsp;200&nbsp;remains,&nbsp;that\n</span>&nbsp;&nbsp;<span style=\"color:green;\">--&nbsp;is,&nbsp;those&nbsp;rated&nbsp;5-10.&nbsp;Note&nbsp;that&nbsp;this&nbsp;is&nbsp;a&nbsp;Characterization&nbsp;Test,&nbsp;so&nbsp;not\n</span>&nbsp;&nbsp;<span style=\"color:green;\">--&nbsp;necessarily&nbsp;reflective&nbsp;of&nbsp;how&nbsp;a&nbsp;real&nbsp;recommendation&nbsp;system&nbsp;should&nbsp;work.\n</span>&nbsp;&nbsp;assertBool&nbsp;<span style=\"color:#a31515;\">&quot;Should&nbsp;have&nbsp;5+&nbsp;rating&quot;</span>&nbsp;(<span style=\"color:blue;\">all</span>&nbsp;((&gt;=&nbsp;5)&nbsp;.&nbsp;songRating)&nbsp;actual)</pre>\n    </p>\n    <p>\n        This test creates twenty scrobbles for one user: One with a zero rating, two with rating <em>1</em>, two with rating <em>2</em>, and so on, up to a single song with rating <em>10</em>.\n    </p>\n    <p>\n        <a href=\"https://tyrrrz.me/blog/pure-impure-segregation-principle#interleaved-impurities\">The implementation of GetRecommendationsAsync</a> uses these twenty songs to find 'other users' who have these top songs as well. In this case, there's only one user, so for every of those twenty songs, you get the same twenty songs, for a total of 400.\n    </p>\n    <p>\n        There are more unit tests than these. You can see them in the Git repository.\n    </p>\n    <h3 id=\"29a2c5558184424eaaba9db49dc30368\">\n        Implementation <a href=\"#29a2c5558184424eaaba9db49dc30368\">#</a>\n    </h3>\n    <p>\n        The most direct translation of the C# and F# 'reference implementation' that I could think of was this:\n    </p>\n    <p>\n        <pre>getRecommendations&nbsp;srvc&nbsp;un&nbsp;=&nbsp;<span style=\"color:blue;\">do</span>\n&nbsp;&nbsp;<span style=\"color:green;\">--&nbsp;1.&nbsp;Get&nbsp;user&#39;s&nbsp;own&nbsp;top&nbsp;scrobbles\n</span>&nbsp;&nbsp;<span style=\"color:green;\">--&nbsp;2.&nbsp;Get&nbsp;other&nbsp;users&nbsp;who&nbsp;listened&nbsp;to&nbsp;the&nbsp;same&nbsp;songs\n</span>&nbsp;&nbsp;<span style=\"color:green;\">--&nbsp;3.&nbsp;Get&nbsp;top&nbsp;scrobbles&nbsp;of&nbsp;those&nbsp;users\n</span>&nbsp;&nbsp;<span style=\"color:green;\">--&nbsp;4.&nbsp;Aggregate&nbsp;the&nbsp;songs&nbsp;into&nbsp;recommendations\n</span>\n&nbsp;&nbsp;<span style=\"color:green;\">--&nbsp;Impure\n</span>&nbsp;&nbsp;scrobbles&nbsp;&lt;-&nbsp;getTopScrobbles&nbsp;srvc&nbsp;un\n \n&nbsp;&nbsp;<span style=\"color:green;\">--&nbsp;Pure\n</span>&nbsp;&nbsp;<span style=\"color:blue;\">let</span>&nbsp;scrobblesSnapshot&nbsp;=&nbsp;<span style=\"color:blue;\">take</span>&nbsp;100&nbsp;$&nbsp;sortOn&nbsp;(Down&nbsp;.&nbsp;scrobbleCount)&nbsp;scrobbles\n \n&nbsp;&nbsp;recommendationCandidates&nbsp;&lt;-&nbsp;newIORef&nbsp;<span style=\"color:blue;\">[]</span>\n&nbsp;&nbsp;forM_&nbsp;scrobblesSnapshot&nbsp;$&nbsp;\\scrobble&nbsp;-&gt;&nbsp;<span style=\"color:blue;\">do</span>\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:green;\">--&nbsp;Impure\n</span>&nbsp;&nbsp;&nbsp;&nbsp;otherListeners&nbsp;&lt;-&nbsp;getTopListeners&nbsp;srvc&nbsp;$&nbsp;songId&nbsp;$&nbsp;scrobbledSong&nbsp;scrobble\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:green;\">--&nbsp;Pure\n</span>&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">let</span>&nbsp;otherListenersSnapshot&nbsp;=\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">take</span>&nbsp;20&nbsp;$\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sortOn&nbsp;(Down&nbsp;.&nbsp;userScrobbleCount)&nbsp;$\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">filter</span>&nbsp;((10_000&nbsp;&lt;=)&nbsp;.&nbsp;userScrobbleCount)&nbsp;otherListeners\n \n&nbsp;&nbsp;&nbsp;&nbsp;forM_&nbsp;otherListenersSnapshot&nbsp;$&nbsp;\\otherListener&nbsp;-&gt;&nbsp;<span style=\"color:blue;\">do</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:green;\">--&nbsp;Impure\n</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;otherScrobbles&nbsp;&lt;-&nbsp;getTopScrobbles&nbsp;srvc&nbsp;$&nbsp;userName&nbsp;otherListener\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:green;\">--&nbsp;Pure\n</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">let</span>&nbsp;otherScrobblesSnapshot&nbsp;=\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">take</span>&nbsp;10&nbsp;$\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sortOn&nbsp;(Down&nbsp;.&nbsp;songRating&nbsp;.&nbsp;scrobbledSong)&nbsp;$\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">filter</span>&nbsp;(songHasVerifiedArtist&nbsp;.&nbsp;scrobbledSong)&nbsp;otherScrobbles\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;forM_&nbsp;otherScrobblesSnapshot&nbsp;$&nbsp;\\otherScrobble&nbsp;-&gt;&nbsp;<span style=\"color:blue;\">do</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">let</span>&nbsp;song&nbsp;=&nbsp;scrobbledSong&nbsp;otherScrobble\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;modifyIORef&nbsp;recommendationCandidates&nbsp;(song&nbsp;:)\n \n&nbsp;&nbsp;recommendations&nbsp;&lt;-&nbsp;readIORef&nbsp;recommendationCandidates\n&nbsp;&nbsp;<span style=\"color:green;\">--&nbsp;Pure\n</span>&nbsp;&nbsp;<span style=\"color:blue;\">return</span>&nbsp;$&nbsp;<span style=\"color:blue;\">take</span>&nbsp;200&nbsp;$&nbsp;sortOn&nbsp;(Down&nbsp;.&nbsp;songRating)&nbsp;recommendations</pre>\n    </p>\n    <p>\n        In order to mirror <a href=\"https://tyrrrz.me/blog/pure-impure-segregation-principle#interleaved-impurities\">the original implementation</a> as closely as possible, I declare <code>recommendationCandidates</code> as an <a href=\"https://hackage.haskell.org/package/base/docs/Data-IORef.html\">IORef</a> so that I can incrementally add to it as the action goes through its nested loops. Notice the <code>modifyIORef</code> towards the end of the code listing, which adds a single song to the list.\n    </p>\n    <p>\n        Once all the looping is done, the action uses <code>readIORef</code> to pull the <code>recommendations</code> out of the <code>IORef</code>.\n    </p>\n    <p>\n        As you can see, I also ported the comments from the original C# code.\n    </p>\n    <p>\n        I don't consider this idiomatic Haskell code, but the goal in this article was to mirror the C# code as closely as possible. Once I start refactoring, you'll see some more idiomatic implementations.\n    </p>\n    <h3 id=\"8192c1e94add4e56b95dad78d4eda818\">\n        Conclusion <a href=\"#8192c1e94add4e56b95dad78d4eda818\">#</a>\n    </h3>\n    <p>\n        Together with the previous two articles in this article series, this establishes a baseline from which I can refactor the code. While we might consider the original C# code idiomatic, this port to Haskell isn't. It is, on the other hand, similar enough to both its C# and F# peers that we can compare and contrast all three.\n    </p>\n    <p>\n        Particularly two design choices make this Haskell implementation less than idiomatic. One is the use of <code>IORef</code> to update a list of songs. The other is using a type class to model an external dependency.\n    </p>\n    <p>\n        As I cover various alternative architectures in this article series, you'll see how to get rid of both.\n    </p>\n    <p>\n        <strong>Next:</strong> <a href=\"/2025/04/28/song-recommendations-as-an-impureim-sandwich\">Song recommendations as an Impureim Sandwich</a>.\n    </p>\n</div><hr>\n      This blog is totally free, but if you like it, please consider <a href=\"https://blog.ploeh.dk/support\">supporting it</a>.",
      "Content": null,
      "Language": "en-us",
      "Link": "https://blog.ploeh.dk/2025/04/21/porting-song-recommendations-to-haskell/"
    },
    {
      "FeedId": "https://blog.ploeh.dk",
      "ItemId": "https://blog.ploeh.dk/2025/04/14/porting-song-recommendations-to-f",
      "Title": "Porting song recommendations to F#",
      "PublishDate": "2025-04-14T08:54:00+02:00",
      "Summary": "\n\n\n<div id=\"post\">\n    <p>\n        <em>A C# code base translated to F#.</em>\n    </p>\n    <p>\n        This article is part of a <a href=\"/2025/04/07/alternative-ways-to-design-with-functional-programming\">larger article series</a> that examines variations of how to take on a non-trivial problem using <a href=\"/2018/11/19/functional-architecture-a-definition\">functional architecture</a>. In the <a href=\"/2025/04/10/characterising-song-recommendations\">previous article</a> we established a baseline C# code base. Future articles are going to use that C# code base as a starting point for refactored code. On the other hand, I also want to demonstrate what such solutions may look like in languages like <a href=\"https://fsharp.org/\">F#</a> or <a href=\"https://www.haskell.org/\">Haskell</a>. In this article, you'll see how to port the C# baseline to F#.\n    </p>\n    <p>\n        The code shown in this article is from the <em>fsharp-port</em> branch of the accompanying Git repository.\n    </p>\n    <h3 id=\"075d8dc2f6ad4baca4f815137193f814\">\n        Data structures <a href=\"#075d8dc2f6ad4baca4f815137193f814\">#</a>\n    </h3>\n    <p>\n        We may start by defining the required data structures. All are going to be <a href=\"https://learn.microsoft.com/dotnet/fsharp/language-reference/records\">records</a>.\n    </p>\n    <p>\n        <pre><span style=\"color:blue;\">type</span>&nbsp;<span style=\"color:#2b91af;\">User</span>&nbsp;=&nbsp;{&nbsp;UserName&nbsp;:&nbsp;<span style=\"color:#2b91af;\">string</span>;&nbsp;TotalScrobbleCount&nbsp;:&nbsp;<span style=\"color:#2b91af;\">int</span>&nbsp;}</pre>\n    </p>\n    <p>\n        Just like the equivalent C# code, a <code>User</code> is just a <code>string</code> and an <code>int</code>. \n    </p>\n    <p>\n        When creating new values, record syntax can sometimes be awkward, so I also define a curried function to create <code>User</code> values:\n    </p>\n    <p>\n        <pre><span style=\"color:blue;\">let</span>&nbsp;<span style=\"color:#74531f;\">user</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">userName</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">totalScrobbleCount</span>&nbsp;=\n&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;UserName&nbsp;=&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">userName</span>;&nbsp;TotalScrobbleCount&nbsp;=&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">totalScrobbleCount</span>&nbsp;}</pre>\n    </p>\n    <p>\n        Likewise, I define <code>Song</code> and <code>Scrobble</code> in the same way:\n    </p>\n    <p>\n        <pre><span style=\"color:blue;\">type</span>&nbsp;<span style=\"color:#2b91af;\">Song</span>&nbsp;=&nbsp;{&nbsp;Id&nbsp;:&nbsp;<span style=\"color:#2b91af;\">int</span>;&nbsp;IsVerifiedArtist&nbsp;:&nbsp;<span style=\"color:#2b91af;\">bool</span>;&nbsp;Rating&nbsp;:&nbsp;<span style=\"color:#2b91af;\">byte</span>&nbsp;}\n<span style=\"color:blue;\">let</span>&nbsp;<span style=\"color:#74531f;\">song</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">id</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">isVerfiedArtist</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">rating</span>&nbsp;=\n&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;Id&nbsp;=&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">id</span>;&nbsp;IsVerifiedArtist&nbsp;=&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">isVerfiedArtist</span>;&nbsp;Rating&nbsp;=&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">rating</span>&nbsp;}\n \n<span style=\"color:blue;\">type</span>&nbsp;<span style=\"color:#2b91af;\">Scrobble</span>&nbsp;=&nbsp;{&nbsp;Song&nbsp;:&nbsp;<span style=\"color:#2b91af;\">Song</span>;&nbsp;ScrobbleCount&nbsp;:&nbsp;<span style=\"color:#2b91af;\">int</span>&nbsp;}\n<span style=\"color:blue;\">let</span>&nbsp;<span style=\"color:#74531f;\">scrobble</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">song</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">scrobbleCount</span>&nbsp;=&nbsp;{&nbsp;Song&nbsp;=&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">song</span>;&nbsp;ScrobbleCount&nbsp;=&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">scrobbleCount</span>&nbsp;}</pre>\n    </p>\n    <p>\n        To be honest, I only use those curried functions sparingly, so they're somewhat redundant. Perhaps I should consider getting rid of them. For now, however, they stay.\n    </p>\n    <p>\n        Since I'm moving all the code to F#, I also have to translate the interface.\n    </p>\n    <p>\n        <pre><span style=\"color:blue;\">type</span>&nbsp;<span style=\"color:#2b91af;\">SongService</span>&nbsp;=\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">abstract</span>&nbsp;<span style=\"font-weight:bold;color:#74531f;\">GetTopListenersAsync</span>&nbsp;:&nbsp;songId&nbsp;:&nbsp;<span style=\"color:#2b91af;\">int</span>&nbsp;<span style=\"color:blue;\">-&gt;</span>&nbsp;<span style=\"color:#2b91af;\">Task</span>&lt;<span style=\"color:#2b91af;\">IReadOnlyCollection</span>&lt;<span style=\"color:#2b91af;\">User</span>&gt;&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">abstract</span>&nbsp;<span style=\"font-weight:bold;color:#74531f;\">GetTopScrobblesAsync</span>&nbsp;:&nbsp;userName&nbsp;:&nbsp;<span style=\"color:#2b91af;\">string</span>&nbsp;<span style=\"color:blue;\">-&gt;</span>&nbsp;<span style=\"color:#2b91af;\">Task</span>&lt;<span style=\"color:#2b91af;\">IReadOnlyCollection</span>&lt;<span style=\"color:#2b91af;\">Scrobble</span>&gt;&gt;</pre>\n    </p>\n    <p>\n        The syntax is different from C#, but otherwise, this is the same interface.\n    </p>\n    <h3 id=\"4102e5ed7f394f48ac28f4b4a8af55e8\">\n        Implementation <a href=\"#4102e5ed7f394f48ac28f4b4a8af55e8\">#</a>\n    </h3>\n    <p>\n        Those are all the supporting types required to implement the <code>RecommendationsProvider</code>. This is the most direct translation of the C# code that I could think of:\n    </p>\n    <p>\n        <pre><span style=\"color:blue;\">type</span>&nbsp;<span style=\"color:#2b91af;\">RecommendationsProvider</span>&nbsp;(<span style=\"font-weight:bold;color:#1f377f;\">songService</span>&nbsp;:&nbsp;<span style=\"color:#2b91af;\">SongService</span>)&nbsp;=\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">member</span>&nbsp;_.<span style=\"font-weight:bold;color:#74531f;\">GetRecommendationsAsync</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">userName</span>&nbsp;=&nbsp;<span style=\"color:blue;\">task</span>&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:green;\">//&nbsp;1.&nbsp;Get&nbsp;user&#39;s&nbsp;own&nbsp;top&nbsp;scrobbles</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:green;\">//&nbsp;2.&nbsp;Get&nbsp;other&nbsp;users&nbsp;who&nbsp;listened&nbsp;to&nbsp;the&nbsp;same&nbsp;songs</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:green;\">//&nbsp;3.&nbsp;Get&nbsp;top&nbsp;scrobbles&nbsp;of&nbsp;those&nbsp;users</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:green;\">//&nbsp;4.&nbsp;Aggregate&nbsp;the&nbsp;songs&nbsp;into&nbsp;recommendations</span>\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:green;\">//&nbsp;Impure</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">let!</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">scrobbles</span>&nbsp;=&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">songService</span>.<span style=\"font-weight:bold;color:#74531f;\">GetTopScrobblesAsync</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">userName</span>\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:green;\">//&nbsp;Pure</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">let</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">scrobblesSnapshot</span>&nbsp;=\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">scrobbles</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&gt;&nbsp;<span style=\"color:#2b91af;\">Seq</span>.<span style=\"color:#74531f;\">sortByDescending</span>&nbsp;(<span style=\"color:blue;\">fun</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">s</span>&nbsp;<span style=\"color:blue;\">-&gt;</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">s</span>.ScrobbleCount)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&gt;&nbsp;<span style=\"color:#2b91af;\">Seq</span>.<span style=\"color:#74531f;\">truncate</span>&nbsp;100\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&gt;&nbsp;<span style=\"color:#2b91af;\">Seq</span>.<span style=\"color:#74531f;\">toList</span>\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">let</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">recommendationCandidates</span>&nbsp;=&nbsp;<span style=\"color:#2b91af;\">ResizeArray</span>&nbsp;()\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">for</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">scrobble</span>&nbsp;<span style=\"color:blue;\">in</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">scrobblesSnapshot</span>&nbsp;<span style=\"color:blue;\">do</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:green;\">//&nbsp;Impure</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">let!</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">otherListeners</span>&nbsp;=\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">songService</span>.<span style=\"font-weight:bold;color:#74531f;\">GetTopListenersAsync</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">scrobble</span>.Song.Id\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:green;\">//&nbsp;Pure</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">let</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">otherListenersSnapshot</span>&nbsp;=\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">otherListeners</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&gt;&nbsp;<span style=\"color:#2b91af;\">Seq</span>.<span style=\"color:#74531f;\">filter</span>&nbsp;(<span style=\"color:blue;\">fun</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">u</span>&nbsp;<span style=\"color:blue;\">-&gt;</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">u</span>.TotalScrobbleCount&nbsp;&gt;=&nbsp;10_000)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&gt;&nbsp;<span style=\"color:#2b91af;\">Seq</span>.<span style=\"color:#74531f;\">sortByDescending</span>&nbsp;(<span style=\"color:blue;\">fun</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">u</span>&nbsp;<span style=\"color:blue;\">-&gt;</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">u</span>.TotalScrobbleCount)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&gt;&nbsp;<span style=\"color:#2b91af;\">Seq</span>.<span style=\"color:#74531f;\">truncate</span>&nbsp;20\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&gt;&nbsp;<span style=\"color:#2b91af;\">Seq</span>.<span style=\"color:#74531f;\">toList</span>\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">for</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">otherListener</span>&nbsp;<span style=\"color:blue;\">in</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">otherListenersSnapshot</span>&nbsp;<span style=\"color:blue;\">do</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:green;\">//&nbsp;Impure</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">let!</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">otherScrobbles</span>&nbsp;=\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">songService</span>.<span style=\"font-weight:bold;color:#74531f;\">GetTopScrobblesAsync</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">otherListener</span>.UserName\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:green;\">//&nbsp;Pure</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">let</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">otherScrobblesSnapshot</span>&nbsp;=\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">otherScrobbles</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&gt;&nbsp;<span style=\"color:#2b91af;\">Seq</span>.<span style=\"color:#74531f;\">filter</span>&nbsp;(<span style=\"color:blue;\">fun</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">s</span>&nbsp;<span style=\"color:blue;\">-&gt;</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">s</span>.Song.IsVerifiedArtist)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&gt;&nbsp;<span style=\"color:#2b91af;\">Seq</span>.<span style=\"color:#74531f;\">sortByDescending</span>&nbsp;(<span style=\"color:blue;\">fun</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">s</span>&nbsp;<span style=\"color:blue;\">-&gt;</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">s</span>.Song.Rating)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&gt;&nbsp;<span style=\"color:#2b91af;\">Seq</span>.<span style=\"color:#74531f;\">truncate</span>&nbsp;10\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&gt;&nbsp;<span style=\"color:#2b91af;\">Seq</span>.<span style=\"color:#74531f;\">toList</span>\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">otherScrobblesSnapshot</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&gt;&nbsp;<span style=\"color:#2b91af;\">List</span>.<span style=\"color:#74531f;\">map</span>&nbsp;(<span style=\"color:blue;\">fun</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">s</span>&nbsp;<span style=\"color:blue;\">-&gt;</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">s</span>.Song)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&gt;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">recommendationCandidates</span>.<span style=\"font-weight:bold;color:#74531f;\">AddRange</span>\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:green;\">//&nbsp;Pure</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">let</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">recommendations</span>&nbsp;=\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">recommendationCandidates</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&gt;&nbsp;<span style=\"color:#2b91af;\">Seq</span>.<span style=\"color:#74531f;\">sortByDescending</span>&nbsp;(<span style=\"color:blue;\">fun</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">s</span>&nbsp;<span style=\"color:blue;\">-&gt;</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">s</span>.Rating)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&gt;&nbsp;<span style=\"color:#2b91af;\">Seq</span>.<span style=\"color:#74531f;\">truncate</span>&nbsp;200\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&gt;&nbsp;<span style=\"color:#2b91af;\">Seq</span>.<span style=\"color:#74531f;\">toList</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&gt;&nbsp;<span style=\"color:#2b91af;\">IReadOnlyCollection</span>&lt;_&gt;\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">return</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">recommendations</span>&nbsp;}</pre>\n    </p>\n    <p>\n        As you can tell, I've kept the comments from <a href=\"https://tyrrrz.me/blog/pure-impure-segregation-principle\">the original</a>, too.\n    </p>\n    <h3 id=\"efa00ed5a67641e18b6fec772f2e6aa7\">\n        Test Double <a href=\"#efa00ed5a67641e18b6fec772f2e6aa7\">#</a>\n    </h3>\n    <p>\n        In <a href=\"/2025/04/10/characterising-song-recommendations\">the previous article</a>, I'd written the <a href=\"http://xunitpatterns.com/Fake%20Object.html\">Fake</a> <code>SongService</code> in C#. Since, in this article, I'm translating everything to F#, I need to translate the Fake, too.\n    </p>\n    <p>\n        <pre><span style=\"color:blue;\">type</span>&nbsp;<span style=\"color:#2b91af;\">FakeSongService</span>&nbsp;()&nbsp;=\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">let</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">songs</span>&nbsp;=&nbsp;<span style=\"color:#2b91af;\">ConcurrentDictionary</span>&lt;<span style=\"color:#2b91af;\">int</span>,&nbsp;<span style=\"color:#2b91af;\">Song</span>&gt;&nbsp;()\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">let</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">users</span>&nbsp;=&nbsp;<span style=\"color:#2b91af;\">ConcurrentDictionary</span>&lt;<span style=\"color:#2b91af;\">string</span>,&nbsp;<span style=\"color:#2b91af;\">ConcurrentDictionary</span>&lt;<span style=\"color:#2b91af;\">int</span>,&nbsp;<span style=\"color:#2b91af;\">int</span>&gt;&gt;&nbsp;()\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">interface</span>&nbsp;<span style=\"color:#2b91af;\">SongService</span>&nbsp;<span style=\"color:blue;\">with</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">member</span>&nbsp;_.<span style=\"font-weight:bold;color:#74531f;\">GetTopListenersAsync</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">songId</span>&nbsp;=\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">let</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">listeners</span>&nbsp;=\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">users</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&gt;&nbsp;<span style=\"color:#2b91af;\">Seq</span>.<span style=\"color:#74531f;\">filter</span>&nbsp;(<span style=\"color:blue;\">fun</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">kvp</span>&nbsp;<span style=\"color:blue;\">-&gt;</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">kvp</span>.Value.<span style=\"font-weight:bold;color:#74531f;\">ContainsKey</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">songId</span>)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&gt;&nbsp;<span style=\"color:#2b91af;\">Seq</span>.<span style=\"color:#74531f;\">map</span>&nbsp;(<span style=\"color:blue;\">fun</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">kvp</span>&nbsp;<span style=\"color:blue;\">-&gt;</span>&nbsp;<span style=\"color:#74531f;\">user</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">kvp</span>.Key&nbsp;(<span style=\"color:#2b91af;\">Seq</span>.<span style=\"color:#74531f;\">sum</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">kvp</span>.Value.Values))\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&gt;&nbsp;<span style=\"color:#2b91af;\">Seq</span>.<span style=\"color:#74531f;\">toList</span>\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">Task</span>.<span style=\"font-weight:bold;color:#74531f;\">FromResult</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">listeners</span>\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">member</span>&nbsp;_.<span style=\"font-weight:bold;color:#74531f;\">GetTopScrobblesAsync</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">userName</span>&nbsp;=\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">let</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">scrobbles</span>&nbsp;=\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">users</span>.<span style=\"font-weight:bold;color:#74531f;\">GetOrAdd</span>(<span style=\"font-weight:bold;color:#1f377f;\">userName</span>,&nbsp;<span style=\"color:#2b91af;\">ConcurrentDictionary</span>&lt;_,&nbsp;_&gt;&nbsp;())\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&gt;&nbsp;<span style=\"color:#2b91af;\">Seq</span>.<span style=\"color:#74531f;\">map</span>&nbsp;(<span style=\"color:blue;\">fun</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">kvp</span>&nbsp;<span style=\"color:blue;\">-&gt;</span>&nbsp;<span style=\"color:#74531f;\">scrobble</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">songs</span>[<span style=\"font-weight:bold;color:#1f377f;\">kvp</span>.Key]&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">kvp</span>.Value)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&gt;&nbsp;<span style=\"color:#2b91af;\">Seq</span>.<span style=\"color:#74531f;\">toList</span>\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">Task</span>.<span style=\"font-weight:bold;color:#74531f;\">FromResult</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">scrobbles</span>\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">member</span>&nbsp;_.<span style=\"font-weight:bold;color:#74531f;\">Scrobble</span>&nbsp;(<span style=\"font-weight:bold;color:#1f377f;\">userName</span>,&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">song</span>&nbsp;:&nbsp;<span style=\"color:#2b91af;\">Song</span>,&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">scrobbleCount</span>)&nbsp;=\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">let</span>&nbsp;<span style=\"color:#74531f;\">addScrobbles</span>&nbsp;(<span style=\"font-weight:bold;color:#1f377f;\">scrobbles</span>&nbsp;:&nbsp;<span style=\"color:#2b91af;\">ConcurrentDictionary</span>&lt;_,&nbsp;_&gt;)&nbsp;=\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">scrobbles</span>.<span style=\"font-weight:bold;color:#74531f;\">AddOrUpdate</span>&nbsp;(\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">song</span>.Id,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">scrobbleCount</span>,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">fun</span>&nbsp;_&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">oldCount</span>&nbsp;<span style=\"color:blue;\">-&gt;</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">oldCount</span>&nbsp;+&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">scrobbleCount</span>)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&gt;&nbsp;<span style=\"color:#74531f;\">ignore</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">scrobbles</span>\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">users</span>.<span style=\"font-weight:bold;color:#74531f;\">AddOrUpdate</span>&nbsp;(\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">userName</span>,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">ConcurrentDictionary</span>&lt;_,&nbsp;_&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[&nbsp;<span style=\"color:#2b91af;\">KeyValuePair</span>.<span style=\"font-weight:bold;color:#74531f;\">Create</span>&nbsp;(<span style=\"font-weight:bold;color:#1f377f;\">song</span>.Id,&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">scrobbleCount</span>)&nbsp;],\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">fun</span>&nbsp;_&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">scrobbles</span>&nbsp;<span style=\"color:blue;\">-&gt;</span>&nbsp;<span style=\"color:#74531f;\">addScrobbles</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">scrobbles</span>)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&gt;&nbsp;<span style=\"color:#74531f;\">ignore</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">songs</span>.<span style=\"font-weight:bold;color:#74531f;\">AddOrUpdate</span>&nbsp;(<span style=\"font-weight:bold;color:#1f377f;\">song</span>.Id,&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">song</span>,&nbsp;<span style=\"color:blue;\">fun</span>&nbsp;_&nbsp;_&nbsp;<span style=\"color:blue;\">-&gt;</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">song</span>)&nbsp;|&gt;&nbsp;<span style=\"color:#74531f;\">ignore</span></pre>\n    </p>\n    <p>\n        Apart from the code shown here, only minor changes were required for the tests, such as using those curried creation functions instead of constructors, a cast to <code>SongService</code>, and a few other non-behavioural things like that. All tests still pass, so I consider this a faithful translation of the C# code base.\n    </p>\n    <h3 id=\"28c7110824e941098e791aa66e2ed5c4\">\n        Conclusion <a href=\"#28c7110824e941098e791aa66e2ed5c4\">#</a>\n    </h3>\n    <p>\n        This article does more groundwork. Since it may be illuminating to see one problem represented in more than one programming language, I present it in both C#, F#, and Haskell. The next article does exactly that: Translates this F# code to Haskell. Once all three bases are established, we can start introducing solution variations.\n    </p>\n    <p>\n        If you don't care about the Haskell examples, you can always go back to the <a href=\"/2025/04/07/alternative-ways-to-design-with-functional-programming\">first article in this article series</a> and use the table of contents to jump to the next C# example.\n    </p>\n    <p>\n        <strong>Next:</strong> <a href=\"/2025/04/21/porting-song-recommendations-to-haskell\">Porting song recommendations to Haskell</a>.\n    </p>\n</div><hr>\n      This blog is totally free, but if you like it, please consider <a href=\"https://blog.ploeh.dk/support\">supporting it</a>.",
      "Content": null,
      "Language": "en-us",
      "Link": "https://blog.ploeh.dk/2025/04/14/porting-song-recommendations-to-f/"
    },
    {
      "FeedId": "https://blog.ploeh.dk",
      "ItemId": "https://blog.ploeh.dk/2025/04/10/characterising-song-recommendations",
      "Title": "Characterising song recommendations",
      "PublishDate": "2025-04-10T08:05:00+02:00",
      "Summary": "\n\n\n<div id=\"post\">\n    <p>\n        <em>Using characterisation tests and mutation testing to describe existing behaviour. An example.</em>\n    </p>\n    <p>\n        This article is part of an <a href=\"/2025/04/07/alternative-ways-to-design-with-functional-programming\">article series that presents multiple design alternatives</a> for a given problem that I call the <em>song recommendations</em> problem. In short, the problem is to recommend songs to a user based on a vast repository of scrobbles. The problem was <a href=\"https://tyrrrz.me/blog/pure-impure-segregation-principle\">originally proposed</a> by <a href=\"https://tyrrrz.me/\">Oleksii Holub</a> as a an example of a problem that may not be a good fit for functional programming (FP).\n    </p>\n    <p>\n        As I've outlined in the <a href=\"/2025/04/07/alternative-ways-to-design-with-functional-programming\">introductory article</a>, I'd like to use the opportunity to demonstrate alternative FP designs. Before I can do that, however, I need a working example of Oleksii Holub's code example, as well as a trustworthy test suite. That's what this article is about.\n    </p>\n    <p>\n        The code in this article mostly come from the <code>master</code> branch of the .NET repository that accompanies this article series, although some of the code is taken from intermediate commits on that branch.\n    </p>\n    <h3 id=\"28085f8e8de44964823dfc4b13edcca6\">\n        Inferred details <a href=\"#28085f8e8de44964823dfc4b13edcca6\">#</a>\n    </h3>\n    <p>\n        The <a href=\"https://tyrrrz.me/blog/pure-impure-segregation-principle\">original article</a> only shows code, but doesn't link to an existing code base. While I suppose I could have asked Oleksii Holub if he had a copy he would share, the existence of such a code base isn't a given. In any case, inferring an entire code base from a comprehensive snippet is an interesting exercise in its own right.\n    </p>\n    <p>\n        The first step was to copy the example code into a code base. Initially it didn't compile because of some missing dependencies that I had to infer. It was only three <a href=\"https://en.wikipedia.org/wiki/Value_object\">Value Objects</a> and an interface:\n    </p>\n    <p>\n        <pre><span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:blue;\">sealed</span>&nbsp;<span style=\"color:blue;\">record</span>&nbsp;<span style=\"color:#2b91af;\">Song</span>(<span style=\"color:blue;\">int</span>&nbsp;Id,&nbsp;<span style=\"color:blue;\">bool</span>&nbsp;IsVerifiedArtist,&nbsp;<span style=\"color:blue;\">byte</span>&nbsp;Rating);\n\n<span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:blue;\">sealed</span>&nbsp;<span style=\"color:blue;\">record</span>&nbsp;<span style=\"color:#2b91af;\">Scrobble</span>(Song&nbsp;Song,&nbsp;<span style=\"color:blue;\">int</span>&nbsp;ScrobbleCount);\n\n<span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:blue;\">sealed</span>&nbsp;<span style=\"color:blue;\">record</span>&nbsp;<span style=\"color:#2b91af;\">User</span>(<span style=\"color:blue;\">string</span>&nbsp;UserName,&nbsp;<span style=\"color:blue;\">int</span>&nbsp;TotalScrobbleCount);\n\n<span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:blue;\">interface</span>&nbsp;<span style=\"color:#2b91af;\">SongService</span>\n{\n&nbsp;&nbsp;&nbsp;&nbsp;Task&lt;IReadOnlyCollection&lt;User&gt;&gt;&nbsp;GetTopListenersAsync(<span style=\"color:blue;\">int</span>&nbsp;songId);\n&nbsp;&nbsp;&nbsp;&nbsp;Task&lt;IReadOnlyCollection&lt;Scrobble&gt;&gt;&nbsp;GetTopScrobblesAsync(<span style=\"color:blue;\">string</span>&nbsp;userName);\n}</pre>\n    </p>\n    <p>\n        These type declarations are straightforward, but still warrant a few comments. First, <code>Song</code>, <code>Scrobble</code>, and <code>User</code> are C# <a href=\"https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/record\">records</a>, which is a more recent addition to the language. If you're reading along here, but using another C-based language, or an older version of C#, you can implement such immutable Value Objects with normal language constructs; it just takes more code, instead of the one-liner syntax. <a href=\"https://fsharp.org/\">F#</a> developers will, of course, be familiar with the concept of <a href=\"https://learn.microsoft.com/dotnet/fsharp/language-reference/records\">records</a>, and <a href=\"https://www.haskell.org/\">Haskell</a> also has them.\n    </p>\n    <p>\n        Another remark about the above type declarations is that while <code>SongService</code> is an interface, it has no <code>I</code> prefix. This is syntactically legal, but not <a href=\"/2015/08/03/idiomatic-or-idiosyncratic\">idiomatic</a> in C#. I've used the name from <a href=\"https://tyrrrz.me/blog/pure-impure-segregation-principle#interleaved-impurities\">the original code sample</a> verbatim, so that's the immediate explanation. It's possible that Oleksii Holub intended the type to be a base class, but for various reasons I prefer interfaces, although in this particular example I don't think it would have made much of a difference. I'm only pointing it out because there's a risk that it might confuse some readers who are used to the C# naming convention. Java programmers, on the other hand, should feel at home.\n    </p>\n    <p>\n        As far as I remember, the only other change I had to make to the code in order to make it compile was to give the <code>RecommendationsProvider</code> class a constructor:\n    </p>\n    <p>\n        <pre><span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:#2b91af;\">RecommendationsProvider</span>(SongService&nbsp;songService)\n{\n&nbsp;&nbsp;&nbsp;&nbsp;_songService&nbsp;=&nbsp;songService;\n}</pre>\n    </p>\n    <p>\n        This is just basic Constructor Injection, and while <a href=\"/2021/05/17/against-consistency\">I find the underscore prefix redundant</a>, I've kept it in order to stay as faithful to the original example as possible.\n    </p>\n    <p>\n        At this point the code compiles.\n    </p>\n    <h3 id=\"fb05d3091d2c449ab151b60b2ff5b606\">\n        Test Double <a href=\"#fb05d3091d2c449ab151b60b2ff5b606\">#</a>\n    </h3>\n    <p>\n        The goal of this article series is to present several alternative designs that implement the same behaviour. This means that as I refactor the code, I need to know that I didn't break existing functionality.\n    </p>\n    <blockquote>\n        <p>\n            \"to refactor, the essential precondition is [...] solid tests\"\n        </p>\n        <footer><cite><a href=\"/ref/refactoring\">Refactoring</a></cite>, Martin Fowler, 1999</footer>\n    </blockquote>\n    <p>\n        Currently, I have no tests, so I'll have to add some. Since <code>RecommendationsProvider</code> makes heavy use of its injected <code>SongService</code>, tests must supply that dependency in order to do meaningful work. Since <a href=\"/2022/10/17/stubs-and-mocks-break-encapsulation\">Stubs and Mocks break encapsulation</a> I instead <a href=\"/2019/02/18/from-interaction-based-to-state-based-testing\">favour state-based testing</a> with <a href=\"http://xunitpatterns.com/Fake%20Object.html\">Fake Objects</a>.\n    </p>\n    <p>\n        After some experimentation, I arrived at this <code>FakeSongService</code>:\n    </p>\n    <p>\n        <pre><span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:blue;\">sealed</span>&nbsp;<span style=\"color:blue;\">class</span>&nbsp;<span style=\"color:#2b91af;\">FakeSongService</span>&nbsp;:&nbsp;SongService\n{\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">private</span>&nbsp;<span style=\"color:blue;\">readonly</span>&nbsp;ConcurrentDictionary&lt;<span style=\"color:blue;\">int</span>,&nbsp;Song&gt;&nbsp;songs;\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">private</span>&nbsp;<span style=\"color:blue;\">readonly</span>&nbsp;ConcurrentDictionary&lt;<span style=\"color:blue;\">string</span>,&nbsp;ConcurrentDictionary&lt;<span style=\"color:blue;\">int</span>,&nbsp;<span style=\"color:blue;\">int</span>&gt;&gt;&nbsp;users;\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:#2b91af;\">FakeSongService</span>()\n&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;songs&nbsp;=&nbsp;<span style=\"color:blue;\">new</span>&nbsp;ConcurrentDictionary&lt;<span style=\"color:blue;\">int</span>,&nbsp;Song&gt;();\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;users&nbsp;=&nbsp;<span style=\"color:blue;\">new</span>&nbsp;ConcurrentDictionary&lt;<span style=\"color:blue;\">string</span>,&nbsp;ConcurrentDictionary&lt;<span style=\"color:blue;\">int</span>,&nbsp;<span style=\"color:blue;\">int</span>&gt;&gt;();\n&nbsp;&nbsp;&nbsp;&nbsp;}\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">public</span>&nbsp;Task&lt;IReadOnlyCollection&lt;User&gt;&gt;&nbsp;GetTopListenersAsync(<span style=\"color:blue;\">int</span>&nbsp;songId)\n&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">var</span>&nbsp;listeners&nbsp;=\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">from</span>&nbsp;kvp&nbsp;<span style=\"color:blue;\">in</span>&nbsp;users\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">where</span>&nbsp;kvp.Value.ContainsKey(songId)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">select</span>&nbsp;<span style=\"color:blue;\">new</span>&nbsp;User(kvp.Key,&nbsp;kvp.Value.Values.Sum());\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">return</span>&nbsp;Task.FromResult&lt;IReadOnlyCollection&lt;User&gt;&gt;(listeners.ToList());\n&nbsp;&nbsp;&nbsp;&nbsp;}\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">public</span>&nbsp;Task&lt;IReadOnlyCollection&lt;Scrobble&gt;&gt;&nbsp;GetTopScrobblesAsync(\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">string</span>&nbsp;userName)\n&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">var</span>&nbsp;scrobbles&nbsp;=&nbsp;users\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.GetOrAdd(userName,&nbsp;<span style=\"color:blue;\">new</span>&nbsp;ConcurrentDictionary&lt;<span style=\"color:blue;\">int</span>,&nbsp;<span style=\"color:blue;\">int</span>&gt;())\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.Select(kvp&nbsp;=&gt;&nbsp;<span style=\"color:blue;\">new</span>&nbsp;Scrobble(songs[kvp.Key],&nbsp;kvp.Value));\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">return</span>&nbsp;Task.FromResult&lt;IReadOnlyCollection&lt;Scrobble&gt;&gt;(scrobbles.ToList());\n&nbsp;&nbsp;&nbsp;&nbsp;}\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:blue;\">void</span>&nbsp;Scrobble(<span style=\"color:blue;\">string</span>&nbsp;userName,&nbsp;Song&nbsp;song,&nbsp;<span style=\"color:blue;\">int</span>&nbsp;scrobbleCount)\n&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;users.AddOrUpdate(\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;userName,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">new</span>&nbsp;ConcurrentDictionary&lt;<span style=\"color:blue;\">int</span>,&nbsp;<span style=\"color:blue;\">int</span>&gt;(\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">new</span>[]&nbsp;{&nbsp;KeyValuePair.Create(song.Id,&nbsp;scrobbleCount)&nbsp;}),\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(_,&nbsp;scrobbles)&nbsp;=&gt;&nbsp;AddScrobbles(scrobbles,&nbsp;song,&nbsp;scrobbleCount));\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;songs.AddOrUpdate(song.Id,&nbsp;song,&nbsp;(_,&nbsp;_)&nbsp;=&gt;&nbsp;song);\n&nbsp;&nbsp;&nbsp;&nbsp;}\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">private</span>&nbsp;<span style=\"color:blue;\">static</span>&nbsp;ConcurrentDictionary&lt;<span style=\"color:blue;\">int</span>,&nbsp;<span style=\"color:blue;\">int</span>&gt;&nbsp;AddScrobbles(\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ConcurrentDictionary&lt;<span style=\"color:blue;\">int</span>,&nbsp;<span style=\"color:blue;\">int</span>&gt;&nbsp;scrobbles,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Song&nbsp;song,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">int</span>&nbsp;scrobbleCount)\n&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;scrobbles.AddOrUpdate(\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;song.Id,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;scrobbleCount,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(_,&nbsp;oldCount)&nbsp;=&gt;&nbsp;oldCount&nbsp;+&nbsp;scrobbleCount);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">return</span>&nbsp;scrobbles;\n&nbsp;&nbsp;&nbsp;&nbsp;}\n}</pre>\n    </p>\n    <p>\n        If you're wondering about the use of concurrent dictionaries, I use them because it made it easier to write the implementation, and not because I need the implementation to be thread-safe. In fact, I'm fairly sure that it's not thread-safe. That's not an issue. The tests aren't going to use shared mutable state.\n    </p>\n    <p>\n        The <code>GetTopListenersAsync</code> and <code>GetTopScrobblesAsync</code> methods implement the interface, and the <code>Scrobble</code> method (here, <em>scrobble</em> is a verb: <em>to scrobble</em>) is a <a href=\"http://xunitpatterns.com/Back%20Door%20Manipulation.html\">back door</a> that enables tests to populate the <code>FakeSongService</code>.\n    </p>\n    <h3 id=\"4055e47cf8a5409db41c95bb8099cae6\">\n        Icebreaker Test <a href=\"#4055e47cf8a5409db41c95bb8099cae6\">#</a>\n    </h3>\n    <p>\n        While the 'production code' is in C#, I decided to write the tests in F# for two reasons.\n    </p>\n    <p>\n        The first reason was that I wanted to be able to present the various FP designs in both C# and F#. Writing the tests in F# would make it easier to replace the C# code base with an F# alternative.\n    </p>\n    <p>\n        The second reason was that I wanted to leverage a property-based testing framework's ability to produce many randomly-generated test cases. I considered this important to build confidence that my tests weren't just a few specific examples that wouldn't catch errors when I made changes. Since the <code>RecommendationsProvider</code> API is asynchronous, the only .NET property-based framework I knew of that can run <code>Task</code>-valued properties is <a href=\"https://fscheck.github.io/FsCheck/\">FsCheck</a>. While it's possible to use FsCheck from C#, the F# API is more powerful.\n    </p>\n    <p>\n        In order to get started, however, I first wrote an Icebreaker Test without FsCheck:\n    </p>\n    <p>\n        <pre>[&lt;Fact&gt;]\n<span style=\"color:blue;\">let</span>&nbsp;``No&nbsp;data``&nbsp;()&nbsp;=&nbsp;task&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">let</span>&nbsp;srvc&nbsp;=&nbsp;FakeSongService&nbsp;()\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">let</span>&nbsp;sut&nbsp;=&nbsp;RecommendationsProvider&nbsp;srvc\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">let!</span>&nbsp;actual&nbsp;=&nbsp;sut.GetRecommendationsAsync&nbsp;<span style=\"color:#a31515;\">&quot;foo&quot;</span>\n&nbsp;&nbsp;&nbsp;&nbsp;Assert.Empty&nbsp;actual&nbsp;}</pre>\n    </p>\n    <p>\n        This is both a trivial case and an edge case, but clearly, if there's no data in the <code>SongService</code>, the <code>RecommendationsProvider</code> can't recommend any songs.\n    </p>\n    <p>\n        As I usually do with <a href=\"https://en.wikipedia.org/wiki/Characterization_test\">Characterisation Tests</a>, I temporarily sabotage the System Under Test so that the test fails. This is to ensure that I didn't write a <a href=\"/2019/10/14/tautological-assertion\">tautological assertion</a>. Once I've <a href=\"/2019/10/21/a-red-green-refactor-checklist\">seen the test fail for the appropriate reason</a>, I undo the sabotage and <a href=\"https://stackoverflow.blog/2022/12/19/use-git-tactically/\">check in the code</a>.\n    </p>\n    <h3 id=\"cf9aa5f1f470468da943f1c8bbd98698\">\n        Refactor to property <a href=\"#cf9aa5f1f470468da943f1c8bbd98698\">#</a>\n    </h3>\n    <p>\n        In the above <code>No data</code> test, the specific input value <code>\"foo\"</code> is irrelevant. It might as well have been any other string, so why not make it a property?\n    </p>\n    <p>\n        In this particular case, the <code>userName</code> could be any string, but it might be appropriate to write a custom generator that produces 'realistic' user names. Just to make things simple, I'm going to assume that user names are between one and twenty characters and assembled from alphanumeric characters, and that the fist character must be a letter:\n    </p>\n    <p>\n        <pre><span style=\"color:blue;\">module</span>&nbsp;Gen&nbsp;=\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">let</span>&nbsp;alphaNumeric&nbsp;=&nbsp;Gen.elements&nbsp;([<span style=\"color:#a31515;\">&#39;a&#39;</span>..<span style=\"color:#a31515;\">&#39;z&#39;</span>]&nbsp;@&nbsp;[<span style=\"color:#a31515;\">&#39;A&#39;</span>..<span style=\"color:#a31515;\">&#39;Z&#39;</span>]&nbsp;@&nbsp;[<span style=\"color:#a31515;\">&#39;0&#39;</span>..<span style=\"color:#a31515;\">&#39;9&#39;</span>])\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">let</span>&nbsp;userName&nbsp;=&nbsp;gen&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">let!</span>&nbsp;length&nbsp;=&nbsp;Gen.choose&nbsp;(1,&nbsp;19)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">let!</span>&nbsp;firstLetter&nbsp;=&nbsp;Gen.elements&nbsp;&lt;|&nbsp;[<span style=\"color:#a31515;\">&#39;a&#39;</span>..<span style=\"color:#a31515;\">&#39;z&#39;</span>]&nbsp;@&nbsp;[<span style=\"color:#a31515;\">&#39;A&#39;</span>..<span style=\"color:#a31515;\">&#39;Z&#39;</span>]\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">let!</span>&nbsp;rest&nbsp;=&nbsp;alphaNumeric&nbsp;|&gt;&nbsp;Gen.listOfLength&nbsp;length\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">return</span>&nbsp;firstLetter&nbsp;::&nbsp;rest&nbsp;|&gt;&nbsp;List.toArray&nbsp;|&gt;&nbsp;String&nbsp;}</pre>\n    </p>\n    <p>\n        Strictly speaking, as long as user names are distinct, the code ought to work, so this generator may be more conservative than necessary. Why am I constraining the generator? For two reasons: First, when FsCheck finds a counter-example, it displays the values that caused the property to fail. A twenty-character alphanumeric string is easier to relate to than some arbitrary string with line breaks and unprintable characters. The second reason is that I'm later going to measure memory load for some of the alternatives, and I wanted data to have realistic size. If user names are chosen by humans, they're unlikely to be longer than twenty characters on average (I've decided).\n    </p>\n    <p>\n        I can now rewrite the above <code>No data</code> test as an FsCheck property:\n    </p>\n    <p>\n        <pre>[&lt;Property&gt;]\n<span style=\"color:blue;\">let</span>&nbsp;``No&nbsp;data``&nbsp;()&nbsp;=\n&nbsp;&nbsp;&nbsp;&nbsp;Gen.userName&nbsp;|&gt;&nbsp;Arb.fromGen&nbsp;|&gt;&nbsp;Prop.forAll&nbsp;&lt;|&nbsp;<span style=\"color:blue;\">fun</span>&nbsp;userName&nbsp;<span style=\"color:blue;\">-&gt;</span>\n&nbsp;&nbsp;&nbsp;&nbsp;task&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">let</span>&nbsp;srvc&nbsp;=&nbsp;FakeSongService&nbsp;()\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">let</span>&nbsp;sut&nbsp;=&nbsp;RecommendationsProvider&nbsp;srvc\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">let!</span>&nbsp;actual&nbsp;=&nbsp;sut.GetRecommendationsAsync&nbsp;userName\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Assert.Empty&nbsp;actual&nbsp;}&nbsp;:&gt;&nbsp;Task</pre>\n    </p>\n    <p>\n        You may think that this is overkill just to be able to supply random user names to the <code>GetRecommendationsAsync</code> method. In isolation, I'd be inclined to agree, but this edit was an occasion to get my FsCheck infrastructure in place. I can now use that to add more properties.\n    </p>\n    <h3 id=\"ea6e29adf0a9458e98309a0f66394b32\">\n        Full coverage <a href=\"#ea6e29adf0a9458e98309a0f66394b32\">#</a>\n    </h3>\n    <p>\n        The cyclomatic complexity of the <code>GetRecommendationsAsync</code> method is only <em>3</em>, so it doesn't require many tests to attain full code coverage. <a href=\"/2015/11/16/code-coverage-is-a-useless-target-measure\">Not that 100% code coverage should be a goal in itself</a>, but when adding tests to an untested code base, it can be useful as an indicator of confidence. Despite its low cyclomatic complexity, the method, with all of its filtering and sorting, is actually quite involved. 100% coverage strikes me as a low bar.\n    </p>\n    <p>\n        The above <code>No data</code> test exercises one of the three branches. <a href=\"/2019/12/09/put-cyclomatic-complexity-to-good-use\">At most two more tests are required</a> to attain full coverage. I'll just show the simplest of them here.\n    </p>\n    <p>\n        The next test case requires a new FsCheck generator, in addition to <code>Gen.userName</code> already shown.\n    </p>\n    <p>\n        <pre><span style=\"color:blue;\">let</span>&nbsp;song&nbsp;=&nbsp;ArbMap.generate&nbsp;ArbMap.defaults&nbsp;|&gt;&nbsp;Gen.map&nbsp;Song</pre>\n    </p>\n    <p>\n        As a fairly simple one-liner, this seems close to the <a href=\"https://wiki.haskell.org/Fairbairn_threshold\">Fairbairn threshold</a>, but I think that giving this generator a name makes the test easier to read.\n    </p>\n    <p>\n        <pre>[&lt;Property&gt;]\n<span style=\"color:blue;\">let</span>&nbsp;``One&nbsp;user,&nbsp;some&nbsp;songs``&nbsp;()&nbsp;=\n&nbsp;&nbsp;&nbsp;&nbsp;gen&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">let!</span>&nbsp;user&nbsp;=&nbsp;Gen.userName\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">let!</span>&nbsp;songs&nbsp;=&nbsp;Gen.arrayOf&nbsp;Gen.song\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">let!</span>&nbsp;scrobbleCounts&nbsp;=\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Gen.choose&nbsp;(1,&nbsp;100)&nbsp;|&gt;&nbsp;Gen.arrayOfLength&nbsp;songs.Length\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">return</span>&nbsp;(user,&nbsp;Array.zip&nbsp;songs&nbsp;scrobbleCounts)&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;|&gt;&nbsp;Arb.fromGen&nbsp;|&gt;&nbsp;Prop.forAll&nbsp;&lt;|&nbsp;<span style=\"color:blue;\">fun</span>&nbsp;(user,&nbsp;scrobbles)&nbsp;<span style=\"color:blue;\">-&gt;</span>\n&nbsp;&nbsp;&nbsp;&nbsp;task&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">let</span>&nbsp;srvc&nbsp;=&nbsp;FakeSongService&nbsp;()\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;scrobbles&nbsp;|&gt;&nbsp;Array.iter&nbsp;(<span style=\"color:blue;\">fun</span>&nbsp;(s,&nbsp;c)&nbsp;<span style=\"color:blue;\">-&gt;</span>&nbsp;srvc.Scrobble&nbsp;(user,&nbsp;s,&nbsp;c))\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">let</span>&nbsp;sut&nbsp;=&nbsp;RecommendationsProvider&nbsp;srvc\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">let!</span>&nbsp;actual&nbsp;=&nbsp;sut.GetRecommendationsAsync&nbsp;user\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Assert.Empty&nbsp;actual&nbsp;}&nbsp;:&gt;&nbsp;Task</pre>\n    </p>\n    <p>\n        This test creates scrobbles for a single user and adds them to the Fake data store. It uses <a href=\"/2016/05/17/tie-fighter-fscheck-properties\">TIE-fighter syntax</a> to connect the generators to the test body. \n    </p>\n    <p>\n        Since all the scrobble counts are generated between <em>1</em> and <em>100</em>, none of them are greater than or equal to <em>10,000</em> and thus the test expects no recommendations.\n    </p>\n    <p>\n        You may think that I'm cheating - after all, why didn't I choose another range for the scrobble count? To be honest, I was still in an exploratory phase, trying to figure out how to express the tests, and as a first step, I was aiming for full code coverage. Even though this test's assertion is weak, it <em>does</em> exercise another branch of the <code>GetRecommendationsAsync</code> method.\n    </p>\n    <p>\n        I had to write only one more test to fully cover the System Under Test. That method is more complicated, so I'll spare you the details. If you're interested, you may consider consulting the example source code repository.\n    </p>\n    <h3 id=\"1fcf0b78bfa94dd8b1b3cd1810068dc8\">\n        Mutation testing <a href=\"#1fcf0b78bfa94dd8b1b3cd1810068dc8\">#</a>\n    </h3>\n    <p>\n        While I don't think that code coverage is useful as a <em>target</em> measure, it can be illuminating as a tool. In this case, knowing that I've now attained full coverage tells me that I need to resort to other techniques if I want another goal to aim for.\n    </p>\n    <p>\n        I chose <a href=\"https://en.wikipedia.org/wiki/Mutation_testing\">mutation testing</a> as my new technique. The <code>GetRecommendationsAsync</code> method makes heavy use of LINQ methods such as <code>OrderByDescending</code>, <code>Take</code>, and <code>Where</code>. <a href=\"https://stryker-mutator.io/\">Stryker</a> for .NET knows about LINQ, so among all the automated sabotage is does, it tries to see what happens if it removes e.g. <code>Where</code> or <code>Take</code>.\n    </p>\n    <p>\n        Although I find the Stryker jargon childish, I set myself the goal to see if I could 'kill mutants' to a degree that I'd at least get a green rating.\n    </p>\n    <p>\n        I found that I could edge closer to that goal by a combination of appending assertions (thus <a href=\"/2021/12/13/backwards-compatibility-as-a-profunctor\">strengthening postconditions</a>) and adding tests. While I sometimes find it <a href=\"/2021/02/15/when-properties-are-easier-than-examples\">easier to define properties than examples</a>, at other times, it's the other way around. In this case, I found it easier to add single examples, like this one:\n    </p>\n    <p>\n        <pre>[&lt;Fact&gt;]\n<span style=\"color:blue;\">let</span>&nbsp;``One&nbsp;verified&nbsp;recommendation``&nbsp;()&nbsp;=&nbsp;task&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">let</span>&nbsp;srvc&nbsp;=&nbsp;FakeSongService&nbsp;()\n&nbsp;&nbsp;&nbsp;&nbsp;srvc.Scrobble&nbsp;(<span style=\"color:#a31515;\">&quot;cat&quot;</span>,&nbsp;Song&nbsp;(1,&nbsp;<span style=\"color:blue;\">false</span>,&nbsp;6uy),&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;10)\n&nbsp;&nbsp;&nbsp;&nbsp;srvc.Scrobble&nbsp;(<span style=\"color:#a31515;\">&quot;ana&quot;</span>,&nbsp;Song&nbsp;(1,&nbsp;<span style=\"color:blue;\">false</span>,&nbsp;5uy),&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;10)\n&nbsp;&nbsp;&nbsp;&nbsp;srvc.Scrobble&nbsp;(<span style=\"color:#a31515;\">&quot;ana&quot;</span>,&nbsp;Song&nbsp;(2,&nbsp;&nbsp;<span style=\"color:blue;\">true</span>,&nbsp;5uy),&nbsp;9_9990)\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">let</span>&nbsp;sut&nbsp;=&nbsp;RecommendationsProvider&nbsp;srvc\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">let!</span>&nbsp;actual&nbsp;=&nbsp;sut.GetRecommendationsAsync&nbsp;<span style=\"color:#a31515;\">&quot;cat&quot;</span>\n \n&nbsp;&nbsp;&nbsp;&nbsp;Assert.Equal&lt;Song&gt;&nbsp;([&nbsp;Song&nbsp;(2,&nbsp;<span style=\"color:blue;\">true</span>,&nbsp;5uy)&nbsp;],&nbsp;actual)&nbsp;}&nbsp;:&gt;&nbsp;Task</pre>\n    </p>\n    <p>\n        It adds three scrobbles to the data store, but only one of them is verified (which is what the <code>true</code> value indicates), so this is the only recommendation the test expects to see.\n    </p>\n    <p>\n        Notice that although song number <code>2</code> 'only' has <em>9,9990</em> plays, the user <em>ana</em> has exactly <em>10,000</em> plays in all, so barely makes the cut. By carefully adding five examples like this one, I was able to 'kill all mutants'.\n    </p>\n    <p>\n        In all, I have eight tests; three FsCheck properties and five normal <a href=\"https://xunit.net/\">xUnit.net</a> <em>facts</em>.\n    </p>\n    <p>\n        All tests work exclusively by supplying direct and <a href=\"http://xunitpatterns.com/indirect%20input.html\">indirect input</a> to the System Under Test (SUT), and verify the return value of <code>GetRecommendationsAsync</code>. No <a href=\"http://xunitpatterns.com/Mock%20Object.html\">Mocks</a> or <a href=\"http://xunitpatterns.com/Test%20Stub.html\">Stubs</a> have opinions about how the SUT interacts with the injected <code>SongService</code>. This gives me confidence that the tests constitute a trustworthy regression test suite, and that they're still sufficiently decoupled from implementation details to enable me to completely rewrite the SUT.\n    </p>\n    <h3 id=\"ab6808bbac564477b6c1fd1751eafd48\">\n        Quirks <a href=\"#ab6808bbac564477b6c1fd1751eafd48\">#</a>\n    </h3>\n    <p>\n        When you add tests to an existing code base, you may discover edge cases that the original programmer overlooked. The <code>GetRecommendationsAsync</code> method is only a code example, so I don't blame Oleksii Holub for some casual coding, but it turns out that the code has some quirks.\n    </p>\n    <p>\n        For example, there's no deduplication, so I had to <a href=\"http://butunclebob.com/ArticleS.TimOttinger.ApologizeIncode\">apologise in my test code</a>:\n    </p>\n    <p>\n        <pre>[&lt;Fact&gt;]\n<span style=\"color:blue;\">let</span>&nbsp;``Only&nbsp;top-rated&nbsp;songs``&nbsp;()&nbsp;=&nbsp;task&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">let</span>&nbsp;srvc&nbsp;=&nbsp;FakeSongService&nbsp;()\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:green;\">//&nbsp;Scale&nbsp;ratings&nbsp;to&nbsp;keep&nbsp;them&nbsp;less&nbsp;than&nbsp;or&nbsp;equal&nbsp;to&nbsp;10.</span>\n&nbsp;&nbsp;&nbsp;&nbsp;[1..20]&nbsp;|&gt;&nbsp;List.iter&nbsp;(<span style=\"color:blue;\">fun</span>&nbsp;i&nbsp;<span style=\"color:blue;\">-&gt;</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;srvc.Scrobble&nbsp;(<span style=\"color:#a31515;\">&quot;hyle&quot;</span>,&nbsp;Song&nbsp;(i,&nbsp;<span style=\"color:blue;\">true</span>,&nbsp;byte&nbsp;i&nbsp;/&nbsp;2uy),&nbsp;500))\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">let</span>&nbsp;sut&nbsp;=&nbsp;RecommendationsProvider&nbsp;srvc\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">let!</span>&nbsp;actual&nbsp;=&nbsp;sut.GetRecommendationsAsync&nbsp;<span style=\"color:#a31515;\">&quot;hyle&quot;</span>\n \n&nbsp;&nbsp;&nbsp;&nbsp;Assert.NotEmpty&nbsp;actual\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:green;\">//&nbsp;Since&nbsp;there&#39;s&nbsp;only&nbsp;one&nbsp;user,&nbsp;but&nbsp;with&nbsp;20&nbsp;songs,&nbsp;the&nbsp;implementation&nbsp;loops</span>\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:green;\">//&nbsp;over&nbsp;the&nbsp;same&nbsp;songs&nbsp;20&nbsp;times,&nbsp;so&nbsp;400&nbsp;songs&nbsp;in&nbsp;total&nbsp;(with&nbsp;duplicates).</span>\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:green;\">//&nbsp;Ordering&nbsp;on&nbsp;rating,&nbsp;only&nbsp;the&nbsp;top-rated&nbsp;200&nbsp;remains,&nbsp;that&nbsp;is,&nbsp;those&nbsp;rated</span>\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:green;\">//&nbsp;5-10.&nbsp;Note&nbsp;that&nbsp;this&nbsp;is&nbsp;a&nbsp;Characterization&nbsp;Test,&nbsp;so&nbsp;not&nbsp;necessarily</span>\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:green;\">//&nbsp;reflective&nbsp;of&nbsp;how&nbsp;a&nbsp;real&nbsp;recommendation&nbsp;system&nbsp;should&nbsp;work.</span>\n&nbsp;&nbsp;&nbsp;&nbsp;Assert.All&nbsp;(actual,&nbsp;<span style=\"color:blue;\">fun</span>&nbsp;s&nbsp;<span style=\"color:blue;\">-&gt;</span>&nbsp;Assert.True&nbsp;(5uy&nbsp;&lt;=&nbsp;s.Rating))&nbsp;}&nbsp;:&gt;&nbsp;Task</pre>\n    </p>\n    <p>\n        This test creates twenty scrobbles for one user: One with a zero rating, two with rating <em>1</em>, two with rating <em>2</em>, and so on, up to a single song with rating <em>10</em>.\n    </p>\n    <p>\n        <a href=\"https://tyrrrz.me/blog/pure-impure-segregation-principle#interleaved-impurities\">The implementation of GetRecommendationsAsync</a> uses these twenty songs to find 'other users' who have these top songs as well. In this case, there's only one user, so for every of those twenty songs, you get the same twenty songs, for a total of 400.\n    </p>\n    <p>\n        You might protest that this is because my <code>FakeSongService</code> implementation is too unsophisticated. <em>Obviously</em>, it should not return the 'original' user's songs! Do, however, consider the implied signature of the <code>GetTopListenersAsync</code> method:\n    </p>\n    <p>\n        <pre>Task&lt;IReadOnlyCollection&lt;User&gt;&gt;&nbsp;GetTopListenersAsync(<span style=\"color:blue;\">int</span>&nbsp;songId);</pre>\n    </p>\n    <p>\n        The method only accepts a <code>songId</code> as input, and if we assume that the service is stateless, it doesn't know who the 'original' user is.\n    </p>\n    <p>\n        Should I fix the quirks? In a real system, it might be appropriate, but in this context I find it better to keep the them. Real systems often have quirks in the shape of legacy business rules and the like, so I only find it realistic that the system may exhibit some weird behaviour. The goal of this set of articles isn't to refactor <em>this particular system</em>, but rather to showcase alternative designs for a system sufficiently complicated to warrant refactorings. Simplifying the code might defeat that purpose.\n    </p>\n    <p>\n        As shown, I have an automated test that requires me to keep that behaviour. I think I'm in a good position to make sweeping changes to the code.\n    </p>\n    <h3 id=\"c114e6c5e6cd4d4fa1c682daf8ed3169\">\n        Conclusion <a href=\"#c114e6c5e6cd4d4fa1c682daf8ed3169\">#</a>\n    </h3>\n    <p>\n        As <a href=\"https://martinfowler.com/\">Martin Fowler</a> writes, an essential precondition for refactoring is a trustworthy test suite. On a daily basis, millions of developers prove him wrong by deploying untested changes to production. There <em>are</em> other ways to make changes, including manual testing, <a href=\"https://en.wikipedia.org/wiki/A/B_testing\">A/B testing</a>, testing in production, etc. Some of them may even work in some contexts.\n    </p>\n    <p>\n        In contrast to such real-world concerns, I don't have a production system with real users. Neither do I have a product owner or a department of manual testers. The best I can do is to add enough Characterisation Tests that I feel confident that I've described <em>the behaviour</em>, rather than the implementation, in enough detail to hold it in place. A <em>Software Vise</em>, as <a href=\"https://michaelfeathers.silvrback.com/bio\">Michael Feathers</a> calls it in <a href=\"/ref/wewlc\">Working Effectively with Legacy Code</a>.\n    </p>\n    <p>\n        Most systems in 'the real world' have too few automated tests. Adding tests to a legacy code base is a difficult discipline, so I found it worthwhile to document this work before embarking on the actual design changes promised by this article series. Now that this is out of the way, we can proceed.\n    </p>\n    <p>\n        The next two articles do more groundwork to establish equivalent code bases in F# and Haskell. If you only care about the C# examples, you can go back to the <a href=\"/2025/04/07/alternative-ways-to-design-with-functional-programming\">first article in this article series</a> and use the table of contents to jump to the next C# example.\n    </p>\n    <p>\n        <strong>Next:</strong> <a href=\"/2025/04/14/porting-song-recommendations-to-f\">Porting song recommendations to F#</a>.\n    </p>\n</div><hr>\n      This blog is totally free, but if you like it, please consider <a href=\"https://blog.ploeh.dk/support\">supporting it</a>.",
      "Content": null,
      "Language": "en-us",
      "Link": "https://blog.ploeh.dk/2025/04/10/characterising-song-recommendations/"
    }
  ]
}
