{
  "Id": "https://khalidabuhakmeh.com/feed.xml",
  "Website": "https://khalidabuhakmeh.com/",
  "Title": "Khalid Abuhakmeh",
  "LastUpdatedTime": "2025-06-13T15:01:19+00:00",
  "Description": "Khalid is a product designer, traveler, respected community member, and open source contributor.",
  "Language": null,
  "Items": [
    {
      "FeedId": "https://khalidabuhakmeh.com/feed.xml",
      "ItemId": "https://khalidabuhakmeh.com/server-sent-events-in-aspnet-core-and-dotnet-10",
      "Title": "Server-Sent Events in ASP.NET Core and .NET 10",
      "PublishDate": "2025-04-22T00:00:00+00:00",
      "Summary": "<p>Like many .NET developers, I’m starting to look at the features coming in .NET 10, C# 14, and specifically ASP.NET Core. To my surprise, ASP.NET Core Minimal APIs now support Server-Sent Events (SSE). For folks who don’t know what Server-Sent Events are, they are a unidirectional channel from the server to a client where a client can subscribe to events. SSE is handy for building live news feeds, stock ticker applications, or any system that has real-time information.</p>\n\n<p>Inevitably, folks will ask, what’s the difference between SSE and SignalR? The difference is that SSE is lighter than WebSockets, and you can implement an SSE solution using the HTTP protocol. Whereas WebSockets, SignalR’s default operating mode, is a different protocol entirely. WebSockets are great, but the bidirectional communication between server and client adds additional costs that are typically unnecessary for the systems I mentioned previously.</p>\n\n<p>In this post, I’ll show you how to implement a straightforward SSE example using ASP.NET Core Minimal APIs, a background service, and some basic JavaScript.</p>\n\n<!--more-->\n\n<h2 id=\"the-anatomy-of-a-sse-endpoint\">The Anatomy of a SSE Endpoint</h2>\n\n<p>Starting in .NET 10, you can now use the <code>TypedResults</code> class to return a <code>ServerSentEventsResult</code>, which takes an <code>IAsyncEnumerable&lt;&gt;</code> instance and an event type.</p>\n\n<pre><code class=\"language-csharp\">using System.ComponentModel;\nusing System.Runtime.CompilerServices;\n\nvar builder = WebApplication.CreateBuilder(args);\nbuilder.Services.AddSingleton&lt;FoodService&gt;();\nbuilder.Services.AddHostedService&lt;FoodServiceWorker&gt;();\n\nvar app = builder.Build();\napp.UseDefaultFiles().UseStaticFiles();\n\napp.MapGet(\"/orders\", (FoodService foods, CancellationToken token) =&gt;\n    TypedResults.ServerSentEvents(\n        foods.GetCurrent(token),\n        eventType: \"order\")\n);\n\napp.Run();\n</code></pre>\n\n<p>In this example code, the <code>foods.GetCurrent</code> method call returns an <code>IAsyncEnumerable</code> of food-based emojis. The cancellation token allows the client to unsubscribe, stopping the enumeration and server-side computation.</p>\n\n<p>That’s all you need; let’s see our <code>IAsyncEnumerable</code> implementation.</p>\n\n<h2 id=\"implementing-an-iasyncenumerable-food-service\">Implementing an IAsyncEnumerable Food Service</h2>\n\n<p>While implementing an <code>IAsyncEnumerable</code> is straightforward, I wanted to write an implementation that synced all subscribers to a single source of truth. I accomplish this task in two classes: <code>FoodService</code> and <code>FoodServiceWorker</code>.</p>\n\n<p>The <code>FoodService</code> implements an <code>INotifyPropertyChanged</code> and allows all subscribers to sync to get a single food item’s <code>Current</code> value.</p>\n\n<pre><code class=\"language-csharp\">public class FoodService : INotifyPropertyChanged\n{\n    public FoodService()\n    {\n        Current = Foods[Random.Shared.Next(Foods.Length)];\n    }\n\n    public event PropertyChangedEventHandler? PropertyChanged;\n    private static readonly string[] Foods = [\"🍔\", \"🍟\", \"🥤\", \"🍤\", \"🍕\", \"🌮\", \"🥙\"];\n\n    private string Current\n    {\n        get;\n        set\n        {\n            field = value;\n            OnPropertyChanged();\n        }\n    }\n\n    public async IAsyncEnumerable&lt;string&gt; GetCurrent(\n        [EnumeratorCancellation] CancellationToken ct)\n    {\n        while (ct is not { IsCancellationRequested: true })\n        {\n            yield return Current;\n            var tcs = new TaskCompletionSource();\n            PropertyChangedEventHandler handler = (_, _) =&gt; tcs.SetResult();\n            PropertyChanged += handler;\n            try\n            {\n                await tcs.Task.WaitAsync(ct);\n            }\n            finally\n            {\n                PropertyChanged -= handler;\n            }\n        }\n    }\n\n    public void Set()\n    {\n        Current = Foods[Random.Shared.Next(Foods.Length)];\n    }\n\n    protected void OnPropertyChanged([CallerMemberName] string? propertyName = null)\n    {\n        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));\n    }\n}\n</code></pre>\n\n<p>Now, I need a background service that updates the food choices at a timed interval.</p>\n\n<pre><code class=\"language-csharp\">public class FoodServiceWorker(FoodService foodService)\n    : BackgroundService\n{\n    protected override async Task ExecuteAsync(CancellationToken stoppingToken)\n    {\n        while (!stoppingToken.IsCancellationRequested)\n        {\n            foodService.Set();\n            await Task.Delay(1000, stoppingToken);\n        }\n    }\n}\n</code></pre>\n\n<p>Now, let’s write the HTML subscribing to the SSE endpoint defined in my simple sample.</p>\n\n<h2 id=\"subscribing-to-sse-using-javascript\">Subscribing to SSE using JavaScript</h2>\n\n<p>In a new <code>index.html</code> file in <code>wwwroot</code>, I’ll need to create a new EventSource object, listen for my <code>order</code> events to come through, and handle them appropriately.</p>\n\n<pre><code class=\"language-html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;title&gt;Title&lt;/title&gt;\n&lt;/head&gt;\n&lt;style&gt;\n    ul {\n        display: flex;\n        flex-direction: row;\n        list-style: none;\n        flex-wrap: wrap;\n        width: 90%;\n        gap: 1rem;\n        padding: 0;\n    }\n\n    li {\n        font-size: 2rem;\n    }\n&lt;/style&gt;\n&lt;body&gt;\n\n&lt;h1&gt;Khalid's Fast-Food Fair&lt;/h1&gt;\n&lt;ul id=\"orders\"&gt;\n&lt;/ul&gt;\n\n&lt;script&gt;\n    const eventSource = new EventSource('/orders');\n    const angelsList = document.getElementById('orders');\n\n    eventSource.addEventListener('order', event =&gt; {\n        const li = document.createElement('li');\n        li.textContent = event.data;\n        angelsList.appendChild(li);\n    });\n\n    eventSource.onerror = error =&gt; {\n        console.error('EventSource failed:', error);\n        eventSource.close();\n    };\n&lt;/script&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\n<p>It’s that simple. When the browser loads the page, we’ll immediately subscribe to the SSE endpoint and start receiving food emojis. If you open two pages, you’ll see the emojis synced between the pages.</p>\n\n<p>Try this quick sample, and let me know if you have any questions. Cheers.</p>\n",
      "Content": null,
      "Language": null,
      "Link": "https://khalidabuhakmeh.com/server-sent-events-in-aspnet-core-and-dotnet-10"
    },
    {
      "FeedId": "https://khalidabuhakmeh.com/feed.xml",
      "ItemId": "https://khalidabuhakmeh.com/generic-csharp-methods-with-enum-constraints-for-dotnet",
      "Title": "Generic C# Methods with Enum Constraints for .NET",
      "PublishDate": "2025-03-04T00:00:00+00:00",
      "Summary": "<p>Every couple of years, I tend to write the same variation of an <code>enum</code> helper that reads metadata from an enumeration using reflection. Almost any .NET developer with a few years of experience has done the same. The implementation uses Generics to work for any <code>enum</code> defined in my solution, as there is typically more than one described in a typical .NET solution. Historically, generics and enums didn’t work well because of the limitations of generics when dealing with this particular type, but to my surprise, they do now!</p>\n\n<p>In this post, we’ll explore how to write the helper method I’m describing while ensuring the generic constraints stop us from passing in arguments other than enums.</p>\n\n<!--more-->\n\n<h2 id=\"straight-to-the-implementation\">Straight To The Implementation</h2>\n\n<p>Since this post will be short, I’ll start with a sample you can play with.</p>\n\n<pre><code class=\"language-csharp\">using System.ComponentModel;\nusing System.Reflection;\n\n// get all descriptions\n{\n    Console.WriteLine(\"Groceries:\\n\");\n    var descriptions = Enums.GetDescriptions&lt;Groceries&gt;();\n    foreach (var (value, description) in descriptions)\n    {\n        Console.WriteLine($\"{value} - {description}\");\n    }\n    Console.WriteLine();\n}\n\n// Get a description for a single value\n{\n    var (value, description) = Enums.GetDescription(Groceries.Fruit);\n    Console.WriteLine($\"Single value:\\n{value} - {description}\");\n}\n\npublic enum Groceries\n{\n    [Description(\"Apples, Oranges, Bananas\")]\n    Fruit,\n    [Description(\"Spinach, Kale, Broccoli, Cabbage\")]\n    Vegetables,\n    [Description(\"Cheese, Milk, Yogurt\")]\n    Dairy,\n    [Description(\"Chicken, Beef, Pork, Lamb, Turkey\")]\n    Meat,\n    [Description(\"Anything not listed above\")]\n    Other\n}\n\npublic static class Enums\n{\n    public static IEnumerable&lt;(TEnum Value, string Description)&gt; GetDescriptions&lt;TEnum&gt;()\n        where TEnum : struct, Enum\n    {\n        var values = Enum.GetValues&lt;TEnum&gt;();\n        foreach (var value in values)\n        {\n            yield return GetDescription(value);\n        }\n    }\n\n    public static (TEnum Value, string Description) GetDescription&lt;TEnum&gt;(TEnum value)\n        where TEnum : struct, Enum\n    {\n        var type = typeof(TEnum);\n        var name = value.ToString();\n        var info = type.GetMember(name)[0];\n        var description = info.GetCustomAttribute&lt;DescriptionAttribute&gt;() is { } attr\n            ? attr.Description\n            : name;\n        \n        return (value, description);\n    }\n}\n</code></pre>\n\n<p>The helper code is here for people who don’t want to visualize the previous sample.</p>\n\n<pre><code class=\"language-csharp\">public static class Enums\n{\n    public static IEnumerable&lt;(TEnum Value, string Description)&gt; GetDescriptions&lt;TEnum&gt;()\n        where TEnum : struct, Enum\n    {\n        var values = Enum.GetValues&lt;TEnum&gt;();\n        foreach (var value in values)\n        {\n            yield return GetDescription(value);\n        }\n    }\n\n    public static (TEnum Value, string Description) GetDescription&lt;TEnum&gt;(TEnum value)\n        where TEnum : struct, Enum\n    {\n        var type = typeof(TEnum);\n        var name = value.ToString();\n        var info = type.GetMember(name)[0];\n        var description = info.GetCustomAttribute&lt;DescriptionAttribute&gt;() is { } attr\n            ? attr.Description\n            : name;\n        \n        return (value, description);\n    }\n}\n</code></pre>\n\n<p>The essential part of our generic methods is our method declarations’ <code>where</code> clause.</p>\n\n<pre><code class=\"language-csharp\">where TEnum: struct, Enum\n</code></pre>\n\n<p>This line adds two crucial elements to our generic method.</p>\n\n<p>It makes sure that <code>TEnum</code> is an <code>Enum</code> type.\nThe <code>struct</code> ensures that <code>TEnum</code> is non-nullable.</p>\n\n<p>The non-nullability of an <code>Enum</code> is essential since we are using the <code>Enum.GetValues&lt;TEnum&gt;</code> method to get known values. You could remove this constraint, but your implementation would require more boxing and defensive programming in the form of null checks. It’s more straightforward to enforce the <code>struct</code> requirement.</p>\n\n<h2 id=\"conclusion\">Conclusion</h2>\n\n<p>There you go, a constrained generic method implementation that can get metadata from an Enum value. If you’re still wondering, “where would I use this?” I find these methods helpful in web applications for creating a <code>SelectListItem</code>, but I stuck with Tuples for this post. What a time to be alive. Cheers!</p>\n\n",
      "Content": null,
      "Language": null,
      "Link": "https://khalidabuhakmeh.com/generic-csharp-methods-with-enum-constraints-for-dotnet"
    },
    {
      "FeedId": "https://khalidabuhakmeh.com/feed.xml",
      "ItemId": "https://khalidabuhakmeh.com/strongly-typed-markdown-for-aspnet-core-content-apps",
      "Title": "Strongly-Typed Markdown for ASP.NET Core Content Apps",
      "PublishDate": "2025-02-25T00:00:00+00:00",
      "Summary": "<p>Every development career has milestone moments. One we all likely share is building a custom content management system, or CMS, as developers like to refer to it. A common approach to melding metadata and content is utilizing the old reliable Markdown format, which fuses YAML frontmatter with a simple content format. While YAML is flexible, it can be less than ideal when wanting to use that embedded data in your ASP.NET Core applications.</p>\n\n<p>In this post, I’ll show you a quick experiment around processing Markdown files and their YAML into a strongly-type C# object. The example allows you to easily modify content while still having access to instances of data that you can strongly type.</p>\n\n<!--more-->\n\n<h2 id=\"the-magnificent-markdown\">The Magnificent Markdown</h2>\n\n<p><a href=\"https://www.markdownguide.org/\">Markdown</a> is a very flexible format whose strength comes from its simplicity. Let’s examine a document that defines a person’s profile.</p>\n\n<pre><code class=\"language-markdown\">---\nname: \"Khalid Abuhakmeh\"\nprofession: \"Software Developer\"\nhobbies: [\"video games\", \"movies\", \"boxing\"]\n---\n\n## Summary\n\nI am writing a little about myself here and this should appear\nin the page. Cool! Check me out at my [personal blog](https://khalidabuhakmeh.com).\n</code></pre>\n\n<p>The top of the document defines a data model with properties for <code>Name</code>, <code>Profession</code>, and <code>Hobbies</code>. The C# data model for this YAML  would consist of three properties.</p>\n\n<pre><code class=\"language-csharp\">public class Asset\n{\n    public string Name { get; set; } = \"\";\n    public string Profession { get; set; } = \"\";\n    public string[] Hobbies { get; set; } = [];\n}\n</code></pre>\n\n<p>Let’s build an object that will parse the Markdown file’s front matter while helping us render the content into HTML for use on a Razor page.</p>\n\n<h2 id=\"the-markdownobject-and-parsing-files\">The MarkdownObject and Parsing Files</h2>\n\n<p>For my experiment, I created a <code>MarkdownObject&lt;T&gt;</code> class that takes a content string and parses the document into its parts. The <code>T</code> argument is up to the developer to determine.</p>\n\n<p>To continue with the code, you must add the <code>Markdig</code> package and the <code>YamlDotNet</code> package.</p>\n\n<pre><code class=\"language-xml\">&lt;ItemGroup&gt;\n  &lt;PackageReference Include=\"Markdig\" Version=\"0.40.0\" /&gt;\n  &lt;PackageReference Include=\"YamlDotNet\" Version=\"16.3.0\" /&gt;\n&lt;/ItemGroup&gt;\n</code></pre>\n\n<p>Let’s look at the implementation next.</p>\n\n<pre><code class=\"language-csharp\">using Markdig;\nusing Markdig.Extensions.Yaml;\nusing Markdig.Syntax;\nusing Microsoft.AspNetCore.Html;\nusing YamlDotNet.Serialization;\nusing Md = Markdig.Markdown;\n\nnamespace SuperContent.Models;\n\npublic class MarkdownObject&lt;T&gt;\n{\n    private static readonly MarkdownPipeline MarkdownPipeline \n        = new MarkdownPipelineBuilder()\n            .UseYamlFrontMatter()\n            .UseAdvancedExtensions()\n            .Build();\n    private static readonly IDeserializer Deserializer \n        = new DeserializerBuilder()\n            .WithYamlFormatter(new YamlFormatter())\n            .WithCaseInsensitivePropertyMatching()\n            .Build();\n\n    public MarkdownObject(string content)\n    {\n        var doc = Md.Parse(content, MarkdownPipeline);\n        FrontMatter = default;\n        \n        if (doc.Descendants&lt;YamlFrontMatterBlock&gt;().FirstOrDefault() is { } fm)\n        {\n            var yaml = fm.Lines.ToSlice();\n            FrontMatter = Deserializer.Deserialize&lt;T&gt;(yaml.Text);\n            \n            // we don't want front matter after it's processed\n            doc.Remove(fm);\n        }\n        \n        // turn it into HTML once\n        Html = new HtmlString(doc.ToHtml());\n    }\n\n    public T? FrontMatter { get; private set; }\n    \n    public IHtmlContent Html { get; private set; }\n}\n</code></pre>\n\n<p>In the case of this demo, we’ll create an instance of <code>MarkdownObject&lt;Asset&gt;</code>. Let’s see how to use this type in a Razor Page.</p>\n\n<h2 id=\"markdownobject-in-a-razor-page\">MarkdownObject in a Razor Page</h2>\n\n<p>In my demo, I have all my Markdown files in a <code>Data</code> directory. Each file in the data directory has a unique file name that we’ll use in our Razor Page as a <code>slug</code>. We’ll also use the Model to output the data and the processed HTML into a structured layout.</p>\n\n<pre><code class=\"language-razor\">@page \"/profile/{slug}\"\n@model SuperContent.Pages.Profile\n\n&lt;div class=\"row\"&gt;\n    &lt;div class=\"col-12\"&gt;\n        &lt;h1&gt;@Model.Asset.FrontMatter?.Name&lt;/h1&gt;\n    &lt;/div&gt;\n&lt;/div&gt;\n\n&lt;div class=\"row\"&gt;\n    &lt;div class=\"col-3\"&gt;\n        &lt;dl&gt;\n            &lt;dt&gt;Profession&lt;/dt&gt;\n            &lt;dd&gt;@Model.Asset.FrontMatter?.Profession&lt;/dd&gt;\n            &lt;dt&gt;Hobbies&lt;/dt&gt;\n            &lt;dd&gt;\n                &lt;ul&gt;\n                    @if (Model.Asset is { FrontMatter.Hobbies : { } hobbies })\n                    {\n                        @foreach (var hobby in hobbies)\n                        {\n                            &lt;li&gt;@hobby&lt;/li&gt;\n                        }\n                    }\n                &lt;/ul&gt;\n            &lt;/dd&gt;\n        &lt;/dl&gt;\n    &lt;/div&gt;\n    &lt;div class=\"col-9\"&gt;\n        @Model.Asset.Html\n    &lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n\n<p>So, what does the page’s model look like?</p>\n\n<pre><code class=\"language-csharp\">using System.Text.RegularExpressions;\nusing Microsoft.AspNetCore.Mvc;\nusing Microsoft.AspNetCore.Mvc.RazorPages;\nusing SuperContent.Models;\n\nnamespace SuperContent.Pages;\n\npublic partial class Profile : PageModel\n{\n    [BindProperty(SupportsGet = true)]\n    public string Slug { get; set; } = \"\";\n    \n    public MarkdownObject&lt;Asset&gt; Asset { get; set; } \n        = null!;\n    \n    public IActionResult OnGet()\n    {\n        // read a file from the Data directory based on the slug\n        // sanitize the slug first because people are mean\n        var sanitizedSlug = SlugRegex.Replace(Slug, \"\");\n        var path = Path.Combine(\"Data\", $\"{sanitizedSlug}.md\");\n\n        if (System.IO.File.Exists(path))\n        {\n            var content = System.IO.File.ReadAllText($\"Data/{sanitizedSlug}.md\");\n            Asset = new(content);\n            return Page();\n        }\n\n        return NotFound();\n    }\n\n    [GeneratedRegex(\"[^a-zA-Z0-9_-]\")]\n    private static partial Regex SlugRegex { get; }\n}\n\npublic class Asset\n{\n    public string Name { get; set; } = \"\";\n    public string Profession { get; set; } = \"\";\n    public string[] Hobbies { get; set; } = [];\n}\n</code></pre>\n\n<p>The <code>OnGet</code> method contains some protective code to prevent access to other files, but it’s ultimately pretty straightforward. When you go to <code>/profile/Khalid,</code> you’ll see a nicely formatted page that mixes data and content into predetermined HTML because we use the new <code>MarkdownObject</code> class. Sweet!</p>\n\n<p>I’ve pushed the code to my <a href=\"https://github.com/khalidabuhakmeh/SuperContent\">GitHub repository so you can try this sample</a> for yourself. Please give it a try and let me know what you think. As always, thanks for reading and sharing my posts. Cheers.</p>\n\n",
      "Content": null,
      "Language": null,
      "Link": "https://khalidabuhakmeh.com/strongly-typed-markdown-for-aspnet-core-content-apps"
    },
    {
      "FeedId": "https://khalidabuhakmeh.com/feed.xml",
      "ItemId": "https://khalidabuhakmeh.com/the-curious-case-of-dotnet-concurrentdictionary-and-closures",
      "Title": "The Curious Case of .NET ConcurrentDictionary and Closures",
      "PublishDate": "2025-02-18T00:00:00+00:00",
      "Summary": "<p>I was recently looking at the <a href=\"https://duendesoftware.com\">Duende Software</a> codebase, and I kept seeing the same suggestion offered by the IDE tooling whenever I encountered a <code>ConcurrentDictionary</code>: <strong>“Closure can be eliminated: method has overload to avoid closure creation.”</strong></p>\n\n<p>While the suggestion appears in the tooling, there isn’t a quick fix action to apply the change. It left me scratching my head because there wasn’t an immediately obvious solution.</p>\n\n<p>This post will define closures and explain their problems. We’ll also explain how to change your usage of <code>ConcurrentDictionary</code> to avoid closures altogether.</p>\n\n<!--more-->\n\n<h2 id=\"what-are-closures\">What Are Closures?</h2>\n\n<p>If you’ve ever worked with an <code>Action</code>, <code>Func</code>, <code>delegate</code>, or LINQ, then you’ve likely encountered a closure. A closure is a language mechanism that allows you to treat a function with <strong>free variables</strong> as if it were an object instance you may pass, invoke, or use in another context from when you first created it. <a href=\"https://www.simplethread.com/c-closures-explained/\">Justin Etheredge</a> has a great article explaining closures in-depth, but it’s when you use a lambda with a state outside the current scope of the lambda.</p>\n\n<p>Let’s create a closure by capturing a variable in a straightforward example.</p>\n\n<pre><code class=\"language-csharp\">void SayHello(string name)\n{\n    var hello = () =&gt;\n    {\n        // name is captured causing an allocation\n        // and potential concurrency issues\n        Console.WriteLine($\"Hello {name}\");\n    };\n    hello();\n}\n</code></pre>\n\n<p>In the code above, the compiler needs to capture the <code>name</code> parameter to ensure all future calls to our <code>hello</code> lambda can execute. Capture can cause issues that may be difficult to predict until you execute your code.</p>\n\n<ol>\n  <li>Additional allocations are needed to capture a value and can have resource utilization implications.</li>\n  <li>A value captured from outside the closure scope may be alterable if it is a reference type. Unintended state change can lead to unpredictable behavior.</li>\n  <li>Long-lived references may lead to memory leaks in the long run.</li>\n</ol>\n\n<p>To avoid capture, ensure all lambdas pass state required as arguments.</p>\n\n<pre><code class=\"language-csharp\">void SayHello(string name)\n{\n    var hello = (string n) =&gt;\n    {\n        Console.WriteLine($\"Hello {n}\");\n    };\n    hello(name);\n}\n</code></pre>\n\n<p>Now that we understand the basics, let’s examine the <code>ConcurrentDictionary</code> suggestion and see how we might fix it.</p>\n\n<h2 id=\"concurrentdictionarygetoradd-and-closure-creation\">ConcurrentDictionary.GetOrAdd and Closure Creation</h2>\n\n<p>Let’s write a straightforward use of the <code>GetOrAdd</code> method on <code>ConcurrentDictionary</code> and see what the issue might be.</p>\n\n<pre><code class=\"language-csharp\">using System.Collections.Concurrent;\n\nConcurrentDictionary&lt;string, Item&gt; concurrentDictionary \n    = new();\n\nvar key = \"khalid\";\nvar value = \"awesome\";\n\nvar result = concurrentDictionary.GetOrAdd(key, (k) =&gt; {\n    Console.WriteLine($\"Building {k}\");\n    return new Item(value, DateTime.Now);\n});\n\nConsole.WriteLine(result);\n</code></pre>\n\n<p>Looking at the code, what variable do you think is creating the unnecessary closure?</p>\n\n<p>If you guessed <code>value</code>, then you would be correct!</p>\n\n<p>How do we fix the closure since our tooling now suggests that there is a solution to this issue?</p>\n\n<pre><code class=\"language-text\">Closure can be eliminated: method has overload \nto avoid closure creation.\n</code></pre>\n\n<p>Well, let’s refactor and see how our code changes. I’ll add parameter prefixes to make clear what is happening.</p>\n\n<pre><code class=\"language-csharp\">using System.Collections.Concurrent;\n\nConcurrentDictionary&lt;string, Item&gt; concurrentDictionary = new();\n\nvar key = \"khalid\";\nvar value = \"awesome\";\n\nvar result = concurrentDictionary.GetOrAdd(\n    key: key,\n    valueFactory: (k, arg) =&gt;\n    {\n        Console.WriteLine($\"Building {k}\");\n        return new Item(arg, DateTime.Now);\n    },\n    factoryArgument: value);\n\nConsole.WriteLine(result);\n\nrecord Item(string Value, DateTime Time);\n</code></pre>\n\n<p>So there is an overload on <code>ConcurrentDictionary.GetOrAdd</code> that takes three parameters:</p>\n\n<ol>\n  <li>The key to our value.</li>\n  <li>The lambda function responsible for creating our value when we do not find it.</li>\n  <li>A singular factory argument. You must wrap multiple arguments in a container class.</li>\n</ol>\n\n<p>Using this overload, we now avoid closures, reduce allocations, and avoid potentially nasty concurrency or memory leak issues.</p>\n\n<p>If you’re using <code>ConcurrentDictionary</code> check to see if you’re using <code>GetOrAdd</code> and see if you’re using the more efficient overload. Thanks for reading and sharing my posts with friends and colleagues. Cheers.</p>\n",
      "Content": null,
      "Language": null,
      "Link": "https://khalidabuhakmeh.com/the-curious-case-of-dotnet-concurrentdictionary-and-closures"
    },
    {
      "FeedId": "https://khalidabuhakmeh.com/feed.xml",
      "ItemId": "https://khalidabuhakmeh.com/aspnet-core-and-chunking-http-cookies",
      "Title": "ASP.NET Core and Chunking HTTP Cookies",
      "PublishDate": "2025-02-11T00:00:00+00:00",
      "Summary": "<p>If you’ve spent time around web development or your grocery store’s baked goods aisle, you’ve probably dealt with <strong>cookies</strong>. Let’s discuss the web kind today. A cookie is a header key-value pair that is set on the server using the <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie\"><code>Set-Cookie</code></a> key, and a value of <code>&lt;name&gt;=&lt;value&gt;</code>. Cookies persist on the client, where the client will send each cookie to the server on each subsequent request. It’s a simple way to persist state in the stateless web environment and avoid complex session management infrastructure. That said, cookies have limitations, mainly the <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies#data_storage\"><strong>4kb</strong> size limit</a> for each unique cookie. Size limits can be a serious problem for ASP.NET Core applications, which rely heavily on maintaining user session data in an encrypted and encoded cookie.</p>\n\n<p>In this post, we’ll look at a sample I wrote that uses the same <code>ICookieManager</code> abstraction that ASP.NET Core uses to chunk large cookies successfully.</p>\n\n<!--more-->\n\n<h2 id=\"why-you-would-and-wouldnt-use-cookies\">Why You Would and Wouldn’t Use Cookies</h2>\n\n<p>As the introduction mentions, cookies are a straightforward mechanism for maintaining the state between HTTP requests as users interact with your application. Cookies can significantly simplify your backend implementation, as you can expect requests to contain most of the information required to process user-intended actions. Cookies may include user information such as an ID, a name, an email address, and more. The request/response lifecycle of cookies also makes it easy to debug issues when they inevitably occur, as you can view an HTTP request and its headers in most logging mechanisms. These are only a few advantages, but let’s discuss some disadvantages.</p>\n\n<p>While cookies are configurable, you can assume that, generally, the client will pass them along with each request to the server. The additional payload on each request can add unnecessary overhead to requests that don’t take advantage of the cookies. For example, any request for a file might still receive all set cookies even though the goal is to serve static content. That adds unnecessary ingress and resource utilization to your applications. Imagine a request with 10 cookies with a maxed-out cookie size on each. That’s an additional 40kb per request! And speaking of resource utilization, if cookies are chunked or encrypted, they first need to be reassembled and unencrypted before you can use them. Depending on your ASP.NET Core pipeline setup, this can unnecessarily add to your resource utilization, leading to increased memory and CPU usage.</p>\n\n<p>My description does not say you should or shouldn’t ever use cookies, but you should be mindful that they have an associated cost. Now, let’s get to some code to see how to set a simple cookie and then use the <code>ChunkingCookieManager</code> to chunk larger cookies.</p>\n\n<h2 id=\"setting-cookies-in-aspnet-core\">Setting Cookies in ASP.NET Core</h2>\n\n<p><strong>You can see the <a href=\"https://github.com/khalidabuhakmeh/CookieMonster\">entire sample at this GitHub repository</a></strong></p>\n\n<p>Like most web-related abstractions, you can access cookies from the current <code>HttpContext</code>. Using the current request’s context, let’s set a cookie on an HTTP response.</p>\n\n<pre><code class=\"language-csharp\">ctx.Response.Cookies.Append(\"cookie_monster\", \"nom nom nom\");\n</code></pre>\n\n<p>In our sample, we’ll be reading and rewriting a value with appended data.</p>\n\n<pre><code class=\"language-csharp\">app.MapGet(\"/nom-nom\", async ctx =&gt;\n{\n    ctx.Response.Cookies.Append(\"cookie_monster\",\n        ctx.Request.Cookies.TryGetValue(\"cookie_monster\", out var cookie)\n            ? $\"{cookie}, {RandomString()}\"\n            : $\"{RandomString()}\");\n    // more code\n}\n</code></pre>\n\n<p>That was easy! But there’s an issue: our cookie will continue expanding until it reaches our 4kb limit. Oh no! Admittedly, this is an example designed to fail quickly, but it’s easy to find yourself in a situation where cookies slowly creep up to the size limit. Let’s fix this code.</p>\n\n<p>Install the <code>Microsoft.AspNetCore.Authentication.Cookies</code> NuGet package into your existing project to start using cookie chunking. In most cases, you’ll likely already have this dependency due to a transitive inclusion, but it never hurts to include it explicitly.</p>\n\n<p>Next, we’ll need to register the <code>ChunkingCookieManager</code> in our services collection as an implementation of <code>ICookieManager</code>.</p>\n\n<pre><code class=\"language-csharp\">builder.Services.AddScoped&lt;ICookieManager&gt;(svc =&gt; new ChunkingCookieManager\n{\n    // characters, not bytes... 🤔\n    ChunkSize = 1000, ThrowForPartialCookies = true\n});\n</code></pre>\n\n<p>In my case, I reduced the chunk size for a few reasons.</p>\n\n<p>See the chunking behavior sooner than later.\nThe <code>ChunkSize</code> is based on characters in .NET and not kilobytes, so you’ll need to account for that based on the data you’ll be storing.\n<code>1000</code> is a nice round number, but the default is <code>4050</code>.</p>\n\n<p>Let’s look at the implementation in another minimal API endpoint.</p>\n\n<pre><code class=\"language-csharp\">{\napp.MapGet(\"/chunks\", async (HttpContext ctx, ICookieManager cookieManager) =&gt;\n{\n    var value = cookieManager.GetRequestCookie(ctx, \"chunky_monster\") is { } cookie\n        ? $\"{cookie}, {RandomString()}\"\n        : $\"{RandomString()}\";\n\n    cookieManager.AppendResponseCookie(ctx, \"chunky_monster\", value, new CookieOptions());\n\n    // more code...\n});\n</code></pre>\n\n<p>There are a few essential elements to getting cookie chunking working:</p>\n\n<p>You must use the <code>ICookieManager</code> implementation for all interactions of your logical cookie since it will take care of the chunks. Interacting with the cookies directly through the <code>HttpContext</code> will cause you issues.\nThe <code>ICookieManager</code> API requires access to an <code>HttpContext</code> instance. There is no assumption that a cookie manager will have an HTTP context dependency injected. You could easily create an implementation that wraps this into a new API.\nThe <code>CookieOptions</code> argument is required but can be left empty. Options allow you to set cookie options on the resulting cookie chunks, such as <code>Domain</code>, <code>Expires</code>, <code>Secure</code>, and more.</p>\n\n<p>As the concrete type name suggests, we will be chunking cookies, meaning that if a cookie’s contents exceed our configured limits, we’ll produce multiple header values.</p>\n\n<p>You’ll usually see the following behavior in your browser’s dev tools.</p>\n\n<table>\n  <thead>\n    <tr>\n      <th>Name</th>\n      <th>Value</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>chunky_monster</td>\n      <td>chunks-2</td>\n    </tr>\n    <tr>\n      <td>chunky_monsterC1</td>\n      <td><em>value chunk up to <code>ChunkSize</code></em></td>\n    </tr>\n    <tr>\n      <td>chunky_monsterC2</td>\n      <td><em>rest of value</em></td>\n    </tr>\n    <tr>\n      <td>chunky_monsterCN</td>\n      <td><em>more to come if necessary</em></td>\n    </tr>\n  </tbody>\n</table>\n\n<p>There you go, you’ve successfully chunked your cookies using the mechanisms provided by ASP.NET Core.</p>\n\n<h2 id=\"conclusion\">Conclusion</h2>\n\n<p>Cookies are a bedrock of web development, but you need to be mindful of their benefits and drawbacks. If you do find yourself exceeding the size limits of cookies, I’d recommend first understanding why it has occurred and if you have room to optimize your data. In a pinch, adopting chunking can help you get over the sizing issue, but can have the drawbacks mentioned in one of the previous sections. If you think you have a better strategy, you can implement the <code>ICookieManager</code> yourself and take a completely different approach. If you do, drop me a message and send me a link to your implementation.</p>\n\n<p>To <a href=\"https://github.com/khalidabuhakmeh/CookieMonster\">try this sample out for yourself, head to my GitHub repository</a>. As always, thanks for reading and sharing my posts.</p>\n",
      "Content": null,
      "Language": null,
      "Link": "https://khalidabuhakmeh.com/aspnet-core-and-chunking-http-cookies"
    },
    {
      "FeedId": "https://khalidabuhakmeh.com/feed.xml",
      "ItemId": "https://khalidabuhakmeh.com/vogen-and-value-objects-with-csharp-and-dotnet",
      "Title": "Vogen and Value Objects with C# and .NET",
      "PublishDate": "2025-02-04T00:00:00+00:00",
      "Summary": "<p>When it comes to programming, correctness is the name of the game. Every developer aims to understand, model, and limit potential outliers when executing code because those unknown variables can lead to exceptions and critical failures. There are many techniques developers use, but I recently discovered a new library (at least to me) in the .NET community that aims to help developers constrain potential inputs using value objects.</p>\n\n<p>In this post, we’ll write a quick sample using Vogen to demonstrate how value objects can make our code clearer and less error-prone.</p>\n\n<!--more-->\n\n<h2 id=\"what-is-a-value-object\">What is a Value Object?</h2>\n\n<p>A value object represents a logical concept but is a .NET primitive value such as <code>int</code>, <code>bool</code>, <code>string</code>, and more. A straightforward example might be a birth date. Most developers would define a birth date using the <code>DateTime</code> type, hoping that the variable name clarifies the value’s intention.</p>\n\n<pre><code class=\"language-csharp\">DateTime birthDate = new DateTime(1990, 1, 1);\n</code></pre>\n\n<p>The drawback to this code is nothing stops a developer from unintentionally using the <code>birthDate</code> variable incorrectly.</p>\n\n<pre><code class=\"language-csharp\">DateTime birthDate = new DateTime(1990, 1, 1);\nSetMovieReleaseDate(birthDate);\nvoid SetMovieReleaseDate(DateTime date) { }\n</code></pre>\n\n<p>While the code technically works, it may not be what the developers intended logically. The birth date may or may not be the release date of a movie, and it’s difficult to tell if this code is “correct.” Let’s fix it using value objects.</p>\n\n<pre><code class=\"language-csharp\">var birthDate = new BirthDateTime(new (1990, 1, 1));\nvar movieReleaseDate = new MovieReleaseDateTime(birthDate.Value);\nSetMovieReleaseDate(movieReleaseDate);\n\nvoid SetMovieReleaseDate(MovieReleaseDateTime date) { }\n// value objects\npublic record MovieReleaseDateTime(DateTime Value);\npublic record BirthDateTime(DateTime Value);\n</code></pre>\n\n<p>Looking at this code, you can see that the developer intended to set a movie release date to the same value as the birth date. The goal is to minimize the chance of autocompleting your way into logical bugs that may be difficult to track down.</p>\n\n<p>Yes, this can seem overly ceremonious, so consider the benefits and drawbacks before deciding if you want to adopt it.</p>\n\n<p>Now, let’s see what Vogen is about.</p>\n\n<h2 id=\"what-is-vogen\">What is Vogen?</h2>\n\n<p><a href=\"https://stevedunn.github.io/Vogen/overview.html\">Vogen</a> is a NuGet library that utilizes source generators to generate value objects, taking much of the ceremony out of model creation. The library creates factory methods, comparisons, validation, and serializers on partial <code>struct</code> and <code>class</code> implementations.</p>\n\n<p>Let’s start by adding Vogen to a .NET console application.</p>\n\n<pre><code class=\"language-xml\">&lt;PackageReference Include=\"Vogen\" Version=\"7.0.0-beta.1\" /&gt;\n</code></pre>\n\n<p>In my example, I’ll create a <code>PacMan</code> class that requires a <code>FavoriteGhost</code> property to have a valid value of <code>Ghost</code>.</p>\n\n<pre><code class=\"language-csharp\">public class PacMan\n{\n    public Ghost FavoriteGhost { get; set; }\n\n    public override string ToString()\n    {\n        return $\"Pac Man's favorite ghost is {FavoriteGhost}.\";\n    }\n}\n</code></pre>\n\n<p>Our value object will be <code>Ghost</code>; everyone knows that the ghosts that haunt Pac-Man include Blinky, Pinky, Inky, and Clyde. Let’s start with the unconstrained approach using Vogen.</p>\n\n<pre><code class=\"language-csharp\">[ValueObject&lt;string&gt;]\n[Instance(\"Blinky\", \"Blinky\")]\n[Instance(\"Pinky\", \"Pinky\")]\n[Instance(\"Inky\", \"Inky\")]\n[Instance(\"Clyde\", \"Clyde\")]\npublic partial struct Ghost;\n</code></pre>\n\n<p>After the source generators have run, you’ll now have <code>public static readonly</code> instances of each ghost on the <code>Ghost</code> struct, allowing our code to run and set the <code>FavoriteGhost</code> property on our <code>pacMan</code> instance.</p>\n\n<p>You can create any <code>Ghost</code> you like using the <code>From</code> method on the struct.</p>\n\n<pre><code class=\"language-csharp\">var aNewGhost = Ghost.From(\"Khalid\");\n</code></pre>\n\n<p>If your value objects are unconstrained, this might be a good time to stop, but we want to limit our <code>Ghost</code> values. Let’s rework our <code>Ghost</code> struct.</p>\n\n<pre><code class=\"language-csharp\">[ValueObject&lt;string&gt;]\npublic partial struct Ghost\n{\n    public static readonly Ghost Blinky = new(\"Blinky\");\n    public static readonly Ghost Pinky = new(\"Pinky\");\n    public static readonly Ghost Inky = new(\"Inky\");\n    public static readonly Ghost Clyde = new(\"Clyde\");\n\n    public static IReadOnlyCollection&lt;Ghost&gt; All { get; }\n        = new[] { Blinky, Pinky, Inky, Clyde }.AsReadOnly();\n\n    private static Validation Validate(string input) =&gt;\n        All.Any(g =&gt; g.Equals(input))\n            ? Validation.Ok\n            : Validation.Invalid($\"Ghost must be {string.Join(\", \", All)}\");\n}\n</code></pre>\n\n<p>With some extra code, we can now validate that all values used to create a <code>Ghost</code> fit within a defined set of values.</p>\n\n<pre><code class=\"language-csharp\">// will throw an exception\nvar aNewGhost = Ghost.From(\"Khalid\");\n// will pass\nvar aKnownGhost = Ghost.From(\"Blinky\");\n</code></pre>\n\n<p>Let’s see the use of Vogen in a complete C# sample.</p>\n\n<pre><code class=\"language-csharp\">using Vogen;\n\nvar pacMan = new PacMan\n{\n    FavoriteGhost = Ghost.Blinky\n};\n\nforeach (var ghost in Ghost.All)\n{\n    Console.WriteLine(ghost);\n}\n\nConsole.WriteLine(pacMan);\n\n[ValueObject&lt;string&gt;]\npublic partial struct Ghost\n{\n    public static readonly Ghost Blinky = new(\"Blinky\");\n    public static readonly Ghost Pinky = new(\"Pinky\");\n    public static readonly Ghost Inky = new(\"Inky\");\n    public static readonly Ghost Clyde = new(\"Clyde\");\n\n    public static IReadOnlyCollection&lt;Ghost&gt; All { get; }\n        = new[] { Blinky, Pinky, Inky, Clyde }.AsReadOnly();\n\n    private static Validation Validate(string input) =&gt;\n        All.Any(g =&gt; g.Equals(input))\n            ? Validation.Ok\n            : Validation.Invalid($\"Ghost must be {string.Join(\", \", All)}\");\n}\n\npublic class PacMan\n{\n    public Ghost FavoriteGhost { get; set; }\n\n    public override string ToString()\n    {\n        return $\"Pac Man's favorite ghost is {FavoriteGhost}.\";\n    }\n}\n</code></pre>\n\n<h2 id=\"conclusion\">Conclusion</h2>\n\n<p>Using value objects is an efficient way to constrain inputs and outputs logically. It helps you reflect logical constraints in the codebase and offers readability levels that could be lost using primitive types. With the addition of Vogen, you can remove boilerplate code and get straight to using value objects, with the benefits of quickly accessing the underlying primitive value through explicit and implicit means.</p>\n\n<p>I think the next step for folks is likely to take an existing part of a codebase and see if converting it to use value objects improves readability and correctness.</p>\n\n<p>I hope you enjoyed this post. As always, thanks for reading and sharing my posts.</p>\n\n",
      "Content": null,
      "Language": null,
      "Link": "https://khalidabuhakmeh.com/vogen-and-value-objects-with-csharp-and-dotnet"
    },
    {
      "FeedId": "https://khalidabuhakmeh.com/feed.xml",
      "ItemId": "https://khalidabuhakmeh.com/initialize-aspnet-core-taghelpers-with-shared-data",
      "Title": "Initialize ASP.NET Core TagHelpers with Shared Data",
      "PublishDate": "2025-01-14T00:00:00+00:00",
      "Summary": "<p>ASP.NET Core has a superpower that few other frameworks have, largely thanks to the Razor engine. Razor syntax is a mix of HTML and C#, and most Razor syntax implementations will skew heavily towards HTML over C#. However, C# syntax offers the most value in control flow mechanics using if, for, and switch statements. Razor’s power is that\n<em>even\nHTML</em> syntax is processed by C# and converted into compiled artifacts. This gives Razor a unique opportunity to do some amazing tricks.</p>\n\n<p>In this post, we’ll see how to use the TagHelpers infrastructure to initialize all tag helper usage across your application and inject necessary shared data.</p>\n\n<!--more-->\n\n<h2 id=\"the-taghelper-in-question\">The TagHelper In Question</h2>\n\n<p>Let’s start by writing a simple tag helper that will replace the contents of a <code>span</code> tag when a\n<code>text</code> attribute is set.</p>\n\n<pre><code class=\"language-csharp\">using Microsoft.AspNetCore.Mvc.Razor;\nusing Microsoft.AspNetCore.Mvc.Rendering;\nusing Microsoft.AspNetCore.Razor.TagHelpers;\n\nnamespace WebApplication2.Models;\n\n[HtmlTargetElement(\"span\")]\npublic class MyTagHelper: TagHelper\n{\n    [HtmlAttributeName(\"text\")]\n    public string Text { get; set; } = \"\";\n\n    [HtmlAttributeNotBound] \n    public string Version { get; set; } = \"\";\n    \n    public override Task ProcessAsync(TagHelperContext context, TagHelperOutput output)\n    {\n        output.Content.SetHtmlContent(Text);\n        output.Attributes.Add(\"data-version\", Version);\n        return Task.CompletedTask;\n    }\n}\n</code></pre>\n\n<p>Usage of this tag helper is straightforward. In a Razor view, add the following tag.</p>\n\n<pre><code class=\"language-html\">&lt;span class=\"fs-1 d-block\" text=\"Hello, World!\"&gt;...&lt;/span&gt;\n&lt;span class=\"fs-1 d-block\"&gt;&lt;/span&gt; \n</code></pre>\n\n<p>As you may have noticed in the <code>MyTagHelper</code> implementation, there is another property of\n<code>Version</code>, which I decorated with the\n<code>HtmlAttributeNotBound</code> attribute. This value will be initialized with the tag helper initialization infrastructure.</p>\n\n<h2 id=\"taghelper-initializers\">TagHelper Initializers</h2>\n\n<p>We’ll implement the <code>ITagHelperInitializer</code> generic interface, which has an\n<code>Initialize</code> method that takes an instance of a tag helper and a <code>ViewContext</code>.</p>\n\n<pre><code class=\"language-csharp\">public class MyTagHelperInitializer(string defaultText, string version) \n    : ITagHelperInitializer&lt;MyTagHelper&gt;\n{\n    public void Initialize(MyTagHelper helper, ViewContext context)\n    {\n        helper.Text = defaultText;\n        helper.Version = version;\n    }\n}\n</code></pre>\n\n<p>Here, the data passed into our implementation can be used to hydrate all tag helpers of\n<code>MyTagHelper</code>. This is awesome for multiple reasons.</p>\n\n<ul>\n  <li>Expensive data can be calculated once and set globally, reducing resource utilization and speeding up page rendering.</li>\n  <li>We have access to the\n<code>ViewContext</code>, so we can modify and enhance all request/response lifecycle elements if necessary.</li>\n  <li>We have direct access to the tag helper, so the initialization code is as straightforward as possible.</li>\n  <li>The <code>ViewContext</code> gives us access to\n<code>HttpContext</code>, so we can also handle request-specific values from cookies, user information, etc.</li>\n  <li>Also, we can request other services that are already registered in our services collection.</li>\n</ul>\n\n<p>How do we use this initializer? In\n<code>Program</code>, add the following line to register our initializer with our services collection.</p>\n\n<pre><code class=\"language-csharp\">builder.Services.AddSingleton&lt;\n    ITagHelperInitializer&lt;MyTagHelper&gt;\n&gt;(new MyTagHelperInitializer(\"Default Text\", \"1.0.0\"));\n</code></pre>\n\n<p>In our case, we’re passing in the initial values. However, this type could also take in application configuration and read values from the\n<code>IConfiguration</code> implementation of an ASP.NET Core application. It’s important to note that this type is registered as a\n**Singleton\n**, which means any data passed to it in the constructor is the data for the rest of the application’s lifetime.</p>\n\n<p>When we run our application, the tag helper will result in the following HTML.</p>\n\n<pre><code class=\"language-html\">&lt;span class=\"fs-1 d-block\" data-version=\"1.0.0\"&gt;Hello, World!&lt;/span&gt;\n&lt;span class=\"fs-1 d-block\" data-version=\"1.0.0\"&gt;Default Text&lt;/span&gt;\n</code></pre>\n\n<p>Wow, so easy!</p>\n\n<h2 id=\"conclusion\">Conclusion</h2>\n\n<p>Part of building web experiences is handling requests efficiently and returning responses as quickly as possible. With tag helpers, you can help create more buffer space in your performance budgets by reducing and isolating the work needed to process data for HTML tags. Additionally, this technique of global initialization might also be helpful for test-driven UI tests, as attributes and their data can be added or removed depending on build flags. This approach is exciting, and I hope you try it in your applications.</p>\n\n<p>As always, thanks for reading and sharing my blog posts. Cheers.</p>\n",
      "Content": null,
      "Language": null,
      "Link": "https://khalidabuhakmeh.com/initialize-aspnet-core-taghelpers-with-shared-data"
    },
    {
      "FeedId": "https://khalidabuhakmeh.com/feed.xml",
      "ItemId": "https://khalidabuhakmeh.com/writing-a-string-numeric-comparer-with-dotnet-9",
      "Title": "Writing a String Numeric Comparer with .NET 9",
      "PublishDate": "2025-01-07T00:00:00+00:00",
      "Summary": "<p>I recently saw that .NET 10 adds a numeric comparer, allowing you to sort string elements that may contain numeric values at the end of a string. Think movie sequels or number versions of an operating system. To my surprise, I could not believe it wasn’t already included in .NET, but then I sat down to try to write my own, and I now “get it”. The edge cases alone can drive you mad. Numeric ordering is subjective. Should the numbers come before Roman numerals? Should Roman numerals be parsed as numbers? What about decimals?</p>\n\n<p>Anyway, I’ve added my numeric comparer implementation in this post, which uses some of the latest .NET features. Enjoy!</p>\n\n<!--more-->\n\n<h2 id=\"a-list-of-numbered-things\">A List of Numbered Things</h2>\n\n<p>A number at the end of a text is typical for movies, books, video games, and products. These numbers denote a newer and better iteration of an item. For example, I have a combination of movies, Windows versions, and some decimal values.</p>\n\n<pre><code class=\"language-csharp\">var numberedThings = new List&lt;string&gt;\n{\n    \"Godfather\", \"Godfather 3\", \"Scream\",\n    \"Scream 2\", \"Scream 3\", \"Scream 1\",\n    \"Windows 10\", \"Windows 7\",\n    \"Windows 11\", \"Rocky 5\",\n    \"Rocky 2\", \"Rocky 4\", \"Rocky 3\", \"Rock\",\n    \"1.2\", \"1.3\", \"1.1\", \"Rocky\", \"Windows XP\", \n    \"Godfather 2\", \"1.11\", \"1.10\", \"10.0\", \"1.0\"\n};\n\nvar numericOrderer = new NumericOrderer();\nvar sorted = numberedThings\n    .OrderBy(x =&gt; x, numericOrderer)\n    .ToList();\n\nforeach (var item in sorted)\n{\n    Console.WriteLine(item);\n}\n</code></pre>\n\n<p>The goal is to have the output result in alphanumeric ordering. For example, <code>Godfather</code> should come before\n<code>Godfather 2</code>. Also, when it comes to strings made of numbers, I want each part of a value to be treated as a whole number. For example,\n<code>1.1</code>, <code>1.10</code>, and <code>1.11</code> would follow that order.</p>\n\n<p>We expect the following output from the previous code based on the input.</p>\n\n<pre><code class=\"language-text\">1.0\n1.1\n1.2\n1.3\n1.10\n1.11\n10.0\nGodfather\nGodfather 2\nGodfather 3\nRock\nRocky\nRocky 2\nRocky 3\nRocky 4\nRocky 5\nScream\nScream 1\nScream 2\nScream 3\nWindows 7\nWindows 10\nWindows 11\nWindows XP\n</code></pre>\n\n<p>Let’s look at my implementation.</p>\n\n<h2 id=\"writing-a-numericorderer-with-spans\">Writing a NumericOrderer with Spans</h2>\n\n<p>Here is my <code>NumericOrderer</code> based on the collection of data previously mentioned.</p>\n\n<pre><code class=\"language-csharp\">public sealed class NumericOrderer : IComparer&lt;string&gt;\n{\n    public int Compare(string? x, string? y)\n    {\n        if (x == null &amp;&amp; y == null) return 0;\n        if (x == null) return -1;\n        if (y == null) return 1;\n\n        var xSpan = x.AsSpan();\n        var ySpan = y.AsSpan();\n        \n        var commonPrefixLength = xSpan.CommonPrefixLength(ySpan);\n\n        while (commonPrefixLength &gt; 0)\n        {\n            xSpan = xSpan[commonPrefixLength..];\n            ySpan = ySpan[commonPrefixLength..];\n            commonPrefixLength = xSpan.CommonPrefixLength(ySpan);\n        }\n        \n        if (int.TryParse(xSpan, out var xNumber) &amp;&amp; \n            int.TryParse(ySpan, out var yNumber))\n        {\n            return xNumber.CompareTo(yNumber);\n        }\n\n        return xSpan.CompareTo(ySpan, StringComparison.Ordinal);\n    }\n}\n</code></pre>\n\n<p>There are three configuration points you should consider in this implementation.</p>\n\n<ul>\n  <li><code>CommonPrefixLength</code> can also take a <code>Comparer</code> argument, which might help ignore casing.</li>\n  <li>The <code>CompareTo</code> method currently takes a\n<code>StringComparison.Ordinal</code> value, which is case sensitive. I suggest changing this based on your needs.</li>\n  <li>The use of <code>int.TryParse</code> compares whole numbers. If your values contain decimals, then you may want to try\n<code>double.TryParse</code>.</li>\n</ul>\n\n<p>Are there edge cases here? Very likely, but when ordering anything with “opinions”, you’ll likely have to tweak it to your liking. As I mentioned previously, Roman numerals are commonly used in place of Arabic numerals, so you may want to tweak this to support those, or you may want\n<code>Windows XP</code> to appear before <code>Windows 11</code> in a list. You’re the sorting wizard in your magical journey.</p>\n\n<h2 id=\"conclusion\">Conclusion</h2>\n\n<p>This exercise made me realize that building a general-purpose numeric orderer is likely a herculean task. Instead, I’d probably implement a sorter based on your needs for that specific use case. Also, I learned that the\n<code>Span</code> APIs are very good and capable of breaking apart strings without creating new instances in memory. Finally, while this comparison works well for a single-point dataset, you’re likely dealing with more complex data models with other sortable fields that can be more accurately sorted (think numbers and dates). I’d likely lean more on predictably sortable values in a production setting than leaving it all to a general-purpose numeric comparer.</p>\n\n<p>At the very least, I hope this implementation gives you a starting point for writing and tweaking your implementation. As always, thanks for reading, and cheers.</p>\n",
      "Content": null,
      "Language": null,
      "Link": "https://khalidabuhakmeh.com/writing-a-string-numeric-comparer-with-dotnet-9"
    },
    {
      "FeedId": "https://khalidabuhakmeh.com/feed.xml",
      "ItemId": "https://khalidabuhakmeh.com/great-dotnet-documentation-with-astro-starlight-and-markdownsnippets",
      "Title": "Great .NET Documentation with Astro, Starlight, and MarkdownSnippets",
      "PublishDate": "2024-12-31T00:00:00+00:00",
      "Summary": "<p>The hallmark of every great project is equally great documentation, but it can be increasingly difficult for developers to keep both in sync. Luckily, I’ve been experimenting again with a combination of Starlight and MarkdownSnippets to make maintaining code samples and documentation much more convenient.</p>\n\n<p>In this post, we’ll see how to set up your repository so that MarkdownSnippets pulls samples from your codebase and updates your Starlight documentation.</p>\n\n<!--more-->\n\n<h2 id=\"directory-structure-and-tools\">Directory Structure and Tools</h2>\n\n<p>To get started, let’s set up our repository for success. Let’s begin with folders. We’ll want to create the following folders at the root of a newly created directory.</p>\n\n<pre><code>- docs\n- src\n</code></pre>\n\n<p>The <code>docs</code> directory will hold our documentation powered by Starlight, and the\n<code>src</code> directory will have all our .NET code.</p>\n\n<p>We’ll want to run the following dotnet commands within the same directory.</p>\n\n<pre><code class=\"language-bash\">dotnet new tool-manifest\n</code></pre>\n\n<p>Next, let’s install the MarkdownSnippets tool.</p>\n\n<pre><code class=\"language-bash\">dotnet tool install MarkdownSnippets.Tool\n</code></pre>\n\n<p>Finally, let’s create the MarkdownSnippets configuration file of\n<code>mdsnippets.json</code>, which will tune our snippet generation to work with Starlight.</p>\n\n<pre><code class=\"language-json\">{\n  \"$schema\": \"https://raw.githubusercontent.com/SimonCropp/MarkdownSnippets/refs/heads/main/schema.json\",\n  \"Convention\": \"InPlaceOverwrite\",\n  \"WriteHeader\": false,\n  \"ReadOnly\": false,\n  \"LinkFormat\": \"None\",\n  \"OmitSnippetLinks\": true\n}\n</code></pre>\n\n<p>Following the steps correctly, you’ll have the following files and folders.</p>\n\n<pre><code>- docs\n- src\n- .config\n- mdsnippets.json\n</code></pre>\n\n<p>Great! Let’s write some .NET code in our <code>src</code> directory now.</p>\n\n<h2 id=\"our-net-code-samples\">Our .NET Code Samples</h2>\n\n<p>Change to the <code>src</code> directory and create a new\n<code>Console</code> application. Any will do. What’s important is using the MarkdownSnippets convention to develop a block of code to be extracted. Here’s the one I’m using in\n<code>Program.cs</code>.</p>\n\n<pre><code class=\"language-csharp\">// begin-snippet: App:HelloWorld\n// Program.cs\nConsole.WriteLine(\"Hello, Again!\");\n// end-snippet\n</code></pre>\n\n<p>That’s it! Write and decorate as many code samples as you’ll use in the next section.</p>\n\n<h2 id=\"our-starlight-documentation\">Our Starlight Documentation</h2>\n\n<p>Now, let’s move into the <code>docs</code> directory and run the following command. Note you’ll need both Node and Yarn installed.</p>\n\n<pre><code>yarn create astro --template starlight\n</code></pre>\n\n<p>From here, follow the Astro wizard to create a new documentation site. From the root, your directory structure should look similar to the following.</p>\n\n<pre><code class=\"language-text\">- docs\n\t- .astro\n\t- .vscode\n\t- .yarn\n\t- src\n\t- public\n\t- astro.config.mjs\n\t- package.json\n\t- ...\n- src\n\t- App\n\t\t- bin\n\t\t- obj\n\t\t- App.csproj\n\t\t- Program.cs\n- mdsnippets.json\n</code></pre>\n\n<p>Now, let’s update our <code>package.json</code> to scan our C# project, find snippets, and update our documentation.</p>\n\n<pre><code class=\"language-json\">{\n  \"type\": \"module\",\n  \"version\": \"0.0.1\",\n  \"scripts\": {\n    \"mdsnippets\": \"cd .. &amp;&amp; dotnet mdsnippets\",\n    \"dev\": \"npm run mdsnippets &amp;&amp; astro dev\",\n    \"start\": \"npm run dev\",\n    \"build\": \"npm run mdsnippets &amp;&amp; astro build\"\n  },\n  \"dependencies\": {\n    \"@astrojs/starlight\": \"^0.29.3\",\n    \"astro\": \"^4.16.10\",\n    \"sharp\": \"^0.32.5\"\n  }\n}\n</code></pre>\n\n<p>Feel free to add or remove any additional scripts or dependencies for your particular use case. This is the bare minimum for this post.</p>\n\n<p>Now, let’s write some documentation. Find the <code>example.md</code> file under\n<code>docs/src/content/docs/guides/</code> and write the following markdown.</p>\n\n<pre><code class=\"language-markdown\">---\ntitle: Hello, World!\ndescription: Creating your first .NET Console Application\n---\n\n## Getting Started\n\nYour first .NET application will be a console application, or what the cool folks like to call it, an app. Create a new project using the\n`dotnet` CLI command `new`.\n\n```bash title=\"Terminal\"\ndotnet new console -o HelloWorld &amp;&amp; cd ./HelloWorld\n```\n\nThen, add the following code in the `Program.cs` file.\n\nsnippet: App:HelloWorld\n\nThen run the app by using the following command.\n\n```bash title=\"Terminal\"\ndotnet run\n```\n\nCongratulations!\n</code></pre>\n\n<p>Now, run the <code>dev</code> command from the root directory. MarkdownSnippets will transform the\n<code>snippet: App:HelloWorld</code> in your Markdown to the following.</p>\n\n<pre><code class=\"language-markdown\">---\ntitle: Hello, World!\ndescription: Creating your first .NET Console Application\n---\n\n## Getting Started\n\nYour first .NET application will be a console application, or what the cool folks like to call it, an app. Create a new project using the\n`dotnet` CLI command `new`.\n\n```bash title=\"Terminal\"\ndotnet new console -o HelloWorld &amp;&amp; cd ./HelloWorld\n```\n\nThen, add the following code in the `Program.cs` file.\n\n&lt;!-- snippet: App:HelloWorld --&gt;\n\n```cs\n// Program.cs\nConsole.WriteLine(\"Hello, Again!\");\n```\n\n&lt;!-- endSnippet --&gt;\n\nThen run the app by using the following command.\n\n```bash title=\"Terminal\"\ndotnet run\n```\n\nCongratulations!\n</code></pre>\n\n<p>You can change the code in <code>Program.cs</code> and rerun the command to see the documentation update.</p>\n\n<h2 id=\"conclusion\">Conclusion</h2>\n\n<p>If you’re working on code-heavy documentation where samples speak louder than words, then combining MarkdownSnippets with Starlight is a great pairing. You’ll want to develop a good naming convention to make finding and altering samples easier, after which you’ll be sure that any code samples are valid, compiled, and run. After all, as developers, we all want to get it right the first time.</p>\n\n<p>As always, thanks for reading, and cheers.</p>\n\n",
      "Content": null,
      "Language": null,
      "Link": "https://khalidabuhakmeh.com/great-dotnet-documentation-with-astro-starlight-and-markdownsnippets"
    },
    {
      "FeedId": "https://khalidabuhakmeh.com/feed.xml",
      "ItemId": "https://khalidabuhakmeh.com/alpinejs-polling-aspnet-core-apis-for-updates",
      "Title": "Alpine.Js Polling ASP.NET Core APIs For Updates",
      "PublishDate": "2024-12-24T00:00:00+00:00",
      "Summary": "<p>Building dynamic JavaScript experiences has come a long in the 20 years since I first started software development, but updating the document object model (DOM) can still be a real pain in the butt. That’s why we’ve seen single-page application frameworks explode in use. While JavaScript provides a very capable API when interacting with the DOM, it can be verbose.</p>\n\n<p>In this post, we’ll see how to use the Alpine.Js library’s declarative attribute approach to create a real-time updating UI with minimal JavaScript and no direct use of the DOM APIs.</p>\n\n<!--more-->\n\n<h2 id=\"the-strength-of-alpinejs\">The Strength of Alpine.js</h2>\n\n<p><a href=\"https://alpinejs.dev/\">Alpine.js</a> is a lightweight JavaScript framework that allows you to compose behavior directly in your HTML markup. The library consists of 15 attributes, six properties, and two methods. While its surface API is small, what it offers is, as the site says,\n<strong>“powerful as hell.”</strong></p>\n\n<p>The strength of Alpine.js comes from its data model, which uses reactivity to detect changes to data and update the UI elements accordingly. Reactivity means you can update values naturally without keeping track of a dependency graph. Let’s take a look at a quick example.</p>\n\n<pre><code class=\"language-html\">\n&lt;div x-data=\"{ count: 0 }\"&gt;\n    &lt;button x-on:click=\"count++\"&gt;Increment&lt;/button&gt;\n\n    &lt;span x-text=\"count\"&gt;&lt;/span&gt;\n&lt;/div&gt;\n</code></pre>\n\n<p>In this example, the <code>count</code> value is reactive. When you click the button, the value increments. Since the\n<code>count</code> value is also used in the <code>span</code> element, it is updated at the time of the change. So easy!</p>\n\n<p>Values can also be accessed from JavaScript. With a few modifications, we can use the\n<code>data</code> method to create a shared context for our counter.</p>\n\n<pre><code class=\"language-html\">\n&lt;div x-data=\"count\"&gt;\n    &lt;button x-on:click=\"increment()\"&gt;Increment&lt;/button&gt;\n    &lt;span x-text=\"value\"&gt;&lt;/span&gt;\n&lt;/div&gt;\n\n&lt;script&gt;\n    document.addEventListener('alpine:init', () =&gt; {\n\n        Alpine.data('count', () =&gt; ({\n            increment() {\n                this.value++;\n            },\n            value: 0\n        }));\n\n    });\n&lt;/script&gt;\n</code></pre>\n\n<p>Note that we’ve encapsulated the counter logic in <code>increment</code> and changed the\n<code>value</code> field on each click. There’s no need to do any special syntax to access the\n<code>value</code> field. We can use it as we would a plain-old JavaScript object.</p>\n\n<p>Now that we understand more about reactivity related to Alpine.js, let’s write a more complex sample that polls our ASP.NET Core application for updated data.</p>\n\n<h2 id=\"aspnet-core-and-alpinejs\">ASP.NET Core and Alpine.Js</h2>\n\n<p>Let’s start by creating an API endpoint that will return weather data. First, let’s look at our data model.</p>\n\n<pre><code class=\"language-csharp\">public class Weather\n{\n    public string Location { get; set; } = \"\";\n    public string Description { get; set; } = \"\";\n    public string Temperature { get; set; } = \"\";\n\n    public static ReadOnlySpan&lt;string&gt; Descriptions =&gt;\n        new([\"Sunny\", \"Cloudy\", \"Rainy\", \"Snowy\"]);\n\n    public static ReadOnlySpan&lt;string&gt; Locations =&gt;\n        new([\"Mountain\", \"Valley\", \"Desert\", \"Forest\"]);\n}\n</code></pre>\n\n<p>Next, let’s add a new API endpoint to our application in <code>Program</code>.</p>\n\n<pre><code class=\"language-csharp\">using MountainWeather.Models;\n\nvar builder = WebApplication.CreateBuilder(args);\nvar app = builder.Build();\n\napp.MapGet(\"/weather\", () =&gt;\n{\n    return Results.Json(\n        Enumerable\n            .Range(1, 10)\n            .Select(i =&gt; new Weather\n            {\n                Location = $\"{Random.Shared.GetItems(Weather.Locations, 1)[0]} #{i}\",\n                Description = $\"{Random.Shared.GetItems(Weather.Descriptions, 1)[0]}\",\n                Temperature = $\"{Random.Shared.Next(32, 100)}℉\"\n            })\n            .ToList()\n    );\n});\n\napp.UseDefaultFiles();\napp.UseStaticFiles();\n\napp.Run();\n</code></pre>\n\n<p>Next, let’s write our HTML and JavaScript. This is an <code>index.html</code> file placed in the <code>wwwroot</code> folder.</p>\n\n<pre><code class=\"language-html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;title&gt;Weather&lt;/title&gt;\n    &lt;link rel=\"stylesheet\" href=\"https://unpkg.com/@picocss/pico@latest/css/pico.min.css\"&gt;\n    &lt;script src=\"https://cdn.jsdelivr.net/npm/alpinejs@3.x.x/dist/cdn.min.js\" defer&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;main class=\"container-fluid\"&gt;\n    &lt;table class=\"table table-striped\" x-data=\"weather\"&gt;\n        &lt;thead&gt;\n        &lt;tr&gt;\n            &lt;th&gt;Location&lt;/th&gt;\n            &lt;th&gt;Description&lt;/th&gt;\n            &lt;th&gt;Temperature&lt;/th&gt;\n        &lt;/tr&gt;\n        &lt;/thead&gt;\n        &lt;tbody&gt;\n        &lt;tr x-show=\"locations.length === 0\"&gt;\n            &lt;td colspan=\"3\"&gt;\n                0 Locations Found.\n            &lt;/td&gt;\n        &lt;/tr&gt;\n        &lt;template x-for=\"l in locations\"&gt;\n            &lt;tr&gt;\n                &lt;td x-text=\"l.location\"&gt;&lt;/td&gt;\n                &lt;td x-text=\"l.description\"&gt;&lt;/td&gt;\n                &lt;td x-text=\"l.temperature\"&gt;&lt;/td&gt;\n            &lt;/tr&gt;\n        &lt;/template&gt;\n        &lt;/tbody&gt;\n        &lt;tfoot&gt;\n        &lt;tr&gt;\n            &lt;td colspan=\"3\" x-text=\"updated\"&gt;&lt;/td&gt;\n        &lt;/tr&gt;\n        &lt;/tfoot&gt;\n    &lt;/table&gt;\n&lt;/main&gt;\n&lt;script&gt;\n    async function getWeather() {\n        let result = {};\n        const response = await fetch('/weather');\n        result.locations = await response.json();\n        result.updated = new Date();\n        return result;\n    }\n\n    document.addEventListener('alpine:init', () =&gt; {\n        Alpine.data('weather', () =&gt; ({\n            async init() {\n                this.timer = setInterval(async () =&gt; {\n                    const result = await getWeather();\n                    this.locations = result.locations;\n                    this.updated = result.updated;\n                }, 3000);\n\n                const result = await getWeather();\n                this.locations = result.locations;\n                this.updated = result.updated;\n            },\n            destroy: () =&gt; {\n                clearInterval(this.timer);\n            },\n            locations: [],\n            updated: \"n/a\",\n            timer: null\n        }));\n    });\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\n<p>Let me explain what’s happening in this HTML, starting with our <code>weather</code> data model. We use the\n<code>Alpine.data</code> method to create a data context that our HTML can use with the\n<code>x-data</code> attribute. This data model has fields for <code>locations</code>, <code>updated</code>, and\n<code>timer</code>. The timer fetches data from our API every three seconds and changes the values. When the values change, the UI changes as well.</p>\n\n<p>Let’s look at HTML binding because Alpine.js allows developers to employ a neat trick: the\n<code>template</code> HTML tag. By default, the\n<code>template</code> tag takes the user-defined contents and appends the hydrated version into the DOM as the following elements. In this sample, we get rows matching the values from the ASP.NET Core API. Now, running the sample, we get a table that updates its values every three seconds.</p>\n\n<p>Note that JavaScript developers using intervals should call clearInterval if the DOM element can be removed before the user navigates away from the page. This ensures there will be no memory leaks. You can do this using the\n<code>destroy</code> method in your data definition.</p>\n\n<h2 id=\"conclusion\">Conclusion</h2>\n\n<p>There you go—a simple, updating UI with minimal JavaScript and an easy-to-understand and maintainable codebase. I like Alpine.js and what it offers. In most cases, a little bit of a user interface can go a long way. I hope you enjoyed this post, and thank you for reading. Cheers.</p>\n",
      "Content": null,
      "Language": null,
      "Link": "https://khalidabuhakmeh.com/alpinejs-polling-aspnet-core-apis-for-updates"
    },
    {
      "FeedId": "https://khalidabuhakmeh.com/feed.xml",
      "ItemId": "https://khalidabuhakmeh.com/building-a-persistent-counter-with-alpinejs",
      "Title": "Building a Persistent Counter with Alpine.Js",
      "PublishDate": "2024-12-17T00:00:00+00:00",
      "Summary": "<p>If you read this blog, you likely know I predominantly work with .NET technologies and use web technologies such as HTML, CSS, and JavaScript. The web is an excellent space for new and exciting ways to solve age-old problems. I recently thought about the Blazor “Counter” example that ships with the Blazor Wasm template and how I’ve solved the same problem using Htmx. The issue with Htmx is that it still requires a backend to manage the state; in the case of a counter, this state is the current count. What if you wanted to build a self-contained client-side experience?</p>\n\n<p><a href=\"https://alpinejs.dev/\">Alpine.js</a> is a declarative library aimed at helping developers build client-side interactivity using HTML attributes on DOM elements. This post will show you how to create the same Blazor Counter example with very little JavaScript and network payloads.</p>\n\n<!--more-->\n\n<h2 id=\"installing-alpinejs\">Installing Alpine.js</h2>\n\n<p>Since Alpine.js is a JavaScript library, you only need to reference the necessary files in your HTML pages. In an ASP.NET Core application, that’s typically in your layout files.</p>\n\n<p>Add the following <code>script</code> tag to the <code>head</code> portion of your page.</p>\n\n<pre><code class=\"language-html\">&lt;!-- Alpine Core --&gt;  \n&lt;script defer src=\"https://cdn.jsdelivr.net/npm/alpinejs@3.x.x/dist/cdn.min.js\"&gt;&lt;/script&gt;\n</code></pre>\n\n<p>That’s it. You can also use NPM to bundle the dependency into an existing build process, but we’ll leave that out of this post for now.</p>\n\n<h2 id=\"building-an-inline-counter-with-alpine\">Building an inline Counter with Alpine</h2>\n\n<p>Alpine uses attributes, and one of the most important attributes is the <code>x-data</code> attribute. The <code>x-data</code> attribute sets up the context for our current scope. In most cases, that scope is the DOM element you decorate with the attribute.</p>\n\n<pre><code class=\"language-html\">&lt;main class=\"container\" x-data=\"{ count : 0 }\"&gt;\n    &lt;article class=\"card\"&gt;\n        &lt;header&gt;\n            &lt;h3&gt;Counter Value&lt;/h3&gt;\n        &lt;/header&gt;\n        &lt;section&gt;\n            &lt;p x-text=\"count\"&gt;&lt;/p&gt;\n        &lt;/section&gt;\n    &lt;/article&gt;\n\n    &lt;button type=\"button\" x-on:click=\"count++\"&gt;\n        Increment\n    &lt;/button&gt;\n    &lt;button type=\"button\" x-on:click=\"count = 0\"&gt;\n        Reset\n    &lt;/button&gt;\n&lt;/main&gt;\n</code></pre>\n\n<p>Wow, that’s easy, right? So, how do we persist this information on reloads? Local storage of course!</p>\n\n<h2 id=\"making-the-inline-counter-persistent\">Making the inline counter persistent</h2>\n\n<p>Alpine.js has a persistence plugin, which we’ll need to install. While you can write the local storage code, this plugin makes it much nicer to use stored values and update them as users make changes.</p>\n\n<p>Modify the reference to Alpine.js on the page to include these two <code>script</code> tags.</p>\n\n<pre><code class=\"language-html\">&lt;!-- Alpine Plugins --&gt;  \n&lt;script defer src=\"https://cdn.jsdelivr.net/npm/@alpinejs/persist@3.x.x/dist/cdn.min.js\"&gt;&lt;/script&gt;  \n&lt;!-- Alpine Core --&gt;  \n&lt;script defer src=\"https://cdn.jsdelivr.net/npm/alpinejs@3.x.x/dist/cdn.min.js\"&gt;&lt;/script&gt;\n</code></pre>\n\n<p>Cool, we’re ready to update the HTML to persist the value across page refreshes.</p>\n\n<pre><code class=\"language-html\">&lt;main class=\"container\" x-data=\"{ count : $persist(0) }\"&gt;\n    &lt;article class=\"card\"&gt;\n        &lt;header&gt;\n            &lt;h3&gt;Counter Value&lt;/h3&gt;\n        &lt;/header&gt;\n        &lt;section&gt;\n            &lt;p x-text=\"count\"&gt;&lt;/p&gt;\n        &lt;/section&gt;\n    &lt;/article&gt;\n\n    &lt;button type=\"button\" x-on:click=\"count++\"&gt;\n        Increment\n    &lt;/button&gt;\n    &lt;button type=\"button\" x-on:click=\"count = 0\"&gt;\n        Reset\n    &lt;/button&gt;\n&lt;/main&gt;\n</code></pre>\n\n<p>Refreshing the page now maintains the previous count. What if we want to use that value in other page parts? In other words, what if we want to keep a globally accessible value? That’s where Alpine.js stores come in.</p>\n\n<h2 id=\"persisting-state-in-an-alpine-store\">Persisting state in an Alpine Store</h2>\n\n<p>Alpine.js allows you to create a global state using a <strong>store</strong>. Stores are created when Alpine.js initializes the page, allowing you to write more complex logic using JavaScript. Let’s modify our page to use a <code>counter</code> store with persistent values and methods.</p>\n\n<pre><code class=\"language-html\">&lt;body&gt;\n    &lt;main class=\"container\" x-data&gt;\n        &lt;article class=\"card\"&gt;\n            &lt;header&gt;\n                &lt;h3&gt;Counter Value&lt;/h3&gt;\n            &lt;/header&gt;\n            &lt;section&gt;\n                &lt;p x-text=\"$store.counter.value\"&gt;&lt;/p&gt;\n            &lt;/section&gt;\n        &lt;/article&gt;\n        \n        &lt;button type=\"button\" x-on:click=\"$store.counter.increment()\"&gt;\n            Increment\n        &lt;/button&gt;\n        &lt;button type=\"button\" x-on:click=\"$store.counter.reset()\"&gt;\n            Reset\n        &lt;/button&gt;             \n    &lt;/main&gt;\n    &lt;script&gt;\n        document.addEventListener('alpine:initializing', () =&gt; {\n            Alpine.store('counter', {\n                value: Alpine.$persist(0),\n                increment() {\n                    this.value++\n                },\n                reset() {\n                    this.value = 0;\n                }\n            })\n        })\n    &lt;/script&gt;\n&lt;/body&gt;\n</code></pre>\n\n<p>It’s a bit more JavaScript code, but now other page elements can access the counter store, and the concepts of <code>increment</code> and <code>reset</code> are incapsulated into the store, allowing us to change behavior in a single location. That’s pretty cool!</p>\n\n<p>Here’s the full HTML file so you can try it out for yourself.</p>\n\n<pre><code class=\"language-html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\" xmlns:x-on=\"http://www.w3.org/1999/xhtml\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;title&gt;PicoCSS Boilerplate&lt;/title&gt;\n    &lt;link\n            rel=\"stylesheet\"\n            href=\"https://cdn.jsdelivr.net/npm/@picocss/pico@2/css/pico.min.css\"\n    /&gt;\n    &lt;link rel=\"stylesheet\" href=\"/css/site.css\"/&gt;\n    &lt;meta charset=\"utf-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;meta name=\"color-scheme\" content=\"light dark\"/&gt;\n    &lt;title&gt;Hello World!&lt;/title&gt;\n    &lt;!-- Alpine Plugins --&gt;\n    &lt;script defer src=\"https://cdn.jsdelivr.net/npm/@alpinejs/persist@3.x.x/dist/cdn.min.js\"&gt;&lt;/script&gt;\n    &lt;!-- Alpine Core --&gt;\n    &lt;script defer src=\"https://cdn.jsdelivr.net/npm/alpinejs@3.x.x/dist/cdn.min.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;main class=\"container\" x-data&gt;\n    &lt;article class=\"card\"&gt;\n        &lt;header&gt;\n            &lt;h3&gt;Counter Value&lt;/h3&gt;\n        &lt;/header&gt;\n        &lt;section&gt;\n            &lt;p x-text=\"$store.counter.value\"&gt;&lt;/p&gt;\n        &lt;/section&gt;\n    &lt;/article&gt;\n\n    &lt;button type=\"button\" x-on:click=\"$store.counter.increment()\"&gt;\n        Increment\n    &lt;/button&gt;\n    &lt;button type=\"button\" x-on:click=\"$store.counter.reset()\"&gt;\n        Reset\n    &lt;/button&gt;\n&lt;/main&gt;\n&lt;script&gt;\n    document.addEventListener('alpine:initializing', () =&gt; {\n        Alpine.store('counter', {\n            value: Alpine.$persist(0),\n            increment() {\n                this.value++\n            },\n            reset() {\n                this.value = 0;\n            }\n        })\n    })\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\n<h2 id=\"conclusion\">Conclusion</h2>\n\n<p>Alpine.js is an excellent library for building client-side experiences, and mixing it with Htmx or plain old JavaScript is a winning combination. I hope you try this and experiment with changing the behavior of <code>increment</code> and <code>reset</code>.</p>\n\n<p>As always, thanks for reading and sharing my posts with others. Cheers.</p>\n",
      "Content": null,
      "Language": null,
      "Link": "https://khalidabuhakmeh.com/building-a-persistent-counter-with-alpinejs"
    },
    {
      "FeedId": "https://khalidabuhakmeh.com/feed.xml",
      "ItemId": "https://khalidabuhakmeh.com/dynamic-htmx-islands-with-aspnet-core",
      "Title": "Dynamic Htmx Islands with ASP.NET Core",
      "PublishDate": "2024-11-19T00:00:00+00:00",
      "Summary": "<p>I’m a big fan of static site renderers, and they are still one of the missing elements that would make ASP.NET Core more compelling for users across the vast ecosystem divide. In the meantime, developers must rely on tools like Astro, Jekyll, and 11ty to build static site experiences. Recently, I read about Astro 5.0 and its <a href=\"https://5-0-0-beta.docs.astro.build/en/guides/server-islands/\">server island implementation</a>. Server islands allow for mostly static pages to carve out portions of the page that will be rendered on-demand by, you guessed it, the server. This allows site authors to deliver fast, statically rendered pages that benefit the user while allowing for dynamic user-specific content.</p>\n\n<p>In this post, we’ll see how to implement a similar island approach in ASP.NET Core applications that utilize <strong>response and output caching</strong> for performance increases while still carving out small page sections for dynamic content. We’ll use Htmx to trigger requests for dynamic content based on three exclusive page events.</p>\n\n<!--more-->\n\n<h2 id=\"what-is-an-island\">What is an Island?</h2>\n\n<p>As described in the introduction, an island is part of the document object model (DOM) that is loaded after the initial page load. This allows the shared DOM across users to be cached while dynamic content specific to a user session is loaded afterward. While a post-load event is commonly used to retrieve dynamic content, islands can also be lazily loaded and take advantage of the <code>revealed</code> or <code>intersect</code> events. These will only trigger requests if the user sees this DOM element on the page. Optimizing pages by selecting island events can reduce unnecessary service processing. In general, islands are a powerful technique when building web applications.</p>\n\n<p>Examples of islands may include a profile name in a page’s navigation, customized recommendations on a storefront, user-based statistics for a dashboard, and more. These islands typically comprise a small yet critical part of the user experience.</p>\n\n<p>Now, let’s implement an <code>island</code> component for ASP.NET Core web applications.</p>\n\n<h2 id=\"the-island-plan\">The Island Plan</h2>\n\n<p>An island has three parts: the initial content, the triggering event, and the endpoint that returns the dynamic content.</p>\n\n<p>Let’s start by seeing what our <code>island</code> implementation will look like on a Razor page.</p>\n\n<pre><code class=\"language-razor\">&lt;island url=\"/profile/avatar\"&gt;\n    &lt;div class=\"alert alert-info d-flex justify-content-center vertical-align-center\"&gt;\n        &lt;div class=\"spinner-border\" role=\"status\"&gt;\n            &lt;span class=\"visually-hidden\"&gt;Loading...&lt;/span&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n&lt;/island&gt;\n</code></pre>\n\n<p>The <code>island</code> element has a URL attribute and some inner content that will be used as a placeholder while dynamic content is loaded. The handler for our dynamic content is a straightforward endpoint, but it could be any backend you choose. What you don’t see in this initial example is a configurable event. We’ll see that in action later in the post.</p>\n\n<pre><code class=\"language-csharp\">app.MapGet(\"/profile/avatar\", () =&gt; Results.Content(\n    //lang=html\n    $\"\"\"\n     &lt;div class=\"alert alert-info\"&gt;\n        &lt;p class=\"fs-1 fw-bold\"&gt;🌴 Welcome to the island Khalid!&lt;/p&gt;\n        &lt;p class=\"fs-3\"&gt;You arrived on ({DateTime.Now.ToLongTimeString()})&lt;/p&gt;\n     &lt;/div&gt;\n     \"\"\")\n);\n</code></pre>\n\n<p>OK, let’s build it!</p>\n<h2 id=\"creating-an-island-taghelper\">Creating an Island TagHelper</h2>\n\n<p>While I initially attempted to do this with a <code>ViewComponent</code> I found it needing more in what it could accomplish. Tag Helpers are vastly more powerful and capable in this case.</p>\n\n<pre><code class=\"language-csharp\">using System.ComponentModel.DataAnnotations;\nusing Microsoft.AspNetCore.Razor.TagHelpers;\n\npublic enum IslandEvents\n{\n    Load,\n    Revealed,\n    Intersect\n}\n\n[HtmlTargetElement(\"island\")]\npublic class IslandTagHelper : TagHelper\n{\n    [HtmlAttributeName(\"url\"), Required]\n    public string? Url { get; set; }\n\n    [HtmlAttributeName(\"event\")] \n    public IslandEvents Event { get; set; } = IslandEvents.Load;\n    \n    public override async Task ProcessAsync(TagHelperContext context, TagHelperOutput output)\n    {\n        // Changing the tag name to \"div\"\n        output.TagName = \"div\";\n\n        var @event = Event switch\n        {\n            IslandEvents.Load =&gt; \"load\",\n            IslandEvents.Revealed =&gt; \"revealed\",\n            IslandEvents.Intersect =&gt; \"intersect once\",\n            _ =&gt; \"load\"\n        };\n\n        output.Attributes.SetAttribute(\"hx-get\", Url);\n        output.Attributes.SetAttribute(\"hx-trigger\", @event);\n        output.Attributes.SetAttribute(\"hx-swap\", \"outerHTML\");\n\n        // Retrieve the inner content\n        var childContent = await output.GetChildContentAsync();\n        output.Content.SetHtmlContent(childContent);\n\n        // Ensuring the tag is not self-closing\n        output.TagMode = TagMode.StartTagAndEndTag;\n    }\n}\n</code></pre>\n\n<p>Remember to register the tag helper in <code>_ViewImports.cshtml</code>. Since we’re using <a href=\"https://htmx.org\">Htmx</a>, you must add the script reference to your <code>_Layout.cshtml</code>.</p>\n\n<pre><code class=\"language-html\">&lt;script src=\"https://unpkg.com/htmx.org@2.0.3\"&gt;&lt;/script&gt;\n</code></pre>\n\n<p>You’ll notice we have an <code>enum</code> of <code>IslandEvents</code>. Let’s discuss what each person does and how their behavior differs.</p>\n\n<ul>\n  <li><strong>Load</strong>: After the initial page load, the page will retrieve the dynamic content.</li>\n  <li><strong>Revealed</strong>: The dynamic content will be retrieved only after the element is visible to the user.</li>\n  <li><strong>Intersect</strong>: If the element is in an <code>overflow</code>, the page will only retrieve the dynamic content after it intersects with the visible part of the page.</li>\n</ul>\n\n<p>Let’s look at how to change the default loading behavior.</p>\n\n<pre><code class=\"language-razor\">&lt;div style=\"margin-top: 2000px\"&gt;\n    &lt;island url=\"/profile/avatar\" event=\"Revealed\"&gt;\n        &lt;div class=\"alert alert-info d-flex justify-content-center vertical-align-center\"&gt;\n            &lt;div class=\"spinner-border\" role=\"status\"&gt;\n                &lt;span class=\"visually-hidden\"&gt;Loading...&lt;/span&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;\n    &lt;/island&gt;\n&lt;/div&gt;\n</code></pre>\n\n<p>In the example, the <code>margin-top</code> is <code>2000px</code>. This forces us to scroll down to reveal the element, and only then will we call for dynamic content.</p>\n\n<h2 id=\"response-and-output-caching\">Response and Output Caching</h2>\n\n<p>While not the main focus of this post, response and output caching will be essential to using islands. As mentioned, you want to share as much as possible across user sessions to reap the benefits of these techniques.</p>\n\n<p>You must update your <code>Program</code> file to include the following components to add output and response caching—first, the service registrations.</p>\n\n<pre><code class=\"language-csharp\">builder.Services.AddOutputCache();\nbuilder.Services.AddResponseCaching();\n</code></pre>\n\n<p>Then, as part of your ASP.NET Core pipeline, you’ll need to add the following middleware calls.</p>\n\n<pre><code class=\"language-csharp\">app.UseResponseCaching();\napp.UseOutputCache();\n</code></pre>\n\n<p>Once registered, you can apply output caching to the endpoint, which displays most of the content. Here is an example of its use on a Razor page.</p>\n\n<pre><code class=\"language-csharp\">using Microsoft.AspNetCore.Mvc;\nusing Microsoft.AspNetCore.Mvc.RazorPages;\nusing Microsoft.AspNetCore.OutputCaching;\n\n[OutputCache(Duration = 100),\n ResponseCache(\n     Duration = 100,\n     Location = ResponseCacheLocation.Any,\n     NoStore = false)]\npublic class IndexModel(ILogger&lt;IndexModel&gt; logger) : PageModel\n{\n    private readonly ILogger&lt;IndexModel&gt; logger = logger;\n\n    public void OnGet()\n    {\n    }\n}\n</code></pre>\n\n<p>Feel free to apply caching to the dynamic endpoints, being mindful of cache-busting based on a user’s session variables.</p>\n\n<pre><code class=\"language-csharp\">app.MapGet(\"/profile/avatar\", () =&gt; Results.Content(\n    //lang=html\n    $\"\"\"\n     &lt;div class=\"alert alert-info\"&gt;\n        &lt;p class=\"fs-1 fw-bold\"&gt;🌴 Welcome to the island Khalid!&lt;/p&gt;\n        &lt;p class=\"fs-3\"&gt;You arrived on ({DateTime.Now.ToLongTimeString()})&lt;/p&gt;\n     &lt;/div&gt;\n     \"\"\"))\n    .CacheOutput(policy =&gt; { /* apply caching policy here */ });\n</code></pre>\n\n<p>If you are unfamiliar with caching in ASP.NET Core, <a href=\"https://learn.microsoft.com/en-us/aspnet/core/performance/caching/output?view=aspnetcore-8.0\">I recommend that you read the official documentation on the topic</a>.</p>\n\n<p>There you have it. ASP.NET Core Islands using Htmx.</p>\n<h2 id=\"conclusion\">Conclusion</h2>\n\n<p>Some folks may wonder why they should not just do all the caching and reuse on the server, including techniques like [<em>donut caching</em> and <em>donut hole caching](https://www.computerworld.com/article/1604649/what-exactly-is-donut-caching.html)</em>. The advantage of this approach is that dynamic content can come from <strong>anywhere</strong> and isn’t explicitly tied to your ASP.NET Core server backend. You can deliver dynamic content from CDNs, function as service endpoints, use other static sites, and more. It’s a technique that benefits from ASP.NET Core but isn’t tied to it.</p>\n\n<p>If I spent more time on this implementation, I’d likely integrate islands more closely to ASP.NET Core’s routing mechanisms, allowing users to specify pages, handlers, MVC actions, and more. That said, a simple <code>url</code> attribute works just fine.</p>\n\n<p>Finally, TagHelpers are an underrated feature of the ASP.NET Core stack, and I think people should revisit them.</p>\n\n<p>If you’d like to see a running sample of this project, visit my <strong><a href=\"https://github.com/khalidabuhakmeh/aspnetcore-htmx-islands\">GitHub repository and try it out for yourself</a></strong>. Cheers.</p>\n",
      "Content": null,
      "Language": null,
      "Link": "https://khalidabuhakmeh.com/dynamic-htmx-islands-with-aspnet-core"
    },
    {
      "FeedId": "https://khalidabuhakmeh.com/feed.xml",
      "ItemId": "https://khalidabuhakmeh.com/update-html-elements-with-htmx-triggers-and-aspnet-core",
      "Title": "Update HTML Elements with Htmx Triggers and ASP.NET Core",
      "PublishDate": "2024-10-22T00:00:00+00:00",
      "Summary": "<p>Let me start by saying that I love the combination of <a href=\"https://htmx.org\">Htmx</a> and ASP.NET Core, and it is a pairing that any .NET developer should consider, whether maintaining an existing application or building a new one. It’s very cool. I was recently talking about revisiting the\n<code>hx-trigger</code> and\n<code>HX-Trigger</code> header technique with ASP.NET Core on Mastodon with <a href=\"https://mas.to/@illyabusigin\">Illya Busigin</a>, and they mentioned they use the same method to update the avatar image when a user updates their profile. So, I thought I’d try and see how to implement it myself.</p>\n\n<p>In this post, we’ll see how to use the\n<code>HX-Trigger</code> facility in Htmx to update existing UI elements on a rendered HTML page.</p>\n\n<!--more-->\n\n<h2 id=\"the-moving-parts\">The Moving Parts</h2>\n\n<p>When building any new feature in an application, you need to arrange multiple components to work together. Let’s address all the parts you’ll need to make this experience.</p>\n\n<ul>\n  <li>A User Profile store</li>\n  <li>Profile Settings endpoints for display and updating</li>\n  <li>An endpoint to refresh the avatar element on the page</li>\n</ul>\n\n<p>We’ll be using the capabilities of ASP.NET Core Razor Pages and Razor Views to handle the HTML snippets that Htmx needs for swapping elements. Before we get into HTML and Htmx, let’s deal with our user profile storage service.</p>\n\n<p>Note that you’ll need the NuGet packages of <strong>Htmx</strong> and, optionally, <strong>Htmx.TagHelpers</strong>.</p>\n\n<h2 id=\"the-user-service\">The User Service</h2>\n\n<p>I created a straightforward class for the demo that will hold the user name and the avatar URL. In a “real application”, you’d likely store this information in a database or third-party auth service. Let’s see what I wrote.</p>\n\n<pre><code class=\"language-csharp\">public class UserService\n{\n    public static readonly string[] AvatarUrls =\n    [\n        \"~/img/avatar_one.png\",\n        \"~/img/avatar_two.png\",\n        \"~/img/avatar_three.png\",\n    ];\n    \n    public string Name { get; set; } = \"Khalid Abuhakmeh\";\n    public string AvatarUrl { get; set; } = AvatarUrls[0];\n}\n</code></pre>\n\n<p>The user can choose from three existing avatars, which are stored in the\n<code>wwwroot/img</code> folder. Fewer options mean less code for the demo and more focus on the Htmx bits that come later.</p>\n\n<p>Next, we’ll register the <code>UserService</code> as a\n<code>Singleton</code> in our ASP.NET Core setup class to maintain the state between requests. <strong>Note: This is only for the demo\nand is not recommended in any other scenario.</strong></p>\n\n<pre><code class=\"language-csharp\">var builder = WebApplication.CreateBuilder(args);\n\n// Add services to the container.\nbuilder.Services.AddRazorPages();\nbuilder.Services.AddSingleton&lt;UserService&gt;();\n\nvar app = builder.Build();\n</code></pre>\n\n<p>Cool! Now, we can inject this service where we need it to grab the current state of the user profile, which includes the name and avatar URL.</p>\n\n<p>I inject this service into my <code>Layout.cshtml</code> and then render the avatar partial.</p>\n\n<pre><code class=\"language-razor\">@inject UserService UserService\n&lt;!-- some HTML --&gt;\n@await Html.PartialAsync(\"_Avatar\", UserService)\n</code></pre>\n\n<p>We’ll examine the partial later in the article, but first, let’s discuss our account endpoints.</p>\n\n<h2 id=\"profile-endpoints\">Profile Endpoints</h2>\n\n<p>In a new Razor page titled <code>Index</code>, we’ll have three endpoints:</p>\n\n<ul>\n  <li>Show the profile settings form.</li>\n  <li>Accept user updates</li>\n  <li>Render the <code>_Avatar</code> profile image as partial content.</li>\n</ul>\n\n<p>I’ll paste the full class here, and we’ll break it down into one endpoint at a time.</p>\n\n<pre><code class=\"language-csharp\">using System.Diagnostics.CodeAnalysis;\nusing Htmx;\nusing HtmxAvatarChange.Models;\nusing Microsoft.AspNetCore.Mvc;\nusing Microsoft.AspNetCore.Mvc.RazorPages;\nusing Microsoft.AspNetCore.Mvc.Rendering;\n\nnamespace HtmxAvatarChange.Pages;\n\npublic class IndexModel(UserService userService, ILogger&lt;IndexModel&gt; logger) : PageModel\n{\n    [BindProperty] public string? Name { get; set; }\n\n    [BindProperty] public string? AvatarUrl { get; set; }\n\n    [TempData] public string? Message { get; set; }\n    [TempData] public string? MessageCssClass { get; set; }\n\n    [MemberNotNullWhen(true, nameof(Message))]\n    public bool HasMessage =&gt; Message != null;\n\n    public List&lt;SelectListItem&gt; Avatars =&gt; UserService\n        .AvatarUrls\n        .Select((x, i) =&gt; new SelectListItem($\"avatar-{i:00}\", x))\n        .ToList();\n\n    public void OnGet()\n    {\n        Name = userService.Name;\n        AvatarUrl = userService.AvatarUrl;\n    }\n\n    public IActionResult OnPost()\n    {\n        if (ModelState.IsValid)\n        {\n            Message = \"Successfully saved account settings\";\n            MessageCssClass = \"alert-success\";\n\n            // change values\n            userService.Name = Name!;\n            userService.AvatarUrl = AvatarUrl!;\n            \n            Response.Htmx(h =&gt;\n                h.WithTrigger(\"avatar\"));\n        }\n        else\n        {\n            Message = \"Failed to save account settings\";\n            MessageCssClass = \"alert-danger\";\n        }\n\n        if (Request.IsHtmx())\n        {\n            return Partial(\"_Form\", this);\n        }\n\n        return RedirectToPage(\"Index\");\n    }\n\n    public IActionResult OnGetAvatar()\n    {\n        return Partial(\"_Avatar\", userService);\n    }\n\n    public string? IsCurrentAvatar(string avatarValue)\n    {\n        return avatarValue == AvatarUrl ? \"checked\" : null;\n    }\n}\n</code></pre>\n\n<p>The first method we’ll look at is <code>OnGet</code>. This method takes the information from the\n<code>UserService</code> and hydrates our property. These properties will be used to bind information to our form.</p>\n\n<pre><code class=\"language-csharp\">public void OnGet()\n{\n\tName = userService.Name;\n\tAvatarUrl = userService.AvatarUrl;\n}\n</code></pre>\n\n<p>Next, closer to the bottom of the class, let’s look at a similar method, <code>OnGetAvatar</code>.</p>\n\n<pre><code class=\"language-csharp\">public IActionResult OnGetAvatar()\n{\n\treturn Partial(\"_Avatar\", userService);\n}\n</code></pre>\n\n<p>This method returns the partial view of <code>_Avatar</code>, simply displaying our user information. Now, let’s look at the\n<code>OnPost</code> method, which is the juiciest of the implementations.</p>\n\n<pre><code class=\"language-csharp\">public IActionResult OnPost()\n{\n\tif (ModelState.IsValid)\n\t{\n\t\tMessage = \"Successfully saved account settings\";\n\t\tMessageCssClass = \"alert-success\";\n\n\t\t// change values\n\t\tuserService.Name = Name!;\n\t\tuserService.AvatarUrl = AvatarUrl!;\n\t\t\n\t\tResponse.Htmx(h =&gt;\n\t\t\th.WithTrigger(\"avatar\"));\n\t}\n\telse\n\t{\n\t\tMessage = \"Failed to save account settings\";\n\t\tMessageCssClass = \"alert-danger\";\n\t}\n\n\tif (Request.IsHtmx())\n\t{\n\t\treturn Partial(\"_Form\", this);\n\t}\n\n\treturn RedirectToPage(\"Index\");\n}\n</code></pre>\n\n<p>Here, we determine if the user input is valid and then update the page. The two most important lines include the\n<code>Htmx</code> references.</p>\n\n<pre><code class=\"language-csharp\">Response.Htmx(h =&gt;\n\th.WithTrigger(\"avatar\"));\n</code></pre>\n\n<p>If the incoming request was initiated with Htmx, we add a response header to tell Htmx to fire a client-side event of\n<code>avatar</code>. Any element subscribing to this event will then trigger another request. In our case, we’ll be calling the\n<code>OnGetAvatar</code> endpoint. You can add as many events as you need here, but we only want one in our case.</p>\n\n<p>The following reference to Htmx checks if Htmx initiated the request. If it was, we need to send back a partial Html snippet.</p>\n\n<pre><code class=\"language-csharp\">if (Request.IsHtmx())\n{\n\treturn Partial(\"_Form\", this);\n}\n</code></pre>\n\n<p>That’s it! But what do the Razor views look like?</p>\n\n<h2 id=\"htmx-and-partial-views\">Htmx and Partial Views</h2>\n\n<p>Let’s start with the form since it is the focal point of our user experience. It’s straightforward Razor code with one exception: the Htmx attributes on the\n<code>form</code> tag.</p>\n\n<pre><code class=\"language-razor\">@model IndexModel\n\n&lt;fieldset id=\"account-settings\"&gt;\n    &lt;legend&gt;Account Settings&lt;/legend&gt;\n\n    @if (Model.HasMessage)\n    {\n        &lt;div class=\"alert @(Model.MessageCssClass ?? \"alert-info\")\" role=\"alert\"&gt;\n            @Model.Message\n        &lt;/div&gt;\n    }\n\n    &lt;form method=\"post\" hx-post hx-target=\"#account-settings\" hx-swap=\"outerHTML\"&gt;\n        &lt;div class=\"form-group row\"&gt;\n            &lt;label asp-for=\"Name\" class=\"col-sm-2 col-form-label\"&gt;Name&lt;/label&gt;\n            &lt;div class=\"col-sm-10\"&gt;\n                &lt;input class=\"form-control\" asp-for=\"Name\"&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;\n        &lt;fieldset class=\"form-group mt-3\"&gt;\n            &lt;div class=\"row\"&gt;\n                &lt;legend class=\"col-form-label col-sm-2 pt-0\"&gt;Avatar&lt;/legend&gt;\n                &lt;div class=\"col-sm-10\"&gt;\n                    @foreach (var avatar in Model.Avatars)\n                    {\n                        &lt;div class=\"form-check\"&gt;\n                            &lt;input\n                                id=\"@avatar.Text\"\n                                asp-for=\"AvatarUrl\"\n                                class=\"form-check-inline\" type=\"radio\"\n                                value=\"@avatar.Value\"\n                                checked=\"@Model.IsCurrentAvatar(avatar.Value)\"&gt;\n                            &lt;label class=\"form-check-label\" for=\"@avatar.Text\"&gt;\n                                &lt;img src=\"@Url.Content(avatar.Value)\" class=\"profile-pic\" alt=\"@avatar.Text\"/&gt;\n                            &lt;/label&gt;\n                        &lt;/div&gt;\n                    }\n                &lt;/div&gt;\n            &lt;/div&gt;\n        &lt;/fieldset&gt;\n        &lt;div class=\"form-group row mt-3\"&gt;\n            &lt;button type=\"submit\" class=\"btn btn-primary\"&gt;Save Profile&lt;/button&gt;\n        &lt;/div&gt;\n    &lt;/form&gt;\n&lt;/fieldset&gt;\n</code></pre>\n\n<p>These Htmx attributes allow us to hijack the form submission and route it through an Htmx request, allowing the library to process the header request. Once processed, it fires the event on the\n<code>_Avatar</code> partial. Let’s take a look at that view now.</p>\n\n<pre><code class=\"language-razor\">@model HtmxAvatarChange.Models.UserService\n\n&lt;div id=\"profile-avatar\"\n     class=\"mx-2 smooth\"\n     hx-get=\"@Url.Page(\"Index\", \"Avatar\")\"\n     hx-trigger=\"avatar from:body\"&gt;\n    &lt;div class=\"profile-pic\"&gt;\n        &lt;img src=\"@Url.Content(Model.AvatarUrl)\" alt=\"Profile Picture\"&gt;\n    &lt;/div&gt;\n    &lt;span class=\"navbar-text\"&gt; @Model.Name&lt;/span&gt;\n&lt;/div&gt;\n</code></pre>\n\n<p>The essential attribute on this view is the <code>hx-trigger</code> attribute. Note the exact value.</p>\n\n<pre><code class=\"language-html\">hx-trigger=\"avatar from:body\"\n</code></pre>\n\n<p>The <code>from:body</code> is essential, as the\n<code>body</code> element is what Htmx uses to broadcast the event. That’s it. Let’s see it in action!</p>\n\n<p><img src=\"https://github.com/khalidabuhakmeh/HtmxAvatarChange/raw/main/misc/htmx-hx-trigger-sample.gif\" alt=\"Sample Running\" /></p>\n\n<p>Wow! That’s cool!</p>\n\n<h2 id=\"conclusion\">Conclusion</h2>\n\n<p><code>HX-Trigger</code> headers can help you decouple UI elements from each other and create a system of elements that can act independently. This can be very powerful, but it should be used in moderation, like all things. Remember, each triggered event results in a request back to the server, which could come at a cost. That said, many existing SPA UI approaches already make expensive calls to the server, so this might not be any worse than a GraphQL call or JSON over an HTTP request.</p>\n\n<p>I’ve uploaded the code for this sample to my <a href=\"https://github.com/khalidabuhakmeh/HtmxAvatarChange\">GitHub repository</a> so you can try it out.</p>\n\n<p>As always, thanks for reading and hope you give this one a try.</p>\n",
      "Content": null,
      "Language": null,
      "Link": "https://khalidabuhakmeh.com/update-html-elements-with-htmx-triggers-and-aspnet-core"
    },
    {
      "FeedId": "https://khalidabuhakmeh.com/feed.xml",
      "ItemId": "https://khalidabuhakmeh.com/add-ef-core-migrations-to-dotnet-aspire-solutions",
      "Title": "Add EF Core Migrations to .NET Aspire Solutions",
      "PublishDate": "2024-10-08T00:00:00+00:00",
      "Summary": "<p>Folks working with EF Core are likely very fond of the library’s migration features, one of the most vital selling points for adopting an ORM. If you’re building a .NET solution, your database schema will evolve, and adding, removing, and updating are everyday actions you must perform.</p>\n\n<p>.NET Aspire can ease the development of distributed solutions, but you still need to bridge the gap between development time actions and runtime execution. With EF Core, a development time action is managing migrations, while at runtime, you’ll need to execute those migrations against a database. The <a href=\"https://learn.microsoft.com/en-us/dotnet/aspire/database/ef-core-migrations\">original tutorial by the Microsoft documentation</a> explains how to run a .NET Aspire application with migrations but leaves out how to do development time tasks.</p>\n\n<p>In this post, we’ll explore how to manage migrations during the development process so you can get the most out of your .NET Aspire and Entity Framework Core adoption.</p>\n\n<!--more-->\n\n<h2 id=\"the-solution-structure\">The Solution Structure</h2>\n\n<p>We’ll first need to understand the solution structure of our Aspire distributed application. This is what my solution looks like, but you can change the approach depending on your preferences.</p>\n\n<pre><code>AspireSandbox\n|- AspireSandbox.AppHost\n|- AspireSandbox.Data\n|- AspireSandbox.ServiceDefaults\n|- AspireSandbox.Web\n</code></pre>\n\n<p>The <code>AspireSanbox.Data</code> project contains my <code>DbContext</code> implementation, which is nothing remarkable.</p>\n\n<pre><code class=\"language-csharp\">using Microsoft.EntityFrameworkCore;\n\nnamespace AspireSandbox.Data;\n\npublic class Database(DbContextOptions&lt;Database&gt; options) \n    : DbContext(options)\n{\n    public DbSet&lt;Count&gt; Counts =&gt; Set&lt;Count&gt;();\n}\n\npublic class Count\n{\n    public int Id { get; set; }\n    public DateTimeOffset CountedAt { get; set; } = DateTimeOffset.UtcNow;\n}\n</code></pre>\n\n<p>The dependencies for this project include the following Entity Framework Core packages.</p>\n\n<pre><code class=\"language-xml\">&lt;Project Sdk=\"Microsoft.NET.Sdk\"&gt;\n\n    &lt;PropertyGroup&gt;\n        &lt;TargetFramework&gt;net8.0&lt;/TargetFramework&gt;\n        &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt;\n        &lt;Nullable&gt;enable&lt;/Nullable&gt;\n    &lt;/PropertyGroup&gt;\n\n    &lt;ItemGroup&gt;\n      &lt;PackageReference Include=\"Microsoft.EntityFrameworkCore\" Version=\"8.0.8\" /&gt;\n      &lt;PackageReference Include=\"Microsoft.EntityFrameworkCore.Design\" Version=\"8.0.8\"&gt;\n        &lt;PrivateAssets&gt;all&lt;/PrivateAssets&gt;\n        &lt;IncludeAssets&gt;runtime; build; native; contentfiles; analyzers; buildtransitive&lt;/IncludeAssets&gt;\n      &lt;/PackageReference&gt;\n      &lt;PackageReference Include=\"Npgsql.EntityFrameworkCore.PostgreSQL\" Version=\"8.0.8\" /&gt;\n    &lt;/ItemGroup&gt;\n\n&lt;/Project&gt;\n</code></pre>\n\n<p>Next, we must add this project as a reference to our\n<code>AspireSandbox.AppHost</code> project, paying attention to adding the attribute of\n<code>IsAspireProjectResource</code> and setting its value to <code>false</code>. This opts this project out of the Aspire source generators.</p>\n\n<p>I have a few other package references, but pay attention to the Entity Framework Core dependencies.</p>\n\n<pre><code class=\"language-xml\">&lt;Project Sdk=\"Microsoft.NET.Sdk\"&gt;\n\n    &lt;PropertyGroup&gt;\n        &lt;OutputType&gt;Exe&lt;/OutputType&gt;\n        &lt;TargetFramework&gt;net8.0&lt;/TargetFramework&gt;\n        &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt;\n        &lt;Nullable&gt;enable&lt;/Nullable&gt;\n        &lt;IsAspireHost&gt;true&lt;/IsAspireHost&gt;\n        &lt;UserSecretsId&gt;ba2648f9-6953-4e8b-9918-c241b1d99b09&lt;/UserSecretsId&gt;\n    &lt;/PropertyGroup&gt;\n\n    &lt;ItemGroup&gt;\n        &lt;PackageReference Include=\"Aspire.Hosting.AppHost\" Version=\"8.2.1\"/&gt;\n        &lt;PackageReference Include=\"Aspire.Hosting.PostgreSQL\" Version=\"8.2.1\" /&gt;\n        &lt;PackageReference Include=\"Aspire.Hosting.Redis\" Version=\"8.2.1\" /&gt;\n        &lt;PackageReference Include=\"Microsoft.EntityFrameworkCore\" Version=\"8.0.8\" /&gt;\n        &lt;PackageReference Include=\"Microsoft.EntityFrameworkCore.Design\" Version=\"8.0.8\"&gt;\n          &lt;PrivateAssets&gt;all&lt;/PrivateAssets&gt;\n          &lt;IncludeAssets&gt;runtime; build; native; contentfiles; analyzers; buildtransitive&lt;/IncludeAssets&gt;\n        &lt;/PackageReference&gt;\n    &lt;/ItemGroup&gt;\n\n    &lt;ItemGroup&gt;\n      &lt;ProjectReference Include=\"..\\AspireSandbox.Data\\AspireSandbox.Data.csproj\" \n                        IsAspireProjectResource=\"false\" /&gt;\n      &lt;ProjectReference Include=\"..\\AspireSandbox.Web\\AspireSandbox.Web.csproj\" /&gt;\n    &lt;/ItemGroup&gt;\n\n&lt;/Project&gt;\n</code></pre>\n\n<p>OK, we’re ready to write some code.</p>\n\n<h2 id=\"entity-framework-core-design-time-factory\">Entity Framework Core Design Time Factory</h2>\n\n<p>Entity Framework Core provides a mechanism for the tooling to connect and work with a database. Since our database is in the scope of our distributed application, we need to run our tooling when Aspire has built our dependency. Don’t worry; it will make sense in a second.</p>\n\n<p>In the <code>AspireSandbox.AppHost</code>, create a new <code>DataContextDesignTimeFactory</code> class.</p>\n\n<pre><code class=\"language-csharp\">using Microsoft.EntityFrameworkCore;\nusing Microsoft.EntityFrameworkCore.Design;\n\nnamespace AspireSandbox.AppHost;\n\npublic sealed class DataContextDesignTimeFactory :\n\tIDesignTimeDbContextFactory&lt;Data.Database&gt;\n{\n    public Data.Database CreateDbContext(string[] args)\n    {\n        var builder = DistributedApplication.CreateBuilder(args);\n    \n        var postgres = builder\n            .AddPostgres(\"postgres\")\n            .AddDatabase(\"migrations\", databaseName: \"migrations\");\n\n        var optionsBuilder = new DbContextOptionsBuilder&lt;Data.Database&gt;();\n        optionsBuilder.UseNpgsql(\"migrations\");\n        return new Data.Database(optionsBuilder.Options);\n    }\n}\n</code></pre>\n\n<p>This implementation will spin up our database dependency and allow us to create an instance of our\n<code>DbContext</code> implementation. At least long enough to create and add our migrations to our project. Remember that EF Core creates a model snapshot as a C# file, so there is no need to persist the database across migration runs.</p>\n\n<h2 id=\"ef-core-cli-command\">EF Core CLI Command</h2>\n\n<p>Now, we can run the following command to spin up Aspire long enough to create a migration.</p>\n\n<pre><code class=\"language-bash\">dotnet ef migrations --project ./AspireSandbox.Data --startup-project ./AspireSandbox.AppHost add Initial\n</code></pre>\n\n<p>Change the <code>--project</code> and <code>--startup-project</code> to match your solution structure.</p>\n\n<p>If all goes well, you should now have a new database migration.</p>\n\n<h2 id=\"conclusion\">Conclusion</h2>\n\n<p>There you have it; you can now work seamlessly between your development environment and Aspire solution with just a new\n<code>IDesignTimeDbContextFactory</code> implementation and tweaking your CLI command.</p>\n\n<p>Thanks to James Hancock for leaving this comment on the Aspire GitHub issues and inspiring this blog post. His solution is pretty\n<strong>+$%!</strong> good.</p>\n",
      "Content": null,
      "Language": null,
      "Link": "https://khalidabuhakmeh.com/add-ef-core-migrations-to-dotnet-aspire-solutions"
    },
    {
      "FeedId": "https://khalidabuhakmeh.com/feed.xml",
      "ItemId": "https://khalidabuhakmeh.com/htmx-and-playwright-tests-in-csharp",
      "Title": "Htmx and Playwright Tests in C#",
      "PublishDate": "2024-09-24T00:00:00+00:00",
      "Summary": "<p>Community member Jonathan Channon recently approached me about an appropriate way to test your Htmx-powered applications using the Playwright testing framework. It can be annoying to get the timing right between sending an HTMX request, processing it on the server, and applying it to the page.</p>\n\n<p>In this post, we’ll see a surefire way to wait for Htmx to finish before testing the state of your pages, thus leading to more reliable tests and faster test execution. Let’s go.</p>\n\n<!--more-->\n\n<h2 id=\"the-htmx-counter-application\">The Htmx Counter Application</h2>\n\n<p>Let’s first see what application we’ll be testing. It’s a simple **Counter\n** component that increases in value when the user presses a button.</p>\n\n<pre><code class=\"language-razor\">@model HtmxPlaywrightIntegration.ViewModels.CounterViewModel\n\n&lt;div id=\"counter\" class=\"card\"&gt;\n    &lt;div id=\"value\" class=\"card-body\"&gt;\n        @Model.Count\n    &lt;/div&gt;\n    &lt;div class=\"card-footer\"&gt;\n        &lt;form asp-page=\"Index\" method=\"post\" \n              hx-post \n              hx-target=\"#counter\"\n              hx-swap=\"outerHTML\"&gt;\n            &lt;button class=\"btn btn-primary\"&gt;Increment&lt;/button&gt;\n        &lt;/form&gt;\n    &lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n\n<p>The ASP.NET Core endpoint is straightforward.</p>\n\n<pre><code class=\"language-csharp\">using HtmxPlaywrightIntegration.ViewModels;\nusing Microsoft.AspNetCore.Mvc;\nusing Microsoft.AspNetCore.Mvc.RazorPages;\n\nnamespace HtmxPlaywrightIntegration.Pages;\n\npublic class IndexModel(ILogger&lt;IndexModel&gt; logger) : PageModel\n{\n    public static CounterViewModel Value { get; set; }\n        = new();\n\n    public void OnGet()\n    {\n    }\n\n    public IActionResult OnPost()\n    {\n        Value.Count += 1;\n        return Partial(\"_Counter\", Value);\n    }\n}\n</code></pre>\n\n<p>Clicking the button will make a request to the server, increment the value, and return the HTML snippet to be processed into the page.</p>\n\n<p>Now, let’s move on to the next part of the process, the Htmx lifecycle.</p>\n\n<h2 id=\"htmx-request-lifecycle-events\">Htmx Request Lifecycle Events</h2>\n\n<p>Htmx contains multiple lifecycle events that we can utilize during a request. These events allow us to modify outgoing requests and understand what stages Htmx is at during the processing phase.</p>\n\n<p>The lifecycle event we are most interested in is\n<code>htmx:afterSettle</code>. Settling is the process after all DOM changes have been applied and the page is now stable. Let’s hook into this page event and write a console message. I’ve added this to the typical\n<code>site.js</code> file, but it can go anywhere within your application.</p>\n\n<pre><code class=\"language-javascript\">document.body.addEventListener('htmx:afterSettle', function(evt) {\n    console.log('playwright:continue');\n});\n</code></pre>\n\n<p>Now, whenever we settle the page, a console message will be written with the value of\n<code>playwright:continue</code>. We’ll see how to register this script into our page in the next section using the Playwright APIs.</p>\n\n<h2 id=\"playwright-and-htmx-extensions\">Playwright and Htmx Extensions</h2>\n\n<p>Now, let’s look at our test.</p>\n\n<pre><code class=\"language-csharp\">namespace HtmxPlaywrightIntegration.Tests;\n\n[Parallelizable(ParallelScope.Self)]\n[TestFixture]\npublic class Tests : PageTest\n{\n    [Test]\n    public async Task CanIncrementCountUsingHtmx()\n    {\n        await Page.GotoAsync(\"http://localhost:5170\");\n\n        await Page.RegisterHtmxLifecycleListener();\n\n        var button = Page.Locator(\"text=Increment\");\n        var body = Page.Locator(\"#value\");\n\n        var currentCount = int.Parse(await body.TextContentAsync() ?? \"-1\");\n\n        await button.ClickAsync();\n        await Page.WaitForHtmx();\n        \n        await Expect(body).ToHaveTextAsync($\"{currentCount+1}\");\n    }\n}\n</code></pre>\n\n<p>We first call the <code>RegisterHtmxLifecycleListener</code> script. This is the same JavaScript seen above. Then, we call\n<code>WaitForHtmx</code>, which will wait for the console message in our page’s output. Let’s see how these extension methods work.</p>\n\n<pre><code class=\"language-csharp\">using Microsoft.Playwright;\n\nnamespace HtmxPlaywrightIntegration.Tests;\n\npublic static class HtmxExtensions\n{\n    private const string Continue = \"playwright:continue\";\n    \n    public static Task WaitForHtmx(this IPage page)\n    {\n        return page.WaitForConsoleMessageAsync(new() {\n            Predicate = message =&gt; message.Text == Continue\n        });\n    }\n\n    public static Task RegisterHtmxLifecycleListener(this IPage page)\n    {\n        return page.AddScriptTagAsync(new()\n        {\n            // language=javascript\n            Content = $$\"\"\"\n                      document.body.addEventListener('htmx:afterSettle', function(evt) {\n                          console.log('{{Continue}}');\n                      });\n                      \"\"\"\n        });\n    }\n}\n</code></pre>\n\n<p>It’s that easy. Now, your Playwright tests can wait for messages generated by the Htmx lifecycle, so you don’t have to worry about changes to your implementation on the front or back end changing how your tests execute. Additionally, you won’t have to waste time waiting for random delays to progress through your tests.</p>\n\n<p>I hope you found this post helpful. Have fun building Htmx apps tested by Playwright. Cheers.</p>\n",
      "Content": null,
      "Language": null,
      "Link": "https://khalidabuhakmeh.com/htmx-and-playwright-tests-in-csharp"
    },
    {
      "FeedId": "https://khalidabuhakmeh.com/feed.xml",
      "ItemId": "https://khalidabuhakmeh.com/intersperse-values-for-enumerable-collections",
      "Title": "Intersperse Values for Enumerable Collections",
      "PublishDate": "2024-09-10T00:00:00+00:00",
      "Summary": "<p>JavaScript, for better or worse, has a much smaller standard library than what .NET developers are used to with the base class library (BCL). The JavaScript community has made many attempts to build <a href=\"https://www.npmjs.com/search?q=standard%20library\">a standard library</a>, and I’m sure some of them are great. As I was scanning the options, I came across a fascinating method named <a href=\"https://js-std.pages.dev/Array/intersperse\">\n<code>intersperse</code></a>, which “inserts a separator between the elements of its list argument”.</p>\n\n<p>In this post, I’ll implement the same method in C# as an extension method on the <code>IEnumerable</code> interface.</p>\n\n<!--more-->\n\n<h2 id=\"intersperse-implementation-in-c\">Intersperse implementation in C#</h2>\n\n<p>Let’s first look at a few examples and the expected output before we look at the implementation of the method.</p>\n\n<pre><code class=\"language-csharp\">var hello = new string(\"Hello\".Intersperse('-').ToArray());\nvar one = new string(\"1\".Intersperse('x').ToArray());\nvar @null = ((IEnumerable&lt;object&gt;)null!).Intersperse(',').ToArray();\nvar array = new[] { 1, 2, 3 }.Intersperse(42).ToArray();\nvar menu = new [] {\"Home\", \"About\", \"Privacy\" }\n    .Intersperse(\" &gt; \")\n    .Aggregate((a, b) =&gt; $\"{a}{b}\");\n\nConsole.WriteLine($\"'{hello}' interspersed with '-' is {hello}\");\nConsole.WriteLine($\"1 interspersed is {one}\");\nConsole.WriteLine($\"null interspersed is {@null}\");\nConsole.WriteLine($\"array interspersed is {string.Join(\", \", array)}\");\nConsole.WriteLine($\"The menu is {menu}\");\n</code></pre>\n\n<p>Running this application, we will see the following output.</p>\n\n<pre><code class=\"language-text\">'H-e-l-l-o' interspersed with '-' is H-e-l-l-o\n1 interspersed is 1\nnull interspersed is System.Object[]\narray interspersed is 1, 42, 2, 42, 3\nThe menu is Home &gt; About &gt; Privacy\n</code></pre>\n\n<p>Let’s get to the implementation!</p>\n\n<pre><code class=\"language-csharp\">public static class EnumerableExtensions\n{\n    public static IEnumerable&lt;T&gt; Intersperse&lt;T&gt;(\n        this IEnumerable&lt;T&gt;? source,\n        T delimiter)\n    {\n        if (source is null) yield break;\n\n        using var enumerator = source.GetEnumerator();\n        var hasFirstElement = enumerator.MoveNext();\n        \n        if (hasFirstElement == false) yield break;\n        \n        yield return enumerator.Current;\n\n        while (enumerator.MoveNext())\n        {\n            yield return delimiter;\n            yield return enumerator.Current;\n        }\n    }\n}\n</code></pre>\n\n<p>I used\n<code>yield</code> to reduce the number of iterations on the collection being passed, as it would add unnecessary overhead. Additionally, I could have used a method like\n<code>Zip</code>, but that would have required more gymnastics than the current implementation.</p>\n\n<p>I hope you enjoyed reading this quick blog post, and as always, thanks for reading. Cheers.</p>\n",
      "Content": null,
      "Language": null,
      "Link": "https://khalidabuhakmeh.com/intersperse-values-for-enumerable-collections"
    },
    {
      "FeedId": "https://khalidabuhakmeh.com/feed.xml",
      "ItemId": "https://khalidabuhakmeh.com/checked-and-unchecked-arithmetic-operations-in-dotnet",
      "Title": "Checked and Unchecked Arithmetic Operations in .NET",
      "PublishDate": "2024-08-27T00:00:00+00:00",
      "Summary": "<p>The other day, I played around with the Fibonacci sequence and overflowed my\n<code>int</code> variables in surprisingly low iterations. Did you know you’ll overflow an integer in **48\n** iterations? Don’t believe me? Let’s take a look at the result of the code you’ll see later in this post.</p>\n\n<pre><code class=\"language-text\">Enter an integer: 48\nFibonacci sequence for 48:\n0,1,1,2,3,5,8,13,21,34,55,89,144,233,377,610,987,1597,2584,4181,6765,10946,17711,28657,46368,75025,121393,196418,\n317811,514229,832040,1346269,2178309,3524578,5702887,9227465,14930352,24157817,39088169,63245986,102334155,165580\n141,267914296,433494437,701408733,1134903170,1836311903,-1323752223\n</code></pre>\n\n<p>You’ll notice that the last value has looped back to a negative value. Oh no! This is a tell-tale sign that an overflow has occurred.</p>\n\n<p>This post will explore how to keep your applications safe from these overflow issues.</p>\n\n<!--more-->\n\n<h2 id=\"the-code-causing-the-overflow\">The code causing the overflow</h2>\n\n<p>First, let’s look at my implementation of the Fibonacci sequence generator. I’m using\n<code>Spectre.Console</code> to make the output more appealing, but it’s optional. I’m also using the\n<code>System.Numerics</code> namespace, which will allow you to experiment with different number types in .NET.</p>\n\n<pre><code class=\"language-csharp\">using System.Numerics;\nusing Spectre.Console;\n\nwhile (true)\n{\n    try\n    {\n        var integer = AnsiConsole.Ask&lt;int&gt;(\"Enter an integer: \");\n\n        if (integer &lt;= -1)\n        {\n            AnsiConsole.MarkupLine(\"Goodbye!\");\n            break;\n        }\n\n        var numbers = GenerateFibonacci&lt;int&gt;((uint)integer);\n        AnsiConsole.MarkupLine($\"[bold green]Fibonacci sequence for {integer}:[/]\");\n        AnsiConsole.MarkupLine($\"[bold yellow]{string.Join(\",\", numbers)}[/]\");\n        AnsiConsole.MarkupLine(\"\");\n    }\n    catch (ArgumentOutOfRangeException)\n    {\n        AnsiConsole.MarkupLine(\"[red]Error: pick a value greater than 2[/]\");\n    }\n}\n\nstatic T[] GenerateFibonacci&lt;T&gt;(uint iterations)\n    where T : INumber&lt;T&gt;\n{\n    ArgumentOutOfRangeException\n        .ThrowIfLessThan&lt;uint&gt;(iterations, 2, \"iterations must be greater than or equal to 2\");\n\n    T[] fib = new T[iterations];\n    fib[0] = T.Zero;\n    fib[1] = T.One;\n    for (int i = 2; i &lt; iterations; i++)\n    {\n        fib[i] = fib[i - 1] + fib[i - 2];\n    }\n\n    return fib;\n}\n</code></pre>\n\n<p>Neat! Now, why does the issue occur in the first place?</p>\n\n<h2 id=\"unchecked-arithmetic\">Unchecked Arithmetic</h2>\n\n<p>By default, .NET performs\n<code>unchecked</code> arithmetic operations. That means the runtime assumes you know what you’re doing when adding one variable to another. This is true in most day-to-day cases, as the scale of numbers most developers deal with is on the lower side of the maximum\n<code>int</code> and <code>long</code> values.</p>\n\n<p>For integers, the max value is <code>2147483647</code>, and it is doubled to <code>4294967295</code> if you drop the sign\n<code>—/+</code> from the value. For a long, the max value is\n<code>9223372036854775807</code>, which is quite a lot bigger but not infinite. If your application increments values indefinitely, you will run into overflow issues, and no known type will save you. It’s just math!</p>\n\n<p>As you’ve seen previously, the issue is that the numbers will loop around from positive to negative values and back. Your application will continue to “work” but likely will be nonsensical and wrong.</p>\n\n<p>How do we fix this issue? Well, there are two ways.</p>\n\n<h2 id=\"the-checked-keyword\">The <code>checked</code> keyword</h2>\n\n<p>The first and most precise way to fix this issue is to use the\n<code>checked</code> keyword. Using this keyword creates a scope where arithmetic overflows will trigger an <code>OverflowException</code>.</p>\n\n<pre><code class=\"language-csharp\">static T[] GenerateFibonacci&lt;T&gt;(uint iterations)\n    where T : INumber&lt;T&gt;\n{\n    ArgumentOutOfRangeException\n        .ThrowIfLessThan&lt;uint&gt;(iterations, 2, \"iterations must be greater than or equal to 2\");\n\n    T[] fib = new T[iterations];\n    fib[0] = T.Zero;\n    fib[1] = T.One;\n    for (int i = 2; i &lt; iterations; i++)\n    {\n        checked\n        {\n            fib[i] = fib[i - 1] + fib[i - 2];\n        }\n    }\n\n    return fib;\n}\n</code></pre>\n\n<p>Rerunning the same code results in the following exception.</p>\n\n<pre><code class=\"language-text\">Enter an integer: 49\nUnhandled exception. System.OverflowException: Arithmetic operation resulted in an overflow.\n   at System.Int32.System.Numerics.IAdditionOperators&lt;System.Int32,System.Int32,System.Int32&gt;.op_CheckedAddition(Int32 left, Int32 right)\n   at Program.&lt;&lt;Main&gt;$&gt;g__GenerateFibonacci|0_0[T](UInt32 iterations) in /Users/khalidabuhakmeh/RiderProjects/zed-sample/Program.cs:line 40\n   at Program.&lt;Main&gt;$(String[] args) in /Users/khalidabuhakmeh/RiderProjects/zed-sample/Program.cs:line 16\n</code></pre>\n\n<p>Nice. This technique is very selective and changes the intermediate language to call the\n<code>op_CheckedAddition</code> method instead.</p>\n\n<pre><code>      // [40 13 - 40 46]\n      IL_003f: ldloc.0      // fib\n      IL_0040: ldloc.1      // i\n      IL_0041: ldloc.0      // fib\n      IL_0042: ldloc.1      // i\n      IL_0043: ldc.i4.1\n      IL_0044: sub.ovf\n      IL_0045: ldelem       !!0/*T*/\n      IL_004a: ldloc.0      // fib\n      IL_004b: ldloc.1      // i\n      IL_004c: ldc.i4.2\n      IL_004d: sub.ovf\n      IL_004e: ldelem       !!0/*T*/\n      IL_0053: constrained. !!0/*T*/\n      IL_0059: call         !2/*T*/ class [System.Runtime]System.Numerics.IAdditionOperators`3&lt;!!0/*T*/, !!0/*T*/, !!0/*T*/&gt;::op_CheckedAddition(!0/*T*/, !1/*T*/)\n      IL_005e: stelem       !!0/*T*/\n</code></pre>\n\n<p>Cool! Problem solved, but what if we want all our arithmetic checked?</p>\n\n<h2 id=\"project-setting-for-checked-arithmetic\">Project Setting for Checked Arithmetic</h2>\n\n<p>You can add the\n<code>CheckForOverflowUnderflow</code> property in your project settings, and it will change all supported arithmetic operations to use checked operations.</p>\n\n<pre><code class=\"language-xml\">&lt;Project Sdk=\"Microsoft.NET.Sdk\"&gt;\n\n  &lt;PropertyGroup&gt;\n    &lt;OutputType&gt;Exe&lt;/OutputType&gt;\n    &lt;TargetFramework&gt;net8.0&lt;/TargetFramework&gt;\n    &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt;\n    &lt;Nullable&gt;enable&lt;/Nullable&gt;\n    &lt;CheckForOverflowUnderflow&gt;true&lt;/CheckForOverflowUnderflow&gt;\n  &lt;/PropertyGroup&gt;\n\n  &lt;ItemGroup&gt;\n    &lt;PackageReference Include=\"Spectre.Console\" Version=\"0.49.1\" /&gt;\n  &lt;/ItemGroup&gt;\n\n&lt;/Project&gt;\n</code></pre>\n\n<p>Easy peasy. Running the original code results in the same <code>System.OverflowException</code>.</p>\n\n<p>To opt out of checking, you can use the converse <code>unchecked</code> keyword.</p>\n\n<pre><code class=\"language-csharp\">static T[] GenerateFibonacci&lt;T&gt;(uint iterations)\n    where T : INumber&lt;T&gt;\n{\n    ArgumentOutOfRangeException\n        .ThrowIfLessThan&lt;uint&gt;(iterations, 2, \"iterations must be greater than or equal to 2\");\n\n    T[] fib = new T[iterations];\n    fib[0] = T.Zero;\n    fib[1] = T.One;\n    for (int i = 2; i &lt; iterations; i++)\n    {\n        unchecked\n        {\n            fib[i] = fib[i - 1] + fib[i - 2];\n        }\n    }\n\n    return fib;\n}\n</code></pre>\n\n<h2 id=\"conclusion\">Conclusion</h2>\n\n<p>We can sometimes take for granted arithmetic operations and assume they will work. In most cases, they will, but if you’re building mission-critical applications that could run into underflow and overflow situations, it’s better to check these values so as not to cause potential headaches down the line.</p>\n\n<p>I hope you enjoyed this post, and as always, thanks for reading.</p>\n\n",
      "Content": null,
      "Language": null,
      "Link": "https://khalidabuhakmeh.com/checked-and-unchecked-arithmetic-operations-in-dotnet"
    },
    {
      "FeedId": "https://khalidabuhakmeh.com/feed.xml",
      "ItemId": "https://khalidabuhakmeh.com/confirmation-dialogs-with-htmx-and-sweetalert",
      "Title": "Confirmation Dialogs with Htmx and SweetAlert",
      "PublishDate": "2024-08-20T00:00:00+00:00",
      "Summary": "<p>When building web experiences, there are safe operations and destructive ones. In the case of dangerous actions, it’s widespread to ask the user if they’d like to continue with the action before ultimately executing it.</p>\n\n<p>In this post, we’ll explore a valuable feature in the <a href=\"https://htmx.org/events/#htmx:confirm\">Htmx documentation</a> that allows you to intercept outgoing requests and present a <a href=\"https://sweetalert.js.org/guides/\">Sweet Alert confirmation dialog</a>. This feature can greatly enhance user experience and control in your web applications. Let’s dive in.</p>\n\n<!--more-->\n\n<h2 id=\"the-htmxconfirm-event\">The <code>htmx:confirm</code> event</h2>\n\n<p>Htmx users are likely familiar with the <code>hx-confirm</code> attribute, which is a declarative way to use the\n<code>confirm</code> JavaScript function. This uses your browser’s native functionality to display a confirmation dialog that allows the user one last chance to cancel their action.</p>\n\n<pre><code class=\"language-html\">&lt;button class=\"btn btn-danger\" \n        hx-post=\"\"\n        name=\"input\"\n        value=\"DELETE\"\n        hx-confirm=\"Are you sure?\"&gt;\n    Delete Important Stuff\n&lt;/button&gt;\n</code></pre>\n\n<p>But folks likely don’t know that the <code>htmx:confirm</code> event is triggered before **every\n** request. This allows you to intercept, stop, or continue any Htmx request on the client. This opens up a lot of UX opportunities.</p>\n\n<p>To register for this event, you will need the following JavaScript referenced in your web application.</p>\n\n<pre><code class=\"language-javascript\">document.body.addEventListener('htmx:confirm', function (evt) {\n    // do something here\n    // you can evt.preventDefault()\n    // or...\n    // evt.details.issueRequest() to continue.\n});\n</code></pre>\n\n<p>Let’s use the SweetAlert JavaScript library to enhance the dull confirm dialog.</p>\n\n<h2 id=\"add-sweetalert-to-htmx-confirmations\">Add SweetAlert to Htmx Confirmations</h2>\n\n<p>I’ll intercept an Htmx request using the event above and slot in a new confirmation dialog. This is the example shown in the Htm documentation. To get started, you’ll need to add a reference to SweetAlert in your web application.</p>\n\n<pre><code class=\"language-html\">&lt;script src=\"https://unpkg.com/sweetalert/dist/sweetalert.min.js\"&gt;&lt;/script&gt;\n</code></pre>\n\n<p>You’ll need to modify your target elements with the following attribute.</p>\n\n<pre><code class=\"language-html\">&lt;button class=\"btn btn-danger\" \n        hx-post=\"\"\n        name=\"input\"\n        value=\"DELETE\"\n        confirm-with-sweet-alert='true'&gt;\n    Delete Important Stuff\n&lt;/button&gt;\n</code></pre>\n\n<p>Note that this attribute is only necessary if you want to be more selective about when and where this new dialog appears. If you aren’t selective, you don’t need this attribute.</p>\n\n<p>Finally, let’s write some JavaScript code.</p>\n\n<pre><code class=\"language-javascript\">// site.js\ndocument.body.addEventListener('htmx:confirm', function (evt) {\n    if (evt.target.matches(\"[confirm-with-sweet-alert='true']\")) {\n        evt.preventDefault();\n        swal({\n            title: \"Are you sure?\",\n            text: \"Are you sure you are sure?\",\n            icon: \"warning\",\n            buttons: true,\n            dangerMode: true,\n        }).then((confirmed) =&gt; {\n            if (confirmed) {\n                evt.detail.issueRequest();\n            }\n        });\n    }\n});\n</code></pre>\n\n<p>The event will only be handled when the target element has our\n<code>confirm-with-sweet-alert</code> attribute. Otherwise, it falls back to Htmx’s default behavior.</p>\n\n<p>Cool! Now, you’ll see the SweetAlert dialog defined in our JavaScript whenever you click the button.</p>\n\n<h2 id=\"conclusion\">Conclusion</h2>\n\n<p>Htmx continues to surprise me with its flexibility and extension points. I recommend reading through more of the documentation to discover more features you can use in your applications. In this case, we can enhance the user experience of dangerous operations to give users more detailed information about the action they are about to take.</p>\n\n<p>I hope you try this in your applications, and as always, thanks for reading.</p>\n",
      "Content": null,
      "Language": null,
      "Link": "https://khalidabuhakmeh.com/confirmation-dialogs-with-htmx-and-sweetalert"
    },
    {
      "FeedId": "https://khalidabuhakmeh.com/feed.xml",
      "ItemId": "https://khalidabuhakmeh.com/how-to-pick-the-right-constructor-when-using-activatorutilities-in-dotnet",
      "Title": "How To Pick The Right Constructor When Using ActivatorUtilities In .NET",
      "PublishDate": "2024-08-13T00:00:00+00:00",
      "Summary": "<p>If you’ve ever worked with reflection in .NET, you’re likely familiar with <code>Activator</code>. In .NET 6, <a href=\"https://learn.microsoft.com/en-us/dotnet/api/microsoft.extensions.dependencyinjection.activatorutilities?view=net-6.0\">\n<code>ActivatorUtilities</code></a> was introduced to make it easier to create classes with dependencies. Constructor dependency injection is common in the .NET space, and you’re likely to run into several types that require constructor parameters before being created. The\n<code>Activator</code> class is a relic of a simpler time, whereas <code>ActivatorUtilities</code> meets developers where .NET is today.</p>\n\n<p>In this post, we’ll look at a code example of how to guide\n<code>ActivatorUtilities</code> toward the constructor you want to use when building instances of types that may have multiple constructors.</p>\n\n<!--more-->\n\n<h2 id=\"registering-a-type-and-the-dependencies\">Registering a Type and the Dependencies</h2>\n\n<p>Let’s start by looking at a <code>Person</code> class that has a total of three constructors. Wowza!</p>\n\n<pre><code class=\"language-csharp\">public class Person(string name, int age = 0)\n{\n    public Person(string name)\n        : this(name, 0)\n    {\n        Console.WriteLine(\"Person(string)\");\n    }\n    \n    public Person(object name)\n        : this(name.ToString()!, 41)\n    {\n        Console.WriteLine(\"Person(object)\");\n    }\n\n    public string Name { get; } = name;\n    public int Age { get; } = age;\n}\n</code></pre>\n\n<p>We have the following constructors.</p>\n\n<ol>\n  <li>A primary constructor that takes a name and an optional age</li>\n  <li>A constructor that takes a <code>string</code> dependency</li>\n  <li>A constructor that takes an <code>object</code> dependency</li>\n</ol>\n\n<p>Let’s set up our new\n<code>ServiceCollection</code> and add dependencies to the dependency collection. Note that you’ll need to install the NuGet package\n<code>Microsoft.Extensions.DependencyInjection</code> if you haven’t already.</p>\n\n<pre><code class=\"language-csharp\">using Microsoft.Extensions.DependencyInjection;\n\nvar collection = new ServiceCollection();\n\nvar value = \"Khalid\";\n\ncollection.AddTransient&lt;Person&gt;();\n// an instance of object\ncollection.AddSingleton&lt;object&gt;(value);\n// an instance of string\ncollection.AddSingleton&lt;string&gt;(value);\n\nvar serviceProvider = collection.BuildServiceProvider();\n\nvar person = ActivatorUtilities.CreateInstance&lt;Person&gt;(serviceProvider);\n\nConsole.WriteLine($\"{person.Name} is {person.Age} years old.\");\n</code></pre>\n\n<p>Take a second and guess what constructor implementation is called. We’ve satisfied all the dependencies, but just by looking at the code, you can feel a sense of uncertainty creeping in. Let’s run it.</p>\n\n<pre><code class=\"language-text\">Khalid is 0 years old.\n</code></pre>\n\n<p>Ah, the primary constructor got called. It makes sense; that’s what “primary” means, right?</p>\n\n<p>What if we want a different constructor to get called?</p>\n\n<h2 id=\"using-the-activatorutilitiesconstructor-attribute\">Using the ActivatorUtilitiesConstructor Attribute</h2>\n\n<p>In the <code>Microsoft.Extensions.DependencyInjection</code> package, you’ll find the\n<code>ActivatorUtilitiesConstructorAttribute</code>. This attribute gives the\n<code>ServiceProvider</code> hints at which constructor to call first. Let’s modify our\n<code>Person</code> class definition to call the constructor with the <code>object</code> dependency.</p>\n\n<pre><code class=\"language-csharp\">public class Person(string name, int age = 0)\n{\n    public Person(string name)\n        : this(name, 0)\n    {\n        Console.WriteLine(\"Person(string)\");\n    }\n    \n    [ActivatorUtilitiesConstructor]\n    public Person(object name)\n        : this(name.ToString()!, 41)\n    {\n        Console.WriteLine(\"Person(object)\");\n    }\n\n    public string Name { get; } = name;\n    public int Age { get; } = age;\n}\n</code></pre>\n\n<p>After rerunning our code, we’ll get the following output:</p>\n\n<pre><code class=\"language-text\">Person(object)\nKhalid is 41 years old.\n</code></pre>\n\n<p>Note that we did not change the executing code; we only added a single attribute. With this knowledge, you can now have all the constructors you want on your types but still make it clear which constructor you’d like\n<code>ActivatorUtilities</code> to use.</p>\n\n<p>There you have it. I hope you enjoyed this post. As always, thanks for reading and sharing with friends and colleagues. Cheers.</p>\n",
      "Content": null,
      "Language": null,
      "Link": "https://khalidabuhakmeh.com/how-to-pick-the-right-constructor-when-using-activatorutilities-in-dotnet"
    },
    {
      "FeedId": "https://khalidabuhakmeh.com/feed.xml",
      "ItemId": "https://khalidabuhakmeh.com/add-a-property-to-the-top-level-statements-program-class",
      "Title": "Add a Property to the Top-level Statements Program class",
      "PublishDate": "2024-08-06T00:00:00+00:00",
      "Summary": "<p>The evolution of the C# language has introduced us to many new features and probably made a lot of folks re-evaluate how they write their apps. In the latest versions of .NET, nothing has been marked such a stylistic shift as the introduction of top-level statements.</p>\n\n<p>In this short post, we’ll examine how to add properties to your <code>Program</code> instance to improve the readability of utility console applications.</p>\n\n<!--more-->\n\n<h2 id=\"top-level-statement-files\">Top-level statement files</h2>\n\n<p>When starting a new console application, you can create a <code>Program.cs</code> file and opt into the top-level statements style. The single line below is a valid .NET application.</p>\n\n<pre><code class=\"language-csharp\">Console.WriteLine(\"Hello, World\");\n</code></pre>\n\n<p>At compile-time, the compiler generates the typical ceremony associated with traditional applications. Looking at our app’s low-level C# version, we’ll see the symbols we typically expect to see in a .NET app.</p>\n\n<pre><code class=\"language-csharp\">using System;\nusing System.Runtime.CompilerServices;\n\n[CompilerGenerated]\ninternal class Program\n{\n  private static void &lt;Main&gt;$(string[] args)\n  {\n    Console.WriteLine(\"Hello, World\");\n  }\n\n  public Program()\n  {\n    base..ctor();\n  }\n}\n</code></pre>\n\n<p>You’ll see that there is always a <code>Program</code> class and the expected entry point of <code>static void Main</code>.</p>\n\n<p>Let’s get more complex.</p>\n\n<pre><code class=\"language-csharp\">Console.WriteLine($\"Hello, {GetName()}\");  \n  \nstring GetName()  \n{  \n    return Environment.GetCommandLineArgs()[1];  \n}\n</code></pre>\n\n<p>What does this look like now?</p>\n\n<pre><code class=\"language-csharp\">using System;\nusing System.Runtime.CompilerServices;\n\n[CompilerGenerated]\ninternal class Program\n{\n  private static void &lt;Main&gt;$(string[] args)\n  {\n    Console.WriteLine(string.Concat(\"Hello, \", Program.&lt;&lt;Main&gt;$&gt;g__GetName|0_0()));\n  }\n\n  public Program()\n  {\n    base..ctor();\n  }\n\n  [NullableContext(1)]\n  [CompilerGenerated]\n  internal static string &lt;&lt;Main&gt;$&gt;g__GetName|0_0()\n  {\n    return Environment.GetCommandLineArgs()[1];\n  }\n}\n</code></pre>\n\n<p>The method attached to the end of the file becomes an internal static method on the Program. Can we add a property? In this case, a property would be much more readable than a method.</p>\n\n<pre><code class=\"language-csharp\">// not valid c#\nConsole.WriteLine($\"Hello, {Name}\");  \n  \nstring Name =&gt; Environment.GetCommandLineArgs()[1];\n</code></pre>\n\n<p><strong>This syntax does not work.</strong> Still, we can add a <code>Name</code> property to our <code>Program</code> file.</p>\n\n<h2 id=\"adding-the-property-with-a-partial-class\">Adding the property with a partial class</h2>\n\n<p>How do we get top-level properties into our top-level statements file? Well, it’s pretty straightforward. The <code>Program</code> class can be extended using the <code>partial</code> keyword. Let’s do that.</p>\n\n<pre><code class=\"language-csharp\">Console.WriteLine($\"Hello, {Name}\");\n\npartial class Program\n{\n    static string Name =&gt; Environment.GetCommandLineArgs()[1];    \n}\n</code></pre>\n\n<p>Now, we can add scoped properties to our top-level statement files. Returning to our low-level C#, we can see what the compiler is doing.</p>\n\n<pre><code class=\"language-csharp\">using System;\nusing System.Runtime.CompilerServices;\n\ninternal class Program\n{\n  private static void &lt;Main&gt;$(string[] args)\n  {\n    Console.WriteLine(string.Concat(\"Hello, \", Program.Name));\n  }\n\n  [Nullable(1)]\n  private static string Name\n  {\n    [NullableContext(1)] get\n    {\n      return Environment.GetCommandLineArgs()[1];\n    }\n  }\n\n  public Program()\n  {\n    base..ctor();\n  }\n}\n</code></pre>\n\n<p>You can also move your partial <code>Program</code> class to another file if you are going for that minimal aesthetic entry point look. One thing to note is that all properties must be <code>static</code>, as the properties are referenced in the <code>static void Main</code> method.</p>\n\n<p>I hope this post helps, and as always, thanks for reading. Cheers.</p>\n",
      "Content": null,
      "Language": null,
      "Link": "https://khalidabuhakmeh.com/add-a-property-to-the-top-level-statements-program-class"
    },
    {
      "FeedId": "https://khalidabuhakmeh.com/feed.xml",
      "ItemId": "https://khalidabuhakmeh.com/fix-dotnet-maui-missingentitlement-and-provisioning-profiles-issues",
      "Title": "Fix .NET MAUI MissingEntitlement and Provisioning Profiles Issues",
      "PublishDate": "2024-07-30T00:00:00+00:00",
      "Summary": "<p>There are times on this blog when I write posts for the reader’s benefit and times when I need to memorialize my own\npain and suffering to find a solution to a seemingly simple issue. This post is the latter.</p>\n\n<p>In this post, we’ll see what it takes to fix the <code>MissingEntitlement</code> and “Could not find any available provisioning\nprofiles” errors.</p>\n\n<p><strong>Also, be warned: You might not like what you see.</strong></p>\n\n<p>Ok, let’s go!</p>\n\n<!--more-->\n\n<h2 id=\"ios-security-and-entitlements\">iOS, Security, and Entitlements</h2>\n\n<p>I recently purchased the <a href=\"https://www.manning.com/books/dot-net-maui-in-action\">“.NET MAUI in Action” book</a> and was working\nthrough the sample application in Chapter 3. The author’s\nperspective differs from mine in that their app targets Windows, and I am targeting iOS. As one might expect, the\ndetails between the two target platforms differ.</p>\n\n<p>This difference led to my first issue running the sample application targeting iOS; I got this exception and crashed the\napplication.</p>\n\n<pre><code>System.Exception: Error adding record: MissingEntitlement\n   at Microsoft.Maui.Storage.KeyChain.SetValueForKey(String value, String key, String service)\n   at Microsoft.Maui.Storage.SecureStorageImplementation.SetAsync(String key, String value, SecAccessible accessible)\n   at Microsoft.Maui.Storage.SecureStorageImplementation.PlatformSetAsync(String key, String data)\n   at Microsoft.Maui.Storage.SecureStorageImplementation.SetAsync(String key, String value)\n   at Microsoft.Maui.Storage.SecureStorage.SetAsync(String key, String value)\n</code></pre>\n\n<p>This leads users to the first issue, a missing <code>Entitlements.plist</code> file. What are Entitlements?</p>\n\n<p><strong><em>Side Note: The <code>MissingEntitlment</code> exception could really use a more helpful error message. WHICH ONE MAUI? WHICH\nONE?!</em></strong></p>\n\n<p>All iOS applications are sandboxed, allowing the app only to execute iOS functions it has requested and explicitly been\ngranted by the user. Entitlements ensure apps behave as intended and don’t expose users to unnecessary risks. For your\napplication to use iOS features like Maps, KeyChain, or Siri, you must first add values to the <code>Entitlements.plist</code> file\nto request access. Only then can you use these features.</p>\n\n<p>You can read more\nabout <a href=\"https://learn.microsoft.com/en-us/dotnet/maui/ios/entitlements?view=net-maui-8.0&amp;tabs=vs#add-an-entitlementsplist-file\">Entitlements on the Microsoft documentation site</a>.</p>\n\n<p><em><strong>Side Note: I would think the .NET MAUI template would have an empty entitlements file already in the <code>Platforms/iOS</code>\nfolder, but\nit\ndoesn’t.</strong></em></p>\n\n<p>So, in the <code>Platforms/iOS</code> folder, you’ll need to create an <code>Entitlements.plist</code>file with the following XML.</p>\n\n<pre><code class=\"language-xml\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt;\n&lt;!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\"&gt;\n&lt;plist version=\"1.0\"&gt;\n    &lt;dict&gt;\n    &lt;/dict&gt;\n&lt;/plist&gt;\n</code></pre>\n\n<p>For enabling the Maps feature, your <code>Entitlements.plist</code> file might look like the following.</p>\n\n<pre><code class=\"language-xml\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\"&gt;\n&lt;plist version=\"1.0\"&gt;\n    &lt;dict&gt;\n        &lt;key&gt;com.apple.developer.maps&lt;/key&gt;\n        &lt;true/&gt;\n    &lt;/dict&gt;\n&lt;/plist&gt;\n</code></pre>\n\n<p>You can also use <a href=\"https://jetbrains.com/rider\">JetBrains Rider’s</a> plist editor to create and manage these files with\nschema validation and an excellent UI experience.</p>\n\n<p>You should be good to go, right? Not so fast. Running your application now presents you with the following error.</p>\n\n<pre><code>1&gt;Xamarin.Shared.targets(1820,3): Error  : Could not find any available provisioning profiles for MauiTodo on iOS.\n</code></pre>\n\n<p>Wait…. what?! What’s going on? I’m only trying to deploy to the iOS simulator!</p>\n\n<h2 id=\"provisioning-profiles-apple-developer-account-and-physical-devices\">Provisioning Profiles, Apple Developer Account, and Physical Devices</h2>\n\n<p>Adding the <code>Entitlements.plist</code> file has cascaded into a secondary issue in the build process. (Note that I’m currently\nusing .NET 8.0 and 9.0 workloads).</p>\n\n<pre><code>1&gt;Xamarin.Shared.targets(1820,3): Error  : Could not find any available provisioning profiles for MauiTodo on iOS.\n</code></pre>\n\n<p>MAUI is looking for a provisioning profile. What is a provisioning profile?</p>\n\n<blockquote>\n  <p>A <em>development provisioning profile</em> allows your app to launch on devices and use certain app services during\ndevelopment. For an individual, a development provisioning profile allows apps signed by you to run on your registered\ndevices. For an organization, a development provisioning profile allows apps developed by a team to be signed by any\nmember of the team and installed on their\ndevices. –<a href=\"https://developer.apple.com/help/account/manage-profiles/create-a-development-provisioning-profile\">Apple</a></p>\n</blockquote>\n\n<p>Huh. How do you fix this issue? I just want to deploy my app to my local simulator.</p>\n\n<p>Here are the steps you’ll need to fix this, and I’ll start with the two most significant hurdles.</p>\n\n<ol>\n  <li>A physical iOS device. <strong>Yes, you will need a physical device.</strong></li>\n  <li>An Apple Developer Account at $99/year. <a href=\"https://developer.apple.com/\">Sign up here</a> or give up now.</li>\n  <li>macOS and XCode</li>\n</ol>\n\n<p>First, Be sure to\nenable <a href=\"https://developer.apple.com/documentation/xcode/enabling-developer-mode-on-a-device\">Developer Mode</a> on your\ndevice. You’ll need the identifier for this physical device. To get your device’s UUID, connect your iOS device to your\nmacOS machine and launch XCode. Open “Window | Devices and Simulators.” Here, you’ll see your device’s ID. You’ll need\nthis to register the device.</p>\n\n<p>Log in to your new Apple Developer account and add your physical device. You\ncan <a href=\"https://developer.apple.com/account/resources/devices/add\">visit the “Register a New Device” page.</a> Here, you’ll\nregister the physical device, at which point you’ll get a provisioning profile.</p>\n\n<p>Now, open your MAUI project in XCode (which you can do from JetBrains Rider). Under the Project settings’ “Signing &amp;\nCapabilities” tab, select a Team and check the <strong>Automatically manage signing</strong> checkbox. If you don’t see a Team, be\nsure to add your Apple Developer account to Xcode under “Settings | Accounts” and try again.</p>\n\n<p><img src=\"https://res.cloudinary.com/abuhakmeh/image/fetch/c_limit,f_auto,q_auto,w_800/https://khalidabuhakmeh.com/assets/images/posts/misc/maui-xcode-provisioing-profile-certificate.png\" srcset=\"https://res.cloudinary.com/abuhakmeh/image/fetch/c_limit,f_auto,q_auto,w_320/https://khalidabuhakmeh.com/assets/images/posts/misc/maui-xcode-provisioing-profile-certificate.png 320w, https://res.cloudinary.com/abuhakmeh/image/fetch/c_limit,f_auto,q_auto,w_540/https://khalidabuhakmeh.com/assets/images/posts/misc/maui-xcode-provisioing-profile-certificate.png 540w, https://res.cloudinary.com/abuhakmeh/image/fetch/c_limit,f_auto,q_auto,w_760/https://khalidabuhakmeh.com/assets/images/posts/misc/maui-xcode-provisioing-profile-certificate.png 760w, https://res.cloudinary.com/abuhakmeh/image/fetch/c_limit,f_auto,q_auto,w_980/https://khalidabuhakmeh.com/assets/images/posts/misc/maui-xcode-provisioing-profile-certificate.png 980w, https://res.cloudinary.com/abuhakmeh/image/fetch/c_limit,f_auto,q_auto,w_1200/https://khalidabuhakmeh.com/assets/images/posts/misc/maui-xcode-provisioing-profile-certificate.png 1200w\" sizes=\"100vw\" alt=\"Xcode showing provisioning profile\" loading=\"lazy\" width=\"1742\" height=\"738\" crossorigin=\"anonymous\" /></p>\n\n<p>If all goes well, you should see values for the Provisioning Profiles and Signing Certificate fields in the bottom iOS\nsection.</p>\n\n<p>Now, you can go back to building and deploying your application with Entitlements to the iOS simulator without any\nissues. Xcode will handle signing your apps from here on out.</p>\n\n<h2 id=\"conclusion\">Conclusion</h2>\n\n<p>The steps outlined here fixed my issue, but honestly, it took way longer and a significant amount of money 💰 to solve\nthis issue, given the price of a physical iOS device and an Apple Developer subscription. I am still not sure if this is\nan Xcode and iOS issue or a <a href=\"https://github.com/dotnet/maui/issues/19148\">MAUI issue</a>. All I know is that it’s a MAUI\ndeveloper stumbling block that I ran into, and it’s now “solved.”</p>\n\n<p>I hope this post helps you on your MAUI development journey. Cheers.</p>\n",
      "Content": null,
      "Language": null,
      "Link": "https://khalidabuhakmeh.com/fix-dotnet-maui-missingentitlement-and-provisioning-profiles-issues"
    },
    {
      "FeedId": "https://khalidabuhakmeh.com/feed.xml",
      "ItemId": "https://khalidabuhakmeh.com/health-checks-for-aspnet-core-and-entity-framework-core",
      "Title": "Health Checks for ASP.NET Core and Entity Framework Core",
      "PublishDate": "2024-07-23T00:00:00+00:00",
      "Summary": "<p>I’ve recently been reading up on .NET Aspire and have found a lot of cool .NET tech underpinning the offering. One of\nthe tools that has gotten a glow-up since I last looked at it has been <code>Microsoft.Extensions.Diagnostics.HealthChecks</code>\npackage provides you with the infrastructure to perform various types of system health monitoring.</p>\n\n<p>In this post, we’ll look at installing the health checks package into existing ASP.NET Core applications and using an\nadditional package to perform health checks on your databases using Entity Framework Core.</p>\n\n<!--more-->\n\n<h2 id=\"install-and-set-up-health-checks\">Install and Set Up Health Checks</h2>\n\n<p>In an existing ASP.NET Core application, you’ll need to install the following package.</p>\n\n<pre><code>dotnet add package Microsoft.Extensions.Diagnostics.HealthChecks\n</code></pre>\n\n<p>Once the package has been installed, you must do several setup tasks in your <code>Program</code> file.</p>\n\n<p>The first step is to register the <code>HealthChecks</code> middleware and services in the services collection.</p>\n\n<pre><code class=\"language-csharp\">builder.Services.AddHealthChecks();\n</code></pre>\n\n<p>Next, in your ASP.NET Core request pipeline, you’ll need to register the middleware. You can choose whether to place the\nmiddleware before or after the authorization middleware, but as you’ll see, there might not be much reason to have this\nbehind an auth check.</p>\n\n<p>You’ll need to choose a URL path to access your health check. I used the <code>/health</code> path for this case, but feel free to\nchoose whatever suits you.</p>\n\n<pre><code class=\"language-csharp\">app.UseRouting();\n\napp.UseHealthChecks(\"/health\");\n\napp.UseAuthorization();\n</code></pre>\n\n<p>Navigating to the <code>/health</code> endpoint will get you the following response.</p>\n\n<pre><code>Healthy\n</code></pre>\n\n<p>The response will always be a string of <code>Healthy</code>, <code>Unhealthy</code>, or <code>Degraded</code>. This makes it simple for third-party\nhealth check systems to determine your application’s general health quickly. Your logging system will handle the details\nof the issues.</p>\n\n<p>Let’s write a new health check! You’ll need to implement the <code>IHealthCheck</code> interface and implement the\n<code>CheckHealthAsync</code> method.</p>\n\n<pre><code class=\"language-csharp\">using Microsoft.Extensions.Diagnostics.HealthChecks;\n\nnamespace Healthnut.Services;\n\npublic class KhalidHealthCheck: IHealthCheck\n{\n    public Task&lt;HealthCheckResult&gt; CheckHealthAsync(HealthCheckContext context, CancellationToken cancellationToken = new CancellationToken())\n    {\n        return Task.FromResult(\n            HealthCheckResult.Degraded(\"Khalid ate some ice cream\")\n        );\n    }\n}\n</code></pre>\n\n<p>These classes are added to your services collection, so they can opt-in to any dependency injection mechanisms you might\nwant to use. Let’s add it to our health checks. Modify the registration in the <code>Program</code> file.</p>\n\n<pre><code class=\"language-csharp\">builder.Services\n    .AddHealthChecks()\n    .AddCheck&lt;KhalidHealthCheck&gt;(\"Khalid\");\n</code></pre>\n\n<p>Note that health checks require a unique name. You’ll see a <code>Degraded</code> string after rerunning the app and hitting the\n<code>/health</code> endpoint. What’s more interesting is that you’ll see a new log message on your terminal.</p>\n\n<pre><code>warn: Microsoft.Extensions.Diagnostics.HealthChecks.DefaultHealthCheckService[103]\n      Health check Khalid with status Degraded completed after 2.5366ms with message 'Khalid ate some ice cream'\n</code></pre>\n\n<p>Health checks are <code>async</code>, so you can write any logic you need to determine the health of your system, but be sure it’s\nsnappy and non-resource-intensive checks; otherwise, ironically, the health checks could lead to unhealthy results.</p>\n\n<p>If you hate the formalities of classes and interfaces, you can also choose to implement health checks directly at the\npoint of registration. This can be helpful for microservices or smaller utility applications.</p>\n\n<pre><code class=\"language-csharp\">builder.Services\n    .AddHealthChecks()\n    .AddCheck&lt;KhalidHealthCheck&gt;(\"Khalid\")\n    .AddAsyncCheck(\"Butter\", async () =&gt;\n    {\n        await Task.Delay(1000);\n        return new HealthCheckResult(HealthStatus.Healthy, \"Butter is good\");\n    });\n</code></pre>\n\n<p>So far, it’s been good, but let’s now use health checks for our database.</p>\n\n<h2 id=\"health-checks-for-entity-framework-core\">Health checks for Entity Framework Core</h2>\n\n<p>You’ll need to install a new package to get a new extension method for EF Core health checks. You should already have an\nEntity Framework Core application with a <code>DbContext</code> implementation. If you don’t, create one. Now, the package.</p>\n\n<pre><code>dotnet add package Microsoft.Extensions.Diagnostics.HealthChecks.EntityFrameworkCore\n</code></pre>\n\n<p>Once installed, we can update our health check registration using the following line.</p>\n\n<pre><code class=\"language-csharp\">builder.Services\n    .AddHealthChecks()\n    .AddCheck&lt;KhalidHealthCheck&gt;(\"Khalid\")\n    .AddAsyncCheck(\"Butter\", async () =&gt;\n    {\n        await Task.Delay(1000);\n        return new HealthCheckResult(HealthStatus.Healthy, \"Butter is good\");\n    })\n    .AddDbContextCheck&lt;Database&gt;(\n        \"people check\",\n        customTestQuery: (db, token) =&gt; db.People.AnyAsync(token)\n    );\n</code></pre>\n\n<p>The <code>AddDbContextCheck</code> takes a generic argument of a <code>DbContext</code> implementation, and the <code>customTestQuery</code> argument is\na query you can execute to verify the health of your database. The provided query must return a single <code>bool</code> value. Use\nlogical LINQ operators such as <code>Any</code> and <code>All</code>, or write queries that evaluate entirely on the server with limited\nresults returned. Oh, and keep these queries snappy and to the point. Doing expensive database checks may impact the\nhealth of your application.</p>\n\n<p>Rerunning the application, we’ll see the log message we expect.</p>\n\n<pre><code>info: Microsoft.EntityFrameworkCore.Database.Command[20101]\n      Executed DbCommand (14ms) [Parameters=[], CommandType='Text', CommandTimeout='30']\n      SELECT EXISTS (\n          SELECT 1\n          FROM \"People\" AS \"p\")\nfail: Microsoft.Extensions.Diagnostics.HealthChecks.DefaultHealthCheckService[103]\n      Health check people check with status Unhealthy completed after 1545.2538ms with message '(null)'\n</code></pre>\n\n<p>Neat!</p>\n\n<h2 id=\"conclusion\">Conclusion</h2>\n\n<p>We barely scratched the surface of what’s possible with the health checks feature of ASP.NET Core, and there’s so much\nmore you can do to provide real-time health updates of your applications. There’s also a wide variety of health check\nextensions on NuGet, so you’ll rarely have to write your own, but it’s nice knowing you could with such a\nstraightforward interface.</p>\n\n<p>Finally, It’s important to remember that you’ll need a monitoring tool to watch these endpoints to get the most out of\nthem, but I’ll leave that decision up to you.</p>\n\n<p>As always, thanks for reading and cheers.</p>\n",
      "Content": null,
      "Language": null,
      "Link": "https://khalidabuhakmeh.com/health-checks-for-aspnet-core-and-entity-framework-core"
    },
    {
      "FeedId": "https://khalidabuhakmeh.com/feed.xml",
      "ItemId": "https://khalidabuhakmeh.com/how-to-fix-dotnet-nullability-warnings-for-guarded-members",
      "Title": "How To Fix .NET Nullability Warnings For Guarded Members",
      "PublishDate": "2024-07-16T00:00:00+00:00",
      "Summary": "<p>Nullability provides developers with development-time warnings that can help reduce dereferencing issues. These errors\ncan be costly, but with the power of a few additional checks in code, developers can easily avoid them, putting them in\ncontrol of their code’s quality.</p>\n\n<p>In this post, we’ll see a code sample that should be “safe” yet continues to give IDE and build-time warnings about\ndereferencing of a possibly null reference. We’ll also see how to adjust your code to remove unnecessary warnings in\ncurrent and future projects.</p>\n\n<!--more-->\n\n<h2 id=\"dereference-of-a-possibly-null-reference\">Dereference of a possibly null reference</h2>\n\n<p>Let’s look at some basic C# code, which you likely have something similar to in your projects.</p>\n\n<pre><code class=\"language-csharp\">var database = new Database();\n\n// Name cannot be null when Initialize is true\nif (database.Initialized)\n{\n    // This has a warning about Name being null\n    var length = database.Name.Length;\n    \n    Console.WriteLine($\"{database.Name} and length is {length}\");\n}\n\nConsole.WriteLine(\"Hello, World!\");\n\npublic class Database\n{\n    public string? Name { get; set; }\n    public bool Initialized =&gt; Name is not null;\n}\n</code></pre>\n\n<p>Here, we have a <code>Database</code> class, and we know the <code>Name</code> property will never be <code>null</code> if the boolean property of\n<code>Initialized</code> returns <code>true</code>. Yet, you likely see a yellow line warning you with the message “Dereference of a possibly\nnull reference” in your editor. Additionally, this warning shows up in your build logs.</p>\n\n<pre><code class=\"language-text\">Program.cs(9,18): Warning CS8602 : Dereference of a possibly null reference.\n</code></pre>\n\n<p>We can ignore this, right? Well, not if your team uses the MSBuild element of <code>TreatWarningsAsErrors</code>.</p>\n\n<pre><code class=\"language-xml\">&lt;Project Sdk=\"Microsoft.NET.Sdk\"&gt;\n\n    &lt;PropertyGroup&gt;\n        &lt;OutputType&gt;Exe&lt;/OutputType&gt;\n        &lt;TargetFramework&gt;net9.0&lt;/TargetFramework&gt;\n        &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt;\n        &lt;Nullable&gt;enable&lt;/Nullable&gt;\n        &lt;TreatWarningsAsErrors&gt;true&lt;/TreatWarningsAsErrors&gt;\n    &lt;/PropertyGroup&gt;\n\n&lt;/Project&gt;\n\n</code></pre>\n\n<p>Oh no! Our build is broken!</p>\n\n<pre><code class=\"language-text\">0&gt;Program.cs(9,18): Error CS8602 : Dereference of a possibly null reference.\n0&gt;------- Finished building project: ConsoleApp2. Succeeded: False. Errors: 1. Warnings: 0\n</code></pre>\n\n<p>How do we fix this?</p>\n\n<h2 id=\"using-membernotnullwhen-on-boolean-properties\">Using MemberNotNullWhen On Boolean Properties</h2>\n\n<p>There are several attributes under the <code>System.Diagnostics.CodeAnalysis</code> namespace that we can use to give the compiler\nhints about the safety of the written code. The attribute we’ll use is <code>MemberNotNullWhen</code>, which allows us to decorate\na property or method that returns a <code>bool</code> result and tie the safety check to one or more other properties.</p>\n\n<pre><code class=\"language-csharp\">using System.Diagnostics.CodeAnalysis;\n\nvar database = new Database();\n\n// Name cannot be null when Initialize is true\nif (database.Initialized)\n{\n    // The warning/error is now gone\n    var length = database.Name.Length;\n    \n    Console.WriteLine($\"{database.Name} and length is {length}\");\n}\n\nConsole.WriteLine(\"Hello, World!\");\n\npublic class Database\n{\n    public string? Name { get; set; }\n    // this attribute fixes the issue\n    [MemberNotNullWhen(true, nameof(Name))]\n    public bool Initialized =&gt; Name is not null;\n}\n</code></pre>\n\n<p>The steps in the code are as follows:</p>\n\n<ol>\n  <li>Decorate a boolean property or method that returns <code>bool</code> with <code>MemberNotNullWhen</code>.</li>\n  <li>Choose the value state that signals safety to the compiler.</li>\n  <li>Choose one or more nullable members covered by the <code>bool</code> member.</li>\n</ol>\n\n<p>There should be no editor warnings or build errors, and you can live the good life. I hope you found this post helpful.\nAs always, thank you for reading. Cheers.</p>\n",
      "Content": null,
      "Language": null,
      "Link": "https://khalidabuhakmeh.com/how-to-fix-dotnet-nullability-warnings-for-guarded-members"
    },
    {
      "FeedId": "https://khalidabuhakmeh.com/feed.xml",
      "ItemId": "https://khalidabuhakmeh.com/html-datalist-for-aspnet-core-inputs",
      "Title": "HTML Datalist for ASP.NET Core Inputs",
      "PublishDate": "2024-07-09T00:00:00+00:00",
      "Summary": "<p>In my last blog post, I discussed range inputs. This time, we’ll examine a tag helper that adds support for the HTML element of <code>datalist</code>.</p>\n\n<p>In this short post, I’ll explain what a <code>datalist</code> is and why you may want to consider using it in your ASP.NET Core applications. Finally, we’ll implement a set of tag helpers to make using the <code>datalist</code> element more straightforward with your ASP.NET Core MVC and Razor Page applications.</p>\n\n<!--more-->\n\n<h2 id=\"what-is-datalist\">What is <code>datalist</code>?</h2>\n\n<p>True to its name, the <code>datalist</code> element allows web developers to create a list of options that are permissible or recommended for form input elements. This allows users to choose from a predefined list the application developer has curated.</p>\n\n<p>Let’s look at a quick HTML <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/datalist#browser_compatibility\">example pulled from the MDN web docs</a>.</p>\n\n<pre><code class=\"language-html\">&lt;label for=\"ice-cream-choice\"&gt;Choose a flavor:&lt;/label&gt;\n&lt;input list=\"ice-cream-flavors\" id=\"ice-cream-choice\" name=\"ice-cream-choice\"/&gt;\n\n&lt;datalist id=\"ice-cream-flavors\"&gt;\n    &lt;option value=\"Chocolate\"&gt;&lt;/option&gt;\n    &lt;option value=\"Coconut\"&gt;&lt;/option&gt;\n    &lt;option value=\"Mint\"&gt;&lt;/option&gt;\n    &lt;option value=\"Strawberry\"&gt;&lt;/option&gt;\n    &lt;option value=\"Vanilla\"&gt;&lt;/option&gt;\n&lt;/datalist&gt;\n</code></pre>\n\n<p>The <code>ice-cream-choice</code> field will use the <code>datalist</code> options and provide users with a dropdown of potential options but still allow users to type their choices using freeform text.</p>\n\n<p>The list attribute supports multiple input types, including <code>text</code>, <code>date</code>, <code>range</code>, and <code>color</code>. While the <code>datalist</code> is supported in most browsers, Firefox partially supports the input field and does not work with the types <code>date</code>, <code>time</code>, <code>range</code>, and <code>color</code>.</p>\n\n<p>Providing a <code>datalist</code> can guide your users to common answers for otherwise fuzzy fields. The element might be helpful in surveys or support forms.</p>\n\n<p>How do we use it in ASP.NET Core MVC and Razor Pages?</p>\n\n<h2 id=\"datalist-taghelper-for-mvc-and-razor-pages\">Datalist TagHelper for MVC and Razor Pages</h2>\n\n<p>Let’s start with our end goal of using a <code>datalist</code> in our Razor views. We’ll look at a Razor Pages example where we’ll see the HTML and C# Page Model.</p>\n\n<pre><code class=\"language-csharp\">using Microsoft.AspNetCore.Mvc;\nusing Microsoft.AspNetCore.Mvc.RazorPages;\nusing Microsoft.AspNetCore.Mvc.Rendering;\n\nnamespace OutputValues.Pages;\n\npublic class IndexModel(ILogger&lt;IndexModel&gt; logger) : PageModel\n{\n    [BindProperty]\n    public string? Value { get; set; }\n\n    public string? Message { get; set; }\n\n    public List&lt;SelectListItem&gt; Fruits { get; } =\n    [\n        new(\"The finest from Tokyo\", \"Apple\"),\n        new(\"The curviest fruit\", \"Banana\"),\n        new(\"The citrus is amazing\", \"Orange\")\n    ];\n\n    public void OnGet()\n    {\n    }\n\n    public void OnPost()\n    {\n        Message = $\"You selected {Value}!\";\n    }\n}\n</code></pre>\n\n<p>We’ll reuse the <code>SelectListItem</code> class commonly used by the select element. There’s no reason to reinvent the wheel here. Next, let’s update our view.</p>\n\n<pre><code class=\"language-razor\">&lt;form method=\"post\" asp-page=\"Index\"&gt;\n    &lt;div&gt;\n        &lt;label class=\"form-label\" asp-for=\"Value\"&gt;&lt;/label&gt;\n        &lt;input class=\"form-control\" asp-for=\"Value\" asp-list=\"Fruits\" /&gt;\n    &lt;/div&gt;\n\n    &lt;button type=\"submit\" class=\"mt-3 btn btn-primary\"&gt;\n        Add\n    &lt;/button&gt;\n    \n    &lt;datalist asp-items=\"Fruits\"&gt;&lt;/datalist&gt;\n&lt;/form&gt;\n</code></pre>\n\n<p>That’s it! We now have an input field backed by our new <code>datalist</code>. Let’s see what the output HTML looks like.</p>\n\n<pre><code class=\"language-html\">\n&lt;form method=\"post\" action=\"/\"&gt;\n    &lt;div&gt;\n        &lt;label class=\"form-label\" for=\"Value\"&gt;Value&lt;/label&gt;\n        &lt;input class=\"form-control\" type=\"text\" id=\"Value\" name=\"Value\" value=\"\" list=\"Fruits\"&gt;\n    &lt;/div&gt;\n\n    &lt;button type=\"submit\" class=\"mt-3 btn btn-primary\"&gt;\n        Add\n    &lt;/button&gt;\n\n    &lt;datalist id=\"Fruits\"&gt;\n        &lt;option label=\"The finest from Tokyo\" value=\"Apple\"&gt;&lt;/option&gt;\n        &lt;option label=\"The curviest fruit\" value=\"Banana\"&gt;&lt;/option&gt;\n        &lt;option label=\"The citrus is amazing\" value=\"Orange\"&gt;&lt;/option&gt;\n    &lt;/datalist&gt;\n    &lt;input name=\"__RequestVerificationToken\" type=\"hidden\" value=\"\"&gt;\n&lt;/form&gt;\n</code></pre>\n\n<p>The tag helpers are designed to look for <code>asp-items</code> on a <code>datalist</code> element and an <code>asp-list</code> attribute on any input field. Let’s see how these two tag helpers are implemented.</p>\n\n<pre><code class=\"language-csharp\">using Microsoft.AspNetCore.Mvc.Rendering;\nusing Microsoft.AspNetCore.Mvc.ViewFeatures;\nusing Microsoft.AspNetCore.Razor.TagHelpers;\n\nnamespace OutputValues;\n\n[HtmlTargetElement(\"datalist\", Attributes = ItemsAttributeName)]\npublic class DataListHelper : TagHelper\n{\n    private const string ItemsAttributeName = \"asp-items\";\n\n    /// &lt;summary&gt;\n    /// A collection of &lt;see cref=\"SelectListItem\"/&gt; objects used to populate the &amp;lt;datalist&amp;gt; element with\n    /// &amp;lt;option&amp;gt; elements.\n    /// &lt;/summary&gt;\n    [HtmlAttributeName(ItemsAttributeName)]\n    public ModelExpression For { get; set; } = default!;\n\n    public override void Process(TagHelperContext context, TagHelperOutput output)\n    {\n        ArgumentNullException.ThrowIfNull(context);\n        ArgumentNullException.ThrowIfNull(output);\n\n        var items = (IEnumerable&lt;SelectListItem&gt;)For.Model ?? [];\n        foreach (var item in items)\n        {\n            var tagBuilder = new TagBuilder(\"option\")\n            {\n                Attributes =\n                {\n                    [\"value\"] = item.Value\n                }\n            };\n\n            if (!string.IsNullOrWhiteSpace(item.Text))\n            {\n                tagBuilder.Attributes[\"label\"] = item.Text;\n            }\n\n            output.PostContent.AppendHtml(tagBuilder);\n        }\n\n        // the developer may choose their own id if they choose to\n        // otherwise we use the property name to generate an id\n        if (!output.Attributes.ContainsName(\"id\"))\n        {\n            var id = GetDatalistId(For);\n            output.Attributes.SetAttribute(\"id\", id);\n        }\n    }\n\n    public static string GetDatalistId(ModelExpression @for)\n    {\n        // perhaps we want different ids\n        return TagBuilder.CreateSanitizedId(@for.Name, \"\");\n    }\n}\n\n[HtmlTargetElement(\"input\", Attributes = ItemsAttributeName)]\npublic class DataListInputHelper : TagHelper\n{\n    private const string ItemsAttributeName = \"asp-list\";\n\n    /// &lt;summary&gt;\n    /// A collection of &lt;see cref=\"SelectListItem\"/&gt; objects used to populate the &amp;lt;datalist&amp;gt; element with\n    /// &amp;lt;option&amp;gt; elements.\n    /// &lt;/summary&gt;\n    [HtmlAttributeName(ItemsAttributeName)]\n    public ModelExpression For { get; set; } = default!;\n\n    public override void Process(TagHelperContext context, TagHelperOutput output)\n    {\n        ArgumentNullException.ThrowIfNull(context);\n        ArgumentNullException.ThrowIfNull(output);\n\n        // if it already has a list attribute then don't override it\n        // not sure why it's there, but sure why not 🤷‍♂️\n        if (!output.Attributes.ContainsName(\"list\"))\n        {\n            var listId = DataListHelper.GetDatalistId(For);\n            output.Attributes.SetAttribute(\"list\", listId);\n        }\n    }\n}\n</code></pre>\n\n<p>This straightforward implementation could easily be modified to accommodate your needs.</p>\n\n<p>The most crucial implementation detail is the <code>ModelExpression</code>, which allows us to get both the metadata of our property and the value of the property. It’s an awesome part of the tag helper API.</p>\n\n<h2 id=\"conclusion\">Conclusion</h2>\n\n<p>The <code>datalist</code> element is an HTML-native feature that provides completion on several input types. With a few simple tag helpers, we can derive the <code>datalist</code> options we need to power any input, thus reducing the work required to keep the UI and application data models in sync. Please try this and let me know if you found it helpful.</p>\n\n<p>As always, thanks for reading, and cheers.</p>\n",
      "Content": null,
      "Language": null,
      "Link": "https://khalidabuhakmeh.com/html-datalist-for-aspnet-core-inputs"
    },
    {
      "FeedId": "https://khalidabuhakmeh.com/feed.xml",
      "ItemId": "https://khalidabuhakmeh.com/html-range-inputs-with-aspnet-core-taghelpers",
      "Title": "HTML Range Inputs with ASP.NET Core TagHelpers",
      "PublishDate": "2024-07-02T00:00:00+00:00",
      "Summary": "<p>I’ve recently been rediscovering all the input fields that HTML offers and how they can help developers build more straightforward user experiences. The library of native HTML controls is impressive, <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input\">with 22 HTML input types</a> as of this post.</p>\n\n<p>Looking through ASP.NET Core’s <code>InputTagHelper</code>, I counted 14 supported input types based on the .NET common language runtime types you may use in your models. That’s over 8 controls missing from ASP.NET Core. The missing <code>range</code> input is one of the most valuable controls.</p>\n\n<p>In this post, we’ll write an ASP.NET Core tag helper that piggybacks on the <code>InputTagHelper</code> and turns a number property into a range input.</p>\n\n<!--more-->\n\n<h2 id=\"what-is-the-range-input\">What is the <code>range</code> Input?</h2>\n\n<p>The <code>range</code> input is as it sounds. Developers commonly refer to these elements as a “slider” since users typically slide an indicator to set a value. The input allows users to choose a value constrained by a minimum and maximum value. The limitation ensures that users can only choose valid values. When defining a range input, you may specify the <code>max</code>, <code>min</code>, and <code>step</code> attributes. You may also provide markers along the slider path in the form of a <code>datalist</code>. It is a very powerful control.</p>\n\n<p>I highly recommend reading <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/range\">the MDN on the topic</a> to learn more details.</p>\n\n<h2 id=\"taghelper-piggyback-to-slider\">TagHelper Piggyback to Slider</h2>\n\n<p>When working with ASP.NET Core MVC or Razor Pages, you’ll typically have a model and a razor view. Let’s examine both. First, the page model.</p>\n\n<pre><code class=\"language-csharp\">public class IndexModel(ILogger&lt;IndexModel&gt; logger) : PageModel\n{\n    [BindProperty]\n    public int Value { get; set; }\n    \n    public string? Message { get; set; }\n    \n    public void OnGet()\n    {\n    }\n\n    public void OnPost()\n    {\n        Message = $\"You selected {Value}!\";\n    }\n}\n</code></pre>\n\n<p>Next, the Razor view.</p>\n\n<pre><code class=\"language-razor\">@page\n@model IndexModel\n@{\n    ViewData[\"Title\"] = \"Home page\";\n}\n\n@if (Model.Message is not null)\n{\n    &lt;div class=\"alert alert-info\"&gt;\n        @Model.Message\n    &lt;/div&gt;\n}\n\n&lt;form method=\"post\" asp-page=\"Index\"&gt;\n    &lt;div&gt;\n        &lt;label class=\"form-label\" asp-for=\"Value\"&gt;&lt;/label&gt;\n        &lt;input class=\"form-range\" asp-for=\"Value\" /&gt;\n    &lt;/div&gt;\n    &lt;button type=\"submit\" class=\"btn btn-primary\"&gt;\n        Add\n    &lt;/button&gt;\n&lt;/form&gt;\n</code></pre>\n\n<p>So far, so good, but when you run this application, you’ll notice that the input type for our <code>Value</code> field is set to <code>text</code>. It’s not what we want, let’s fix that.</p>\n\n<p>The first step is using the <code>RangeAttribute</code> and creating a derived <code>RangeWithStepAttribute</code> for additional metadata. You could also create separate attributes for additional metadata. The choice is yours.</p>\n\n<pre><code class=\"language-csharp\">public class RangeWithStepAttribute(int minimum, int maximum)\n    : RangeAttribute(minimum, maximum)\n{\n    public double Step { get; set; } = 1;\n} \n</code></pre>\n\n<p>Next, let’s decorate our property with the new attribute.</p>\n\n<pre><code class=\"language-csharp\">[BindProperty, RangeWithStep(1, 5, Step = 1)]\npublic int Value { get; set; }\n</code></pre>\n\n<p>So far, so good; now let’s create a tag helper that recognizes the <code>RangeAttribute</code> on our models.</p>\n\n<pre><code class=\"language-csharp\">using System.ComponentModel.DataAnnotations;\nusing Microsoft.AspNetCore.Mvc.ViewFeatures;\nusing Microsoft.AspNetCore.Razor.TagHelpers;\nusing OutputValues.Pages;\n\nnamespace OutputValues;\n\n[HtmlTargetElement(\"input\", \n    Attributes = ForAttributeName, \n    TagStructure = TagStructure.WithoutEndTag)]\npublic class RangeInputTagHelper : TagHelper\n{\n    private const string ForAttributeName = \"asp-for\";\n    private const string TypeAttributeValue = \"range\";\n\n    public override int Order { get; } = -999;\n\n    [HtmlAttributeName(ForAttributeName)] public ModelExpression For { get; set; }\n\n    public override void Process(TagHelperContext context, TagHelperOutput output)\n    {\n        var metadata = For.Metadata;\n\n        if (metadata is { ContainerType: not null, PropertyName: not null })\n        {\n            var attribute =\n                metadata.ContainerType.GetProperty(metadata.PropertyName)\n                ?.GetCustomAttributes(typeof(RangeAttribute), true)\n                .FirstOrDefault();\n            \n            if (attribute is RangeAttribute range)\n            {\n                output.Attributes.SetAttribute(\"type\", TypeAttributeValue);\n                output.Attributes.SetAttribute(\"min\", range.Minimum);\n                output.Attributes.SetAttribute(\"max\", range.Maximum);\n\n                if (range is RangeWithStepAttribute rws)\n                {\n                    output.Attributes.SetAttribute(\"step\", rws.Step);\n                }\n            }\n        }\n    }\n}\n</code></pre>\n\n<p>All we need to do is register our custom tag helper in the <code>_ViewImports.cshtml</code>. Change the assembly name to match your assembly name.</p>\n\n<pre><code class=\"language-razor\">@addTagHelper *, OutputValues\n</code></pre>\n\n<p>A note about the <code>Order</code> property on the <code>RangeInputTagHelper</code> and why it’s set to <code>-999</code>. The default <code>InputTagHelper</code> has a value of <code>-1000</code>, meaning it will likely run before all tag helpers you create. Typically, the order doesn’t matter too much, but in this case, we want our tag helper to do as little work as possible, letting the original tag helper do much of the work it typically does. Since HTML inputs share a lot of attributes and behaviors, this is ideal for this scenario. We set our tag helper to <code>-999</code> to ensure it runs sometime right after the original tag helper.</p>\n\n<p>After rerunning the application, you’ll see a slider with the values for min, max, and step set ready for your users. Awesome!</p>\n\n<h2 id=\"conclusion\">Conclusion</h2>\n\n<p>This technique can work with any HTML5 input you’d like to support that isn’t in ASP.NET Core. It also ensures that all HTML <code>id</code> and <code>name</code> values derive from your C# models and that the HTML and server-side handlers are in sync.</p>\n\n<p>I hope you found this post helpful, and as always, thanks for reading. Cheers.</p>\n",
      "Content": null,
      "Language": null,
      "Link": "https://khalidabuhakmeh.com/html-range-inputs-with-aspnet-core-taghelpers"
    },
    {
      "FeedId": "https://khalidabuhakmeh.com/feed.xml",
      "ItemId": "https://khalidabuhakmeh.com/html5-validation-for-aspnet-core-models-and-razor-views",
      "Title": "HTML5 Validation for ASP.NET Core Models and Razor Views",
      "PublishDate": "2024-06-25T00:00:00+00:00",
      "Summary": "<p>I was recently working on an HTMX and ASP.NET Core demo and wanted to limit client-to-server requests to valid requests. This is a built-in feature for HTMX, as long as you utilize HTML5 validators on your forms and inputs. As many ASP.NET Core practitioners know, the default client-side validation in ASP.NET Core is not HTML5 but a mix of custom <code>data-val</code> attributes and JQuery. The current approach is acceptable, but it makes adopting new frameworks, supporting native HTML capabilities, and dropping extraneous dependencies more difficult.</p>\n\n<p>Could we drop the JQuery validation dependency in favor of HTML5 validation? Luckily, we can thank OSS author <a href=\"https://www.finbuckle.com/\">Andrew White</a> for his latest NuGet package, <a href=\"https://github.com/Finbuckle/Finbuckle.Html5Validation\">FinBuckle.Html5Validation</a>. This package allows us to disable the default behavior of ASP.NET Core MVC and Razor Pages for a more modern approach.</p>\n\n<!--more-->\n\n<h2 id=\"what-is-html5-validation\">What is HTML5 Validation?</h2>\n\n<p>Before HTML5, developers wrote all client-side validation using JavaScript code. While JavaScript code allowed for complex scenarios, many folks realized two things: Client-side validation has many recurring patterns, and, ultimately, it’s not a bullet-proof validation approach. Server-side validation is essential.</p>\n\n<p>This realization helped HTML narrow down the scope of client-side validation, which limits requests sent to the server to client-validated ones. This validation focused on a few user input characteristics:</p>\n\n<ul>\n  <li><strong>Required</strong>: This field must have some value.</li>\n  <li><strong>Type</strong>: This field conforms to the expected integer, date, phone number, etc.</li>\n  <li><strong>Constraints</strong>: This field has a minimum, maximum, or fits within a specified range.</li>\n  <li><strong>Pattern:</strong> This field conforms to a regular expression pattern</li>\n</ul>\n\n<p>These agreed-upon validations reduced the required JavaScript code while allowing clients to create native experiences based on the input types.</p>\n\n<p>Let’s take a look at an example of an HTML5-validated form. <a href=\"https://developer.mozilla.org/en-US/docs/Learn/Forms/Form_validation#full_example\">The following code can be seen on the MDN site.</a></p>\n\n<pre><code class=\"language-html\">&lt;form&gt;\n  &lt;fieldset&gt;\n    &lt;legend&gt;\n      Do you have a driver's license?&lt;span aria-label=\"required\"&gt;*&lt;/span&gt;\n    &lt;/legend&gt;\n    &lt;input type=\"radio\" required name=\"driver\" id=\"r1\" value=\"yes\" /&gt;&lt;label\n      for=\"r1\"\n      &gt;Yes&lt;/label\n    &gt;\n    &lt;input type=\"radio\" required name=\"driver\" id=\"r2\" value=\"no\" /&gt;&lt;label\n      for=\"r2\"\n      &gt;No&lt;/label\n    &gt;\n  &lt;/fieldset&gt;\n  &lt;p&gt;\n    &lt;label for=\"n1\"&gt;How old are you?&lt;/label&gt;    \n    &lt;input\n      type=\"number\"\n      min=\"12\"\n      max=\"120\"\n      step=\"1\"\n      id=\"n1\"\n      name=\"age\"\n      pattern=\"\\d+\" /&gt;\n  &lt;/p&gt;\n  &lt;p&gt;\n    &lt;label for=\"t1\"\n      &gt;What's your favorite fruit?&lt;span aria-label=\"required\"&gt;*&lt;/span&gt;&lt;/label\n    &gt;\n    &lt;input\n      type=\"text\"\n      id=\"t1\"\n      name=\"fruit\"\n      list=\"l1\"\n      required\n      pattern=\"[Bb]anana|[Cc]herry|[Aa]pple|[Ss]trawberry|[Ll]emon|[Oo]range\" /&gt;\n    &lt;datalist id=\"l1\"&gt;\n      &lt;option&gt;Banana&lt;/option&gt;\n      &lt;option&gt;Cherry&lt;/option&gt;\n      &lt;option&gt;Apple&lt;/option&gt;\n      &lt;option&gt;Strawberry&lt;/option&gt;\n      &lt;option&gt;Lemon&lt;/option&gt;\n      &lt;option&gt;Orange&lt;/option&gt;\n    &lt;/datalist&gt;\n  &lt;/p&gt;\n  &lt;p&gt;\n    &lt;label for=\"t2\"&gt;What's your email address?&lt;/label&gt;\n    &lt;input type=\"email\" id=\"t2\" name=\"email\" /&gt;\n  &lt;/p&gt;\n  &lt;p&gt;\n    &lt;label for=\"t3\"&gt;Leave a short message&lt;/label&gt;\n    &lt;textarea id=\"t3\" name=\"msg\" maxlength=\"140\" rows=\"5\"&gt;&lt;/textarea&gt;\n  &lt;/p&gt;\n  &lt;p&gt;\n    &lt;button&gt;Submit&lt;/button&gt;\n  &lt;/p&gt;\n&lt;/form&gt;\n</code></pre>\n\n<p>As you’ll notice, the attributes <code>required</code>, <code>pattern</code>, <code>min</code>, <code>max</code>, and <code>type</code> are all used to create a validation experience with no lines of JavaScript. When attempting to submit the form, you’ll notice the client displays a message. You can also highlight inputs based on their validation status.</p>\n\n<p><img src=\"https://res.cloudinary.com/abuhakmeh/image/fetch/c_limit,f_auto,q_auto,w_800/https://khalidabuhakmeh.com/assets/images/posts/aspnetcore-html5-validation/html5-validation-example.png\" srcset=\"https://res.cloudinary.com/abuhakmeh/image/fetch/c_limit,f_auto,q_auto,w_320/https://khalidabuhakmeh.com/assets/images/posts/aspnetcore-html5-validation/html5-validation-example.png 320w, https://res.cloudinary.com/abuhakmeh/image/fetch/c_limit,f_auto,q_auto,w_540/https://khalidabuhakmeh.com/assets/images/posts/aspnetcore-html5-validation/html5-validation-example.png 540w, https://res.cloudinary.com/abuhakmeh/image/fetch/c_limit,f_auto,q_auto,w_760/https://khalidabuhakmeh.com/assets/images/posts/aspnetcore-html5-validation/html5-validation-example.png 760w, https://res.cloudinary.com/abuhakmeh/image/fetch/c_limit,f_auto,q_auto,w_784/https://khalidabuhakmeh.com/assets/images/posts/aspnetcore-html5-validation/html5-validation-example.png 784w\" sizes=\"100vw\" alt=\"HTML5 validation on HTML Form\" loading=\"lazy\" width=\"784\" height=\"814\" crossorigin=\"anonymous\" /></p>\n\n<p>Awesome, right?! With a bit of CSS, we can get some UI indicators. Depending on the client, any <code>input</code> with an appropriate <code>type</code> will have automatic access to the native type value picker, whether it’s a date, a phone number, or a number.</p>\n\n<p>OK, now that we understand what HTML5 validation gets us, how do we get that in ASP.NET Core?</p>\n\n<h2 id=\"disable-client-side-validation-in-aspnet-core\">Disable Client-side Validation in ASP.NET Core</h2>\n\n<p>This section is for folks who’d prefer to keep their models and views completely separate and write the HTML mostly by hand.</p>\n\n<p>To disable the default client-side validation in ASP.NET Core MVC and Razor Pages, you can use the following lines in your <code>Program</code> file.</p>\n\n<pre><code class=\"language-csharp\">builder.Services.AddRazorPages()\n    .AddViewOptions(options =&gt; {\n        options.HtmlHelperOptions.ClientValidationEnabled = false;\n    });\n</code></pre>\n\n<p>This will prevent Razor Pages and MVC from generating the <code>data-val</code> attributes commonly found on inputs in the HTML output.</p>\n\n<p>This approach is fine, but I think the next section is a better option for most folks as it still relies on the model metadata that ASP.NET Core provides.</p>\n\n<h2 id=\"finbucklehtml5validation-nuget-package\">FinBuckle.HTML5Validation NuGet Package</h2>\n\n<p>To move towards HTML5 validation, you must first install the <code>FinBuckle.HTML5Validation</code> NuGet package into your ASP.NET Core application.</p>\n\n<p><strong>Important Note: this package only works with MVC and Razor Pages.</strong></p>\n\n<pre><code class=\"language-xml\">&lt;PackageReference Include=\"Finbuckle.Html5Validation\" Version=\"1.0.1\" /&gt;\n</code></pre>\n\n<p>Once added to your dependencies, you must register the package with your application’s services collection.</p>\n\n<pre><code class=\"language-csharp\">using Finbuckle.Html5Validation;\n\nvar builder = WebApplication.CreateBuilder(args);\nbuilder.Services.AddHtml5Validation();\n</code></pre>\n\n<p>Internally, this method provides the ASP.NET Core pipeline with an <code>IValidationAttributeAdapterProvider</code>.</p>\n\n<pre><code class=\"language-csharp\">namespace Microsoft.AspNetCore.Mvc.DataAnnotations\n{\n  public interface IValidationAttributeAdapterProvider\n  {\n    IAttributeAdapter? GetAttributeAdapter(\n      ValidationAttribute attribute,\n      IStringLocalizer? stringLocalizer);\n  }\n}\n</code></pre>\n\n<p>This adapter gets passed an attribute and a localizer, at which point you can decide what attributes should be added to the HTML input. Let’s see an implementation for the <code>pattern</code> attribute.</p>\n\n<pre><code class=\"language-csharp\">// Copyright Finbuckle LLC, Andrew White, and Contributors.\n// Refer to the solution LICENSE file for more information.\n\n// Portions of this file are derived from ASP.NET Core and are subject to the following:\n// Licensed to the .NET Foundation under one or more agreements.\n// The .NET Foundation licenses this file to you under the MIT license.\n\nusing System.ComponentModel.DataAnnotations;\nusing Microsoft.AspNetCore.Mvc.DataAnnotations;\nusing Microsoft.AspNetCore.Mvc.ModelBinding.Validation;\nusing Microsoft.Extensions.Localization;\n\nnamespace Finbuckle.Html5Validation.Internal;\n\npublic class RegularExpressionAttributeAdapter : AttributeAdapterBase&lt;RegularExpressionAttribute&gt;\n{\n    public RegularExpressionAttributeAdapter(RegularExpressionAttribute attribute, IStringLocalizer? stringLocalizer)\n        : base(attribute, stringLocalizer)\n    {\n    }\n\n    public override void AddValidation(ClientModelValidationContext context)\n    {\n        if (context == null)\n        {\n            throw new ArgumentNullException(nameof(context));\n        }\n        \n        MergeAttribute(context.Attributes, \"pattern\", Attribute.Pattern);\n    }\n\n    /// &lt;inheritdoc /&gt;\n    public override string GetErrorMessage(ModelValidationContextBase validationContext)\n    {\n        if (validationContext == null)\n        {\n            throw new ArgumentNullException(nameof(validationContext));\n        }\n\n        return GetErrorMessage(\n            validationContext.ModelMetadata,\n            validationContext.ModelMetadata.GetDisplayName(),\n            Attribute.Pattern);\n    }\n}\n</code></pre>\n\n<p>This is a neat part of the ASP.NET Core MVC and Razor Pages pipeline. It’s extensible to the point where folks can replace validation without changing Razor views. Speaking of Razor views, let’s see how we can use this in one.</p>\n\n<p>First, let’s create a Razor PageModel.</p>\n\n<pre><code class=\"language-csharp\">using System.ComponentModel.DataAnnotations;\nusing Microsoft.AspNetCore.Mvc;\nusing Microsoft.AspNetCore.Mvc.RazorPages;\n\nnamespace HtmxFormValidation.Pages;\n\npublic class IndexModel(ILogger&lt;IndexModel&gt; logger) : PageModel\n{\n    [BindProperty, Required]\n    public string? Name { get; set; }\n    \n    [BindProperty, Required]\n    public string? Media { get; set; }\n    \n    [BindProperty, Required]\n    public DateTime? Date { get; set; }\n    \n    public void OnGet()\n    {\n    }\n\n    public IActionResult OnPost()\n    {\n        if (ModelState.IsValid)\n        {\n            logger.LogInformation(\"{Name} picked {Media}\", Name, Media);\n        }\n\n        return Partial(\"_Form\", this);\n    }\n}\n</code></pre>\n\n<p>I’m using DataAnnotations here; now, what does the view look like? (I’m using HTMX, hence the <code>hx-</code> attributes).</p>\n\n<pre><code class=\"language-razor\">@model IndexModel\n@{ string[] options = [\"Television\", \"Radio\", \"Social Media\"]; }\n\n&lt;form method=\"post\" asp-page=\"Index\"\n      hx-post=\"@Url.Page(\"Index\")\"\n      hx-swap=\"outerHtml\"&gt;\n\n    @* alert box *@\n    @if (Model.Name is not null)\n    {\n        &lt;div class=\"alert alert-info mb-3\"&gt;\n            @Model.Name picked @Model.Media!\n        &lt;/div&gt;\n    }\n\n    &lt;div class=\"form-group mb-2\"&gt;\n        &lt;label asp-for=\"Name\"&gt;&lt;/label&gt;\n        &lt;input asp-for=\"Name\" type=\"text\"\n               class=\"form-control\" \n               title=\"Must be Khalid or RoboCop\"&gt;\n    &lt;/div&gt;\n\n    &lt;div class=\"form-group mb-2\"&gt;\n        &lt;label asp-for=\"Date\"&gt;&lt;/label&gt;\n        &lt;input asp-for=\"Date\" class=\"form-control\"&gt;\n    &lt;/div&gt;\n    \n    &lt;!-- radio button list --&gt;\n    &lt;div class=\"mb-3\"&gt;\n        &lt;label&gt;Media Types&lt;/label&gt;\n        @foreach (var option in options)\n        {\n            &lt;div class=\"form-check\"&gt;\n                &lt;input class=\"form-check-input\" type=\"radio\" asp-for=\"Media\" value=\"@option\"&gt;\n                &lt;label class=\"form-check-label\" asp-for=\"Media\"&gt;\n                    @option\n                &lt;/label&gt;\n            &lt;/div&gt;\n        }\n    &lt;/div&gt;\n    &lt;button type=\"submit\" class=\"btn btn-primary \"&gt;\n        Submit\n    &lt;/button&gt;\n&lt;/form&gt;\n</code></pre>\n\n<p>Cool! Now we need some CSS to highlight invalid fields with some styling.</p>\n\n<pre><code class=\"language-css\">input:user-invalid {\n  border-color: red;\n  background-color: pink;\n  box-shadow: 0 0 5px 1px red;\n}\n</code></pre>\n\n<p>You can target several states, such as <code>:valid</code>, <code>:invalid</code>, and <code>:user-invalid</code>. The <code>:user-invalid</code> state only triggers after a user has interacted with an element, whereas you can use the <code>:invalid</code> state to signify a field is invalid immediately.</p>\n\n<p>Let’s run our application and submit the form.</p>\n\n<p><img src=\"https://res.cloudinary.com/abuhakmeh/image/fetch/c_limit,f_auto,q_auto,w_800/https://khalidabuhakmeh.com/assets/images/posts/aspnetcore-html5-validation/aspnetcore-html5-validation.png\" srcset=\"https://res.cloudinary.com/abuhakmeh/image/fetch/c_limit,f_auto,q_auto,w_320/https://khalidabuhakmeh.com/assets/images/posts/aspnetcore-html5-validation/aspnetcore-html5-validation.png 320w, https://res.cloudinary.com/abuhakmeh/image/fetch/c_limit,f_auto,q_auto,w_540/https://khalidabuhakmeh.com/assets/images/posts/aspnetcore-html5-validation/aspnetcore-html5-validation.png 540w, https://res.cloudinary.com/abuhakmeh/image/fetch/c_limit,f_auto,q_auto,w_760/https://khalidabuhakmeh.com/assets/images/posts/aspnetcore-html5-validation/aspnetcore-html5-validation.png 760w, https://res.cloudinary.com/abuhakmeh/image/fetch/c_limit,f_auto,q_auto,w_980/https://khalidabuhakmeh.com/assets/images/posts/aspnetcore-html5-validation/aspnetcore-html5-validation.png 980w, https://res.cloudinary.com/abuhakmeh/image/fetch/c_limit,f_auto,q_auto,w_1042/https://khalidabuhakmeh.com/assets/images/posts/aspnetcore-html5-validation/aspnetcore-html5-validation.png 1042w\" sizes=\"100vw\" alt=\"ASP.NET Core HTML form with HTML5 validation\" loading=\"lazy\" width=\"1042\" height=\"748\" crossorigin=\"anonymous\" /></p>\n\n<p>Sweet! All looks like it’s working as expected.</p>\n\n<h2 id=\"conclusion\">Conclusion</h2>\n\n<p>While validation libraries can offer a lot in terms of user experience, the native validation is really good. In fact, it’s good enough to handle most client-side validation and then additionally lean on server-side validation to handle the rest.</p>\n\n<p>I recommend trying this approach and seeing how far you get. You’ll likely be surprised how many dependencies you can drop in favor of native controls and validation.</p>\n\n<p>As always, thanks for reading and sharing my posts. Cheers.</p>\n",
      "Content": null,
      "Language": null,
      "Link": "https://khalidabuhakmeh.com/html5-validation-for-aspnet-core-models-and-razor-views"
    },
    {
      "FeedId": "https://khalidabuhakmeh.com/feed.xml",
      "ItemId": "https://khalidabuhakmeh.com/what-is-hsts-and-why-is-it-in-my-aspnet-core-app",
      "Title": "What is HSTS and why is it in my ASP.NET Core app?",
      "PublishDate": "2024-06-18T00:00:00+00:00",
      "Summary": "<p>When creating a new ASP.NET Core application, you get a set of middleware that performs typical web application duties. Some include serving static assets, routing, HTTPS redirection, and exception handling. Folks looking will also notice a middleware registration of the <code>app.UseHsts()</code> found in every ASP.NET Core app.</p>\n\n<p>What is HSTS, why would you want it, and how do you configure the HSTS options in ASP.NET Core? Let’s find out.</p>\n\n<!--more-->\n\n<h2 id=\"what-is-hsts\">What is HSTS?</h2>\n\n<p>HSTS (HTTP Strict Transport Security) is a method by which your application server can tell clients to use a secure connection when sending requests. As you may know, HTTP is unsecured communication, while HTTPS uses encryption to improve users’ privacy and security. Applications can transition user sessions from HTTP and HTTPS, and historically, it was very common to move from an unsecured part of a website to a secured section. For example, shopping sites used to display store items over HTTP and then only use HTTPS for the checkout process.</p>\n\n<p>This still happens in ASP.NET Core today, but typically only on the first request to the application. You may notice this line somewhere in your ASP.NET Core pipeline definition.</p>\n\n<pre><code class=\"language-csharp\">app.UseHttpsRedirection();\n</code></pre>\n\n<p>If a user visits your application using <code>http://</code>, the ASP.NET Core middleware will attempt to rewrite the request to target <code>https://</code>. This is all good and secure, well, except for that first request, and that’s the crucial part. There’s still some unsecured communication occurring, which can be an issue depending on what is included in that initial request.</p>\n\n<p>With HSTS, we want to communicate several aspects to any client accessing our application:</p>\n\n<ol>\n  <li>Always communicate using HTTPS, no matter what.</li>\n  <li>If <code>includeSubdomains</code> is present we also mean all subdomains.</li>\n  <li>If <code>preload</code> is set, the browser will always make HTTPS requests, even on the first request.</li>\n  <li>The <code>max-age</code> of the policy, which can be measured in seconds to years.</li>\n</ol>\n\n<p>The <code>preload</code> value is the most interesting, as this is used by browser vendors to create a known list of sites serving only experiences over HTTPS. This allows the browser to switch to HTTPS before the first request. A browser will never communicate with your application over HTTP, even if your server supports it.</p>\n\n<p>While you may be tempted to turn on HSTS and the <code>preload</code> functionality immediately, you must be mindful of what’s expected of your application before deploying this feature.</p>\n\n<ol>\n  <li>Serve and maintain a valid certificate</li>\n  <li>Redirect from HTTP to HTTPS on the same host</li>\n  <li>Serve all subdomains over HTTPS</li>\n  <li>Serve an HSTS header with a <code>max-age</code> of 1 year, <code>includeSubdomains</code>, and include the <code>preload</code> key.</li>\n  <li>Redirect responses must also contain the HSTS header.</li>\n</ol>\n\n<pre><code>`Strict-Transport-Security:` `max-age=63072000; includeSubDomains; preload`\n</code></pre>\n\n<p>And finally, you can verify that you’ve satisfied all the requirements by going to https://hstspreload.org.</p>\n\n<p>In summary, HSTS allows you to tell browser vendors that you want an added level of security by having all communication occur over encrypted communication and that requests or responses should never be unsecured. In short, enforce HTTPS.</p>\n\n<h2 id=\"hsts-in-aspnet-core\">HSTS in ASP.NET Core</h2>\n\n<p>Let’s get back to ASP.NET Core. You’ve likely seen this line in your applications but never clicked through the link in the comment.</p>\n\n<pre><code class=\"language-csharp\">// The default HSTS value is 30 days. You may want to change this for production scenarios, see https://aka.ms/aspnetcore-hsts.\napp.UseHsts();\n</code></pre>\n\n<p>Why is the default value 30 days, and why should you consider changing it for production scenarios?</p>\n\n<p>30 days is a nice round number, just long enough to be helpful but not so long that if you make a mistake, it will take forever for browser vendors to resolve. That said, you should change the value for production. The HSTS preload guidance is a gradual smoke test and will likely take a few application deployments to work through.</p>\n\n<p>Start with a low <code>max-age</code> of 5 minutes, test your site, then graduate to 1 week and to 1 month.</p>\n\n<pre><code>max-age=2592000; includeSubDomains\n</code></pre>\n\n<p>Along the way, test your site for errors or issues related to HTTPS traffic. Standard HTTP to HTTPS issues include static assets and CDN dependencies. When you feel confident you’ve squashed all your issues, you can add the <code>preload</code> value and increase the <code>max-age</code> to 2 years.</p>\n\n<p>You’ll need to configure the <code>HstsOptions</code> object registered in your ASP.NET Core services collection to work up to this.</p>\n\n<pre><code class=\"language-csharp\">builder.Services.Configure&lt;HstsOptions&gt;(o =&gt;\n{\n    o.Preload = true;\n    o.MaxAge = new TimeSpan(730 /* 2 years */);\n    o.IncludeSubDomains = true;\n});\n</code></pre>\n\n<p>The next time your site is crawled by the major browser providers (Google, Mozilla, or Microsoft), you’ll be added to the preload list hard-coded into browsers.</p>\n\n<p>If you’re running a multi-tenant site and need to exclude different tenants from a particular policy, you can also set the <code>ExcludeHosts</code> property.</p>\n\n<pre><code class=\"language-csharp\">builder.Services.Configure&lt;HstsOptions&gt;(o =&gt;\n{\n    o.Preload = true;\n    o.MaxAge = new TimeSpan(730 /* 2 years */);\n    o.IncludeSubDomains = true;\n    o.ExcludedHosts.Add(\"example.com\");\n    o.ExcludedHosts.Add(\"www.example.com\");\n});\n</code></pre>\n\n<p>Just note that if you exclude a subdomain from a top-level domain that opts into HSTS, you can’t get the preload capability since you’ve not satisfied the requirements.</p>\n\n<h2 id=\"should-i-turn-on-hsts\">Should I turn on HSTS?</h2>\n\n<p>HSTS is an added layer of security that can prevent man-in-the-middle attacks from protocol downgrades and cookie hijacking. That said, ASP.NET Core has mechanisms to secure cookies, such as Data Protection encryption and browser-handling hints such as <code>Secure</code>, <code>HttpOnly</code>, and <code>SameSite</code>. As long as you don’t change those values, you’ll be following best practices. That said, always consult an actual security professional and perform security audits periodically.</p>\n\n<p>HSTS can be annoying if you accidentally enable it in a development environment that may not have a certificate, but in most production environments, you should have a certificate.</p>\n\n<p>In general, yes, you should enable it, but be mindful when and where you enable it, as it can be challenging to get browsers to refresh the policy.</p>\n\n<h2 id=\"conclusion\">Conclusion</h2>\n\n<p>You now know a little bit more about HSTS, why it’s included in your ASP.NET Core application, and how and when to configure it. HSTS is an additional layer of security specifically designed to keep all communication over HTTPS, including those initial requests. That said, you’ll need to put in the work to get that <code>preload</code> functionality and plan for weeks of deployments, testing, and audits to make sure everything is working smoothly.</p>\n\n<p>As always, thanks for reading, and cheers.</p>\n\n<h3 id=\"references\">References</h3>\n\n<ul>\n  <li><a href=\"https://blog.mozilla.org/security/2012/11/01/preloading-hsts/\">Mozilla - Preloading HSTS</a></li>\n  <li><a href=\"https://hstspreload.org/\">HSTS Preload</a></li>\n  <li><a href=\"https://learn.microsoft.com/en-us/aspnet/core/security/enforcing-ssl?view=aspnetcore-8.0&amp;viewFallbackFrom=aspnetcore-2.1&amp;tabs=visual-studio,linux-ubuntu#http-strict-transport-security-protocol-hsts\">Enforce HTTPS</a></li>\n  <li><a href=\"https://learn.microsoft.com/en-us/aspnet/core/security/samesite?view=aspnetcore-8.0\">SameSite cookies</a></li>\n</ul>\n",
      "Content": null,
      "Language": null,
      "Link": "https://khalidabuhakmeh.com/what-is-hsts-and-why-is-it-in-my-aspnet-core-app"
    },
    {
      "FeedId": "https://khalidabuhakmeh.com/feed.xml",
      "ItemId": "https://khalidabuhakmeh.com/how-to-encrypt-aspnet-core-route-parameters",
      "Title": "How To Encrypt ASP.NET Core Route Parameters",
      "PublishDate": "2024-06-11T00:00:00+00:00",
      "Summary": "<p>I recently read <a href=\"https://ravendb.net/articles/avoiding-exposing-identifier-details-to-your-users\">a classic blog post from the RavenDB community</a> recommending developers think twice about exposing primary identifiers in their URLs. There are several reasons for this, which I’ll summarize in this post, but I wanted to revisit the problem and see what the current ASP.NET Core development stack has to offer when it comes to solving this problem.</p>\n\n<p>In this post, we’ll see some code that can both encrypt and decrypt <em>sensitive</em> identifiers in the URL path.</p>\n\n<!--more-->\n\n<h2 id=\"why-obscure-identifiers\">Why Obscure Identifiers?</h2>\n\n<p>Many people first think, “Why obscure identifiers in the first place?” I mean, it’s just an ID, right?</p>\n\n<p>There are several arguments as to why it may be a “bad” practice.</p>\n\n<h3 id=\"1-url-tampering\">1. URL Tampering</h3>\n\n<p>While we all do our best to secure our applications, there are times when we may forget to properly verify that a user has permission to access a particular resource.</p>\n\n<pre><code>https://example.com/?id=1\n</code></pre>\n\n<p>Over the years, we’ve become acutely aware that changing the value of the <code>id</code> in a URL might return a different resource. This may be intended behavior, or it could give “hackers” another avenue to exfiltrate data from your system.</p>\n\n<p>Making identifiers more opaque can eliminate a user experience you never intended to offer.</p>\n\n<h3 id=\"2-leaking-system-information\">2. Leaking System Information</h3>\n\n<p>Most identifiers can be tied back to their supporting system. For example, integers are widely used in relational databases, while document databases use string identifiers. This extra information may give users more information about your internal system and architectural choices than you intended.</p>\n\n<h3 id=\"3-leaking-business-information\">3. Leaking Business Information</h3>\n\n<p>This is likely the most important for your business stakeholders. Since most identifiers are incremental, they could accidentally leak your business’s critical metrics to outside parties. You could track the current volume and growth velocity over time of a system type. Some hypothetical entities may include orders, issues, and products.</p>\n\n<p>The reasons given here clearly rely on your context and your application security. So, while you may or may not ultimately decide to obscure identifiers, it’s still important to consider why you’re making that decision.</p>\n\n<h2 id=\"aspnet-core-route-constraints\">ASP.NET Core Route Constraints</h2>\n\n<p>In this code, we’ll use ASP.NET Core’s route constraints to provide an implicit way of encrypting identifiers in route templates. We’ll also use the <code>DataProtection</code> APIs, so we don’t have to worry about encryption keys and storage for this example. However, you could adapt this code to use any methodology you have in mind.</p>\n\n<p>The first step is to create a new class called <code>EncryptedParameter</code>, and we’ll need to implement the <code>IOutboundParameterTransformer</code> interface.</p>\n\n<pre><code class=\"language-csharp\">using Microsoft.AspNetCore.DataProtection;\n\npublic class EncryptedParameter(IDataProtectionProvider dpp) : \n    IOutboundParameterTransformer\n{\n    private readonly IDataProtector protector \n        = dpp.CreateProtector(\"EncryptedParameter\");\n    \n    public string? TransformOutbound(object? value)\n    {\n        var result = value?.ToString();\n        return string.IsNullOrEmpty(result) \n            ? null \n            : protector.Protect(result);\n    }\n}\n</code></pre>\n\n<p>We need to register this code as a route constraint. Add the following code to the <code>Program</code> class of your ASP.NET Core application.</p>\n\n<pre><code class=\"language-csharp\">builder.Services.AddDataProtection();\nbuilder.Services.Configure&lt;RouteOptions&gt;(opt =&gt;  {\n    opt.ConstraintMap.Add(\"encrypt\", typeof(EncryptedParameter));\n});\n</code></pre>\n\n<p>We have to register the constraint, and since our constraint is using the <code>DataProtection</code> API, we also need to remember to add the data protection services.</p>\n\n<p>We can now use the constraint in our route templates on our target actions. Here’s an example being used in a Razor Page route template.</p>\n\n<pre><code class=\"language-razor\">@page \"{id:encrypt}\"\n@model RavenDbTodoApp.Pages.Agenda\n\n&lt;h1&gt;@Model.Id&lt;/h1&gt;\n</code></pre>\n\n<p>When we use ASP.NET Core’s <code>LinkGenerator</code>, it will use our constraint to process parameters.</p>\n\n<pre><code class=\"language-razor\">&lt;a href=\"@Url.Page(\"Agenda\", new { id = \"agenda/1\" })\"&gt;\n    Link To Agenda\n&lt;/a&gt;\n</code></pre>\n\n<p>The previous code generates the following HTML link.</p>\n\n<pre><code class=\"language-html\">&lt;a href=\"/Agenda/CfDJ8LTlmMRHw3JNmUOvTfhPRjsGI3dXCSP-7yuu-Hu05yjURdIZkalKYJc7-rbJbOXrJCkeLdywxW7m6A7XT3ylMY6ilrNC5DYdssyWTA1-QCHpqFFvRi6LokwktvGkcGs5BA\"&gt;\n    Link To Agenda\n&lt;/a&gt;\n</code></pre>\n\n<p>Neat, but as you may have noticed, this is only one part of the equation. Dealing with these identifiers may become cumbersome if we don’t use the ASP.NET Core machinery. Let’s implement the second part.</p>\n\n<h2 id=\"aspnet-core-model-binders\">ASP.NET Core Model Binders</h2>\n\n<p>We’ll be using ASP.NET Core’s model binding machinery to transform the incoming parameter into something more usable. Let’s modify our <code>EncryptedParameter</code> class with a new interface, <code>IModelBinder</code>.</p>\n\n<pre><code class=\"language-csharp\">using Microsoft.AspNetCore.DataProtection;\nusing Microsoft.AspNetCore.Mvc.ModelBinding;\n\npublic class EncryptedParameter(IDataProtectionProvider dpp) : \n    IModelBinder,\n    IOutboundParameterTransformer\n{\n    private readonly IDataProtector protector \n        = dpp.CreateProtector(\"EncryptedParameter\");\n    \n    public string? TransformOutbound(object? value)\n    {\n        var result = value?.ToString();\n        return string.IsNullOrEmpty(result) \n            ? null \n            : protector.Protect(result);\n    }\n\n    public Task BindModelAsync(ModelBindingContext bindingContext)\n    {\n        var key = bindingContext.FieldName;\n        var valueProviderResult = bindingContext.ValueProvider.GetValue(key);\n        \n        if (valueProviderResult.FirstValue is { } value)\n        {\n            var result = protector.Unprotect(value);\n            bindingContext.Result = ModelBindingResult.Success(result);\n        }\n\n        return Task.CompletedTask;\n    }\n}\n</code></pre>\n\n<p>Now, let’s apply this model binder to a parameter on the receiving page.</p>\n\n<pre><code class=\"language-csharp\">using Microsoft.AspNetCore.Mvc;\nusing Microsoft.AspNetCore.Mvc.RazorPages;\n\npublic class Agenda: PageModel\n{\n    [BindProperty(SupportsGet = true, BinderType = typeof(EncryptedParameter))]\n    public string Id { get; set; }\n    \n    public void OnGet()\n    {\n        \n    }\n}\n</code></pre>\n\n<p>Now, you can access the parameter with its original value, which should make it easier to use against your existing data storage engine of choice.</p>\n\n<h2 id=\"some-thoughts-on-this-approach\">Some thoughts on this approach</h2>\n\n<p>You may want to evaluate a few things when taking this approach and whether it’s worth the tradeoffs.</p>\n\n<ol>\n  <li>Encryption and Decryption can be expensive, adding to the overhead of each link generation and request.</li>\n  <li>Encryption creates some really long strings. I’m not an encryption expert, but there are likely encryption algorithms that produce more compact strings.</li>\n  <li>A little more noise in code with constraints and attributes.</li>\n  <li>Easy to miss a constraint or attribute as the system grows.</li>\n</ol>\n\n<h2 id=\"conclusion\">Conclusion</h2>\n\n<p>If you’ve been worried about URL tampering or exposing critical system information, the approach outlined in this post might be useful to you. That said, before slapping this onto your applications, please consider the trade-offs and costs of applying encryption to parameters.</p>\n\n<p>As always, thanks for reading and I hope this article has helped. Cheers</p>\n",
      "Content": null,
      "Language": null,
      "Link": "https://khalidabuhakmeh.com/how-to-encrypt-aspnet-core-route-parameters"
    },
    {
      "FeedId": "https://khalidabuhakmeh.com/feed.xml",
      "ItemId": "https://khalidabuhakmeh.com/state-machines-light-switches-and-space-travel-with-stateless-and-dotnet-8",
      "Title": "State Machines, Light Switches, and Space Travel with Stateless and .NET 8",
      "PublishDate": "2024-06-04T00:00:00+00:00",
      "Summary": "<p>State machines are so integral to software development that they often seem invisible to developers. They are used so\nfrequently yet abstracted away through APIs and syntax that many developers don’t directly deal with them. However, we’d\nlike to.</p>\n\n<p>At their core, state machines are systems with finite inputs and deterministic pathways. While they can be complex, the\nbasic structure of nodes and vertices makes them more approachable than they may initially seem.</p>\n\n<p>In this post, I’ll guide you through the process of building two state machines using the .NET\nlibrary <a href=\"https://github.com/dotnet-state-machine/stateless\">Stateless</a>. We’ll\nalso discuss effective strategies for incorporating state machines into your code.</p>\n\n<!--more-->\n\n<h2 id=\"getting-started-with-stateless\">Getting Started with Stateless</h2>\n\n<p>To start using <a href=\"https://github.com/dotnet-state-machine/stateless\">Stateless</a>, you’ll need to install the latest version\nof the package using NuGet.</p>\n\n<pre><code>dotnet add package Stateless\n</code></pre>\n\n<p>From here, you will use the StateMachine class to define the state object and the triggers that mutate the machine’s\nstate.</p>\n\n<p>The example used in the Stateless documentation is that of a phone.</p>\n\n<pre><code class=\"language-csharp\">var phoneCall = new StateMachine&lt;State, Trigger&gt;(State.OffHook);\n\nphoneCall.Configure(State.OffHook)\n    .Permit(Trigger.CallDialled, State.Ringing);\n\nphoneCall.Configure(State.Connected)\n    .OnEntry(t =&gt; StartCallTimer())\n    .OnExit(t =&gt; StopCallTimer())\n    .InternalTransition(Trigger.MuteMicrophone, t =&gt; OnMute())\n    .InternalTransition(Trigger.UnmuteMicrophone, t =&gt; OnUnmute())\n    .InternalTransition&lt;int&gt;(_setVolumeTrigger, (volume, t) =&gt; OnSetVolume(volume))\n    .Permit(Trigger.LeftMessage, State.OffHook)\n    .Permit(Trigger.PlacedOnHold, State.OnHold);\n\n// ...\n\nphoneCall.Fire(Trigger.CallDialled);\n</code></pre>\n\n<p>You’ll notice that the <code>StateMachine</code> has two generic arguments: one for the state and the other for the trigger. These\ntypes can be any .NET type, but they’re <code>enum</code> types in this sample.</p>\n\n<p>Let’s build something closer to how I recommend using Stateless.</p>\n\n<h2 id=\"the-light-switch-state-machine-example\">The Light Switch State Machine Example</h2>\n\n<p>This example shows a <code>Widget</code> class that always has a deterministic state of being <code>On</code> or <code>Off</code>. The trigger for\nour <code>Widget</code> is to <code>Press</code>. While we could implement the state machine as we did previously, I recommend encapsulating\nstate machines within a class.</p>\n\n<pre><code class=\"language-csharp\">public class Widget\n{\n    private readonly StateMachine&lt;State, Trigger&gt; workflow = new(State.Off);\n    public string Name { get; }\n\n    enum State\n    {\n        On,\n        Off\n    }\n    enum Trigger\n    {\n        Press\n    }\n\n    public Widget(string name)\n    {\n        Name = name;\n        \n        workflow.Configure(State.On)\n            .Permit(Trigger.Press, State.Off)\n            .OnEntry(() =&gt; Console.WriteLine($\"🟢 {Name} is {workflow.State}\"));\n        \n        workflow.Configure(State.Off)\n            .Permit(Trigger.Press, State.On)\n            .OnEntry(() =&gt; Console.WriteLine($\"🔴 {Name} is {workflow.State}\"));\n    }\n\n    public void Toggle()\n    {\n        workflow.Fire(Trigger.Press);\n    }\n}\n</code></pre>\n\n<p>Why? It’s much easier to consume these class instances and have the machine’s state exposed through properties and\ninteractions to exist as a method call. In the “real world,” we typically don’t understand the internal behavior of the\nabstractions we interact with; we only observe the outcome of our interactions.</p>\n\n<p>In the case of this implementation, Stateless is managing the state of our <code>Widget</code>, and we know it will be consistent\nwith the behavior we define in the constructor.</p>\n\n<pre><code class=\"language-csharp\">var widget = new Widget(\"Lightbulb 💡\");\n\nConsole.WriteLine($\"Press any key to toggle {widget.Name}\");\nwhile (true) {\n    _ = Console.ReadKey();\n    widget.Toggle();\n}\n</code></pre>\n\n<p>Let’s see it in action!</p>\n\n<pre><code>Press any key to toggle Lightbulb 💡\n🟢 Lightbulb 💡 is On\n🔴 Lightbulb 💡 is Off\n🟢 Lightbulb 💡 is On\n🔴 Lightbulb 💡 is Off\n🟢 Lightbulb 💡 is On\n</code></pre>\n\n<p>This is a neat technique, but admittedly simple. Let’s go to space next.</p>\n\n<h2 id=\"space-travel-with-state-machines\">Space Travel with State Machines</h2>\n\n<p>A challenging concept when working with state machines is managing the state. Luckily, with Stateless, extracting,\nstoring, and rehydrating state is straightforward.</p>\n\n<p>Let’s create a state machine to travel through our solar system.</p>\n\n<pre><code class=\"language-csharp\">public class SpaceTravel\n{\n    public record Planet(String Name, int DistanceFromSunInMillionsOfMiles)\n    {\n        public static readonly Planet Sun = new(nameof(Sun), 0);\n        public static readonly Planet Mercury = new(nameof(Mercury), 36);\n        public static readonly Planet Venus = new(nameof(Venus), 67);\n        public static readonly Planet Earth = new(nameof(Earth), 93);\n        public static readonly Planet Mars = new(nameof(Mars), 142);\n        public static readonly Planet Jupiter = new(nameof(Jupiter), 484);\n        public static readonly Planet Saturn = new(nameof(Saturn), 886);\n        public static readonly Planet Uranus = new(nameof(Uranus), 1784);\n        public static readonly Planet Neptune = new(nameof(Neptune), 2793);\n        public static readonly Planet Pluto = new(nameof(Pluto), 3670);\n        \n        public static readonly List&lt;Planet&gt; All = [\n            Sun, Mercury, Venus,\n            Earth, Mars, Jupiter,\n            Saturn, Uranus, Neptune,\n            Pluto\n        ];\n\n        public override string ToString()\n        {\n            return $\"{Name}\";\n        }\n    }\n\n    enum Actions\n    {\n        In,\n        Out\n    }\n\n    private readonly StateMachine&lt;Planet, Actions&gt; machine;\n    \n    public SpaceTravel(Planet? start = null)\n    {\n        start ??= Planet.Earth;\n\n        if (!Planet.All.Contains(start))\n        {\n            throw new Exception(\"Starting planet must be in our solar system\");\n        }\n\n        machine = new(start);\n        \n        machine.OnTransitionCompleted((transition =&gt;\n        {\n            var (source, destination, direction) = transition;\n            var distance = Math.Abs(source.DistanceFromSunInMillionsOfMiles - destination.DistanceFromSunInMillionsOfMiles);\n            var dir = direction == Actions.In ? \"⬇\" : \"⬆\";\n            Console.WriteLine($\"{dir} 🚀 You traveled {distance} million miles from {source.Name} to {destination.Name}.\");\n        }));\n        \n        machine.Configure(Planet.Sun).Ignore(Actions.In).Permit(Actions.Out, Planet.Mercury);\n        machine.Configure(Planet.Mercury).Permit(Actions.In, Planet.Sun).Permit(Actions.Out, Planet.Venus);\n        machine.Configure(Planet.Venus).Permit(Actions.In, Planet.Mercury).Permit(Actions.Out, Planet.Earth);\n        machine.Configure(Planet.Earth).Permit(Actions.In, Planet.Venus).Permit(Actions.Out, Planet.Mars);\n        machine.Configure(Planet.Mars).Permit(Actions.In, Planet.Earth).Permit(Actions.Out, Planet.Jupiter);\n        machine.Configure(Planet.Jupiter).Permit(Actions.In, Planet.Mars).Permit(Actions.Out, Planet.Saturn);\n        machine.Configure(Planet.Saturn).Permit(Actions.In, Planet.Jupiter).Permit(Actions.Out, Planet.Uranus);\n        machine.Configure(Planet.Uranus).Permit(Actions.In, Planet.Saturn).Permit(Actions.Out, Planet.Neptune);\n        machine.Configure(Planet.Neptune).Permit(Actions.In, Planet.Uranus).Permit(Actions.Out, Planet.Pluto);\n        machine.Configure(Planet.Pluto).Ignore(Actions.Out).Permit(Actions.In, Planet.Neptune);\n    }\n\n    public Planet Current =&gt; machine.State;\n\n    public void In()\n    {\n        machine.Fire(Actions.In);\n    }\n\n    public void Out()\n    {\n        machine.Fire(Actions.Out);\n    }\n}\n\ninternal static class StateMachineExtensions {\n    public static void Deconstruct&lt;TState, TTrigger&gt;(this StateMachine&lt;TState, TTrigger&gt;.Transition transition,\n        out TState source, out TState destination, out TTrigger direction)\n    {\n        source = transition.Source;\n        destination = transition.Destination;\n        direction = transition.Trigger;\n    }\n}\n</code></pre>\n\n<p>We’ve done a few things with this state machine that are more complex than our <code>Widget</code> example.</p>\n\n<ol>\n  <li>The initial state of our <code>StateMachine</code> can be set at instantiation time through the constructor.</li>\n  <li>There are two triggers of <code>In</code> and <code>Out</code>, both of which can be fired through matching methods.</li>\n  <li>The constructor defines how travel can occur from one planet to another, with the <code>Sun</code> and <code>Pluto</code> being re-entry\nnodes. (You can’t leave the solar system).</li>\n  <li>Each transition calculates the distance between two bodies, regardless of the state change.</li>\n</ol>\n\n<p>Let’s do some space travel!</p>\n\n<pre><code class=\"language-csharp\">var system = new SpaceTravel(SpaceTravel.Planet.Earth);\nConsole.WriteLine(\"🔭 Use O(ut) or ⬆ and I(n) and ⬇ keys to move through our solar system.\");\n\nwhile (true)\n{\n    var key = Console.ReadKey(true);\n    switch (key)\n    {\n        case { Key: ConsoleKey.O or ConsoleKey.UpArrow }:\n            system.Out();\n            break;\n        case { Key: ConsoleKey.I or ConsoleKey.DownArrow }:\n            system.In();\n            break;\n        default:\n            var miles = system.Current.DistanceFromSunInMillionsOfMiles;\n            Console.WriteLine($\"🛰️ Currently at {system.Current.Name} ({miles} million miles from the ☀️).\");\n            break;\n    }\n}\n</code></pre>\n\n<p>Running the application, we get the sample output.</p>\n\n<pre><code>🔭 Use O(ut) or ⬆ and I(n) and ⬇ keys to move through our solar system.\n⬆ 🚀 You traveled 49 million miles from Earth to Mars.\n⬆ 🚀 You traveled 342 million miles from Mars to Jupiter.\n⬆ 🚀 You traveled 402 million miles from Jupiter to Saturn.\n⬆ 🚀 You traveled 898 million miles from Saturn to Uranus.\n⬆ 🚀 You traveled 1009 million miles from Uranus to Neptune.\n⬆ 🚀 You traveled 877 million miles from Neptune to Pluto.\n🛰️ Currently at Pluto (3670 million miles from the ☀️).\n</code></pre>\n\n<p>Neat! What about seeing our travel path?</p>\n\n<h2 id=\"graphing-your-state-machines\">Graphing your State Machines</h2>\n\n<p>At any point in time, you can use the <code>UmlDotGraph</code> static class in the Stateless library to output the graph to a\nstring value.</p>\n\n<pre><code class=\"language-csharp\">var graph = UmlDotGraph.Format(workflow.GetInfo());\n</code></pre>\n\n<p>Our light switch sample produces the following <strong>DotGraph</strong> that can be turned into an SVG.</p>\n\n<pre><code>digraph {\ncompound=true;\nnode [shape=Mrecord]\nrankdir=\"LR\"\n\"On\" [label=\"On|entry / Function\"];\n\"Off\" [label=\"Off|entry / Function\"];\n\n\"On\" -&gt; \"Off\" [style=\"solid\", label=\"Press\"];\n\"Off\" -&gt; \"On\" [style=\"solid\", label=\"Press\"];\n init [label=\"\", shape=point];\n init -&gt; \"Off\"[style = \"solid\"]\n}\n</code></pre>\n\n<p>These visualizations can be helpful for documentation or diagnosing issues when exceptions occur in the state machine.</p>\n\n<h2 id=\"conclusion\">Conclusion</h2>\n\n<p>Stateless is a very cool library worth checking out. It can add the necessary structure to otherwise complex workflows.\nI highly recommend encapsulating the <code>StateMachine</code> class within a container class; otherwise, you’ll be dealing with\nsome unwieldy APIs.</p>\n\n<p>A slew of APIs not covered in this post can help you determine if an action can be executed, what next steps are\npermitted, and error handling for unhandled triggers. It is a well-thought-out library, and I hope you try it.</p>\n\n<p>As always, thanks for reading and sharing my posts. Cheers.</p>\n",
      "Content": null,
      "Language": null,
      "Link": "https://khalidabuhakmeh.com/state-machines-light-switches-and-space-travel-with-stateless-and-dotnet-8"
    },
    {
      "FeedId": "https://khalidabuhakmeh.com/feed.xml",
      "ItemId": "https://khalidabuhakmeh.com/blazor-html-forms-submitting-and-antiforgery-tokens",
      "Title": "Blazor HTML Forms, Submitting, and Antiforgery Tokens",
      "PublishDate": "2024-05-28T00:00:00+00:00",
      "Summary": "<p>I love the web and HTML. It’s certainly come a long way since its inception and what it provides as a core experience\nfor web developers. While folks can certainly build HTML-exclusive experiences, adding forms on a page inevitably leads\nto introducing a backend tech stack. Recently, I’ve been experimenting with Blazor Server-side Rendering (SSR) and how\ndevelopers can use its component-driven approach while still building the web experience they know and love.</p>\n\n<p>In this post, we’ll see how to use the plain-old <code>form</code> tag with a Blazor SSR page, handle form posts, and attach\nantiforgery tokens.</p>\n\n<!--more-->\n\n<h2 id=\"why-not-use-editform\">Why not use EditForm?</h2>\n\n<p>Anyone familiar with Blazor would likely immediately think, “Why not use\nthe <a href=\"https://learn.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.components.forms.editform?view=aspnetcore-8.0\"><code>EditForm</code></a>\ncomponent?” Well, for my taste, the <code>EditForm</code> component has so many hooks, fields, and requirements that it begins to\nfeel like a burden compared to the humble HTML form. In my opinion, much of the <code>EditForm</code> functionality is overkill for\nan SSR scenario.</p>\n\n<p>You’re welcome to use <code>EditForm</code> if you find its features useful.</p>\n\n<h2 id=\"html-form-blazor-basics\">HTML Form Blazor Basics</h2>\n\n<p>Blazor is a component-driven framework, and even top-level pages are considered components. In a way, it’s simpler to\nthink of each component as a tree of other components, and you have to start somewhere. This approach means that a\ncomponent page must handle all incoming requests and “route” those requests to the appropriate handlers.</p>\n\n<p>In a Blazor application, there are two levels of “routing”. The first is what you’d consider traditional HTTP path\nrouting using the <code>@page</code> directive. The second uses the <code>@formname</code> attribute on a <code>form</code> to inject a handler name into\nforms, in which you can use that additional information for application logic.</p>\n\n<p>Let’s add a basic form to a page and submit it to a Blazor component. <strong>THIS WILL NOT WORK</strong></p>\n\n<pre><code class=\"language-razor\">@page \"/\"\n\n&lt;PageTitle&gt;Home&lt;/PageTitle&gt;\n\n&lt;h1&gt;Hello, world!&lt;/h1&gt;\n\n@if (Name is { Length: &gt;0 } name)\n{\n    &lt;h2&gt;@name&lt;/h2&gt;\n}\nelse\n{\n    &lt;h2&gt;Welcome to your new app.&lt;/h2&gt;\n}\n\n&lt;div class=\"my-2\"&gt;\n    &lt;hr&gt;\n    &lt;form action=\"\" method=\"post\"&gt;\n        &lt;div class=\"input-group mb-3\"&gt;\n            &lt;input type=\"text\" class=\"form-control\" \n                   name=\"name\" placeholder=\"Say your name...\"&gt;\n            &lt;button\n                id=\"button-addon2\"\n                class=\"btn btn-outline-secondary\"\n                type=\"submit\"&gt;\n                Say Hello\n            &lt;/button&gt;\n        &lt;/div&gt;\n    &lt;/form&gt;\n&lt;/div&gt;\n\n@code\n{\n    [SupplyParameterFromForm] public string? Name { get; set; }\n}\n</code></pre>\n\n<p>As soon as we submit the page, we get the following error.</p>\n\n<pre><code>The POST request does not specify which form is being submitted. To fix this, ensure &lt;form&gt; elements have a @formname attribute with any unique value, or pass a FormName parameter if using &lt;EditForm&gt;.\n</code></pre>\n\n<p>To fix this, we need to add the <code>@formname</code> SSR attribute and give it a unique name within the page scope.</p>\n\n<pre><code class=\"language-razor\">@page \"/\"\n\n&lt;PageTitle&gt;Home&lt;/PageTitle&gt;\n\n&lt;h1&gt;Hello, world!&lt;/h1&gt;\n\n@if (Name is { Length: &gt;0} name)\n{\n    &lt;h2&gt;Hello, @name!&lt;/h2&gt;\n}\nelse\n{\n    &lt;h2&gt;Welcome to your new app.&lt;/h2&gt;\n}\n\n&lt;div class=\"my-2\"&gt;\n    &lt;hr&gt;\n    &lt;form action=\"\" method=\"post\" @formname=\"main\"&gt;\n        &lt;div class=\"input-group mb-3\"&gt;\n            &lt;input type=\"text\" class=\"form-control\" \n                   name=\"name\" placeholder=\"Say your name...\"&gt;\n            &lt;button\n                id=\"button-addon2\"\n                class=\"btn btn-outline-secondary\"\n                type=\"submit\"&gt;\n                Say Hello\n            &lt;/button&gt;\n        &lt;/div&gt;\n    &lt;/form&gt;\n&lt;/div&gt;\n\n@code\n{\n    [SupplyParameterFromForm] public string? Name { get; set; }\n}\n</code></pre>\n\n<p>We still have an issue as you may notice when you submit this form.</p>\n\n<pre><code>A valid antiforgery token was not provided with the request. Add an antiforgery token, or disable antiforgery validation for this endpoint.\n</code></pre>\n\n<p>Blazor has an <code>AntiforgeryToken</code> component we forgot to add to the form.</p>\n\n<pre><code class=\"language-razor\">    &lt;form action=\"\" method=\"post\" @formname=\"main\"&gt;\n        &lt;div class=\"input-group mb-3\"&gt;\n            &lt;input type=\"text\" class=\"form-control\" \n                   name=\"name\" placeholder=\"Say your name...\"&gt;\n            &lt;button\n                id=\"button-addon2\"\n                class=\"btn btn-outline-secondary\"\n                type=\"submit\"&gt;\n                Say Hello\n            &lt;/button&gt;\n        &lt;/div&gt;\n        &lt;AntiforgeryToken/&gt;\n    &lt;/form&gt;\n</code></pre>\n\n<p>Woot! Now it works. If we look at the HTML rendered to the page, you’ll see what Blazor is doing to transform our form\ninto one compatible with the Blazor request pipeline.</p>\n\n<pre><code class=\"language-html\">&lt;form action=\"\" method=\"post\"&gt;\n&lt;input type=\"hidden\" name=\"_handler\" value=\"main\"&gt;&lt;div class=\"input-group mb-3\"&gt;&lt;input type=\"text\" class=\"form-control\" name=\"name\" placeholder=\"Say your name...\"&gt;\n            &lt;button id=\"button-addon2\" class=\"btn btn-outline-secondary\" type=\"submit\"&gt;\n                Say Hello\n            &lt;/button&gt;&lt;/div&gt;\n        &lt;input type=\"hidden\" name=\"__RequestVerificationToken\" value=\"CfDJ8LTlmMRHw3JNmUOvTfhPRjst1GbXskBXT7OtvUmsHbD9sMekv4N4xfoGi1hZlx-XqE_xVTjkPJ2U2T_ZN02Z92RfdhmdofvYJYlPn4QwD_Pno-HJ_z6JkjMTtgOcTkO3q72vEYX_Hl9MaHvju50tTz8\"&gt;&lt;/form&gt;\n</code></pre>\n\n<p>The <code>hidden</code> inputs are notable, as they provide values for <code>_handler</code> and our antiforgery token.</p>\n\n<h2 id=\"being-extra-with-onsubmit\">Being Extra with @onsubmit</h2>\n\n<p>I hinted at this in the previous section, but Blazor is processing the “HTML” in our components to inject and add input\nelements that we didn’t specify. We can take advantage of another attribute, <code>@onsubmit</code>, to ensure that all submissions\nare handled by the appropriate handler on the page.</p>\n\n<pre><code class=\"language-razor\">@page \"/\"\n\n&lt;PageTitle&gt;Home&lt;/PageTitle&gt;\n\n&lt;h1&gt;Hello, world!&lt;/h1&gt;\n\n@if (Message is not null)\n{\n    &lt;h2&gt;@Message&lt;/h2&gt;\n}\nelse\n{\n    &lt;h2&gt;Welcome to your new app.&lt;/h2&gt;\n}\n\n&lt;div class=\"my-2\"&gt;\n    &lt;hr&gt;\n    &lt;form action=\"\" method=\"post\" @formname=\"main\" @onsubmit=\"Submit\"&gt;\n        &lt;div class=\"input-group mb-3\"&gt;\n            &lt;input type=\"text\" class=\"form-control\" \n                   name=\"name\" placeholder=\"Say your name...\"&gt;\n            &lt;button\n                id=\"button-addon2\"\n                class=\"btn btn-outline-secondary\"\n                type=\"submit\"&gt;\n                Say Hello\n            &lt;/button&gt;\n        &lt;/div&gt;\n        &lt;AntiforgeryToken/&gt;\n    &lt;/form&gt;\n&lt;/div&gt;\n\n@code\n{\n    [SupplyParameterFromForm(FormName = \"main\")] public string? Name { get; set; }\n    string? Message { get; set; }\n\n    void Submit()\n    {\n        if (!string.IsNullOrWhiteSpace(Name))\n        {\n            Message = $\"Hello, {Name} to your Blazor App!\";\n        }\n    }\n}\n</code></pre>\n\n<p>You’ll notice a few new elements in the previous code examples.</p>\n\n<ol>\n  <li>Our form now has an <code>@onsubmit</code> attribute. This allows Blazor to execute the method at the time of a request\naccording to the <code>_handler</code> value passed on a submit.</li>\n  <li>The <code>SupplyParameterFromForm</code> now has a <code>FormName</code> property to match our form name. This is optional and only\nnecessary when dealing with multiple forms on a single page.</li>\n  <li>We have a <code>Submit</code> method with a bit more complex logic for our component.</li>\n</ol>\n\n<p>Cool! We have a functioning form on a Blazor SSR page and haven’t sacrificed security or HTML readability. We also now\nunderstand how to add additional forms and handlers as we expand the page’s functionality.</p>\n\n<h2 id=\"conclusion\">Conclusion</h2>\n\n<p>HTML is great, and using it with ASP.NET Core is pretty great as well. Having Blazor SSR support makes it easy to write\nperformant server-rendered pages while still maintaining a component-driven approach that so many folks like. I hope you\nfound this article helpful. Cheers.</p>\n",
      "Content": null,
      "Language": null,
      "Link": "https://khalidabuhakmeh.com/blazor-html-forms-submitting-and-antiforgery-tokens"
    },
    {
      "FeedId": "https://khalidabuhakmeh.com/feed.xml",
      "ItemId": "https://khalidabuhakmeh.com/fix-missing-openapi-elements-from-aspnet-core-minimal-api-apps",
      "Title": "Fix Missing OpenAPI Elements From ASP.NET Core Minimal API Apps",
      "PublishDate": "2024-05-21T00:00:00+00:00",
      "Summary": "<p>When working in .NET, there’s a lot of room for reorganizing a codebase, but sometimes we can organize ourselves into a\nmess of a problem. Recently, when working on an ASP.NET Core Minimal API demo, I seemingly broke an endpoint’s OpenAPI\ndefinition, and it was no longer in the list of endpoints.</p>\n\n<p>In this short post, we’ll compare two endpoints and discuss why one is different than the other, why it might break\nOpenAPI integrations, and how to fix it.</p>\n\n<!--more-->\n\n<p>Let’s start with a typical Minimal API endpoint.</p>\n\n<pre><code class=\"language-csharp\">app.MapGet(\"/hello\", () =&gt;\n    {\n        return new Hello(\"World\");\n    })\n    .WithName(\"Hello\")\n    .WithOpenApi();\n    \nrecord Hello(string Target);\n</code></pre>\n\n<p>Our endpoint registration contains enough metadata to determine the parameters, the return type and its structure, and\nthe name of our endpoint. Great! That’s more than enough for ASP.NET Core to generate an OpenAPI definition entry.</p>\n\n<p>Let’s do some refactoring of our handler to a local function.</p>\n\n<pre><code class=\"language-csharp\">Task&lt;Hello&gt; Handler()\n{\n    return Task.FromResult(new Hello(\"World\"));\n}\n\napp.MapGet(\"/hello\", Handler)\n    .WithName(\"Hello\")\n    .WithOpenApi();\n\nrecord Hello(string Target);\n</code></pre>\n\n<p>So far, so good! Everything still functions as expected. Now, let’s add a similar endpoint, but we’ll define\nan <code>HttpContext</code> parameter on our endpoint.</p>\n\n<pre><code class=\"language-csharp\">Task&lt;Hello&gt; HandlerWithContext(HttpContext ctx)\n{\n    return Task.FromResult(new Hello(\"World\"));\n}\n\napp.MapGet(\"/goodbye\", HandlerWithContext)\n    .WithName(\"Goodbye\")\n    .WithOpenApi();\n</code></pre>\n\n<p>What?! Our OpenAPI endpoint is no longer being generated and is appearing on our definitions page. What happened?!</p>\n\n<p>If we look at the warning generated by code analysis, we’ll see the culprit.</p>\n\n<blockquote>\n  <p>ASP0016: The method used to create a RequestDelegate returns Task&lt;Hello&gt;. RequestDelegate discards this value.\nIf this isn’t intended then change the return type to non-generic Task or, if the delegate is a route handler, cast it\nto Delegate so the return value is written to the response.</p>\n</blockquote>\n\n<p>Ah! We accidentally turned a method into <code>RequestDelegate</code> and stripped all the metadata necessary to build our OpenAPI\ndefinition. We can fix that by casting our registration to a delegate.</p>\n\n<pre><code class=\"language-csharp\">Task&lt;Hello&gt; HandlerWithContext(HttpContext ctx)\n{\n    return Task.FromResult(new Hello(\"World\"));\n}\n\napp.MapGet(\"/goodbye\", (Delegate)HandlerWithContext)\n    .WithName(\"Goodbye\")\n    .WithOpenApi();\n</code></pre>\n\n<p>All is good in the world again.</p>\n\n<h2 id=\"conclusion\">Conclusion</h2>\n\n<p>Remember that while code can look very similar syntactically, you may inadvertently strip enough semantics to break\nASP.NET Core’s OpenAPI integration when refactoring your Minimal API endpoints.</p>\n\n<p>I hope you found this post helpful. Cheers.</p>\n",
      "Content": null,
      "Language": null,
      "Link": "https://khalidabuhakmeh.com/fix-missing-openapi-elements-from-aspnet-core-minimal-api-apps"
    },
    {
      "FeedId": "https://khalidabuhakmeh.com/feed.xml",
      "ItemId": "https://khalidabuhakmeh.com/aspnet-core-ssr-web-components-and-enhance-wasm",
      "Title": "ASP.NET Core, SSR Web Components, and Enhance Wasm",
      "PublishDate": "2024-05-14T00:00:00+00:00",
      "Summary": "<p>Web components are some of the most exciting technology I’ve seen in a long time. They promise to revolutionize how we\nwrite, maintain, and ship HTML-based applications. With web components, you can extend the set of HTML tags specific to\nyour site while still providing the functionality you intended with less markup.</p>\n\n<p>And then there’s Web Assembly, or Wasm for short, a technology that opens up a world of possibilities. It enables all\necosystems to package functionality in a reusable format that can be deployed across a wide range of platforms.</p>\n\n<p>Could we combine them to provide ASP.NET Core with brand-new server-side rendering functionality while avoiding the\nclient-side costs of web components as they attach to the DOM? Sure we can!\nWith <a href=\"https://enhance.dev/wasm\">Enhance Wasm</a>.</p>\n\n<!--more-->\n\n<h2 id=\"what-is-enhance-wasm\">What is Enhance WASM?</h2>\n\n<p>Enhance WASM is an open-source initiative to bring the features of <a href=\"https://enhance.dev/why-enhance\">Enhance</a>, a dynamic\nweb apps framework, to the server for all technology stacks through Wasm. As mentioned in the opening, web components\nare significant but take some time to attach to an active web page. This can be less than ideal. If we can render some\nof the web component’s HTML in advance, we can provide users with a better and faster experience while the page catches\nup.</p>\n\n<p>Web components are a standard way of building components for HTML apps without libraries like React, Angular, Vue, or\nSvelte. They are also very lightweight, typically not needing much, if any, build steps. The Enhance project has guiding\ntenants that make it appealing for folks suffering from SPA fatigue:</p>\n\n<ul>\n  <li>Author and deliver HTML Pages</li>\n  <li>Use Web Standards</li>\n  <li>Progressively enhance working HTML</li>\n</ul>\n\n<p>ASP.NET Core and Razor are perfect fits for this philosophy as they are mature and reliable technologies. Let’s see how\nto get these technologies working together.</p>\n\n<h2 id=\"getting-started\">Getting Started</h2>\n\n<p>You’ll first need to download the latest version\nof <a href=\"https://github.com/enhance-dev/enhance-ssr-wasm\">Enhance WASM from its GitHub page</a>. Then, place\nthe <code>enhance-ssr.wasm</code> file as <code>Content</code> in an ASP.NET Core application and set it to always copy to your build output\ndirectory.</p>\n\n<p>Next, install the following packages.</p>\n\n<pre><code class=\"language-xml\">&lt;ItemGroup&gt;\n  &lt;PackageReference Include=\"Extism.runtime.all\" Version=\"1.2.0\" /&gt;\n  &lt;PackageReference Include=\"Extism.Sdk\" Version=\"1.2.0\" /&gt;\n&lt;/ItemGroup&gt;\n</code></pre>\n\n<p>The SDK package is a wrapper for the runtime packages. Both are required to make the following code work.</p>\n\n<p>Now we’re ready to write a wrapper for Enhance Wasm.</p>\n\n<h2 id=\"running-enhance-wasm-in-net\">Running Enhance WASM in .NET</h2>\n\n<p>This part is pretty straightforward. We need to load the <code>enhance-ssr.wasm</code> file into memory, then load it as an Extism\nplugin.</p>\n\n<pre><code class=\"language-csharp\">using System.Text.Encodings.Web;\nusing System.Text.Json;\nusing System.Text.Json.Serialization;\nusing Extism.Sdk;\n\nnamespace EnhanceWebComponents.Services;\n\npublic class EnhanceServerSideRenderer(Dictionary&lt;string, string&gt; webComponentElements)\n{\n    private static readonly byte[] Wasm =\n        File.ReadAllBytes(\"enhance-ssr.wasm\");\n\n    private readonly Plugin plugin = new(Wasm, [], withWasi: true);\n\n    private static readonly JsonSerializerOptions Options = new()\n    {\n        PropertyNamingPolicy = JsonNamingPolicy.CamelCase,\n        DictionaryKeyPolicy = JsonNamingPolicy.CamelCase,\n        Encoder = JavaScriptEncoder.UnsafeRelaxedJsonEscaping,\n        DefaultIgnoreCondition = JsonIgnoreCondition.WhenWritingNull\n    };\n\n    public EnhanceResult Process(EnhanceInput input)\n    {\n        var value = new EnhanceInputWithComponents(input.Markup, webComponentElements, input.InitialState);\n        var json = JsonSerializer.Serialize(value, Options);\n        var result = plugin.Call(\"ssr\", json);\n        \n        return result is null\n            ? throw new Exception(\"unable to process web component\")\n            : JsonSerializer.Deserialize&lt;EnhanceResult&gt;(result, Options)!;\n    }\n}\n\npublic record EnhanceInput(\n    string Markup,\n    object? InitialState = null\n);\n\ninternal record EnhanceInputWithComponents(\n    string Markup,\n    Dictionary&lt;string, string&gt; Elements,\n    object? InitialState\n);\n\npublic record EnhanceResult(\n    string Document,\n    string Body,\n    string Styles\n);\n</code></pre>\n\n<p>Now, we can call this code with web component definitions and elements to process.</p>\n\n<pre><code class=\"language-csharp\">using EnhanceWebComponents.Services;\nusing Xunit.Abstractions;\n\nnamespace EnhanceWebComponents.Tests;\n\npublic class EnhanceServerSideRendererTests(ITestOutputHelper output)\n{\n    private EnhanceServerSideRenderer sut = new(\n        webComponentElements: new()\n        {\n            {\n                \"my-header\",\n                // lang=javascript\n                \"\"\"\n                function MyHeader({ html }) \n                {\n                    return html`&lt;style&gt;h1{color:red;}&lt;/style&gt;&lt;h1&gt;&lt;slot&gt;&lt;/slot&gt;&lt;/h1&gt;` \n                }\n                \"\"\"\n            },\n            {\n                \"my-component-state\",\n                // lang=javascript\n                \"\"\"\n                function MyComponentState({ html, state }) {\n                  const { store } = state\n                  return html`&lt;span&gt;${ store?.name }&lt;/span&gt;`\n                }\n                \"\"\"\n            }\n        }\n    );\n\n    [Fact]\n    public void Can_process_web_component()\n    {\n        var input = new EnhanceInput(\n            \"&lt;my-header&gt;Hello World&lt;/my-header&gt;\"\n        );\n\n        var result = sut.Process(input);\n        \n        output.WriteLine(result.Body);\n\n        Assert.NotNull(result);\n        Assert.Equal(\"\"\"&lt;my-header enhanced=\"✨\"&gt;&lt;h1&gt;Hello World&lt;/h1&gt;&lt;/my-header&gt;\"\"\", result.Body);\n        Assert.Equal(\"my-header h1 {\\n  color: red;\\n}\", result.Styles);\n    }\n    \n    [Fact]\n    public void Can_process_web_component_with_state()\n    {\n        var input = new EnhanceInput(\n            \"&lt;my-component-state&gt;&lt;/my-component-state&gt;\",\n            // accessed via state.store.name in JavaScript\n            new { name = \"Khalid\" }\n        );\n\n        var result = sut.Process(input);\n        \n        output.WriteLine(result.Body);\n\n        Assert.NotNull(result);\n        Assert.Equal(\"\"\"&lt;my-component-state enhanced=\"✨\"&gt;&lt;span&gt;Khalid&lt;/span&gt;&lt;/my-component-state&gt;\"\"\", result.Body);\n    }\n}\n</code></pre>\n\n<p>Wooooooooah! It works! Well, it’s nice but it could be nicer. Let’s make a tag helper for ASP.NET Core.</p>\n\n<h2 id=\"aspnet-core-enhance-wasm-tag-helper\">ASP.NET Core Enhance Wasm Tag Helper</h2>\n\n<p>ASP.NET Core has tag helpers that should make this even more awesome, so let’s do that!</p>\n\n<p>We’ll create two classes: <code>EnhanceTagHelper</code> and <code>EnhanceRequestContext</code>.</p>\n\n<pre><code class=\"language-csharp\">using System.Text;\nusing System.Text.Encodings.Web;\nusing Microsoft.AspNetCore.Razor.TagHelpers;\n\nnamespace EnhanceWebComponents.Services;\n\n[HtmlTargetElement(Attributes = EnhanceSsrAttribute)]\npublic class EnhanceTagHelper(EnhanceServerSideRenderer enhanceServerSideRenderer, EnhanceRequestContext enhanceCtx) : TagHelper\n{\n    private const string EnhanceSsrAttribute = \"enhance-ssr\"; \n    public override async Task ProcessAsync(TagHelperContext context, TagHelperOutput output)\n    {\n        output.Attributes.Clear();\n        foreach (var attribute in context.AllAttributes)\n        {\n            if (attribute.Name == \"enhance-ssr\")\n                continue;\n            \n            output.Attributes.Add(attribute);\n        }\n        output.Content = await output.GetChildContentAsync();\n\n        var sb = new StringBuilder();\n        await using var stringWriter = new StringWriter(sb);\n        output.WriteTo(stringWriter, HtmlEncoder.Default);\n\n        var input = new EnhanceInput(sb.ToString());\n        \n        var result = enhanceServerSideRenderer.Process(input);\n        // remove outer-wrapper\n        output.TagName = \"\";\n        output.Content.SetHtmlContent(result.Body);\n        \n        // any scoped css goes into the current context\n        enhanceCtx.Add(result);\n    }\n}\n</code></pre>\n\n<p>You notice the type <code>EnhanceRequestContext</code>; this request-scoped instance allows us to push processed CSS into memory\nwhile all the components are being processed.</p>\n\n<pre><code class=\"language-csharp\">using System.Collections.Concurrent;\nusing System.Text;\nusing Microsoft.AspNetCore.Html;\n\nnamespace EnhanceWebComponents.Services;\n\npublic class EnhanceRequestContext\n{\n    private ConcurrentBag&lt;EnhanceResult&gt; Results { get; }\n        = new();\n\n    public void Add(EnhanceResult result) =&gt;\n        Results.Add(result);\n    \n    public IHtmlContent Styles()\n    {\n        return new HtmlString(\n            // lang=html\n            $\"\"\"\n             &lt;style enhanced=\"✨\"&gt;\n                {GetAllStyles()}\n             &lt;/style&gt;\n             \"\"\"\n        );\n    }\n    \n    private string GetAllStyles()\n    {\n        var sb = new StringBuilder();\n        // we only want the unique styles\n        foreach (var result in Results.DistinctBy(x =&gt; x.Styles)) \n            sb.AppendLine(result.Styles);\n        return sb.ToString();\n    }\n}\n</code></pre>\n\n<p>Let’s register these types in <code>Program.cs</code> in our services collection.</p>\n\n<pre><code class=\"language-csharp\">builder.Services.AddSingleton(new EnhanceServerSideRenderer(\n    // Note: pull these definitions from somewhere else.\n    // you could probably read these from a folder in `wwwroot/js` \n    // and register them by convention `name of file` and `contents`.\n    webComponentElements: new()\n    {\n        {\n            \"my-header\",\n            // lang=javascript\n            \"\"\"\n            function MyHeader({ html }) \n            {\n                return html`&lt;style&gt;h1{color:purple;}&lt;/style&gt;&lt;h1&gt;&lt;slot&gt;&lt;/slot&gt;&lt;/h1&gt;` \n            }\n            \"\"\"\n        }\n    }\n));\n\n// a \"per request\" entity to store results so you \n// can then spit out the scoped CSS styles where you need them\nbuilder.Services.AddScoped&lt;EnhanceRequestContext&gt;();\n</code></pre>\n\n<p>We must also inform Razor about our new tag helper in <code>_ViewImports.cshtml</code>.</p>\n\n<pre><code class=\"language-razor\">@using EnhanceWebComponents\n@namespace EnhanceWebComponents.Pages\n@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers\n@addTagHelper *, EnhanceWebComponents\n</code></pre>\n\n<p>We also update our <code>_Layout.cshtml</code> file to use the <code>EnhanceRequestContext</code> to render the CSS. Since\nthe <code>_Layout.cshtml</code> is processed last, we know all web components will have already been processed in our views.</p>\n\n<pre><code class=\"language-razor\">@using EnhanceWebComponents.Services\n@inject EnhanceRequestContext Enhance\n\n&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"utf-8\"/&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"/&gt;\n    &lt;title&gt;@ViewData[\"Title\"] - EnhanceWebComponents&lt;/title&gt;\n    &lt;link rel=\"stylesheet\" href=\"~/lib/bootstrap/dist/css/bootstrap.min.css\"/&gt;\n    &lt;link rel=\"stylesheet\" href=\"~/css/site.css\" asp-append-version=\"true\"/&gt;\n    &lt;link rel=\"stylesheet\" href=\"~/EnhanceWebComponents.styles.css\" asp-append-version=\"true\"/&gt;\n    @Enhance.Styles()\n&lt;/head&gt;\n</code></pre>\n\n<p><strong>Note: if you want to process web components in the <code>_Layout.cshtml</code> file, they will work, but you need to get any\nscoped CSS into the collection. This can be done using middleware or some other pre-layout processing.</strong> This is an edge\ncase, and I thought it was overkill for a proof of concept.</p>\n\n<p>Finally, we can use the tag helper and our server-side rendered web components in any Razor view.</p>\n\n<pre><code class=\"language-razor\">@page\n@model IndexModel\n@{\n    ViewData[\"Title\"] = \"Home page\";\n}\n\n&lt;div class=\"text-center\"&gt;\n    &lt;my-header class=\"display-4\" enhance-ssr&gt;Hello World&lt;/my-header&gt;\n    &lt;my-header class=\"display-3\" enhance-ssr&gt;Hello Again&lt;/my-header&gt;\n    &lt;p&gt;Learn about &lt;a href=\"https://learn.microsoft.com/aspnet/core\"&gt;\n        building Web apps with ASP.NET Core\n    &lt;/a&gt;.&lt;/p&gt;\n&lt;/div&gt;\n</code></pre>\n\n<p>With the resulting HTML being what we expected.</p>\n\n<pre><code class=\"language-html\">&lt;div class=\"text-center\"&gt;\n    &lt;my-header class=\"display-4\" enhanced=\"✨\"&gt;&lt;h1&gt;Hello World&lt;/h1&gt;&lt;/my-header&gt;\n    &lt;my-header class=\"display-3\" enhanced=\"✨\"&gt;&lt;h1&gt;Hello Again&lt;/h1&gt;&lt;/my-header&gt;\n    &lt;p&gt;Learn about &lt;a href=\"https://learn.microsoft.com/aspnet/core\"&gt;\n        building Web apps with ASP.NET Core\n    &lt;/a&gt;.&lt;/p&gt;\n&lt;/div&gt;\n</code></pre>\n\n<p>along with the aggregated <code>style</code> element.</p>\n\n<pre><code class=\"language-html\">&lt;style enhanced=\"✨\"&gt;\nmy-header h1 {\n  color: purple;\n}\n&lt;/style&gt;\n</code></pre>\n\n<p>Awesome!</p>\n\n<h2 id=\"conclusion\">Conclusion</h2>\n\n<p>If you’re interested in trying this, I’ve made the *\n*<a href=\"https://github.com/khalidabuhakmeh/EnhanceWebComponents\">code available on GitHub</a>**. I haven’t thought out some edge\ncases, like the <code>_Layout.cshtml</code> processing, and what to do with attributes in Razor vs. the ones on web components.\nThat said, there’s a lot of potential here for providing an experience never before seen for ASP.NET Core developers.</p>\n\n<p>Thanks for reading and sharing this post with friends and colleagues. Cheers.</p>\n",
      "Content": null,
      "Language": null,
      "Link": "https://khalidabuhakmeh.com/aspnet-core-ssr-web-components-and-enhance-wasm"
    },
    {
      "FeedId": "https://khalidabuhakmeh.com/feed.xml",
      "ItemId": "https://khalidabuhakmeh.com/how-to-add-http-headers-to-blazor-components-with-razorcomponentresult",
      "Title": "How to add HTTP headers to Blazor Components with RazorComponentResult",
      "PublishDate": "2024-05-07T00:00:00+00:00",
      "Summary": "<p>In a previous post, ]I wrote about using <code>RazorComponentResult</code> to render Blazor components](/how-to-use-blazor-server-rendered-components-with-htmx) from ASP.NET Core Minimal APIs. The ability allows\ndevelopers to reuse Blazor components in new and exciting scenarios, specifically with JavaScript UI frameworks and\nlibraries such as React, Vue, Angular, and my favorite library, <a href=\"https://htmx.org\">HTMX</a>.</p>\n\n<p>In this concise post, we’ll explore setting HTTP Headers for <code>RazorComponentResult</code> and creating an extension method\nthat simplifies this task, making your development process more efficient.</p>\n\n<!--more-->\n\n<h2 id=\"razorcomponentresult-recap\">RazorComponentResult Recap</h2>\n\n<p>Blazor is a component-driven development framework inspired by the <a href=\"https://react.dev\">JavaScript React library</a>.\nComponents aim to encapsulate UI elements into reusable elements to help accelerate development. They can vary in size,\nfrom buttons, links, and textboxes to logical components such as detail cards, tables, video elements, and so on.</p>\n\n<p>Component trees also help manage a page’s state, and Blazor provides some DOM diffing capabilities similar to React. The\naim is to make pages more responsive and performant to user interactions without unnecessary DOM swaps. This feature\nexpects components to be nested in other components until you reach the parent component, typically a page. But what\nabout using Blazor for HTML fragments?</p>\n\n<p><code>RazorComponentResult</code> allows ASP.NET Core endpoints to generate HTML <strong>server-side</strong> from Blazor components. This can\nhelp build HTML APIs for other JavaScript frameworks or vanilla JavaScript calls from your client UI. Let’s see what it\nlooks like.</p>\n\n<pre><code class=\"language-csharp\">app.MapGet(\"/vanilla\",\n    () =&gt; new RazorComponentResult&lt;LoveHtmx&gt;(new\n    {\n        Message = \"I ❤️ ASP.NET Core\"\n    }));\n</code></pre>\n\n<p>The corresponding component of <code>LoveHtmx</code> is what you’d expect a Blazor component to look like.</p>\n\n<pre><code class=\"language-razor\">&lt;div class=\"alert alert-info\"&gt;\n    &lt;span class=\"text-lg-center\"&gt;\n        @Message\n    &lt;/span&gt;\n&lt;/div&gt;\n\n@code{\n    [Parameter]\n    public string? Message { get; set; } = \"I ❤️ HTMX\";\n}\n</code></pre>\n\n<p>Cool! Now that we’re all caught back up, how do we set these HTTP headers?</p>\n\n<h2 id=\"httpcontext-and-server-side-blazor-components\">HttpContext and Server-Side Blazor Components</h2>\n\n<p><code>RazorComponentResult</code> generates the HTML that would accompany a Blazor component. While it’s essential to recognize\nthis approach’s limitations, those limitations allow us to make some advantageous assumptions.</p>\n\n<ul>\n  <li>Blazor Components must be completely rendered on the server, with no interactivity. I’m sorry, but you’re not getting\nSignalR or Wasm here.</li>\n  <li><code>RazorComponentResult</code> manages the entire <code>Response</code> lifecycle.</li>\n  <li>You need to specify the state of the component at render time.</li>\n  <li>You get access to all the server goodies, like <code>HttpContext</code>.</li>\n</ul>\n\n<p>OK, let’s first do the <strong>wrong</strong> thing. This does not work ❌.</p>\n\n<pre><code class=\"language-csharp\">app.MapGet(\"/vanilla\",\n    (HttpContext ctx) =&gt;\n    {\n        ctx.Response.Headers.Append(\"Nope\", \"Fail\");\n        \n        return new RazorComponentResult&lt;LoveHtmx&gt;(new\n        {\n            Message = \"I ❤️ ASP.NET Core\"\n        });\n    });\n</code></pre>\n\n<p>This will fail if you try to set HTTP headers from your ASP.NET Core Minimal API endpoint. Remember, the\nRazorComponentResult manages the entire Response state. How do we get what we want?</p>\n\n<p>First, we must add an <code>IHttpContextAccessor</code> to our services collection in our <code>Program</code> file.</p>\n\n<pre><code class=\"language-csharp\">builder.Services.AddHttpContextAccessor();\n</code></pre>\n\n<p>Now, let’s get to the component. We need to set headers in the component using the <code>HttpContext</code>instance, which we’ll\nget from an <code>IHttpContextAccessor</code>. We can inject the instance using the <code>InjectAttribute</code> or the <code>@inject</code> declaration.</p>\n\n<pre><code class=\"language-razor\">\n&lt;div class=\"alert alert-info\"&gt;\n    &lt;span class=\"text-lg-center\"&gt;\n        @Message\n    &lt;/span&gt;\n&lt;/div&gt;\n\n@code{\n    [Parameter] public string? Message { get; set; } = \"I ❤️ HTMX\";\n\n    [Parameter]\n    public IHeaderDictionary? Headers { get; set; }\n        = new HeaderDictionary();\n\n    [Inject] public IHttpContextAccessor? HttpContextAccessor { get; set; }\n\n    protected override Task OnInitializedAsync()\n    {\n        if (HttpContextAccessor?.HttpContext is { } ctx &amp;&amp;\n            Headers is not null)\n        {\n            foreach (var (key, value) in Headers)\n            {\n                ctx.Response.Headers.Append(key, value);\n            }\n        }\n\n        return base.OnInitializedAsync();\n    }\n}\n</code></pre>\n\n<p>Or you might prefer this approach.</p>\n\n<pre><code class=\"language-razor\">@inject IHttpContextAccessor HttpContextAccessor\n\n&lt;div class=\"alert alert-info\"&gt;\n    &lt;span class=\"text-lg-center\"&gt;\n        @Message\n    &lt;/span&gt;\n&lt;/div&gt;\n\n@code{\n    [Parameter] public string? Message { get; set; } = \"I ❤️ HTMX\";\n\n    [Parameter]\n    public IHeaderDictionary? Headers { get; set; }\n        = new HeaderDictionary();\n\n    protected override Task OnInitializedAsync()\n    {\n        if (HttpContextAccessor?.HttpContext is { } ctx &amp;&amp;\n            Headers is not null)\n        {\n            foreach (var (key, value) in Headers)\n            {\n                ctx.Response.Headers.Append(key, value);\n            }\n        }\n\n        return base.OnInitializedAsync();\n    }\n\n}\n</code></pre>\n\n<p>This component will only work as a server-rendered component since <code>HttpContext</code> is a dependency.</p>\n\n<p>We can now also write an excellent extension method to keep us from making previous mistakes in the future.</p>\n\n<pre><code class=\"language-csharp\">public static class RazorComponentResultExtensions\n{\n    public static RouteHandlerBuilder MapGetRazorComponent&lt;TComponent&gt;(\n        this IEndpointRouteBuilder endpoints,\n        [StringSyntax(\"Route\")] string pattern,\n        object? state = null\n    )\n        where TComponent : IComponent\n    {\n        var dictionary = new RouteValueDictionary(state);\n        return endpoints.MapGet(pattern, () =&gt; new RazorComponentResult&lt;TComponent&gt;(dictionary));\n    }\n}\n</code></pre>\n\n<p>And our new registration now looks like this.</p>\n\n<pre><code class=\"language-csharp\">app.MapGetRazorComponent&lt;LoveHtmxWithHeader&gt;(\n    \"/love-htmx\",\n    new\n    {\n        Message = \"I ❤️ ASP.NET Core\",\n        Headers = new HeaderDictionary\n        {\n            { \"Hx-Trigger\", \"blazor-x\" }\n        }\n    });\n</code></pre>\n\n<h2 id=\"conclusion\">Conclusion</h2>\n\n<p>There you have it. You can now set HTTP headers when using <code>RazorComponentResult</code>. Using the extension method I provided\nalso makes it clear not to add any additional code in your endpoints, helping you avoid the chance of introducing bugs.\nGive it a shot!</p>\n\n<p>As always, thanks for reading and sharing my posts with friends and colleagues. As always, cheers.</p>\n",
      "Content": null,
      "Language": null,
      "Link": "https://khalidabuhakmeh.com/how-to-add-http-headers-to-blazor-components-with-razorcomponentresult"
    },
    {
      "FeedId": "https://khalidabuhakmeh.com/feed.xml",
      "ItemId": "https://khalidabuhakmeh.com/working-with-rust-libraries-from-csharp-dotnet-applications",
      "Title": "Working with Rust Libraries from C# .NET Applications",
      "PublishDate": "2024-04-30T00:00:00+00:00",
      "Summary": "<p>I’ve been on a Rust learning journey lately, and it’s had me thinking about how I can consume Rust libraries from\nexisting .NET applications. The .NET team has done much work regarding interoperability during the .NET 6 to .NET 8 era,\nand .NET 9 seems poised to continue that trend.</p>\n\n<p>In this post, we’ll create a Rust library and consume it from a .NET application. This post assumes you have installed\nthe .NET SDK and Rust SDK (cargo).</p>\n\n<!--more-->\n\n<h2 id=\"a-simple-rust-library\">A Simple Rust Library</h2>\n\n<p>After creating a .NET Solution, I first created a new Rust library using <code>cargo</code>. The command is relatively\nstraightforward.</p>\n\n<pre><code>cargo init --lib calculator\n</code></pre>\n\n<p>This creates a new <code>calculator</code> library folder with the most critical files: <code>Cargo.toml</code> and <code>lib.rs</code>. Let’s update\nthe <code>Cargo.toml</code> file to produce an artifact that our .NET application can consume, a dynamic library.</p>\n\n<pre><code class=\"language-toml\">[package]\nname = \"calculator\"\nversion = \"0.1.0\"\nedition = \"2021\"\n\n[lib]\nname=\"calculator\"\ncrate-type=[\"dylib\"]\n\n[dependencies]\nrand = \"0.8.5\"\n</code></pre>\n\n<p>I’ve also included the <code>rand</code> dependency for my Rust code later. Running the <code>cargo b</code> command will now produce a\nlibrary we can copy into our .NET application.</p>\n\n<p>Let’s write some Rust code we’ll consume from our .NET application later.</p>\n\n<pre><code class=\"language-rust\">use rand::prelude::*;\nuse std::ffi::{c_char, CStr};\n\n#[repr(C)]\n#[derive(Debug)]\npub struct Point {\n    pub x: u32,\n    pub y: u32,\n}\n\n#[no_mangle]\npub extern \"C\" fn add(left: usize, right: usize) -&gt; usize {\n    left + right\n}\n\n#[no_mangle]\npub extern \"C\" fn say_hello(name: *const c_char) {\n    let c_str = unsafe { CStr::from_ptr(name) };\n    println!(\"Hello, {}\", c_str.to_str().unwrap())\n}\n\n#[no_mangle]\npub extern \"C\" fn random_point() -&gt; Point {\n    let mut rng = rand::thread_rng();\n    Point {\n        x: rng.gen::&lt;u32&gt;(),\n        y: rng.gen::&lt;u32&gt;(),\n    }\n}\n\n#[no_mangle]\npub extern \"C\" fn distance(first: &amp;Point, second: &amp;Point) -&gt; f64 {\n    let dx: f64 = (second.x - first.x).into();\n    let dy: f64 = (second.y - first.y).into();\n\n    println!(\"calculating distance...\");\n\n    (dx.powf(2.0) + dy.powf(2.0)).sqrt()\n}\n\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn it_works() {\n        let result = add(2, 2);\n        assert_eq!(result, 4);\n    }\n\n    #[test]\n    fn say_hello_test() {\n        let _result = say_hello(\"Khalid\".as_ptr() as *const i8);\n\n        assert!(true)\n    }\n\n    #[test]\n    fn get_random_point() {\n        let point: Point = random_point();\n        println!(\"{:?}\", point);\n        assert!(true);\n    }\n\n    #[test]\n    fn can_calculate_distance() {\n        let one = Point { x: 1, y: 1 };\n        let two = Point { x: 2, y: 2 };\n\n        let result = distance(&amp;one, &amp;two);\n        println!(\"distance between {:?} and {:?} is {}\", one, two, result);\n        assert!((result - 1.414).abs() &lt; 0.001)\n    }\n}\n</code></pre>\n\n<p>Notable elements of this Rust code include the following.</p>\n\n<ol>\n  <li>The <code>extern</code> keyword adds to the list of functions and types in the foreign functions interfaces (FFI).</li>\n  <li><code>no_mangle</code> tells the Rust compiler not to mangle the function’s name so that it can be referenced externally by a\n.NET application or similar external consumer.</li>\n  <li>The <code>\"C\"</code> value after <code>extern</code> tells the Rust compiler to compile to something C-compatible. There are other options\nhere as well.</li>\n  <li>The <code>repr</code> attribute on <code>Point</code> states that this structure should be stored in memory in a C-compatible way.</li>\n  <li>All functions should use references to elements, which allows us to marshal information from one technology stack to\nanother with little to no overhead. You need to be careful not to introduce memory leaks here, hence the use\nof <code>unsafe</code>.</li>\n</ol>\n\n<p>Now let’s modify our .NET application for some Rust fun.</p>\n\n<h2 id=\"building-rust-from-a-net-project\">Building Rust from a .NET Project</h2>\n\n<p>I’ve used this trick several times across tools, and it works like a charm here with Rust. You can use the MSBuild task\nof <code>Exec</code> to execute commands.</p>\n\n<pre><code class=\"language-xml\">&lt;Project Sdk=\"Microsoft.NET.Sdk\"&gt;\n\n  &lt;PropertyGroup&gt;\n    &lt;LangVersion&gt;preview&lt;/LangVersion&gt;\n    &lt;OutputType&gt;Exe&lt;/OutputType&gt;\n    &lt;TargetFramework&gt;net8.0&lt;/TargetFramework&gt;\n    &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt;\n    &lt;Nullable&gt;enable&lt;/Nullable&gt;\n    &lt;AllowUnsafeBlocks&gt;true&lt;/AllowUnsafeBlocks&gt;\n  &lt;/PropertyGroup&gt;\n\n  &lt;Target Name=\"Rust Build \" BeforeTargets=\"Compile\"&gt;\n    &lt;Exec Command=\"echo 'Configuration: $(Configuration)'\"/&gt;\n    &lt;Exec Condition=\"'$(Configuration)' == 'Release'\" Command=\"cargo b --release\" WorkingDirectory=\"./../calculator\"/&gt;\n    &lt;Exec Condition=\"'$(Configuration)' != 'Release'\" Command=\"cargo b\" WorkingDirectory=\"./../calculator\"/&gt;\n  &lt;/Target&gt;\n\n  &lt;ItemGroup&gt;\n    &lt;PackageReference Include=\"Spectre.Console\" Version=\"0.48.1-preview.0.38\"/&gt;\n    &lt;Content Include=\"../calculator/target/$(Configuration)/libcalculator.dylib\"&gt;\n      &lt;CopyToOutputDirectory&gt;PreserveNewest&lt;/CopyToOutputDirectory&gt;\n    &lt;/Content&gt;\n  &lt;/ItemGroup&gt;\n\n\n&lt;/Project&gt;\n</code></pre>\n\n<p>You’ll also need to set the <code>AllowUnsafeBlocks</code> element to <code>true</code>, or you won’t be able to access any library. Every\ntime we compile, we’ll build our Rust library and copy it to the project root. From there, we’ll copy the library to our\noutput directory for each build. Depending on your project, feel free to change when the Rust build occurs.</p>\n\n<p>Let’s write some C# code.</p>\n\n<h2 id=\"calling-rust-from-c\">Calling Rust from C#</h2>\n\n<p>Now, it’s just a matter of giving our C# code something to call. We can do this using .NET’s <code>LibraryImportAttribute</code>.</p>\n\n<pre><code class=\"language-csharp\">public partial class Rust\n{\n    [LibraryImport(\"libcalculator\", EntryPoint = \"add\")]\n    public static partial int Add(int left, int right);\n\n    [LibraryImport(\"libcalculator\", EntryPoint = \"say_hello\"\n        , StringMarshalling = StringMarshalling.Utf8)]\n    public static partial void SayHello(string name);\n\n    [LibraryImport(\"libcalculator\", EntryPoint = \"random_point\")]\n    public static partial Point GetRandomPoint();\n\n    [LibraryImport(\"libcalculator\", EntryPoint = \"distance\")]\n    public static partial double Distance(ref Point one, ref Point two);\n}\n\n[StructLayout(LayoutKind.Sequential, CharSet = CharSet.Unicode)]\n[DebuggerDisplay(\"({X}, {Y})\")]\npublic struct Point\n{\n    public UInt32 X;\n    public UInt32 Y;\n    public override string ToString()\n        =&gt; $\"(x: {X}, y: {Y})\";\n}\n</code></pre>\n\n<p>Your interface must match the expectations set by the Rust library. Things like structures, types, and references must\nmatch, or you’ll likely get an error code of 139, and the executing application will halt.</p>\n\n<pre><code class=\"language-csharp\">using System.Diagnostics;\nusing System.Runtime.InteropServices;\nusing Spectre.Console;\n\nvar one = new Point { X = 1, Y = 1 };\nvar two = new Point { X = 2, Y = 2 };\n\nvar distance = Rust.Distance(ref one, ref two);\nAnsiConsole.MarkupLine($\"Distance between [yellow]{one}[/] and [red]{two}[/] is [green]{distance}[/]\");\n\nvar (left, right) = (2, 2);\nvar result = Rust.Add(left, right);\n\nAnsiConsole.MarkupLine($\"[yellow]{left} + {right}[/] = [green]{result}![/]\");\nRust.SayHello(\"Khalid\");\nAnsiConsole.MarkupInterpolated($\"[red]{Rust.GetRandomPoint()}[/]\");\n\npublic partial class Rust\n{\n    [LibraryImport(\"libcalculator\", EntryPoint = \"add\")]\n    public static partial int Add(int left, int right);\n\n    [LibraryImport(\"libcalculator\", EntryPoint = \"say_hello\"\n        , StringMarshalling = StringMarshalling.Utf8)]\n    public static partial void SayHello(string name);\n\n    [LibraryImport(\"libcalculator\", EntryPoint = \"random_point\")]\n    public static partial Point GetRandomPoint();\n\n    [LibraryImport(\"libcalculator\", EntryPoint = \"distance\")]\n    public static partial double Distance(ref Point one, ref Point two);\n}\n\n[StructLayout(LayoutKind.Sequential, CharSet = CharSet.Unicode)]\n[DebuggerDisplay(\"({X}, {Y})\")]\npublic struct Point\n{\n    public UInt32 X;\n    public UInt32 Y;\n    public override string ToString()\n        =&gt; $\"(x: {X}, y: {Y})\";\n}\n</code></pre>\n\n<p><code>LibraryImport</code> works with the <code>DllImportAttribute</code> and is a source generator that correctly handles common memory\nmanagement issues with marshaling types like <code>string</code> or reference types. You should use <code>LibraryImport</code> instead of\nwriting the <code>DllImport</code> code yourself.</p>\n\n<p>The results are as you’d expect.</p>\n\n<pre><code class=\"language-text\">calculating distance...\nDistance between (x: 1, y: 1) and (x: 2, y: 2) is 1.4142135623730951\n2 + 2 = 4!\nHello, Khalid\n(x: 2497287370, y: 698299366)\n</code></pre>\n\n<p>There you have it. We could call Rust code from a .NET Application with different levels of complexity. That’s pretty\ncool!</p>\n\n<h2 id=\"conclusion\">Conclusion</h2>\n\n<p>I want to thank <a href=\"https://dev.to/living_syn/calling-rust-from-c-6hk\">Jeremy Mill</a>, who wrote a blog post 2017 that helped\nme learn and experiment with this sample. I hope you found this post helpful, and be sure to share it with friends and\ncolleagues. As always, thanks and cheers.</p>\n",
      "Content": null,
      "Language": null,
      "Link": "https://khalidabuhakmeh.com/working-with-rust-libraries-from-csharp-dotnet-applications"
    },
    {
      "FeedId": "https://khalidabuhakmeh.com/feed.xml",
      "ItemId": "https://khalidabuhakmeh.com/fix-unable-to-resolve-dbcontextoptions-for-ef-core",
      "Title": "Fix Unable To Resolve DbContextOptions For EF Core",
      "PublishDate": "2024-04-23T00:00:00+00:00",
      "Summary": "<p>I recently hosted\na <a href=\"https://www.youtube.com/watch?v=N_eLotlcjXo\">live stream with badass-as-a-service Chris Klug, titled “Stop using Entity Framework Core as a DTO Provider!”</a>.\nIt’s worth a watch, and it gave me, a long-time Entity Framework user, a lot to think about and reevaluate in my\nworkflows. That said, regardless of whether you agree with Chris’ style, he showed a masterclass of tool usage and an\nunderstanding that’s easy to admire. In our live stream, one new trick (to me, at least) stood out as something every\nEntity Framework Core user should know about.</p>\n\n<p>In this post, we’ll explore one strategy to appease the <code>dotnet ef</code> CLI tools regarding design-time configuration and\nhow it opens up a world of possibilities when dealing with database migrations.</p>\n\n<!--more-->\n\n<h2 id=\"dependencies-and-ceremony\">Dependencies and ceremony</h2>\n\n<p>Entity Framework Core is heavily built around conventions and flexibility. It’s a multi-provider object-relational\nmapper (ORM), so it needs to operate under many unknown factors, with you, the developer, filling in the gaps. What\ndatabase are you using? How many databases are you targeting? What migration strategies are you applying? The\nflexibility is excellent for solving complex problems but also leads developers into the woods of opaque exceptions.</p>\n\n<p>One such problem you’ve likely encountered is the following error output when using the <code>dotnet ef migrations add</code>\ncommand.</p>\n\n<pre><code>Unable to create a 'DbContext' of type ''. The exception \n'Unable to resolve service for type \n'Microsoft.EntityFrameworkCore.DbContextOptions`1[MigrationLibrary.Database]'\nwhile attempting to activate 'MigrationLibrary.Database'.\n</code></pre>\n\n<p>The <code>DbContextOptions</code> class is used to configure a <code>DbContext</code>.</p>\n\n<pre><code class=\"language-csharp\">using Microsoft.EntityFrameworkCore;\n\nnamespace MigrationLibrary;\n\npublic class Database(DbContextOptions&lt;Database&gt; options) \n    : DbContext(options)\n{\n    public DbSet&lt;Person&gt; People =&gt; Set&lt;Person&gt;();\n}\n\npublic class Person\n{\n    public int Id { get; set; }\n    public string Name { get; set; } = \"\";\n    public int Age { get; set; }\n}\n</code></pre>\n\n<p>Everything looks good, but we need to see the <code>OnConfiguring</code> implementation here, which adds the necessary answers to\nwhich database we hope to use. Let’s tweak the code to solve this issue.</p>\n\n<pre><code class=\"language-csharp\">using Microsoft.EntityFrameworkCore;\n\nnamespace MigrationLibrary;\n\npublic class Database() : DbContext \n{\n    public DbSet&lt;Person&gt; People =&gt; Set&lt;Person&gt;();\n\n    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n    {\n        optionsBuilder.UseSqlite();\n    }\n}\n\npublic class Person\n{\n    public int Id { get; set; }\n    public string Name { get; set; } = \"\";\n    public int Age { get; set; }\n}\n</code></pre>\n\n<p>The error is gone now, but we’ve locked into options we can no longer configure outside the <code>Database</code> class. We want\nsomething else.</p>\n\n<p>We still want to be able to pass in a <code>DbContextOptions</code> instance. This allows us to configure the <code>DbContext</code> to point\nto different database implementations and connection strings and alter logging options. We want all that, trust me.</p>\n\n<p>Let’s use a little-known feature to fix this: <code>IDesignTimeDbContextFactory</code>.</p>\n\n<h2 id=\"idesigntimedbcontextfactory-to-the-rescue\">IDesignTimeDbContextFactory to the rescue</h2>\n\n<p>The <code>IDesignTimeDbContextFactory</code> is a tool that can change how you write migrations, and I don’t say this lightly.\nLet’s look at the documentation.</p>\n\n<pre><code class=\"language-text\">A factory for creating derived DbContext instances. \nImplement this interface to enable design-time services \nfor context types that do not have a public default constructor.\nAt design-time, derived DbContext instances can be created \nin order to enable specific design-time experiences such \nas Migrations.\n \nDesign-time services will automatically discover \nimplementations of this interface that are in the \nstartup assembly or the same assembly as the derived context.\n</code></pre>\n\n<p>Hmmm, nice. So what does that look like in C#?</p>\n\n<pre><code class=\"language-csharp\">using Microsoft.EntityFrameworkCore;\nusing Microsoft.EntityFrameworkCore.Design;\n\nnamespace MigrationLibrary.Configuration;\n\n// ReSharper disable once UnusedType.Global\npublic class DatabaseDesignTimeDbContextFactory \n    : IDesignTimeDbContextFactory&lt;Database&gt;\n{\n    public Database CreateDbContext(string[] args)\n    {\n        var builder = new DbContextOptionsBuilder&lt;Database&gt;();\n        builder.UseSqlite();\n        return new Database(builder.Options);\n    }\n}\n</code></pre>\n\n<p>Adding this class definition to your project lets Entity Framework’s design-time services answer some of the questions\nneeded to generate migrations and other configuration options.</p>\n\n<p>Running the <code>dotnet ef migrations add</code> command now results in the following output.</p>\n\n<pre><code class=\"language-csharp\">(base) ~/RiderProjects/MigrationLibrary\ndotnet ef migrations add --project MigrationLibrary AddPerson\nBuild started...\nBuild succeeded.\nDone. To undo this action, use 'ef migrations remove'\n</code></pre>\n\n<p>Now, you can define all your migrations and the database configuration in one project while still allowing consuming\nprojects to modify and change options within reason (i.e., you can’t apply SQLite migrations to a SQL Server database).</p>\n\n<h2 id=\"conclusion\">Conclusion</h2>\n\n<p>I love doing live streams because I get to learn from some of the best .NET professionals in the industry, and Chris\nKlug didn’t disappoint. <a href=\"https://www.youtube.com/watch?v=N_eLotlcjXo\">Again, I highly recommend you watch the stream.</a>\nThis tip, amongst others, is sprinkled throughout the presentation. As always, thanks for reading and sharing these\nposts with friends and colleagues. Cheers.</p>\n",
      "Content": null,
      "Language": null,
      "Link": "https://khalidabuhakmeh.com/fix-unable-to-resolve-dbcontextoptions-for-ef-core"
    },
    {
      "FeedId": "https://khalidabuhakmeh.com/feed.xml",
      "ItemId": "https://khalidabuhakmeh.com/event-queues-and-buffering-functions-with-javascript",
      "Title": "Event Queues and Buffering Functions with JavaScript",
      "PublishDate": "2024-04-16T00:00:00+00:00",
      "Summary": "<p>I was testing JetBrains’\nlatest <a href=\"https://plugins.jetbrains.com/plugin/14823-full-line-code-completion\">Full Line Code Completion plugin</a>\nin <a href=\"https://jetbrains.com/webstorm\">WebStorm</a> by writing a quick JavaScript demo, and by the end, I was pretty happy\nwith what I had built. The JavaScript uses a queue that pushes events to change classes on buttons in <code>250ms</code> intervals\nto create a smooth color transition from one style to another.</p>\n\n<p>Is it practical? I don’t know, but it sure is fun. I’ve included all the demo’s contents in a single file so you can\ntest it locally. By the end of this post, you’ll have seen an event queue and how to use it in your JavaScript.</p>\n\n<!--more-->\n\n<h2 id=\"write-a-javascript-event-queue\">Write a JavaScript Event Queue</h2>\n\n<p>The premise of my event queue is straightforward. Push events into a queue and have them execute on a set universal\ninterval. I also wanted the ability to <code>clear</code> the queue of any remaining events.</p>\n\n<pre><code class=\"language-javascript\">class EventQueue {\n    constructor(interval) {\n        this.queue = [];\n        this.interval = interval;\n        this.startProcessing();\n    }\n\n    enqueue(eventFunction) {\n        this.queue.push(eventFunction);\n    }\n\n    clear() {\n        this.queue = [];\n    }\n\n    startProcessing() {\n        setInterval(() =&gt; {\n            if (this.queue.length &gt; 0) {\n                const eventFunction = this.queue.shift();\n                eventFunction();\n            }\n        }, this.interval);\n    }\n}\n</code></pre>\n\n<p>We use the <code>setInterval</code> function to check the queue at our designated interval to process any remaining events. Let’s\nstart using it.</p>\n\n<h2 id=\"transitioning-button-colors-on-mouse-move\">Transitioning Button Colors on Mouse Move</h2>\n\n<p>Before we write some more JavaScript, let’s look at the HTML elements we’ll change. Note that I’m using the <strong>Bulma</strong>\nCSS library and its button styling classes.</p>\n\n<pre><code class=\"language-html\">&lt;div class=\"columns\"&gt;\n    &lt;div class=\"column\"&gt;\n        &lt;button class=\"m-1 button is-info\"&gt;🐁 Move&lt;/button&gt;\n        &lt;button class=\"m-1 button is-success\"&gt;🐁 Move&lt;/button&gt;\n        &lt;button class=\"m-1 button is-warning\"&gt;🐁 Move&lt;/button&gt;\n        &lt;button class=\"m-1 button is-danger\"&gt;🐁 Move&lt;/button&gt;\n        &lt;button class=\"m-1 button is-primary\"&gt;🐁 Move&lt;/button&gt;\n        &lt;button class=\"m-1 button is-link\"&gt;🐁 Move&lt;/button&gt;\n        &lt;button class=\"m-1 button is-info\"&gt;🐁 Move&lt;/button&gt;\n        &lt;button class=\"m-1 button is-success\"&gt;🐁 Move&lt;/button&gt;\n        &lt;button class=\"m-1 button is-warning\"&gt;🐁 Move&lt;/button&gt;\n        &lt;button class=\"m-1 button is-danger\"&gt;🐁 Move&lt;/button&gt;\n        &lt;button class=\"m-1 button is-primary\"&gt;🐁 Move&lt;/button&gt;\n        &lt;button class=\"m-1 button is-link\"&gt;🐁 Move&lt;/button&gt;\n    &lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n\n<p>Also, to smooth the transition between styles, I wrote an additional CSS style to ease the <code>background-color</code> to limit\nthe strobing effect that might happen if colors change too quickly.</p>\n\n<pre><code class=\"language-html\">&lt;style&gt;\n    .button {\n        transition: background-color 0.2s ease-in-out;\n    }\n&lt;/style&gt;\n</code></pre>\n\n<p>Let’s write some JavaScript. We want to change the CSS class on each <code>.button</code> as the user moves the mouse. If the user\nstops moving the mouse or leaves the bounds of the page, we want to clear all remaining events from our queue.</p>\n\n<pre><code class=\"language-javascript\">window.addEventListener('DOMContentLoaded', () =&gt; {\n\n    const colors = [\n        \"is-info\", \"is-success\",\n        \"is-warning\", \"is-danger\",\n        \"is-primary\", \"is-link\"\n    ];\n\n    const queue = new EventQueue(250 /* ms */);\n    const changeButtonColors = () =&gt; {\n        const buttons = document.querySelectorAll(\".button\");\n        buttons.forEach(button =&gt; {\n            button.classList.forEach((c) =&gt; {\n                if (c.startsWith(\"is-\")) {\n                    const currentIndex = colors.indexOf(c);\n                    const newIndex = currentIndex &lt; colors.length - 1\n                        ? currentIndex + 1 : 0;\n                    button.classList.remove(c);\n                    button.classList.add(colors[newIndex]);\n                }\n            });\n        });\n    };\n\n    document.addEventListener('mousemove', (e) =&gt; {\n        if (e.movementX === 0 &amp;&amp; e.movementY === 0) {\n            queue.clear();\n        } else {\n            queue.enqueue(changeButtonColors);\n        }\n    });\n\n    document.addEventListener('mouseleave', () =&gt; {\n        queue.clear();\n    })\n});\n</code></pre>\n\n<p>That’s pretty straightforward. As a personal side note, JavaScript and the web stack have come a long way. This was\ngenuinely a joy to write.</p>\n\n<p>Let’s see what it’s like in action.</p>\n\n<video controls=\"\" preload=\"metadata\" style=\"width:100%\">\n    <source src=\"/assets/images/posts/misc/event-queue-mar12-2024.mp4\" type=\"video/mp4\" />\n</video>\n\n<p>Pretty cool!</p>\n\n<p>Here’s the full HTML/JavaScript/CSS combination in one file.</p>\n\n<pre><code class=\"language-html\">&lt;!DOCTYPE html&gt;\n&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;title&gt;Title&lt;/title&gt;\n    &lt;!-- bulma.io --&gt;\n    &lt;link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/bulma/0.9.4/css/bulma.min.css\"&gt;\n    &lt;style&gt;\n        .button {\n            transition: background-color 0.2s ease-in-out;\n        }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;section class=\"section\"&gt;\n    &lt;div class=\"container\"&gt;\n        &lt;h1 class=\"title\"&gt;\n            Hello World\n        &lt;/h1&gt;\n        &lt;p class=\"subtitle\"&gt;\n            My first website with &lt;strong&gt;Bulma&lt;/strong&gt;!\n        &lt;/p&gt;\n        &lt;div class=\"columns\"&gt;\n            &lt;div class=\"column\"&gt;\n                &lt;button class=\"m-1 button is-info\"&gt;🐁 Move&lt;/button&gt;\n                &lt;button class=\"m-1 button is-success\"&gt;🐁 Move&lt;/button&gt;\n                &lt;button class=\"m-1 button is-warning\"&gt;🐁 Move&lt;/button&gt;\n                &lt;button class=\"m-1 button is-danger\"&gt;🐁 Move&lt;/button&gt;\n                &lt;button class=\"m-1 button is-primary\"&gt;🐁 Move&lt;/button&gt;\n                &lt;button class=\"m-1 button is-link\"&gt;🐁 Move&lt;/button&gt;\n                &lt;button class=\"m-1 button is-info\"&gt;🐁 Move&lt;/button&gt;\n                &lt;button class=\"m-1 button is-success\"&gt;🐁 Move&lt;/button&gt;\n                &lt;button class=\"m-1 button is-warning\"&gt;🐁 Move&lt;/button&gt;\n                &lt;button class=\"m-1 button is-danger\"&gt;🐁 Move&lt;/button&gt;\n                &lt;button class=\"m-1 button is-primary\"&gt;🐁 Move&lt;/button&gt;\n                &lt;button class=\"m-1 button is-link\"&gt;🐁 Move&lt;/button&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n&lt;/section&gt;\n&lt;script type=\"application/javascript\"&gt;\nwindow.addEventListener('DOMContentLoaded', () =&gt; {\n\n    const colors = [\n        \"is-info\", \"is-success\",\n        \"is-warning\", \"is-danger\",\n        \"is-primary\", \"is-link\"\n    ];\n\n    const queue = new EventQueue(250 /* ms */);\n    const changeButtonColors = () =&gt; {\n        const buttons = document.querySelectorAll(\".button\");\n        buttons.forEach(button =&gt; {\n            button.classList.forEach((c) =&gt; {\n                if (c.startsWith(\"is-\")) {\n                    const currentIndex = colors.indexOf(c);\n                    const newIndex = currentIndex &lt; colors.length - 1\n                        ? currentIndex + 1 : 0;\n                    button.classList.remove(c);\n                    button.classList.add(colors[newIndex]);\n                }\n            });\n        });\n    };\n\n    document.addEventListener('mousemove', (e) =&gt; {\n        if (e.movementX === 0 &amp;&amp; e.movementY === 0) {\n            queue.clear();\n        } else {\n            queue.enqueue(changeButtonColors);\n        }\n    });\n\n    document.addEventListener('mouseleave', () =&gt; {\n        queue.clear();\n    })\n});\n\n    class EventQueue {\n        constructor(interval) {\n            this.queue = [];\n            this.interval = interval;\n            this.startProcessing();\n        }\n\n        enqueue(eventFunction) {\n            this.queue.push(eventFunction);\n        }\n\n        clear() {\n            this.queue = [];\n        }\n\n        startProcessing() {\n            setInterval(() =&gt; {\n                if (this.queue.length &gt; 0) {\n                    const eventFunction = this.queue.shift();\n                    eventFunction();\n                }\n            }, this.interval);\n        }\n    }\n\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\n<h2 id=\"conclusion\">Conclusion</h2>\n\n<p>You can create interactive experiences with some JavaScript and some CSS. The <code>EventQueue</code> I wrote is surprisingly\nsimple yet powerful for my use case, but you can adapt it to your needs. The definition of <code>transition</code> is also an\nexcellent tool for keeping visual transitions from being jarring or obnoxious.</p>\n\n<p>Thanks for reading, and I hope you have a great day. Oh, if you thought this post was cool or helpful, please remember\nto share it with friends and colleagues. Cheers :)</p>\n",
      "Content": null,
      "Language": null,
      "Link": "https://khalidabuhakmeh.com/event-queues-and-buffering-functions-with-javascript"
    },
    {
      "FeedId": "https://khalidabuhakmeh.com/feed.xml",
      "ItemId": "https://khalidabuhakmeh.com/output-csv-results-to-console-table-in-rust",
      "Title": "Output CSV Results to Console Table in Rust",
      "PublishDate": "2024-04-09T00:00:00+00:00",
      "Summary": "<p>‘ve recently been working with Rust and learning about the language and ecosystem by implementing small, typical task\napplications. There’s no better way to learn than to jump into it.</p>\n\n<p>In this post, I’ll cover how I could read data from a CSV file, deserialize the contents into an array of <code>struct</code>, and\nthen output that collection into a pretty console table.</p>\n\n<p>To follow along, I assume you have a working Rust environment. If\nnot, <a href=\"https://www.jetbrains.com/rust/\">I suggest RustRover, which works excellently and provides excellent tooling around the Rust ecosystem.</a>\nLet’s get into it.</p>\n\n<!--more-->\n\n<h2 id=\"crate-dependencies\">Crate Dependencies</h2>\n\n<p>I had to research to find the appropriate dependencies required to read a CSV from disk and then deserialize the rows\ninto a Rust <code>struct</code>. These are the dependencies I found: <code>csv</code>, <code>serde</code>, and <code>lazy_static</code>.</p>\n\n<p>The <code>csv</code> crate provides helper methods to read CSV files using a readers pattern. We’ll see how this works when we get\nto the code sample.</p>\n\n<p>The <a href=\"https://serde.rs/\"><code>serde</code> crate</a> allows me to serialize and deserialize directly into Rust data structures, which\nI’ll be doing from the on disk CSV.</p>\n\n<p>While <code>lazy_static</code> is optional, it will allow us to read and deserialize our rows once for the application’s lifetime.</p>\n\n<p>There will also be a set of other dependencies that you’ll need to import to get the app working. I also need to\nimport <a href=\"https://ratatui.rs/\"><code>ratatui</code></a> and it’s dependency of <code>crossterm</code> to work with the terminal.</p>\n\n<pre><code class=\"language-toml\">[dependencies]\ncrossterm = \"0.27.0\"\nratatui = \"0.26.1\"\ncsv = \"1.3.0\"\nserde = { version = \"1.0.197\", features = [\"derive\"] }\nlazy_static = \"1.4.0\"\n</code></pre>\n\n<p>Here is the complete list of <code>use</code> statements from the final sample.</p>\n\n<pre><code class=\"language-rust\">use crossterm::{event:: {self, KeyCode}, ExecutableCommand};\nuse crossterm::terminal::{enable_raw_mode, EnterAlternateScreen};\nuse lazy_static::lazy_static;\nuse ratatui::{prelude::*, widgets::*};\nuse std::io::{stdout, Result};\nuse std::process::exit;\nuse crossterm::event::{Event, KeyEventKind};\n</code></pre>\n\n<p>Ok, we have everything we need to get started writing some code. Let’s start by processing our CSV file. Here is some\nsample data.</p>\n\n<pre><code class=\"language-csv\">name,region,toppings\nMargherita,Italy,\"Tomatoes, Mozzarella, Basil, Salt, Olive oil\"\nHawaiian,Canada,\"Tomatoes, Ham, Pineapple, Cheese\"\nPepperoni,USA,\"Tomatoes, Pepperoni, Cheese\"\nBBQ Chicken,USA,\"BBQ Sauce, Chicken, Onions, Cheese\"\n</code></pre>\n\n<h2 id=\"processing-a-csv-row-into-a-struct\">Processing a CSV Row into a Struct</h2>\n\n<p>While it’s possible to work with CSVs dealing with primitive types, it’s not generally a fun way to work with data.\nInstead, we want to deal with logical structures. In the case of this tutorial, we are dealing with <code>Pizza</code>.</p>\n\n<pre><code class=\"language-rust\">#[derive(Debug, serde::Deserialize)]\npub struct Pizza {\n    name: String,\n    region: String,\n    toppings: String,\n}\n</code></pre>\n\n<p>The attribute of <code>serde::Deserialize</code> lets our serialization dependency know that this is something we’d like to fill\nwith data.</p>\n\n<p>Now, for the fun part, let’s read the data from disk.</p>\n\n<pre><code class=\"language-rust\">fn read_pizzas() -&gt; Vec&lt;Pizza&gt; {\n    let mut reader = csv::Reader::from_path(\"pizzas.csv\")\n        .unwrap_or_else(|err| {\n            eprintln!(\"Error reading CSV file: {}\", err);\n            exit(1);\n        });\n\n    reader.deserialize().map(|r| {\n        match r {\n            Ok(pizza) =&gt; pizza,\n            Err(err) =&gt; {\n                eprintln!(\"Error deserializing pizza: {}\", err);\n                exit(1);\n            }\n        }\n    }).collect()\n}\n</code></pre>\n\n<p>Rust expects us to handle the <code>Result</code> type and all its potential results. In the case of this sample, if the CSV is\nmangled, we want to exit the application. As you can see, it’s only two lines of code. The <code>Pizza</code> type is inferred from\nthe <code>Vec&lt;Pizza&gt;</code> return value of our <code>read_pizzas</code> function.</p>\n\n<p>We’ll need to put this information where we can access it once it’s initialized. Here, we’ll use the <code>lazy_static!</code>\nmacro to define a global static type.</p>\n\n<pre><code class=\"language-rust\">lazy_static! {\n    static ref PIZZAS: Vec&lt;Pizza&gt; = read_pizzas();\n}\n</code></pre>\n\n<p>Now, we can access this value using <code>&amp;*PIZZAS</code> in our code.</p>\n\n<pre><code class=\"language-rust\">let pizzas = &amp;*PIZZAS;\nlet count = pizzas.len();\nprintln!(\"{} total pizzas\", count)\n</code></pre>\n\n<h2 id=\"output-a-pretty-console-table\">Output a Pretty Console Table</h2>\n\n<p>The next step uses the <code>ratatui</code> library, but be aware that this library is about building Terminal UIs referred to at\nTUIs. The nature of the this library is it relies on a UI loop and every iteration renders the contents. This is a\nhelpful model, allowing for real-time updates and fascinating use cases.</p>\n\n<p>To take advantage of <code>ratatui</code>, we must first update our <code>main</code> function to have a UI loop.</p>\n\n<pre><code class=\"language-rust\">fn main() -&gt; Result&lt;()&gt; {\n    stdout().execute(EnterAlternateScreen)?;\n    enable_raw_mode()?;\n    let mut terminal = Terminal::new(CrosstermBackend::new(stdout()))?;\n    terminal.clear()?;\n\n    loop {\n        terminal.draw(ui)?;\n        std::thread::sleep(std::time::Duration::from_millis(10));\n        // wait for keys\n        if let Event::Key(key) = event::read()? {\n            if key.kind == KeyEventKind::Press {\n                use KeyCode::*;\n                match key.code {\n                    Char('q') | Esc =&gt; return Ok(()),\n                    _ =&gt; {}\n                }\n            }\n        }\n    }\n}\n</code></pre>\n\n<p>I’ve also allowed folks to exit the app by hitting <code>q</code> or <code>Esc</code>. To reduce the load on the CPU, I’ve also made it so the\nthread sleeps every 10 milliseconds, just enough to be responsive but not burn up my cores.</p>\n\n<p>The only thing left to do is implement the <code>ui</code> function, but before we do that, we need a helper method to convert\nour <code>Pizza</code> struct, into a <code>Row</code>. Here we’ll use Rust’s <code>impl</code> keyword to fill in that functionality.</p>\n\n<pre><code class=\"language-rust\">impl From&lt;&amp;Pizza&gt; for Row&lt;'_&gt; {\n    fn from(p: &amp;Pizza) -&gt; Self {\n        Row::new(vec![\n            p.name.clone(),\n            p.region.clone(),\n            p.toppings.clone(),\n        ])\n            .bottom_margin(1)\n            .style(Style::default().fg(Color::White))\n    }\n}\n</code></pre>\n\n<p>Now, let’s look at the <code>ui</code> method.</p>\n\n<pre><code class=\"language-rust\">fn ui(frame: &amp;mut Frame) {\n    let pizzas = &amp;*PIZZAS;\n    let widths = [\n        Constraint::Max(20),\n        Constraint::Max(10),\n        Constraint::Max(50)\n    ];\n    let header = Row::new(vec![\n        \"Name\".to_string(),\n        \"Region\".to_string(),\n        \"Toppings\".to_string(),\n    ])\n        .style(Style::default().fg(Color::White).bg(Color::Blue))\n        .bold()\n        .bottom_margin(1);\n\n    let table = Table::new(pizzas, widths)\n        .header(header)\n        .footer(Row::new(vec![format!(\"{} Pizzas \", pizzas.len())]))\n        .block(Block::new().borders(Borders::ALL).title(\"Pizzas\"))\n        .style(Style::new().blue())\n        .widths(widths);\n\n    frame.render_widget(table, frame.size());\n}\n</code></pre>\n\n<p>Pretty straightforward. Running the application, we’ll see the table rendered in our terminal.</p>\n\n<p><img src=\"https://res.cloudinary.com/abuhakmeh/image/fetch/c_limit,f_auto,q_auto,w_800/https://khalidabuhakmeh.com/assets/images/posts/rust-csv-tables-console/rust-rover-terminal-result.png\" srcset=\"https://res.cloudinary.com/abuhakmeh/image/fetch/c_limit,f_auto,q_auto,w_320/https://khalidabuhakmeh.com/assets/images/posts/rust-csv-tables-console/rust-rover-terminal-result.png 320w, https://res.cloudinary.com/abuhakmeh/image/fetch/c_limit,f_auto,q_auto,w_540/https://khalidabuhakmeh.com/assets/images/posts/rust-csv-tables-console/rust-rover-terminal-result.png 540w, https://res.cloudinary.com/abuhakmeh/image/fetch/c_limit,f_auto,q_auto,w_760/https://khalidabuhakmeh.com/assets/images/posts/rust-csv-tables-console/rust-rover-terminal-result.png 760w, https://res.cloudinary.com/abuhakmeh/image/fetch/c_limit,f_auto,q_auto,w_980/https://khalidabuhakmeh.com/assets/images/posts/rust-csv-tables-console/rust-rover-terminal-result.png 980w, https://res.cloudinary.com/abuhakmeh/image/fetch/c_limit,f_auto,q_auto,w_1200/https://khalidabuhakmeh.com/assets/images/posts/rust-csv-tables-console/rust-rover-terminal-result.png 1200w\" sizes=\"100vw\" alt=\"Terminal output from rust application in RustRover\" loading=\"lazy\" width=\"2278\" height=\"1378\" crossorigin=\"anonymous\" /></p>\n\n<p>Here’s the final codebase in its complete form.</p>\n\n<pre><code class=\"language-rust\">use crossterm::{event::{self, KeyCode}, ExecutableCommand};\nuse crossterm::terminal::{enable_raw_mode, EnterAlternateScreen};\nuse lazy_static::lazy_static;\nuse ratatui::{prelude::*, widgets::*};\nuse std::io::{stdout, Result};\nuse std::process::exit;\nuse crossterm::event::{Event, KeyEventKind, read};\n\n#[derive(Debug, serde::Deserialize)]\npub struct Pizza {\n    name: String,\n    region: String,\n    toppings: String,\n}\n\nlazy_static! {\n    static ref PIZZAS: Vec&lt;Pizza&gt; = read_pizzas();\n}\n\nimpl From&lt;&amp;Pizza&gt; for Row&lt;'_&gt; {\n    fn from(p: &amp;Pizza) -&gt; Self {\n        Row::new(vec![\n            p.name.clone(),\n            p.region.clone(),\n            p.toppings.clone(),\n        ])\n            .bottom_margin(1)\n            .style(Style::default().fg(Color::White))\n    }\n}\n\nfn main() -&gt; Result&lt;()&gt; {\n    stdout().execute(EnterAlternateScreen)?;\n    enable_raw_mode()?;\n    let mut terminal = Terminal::new(CrosstermBackend::new(stdout()))?;\n    terminal.clear()?;\n\n    loop {\n        terminal.draw(ui)?;\n        std::thread::sleep(std::time::Duration::from_millis(10));\n        // wait for keys\n        if let Event::Key(key) = event::read()? {\n            if key.kind == KeyEventKind::Press {\n                use KeyCode::*;\n                match key.code {\n                    Char('q') | Esc =&gt; return Ok(()),\n                    _ =&gt; {}\n                }\n            }\n        }\n    }\n}\n\nfn ui(frame: &amp;mut Frame) {\n    let pizzas = &amp;*PIZZAS;\n    let widths = [\n        Constraint::Max(20),\n        Constraint::Max(10),\n        Constraint::Max(50)\n    ];\n    let header = Row::new(vec![\n        \"Name\".to_string(),\n        \"Region\".to_string(),\n        \"Toppings\".to_string(),\n    ])\n        .style(Style::default().fg(Color::White).bg(Color::Blue))\n        .bold()\n        .bottom_margin(1);\n\n    let table = Table::new(pizzas, widths)\n        .header(header)\n        .footer(Row::new(vec![format!(\"{} Pizzas \", pizzas.len())]))\n        .block(Block::new().borders(Borders::ALL).title(\"Pizzas\"))\n        .style(Style::new().blue())\n        .widths(widths);\n\n    frame.render_widget(table, frame.size());\n}\n\nfn read_pizzas() -&gt; Vec&lt;Pizza&gt; {\n    let mut reader = csv::Reader::from_path(\"pizzas.csv\")\n        .unwrap_or_else(|err| {\n            eprintln!(\"Error reading CSV file: {}\", err);\n            exit(1);\n        });\n\n    reader.deserialize().map(|r| {\n        match r {\n            Ok(pizza) =&gt; pizza,\n            Err(err) =&gt; {\n                eprintln!(\"Error deserializing pizza: {}\", err);\n                exit(1);\n            }\n        }\n    }).collect()\n}\n</code></pre>\n\n<h2 id=\"update-once_cell-instead-of-lazy_static\">Update: Once_cell instead of Lazy_static</h2>\n\n<p>I typically share my learnings in real-time on Mastodon, and someone mentioned that <code>lazy_static</code> has been usurped by <code>once_cell</code>, so I decided to port the code over to use the newer approach. The following lines are converted into the following.</p>\n\n<pre><code class=\"language-rust\">// 👎 old lazy_static way\nlazy_static! {\n    static ref PIZZAS: Vec&lt;Pizza&gt; = read_pizzas();\n}\n\n// 👍 once_cell Lazy\nstatic PIZZAS: once_cell::sync::Lazy&lt;Vec&lt;Pizza&gt;&gt; =\n    once_cell::sync::Lazy::new(|| {\n        read_pizzas()\n    });\n</code></pre>\n\n<p>This is a much nicer approach in my opinion, and much easier to follow in code. Try out both ways to see which you prefer.</p>\n\n<h2 id=\"conclusion\">Conclusion</h2>\n\n<p>This was a fun little side project, but I learned much from it. For one, I learned more about Rust’s borrow checker and\nhow to use <code>lazy_static</code> to create a shared resource in memory. Secondly, I learned how to read CSV files from disk and\ndeserialize them into a custom <code>struct</code>. Finally, I learned about <code>ratatui</code> and building TUIs in Rust.</p>\n\n<p>Thanks for reading and sharing my posts with friends and colleagues. Cheers.</p>\n",
      "Content": null,
      "Language": null,
      "Link": "https://khalidabuhakmeh.com/output-csv-results-to-console-table-in-rust"
    },
    {
      "FeedId": "https://khalidabuhakmeh.com/feed.xml",
      "ItemId": "https://khalidabuhakmeh.com/responsive-images-crash-course-for-aspnet-core-developers",
      "Title": "Responsive Images Crash Course for ASP.NET Core Developers",
      "PublishDate": "2024-04-02T00:00:00+00:00",
      "Summary": "<p>Yes, I’m guilty! I’m guilty of ignoring the web platform and all the extraordinary riches waiting for discovery. For all\nthe lip service the .NET community loves to give towards being performance-minded, it’s a shame we stop at the response\nleaving the server. No more fellow reader; it’s time we think beyond the server and think about HTML and, in the case of\nthis post, images.</p>\n\n<p>In this post, I’ll show you how to optimize your image delivery using newer HTML features and the differences between\nthe two approaches. We’ll see how and why you may want to use each approach by weighing the pros and cons. Finally,\nwe’ll look at cute puppies because who doesn’t love puppies?! Nobody.</p>\n\n<!--more-->\n\n<h2 id=\"the-humble-image-tag\">The Humble Image Tag</h2>\n\n<p>If you’ve ever written HTML, you’ll almost certainly have used the <code>img</code> tag. Images are an essential element of most\nweb pages, yet they can also be the downfall of many. Suboptimal images can drag down your <strong>Core Web Vitals</strong>, the\nmetrics used to determine how a user may perceive your site’s performance. Let’s look at a plain old image tag you may\ntypically see in an HTML response.</p>\n\n<pre><code class=\"language-html\">&lt;img alt=\"good boy corgi\" src=\"/img/good-boy@3x.webp\"&gt;\n</code></pre>\n\n<p>Nothing outrageous, right? Well, this particular image is sub-optimal for many reasons.</p>\n\n<ul>\n  <li>This image is <strong>3.1 MB</strong> and has dimensions of <strong>2000px x 2952px</strong></li>\n  <li>The image tag lacks <code>width</code> and <code>height</code> attributes, so loading the image will cause layout shifts and page redraws</li>\n  <li>We serve one image for all devices, regardless of pixel density or medium. It’s wasteful.</li>\n</ul>\n\n<p>Let’s see if we can do better.</p>\n\n<h2 id=\"descriptive-responsive-image\">Descriptive Responsive Image</h2>\n\n<p>The <code>img</code> tag has a few new attributes that can help developers address the above-mentioned issues. Those attributes\nare <code>srcset</code> and <code>sizes</code>.</p>\n\n<p>The <code>srcset</code> attribute allows you to define a set of source images the browser should consider when rendering the HTML\nto the user. The critical word here is <em>“should”</em>, as the browser determines the selected image. We’ll see how to steer\nthe browser in a particular direction, but it will always be up to the browser. First, let’s see an example of an image\nwith a <code>srcset</code>.</p>\n\n<pre><code class=\"language-html\">&lt;img\n    srcset=\"/img/good-boy@3x.webp 2000w, /img/good-boy@2x.webp 1000w, /img/good-boy@1x.webp 500w\"\n    src=\"/img/good-boy@1x.webp\"\n    alt=\"a good boy - corgi puppy\"\n    decoding=\"async\"\n    &gt;\n</code></pre>\n\n<p>Three images are defined with their width descriptor specified in <code>&lt;number&gt;w</code> format. The width descriptor tells the\nbrowser what the image’s intrinsic width is in a unit-agnostic way. This is important as some displays have pixel\ndensities of 1x, 2x, or 3x. We also set the <code>src</code> tag as a fallback for clients that do not\nsupport <code>srcset</code>, <a href=\"https://caniuse.com/?search=srcset\">although those clients are almost non-existent</a>.</p>\n\n<p>Let’s give the browser hints on what to choose when displaying one of our three options. That’s where the <code>sizes</code>\nattribute comes into play.</p>\n\n<pre><code class=\"language-html\">&lt;img  \n    srcset=\"/img/good-boy@3x.webp 2000w, /img/good-boy@2x.webp 1000w, /img/good-boy@1x.webp 500w\"  \n    sizes=\"(max-width:500px) 500px, (max-width:1000px) 1000px, (max-width:2000px) 2000px\"  \n    src=\"/img/good-boy@1x.webp\"  \n    alt=\"a good boy - corgi puppy\"  \n    decoding=\"async\"  \n    &gt;\n</code></pre>\n\n<p>Let’s see what the <code>sizes</code> mean:</p>\n\n<ul>\n  <li>When the maximum width of the viewport is 500px, the image will take up 500px in layout.</li>\n  <li>When the maximum width of the viewport is 1000px, the image will take up 1000px in layout.</li>\n  <li>When the maximum width of the viewport is 2000px, the image will take up 2000px in layout.</li>\n</ul>\n\n<p>We use CSS to define matches in the form of <code>(max-width:500px)</code>. Additionally, we could use the use case and assume all\nimages will always be displayed at <code>100vw</code>.</p>\n\n<pre><code class=\"language-html\">&lt;img\n    srcset=\"/img/good-boy@3x.webp 2000w, /img/good-boy@2x.webp 1000w, /img/good-boy@1x.webp 500w\"\n    sizes=\"100vw\"\n    src=\"/img/good-boy@1x.webp\"\n    alt=\"a good boy - corgi puppy\"\n    decoding=\"async\"\n    &gt;\n</code></pre>\n\n<p>Again, it’s important to note that the client ultimately decides which option is best given the current state of the\nviewport.</p>\n\n<p>What are the advantages of this approach?</p>\n\n<ol>\n  <li>The client knows best, so let it choose for you.</li>\n  <li>Once the largest-size asset is loaded, it will always be used from the cache. Upgrades never any downgrades in\nquality.</li>\n  <li>Less HTML than the other option.</li>\n</ol>\n\n<p>What are the disadvantages?</p>\n\n<ol>\n  <li>Lack of control and “art direction”</li>\n  <li>Black box of when and why things might be chosen.</li>\n</ol>\n\n<p>Let’s look at the next option, the <code>picture</code> tag, and see how we may overcome some disadvantages.</p>\n\n<h2 id=\"the-descriptive-approach-to-responsive-images\">The Descriptive Approach to Responsive Images</h2>\n\n<p>The <code>picture</code> tag allows us to describe what image to serve and when to serve it. This allows us a level of control not\navailable to folks using the <code>img</code> tag with <code>srcset</code> and <code>sizes</code>. Let’s take a look at an example.</p>\n\n<pre><code class=\"language-html\">&lt;picture&gt;\n    &lt;source media=\"(max-width: 500px)\" width=\"500\" height=\"738\" srcset=\"/img/sad-boy@1x.webp\"&gt;\n    &lt;source media=\"(max-width: 1000px)\" width=\"1000\" height=\"1476\" srcset=\"/img/sad-boy@2x.webp\"&gt;\n    &lt;source media=\"(min-width: 2000px)\" width=\"2000\" height=\"2952\" srcset=\"/img/sad-boy@3x.webp\"&gt;\n    &lt;img src=\"/img/sad-boy@3x.webp\" alt=\"a sad boy - French bulldog in a hoodie\" loading=\"lazy\"&gt;\n&lt;/picture&gt;\n</code></pre>\n\n<p>As you may notice, it’s more verbose, but we now can choose precisely what image gets displayed and when it gets\ndisplayed.</p>\n\n<p>This can give us a sense of art direction not available with the previous method. We could display images optimized for\nmobile devices or desktops based on media queries. This can help us optimize the size and dimensions of an image like we\ncouldn’t before.</p>\n\n<p>Advantages of this approach?</p>\n\n<ul>\n  <li>Art Direction - Images change as the viewport changes</li>\n  <li>Flexibility</li>\n  <li>Still delivering the optimal experience.</li>\n</ul>\n\n<p>Disadvantages to this approach?</p>\n\n<ul>\n  <li>Verbose - lots and lots of HTML</li>\n  <li>Resizes may cause additional network requests for new assets</li>\n</ul>\n\n<p>Let’s see both of these examples in a demo.</p>\n\n<h2 id=\"responsive-images-demo-time\">Responsive Images Demo Time</h2>\n\n<p>This video is hosted on Mastodon, so you\ncan <a href=\"https://mastodon.social/@khalidabuhakmeh/111925914430361839\">head to my Mastodon page to see it in action</a>. You can\nalso head to\nmy <a href=\"https://github.com/khalidabuhakmeh/ResponsiveImages\">GitHub repository to download the sample ASP.NET Core project</a>.</p>\n\n<video width=\"100%\" controls=\"\" loop=\"\" style=\"border: 1px solid rgb(210, 0, 104)\">\n    <source src=\"https://files.mastodon.social/media_attachments/files/111/925/914/148/410/853/original/ab69aa01627a7de7.mp4\" type=\"video/mp4\" />\n    Your browser does not support the video tag.\n</video>\n\n<p>As you notice, when I resize the window, the pictures of puppies change (look at the 1x, 2x, and 3x in the corners).</p>\n\n<p>The Corgi’s <code>1x</code> image is never displayed, but the French Bulldog’s image behaves more predictably. Very cool, right?\nGive it a try by downloading the demo from GitHub.</p>\n\n<h2 id=\"conclusion\">Conclusion</h2>\n\n<p>Responsive images are an excellent feature of HTML, but they require a bit of thought upfront and an understanding of\nwhat you’re attempting to accomplish. The <code>img</code> tag has <code>srcset</code> and <code>sizes</code> and might be an easier path for ASP.NET\nCore devs as a starting point, but the <code>picture</code> tag offers more control and “art direction”. Regardless of your choice,\nyou’ll deliver an optimized experience to your users.</p>\n\n<p>Thanks for reading and sharing these posts with friends and colleagues. Cheers.</p>\n\n",
      "Content": null,
      "Language": null,
      "Link": "https://khalidabuhakmeh.com/responsive-images-crash-course-for-aspnet-core-developers"
    },
    {
      "FeedId": "https://khalidabuhakmeh.com/feed.xml",
      "ItemId": "https://khalidabuhakmeh.com/how-to-ssr-web-components-in-aspnet-core-using-taghelpers",
      "Title": "How To SSR Web Components In ASP.NET Core using TagHelpers",
      "PublishDate": "2024-03-26T00:00:00+00:00",
      "Summary": "<p>Web Components are gaining momentum in the web platform space, and frankly, it’s bittersweet for us ASP.NET Core\ndevelopers. On the one hand, you can use Web Components in your current ASP.NET Core applications, as I demonstrated in\na previous post, but it isn’t the best experience it could be. You’ll have flashes of unstyled content, layout shifts,\nJavaScript code that blocks the critical rendering path, and you’ll not get the server-side rendering (SSR) goodness\ndeveloped exclusively for the JavaScript ecosystem.</p>\n\n<p>In his\npost <a href=\"https://www.zachleat.com/web/good-bad-web-components/\">“THE GOOD, THE BAD, THE WEB COMPONENTS”</a>, <a href=\"https://zachleat.com/@zachleat\">Zach Leatherman</a>\nwrote about the ideal way to deliver web components to avoid some of the issues I described. In this blog post, we’ll\nsee how we can use ASP.NET Core’s Tag Helpers to deliver the best experience to users when using Web Components.</p>\n\n<!--more-->\n\n<h2 id=\"the-ideal-web-component-delivery-method\">The ideal Web Component delivery method</h2>\n\n<p>Web Components are a mix of JavaScript and HTML. Nesting your HTML within a custom element tag is best for delivering a\nprogressively enhanced and seamless experience. Let’s take a look at building a <code>Counter</code> component. First, let’s see\nwhat the custom element would look like on your page.</p>\n\n<pre><code class=\"language-html\">&lt;my-counter&gt;\n\t&lt;button class=\"btn btn-primary\"&gt;1&lt;/button&gt;\n&lt;/my-counter&gt;\n</code></pre>\n\n<p>and the corresponding JavaScript would be as follows.</p>\n\n<pre><code class=\"language-javascript\">class Counter extends HTMLElement {\n    connectedCallback() {\n        const button = this.querySelector(\"button\");\n        button.addEventListener(\"click\", () =&gt; {\n            button.innerText = (parseInt(button.innerText) + 1).toString();\n        });\n    }\n}\n\ncustomElements.define(\"my-counter\", Counter);\n</code></pre>\n\n<p>This allows the client to render the <code>button</code> element and its CSS styles in place before the JavaScript attaches the\nevent listener. That’s awesome, but this technique breaks down quickly once you want to use the counter multiple times.</p>\n\n<pre><code class=\"language-html\">&lt;my-counter&gt;\n\t&lt;button class=\"btn btn-primary\"&gt;1&lt;/button&gt;\n&lt;/my-counter&gt;\n&lt;my-counter&gt;\n\t&lt;button class=\"btn btn-primary\"&gt;2&lt;/button&gt;\n&lt;/my-counter&gt;\n&lt;my-counter&gt;\n\t&lt;button class=\"btn btn-primary\"&gt;3&lt;/button&gt;\n&lt;/my-counter&gt;\n</code></pre>\n\n<p>This is especially painful if the internal HTML is complex with multiple nodes.</p>\n\n<h2 id=\"shadow-dom-and-templates\">Shadow Dom and Templates</h2>\n\n<p>With Web Components, you can avoid repeating yourself by utilizing the <code>template</code> element. This template can be used in\nJavaScript to clone repeated elements within an instance of a component. Let’s look at the HTML.</p>\n\n<pre><code class=\"language-html\">&lt;template id=\"my-counter-template\"&gt;\n    &lt;style&gt;\n        button {\n            background-color: orange;\n            color: black;\n            padding: .375rem .75rem;\n            border-radius: 0.25rem;\n            border:  1px solid transparent;\n            line-height: 1.5rem;\n            cursor: pointer;\n            &amp;:hover {\n                /* make color darker */\n                filter: brightness(75%);\n            }\n        }\n    &lt;/style&gt;\n    &lt;button&gt;\n        &lt;slot&gt;&lt;/slot&gt;\n    &lt;/button&gt;\n&lt;/template&gt;\n&lt;my-counter&gt;1&lt;/my-counter&gt;\n&lt;my-counter&gt;1&lt;/my-counter&gt;\n&lt;my-counter&gt;2&lt;/my-counter&gt;\n&lt;my-counter&gt;3&lt;/my-counter&gt;\n</code></pre>\n\n<p>This is great for reducing repetition but comes at the expense of additional front-end processing. Let’s look at the\nupdated JavaScript that now uses the ShadowDom.</p>\n\n<pre><code class=\"language-javascript\">class Counter extends HTMLElement {\n    connectedCallback() {\n        if (this.dataset.template) {\n            const template = document.getElementById(\"my-counter-template\");\n            const shadowRoot = this.attachShadow({mode: \"open\"});\n            shadowRoot.appendChild(template.content.cloneNode(true));\n            const button = shadowRoot.querySelector(\"button\");\n            button.addEventListener(\"click\", () =&gt; {\n                console.log(button);\n                this.innerText = (parseInt(this.innerText) + 1).toString();\n            });\n\t\t}\n    }\n}\n\ncustomElements.define(\"my-counter\", Counter);\n</code></pre>\n\n<p>You can probably tell a few things changed in the JavaScript as well. This is a bit more complex, and we lost the\nability to target the elements in our components with external styles from a CSS framework like Bootstrap.</p>\n\n<p>What if we could get the benefits of the first implementation with the style of the second? Well, luckily, with ASP.NET\nCore, we can!</p>\n\n<h2 id=\"aspnet-core-taghelpers-to-the-rescue\">ASP.NET Core TagHelpers to the rescue!</h2>\n\n<p>TagHelpers can do almost anything to the elements within its content, and I mean anything. Let’s look at how we might\nimplement a <code>WebComponentOptimizer</code> tag helper in our ASP.NET Core Razor pages.</p>\n\n<pre><code class=\"language-html\">&lt;web-component-optimizer&gt;\n    &lt;template name=\"my-counter\"&gt;\n        &lt;button class=\"btn btn-danger\"&gt;\n            &lt;slot&gt;&lt;/slot&gt;\n        &lt;/button&gt;\n    &lt;/template&gt;\n\n    &lt;my-counter&gt;1&lt;/my-counter&gt;\n    &lt;my-counter&gt;2&lt;/my-counter&gt;\n    &lt;my-counter&gt;3&lt;/my-counter&gt;\n&lt;/web-component-optimizer&gt;\n</code></pre>\n\n<p>When we render the page, we will get the following HTML.</p>\n\n<pre><code class=\"language-html\">&lt;my-counter&gt;\n\t&lt;button class=\"btn btn-danger\"&gt;\n\t\t1\n\t&lt;/button&gt;\n&lt;/my-counter&gt;\n&lt;my-counter&gt;\n\t&lt;button class=\"btn btn-danger\"&gt;\n\t\t2\n\t&lt;/button&gt;\n&lt;/my-counter&gt;\n&lt;my-counter&gt;\n\t&lt;button class=\"btn btn-danger\"&gt;\n\t\t3\n\t&lt;/button&gt;\n&lt;/my-counter&gt;\n</code></pre>\n\n<p>The template is processed from the HTML output, and you get some fast and snappy web components on the initial page\nload. That’s awesome, right?!</p>\n\n<p>Well, here’s the tag helper to help you do that. <strong>Note: this is a proof of concept. Before going to a production\nenvironment, you’ll want to test and adapt this for your needs.</strong></p>\n\n<pre><code class=\"language-csharp\">using AngleSharp;\nusing AngleSharp.Dom;\nusing AngleSharp.Html;\nusing AngleSharp.Html.Dom;\nusing AngleSharp.Html.Parser;\nusing Microsoft.AspNetCore.Razor.TagHelpers;\n\nnamespace WebComponentsWithTagHelpers;\n\npublic class WebComponentOptimizer : TagHelper\n{\n    public override async Task ProcessAsync(TagHelperContext context, TagHelperOutput output)\n    {\n        var children = await output.GetChildContentAsync();\n        var parser = new HtmlParser();\n        var document = await parser.ParseDocumentAsync(children.GetContent());\n        \n        // clear the output\n        output.Content.Clear();\n        output.TagName = \"\";\n\n        var template = (IHtmlTemplateElement)document.GetElementsByTagName(\"template\")[0];\n        var webComponentName = template.GetAttribute(\"name\");\n        \n        if (webComponentName is { })\n        {\n            var outputBuilder = new StringWriter();\n            var formatter = new HtmlMarkupFormatter();\n            var webComponents = document.GetElementsByTagName(webComponentName);\n            \n            foreach (var webComponent in webComponents)\n            {\n                var clone = template.Content.Clone();\n                var slot = clone.FindDescendant&lt;IHtmlSlotElement&gt;()!;\n\n                slot.OuterHtml = webComponent.InnerHtml;\n                slot.RemoveFromParent();\n                webComponent.InnerHtml = clone.ToHtml(); \n                webComponent.ToHtml(outputBuilder,formatter); ;\n            }\n\n            output.Content.SetHtmlContent(outputBuilder.ToString());\n        }\n    }\n}\n</code></pre>\n\n<p>There are a few neat tag helper tricks here.</p>\n\n<ul>\n  <li>Setting the <code>TagName</code> to an empty string removes the parent tag.</li>\n  <li>AngleSharp is a great way to parse the existing DOM</li>\n  <li>You can use a formatter to optimize the final output.</li>\n</ul>\n\n<p><a href=\"https://github.com/khalidabuhakmeh/WebComponentsWithTagHelpers\">If you want to try this for yourself, head to GitHub to see the whole sample.</a></p>\n\n<h2 id=\"stretch-goals-other-web-component-frameworks\">Stretch Goals: Other Web Component Frameworks</h2>\n\n<p>While not shown here, I’d love someone to use the SSR support in their favorite frontend frameworks to integrate with\nRazor views. This could improve the initial user experience while allowing developers to use frameworks like Angular,\nVue, and React. Since <code>ProcessAsync</code> could call out to an NPM process and retrieve the starting HTML from a library.</p>\n\n<h2 id=\"conclusion\">Conclusion</h2>\n\n<p>Web Components are fantastic, and they have so much potential to make the user experience great for users without long\npauses while the UI gets its act together. On the .NET side, ASP.NET Core could be a great option to boost the web\nplatform with Razor’s strength. This blog post only begins to scratch the surface of what could be possible. I hope you\nconsider this when building your following UI in ASP.NET Core as an option for delivering world-class experiences.</p>\n\n<p>Thanks for reading and sharing my posts with friends and colleagues. Cheers.</p>\n",
      "Content": null,
      "Language": null,
      "Link": "https://khalidabuhakmeh.com/how-to-ssr-web-components-in-aspnet-core-using-taghelpers"
    },
    {
      "FeedId": "https://khalidabuhakmeh.com/feed.xml",
      "ItemId": "https://khalidabuhakmeh.com/blazors-css-isolation-deep-issue-and-solution",
      "Title": "Blazor's CSS isolation ::deep issue and solution",
      "PublishDate": "2024-03-19T00:00:00+00:00",
      "Summary": "<p>Lately, I’ve been helping a few developers solve some of their issues around Blazor adoption. While I have mixed\nfeelings about the technology, my urge to help developers overcome their challenges outweighs my trepidation with the\ntechnology itself.</p>\n\n<p>Recently, I had a Blazor developer have issues with the <code>::deep</code>  cascading style sheet (CSS) pseudo-selector and the\nstyle’s inability to cascade styles to child components. If you’re having a similar issue, I have a detailed issue\nbreakdown and potential solution. Let’s get started.</p>\n\n<!--more-->\n\n<h2 id=\"what-is-css-isolation\">What is CSS isolation?</h2>\n\n<p>Blazor is a component-based framework that takes much inspiration from the JavaScript ecosystem’s React component model.\nThe model focuses on reusability through encapsulation and manifests in a single-file style that combines Razor markup\nand C# logic.</p>\n\n<p>In a Blazor application, CSS can be scoped to a single component by adding a convention-based filename similar to a\ncomponent. For example, if your application contains a <code>Counter.razor</code> component, any styles defined\nin <code>Counter.razor.css</code> would be scoped to the component definition.</p>\n\n<p>Blazor scopes CSS by adding a component-unique HTML attribute to the HTML rendered on the client. Take, for example, the\ncontents of <code>Counter.razor.css</code>, which I’ve added to a new Blazor application.</p>\n\n<pre><code class=\"language-css\">h1 {\n    color: pink;\n}\n</code></pre>\n\n<p>The resulting CSS is sent to the client when the Blazor build pipeline processes the file.</p>\n\n<pre><code class=\"language-css\">/* /Pages/Counter.razor.rz.scp.css */\nh1[b-13zswy4nzk] {\n    color: pink;\n}\n</code></pre>\n\n<p>This CSS rule reads, <em>“any H1 in the current document with an attribute of ‘b-13zswy4nzk’ should have pink-colored\ntext.”</em></p>\n\n<p>Scoped CSS allows you to target components with styles without the risk of having rules conflict with other rules. But\nwhat if you want to take advantage of the cascading part of CSS?</p>\n\n<h2 id=\"using-the-deep-pseudo-selector\">Using the <code>::deep</code> pseudo-selector</h2>\n\n<p>As you saw, Blazor processes component-scoped CSS files and adds them to your application’s Blazor CSS file. This allows\nBlazor developers to use additional pseudo-selectors to generate different rules. One such pseudo-selector is\nthe <code>::deep</code> selector.</p>\n\n<p>The <code>::deep</code> pseudo-selector will allow you to target child HTML elements nested within a parent component. Let’s change\nthe previous CSS rule to use this feature.</p>\n\n<pre><code class=\"language-css\">::deep h1 {\n\tcolor: pink;\n}\n</code></pre>\n\n<p>After running the Blazor application, we can see the updated CSS rule.</p>\n\n<pre><code class=\"language-css\">/* /Pages/Counter.razor.rz.scp.css */\n[b-13zswy4nzk] h1 {\n    color: pink;\n}\n</code></pre>\n\n<p>This new CSS rule reads, “any H1 element found within an element with the attribute of ‘b-13zswy4nzk’ will have a text\ncolor of pink.”.</p>\n\n<p>Great! Ship it. What’s the issue?</p>\n\n<h2 id=\"the-blazor-attribute-problem\">The Blazor attribute problem</h2>\n\n<p>Let’s take a look at the <code>Counter.razor</code> component and a new <code>Child.razor</code> component with the previous isolated CSS in\nmind. First, the <code>Counter.razor</code> definition.</p>\n\n<pre><code class=\"language-razor\">@page \"/counter\"\n\n&lt;PageTitle&gt;Counter&lt;/PageTitle&gt;\n&lt;Child/&gt;\n&lt;p role=\"status\"&gt;Current count: @currentCount&lt;/p&gt;\n&lt;button class=\"btn btn-primary\" @onclick=\"IncrementCount\"&gt;Click me&lt;/button&gt;\n\n@code {\n    private int currentCount = 0;\n\n    private void IncrementCount()\n    {\n        currentCount++;\n    }\n}\n</code></pre>\n\n<p>You’ll note the usage of the <code>Child</code> component right under the <code>PageTitle</code> component. Let’s see that implementation.</p>\n\n<pre><code class=\"language-razor\">&lt;h1&gt;Counter&lt;/h1&gt;\n\n@code {\n    \n}\n</code></pre>\n\n<p>Given the isolated CSS, we would assume that the <code>H1</code> element within our child component would become <code>pink</code>, but that’s\nnot the case. Let’s look at the rendered HTML to see the issue.</p>\n\n<pre><code class=\"language-html\">&lt;article class=\"content px-4\" b-5dhe1ruqj7&gt;\n    &lt;h1 tabindex=\"-1\"&gt;Counter&lt;/h1&gt;\n    &lt;p role=\"status\" b-13zswy4nzk&gt;Current count: 0&lt;/p&gt;\n    &lt;button class=\"btn btn-primary\" b-13zswy4nzk&gt;Click me&lt;/button&gt;\n&lt;/article&gt;\n</code></pre>\n\n<p>Do you see the issue? <strong>Blazor adds the unique attribute to all top-level HTML elements within a component. This creates\na mismatch between markup and the CSS rule.</strong></p>\n\n<p>In the rendered HTML, the <code>p</code> and <code>button</code> elements get the attribute <code>b-13zswy4nzk</code>, but our <code>Child</code> component is used\nwithin the <code>Counter</code> component but before the any HTML element. Worse, there are no encapsulating HTML elements.</p>\n\n<h2 id=\"the-fix-to-deep--styles\">The fix to ::deep  styles</h2>\n\n<p>So you’ve read this far and want to know the solution to the problem. It’s relatively straightforward.</p>\n\n<p><strong>If your usage of the <code>::deep</code> pseudo-selector is not working, you need to add a wrapping HTML element within your\nparent component that is a parent to all usages of child components.</strong></p>\n\n<p>Let’s fix our <code>Counter.razor</code> markup with a straightforward change.</p>\n\n<pre><code class=\"language-razor\">@page \"/counter\"\n\n&lt;div&gt;\n\t&lt;PageTitle&gt;Counter&lt;/PageTitle&gt;\n\t&lt;Child/&gt;\n\t&lt;p role=\"status\"&gt;Current count: @currentCount&lt;/p&gt;\n\t&lt;button class=\"btn btn-primary\" @onclick=\"IncrementCount\"&gt;Click me&lt;/button&gt;\n&lt;/div&gt;\n\n@code {\n    private int currentCount = 0;\n\n    private void IncrementCount()\n    {\n        currentCount++;\n    }\n}\n</code></pre>\n\n<p>When we re-run our application, we can see that the unique attribute is now on the first HTML element along with the\nprevious elements of <code>p</code> and <code>button</code> and our CSS rule now targets nested HTML elements correctly.</p>\n\n<pre><code class=\"language-html\">&lt;div b-13zswy4nzk&gt;\n    &lt;h1 tabindex=\"-1\"&gt;Counter&lt;/h1&gt;\n    &lt;p role=\"status\" b-13zswy4nzk&gt;Current count: 0&lt;/p&gt;\n    &lt;button class=\"btn btn-primary\" b-13zswy4nzk&gt;Click me&lt;/button&gt;\n&lt;/div&gt;\n</code></pre>\n\n<p>This fixes the issue, but depending on the CSS framework library you’re using, a parent <code>div</code> HTML element may break\nyour layout. Experiment with different HTML tags to see which ones you can use as wrappers while not breaking global CSS\nrules.</p>\n\n<h2 id=\"conclusion\">Conclusion</h2>\n\n<p>CSS Isolation is a technique for continuing the philosophy of encapsulating as much within the bounds of a component,\nbut there are times where you want the cascade to do its job. To get the <code>::deep</code> pseudo-selector element working\nproperly, all your Blazor components should have a single-wrapping HTML element as the root element. If your Blazor\ncomponents do not have a parent element, you’ll get CSS rules that don’t ultimately match your HTML markup.</p>\n\n<p>Hope this post helped, and as always, thanks for reading and sharing my posts with friends and colleagues. Cheers.</p>\n",
      "Content": null,
      "Language": null,
      "Link": "https://khalidabuhakmeh.com/blazors-css-isolation-deep-issue-and-solution"
    },
    {
      "FeedId": "https://khalidabuhakmeh.com/feed.xml",
      "ItemId": "https://khalidabuhakmeh.com/how-to-use-no-class-frameworks-to-move-fast-in-style",
      "Title": "How to use No-Class Frameworks to Move Fast in Style",
      "PublishDate": "2024-03-12T00:00:00+00:00",
      "Summary": "<p>Software development can be a struggle between form and function. With many developers, function takes the driver’s\nseat, while the aesthetics of an application are lucky to have a seat in the vehicle. Rational minds might say, “Well,\nwhat does it matter how it looks? As long as it works right?” but great design isn’t always rational; it’s emotional.</p>\n\n<p>Many developers look to supplement their design deficits with style libraries like Bootstrap, Tailwind CSS, and Bulma to\nevoke strong user emotions. These are great initial options, but they typically are temporary substitutes for greater\nambitions of bespoke design systems. Style libraries can also stand in the way of evolving a UI to meet user needs since\nthey heavily rely on library-specific HTML, JavaScript, and CSS classes. Removing these dependencies is unlikely once\nthey find their way into your codebase.</p>\n\n<p>To my surprise, there have been a few attempts to give developers a strong design starting point while leveraging HTML’s\nexisting semantics and foundational elements. This movement is known as <strong>“No-class Frameworks</strong>”.</p>\n\n<p>In general, No-class frameworks force developers to write semantically appropriate HTML while limiting the need for CSS\nclasses in the markup. The libraries do their best to use the HTML markup to style around standard practices.</p>\n\n<p>This post will look at MVP.CSS and some examples of styled HTML elements. Then, we’ll discuss the advantages and\ndisadvantages of using a no-class framework in your application.</p>\n\n<!--more-->\n\n<h2 id=\"mvpcss---a-no-class-framework\">MVP.CSS - a No-class framework</h2>\n\n<p>As the name suggests, <a href=\"https://andybrewer.github.io/mvp/\">MVP.CSS is a style library</a> designed to help developers build\nweb pages for their minimal viable\nproduct (MVP) projects. The MVP is a common practice in tech circles to build a functional product while only including\nthe bare essentials feature set. As the name suggests, the library’s aesthetics are muted and restrained but better than\nwhat you’d get if you used nothing.</p>\n\n<p>To get started with MVP.CSS, add a single no-build stylesheet to the page’s header.</p>\n\n<pre><code class=\"language-html\">&lt;link rel=\"stylesheet\" href=\"https://unpkg.com/mvp.css\"&gt; \n</code></pre>\n\n<p><a href=\"https://andybrewer.github.io/mvp/\">In a feature grid on the site</a>, MVP.CSS boasts that it is mobile-friendly, works out\nof the box, easily customizable, and only operates on semantic HTML.</p>\n\n<p>Let’s see what a styled table’s HTML looks like.</p>\n\n<p><img src=\"https://res.cloudinary.com/abuhakmeh/image/fetch/c_limit,f_auto,q_auto,w_800/https://khalidabuhakmeh.com/assets/images/posts/no-class-style-frameworks/mvp-css-table-style.png\" srcset=\"https://res.cloudinary.com/abuhakmeh/image/fetch/c_limit,f_auto,q_auto,w_320/https://khalidabuhakmeh.com/assets/images/posts/no-class-style-frameworks/mvp-css-table-style.png 320w, https://res.cloudinary.com/abuhakmeh/image/fetch/c_limit,f_auto,q_auto,w_540/https://khalidabuhakmeh.com/assets/images/posts/no-class-style-frameworks/mvp-css-table-style.png 540w, https://res.cloudinary.com/abuhakmeh/image/fetch/c_limit,f_auto,q_auto,w_682/https://khalidabuhakmeh.com/assets/images/posts/no-class-style-frameworks/mvp-css-table-style.png 682w\" sizes=\"100vw\" alt=\"mvp.css styled HTML table\" loading=\"lazy\" width=\"682\" height=\"300\" crossorigin=\"anonymous\" /></p>\n\n<pre><code class=\"language-html\">&lt;table&gt;\n    &lt;thead&gt;\n    &lt;tr&gt;\n        &lt;th&gt;&lt;/th&gt;\n        &lt;th&gt;Col A&lt;/th&gt;\n        &lt;th&gt;Col B&lt;/th&gt;\n        &lt;th&gt;Col C&lt;/th&gt;\n    &lt;/tr&gt;\n    &lt;/thead&gt;\n    &lt;tbody&gt;\n    &lt;tr&gt;\n        &lt;td&gt;Row 1&lt;/td&gt;\n        &lt;td&gt;Cell A1&lt;/td&gt;\n        &lt;td&gt;Cell B1&lt;/td&gt;\n        &lt;td&gt;Cell C1&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n        &lt;td&gt;Row 2&lt;/td&gt;\n        &lt;td&gt;Cell A2&lt;/td&gt;\n        &lt;td&gt;Cell B2&lt;/td&gt;\n        &lt;td&gt;Cell C2&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;/tbody&gt;\n&lt;/table&gt;\n</code></pre>\n\n<p>This approach applies to many common HTML elements, including headings, forms, navigation, quotes, and lists.</p>\n\n<p>While the initial white and blue color scheme might suit most situations, MVP.CSS allows library consumers to modify the\nvisual rendering with global CSS variables. After loading the library, you can control background, primary, and\nsecondary colors and font choices by modifying the following rule in a custom stylesheet.</p>\n\n<pre><code class=\"language-css\">:root {\n    --active-brightness: 0.85;\n    --border-radius: 5px;\n    --box-shadow: 2px 2px 10px;\n    --color-accent: #118bee15;\n    --color-bg: #fff;\n    --color-bg-secondary: #e9e9e9;\n    --color-link: #118bee;\n    --color-secondary: #920de9;\n    --color-secondary-accent: #920de90b;\n    --color-shadow: #f4f4f4;\n    --color-table: #118bee;\n    --color-text: #000;\n    --color-text-secondary: #999;\n    --font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Oxygen-Sans, Ubuntu, Cantarell, \"Helvetica Neue\", sans-serif;\n    --hover-brightness: 1.2;\n    --justify-important: center;\n    --justify-normal: left;\n    --line-height: 1.5;\n    --width-card: 285px;\n    --width-card-medium: 460px;\n    --width-card-wide: 800px;\n    --width-content: 1080px;\n}\n</code></pre>\n\n<h2 id=\"the-advantages-of-no-class-frameworks\">The Advantages of No-Class Frameworks</h2>\n\n<p>There are several advantages to using a No-Class framework, some obvious and others less so.</p>\n\n<h3 id=\"less-stuff\">Less Stuff</h3>\n\n<p>Semantic HTML leads to smaller payloads for the client, and the parsing of CSS and HTML required to create the CSSDOM\nand DOM is significantly less work. That leads to consistently faster pages and better user experiences.</p>\n\n<h3 id=\"simplified-markup\">Simplified Markup</h3>\n\n<p>If you’ve worked with any CSS framework, you’ve likely spent significant time in the documentation. With No-Class\nframeworks, your HTML will render as you expect without additional classes or markups.</p>\n\n<h3 id=\"no-build-tools\">No Build Tools</h3>\n\n<p>In most cases, since there is a limited number of HTML elements, most No-class frameworks don’t require any build tools.\nThe build tools in the JavaScript ecosystem can be a frustrating experience, especially for developers working in other\necosystems.</p>\n\n<h3 id=\"simple-exit-strategy\">Simple Exit Strategy</h3>\n\n<p>When you’ve decided you need more from your UI, you have a great starting point to style existing HTML without the\ntedious work of extracting the previous styles and framework-dependent HTML.</p>\n\n<h3 id=\"embrace-the-css-platform\">Embrace the CSS Platform</h3>\n\n<p>Other approaches may be seen as fighting against the HTML and CSS platform by jamming design-oriented classes into the\ndocument. No-Class tries to stay closer to the platform, letting you take advantage of modern CSS rather than treating\nCSS as an intermediate language.</p>\n\n<h2 id=\"disadvantages-of-no-class-frameworks\">Disadvantages of No-Class Frameworks</h2>\n\n<p>No-class frameworks aren’t all rainbows and unicorns, as they have definite drawbacks. We’ll point these out in this\nsection.</p>\n\n<h3 id=\"limited-html-components\">Limited HTML Components</h3>\n\n<p>While an extensive list of HTML components is in the HTML specification, they are limited. If you’re building a unique\nweb experience, you’re likely to hit this limitation sooner than later.</p>\n\n<h3 id=\"minimal-layout-options\">Minimal Layout Options</h3>\n\n<p>The ethos of these frameworks is around common style patterns, which don’t offer many visual options. The lack of bells\nand whistles can make pages feel repetitive. CSS grids and Flexbox can provide options that work well with semantic\nHTML.</p>\n\n<h3 id=\"bring-your-style\">Bring Your Style</h3>\n\n<p>You’re out of luck if you seek guidance around a cohesive color palette and iconography. The missing style guidance can\nfeel like being back at square one for many folks who think a style library aims to make these kinds of decisions for\nthem.</p>\n\n<h2 id=\"conclusion\">Conclusion</h2>\n\n<p>This post was inspired by a <a href=\"https://css-tricks.com/no-class-css-frameworks/\">2020 blog post by Chris Coyier</a>, and while\nthe blog post is a few years old, the message of leaning on the web platform has never been more critical. With No-class\nframeworks, developers can ship lightweight user experiences that work for a wider audience without the burden of\nheavier CSS frameworks.</p>\n\n<p>The advancements in HTML and CSS have never made it more possible to build familiar experiences without the burden of\npast limitations. If you’re starting a new project, I recommend starting with a No-class approach and seeing how far you\nget. Even if you reach for another library, you’ll have begun in a much simpler place and better appreciate how far you\ncan get with so little.</p>\n",
      "Content": null,
      "Language": null,
      "Link": "https://khalidabuhakmeh.com/how-to-use-no-class-frameworks-to-move-fast-in-style"
    },
    {
      "FeedId": "https://khalidabuhakmeh.com/feed.xml",
      "ItemId": "https://khalidabuhakmeh.com/how-to-integrate-htmx-and-shoelace-web-components",
      "Title": "How to Integrate HTMX and Shoelace Web Components",
      "PublishDate": "2024-03-05T00:00:00+00:00",
      "Summary": "<p>In my last post, <a href=\"/shoelace-web-components-with-aspnet-core\">Shoelace Web Components with ASP.NET Core</a>, I showed ASP.NET Core developers how to\nintegrate the web components of Shoelace into an existing web application. It’s incredible, and you should check it out.\nIf you’ve read this blog any time, you might have read a post or two about <a href=\"https://htmx.org\">HTMX</a>, a library for\nbuilding dynamic and maintainable web experiences; I love it.</p>\n\n<p>While the two libraries can work together, there’s an issue you need to work around to get the advantages of both. In\nthis post, we’ll discuss the issues with using Shoelace with HTMX and how to get it working again with your ASP.NET Core\napplications. If you’re using any other technology stack (Django, Spring, or Next.js), don’t worry; the solution here\nwill work for you, too.</p>\n\n<!--more-->\n\n<h2 id=\"update-in-htmx-20-and-shadow-dom-support\">Update in HTMX 2.0 and Shadow DOM support</h2>\n\n<p>For folks using <a href=\"https://htmx.org\">HTMX 2.0</a>, the HTMX library has since resolved this issue and you’re no longer required to perform the steps in this blog post. Users of HTMX pre-2.0 will still need the following blog post, but I would recommend upgrading to the latest version. The biggest changes in HTMX include moving all extensions out of the core library and making them opt-in.</p>\n\n<p>I’ve confirmed the expected behavior <a href=\"https://github.com/khalidabuhakmeh/Shoelace-AspNetCore/tree/shoelace-htmx2\">in a branch on my GitHub Repository</a>. Cheers. 🍻</p>\n\n<h2 id=\"shoelace-the-shadow-dom-and-htmx\">Shoelace, the Shadow DOM, and HTMX</h2>\n\n<p>Shoelace is a web component library that <em>encapsulates</em> all functionality in a user-friendly HTML tag. Let’s take a look\nat the most common element, the <a href=\"https://shoelace.style/components/button\"><strong>Button</strong></a>.</p>\n\n<p>After installing the Shoelace scripts, adding the <code>sl-button</code> element in HTML markup is straightforward.</p>\n\n<pre><code class=\"language-html\">\n&lt;sl-button&gt;Button&lt;/sl-button&gt;\n</code></pre>\n\n<p>The abstraction works out nicely from a developer and user perspective, as these elements “just work” with HTML (as you\nmight have read in the post mentioned earlier). Looking at how a client renders this element shows some of the\nimplementation details.</p>\n\n<pre><code class=\"language-html\">\n&lt;sl-button variant=\"default\" size=\"medium\" data-optional=\"\" data-valid=\"\"&gt;\n    #shadow-root (open)\n    &lt;button part=\"base\" class=\" button button--default button--medium button--standard button--has-label \" type=\"button\"\n            title=\"\" name=\"\" value=\"\" role=\"button\" aria-disabled=\"false\" tabindex=\"0\"&gt;\n        &lt;slot name=\"prefix\" part=\"prefix\" class=\"button__prefix\"&gt;&lt;/slot&gt;\n        &lt;slot part=\"label\" class=\"button__label\"&gt;&lt;/slot&gt;\n        &lt;slot name=\"suffix\" part=\"suffix\" class=\"button__suffix\"&gt;&lt;/slot&gt;\n        &lt;!--?lit$16265820754$--&gt;\n        &lt;!--?lit$16265820754$--&gt;\n    &lt;/button&gt;\n    Button\n&lt;/sl-button&gt;\n</code></pre>\n\n<p>Shoelace uses the <a href=\"https://lit.dev\">Lit library</a> to build components utilizing the Shadow DOM. These elements exist\nvirtually in the DOM and are part of the page but may or may not be accessible based on the implementation.</p>\n\n<p>As you likely guessed, HTMX doesn’t look at the Shadow DOM of custom web components to find common elements such\nas <code>button</code>, <code>input</code>, or <code>select</code>. This can be a problem for folks using HTMX to hijack <code>form</code> elements or adding <code>hx-</code>\nattributes to shoelace components. These custom components aren’t added to the ultimate request that HTMX builds.</p>\n\n<p>Don’t worry; there’s an easy fix.</p>\n\n<h2 id=\"htmx-events-to-the-rescue\">HTMX Events To The Rescue</h2>\n\n<p><a href=\"https://htmx.org/docs/#events\">HTMX has many events</a> that allow you to intercept context at any point in the process.\nFor our use case, we want to intercept all outgoing requests and determine if our <code>target</code> element and any of its\nchildren contain Shoelace components.</p>\n\n<p>Luckily for us, Shoelace components follow a typical pattern of having <code>name</code> and <code>value</code> attributes. We can assume that\nany element with a <code>name</code> attribute is expected to be transmitted in a request.</p>\n\n<p>Let’s hook into the <code>htmx:beforeRequest</code>. Add the following code into any script file that loads after HTMX and Shoelace\nlibraries.</p>\n\n<pre><code class=\"language-javascript\">document.body.addEventListener('htmx:beforeRequest', evt =&gt; {\n    const elements = [\n        evt.target,\n        ...evt.target.querySelectorAll('*')\n    ];\n\n    for (const el of elements) {\n        const {tagName, name, value, disabled, checked} = el;\n\n        // ignore inputs that aren't from shoelace\n        if (!tagName.startsWith(\"SL-\")) continue;\n        // all inputs can be disabled\n        if (disabled) continue;\n        // the name is required\n        if (name === undefined || name === \"\") continue;\n        if (value === undefined) continue;\n\n        // a checkable element\n        if (checked !== undefined) {\n            if (checked) {\n                evt.detail.requestConfig.parameters[name] = value;\n            }\n        } else {\n            // it is a simple element\n            evt.detail.requestConfig.parameters[name] = value;\n        }\n    }\n});\n</code></pre>\n\n<p>Note that form values can have duplicate names within a form collection. I don’t commonly duplicate names, but it might\nbe a typical pattern for arrays in other technology stacks. If so, you may need to alter the code above to suit your\nneeds.</p>\n\n<p>As an additional note, there may be some components you need to account for in your server code. For\nexample, <code>sl-select</code> component works with arrays.</p>\n\n<blockquote>\n  <p>The current value of the select, submitted as a name/value pair with form data. When<code>multiple</code>is enabled, the value\nattribute will be a space-delimited list of values based on the options selected, and the value property will be an\narray. <strong>For this reason, values must not contain spaces.</strong>\n–<a href=\"https://shoelace.style/components/select\">Shoelace Documentation</a></p>\n</blockquote>\n\n<p>So far, in my testing, this code works with most of the shoelace elements in the official documentation. That said,\nplease test and modify the code according to your needs.</p>\n\n<h2 id=\"conclusion\">Conclusion</h2>\n\n<p>It’s always fun when things work together, but it’s not always the case. Luckily, both HTMX and Shoelace offer great\nAPIs that allow you to smooth out some of these issues. Please try these two libraries in your ASP.NET Core applications\nand let me know how it goes.</p>\n\n<p>As always, thanks for reading the posts, and I hope I helped you get on your way to a productive day. Cheers.</p>\n\n<p>*<a href=\"https://mariohamann.com/livewire-web-components-attributes\">Special thanks to Mario Hamann and his excellent post integrating Web Components and Livewire.</a></p>\n\n",
      "Content": null,
      "Language": null,
      "Link": "https://khalidabuhakmeh.com/how-to-integrate-htmx-and-shoelace-web-components"
    },
    {
      "FeedId": "https://khalidabuhakmeh.com/feed.xml",
      "ItemId": "https://khalidabuhakmeh.com/shoelace-web-components-with-aspnet-core",
      "Title": "Shoelace Web Components with ASP.NET Core",
      "PublishDate": "2024-02-27T00:00:00+00:00",
      "Summary": "<p>Web Components are a powerful way to add UX to your web applications while using the web platform. That makes them ideal\nas they can be used in various ecosystems with little or no changes. They also require no build pipelines as they are\nsupported natively in most clients. This is in stark contrast to approaches like React or Blazor.</p>\n\n<p>A mature web component library like <a href=\"https://shoelace.style\">Shoelace</a> allows you to share common UI components with\nteams working on different technology stacks. This can create a consistent user experience regardless of the server\ntechnology used to render the pages. Take advantage of server-side rendering strengths without heavy SPA libraries or\nconfusing build pipelines.</p>\n\n<p>In this repository, you will find a sample using Shoelace components that work with ASP.NET Core Razor Pages and\nTagHelpers.</p>\n\n<!--more-->\n\n<h2 id=\"what-is-a-web-component\">What is a Web Component?</h2>\n\n<p>A <a href=\"https://en.wikipedia.org/wiki/Web_Components\">web component</a> is a reusable component written to take advantage of the\nstandard component model built into some of the most popular web clients, such as Chrome, Firefox, and Safari. The\ncomponent model includes three sets of technologies, and a web component can take advantage of one or all of them:\nCustom Elements, Shadow DOM, and HTML Templates.</p>\n\n<p>The goal of web components is to reduce unnecessary overhead by building commonly run tasks into the web platform\nitself. This helps increase interoperability across UI frameworks and improve the performance of many frontend\nexperiences.</p>\n\n<h2 id=\"what-is-shoelace\">What is Shoelace?</h2>\n\n<p><a href=\"https://shoelace.style\">Shoelace is a “forward-thinking library for web components.”</a> The library attempts to create\nreusable UI elements that\nyou can utilize as-is or within other existing UI frameworks, such as React, Vue, or Angular. Some of these components\ninclude common patterns such as input elements, badges, buttons, alerts, and so many more. Shoelace also provides\nconsumers with a stylistic starting point, but allows for all component details to be altered.</p>\n\n<p>To get started with Shoelace is straightforward, as all you need is to register the library in your web pages <code>head</code>\ntag.</p>\n\n<pre><code class=\"language-html\">\n&lt;link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/@shoelace-style/shoelace@2.12.0/cdn/themes/light.css\"/&gt;\n&lt;script type=\"module\"\n        src=\"https://cdn.jsdelivr.net/npm/@shoelace-style/shoelace@2.12.0/cdn/shoelace-autoloader.js\"&gt;&lt;/script&gt;\n</code></pre>\n\n<p>You can also choose to selectively bundle Shoelace using a JavaScript build pipeline, but this step is optional.</p>\n\n<h2 id=\"adding-shoelace-to-aspnet-core\">Adding Shoelace to ASP.NET Core</h2>\n\n<p><strong><a href=\"https://github.com/khalidabuhakmeh/Shoelace-AspNetCore\">Check out the working sample on my GitHub repository</a></strong></p>\n\n<p>There are not that many steps required to add Shoelace to an existing ASP.NET Core application. Shoelace also integrates\nwell with existing UI libraries such as Bootstrap.</p>\n\n<p>In a new ASP.NET Core project, replace the top of the <code>_Layout.cshtml</code> file with the following markup.</p>\n\n<pre><code class=\"language-razor\">@{\n    const string shoelaceStylesheet = \"https://cdn.jsdelivr.net/npm/@shoelace-style/shoelace@2.12.0/cdn/themes/light.css\";\n    const string shoelaceJavaScript = \"https://cdn.jsdelivr.net/npm/@shoelace-style/shoelace@2.12.0/cdn/shoelace-autoloader.js\";\n}\n\n&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"utf-8\"/&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"/&gt;\n    &lt;title&gt;@ViewData[\"Title\"] - SweetKicks&lt;/title&gt;\n    &lt;link rel=\"stylesheet\" href=\"~/lib/bootstrap/dist/css/bootstrap.min.css\"/&gt;\n    &lt;link rel=\"stylesheet\" href=\"~/css/site.css\" asp-append-version=\"true\"/&gt;\n    &lt;link rel=\"stylesheet\" href=\"~/SweetKicks.styles.css\" asp-append-version=\"true\"/&gt;\n    &lt;link rel=\"stylesheet\" href=\"@shoelaceStylesheet\" /&gt;\n    &lt;script type=\"module\" src=\"@shoelaceJavaScript\"&gt;&lt;/script&gt;\n    @await RenderSectionAsync(\"headScripts\", required: false)\n&lt;/head&gt;\n</code></pre>\n\n<p>If you want the URLs inline, you will need to escape the <code>@</code> symbols with <code>@@</code>. In this case, I thought it would be\neasier to read if I moved the URLs to the beginning of the file.</p>\n\n<p>I have added an extra section of <code>headScripts</code>, which we will use later.</p>\n\n<p>The most essential element of this code snippet is the script reference to <code>shoelace-autoloader.js</code>, which scans the\npage for shoelace components and then auto-wires those components into the known set of custom elements. Without this,\nelements would not render and be visible to users.</p>\n\n<p>Let’s add some code to our <code>Index.cshtml.cs</code> to set up for the eventual use of Shoelace components.</p>\n\n<pre><code class=\"language-csharp\">using Microsoft.AspNetCore.Mvc;\nusing Microsoft.AspNetCore.Mvc.RazorPages;\n\nnamespace SweetKicks.Pages;\n\npublic class IndexModel(ILogger&lt;IndexModel&gt; logger) : PageModel\n{\n    [TempData]\n    public string? Name { get; set; }\n    \n    public void OnGet()\n    {\n    }\n\n    public RedirectToPageResult OnPost([FromForm] string name)\n    { \n        logger.LogInformation(\"Name is {Name}\", name);\n        Name = name;\n        return RedirectToPage();\n    }\n}\n</code></pre>\n\n<p>Before we get to using the Shoelace components, we need to let ASP.NET Core know about the <code>sl-input</code> component we’ll be\nusing so we can take advantage of tag helpers. Place the following file anywhere in the project.</p>\n\n<pre><code class=\"language-csharp\">using JetBrains.Annotations;\nusing Microsoft.AspNetCore.Mvc.TagHelpers;\nusing Microsoft.AspNetCore.Mvc.ViewFeatures;\nusing Microsoft.AspNetCore.Razor.TagHelpers;\n\nnamespace SweetKicks.TagHelpers;\n\n[UsedImplicitly]\n[HtmlTargetElement(\"sl-input\", Attributes = \"asp-for\", TagStructure = TagStructure.WithoutEndTag)]\npublic class ShoelaceInputTagHelper(IHtmlGenerator generator) \n    : InputTagHelper(generator);\n</code></pre>\n\n<p>Also, be sure to register the new tag helper in <code>_ViewImports.cshtml</code> making sure to adjust the namespace according to\nyour needs.</p>\n\n<pre><code class=\"language-razor\">@using SweetKicks\n@namespace SweetKicks.Pages\n@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers\n@addTagHelper *, SweetKicks\n</code></pre>\n\n<p>Now, let’s use some Shoelace components. In <code>Index.cshtml</code>, we can replace the following HTML with the following markup.</p>\n\n<pre><code class=\"language-razor\">@page\n@model IndexModel\n@{\n    ViewData[\"Title\"] = \"Home page\";\n}\n\n&lt;div&gt;\n    @if (Model.Name is not null)\n    {\n        &lt;sl-alert open&gt;\n            &lt;sl-icon slot=\"icon\" name=\"info-circle\"&gt;&lt;/sl-icon&gt;\n            Your name is @Model.Name\n        &lt;/sl-alert&gt;\n    }\n\n    &lt;form method=\"post\" asp-page=\"Index\" class=\"my-3\"&gt;\n        &lt;sl-input label=\"What is your name?\"\n                  type=\"text\"\n                  asp-for=\"Name\"\n                  help-text=\"ex. Alex Murphy\"\n                  required\n                  autofocus&gt;\n        &lt;/sl-input&gt;\n        &lt;sl-button class=\"mt-2\" variant=\"primary\" type=\"submit\"&gt;Submit&lt;/sl-button&gt;\n    &lt;/form&gt;\n&lt;/div&gt;\n</code></pre>\n\n<p>Running the application now shows our input element. Submitting the form will also show the alert notification.</p>\n\n<p><img src=\"https://github.com/khalidabuhakmeh/Shoelace-AspNetCore/raw/main/shoelace-aspnetcore-running-sample.png\" alt=\"shoelace components in asp.net core\" /></p>\n\n<p>If you take a look at the markup again, you’ll notice that a single <code>sl-input</code> got us a user experience that includes a\nlabel, a placeholder, and input. Additionally, with our <code>ShoelaceInputTagHelper</code> class, we now have ASP.NET Core support\nfor web components. Not bad at all.</p>\n\n<h2 id=\"flash-of-content-fixes\">Flash Of Content Fixes</h2>\n\n<p>Eagle-eyed developers may have noticed a flash of undefined content as the components were rendered. There are several\nfixes to this, with\nthem <a href=\"https://www.abeautifulsite.net/posts/flash-of-undefined-custom-elements/\">coming from this blog post</a>.</p>\n\n<p>The first and simplest fix is to use a CSS style in the <code>site.css</code>.</p>\n\n<pre><code class=\"language-css\">:not(:defined) {\n    visibility: hidden;\n}\n</code></pre>\n\n<p>This won’t render any undefined elements, including any sub content. This is OK, but can still be jarring.</p>\n\n<p>The second fix is to add the following CSS to the <code>site.css</code> stylesheet.</p>\n\n<pre><code class=\"language-css\">body {\n    margin-bottom: 60px;\n    opacity: 0;\n}\n\nbody.ready {\n    opacity: 1;\n    transition: .25s opacity;\n}\n</code></pre>\n\n<p>Then to modify either the <code>_Layout.cshtml</code> or <code>Index.cshtml</code> file with the following JavaScript snippet.</p>\n\n<pre><code class=\"language-html\">&lt;script type=\"module\"&gt;\n    /* note: this will block rendering if forget\n       using a mentioned custom component. \n     ex. sl-not-a-real-component */\n    await Promise.allSettled([\n        customElements.whenDefined('sl-input'),\n        customElements.whenDefined('sl-button'),\n    ]);\n\n    document.body.classList.add('ready');\n&lt;/script&gt;\n</code></pre>\n\n<p>You may also do this on a per-page basis using predefined sections.</p>\n\n<pre><code class=\"language-razor\">@section headScripts\n{\n    &lt;script type=\"module\"&gt;\n          /* note: this will block rendering if forget\n             using a mentioned custom component. \n           ex. sl-not-a-real-component */\n          await Promise.allSettled([\n            customElements.whenDefined('sl-input'),\n            customElements.whenDefined('sl-button'),        \n          ]);\n              \n          document.body.classList.add('ready');\n    &lt;/script&gt;\n}\n</code></pre>\n\n<p>As noted in the comment, this approach will block the page rendering until the client is finished registering the\nmentioned components. After they are done loading, the page will transition from <code>0</code> to <code>1</code> opacity. This provides a\nnice experience, but has the downside of needing to track all components that are used on a page.</p>\n\n<p>I personally prefer the first approach as you’d less likely break the entire page by accidentally removing an element\nthat you had previously registered.</p>\n\n<h2 id=\"conclusion\">Conclusion</h2>\n\n<p>Web Components are awesome and are the future of web development. There are still some caveats, but in my opinion, they\ncan help reduce vendor lock-in and ultimately\nprovide more value to teams who may be doing polyglot development. There’s also a world of unexplored possibilities with\nweb components depending on your approach. With Shoelace, all components encapsulate functionality, and that’s great for\nfeature reuse. There’s another approach of progressive enhancement components that can take existing HTML and enrich it\nwith additional client-side features. I highly recommend you check out the other components in\nthe <a href=\"https://shoelace.style\">Shoelace</a> component library.</p>\n\n<p>As always, thanks for reading and sharing my posts.</p>\n",
      "Content": null,
      "Language": null,
      "Link": "https://khalidabuhakmeh.com/shoelace-web-components-with-aspnet-core"
    },
    {
      "FeedId": "https://khalidabuhakmeh.com/feed.xml",
      "ItemId": "https://khalidabuhakmeh.com/how-to-map-sql-results-to-any-object-using-entity-framework-core-8",
      "Title": "How to Map SQL Results To Any Object Using Entity Framework Core 8",
      "PublishDate": "2024-02-20T00:00:00+00:00",
      "Summary": "<p>Entity Framework Core 8 packs a punch, aiming for the undisputed title of “most powerful Object-Relational Mapper (ORM)”\nin the .NET space. Many folks in our community are typically divided about using ORMs, with many preferring Micro-ORMs.\nA Micro-ORM has basic mapping functionality from SQL results but lacks object-tracking features that make ORMs what they\nare.</p>\n\n<p>What Micro-ORMs lack in object-tracking, they make up for in simplicity and functionality. The most popular library is\nDapper, which allows folks to write SQL, execute the query, and map the results to any .NET Object. Well, with Entity\nFramework Core 8, you can have Dapper-like functionality with the strengths of EF Core.</p>\n\n<p>This post will be short, but for most folks, this is a public service announcement to improve performance and tune\nexisting code paths. Let’s get started.</p>\n\n<!--more-->\n\n<h2 id=\"whats-this-about-mapping-any-object\">What’s this about Mapping Any Object?</h2>\n\n<p>Before the EF Core 8 release, all entities that were to be queried from a <code>DbContext</code> had to be registered within the\nimplementation. These types are typically referenced as a <code>DbSet&lt;T&gt;</code>. Anyone who’s worked with a database understands\nthat SQL allows us to create <em>any</em> result we like, even though those entities might not directly exist in our schema.\nThis disadvantaged EF Core compared to Dapper, which lets you craft any SQL statements you want and map them to C#\nobjects.</p>\n\n<p>In EF Core 8, you can now use <code>SqlQuery&lt;T&gt;</code> to pass in any SQL statement and map the results to a C# object.</p>\n\n<pre><code class=\"language-csharp\">var result = await db\n    .Database\n    .SqlQuery&lt;NamedResult&gt;($\"Select Id, Name from Customers\")\n    .FirstOrDefaultAsync();\n\nConsole.WriteLine($\"NamedResult: {result}\");\n\nrecord NamedResult(int Id, string Name);\n</code></pre>\n\n<p>Awesome! As a bonus, you can apply additional LINQ methods to your existing SQL statement.</p>\n\n<pre><code class=\"language-csharp\">var result = await db\n    .Database\n    .SqlQuery&lt;NamedResult&gt;($\"Select Id, Name from Customers\")\n    .Where(c =&gt; c.Id == 1)\n    .FirstOrDefaultAsync();\n\nConsole.WriteLine($\"NamedResult: {result}\");\n\nrecord NamedResult(int Id, string Name);\n</code></pre>\n\n<p>The EF Core generates an SQL statement that uses a nested select to keep your original query intact while adding\nadditional filtering.</p>\n\n<pre><code class=\"language-sql\">SELECT \"n\".\"Id\", \"n\".\"Name\"\nFROM (\n  Select Id, Name from Customers\n) AS \"n\"\nWHERE \"n\".\"Id\" = 1\nLIMIT 1\n</code></pre>\n\n<p>There you have it. I hope you enjoyed this short post. I’m glad to see this feature as part of EF Core 8 finally. It’s\nbeen a long time in the making, and thanks to the EF Core team for making it happen.</p>\n\n<p>As always, thanks for reading and sharing my posts. Cheers.</p>\n",
      "Content": null,
      "Language": null,
      "Link": "https://khalidabuhakmeh.com/how-to-map-sql-results-to-any-object-using-entity-framework-core-8"
    },
    {
      "FeedId": "https://khalidabuhakmeh.com/feed.xml",
      "ItemId": "https://khalidabuhakmeh.com/increase-performance-with-complex-types-in-entity-framework-core-8",
      "Title": "Increase Performance with Complex Types in Entity Framework Core 8",
      "PublishDate": "2024-02-13T00:00:00+00:00",
      "Summary": "<p>With the release of .NET 8, we also see the release of Entity Framework Core 8 and a bounty of new features. One of my\nfavorite new features is Complex Types. When data modeling with Entity Framework Core, we may unnecessarily add tables\nto our database schema because “that’s just how database modeling works”. This can lead to table sprawl, decreased\ninsert performance, and increased query times.</p>\n\n<p>In this post, we’ll explore how to use <strong>Complex Types</strong> in Entity Framework Core 8 to reduce the number of tables in\nour schema, simplify inserts, and increase query performance.</p>\n\n<!--more-->\n\n<h2 id=\"what-are-complex-types\">What are Complex Types?</h2>\n\n<p>Entity Framework Core has long had the concept of “owned types”, which are properties dependent on their parent object.\nDepending on your data model, these pieces of information only make sense within the context of additional data. For\nexample, in a hypothetical domain, a physical address may only make sense when related to a customer. Otherwise, it is\nan arbitrary piece of information. Let’s look at how you may model this.</p>\n\n<pre><code class=\"language-csharp\">public class Customer  \n{  \n    public int Id { get; set; }  \n    public required string Name { get; set; }  \n    public required Address Address { get; set; }  \n}\n</code></pre>\n\n<p>As you may notice, the <code>Address</code> property is used within the <code>Customer</code> definition. Folks familiar with EF Core might\nassume that there would be an <code>Addresses</code> table, and in previous versions of EF Core, that would have been the case.</p>\n\n<p>In EF Core 8, the modeling process lets us map an <code>Address</code> directly to columns within a <code>Customers</code> table.</p>\n\n<pre><code class=\"language-SQL\">create table main.Customers\n(\n    Id               INTEGER not null\n        constraint PK_Customers\n            primary key autoincrement,\n    Name             TEXT    not null,\n    Address_City     TEXT    not null,\n    Address_Country  TEXT    not null,\n    Address_Line1    TEXT    not null,\n    Address_Line2    TEXT,\n    Address_PostCode TEXT    not null\n);\n</code></pre>\n\n<p><a href=\"https://devblogs.microsoft.com/dotnet/announcing-ef8-rc1/\">According to the initial release notes</a>, Complex types have\ncertain characteristics:</p>\n\n<ol>\n  <li>Types are not identified or tracked by a key value.</li>\n  <li>Must only exist as part of the entity and not directly have a <code>DbSet</code></li>\n  <li>Can be value or reference types (records or classes).</li>\n  <li>Can share the same instance across multiple properties* (be careful).</li>\n</ol>\n\n<p>The final bullet states that the same instance is only shared during the manipulation process of in-memory objects. Once\nthe data is read back out, the newly tracked objects will be different instances. This is important because you may\nencounter unexpected issues if you’re operating under false assumptions.</p>\n\n<p>So, how do you implement a complex type?</p>\n\n<pre><code class=\"language-csharp\">[ComplexType]\npublic class Address\n{\n    public required string Line1 { get; set; }\n    public string? Line2 { get; set; }\n    public required string City { get; set; }\n    public required string Country { get; set; }\n    public required string PostCode { get; set; }\n}\n</code></pre>\n\n<p>You add a <code>ComplexType</code> attribute, of course. Again, note that this class does not have any key.</p>\n\n<h2 id=\"saving-complex-types\">Saving Complex Types</h2>\n\n<p>Using a complex type is as you’d expect. Let’s take a look at a quick usage sample.</p>\n\n<pre><code class=\"language-csharp\">Database db = new();\n\n// Complex Type storage of Address\nvar customer = new Customer\n{\n    Name = \"Khalid Abuhakmeh\",\n    Address = new()\n    {\n        Line1 = \"1 Fantasy Lane\",\n        City = \"Los Angeles\",\n        Country = \"USA\",\n        PostCode = \"90210\",\n    }\n};\ndb.Customers.Add(customer);\nawait db.SaveChangesAsync();\n</code></pre>\n\n<p>When we look at the <code>Insert</code> SQL statement, we can see a straightforward command.</p>\n\n<pre><code class=\"language-sql\"> INSERT INTO \"Customers\" (\"Name\", \"Address_City\", \"Address_Country\", \"Address_Line1\", \"Address_Line2\", \"Address_PostCode\")\n      VALUES (@p0, @p1, @p2, @p3, @p4, @p5)\n</code></pre>\n\n<p>That’s one less table needed for our insert statements. That’s great news! What about querying the same model?</p>\n\n<p>Let’s perform the query <code>db.Customers.FirstOrDefault()</code> and see what we get.</p>\n\n<pre><code class=\"language-sql\">SELECT \"c\".\"Id\", \"c\".\"Name\", \"c\".\"Address_City\", \"c\".\"Address_Country\", \"c\".\"Address_Line1\", \"c\".\"Address_Line2\", \"c\".\"Address_PostCode\"\nFROM \"Customers\" AS \"c\"\nLIMIT 1\n</code></pre>\n\n<p>Cool! Querying a single table is great news again.</p>\n\n<p>We can even write LINQ queries like you’d expect from any previous <code>DbContext</code>.</p>\n\n<pre><code class=\"language-csharp\">var result = await db\n    .Customers\n    .Where(x =&gt; x.Id == customer.Id)\n    .Select(x =&gt; x.Address)\n    .FirstOrDefaultAsync();\n</code></pre>\n\n<p>The previous LINQ statement produces the following SQL.</p>\n\n<pre><code class=\"language-sql\">SELECT \"c\".\"Address_City\", \"c\".\"Address_Country\", \"c\".\"Address_Line1\", \"c\".\"Address_Line2\", \"c\".\"Address_PostCode\"\n  FROM \"Customers\" AS \"c\"\n  WHERE \"c\".\"Id\" = @__customer_Id_0\n  LIMIT 1\n</code></pre>\n\n<p>This is awesome.</p>\n\n<p>A quick note about performance claims, it’s important to test any optimization and performance improvements in your own\ncodebase. While generally less tables involved in a transaction are better, there are scenarios that can be less\nperformant. For example, if you use Complex Types to create a monsterous 500+ column table, then you might want to\nreconsider your approach and it <em>might</em> be less performant than inserting into multiple tables.</p>\n\n<p>Here’s the <code>DbContext</code> for completeness.</p>\n\n<pre><code class=\"language-csharp\">using System.ComponentModel.DataAnnotations.Schema;\nusing Microsoft.EntityFrameworkCore;\n\nnamespace EntityFrameworkCoreEight;\n\npublic class Database : DbContext\n{\n    public DbSet&lt;Customer&gt; Customers =&gt; Set&lt;Customer&gt;();\n    \n    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n        =&gt; optionsBuilder\n            .UseSqlite(\"Data Source= database.db\")\n            .LogTo(Console.Write);\n}\n\npublic class Customer\n{\n    public int Id { get; set; }\n    public required string Name { get; set; }\n    public required Address Address { get; set; }\n}\n\n\n[ComplexType]\npublic class Address\n{\n    public required string Line1 { get; set; }\n    public string? Line2 { get; set; }\n    public required string City { get; set; }\n    public required string Country { get; set; }\n    public required string PostCode { get; set; }\n}\n</code></pre>\n\n<h2 id=\"conclusion\">Conclusion</h2>\n\n<p>Complex types allow you to reduce table sprawl, increase insert performance, and speed up query times. There are many\nopportunities to review existing schemas and optimize your database. It’s still important to realize you might be\ndealing with reference objects, so be careful about how you assign and modify objects that may be shared. There are\nstill some outstanding issues with Complex Types, but they are not critical show-stoppers. One of the issues is support\nfor inheritance. It is planned for future versions, but I can live without it now.\nDespite the minor issues, this is an excellent addition to Entity Framework Core 8.</p>\n\n<p>I hope you enjoyed this blog post, and as always, cheers.</p>\n",
      "Content": null,
      "Language": null,
      "Link": "https://khalidabuhakmeh.com/increase-performance-with-complex-types-in-entity-framework-core-8"
    },
    {
      "FeedId": "https://khalidabuhakmeh.com/feed.xml",
      "ItemId": "https://khalidabuhakmeh.com/html-web-components-with-vanilla-javascript-and-aspnet-core",
      "Title": "HTML Web Components with Vanilla JavaScript and ASP.NET Core",
      "PublishDate": "2024-02-06T00:00:00+00:00",
      "Summary": "<p>A general fog of “I hate JavaScript” hovers over the .NET development shops worldwide. While it’s understandable that\nJavaScript can sometimes be annoying, it has grown significantly recently. One of the areas more ASP.NET Core developers\nshould take note of is Web Components. Web Components allow you to create custom HTML elements for your views that can\nbe one-off or reusable.</p>\n\n<p>With Blazor, ASP.NET Core developers are being exposed to component-based development, but the approach I am going to\nshow you today uses a technique called <strong>HTML web components</strong>. Unlike Blazor components, these components wrap existing\nHTML and enhance the contents into something with interactivity. Let’s take a look.</p>\n\n<!--more-->\n\n<h2 id=\"what-are-html-web-components\">What are HTML Web Components?</h2>\n\n<p><a href=\"https://blog.jim-nielsen.com/2023/html-web-components/\">Web developer Jim Nielsen wrote a blog post titled “Html Web Components”</a>\nwhere he compares the React component model with what he feels is a better way to write Web Components. His <code>UserAvatar</code>\nexample might look familiar to Blazor developers.</p>\n\n<pre><code class=\"language-jsx\">&lt;UserAvatar\n  src=\"https://example.com/path/to/img.jpg\"\n  alt=\"...\"\n/&gt;\n</code></pre>\n\n<p>If you’re getting into web components, you might be tempted to write your web components using this approach, but you\nmight be causing unnecessary issues. What is a <code>UserAvatar</code>? What elements compose this component? How do I style it?</p>\n\n<p>Instead, consider a wrapper component that can enhance the child elements nested within.</p>\n\n<pre><code class=\"language-html\">&lt;user-avatar&gt;\n  &lt;img src=\"https://example.com/path/to/img.jpg\" alt=\"...\" /&gt;\n&lt;/user-avatar&gt;\n</code></pre>\n\n<p>There are multiple benefits to this approach:</p>\n\n<ul>\n  <li>Since elements already exist in the DOM, they can be processed immediately.</li>\n  <li>Team members can see all the elements and work with them accordingly.</li>\n  <li>Progressive enhancement. If the Javascript fails on start-up, you still have HTML.</li>\n</ul>\n\n<p>In short, instead of encapsulating HTML within a component, write your HTML web components to augment existing markup.\nIt’s a fantastic technique, and thanks to Jim Nielsen for their blog post. Now, let’s see how we can use this in ASP.NET\nCore.</p>\n\n<h2 id=\"the-blazor-counter-html-web-component\">The Blazor Counter HTML Web Component</h2>\n\n<p>I’ll be recreating Blazor’s counter component to show it doesn’t take much additional effort to write an HTML Web\nComponent. Let’s start with the HTML markup, as it’s the most straightforward implementation part.</p>\n\n<pre><code class=\"language-html\">&lt;vanilla-counter \n    count=\"0\" \n    href=\"@Url.Page(\"Index\", \"Count\")\"&gt;\n    &lt;h1&gt;Counter&lt;/h1&gt;\n    &lt;p role=\"status\"&gt;\n        Current count: &lt;span role=\"figure\"&gt;0&lt;/span&gt;\n    &lt;/p&gt;\n    &lt;button class=\"btn btn-primary\"&gt;\n        Click me\n    &lt;/button&gt;\n&lt;/vanilla-counter&gt;\n</code></pre>\n\n<p>Note: All web components must have a <code>-</code> in the name to be valid. This is to avoid conflicts with current and future\nHTML elements.</p>\n\n<p>We have an endpoint that will increment the count for us. I am using an endpoint to show that even HTML Web components\ncan connect to the server, but they can be anything you’d like. If you can write it in JavaScript, a web component can\ndo it. Let’s look at the backend implementation.</p>\n\n<pre><code class=\"language-csharp\">using Microsoft.AspNetCore.Mvc;\nusing Microsoft.AspNetCore.Mvc.RazorPages;\n\nnamespace WebComponentsSample.Pages;\n\n[IgnoreAntiforgeryToken]\npublic class IndexModel(ILogger&lt;IndexModel&gt; logger) : PageModel\n{\n    public void OnGet()\n    {\n    }\n\n    public IActionResult OnPostCount(int count)\n    {\n        return Content($\"{++count}\");\n    }\n}\n</code></pre>\n\n<p>OK, let’s write our HTML Web Component. It will be the <code>vanilla-counter</code> element we see above. In a <code>Counter.js</code> file,\nadd the following code.</p>\n\n<pre><code class=\"language-javascript\">export class Counter extends HTMLElement {\n    static observedAttributes = [\"count\", \"href\"]\n    \n    /* lifecycle events */\n    connectedCallback() {\n        console.log('created');\n        this.$button.addEventListener(\"click\", this.increment)\n    }\n\n    disconnectedCallback() {\n        console.log('destroyed');\n        this.$button.removeEventListener(\"click\", this.increment)\n    }\n\n    attributeChangedCallback(name, oldValue, newValue) {\n        if (name === \"count\") {\n            this.$figure.innerHTML = `${this.#count}`;\n        }\n    }\n\n    increment = () =&gt; {\n        this.$button.disabled = true;\n\n        let formData = new URLSearchParams();\n        formData.append(\"count\", this.#count);\n\n        fetch(this.#href, {\n           method: 'POST',\n           headers: {\n               'Content-Type': 'application/x-www-form-urlencoded'\n           },\n           body: formData\n        }).then((response) =&gt; {\n            return response.text();\n        }).then((data) =&gt; {\n            this.#count = parseInt(data);\n            this.$button.disabled = false;\n            console.log('clicked', this.#count);\n        });\n    }\n    get $button() {\n        return this.querySelector(\"button\");\n    }\n\n    get $figure() {\n        return this.querySelector('[role=\"figure\"]');\n    }\n\n    get #count() {\n        return parseInt(this.getAttribute(\"count\"));\n    }\n\n    set #count(value) {\n        this.setAttribute(\"count\", value.toString());\n    }\n    \n    get #href() {\n        return this.getAttribute(\"href\");\n    }\n}\n</code></pre>\n\n<p>The essential elements, from top to bottom, of this class include the following:</p>\n\n<ol>\n  <li><code>observedAttributes</code> opts into watching specific attributes for the <code>attributeChangedCallback</code> method. When these\nattributes change in the DOM, the callback gets invoked.</li>\n  <li>The <code>connectedCallback</code> and <code>disconnectedCallback</code> methods are lifecycle events invoked when the element is added and\nremoved from the DOM. This is important for dynamic element creation as you want to unregister any event listeners to\navoid memory leaks.</li>\n  <li><code>increment</code> is our logic, which calls the ASP.NET Core endpoint and returns the incremented value.</li>\n  <li>The rest of the class are helper getters and setters.</li>\n</ol>\n\n<p>We need to change our <code>site.js</code> file to import our <code>Counter.js</code> class and register the custom element.</p>\n\n<pre><code class=\"language-javascript\">import {Counter} from \"./Counter.js\";\n\nwindow.customElements.define(\"vanilla-counter\", Counter);\n</code></pre>\n\n<p>You’ll also want to change the <code>_Layout.cshtml</code> file to make sure the <code>site.js</code> file is loaded as a <code>module</code>, which will\nallow us to use the <code>import</code> keyword.</p>\n\n<pre><code class=\"language-html\">&lt;script src=\"~/js/site.js\"\n        type=\"module\"\n        asp-append-version=\"true\"&gt;\n&lt;/script&gt;\n</code></pre>\n\n<p>Let’s see what it looks like in the browser.</p>\n\n<p><img src=\"https://res.cloudinary.com/abuhakmeh/image/fetch/c_limit,f_auto,q_auto,w_800/https://khalidabuhakmeh.com/assets/images/posts/misc/html-web-component-aspnetcore-blazor-counter-sample.png\" srcset=\"https://res.cloudinary.com/abuhakmeh/image/fetch/c_limit,f_auto,q_auto,w_320/https://khalidabuhakmeh.com/assets/images/posts/misc/html-web-component-aspnetcore-blazor-counter-sample.png 320w, https://res.cloudinary.com/abuhakmeh/image/fetch/c_limit,f_auto,q_auto,w_540/https://khalidabuhakmeh.com/assets/images/posts/misc/html-web-component-aspnetcore-blazor-counter-sample.png 540w, https://res.cloudinary.com/abuhakmeh/image/fetch/c_limit,f_auto,q_auto,w_760/https://khalidabuhakmeh.com/assets/images/posts/misc/html-web-component-aspnetcore-blazor-counter-sample.png 760w, https://res.cloudinary.com/abuhakmeh/image/fetch/c_limit,f_auto,q_auto,w_980/https://khalidabuhakmeh.com/assets/images/posts/misc/html-web-component-aspnetcore-blazor-counter-sample.png 980w, https://res.cloudinary.com/abuhakmeh/image/fetch/c_limit,f_auto,q_auto,w_1200/https://khalidabuhakmeh.com/assets/images/posts/misc/html-web-component-aspnetcore-blazor-counter-sample.png 1200w\" sizes=\"100vw\" alt=\"html web component working in aspnet core application\" loading=\"lazy\" width=\"2560\" height=\"2830\" crossorigin=\"anonymous\" /></p>\n\n<p>Pretty\ncool. <a href=\"https://github.com/khalidabuhakmeh/WebComponentsSample/tree/main\">You can also try the HTML Web Component sample on my GitHub repository</a>.\nIn the screenshot you can see the HTML component is triggering fetch requests to our ASP.NET Core backend.</p>\n\n<h2 id=\"conclusion\">Conclusion</h2>\n\n<p>The web platform has come a long way, and this approach could be helpful to folks building web experiences. The process\nof building components is relatively straightforward, works with any technology stack, and has advantages regarding\nprogressive enhancement.</p>\n\n<p>I want to thank Jim Nielsen again for the excellent blog post and inspiration for this post. As always, thanks for\nreading, and cheers. :)</p>\n",
      "Content": null,
      "Language": null,
      "Link": "https://khalidabuhakmeh.com/html-web-components-with-vanilla-javascript-and-aspnet-core"
    },
    {
      "FeedId": "https://khalidabuhakmeh.com/feed.xml",
      "ItemId": "https://khalidabuhakmeh.com/dotnet-tasks-lists-foreach-and-problems",
      "Title": ".NET Tasks, List's ForEach, and Problems",
      "PublishDate": "2024-01-30T00:00:00+00:00",
      "Summary": "<p>I was scrolling the Mastodon timeline when I noticed a fellow .NET\ndeveloper, <a href=\"https://fosstodon.org/@billseipel\">Bill Seipel</a>, having an unexpected experience with <code>List.ForEach</code>\nand <code>async/await</code>. <a href=\"https://fosstodon.org/@billseipel/111500572831442889\">At first glance</a>, I thought he was modifying\nthe collection he was iterating over, but then I realized the issue was much more subtle.</p>\n\n<p>In this post, we’ll discuss what’s happening in a recreation of his code and how you might fix it.</p>\n\n<p>Let’s get started.</p>\n\n<!--more-->\n\n<h2 id=\"listforeach-and-tasks-lead-to-problems\">List.ForEach and Tasks lead to problems</h2>\n\n<p>For those unaware, the <code>List</code> type has a <code>ForEach</code> method, which allows the user to pass an <code>Action&lt;T&gt;</code>. The method\npasses the iteration’s item, allowing you to execute something similar to a <code>foreach</code> method. In a sense, it’s syntactic\nsugar. In another, it’s a relic before <code>async/await</code>. Let’s see an example code that can get you in trouble.</p>\n\n<pre><code class=\"language-csharp\">List&lt;string&gt; projects = new();  \nList&lt;string&gt; measures = [\"cm\", \"m\", \"km\"];  \n  \nmeasures.ForEach(async x =&gt;  \n{  \n     var result = await GetResultOfMeasure(x);  \n     projects.Add(result);  \n});  \n  \nConsole.WriteLine(projects.Count);  \n  \nasync Task&lt;string&gt; GetResultOfMeasure(string s)  \n{  \n     await Task.Delay(100);  \n     return $\"Measured as {s}\";  \n}\n</code></pre>\n\n<p>Looking at the code, we see an <code>async/await</code>, so what’s the problem? Well, let’s run the code and see what the result\nis.</p>\n\n<pre><code class=\"language-text\">0\n</code></pre>\n\n<p>What?! Why did we get a result of <code>0</code>?</p>\n\n<p>If you’re using a tool like <a href=\"https://www.jetbrains.com/resharper/\">ReSharper</a>\nor <a href=\"https://www.jetbrains.com/rider/\">JetBrains Rider</a> you’ll have seen a warning around the <code>async</code> keyword.</p>\n\n<pre><code class=\"language-text\">Avoid using 'async' lambda when delegate type returns 'void'\n</code></pre>\n\n<p>Oops! While the <code>Action</code> uses <code>async/await</code> semantics, nothing awaits the iterative process. This means our iterations\nmay or may not be complete by the time we reach the <code>Console.WriteLine</code> statement. Since we use <code>Task.Delay</code>, it’s\nlikely we won’t.</p>\n\n<p>If you’re using something that fluctuates in performance, you will likely pull out your hair due to indeterminate\nbehavior.</p>\n\n<p>So, what’s the fix?</p>\n\n<h2 id=\"fixing-listforeach-with-foreachasync\">Fixing List.ForEach with ForEachAsync</h2>\n\n<p>The most straightforward solution is not to use <code>ForEach</code> but to use a simple for each iteration instead.</p>\n\n<pre><code class=\"language-csharp\">List&lt;string&gt; projects = new();\nList&lt;string&gt; measures = [\"cm\", \"m\", \"km\"];\n\nforeach (var measure in measures)\n{\n     var result = await GetResultOfMeasure(measure);\n     projects.Add(result);\n}\n\nConsole.WriteLine(projects.Count);\n</code></pre>\n\n<p>But honestly, where’s the fun in that?! Another approach is to write a <code>ForEachAsync</code> extension method.</p>\n\n<pre><code class=\"language-csharp\">public static class ListExtension\n{\n     public static async Task ForEachAsync&lt;T&gt;(\n          this List&lt;T&gt; collection, \n          Func&lt;T, Task&gt; action)\n     {\n          foreach (var i in collection) await action(i);\n     }\n}\n</code></pre>\n\n<p>From here, you can tweak the original sample code to be sure to await the entire iterative process.</p>\n\n<pre><code class=\"language-csharp\">List&lt;string&gt; projects = new();\nList&lt;string&gt; measures = [\"cm\", \"m\", \"km\"];\n\nawait measures.ForEachAsync(async x =&gt;\n{\n     var result = await GetResultOfMeasure(x);\n     projects.Add(result);\n});\n\nConsole.WriteLine(projects.Count);\n\nasync Task&lt;string&gt; GetResultOfMeasure(string s)\n{\n     await Task.Delay(100);\n     return $\"Measured as {s}\";\n}\n</code></pre>\n\n<p>There you have it. Pretty cool, right?!</p>\n\n<h2 id=\"conclusion\">Conclusion</h2>\n\n<p>This particular issue is insidious as it all compiles and generally looks “correct.” With good tooling, like that\nprovided by JetBrains, you get a hint as to a potential issue lurking in your code, but it doesn’t scream at you since\nit’s still code that compiles. It might make sense for .NET to include a <code>ForEachAsync</code> method on <code>List</code>, but at this\npoint, it might also make sense to <code>Obsolete</code> the method entirely since it likely does more harm than good.</p>\n\n<p>What do you think? Let me know if you’ve ever run into this\nissue. <a href=\"https://fosstodon.org/@billseipel/111500572831442889\">You can see the full thread on Mastodon here, along with debugging videos describing what is happening.</a></p>\n\n<p>Thanks for reading and sharing my work with friends and colleagues. Cheers.</p>\n\n",
      "Content": null,
      "Language": null,
      "Link": "https://khalidabuhakmeh.com/dotnet-tasks-lists-foreach-and-problems"
    },
    {
      "FeedId": "https://khalidabuhakmeh.com/feed.xml",
      "ItemId": "https://khalidabuhakmeh.com/how-to-use-blazor-server-rendered-components-with-htmx",
      "Title": "How To Use Blazor Server-Rendered Components with HTMX",
      "PublishDate": "2024-01-23T00:00:00+00:00",
      "Summary": "<p>A few new tricks have shipped with the .NET 8 release, and I’d like to take this time to experiment with them.\nSpecifically, I wanted to see if folks investing in a Blazor component library could still use the excellent HTMX\nlibrary. If you want to write even less JavaScript, this blog post will be right up your alley.</p>\n\n<p>This post will explore how to take a server-rendered component and give it some client-side flair without needing web\nsockets or web assembly. We’ll even explore rewriting the <code>Counter</code> component found in the Blazor template and building\nit with HTMX in mind. Let’s go!</p>\n\n<!--more-->\n\n<h2 id=\"what-is-htmx\">What is HTMX?</h2>\n\n<p>For folks familiar with Blazor’s interactive server mode, SignalR, aka Web sockets, the <a href=\"https://htmx.org/\">HTMX</a> model isn’t much different.</p>\n\n<p>The client communicates with the server, and the server retains stateful information. The big difference is that HTMX\ntakes a hypermedia approach, meaning it leans on the web’s traditional request/response nature. There are no persistent\nconnections between the client and the server. Any DOM element can initiate a request, wait for the server to process\nit, and then respond with appropriate HTML. Once the HTML payload is received, it is swapped into the current DOM. While\nthe concept is simple to understand, it is powerful in practice.</p>\n\n<h2 id=\"what-are-blazor-server-rendered-components\">What are Blazor Server-Rendered Components?</h2>\n\n<p>With the .NET 8 release, folks can opt-in\nto <a href=\"https://learn.microsoft.com/en-us/aspnet/core/blazor/components/render-modes?view=aspnetcore-8.0#render-modes\">multiple render modes</a>.\nThe first in the list of render modes is <code>Static</code>, although that’s not entirely accurate.</p>\n\n<p>Static rendering implies you could compile components and assets into HTML at build time. In the case of Blazor, “\nStatic” rendering is more comparable to its contemporary approaches of MVC and Razor Pages. When a request to a page or\ncomponent is made, the server renders the component and its component graph and then responds with HTML.</p>\n\n<p>These Blazor components are all HTML, meaning they can only use HTML features and not the same interactive model you may\nexpect from <code>Interactive Server</code> or <code>Interactive WebAssembly</code> modes.</p>\n\n<p>The advantage to these Components is they are lightweight payloads, fast to render, and can even be streamed via stream\nrendering.</p>\n\n<h2 id=\"lets-use-htmx-with-blazor\">Let’s Use HTMX with Blazor</h2>\n\n<p>Before we port our <code>Counter</code> component to use HTMX, we must set up our project to make Blazor play nicely with HTMX.</p>\n\n<p>The first step is to add HTMX to our <code>App.razor</code> file. This is the app shell file which has our HTML structure.</p>\n\n<pre><code class=\"language-html\">&lt;!DOCTYPE html&gt;  \n&lt;html lang=\"en\"&gt;  \n  \n&lt;head&gt;  \n    &lt;meta charset=\"utf-8\"/&gt;  \n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"/&gt;  \n    &lt;base href=\"/\"/&gt;  \n    &lt;link rel=\"stylesheet\" href=\"bootstrap/bootstrap.min.css\"/&gt;  \n    &lt;link rel=\"stylesheet\" href=\"app.css\"/&gt;  \n    &lt;link rel=\"stylesheet\" href=\"BlazorHtmx.styles.css\"/&gt;  \n    &lt;link rel=\"icon\" type=\"image/png\" href=\"favicon.png\"/&gt;  \n  \n    &lt;script defer src=\"_framework/blazor.web.js\"&gt;&lt;/script&gt;  \n    &lt;script defer src=\"https://unpkg.com/htmx.org@1.9.8\"&gt;&lt;/script&gt;  \n    &lt;script defer src=\"js/htmx-blazor.js\"&gt;&lt;/script&gt;  \n    &lt;HeadOutlet/&gt;  \n&lt;/head&gt;  \n&lt;body&gt;  \n&lt;Routes/&gt;  \n&lt;/body&gt;  \n&lt;/html&gt;\n</code></pre>\n\n<p>We’ll also need to write a bit of JavaScript to tie into Blazor’s enhanced rendering mode.</p>\n\n<pre><code class=\"language-javascript\">// An enhanced load allows users to navigate between different pages  \nBlazor.addEventListener(\"enhancedload\", function () {  \n    // HTMX need to reprocess any htmx tags because of enhanced loading  \n    htmx.process(document.body);  \n});\n</code></pre>\n\n<p>Now, let’s set up our <code>HtmxCounter</code> component. In a file, add the following Blazor component code. You’ll notice that\nHTMX uses <code>hx-*</code> attributes to define the behavior of DOM elements. It’s easy to pick up and can add functionality\nquickly. (Not to brag, but I got this sample working on the first try. 🤩)</p>\n\n<pre><code class=\"language-razor\">&lt;div class=\"counter\"&gt;\n    &lt;p role=\"status\"&gt;Current count: @State.Value&lt;/p&gt;\n    &lt;button class=\"btn btn-primary\"\n            hx-post=\"/count\"\n            hx-target=\"closest .counter\"\n            hx-swap=\"outerHTML\"&gt;\n        Click me\n    &lt;/button&gt;\n&lt;/div&gt;\n\n@code {\n    [Parameter, EditorRequired] \n    public HtmxCounterState State { get; set; } = new();\n    \n    public class HtmxCounterState\n    {\n        public int Value { get; set; } = 0;\n    }\n}\n</code></pre>\n\n<p>Next, let’s look at our endpoint holding on to state. <strong>Note that this use of state management is only for demo\npurposes. I recommend user-scoped state management like a database limited to a single user.</strong></p>\n\n<p>In your Blazor’s <code>Program.cs</code> file, you’ll need to register the state for our component.</p>\n\n<pre><code class=\"language-c#\">builder.Services\n    .AddSingleton&lt;HtmxCounter.HtmxCounterState&gt;();\n</code></pre>\n\n<p>Next, we’ll need the endpoint to increment and render our component HTML fragment.</p>\n\n<pre><code class=\"language-c#\">app.MapPost(\"/count\",\n    (HtmxCounter.HtmxCounterState value) =&gt;\n    {\n        value.Value++;\n        return new RazorComponentResult&lt;HtmxCounter&gt;(\n            new { State = value }\n        );\n    });\n</code></pre>\n\n<p>Finally, let’s add our component to a Blazor server-rendered page.</p>\n\n<pre><code class=\"language-razor\">@page \"/\"\n@inject HtmxCounter.HtmxCounterState CounterState\n\n&lt;PageTitle&gt;Home&lt;/PageTitle&gt;\n\n&lt;h1&gt;Hello, world!&lt;/h1&gt;\n\n&lt;div class=\"mb-4\"&gt;\n    &lt;HtmxCounter State=\"CounterState\"/&gt;\n&lt;/div&gt;\n\n@code {\n    protected override void OnInitialized()\n    {\n        // reset counter on page reloads\n        CounterState.Value = 0;\n    }\n}\n</code></pre>\n\n<p>Let’s see what happens when we load our page.</p>\n\n<video controls=\"\" preload=\"metadata\">\n    <source src=\"https://github.com/khalidabuhakmeh/BlazorHtmx/raw/main/sample-video.mp4\" type=\"video/mp4\" />\n</video>\n\n<p>That’s pretty cool. From a client perspective, you can’t tell which implementation uses WebSockets and which is using\nHTMX. That’s amazing if you ask me. The HTMX implementation will also be cheaper in the long run as it requires no more\ninfrastructure than you currently have.</p>\n\n<p>If you want to check out the sample, you can get the solution\non <a href=\"https://github.com/khalidabuhakmeh/BlazorHtmx\">my GitHub repository and a few more samples of using HTMX with Blazor</a>.</p>\n\n<h2 id=\"conclusion\">Conclusion</h2>\n\n<p>Server-rendered components are an excellent addition to the Blazor toolbox and open up the possibility of using your\ncomponent library with something as cool as HTMX. I hope you try this sample and let me know what you think.</p>\n\n<p>As always, thanks for reading my blog posts. Cheers.</p>\n",
      "Content": null,
      "Language": null,
      "Link": "https://khalidabuhakmeh.com/how-to-use-blazor-server-rendered-components-with-htmx"
    },
    {
      "FeedId": "https://khalidabuhakmeh.com/feed.xml",
      "ItemId": "https://khalidabuhakmeh.com/how-to-use-iasyncenumerable-with-blazor-stream-rendering",
      "Title": "How to use IAsyncEnumerable with Blazor Stream Rendering",
      "PublishDate": "2024-01-16T00:00:00+00:00",
      "Summary": "<p>With the release of .NET 8, one killer feature will immediately increase the responsiveness of your APIs and Blazor\napplications: the ability to stream responses. Yes, you could stream responses before, but it’s never been easier with\nsupport for <code>IAsyncEnumerable</code> on API endpoints and the use of <code>StreamRenderingAttribute</code> on your Blazor United\napplications.</p>\n\n<p>This post will explore why you want to use <code>IAsyncEnumerable</code> and <code>StreamRendering</code> to get the fastest <strong>Time to first\nbyte (TTFB)</strong> out of your ASP.NET Core web applications. Let’s get started.</p>\n\n<!--more-->\n\n<h2 id=\"what-is-iasyncenumerable\">What is IAsyncEnumerable?</h2>\n\n<p>The interface <code>IAsyncEnumerable&lt;T&gt;</code> is a newish interface designed with the idea that retrieving each element within the\niteration is an asynchronous task. This is different than a typical <code>Task&lt;IEnumerable&gt;</code> as the operation to retrieve the\nenumerable is considered one step. If you’ve used any data-access layer, you’ve likely invoked methods\nlike <code>ToListAsync</code> or <code>ToArrayAsync</code>, invoking a request to your database and materializing the result in a single\noperation. Thinking about the same operation with <code>IAsyncEnumerable</code>, the process will first execute the query and then\nmaterialize each record as you enumerate through the collection. This allows you to start using data as it is received\nrather than waiting for data to buffer in memory. This leads to more efficient use of resources and faster response\ntimes.</p>\n\n<p>Let’s take a look at a simple example.</p>\n\n<pre><code class=\"language-csharp\">await foreach (var number in RangeAsync(1, 100))\n{\n    Console.WriteLine(number);\n}\n\nstatic async IAsyncEnumerable&lt;Number&gt; RangeAsync(int start, int count)\n{\n    for (int i = 0; i &lt; count; i++)\n    {\n        await Task.Delay(i);\n        yield return new Number(start + i);\n    }\n}\n\nrecord Number(int Value);\n</code></pre>\n\n<p>You’ll notice that <code>IAsyncEnumerable</code> also has C# syntax support with the availability of <code>await foreach</code>. That makes it\nstraightforward to consume in an existing codebase.</p>\n\n<h2 id=\"what-is-stream-rendering\">What is Stream Rendering?</h2>\n\n<p>While recently added to Blazor, stream rendering is not a new concept. Most browser clients support\na <code>Transfer-Encoding</code> of <code>chunked</code>. We can get an idea of what this means to web developers\nfrom <a href=\"https://en.wikipedia.org/wiki/Chunked_transfer_encoding\">Wikipedia</a>.</p>\n\n<blockquote>\n  <p>Chunked transfer encoding is a streaming data transfer mechanism available in Hypertext Transfer Protocol version 1.1,\ndefined in RFC 9112 §7.1. In chunked transfer encoding, the data stream is divided into a series of non-overlapping “\nchunks”. The chunks are sent out and received independently of one another.</p>\n</blockquote>\n\n<p>Cool! As application developers, we can take advantage of this for both API endpoints and, in the case of Blazor, for\nstreaming HTML markup from our component-based pages.</p>\n\n<p>Let’s look at streaming from a Minimal API endpoint.</p>\n\n<pre><code class=\"language-csharp\">var builder = WebApplication.CreateBuilder(args);\nvar app = builder.Build();\n\napp.MapGet(\"/\", () =&gt; \"Hello World!\");\n\napp.MapGet(\"/range\", () =&gt; \n    Results.Ok(new\n    {\n        totalCount = 100,\n        results = RangeAsync(1, 100)\n    }));\n\napp.Run();\n\nstatic async IAsyncEnumerable&lt;Number&gt; RangeAsync(int start, int count)\n{\n    for (int i = 0; i &lt; count; i++)\n    {\n        await Task.Delay(i);\n        yield return new Number(start + i);\n    }\n}\n\nrecord Number(int Value);\n</code></pre>\n\n<p>Running this sample in a browser, you’ll see the <code>results</code> get output to the page, even before getting a semantically\ncomplete JSON object.</p>\n\n<p><strong>It’s important to understand that a client must understand and support chunking to take advantage of the performance\nbenefits.</strong></p>\n\n<h2 id=\"stream-rendering-and-iasyncenumerable-for-blazor\">Stream Rendering and IAsyncEnumerable for Blazor</h2>\n\n<p>While Blazor supports stream rendering for HTML elements, you need to consider <em>how</em> you’ll be invoking\nan <code>IAsyncEnumerable</code> within a component’s lifecycle. While you may be tempted to do the following in your Blazor\ncomponents, it will result in an error.</p>\n\n<pre><code class=\"language-razor\">@* ERROR: The 'await foreach' statement can only be used in a method or lambda marked with the 'async' modifier *@\n@await foreach (var forecast in forecasts)\n{\n\t&lt;tr&gt;\n\t\t&lt;td&gt;@forecast.Date.ToShortDateString()&lt;/td&gt;\n\t\t&lt;td&gt;@forecast.TemperatureC&lt;/td&gt;\n\t\t&lt;td&gt;@forecast.TemperatureF&lt;/td&gt;\n\t\t&lt;td&gt;@forecast.Summary&lt;/td&gt;\n\t&lt;/tr&gt;\n}\n</code></pre>\n\n<p>The correct approach to using <code>IAsyncEnumerable</code> within a Blazor component comes down to three essential considerations:</p>\n\n<ol>\n  <li>A collection variable must first exist, as you’ll be appending to it, not replacing it altogether.</li>\n  <li>The <code>IAsyncEnumerable</code> must be awaited within an async component lifecycle method such as <code>OnInitializedAsync</code>.</li>\n  <li>The method <code>StateHasChanged</code> must be invoked to tell Blazor to flush HTML to the response. This can be after each\niteration or on some determined interval.</li>\n</ol>\n\n<p>Let’s see what that looks like in a sample. I’ve tweaked the <code>Weather.razor</code> sample that comes with the Blazor template.</p>\n\n<pre><code class=\"language-razor\">@page \"/weather\"\n@attribute [StreamRendering]\n\n&lt;PageTitle&gt;Weather&lt;/PageTitle&gt;\n\n&lt;h1&gt;Weather&lt;/h1&gt;\n\n&lt;p&gt;This component demonstrates showing data.&lt;/p&gt;\n\n@if (forecasts is { Count : 0 })\n{\n    &lt;p&gt;\n        &lt;em&gt;Loading...&lt;/em&gt;\n    &lt;/p&gt;\n}\nelse\n{\n    &lt;table class=\"table\"&gt;\n        &lt;thead&gt;\n        &lt;tr&gt;\n            &lt;th&gt;Date&lt;/th&gt;\n            &lt;th&gt;Temp. (C)&lt;/th&gt;\n            &lt;th&gt;Temp. (F)&lt;/th&gt;\n            &lt;th&gt;Summary&lt;/th&gt;\n        &lt;/tr&gt;\n        &lt;/thead&gt;\n        &lt;tbody&gt;\n        @foreach (var forecast in forecasts)\n        {\n            &lt;tr&gt;\n                &lt;td&gt;@forecast.Date.ToShortDateString()&lt;/td&gt;\n                &lt;td&gt;@forecast.TemperatureC&lt;/td&gt;\n                &lt;td&gt;@forecast.TemperatureF&lt;/td&gt;\n                &lt;td&gt;@forecast.Summary&lt;/td&gt;\n            &lt;/tr&gt;\n        }\n        &lt;/tbody&gt;\n    &lt;/table&gt;\n}\n\n@code {\n\t//1. the collection we'll be adding to\n    private readonly List&lt;WeatherForecast&gt; forecasts = new();\n\n    protected override async Task OnInitializedAsync()\n    {\n        forecasts.Clear();\n        // 2. invoking the IAsyncEnumerable implementation\n        await foreach (var forecast in GetForecasts())\n        {\n            forecasts.Add(forecast);\n            // 3. Calling StateHasChanged to flush\n            StateHasChanged();\n        }\n    }\n\n    static async IAsyncEnumerable&lt;WeatherForecast&gt; GetForecasts()\n    {\n        var startDate = DateOnly.FromDateTime(DateTime.Now);\n        var summaries = new[]\n        {\n            \"Freezing\", \"Bracing\", \"Chilly\",\n            \"Cool\", \"Mild\", \"Warm\", \"Balmy\",\n            \"Hot\", \"Sweltering\", \"Scorching\"\n        };\n\n        for (var index = 0; index &lt;= 5; index++)\n        {\n            await Task.Delay(1000);\n            yield return new WeatherForecast\n            {\n                Date = startDate.AddDays(index),\n                TemperatureC = Random.Shared.Next(-20, 55),\n                Summary = summaries[Random.Shared.Next(summaries.Length)]\n            };\n        }\n    }\n\n    private class WeatherForecast\n    {\n        public DateOnly Date { get; set; }\n        public int TemperatureC { get; set; }\n        public string? Summary { get; set; }\n        public int TemperatureF =&gt; 32 + (int)(TemperatureC / 0.5556);\n    }\n\n}\n</code></pre>\n\n<p>There you have it. You are now using an <code>IAsyncEnumerable</code> within stream rendering to get the most performance out of\nyour Blazor applications.</p>\n\n<h2 id=\"conclusion\">Conclusion</h2>\n\n<p>Streaming a response to the user can increase the perceived performance of your applications. Still, it’s important to\nremember that you also need to improve the performance of your dependencies to get the most out of this approach. While\nit may make your app more performant to stream HTML to the client as soon as possible, that effort can be undercut by a\nslow dependency such as a database or web service. Give it a try, and let me know what performance increases you see in\nyour applications.</p>\n\n<p>Thanks for reading and sharing my posts with friends and colleagues. Cheers.</p>\n\n",
      "Content": null,
      "Language": null,
      "Link": "https://khalidabuhakmeh.com/how-to-use-iasyncenumerable-with-blazor-stream-rendering"
    },
    {
      "FeedId": "https://khalidabuhakmeh.com/feed.xml",
      "ItemId": "https://khalidabuhakmeh.com/view-transitions-api-with-aspnet-core-and-htmx",
      "Title": "View Transitions API with ASP.NET Core and HTMX",
      "PublishDate": "2024-01-09T00:00:00+00:00",
      "Summary": "<p>I recently\nhosted <a href=\"https://youtu.be/Yb2eONhEE5k?si=yP66WI9SxvkpXkiM\">JetBrains JavaScript Day with guest speaker Fred K. Schott of Astro fame</a>,\nwho spoke about the View Transitions API being introduced in modern browsers. You should watch the video, which will\ngive you a primer for this blog post; frankly, it’s such an incredible presentation.</p>\n\n<p>In this post, we’ll explore how to mix three remarkable web technologies to get a fantastic user experience with little\nto no effort on your part. Of course, I’m speaking about using ASP.NET Core Razor Pages, HTMX, and View Transitions to\nsmooth the transition between pages and reduce the perceived performance of those hops between pages.</p>\n\n<p>Let’s get started.</p>\n\n<!--more-->\n\n<h2 id=\"what-are-view-transitions\">What are View Transitions?</h2>\n\n<p>View Transitions is a new approach that gives web designers more native-like animated transitions between navigation\nevents. These navigation events can be complete page transitions or elements moving from one part of the page to\nanother. As web developers, we can focus on performance practices while allowing the web platform to do a lot of the\nheavy lifting of animation.</p>\n\n<p>While I could explain the technical nitty-gritty of the View Transitions\nAPI, <a href=\"https://developer.chrome.com/docs/web-platform/view-transitions/\">Jake Archibald did an excellent job explaining it better than I ever could.</a></p>\n\n<p>In short, we can decide how a page visually transitions from one state to another using JavaScript and CSS animations.</p>\n\n<h2 id=\"why-htmx\">Why HTMX?</h2>\n\n<p>While an argument could be made that you don’t need HTMX here, there are a few reasons I recommend it when working with\nASP.NET Core Razor Pages.</p>\n\n<p>First, the <code>hx-boost</code> feature of HTMX allows us to squeeze more performance out of our page transitions. The <code>body</code>\nelement from a new request is swapped into our existing page, thus skipping the expensive step of parsing CSS and\nJavaScript resources.</p>\n\n<p>Second, since HTMX 1.9.0, we can specify an additional <code>transition:true</code> value on <code>hx-swap</code> attributes to opt in to view\ntransitions. This is simpler than the imperative style mentioned in the previous explainer above.</p>\n\n<p>Finally, HTMX brings more valuable approaches we’ll use as we build our ASP.NET Core application.</p>\n\n<h2 id=\"view-transition-sample\">View Transition Sample</h2>\n\n<p>Let’s first see this sample in action and walk through the steps necessary to get View Transitions into your\napplication.</p>\n\n<p><img src=\"https://github.com/khalidabuhakmeh/HtmxViewTransitions/raw/main/results.gif\" alt=\"example\" /></p>\n\n<p>Pretty cool. Each navigation performs a transition with a cool slide animation, which is commonly used in native-style\napplications. Additionally, the visual shell of the site does not animate but instead stays in place.</p>\n\n<p>Let’s walk through the steps to get this into your applications, and you’ll be surprised that no C# will be involved in\nthe following guide.</p>\n\n<p>The first step is to add HTMX to your <code>head</code> element. You can install HTMX via an asset package manager like NPM or a\nCDN provider. For simplicity, I’ve included the CDN version below.</p>\n\n<pre><code class=\"language-html\">&lt;script src=\"https://unpkg.com/htmx.org@1.9.8\"&gt;&lt;/script&gt;\n</code></pre>\n\n<p>Next, you’ll want to apply the <code>hx-boost</code> attribute to a container that has anchor tags as children. In the case of this\ndemo, I added the attribute to the <code>body</code> tag as I want all anchors to perform the View Transition animation.</p>\n\n<pre><code class=\"language-html\">&lt;body hx-boost=\"true\" hx-swap=\"transition:true\"&gt;\n</code></pre>\n\n<p>You’ll also notice the <code>body</code> tag has an <code>hx-swap</code> attribute with a <code>transition:true</code> value. This marks our element as\nthe root View Transition element.</p>\n\n<p>Finally, we need to add some CSS animations and values to our site’s stylesheet.</p>\n\n<pre><code class=\"language-css\">@keyframes fade-in {\n  from { opacity: 0; }\n}\n\n@keyframes fade-out {\n  to { opacity: 0; }\n}\n\n@keyframes slide-from-right {\n  from { transform: translateX(90px); }\n}\n\n@keyframes slide-to-left {\n  to { transform: translateX(-90px); }\n}\n\n/* define animations for the old and new content */\n::view-transition-old(slide-it) {\n  animation: 180ms cubic-bezier(0.4, 0, 1, 1) both fade-out,\n  600ms cubic-bezier(0.4, 0, 0.2, 1) both slide-to-left;\n}\n::view-transition-new(slide-it) {\n  animation: 420ms cubic-bezier(0, 0, 0.2, 1) 90ms both fade-in,\n  600ms cubic-bezier(0.4, 0, 0.2, 1) both slide-from-right;\n}\n\nbody {\n  margin-bottom: 60px;\n  view-transition-name: slide-it;\n}\n\n.navbar {\n  view-transition-name: main-header-text;\n  animation: none;\n  mix-blend-mode: normal;\n}\n\nfooter {\n  view-transition-name: footer;\n  animation: none;\n  mix-blend-mode: normal;\n}\n</code></pre>\n\n<p>We’ve created some basic animations that we apply to each element. Each rule must get a unique <code>view-transition-name</code>\nvalue so that the View Transitions API knows how to identify each element uniquely.</p>\n\n<p>That’s it! We now have the implementation of the example you saw previously.</p>\n\n<h2 id=\"conclusion\">Conclusion</h2>\n\n<p>It’s shockingly simple to get a pleasant native-like experience in your ASP.NET Core applications with a bit of HTMX and\ntake advantage of the advancements in the web platform. The View Transitions API is still experimental and not fully\nsupported across all browsers, but most Chromium-based browsers and Firefox already support it.</p>\n\n<p>If you’d like to run this sample on your development\nenvironment, <a href=\"https://github.com/khalidabuhakmeh/HtmxViewTransitions/tree/main\">I’ve created a GitHub repository where you can clone and try it</a>.</p>\n\n<p>Thank you for reading my blog posts and sharing them with colleagues. Cheers.</p>\n\n<h3 id=\"references\">References</h3>\n\n<ul>\n  <li><a href=\"https://htmx.org/essays/view-transitions/\">HTMX View Transitions Example</a></li>\n  <li><a href=\"https://developer.chrome.com/docs/web-platform/view-transitions/\">Smooth and simple transitions with the View Transitions API</a></li>\n  <li><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/view-transition-name\">view-transition-name</a></li>\n  <li><a href=\"https://youtu.be/Yb2eONhEE5k?si=yP66WI9SxvkpXkiM\">JetBrains JavaScript Day with guest speaker Fred K. Schott</a></li>\n</ul>\n",
      "Content": null,
      "Language": null,
      "Link": "https://khalidabuhakmeh.com/view-transitions-api-with-aspnet-core-and-htmx"
    },
    {
      "FeedId": "https://khalidabuhakmeh.com/feed.xml",
      "ItemId": "https://khalidabuhakmeh.com/how-to-write-a-dotnet-markdig-extension-for-markdown-processing",
      "Title": "How to Write a .NET Markdig Extension for Markdown Processing",
      "PublishDate": "2024-01-02T00:00:00+00:00",
      "Summary": "<p>Markdown is a powerful writing format with simplicity at its core. It’s no surprise that it is as popular as it is since\nit can help authors focus more on the art of writing rather than the aesthetics of their work. While there is a standard\nspecification for the language, there are extensions to the Markdown syntax that can enhance the authoring experience in\nniche contexts. For example, LaTex support for mathematics, improved media support for online services like YouTube, and\ndiagram support via Mermaid for all aspiring software architects.</p>\n\n<p>With Markdown, if you can write it, you can parse and translate it to a desired output. In this post, we’ll explore\nthe <a href=\"https://github.com/xoofx/markdig\">Markdig</a> library by author <a href=\"https://github.com/xoofx\">Alexandre Mutel</a>, which is\n.NET’s fastest and most powerful CommonMark-compliant Markdown parser. Most importantly, it’s also extensible!</p>\n\n<!--more-->\n\n<h2 id=\"what-is-markdown-and-markdig\">What is Markdown and Markdig?</h2>\n\n<p>For folks new to Markdown, it is a text-based format used to help writers focus on the structure and content of their\nwork rather than the aesthetics of the work.</p>\n\n<p>Aesthetics include font choices, colors, font sizing, and overall layout concerns. While aesthetics can help tell a more\nimmersive story, they can hinder the writing process if introduced too early.</p>\n\n<p><a href=\"https://www.markdownguide.org/\">Markdown</a> focuses on some familiar structural writing tropes and allows you to express\nthem using simplified structures and symbols amongst code. These include headers, links, emphasis, lists, and more.\nMarkdown gets its name because, typically, the format is converted into markup, also known as HTML. Although, Markdown\ncan have many targets, including PDFs, presentation slides, and much more. Your imagination is the limit.</p>\n\n<p>As the introduction mentions, <a href=\"https://github.com/xoofx/markdig\">Markdig</a> is a .NET library aimed at helping developers\nprocess and transform markdown files. It’s a drop-in and ready library for most needs but also has extensibility\noptions.</p>\n\n<h2 id=\"writing-a-markdig-inline-parser-extension\">Writing a Markdig Inline Parser Extension</h2>\n\n<p>There are three parts to writing an extension for Markdig: Markdown syntax, the processing pipeline, and the syntax\nparser. We’ll walk through all three parts and why they are essential. Let’s start with first describing the intent of\nour extension.</p>\n\n<p>Given the following syntax, we want to parse any matching token and replace it with a GitHub username link.</p>\n\n<pre><code class=\"language-markdown\">this is a link to [github:khalidabuhakmeh]  \nand [github:maartenba]\n</code></pre>\n\n<p>with a resulting output of HTML.</p>\n\n<pre><code class=\"language-html\">&lt;p&gt;this is a link to &lt;a href=\"https://github.com/khalidabuhakmeh\"/&gt;khalidabuhakmeh&lt;/a&gt;\nand &lt;a href=\"https://github.com/maartenba\"/&gt;maartenba&lt;/a&gt;&lt;/p&gt;\n</code></pre>\n\n<p>To parse this with markdown with Markdig, you must first install the NuGet package <code>Markdig</code>.</p>\n\n<pre><code class=\"language-text\">dotnet add package Markdig\n</code></pre>\n\n<p>Next, we’ll need to set up a <code>MarkdownPipeline</code> using a <code>MarkdownPipelineBuilder</code>.</p>\n\n<pre><code class=\"language-csharp\">using System.Text.RegularExpressions;\nusing Markdig;\nusing Markdig.Helpers;\nusing Markdig.Parsers;\nusing Markdig.Renderers;\nusing Markdig.Syntax.Inlines;\n\nvar pipeline = new MarkdownPipelineBuilder()\n    .Use&lt;GitHubUserProfileExtension&gt;()\n    .Build();\n\nvar html = Markdown\n    .ToHtml(\"\"\"\n            this is a link to [github:khalidabuhakmeh]\n            and [github:maartenba]\n            \"\"\", pipeline);\n\nConsole.WriteLine(html);\n</code></pre>\n\n<p>The pipeline is a series of syntax parsers that run over the markdown document, switching out the syntax for the final\noutput.</p>\n\n<p>You’ll notice the mention of <code>GitHubUserProfileExtension</code> when building the pipeline. This is our new extension. Let’s\ntake a look at the implementation.</p>\n\n<pre><code class=\"language-csharp\">public class GitHubUserProfileExtension : IMarkdownExtension\n{\n    public void Setup(MarkdownPipelineBuilder pipeline)\n    {\n        if (!pipeline.InlineParsers.Contains&lt;GitHubUserProfileParser&gt;())\n        {\n            pipeline.InlineParsers.Insert(0, new GitHubUserProfileParser());\n        }\n    }\n\n    public void Setup(MarkdownPipeline pipeline, IMarkdownRenderer renderer)\n    {\n    }\n}\n</code></pre>\n\n<p>The extension class is the opportunity to add the <code>GitHubUserProfileParser</code> to the collection of <code>InlineParsers</code>.\nParsers take incoming markdown syntax and process the value to its final result.</p>\n\n<p>In my case, I insert the new parser at the beginning of the collection. Parsers execute in the order they are\nregistered. Since I’m reusing the syntax of a link in Markdown, I want to ensure I can process the token before any\nother parser does. If your parser operates on unique syntax, you can add the parser anywhere in the collection.</p>\n\n<p>Now, let’s get to the parser.</p>\n\n<pre><code class=\"language-csharp\">public partial class GitHubUserProfileParser : InlineParser\n{\n    public GitHubUserProfileParser()\n    {\n        OpeningCharacters = new[] { '[' };\n    }\n    \n    public override bool Match(InlineProcessor processor, ref StringSlice slice)\n    {\n        var precedingCharacter = slice.PeekCharExtra(-1);\n        if (!precedingCharacter.IsWhiteSpaceOrZero())\n        {\n            return false;\n        }\n        \n        var regex = GithubTagRegex();\n        var match = regex.Match(slice.ToString());\n        \n        if (!match.Success)\n        {\n            return false;\n        }\n        \n        var username = match.Groups[\"username\"].Value;\n        var literal = $\"&lt;a href=\\\"https://github.com/{username}\\\"/&gt;{username}&lt;/a&gt;\";\n        \n        processor.Inline = new HtmlInline(literal)\n        {\n            Span =\n            {\n                Start = processor.GetSourcePosition(slice.Start, out var line, out var column)\n            },\n            Line = line,\n            Column = column,\n            IsClosed = true\n        };\n        processor.Inline.Span.End = processor.Inline.Span.Start + match.Length - 1;\n        slice.Start += match.Length;\n        return true;\n    }\n\n    [GeneratedRegex(@\"\\[github:(?&lt;username&gt;\\w+)]\")]\n    private static partial Regex GithubTagRegex();\n}\n</code></pre>\n\n<p>There are a few crucial elements to a parser, but none more critical than the <code>OpeningCharacters</code> collection. These\ncharacters are what trigger entry into the <code>Match</code> method. Without setting this value, your parser will be responsible\nfor parsing <strong>all the text</strong>. I made this mistake, but Alexandre Mutel was kind enough to point out my mistake.</p>\n\n<p>Next, in the <code>Match</code> method, we get a reference to a <code>StringSlice</code>, which allows us to check if we’ve matched our\nexpected token. You can look forward and backward here in the provided string, or my case, use a\nsource-generated <code>Regex</code> to match the token.</p>\n\n<p>Once matched, you can create an inline representation of the value to be replaced. I want to replace the token with an\nanchor tag pointing to a user’s GitHub profile. You also need to calculate where the token begins and ends, and you can\ndo that using the <code>GetSourcePosition</code> method.</p>\n\n<p>I also make sure that I set <code>IsClosed</code> to <code>true</code>. This lets other parsers know that I’ve handled this token and that\nthey should not attempt to modify the token. This depends on your use case, but for this one, this is the end of\nprocessing for this token.</p>\n\n<p>Finally, we set the <code>slice.Start</code> position after the token so we don’t keep processing it. If you’re experiencing an\nexception with a “The parser is in an invalid infinite loop” message, you’ve likely forgotten to move the starting\nposition past the current token.</p>\n\n<p>It’s that easy! Here’s the complete sample in its entirety.</p>\n\n<pre><code class=\"language-csharp\">using System.Text.RegularExpressions;\nusing Markdig;\nusing Markdig.Helpers;\nusing Markdig.Parsers;\nusing Markdig.Renderers;\nusing Markdig.Syntax.Inlines;\n\nvar pipeline = new MarkdownPipelineBuilder()\n    .Use&lt;GitHubUserProfileExtension&gt;()\n    .Build();\n\nvar html = Markdown\n    .ToHtml(\"\"\"\n            this is a link to [github:khalidabuhakmeh]\n            and [github:maartenba]\n            \"\"\", pipeline);\n\nConsole.WriteLine(html);\n\npublic class GitHubUserProfileExtension : IMarkdownExtension\n{\n    public void Setup(MarkdownPipelineBuilder pipeline)\n    {\n        if (!pipeline.InlineParsers.Contains&lt;GitHubUserProfileParser&gt;())\n        {\n            pipeline.InlineParsers.Insert(0, new GitHubUserProfileParser());\n        }\n    }\n\n    public void Setup(MarkdownPipeline pipeline, IMarkdownRenderer renderer)\n    {\n    }\n}\n\npublic partial class GitHubUserProfileParser : InlineParser\n{\n    public GitHubUserProfileParser()\n    {\n        OpeningCharacters = new[] { '[' };\n    }\n    \n    public override bool Match(InlineProcessor processor, ref StringSlice slice)\n    {\n        var precedingCharacter = slice.PeekCharExtra(-1);\n        if (!precedingCharacter.IsWhiteSpaceOrZero())\n        {\n            return false;\n        }\n        \n        var regex = GithubTagRegex();\n        var match = regex.Match(slice.ToString());\n        \n        if (!match.Success)\n        {\n            return false;\n        }\n        \n        var username = match.Groups[\"username\"].Value;\n        var literal = $\"&lt;a href=\\\"https://github.com/{username}\\\"/&gt;{username}&lt;/a&gt;\";\n        \n        processor.Inline = new HtmlInline(literal)\n        {\n            Span =\n            {\n                Start = processor.GetSourcePosition(slice.Start, out var line, out var column)\n            },\n            Line = line,\n            Column = column,\n            IsClosed = true\n        };\n        processor.Inline.Span.End = processor.Inline.Span.Start + match.Length - 1;\n        slice.Start += match.Length;\n        return true;\n    }\n\n    [GeneratedRegex(@\"\\[github:(?&lt;username&gt;\\w+)]\")]\n    private static partial Regex GithubTagRegex();\n}\n</code></pre>\n\n<h2 id=\"conclusion\">Conclusion</h2>\n\n<p>I love Markdown, and Markdig helps .NET developers embrace the wonders of the specification. The extensibility of\nMarkdig also allows .NET developers to go beyond the CommonMark specification and build unique Markdown flavors for\ntheir specific purpose. As you’ve seen, it only takes a few classes to extend the functionality of a markdown document\nbeyond the already impressive extensions included with Markdig.</p>\n\n<p>I hope you enjoyed this post, and thanks to <a href=\"https://github.com/xoofx\">Alexandre Mutel</a> and other Markdig contributors\nfor their fantastic work. Thanks for reading and sharing my posts with friends and colleagues.</p>\n",
      "Content": null,
      "Language": null,
      "Link": "https://khalidabuhakmeh.com/how-to-write-a-dotnet-markdig-extension-for-markdown-processing"
    },
    {
      "FeedId": "https://khalidabuhakmeh.com/feed.xml",
      "ItemId": "https://khalidabuhakmeh.com/faster-dotnet-database-integration-tests-with-respawn-and-xunit",
      "Title": "Faster .NET Database Integration Tests with Respawn and xUnit",
      "PublishDate": "2023-12-26T00:00:00+00:00",
      "Summary": "<p>The nuances of data access are myriad, so when writing tests around complex data scenarios, I recommend just working\nwith the actual database. Over time, you’ll find yourself with more valuable tests but, often, relatively slower tests\ncompared to their in-memory alternatives. Like all things, there are trade-offs, but you can still strategize in making\nyour tests faster.</p>\n\n<p>In this post, I’ll show you how to take advantage of xUnit class fixtures and the OSS library Respawn to manage the\nstate of your database across tests. This will help speed up your tests when faster steps replace a few expensive ones.</p>\n\n<!--more-->\n\n<h2 id=\"what-is-respawn\">What is Respawn?</h2>\n\n<p><a href=\"https://github.com/jbogard/Respawn?tab=readme-ov-file\">Respawn</a> is a utility library designed to help developers reset\ndatabases to an “initial state”. With some configuration, Respawn can intelligently reset a database for testing use\ncases.</p>\n\n<p>Other strategies might employ complete database tear-downs, complex transaction management, or expensive Docker\ncontainerization strategies. When mixed with your database management strategy around database migrations, look-up\ntables, and other stateful database elements, the overhead can compound over time and hurt the developer feedback loop\nmany crave from an excellent test suite.</p>\n\n<p>Respawn allows you to choose which tables and schemas to ignore in the reset process.</p>\n\n<pre><code class=\"language-csharp\">var respawner = await Respawner.CreateAsync(connection, new RespawnerOptions\n{\n    TablesToIgnore = new Table[]\n    {\n        \"sysdiagrams\",\n        \"tblUser\",\n        \"tblObjectType\",\n        new Table(\"MyOtherSchema\", \"MyOtherTable\")\n    },\n    SchemasToExclude = new []\n    {\n        \"RoundhousE\"\n    }\n});\n</code></pre>\n\n<p>It also supports multiple database providers, including Microsoft SQL Server, Postgres, MySQL, Oracle, and Informix.</p>\n\n<p>Using xUnit fixtures (which we’ll see later), you only need to call a single method to reset the database.</p>\n\n<pre><code class=\"language-csharp\">await respawner.ResetAsync(\"MyConnectionStringName\");\n</code></pre>\n\n<p>After every reset, your database will return to its initial state and be ready for another round of test assertions.</p>\n\n<h2 id=\"xunit-respawn-fixture\">xUnit ReSpawn Fixture</h2>\n\n<p>I’ve created <a href=\"https://github.com/khalidabuhakmeh/respawn-sample\">a sample Respawn and xUnit project</a> with all the code\nin this blog post so you can try it out in your development environment.</p>\n\n<p>For folks following along in the post, I’m using a <code>GlobalUsing.cs</code> file for namespaces and some C# 12 (.NET 8)\nfeatures. Here are the required namespaces.</p>\n\n<pre><code class=\"language-csharp\">global using Dapper;\nglobal using Dapper.Contrib.Extensions;\nglobal using Microsoft.Data.SqlClient;\nglobal using Respawn;\nglobal using Xunit;\nglobal using Xunit.Abstractions;\n</code></pre>\n\n<p>When working with Respawn, you’ll need a fixture. In the world of xUnit, fixtures are shared resources across test\nclasses. In the case of this sample, we’ll create a <code>DatabaseFixture</code>, which will manage the database using\na <code>Respawner</code> instance.</p>\n\n<pre><code class=\"language-csharp\">namespace Spawn;\n\n// ReSharper disable once ClassNeverInstantiated.Global\npublic class DatabaseFixture : IAsyncLifetime\n{\n    private const string DatabaseName = \"test\";\n    \n    private readonly Dictionary&lt;string, string&gt; connectionStrings = new()\n    {\n        { DatabaseName, $\"Data Source=localhost,11433;Database={DatabaseName};User Id=sa;Password=Pass123!;Encrypt=FALSE;\" },\n        { \"master\", \"Data Source=localhost,11433;Database=master;User Id=sa;Password=Pass123!;Encrypt=FALSE;\" }\n    };\n\n    public async Task&lt;SqlConnection&gt; GetOpenConnectionAsync(string databaseName = DatabaseName)\n    {\n        var sqlConnection = new SqlConnection(connectionStrings[databaseName]);\n        await sqlConnection.OpenAsync();\n        return sqlConnection;\n    }\n\n    private Respawner respawn = null!;\n\n    public async Task InitializeAsync()\n    {\n        await MigrateAsync();\n\n        respawn = await Respawner.CreateAsync(connectionStrings[DatabaseName],\n            new RespawnerOptions\n            {\n                DbAdapter = DbAdapter.SqlServer\n            });\n    }\n\n    private async Task MigrateAsync()\n    {\n        // only doing this for the sample,\n        // you'll likely already have the database created somewhere\n        {\n            try\n            {\n                await using var connection = await GetOpenConnectionAsync(\"master\");\n                await connection.ExecuteAsync(\n                    // lang=SQL\n                    $\"\"\"\n                     IF NOT EXISTS (SELECT [name] FROM sys.databases WHERE [name] = N'{DatabaseName}')\n                        CREATE DATABASE {DatabaseName};\n                     \"\"\"\n                );\n            }\n            catch (SqlException e)\n            {\n                throw new Exception(\"Create and run the container found in the docker-compose.yml\", e);\n            }\n        }\n\n        {\n            await using var connection = await GetOpenConnectionAsync();\n            await connection.ExecuteAsync(\n                // lang=SQL\n                \"\"\"\n                IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[People]') AND type in (N'U'))\n                  BEGIN\n                      CREATE TABLE People\n                      (\n                          ID INT PRIMARY KEY IDENTITY,\n                          FirstName NVARCHAR(50),\n                          LastName NVARCHAR(50),\n                          Age INT,\n                          Email NVARCHAR(255)\n                      );\n                  END;\n                \"\"\");\n        }\n            \n    }\n\n    public Task ResetAsync()\n        =&gt; respawn.ResetAsync(connectionStrings[DatabaseName]);\n\n    public async Task DisposeAsync()\n    {\n        await using var connection = await GetOpenConnectionAsync(\"master\");\n        await connection.ExecuteAsync(\n            // lang=SQL\n            $\"\"\"\n            IF EXISTS (SELECT [name] FROM sys.databases WHERE [name] = N'{DatabaseName}')\n            BEGIN\n                ALTER DATABASE {DatabaseName}\n                SET SINGLE_USER -- Disallow multi-user access.\n                WITH ROLLBACK IMMEDIATE -- Rollback any transaction in progress.\n                DROP DATABASE {DatabaseName};\n            END;\n            \"\"\"\n        );\n    }\n}\n</code></pre>\n\n<p>We must utilize the <code>IAsyncLifetime</code> interface in xUnit to call Respawn’s asynchronous methods. I’ve also added a helper\nmethod of <code>GetOpenConnectionAsync</code> to make it easier to write tests using the fixture.</p>\n\n<p>Note that the migration strategy in the fixture does not use any particular approach commonly found in the .NET\necosystem. You’ll likely use EF Core migrations, Roundhouse, DbUp, or another migration strategy. Adjust the code for\nyour particular use case. I’ve also taken the steps to create the database if it does not currently exist. Creating the\ndatabase might be optional based on your development environment.</p>\n\n<p>Now let’s use our fixture in a new test class.</p>\n\n<pre><code class=\"language-csharp\">namespace Spawn;\n\npublic class RespawnTests(DatabaseFixture database, ITestOutputHelper output)\n    : IClassFixture&lt;DatabaseFixture&gt;, IAsyncLifetime\n{\n    [Fact]\n    public async Task Can_Insert_Person_Into_People()\n    {\n        await using var connection = await database.GetOpenConnectionAsync();\n        await connection.InsertAsync&lt;Person&gt;(new()\n        {\n            FirstName = \"Khalid\",\n            LastName = \"Abuhakmeh\",\n            Age = 40,\n            Email = \"khalid@example.com\"\n        });\n\n        var person = await connection.QueryFirstAsync&lt;Person&gt;(\"select top 1 * from people\");\n        var total = await connection.ExecuteScalarAsync(\"select count(ID) from People\");\n\n        output.WriteLine($\"{person.FirstName} says hi!\");\n\n        Assert.NotNull(person);\n        Assert.Equal(expected: 1, actual: total);\n    }\n\n    [Fact]\n    public async Task People_Table_Is_Always_Empty()\n    {\n        await using var connection = await database.GetOpenConnectionAsync();\n        var person = await connection.QueryFirstOrDefaultAsync&lt;Person&gt;(\"select top 1 * from people\");\n        Assert.Null(person);\n    }\n\n    public Task InitializeAsync()\n        =&gt; Task.CompletedTask;\n\n    public Task DisposeAsync()\n        =&gt; database.ResetAsync();\n}\n</code></pre>\n\n<p>We use the <code>IAsyncLifetime</code> interface again to ensure that our database is reset after each test is run. In\nthe <code>DisposeAsync</code> method, we invoke the fixture’s <code>ResetAsync</code> method, which resets our database to its initial state.\nThat’s it! Easy peasy.</p>\n\n<p>On my development machine, the total time of the tests is about <code>250ms</code>, with the bulk of the time spent creating and\ntearing down my database for the sample. In your use case, you can cut the cost of database creation and teardown by\ncreating the database outside the scope of the class fixture.</p>\n\n<h2 id=\"conclusion\">Conclusion</h2>\n\n<p>With Respawn and xUnit class fixtures, you can significantly improve your integration test performance and get a tighter\nfeedback loop. You also get the added value of knowing your code is testing against the “real” thing. Integration tests\ncan help catch behavioral changes in the underlying database technology and find issues with queries, and database\nfeatures you’d otherwise miss when working with stubs.</p>\n\n<p>I hope you found this post helpful, and please give the sample a try. I’ve set it up so you can run through this sample\nin seconds, and it should give you a great jumping-off point.</p>\n\n<p>Thanks for reading and sharing my posts with friends and colleagues. Cheers.</p>\n",
      "Content": null,
      "Language": null,
      "Link": "https://khalidabuhakmeh.com/faster-dotnet-database-integration-tests-with-respawn-and-xunit"
    },
    {
      "FeedId": "https://khalidabuhakmeh.com/feed.xml",
      "ItemId": "https://khalidabuhakmeh.com/memoizr-declarative-structured-concurrency-for-csharp",
      "Title": "MemoizR - Declarative Structured Concurrency for C#",
      "PublishDate": "2023-12-19T00:00:00+00:00",
      "Summary": "<p>Recently, I’ve been focusing on the front-end side of building web applications with topics like React Hooks and Angular\nSignals. It’s a fascinating data model that can make working with data dependency graphs much more straightforward.</p>\n\n<p>To my surprise, other folks in the .NET community have also been inspired by the work happening in the frontend space.\nWhile scanning NuGet, I found <a href=\"https://github.com/timonkrebs/MemoizR\">MemoizR</a>, a library that takes inspiration from\nthe frontend world to bring the concept of dynamic lazy memoization to .NET developers.</p>\n\n<p>In this post, we’ll see a short example using the library and explain the sample output. Let’s go!</p>\n\n<!--more-->\n\n<h2 id=\"what-is-memoizr\">What is MemoizR?</h2>\n\n<p>According to the author, Timon Krebs, MemoizR is a declarative structured concurrency implementation for .NET that\nsimplifies (and enhances) standard data flow methods across multiple threads. These methods include error handling,\nbranching logic, and data mutation. Doing so helps developers manage concurrency more efficiently for simple to complex\nmulti-thread scenarios.</p>\n\n<p>Critical features of MemoizR include dynamic lazy memoization, which determines if values need to be reevaluated.\nAnother feature is declarative structured concurrency, which makes building and handling scenarios more straightforward.\nRegarding scenarios, MemoizR also builds a dependency graph, which helps reduce unnecessary computations if a particular\nbranch has not been affected by changes. These features also lead to automatic synchronization and improved overall\nperformance.</p>\n\n<p>Let’s look at an example application.</p>\n\n<h2 id=\"hello-memoizr-sample\">Hello MemoizR Sample</h2>\n\n<p>To start with MemoizR, you must install the latest version into a new Console project. As of this post, MemoizR is still\nin prerelease, so you should enable prerelease visibility in your NuGet tool window. You may also run the following\ncommand.</p>\n\n<pre><code>dotnet add package MemoizR --version 0.1.0-rc4\n</code></pre>\n\n<p>Once you install the dependency, paste the following code into the <code>Program.cs</code> file of the project.</p>\n\n<pre><code class=\"language-csharp\">using MemoizR;\n\nvar f = new MemoFactory();\n\nvar one = f.CreateSignal(2);\nvar two = f.CreateSignal(2);\n\nvar squareOne = f.CreateMemoizR(async () =&gt;\n{\n    var value = await one.Get();\n    Console.WriteLine($\"Square One: {value}\");\n    return Math.Pow(value, 2);\n});\n\nvar squareTwo = f.CreateMemoizR(async () =&gt;\n{\n    var value = await two.Get();\n    Console.WriteLine($\"Square Two: {value}\");\n    return Math.Pow(value, 2);\n});\n\nvar final = f.CreateMemoizR(async () =&gt;\n{\n    var result = await squareOne.Get() + await squareTwo.Get();\n    Console.WriteLine(\"Add Squares\");\n    return result;\n});\n\n\nwhile (true)\n{\n    Console.Write($\"Set one (current: {await one.Get()}):\");\n    var user1 = Console.ReadLine();\n    if (user1 is not null &amp;&amp; int.TryParse(user1, out var value)) {\n        await one.Set(value);\n    }\n    \n    Console.Write($\"Set two (current: {await two.Get()}):\");\n    var user2 = Console.ReadLine();\n    if (user2 is not null &amp;&amp; int.TryParse(user2, out value)) {\n        await two.Set(value);\n    }\n\n    var result = await final.Get();\n    Console.WriteLine($\"Result is {result}.\\n\");\n}\n</code></pre>\n\n<p>This sample aims to show the dependency graph in action by changing the values of <code>one</code> and <code>two</code>. We’ll execute the\nfollowing scenarios from this app:</p>\n\n<ol>\n  <li>Initial run</li>\n  <li>Change the value of <code>one</code> and not <code>two</code></li>\n  <li>Change the value of <code>two</code> and not <code>one</code></li>\n  <li>Change no values.</li>\n</ol>\n\n<p>We should see the following outputs reflecting which parts of the graph were executed.</p>\n\n<p>Let’s start with the initial run’s output.</p>\n\n<pre><code class=\"language-text\">Set one (current: 2):\nSet two (current: 2):\nSquare One: 2\nSquare Two: 2\nAdd Squares\nResult is 8.\n</code></pre>\n\n<p>You can see all parts of our graph executed. Now, let’s only change the value of <code>one</code>. You’ll notice only half of the\ngraph dependent on the <code>one</code> value is executed.</p>\n\n<pre><code class=\"language-text\">Set one (current: 2):3\nSet two (current: 2):\nSquare One: 3\nAdd Squares\nResult is 13.\n</code></pre>\n\n<p>Now let’s only change <code>two</code>. We should see the opposite is true.</p>\n\n<pre><code class=\"language-text\">Set one (current: 3):\nSet two (current: 2):1\nSquare Two: 1\nAdd Squares\nResult is 10.\n</code></pre>\n\n<p>Finally, let’s not change any values. Our graph should not execute any nodes, as it’s value is unchanged.</p>\n\n<pre><code class=\"language-text\">Set one (current: 3):\nSet two (current: 1):\nResult is 10.\n</code></pre>\n\n<p>Cool!</p>\n\n<h2 id=\"conclusion\">Conclusion</h2>\n\n<p>This library is still early but shows much promise for building complex multi-threaded scenarios where elements may or\nmay not change. As you say in the sample, the code is easy to follow and the flow is easily modifiable. I think the\nauthor has something interesting here and I hope to see how they evolve it over time.</p>\n\n<p>I hope you give MemoizR a try and let me know what you think. As always, thanks for reading and sharing my posts.\nCheers :)</p>\n",
      "Content": null,
      "Language": null,
      "Link": "https://khalidabuhakmeh.com/memoizr-declarative-structured-concurrency-for-csharp"
    },
    {
      "FeedId": "https://khalidabuhakmeh.com/feed.xml",
      "ItemId": "https://khalidabuhakmeh.com/testing-typesense-search-with-testcontainers-and-dotnet",
      "Title": "Testing Typesense search with Testcontainers and .NET",
      "PublishDate": "2023-12-12T00:00:00+00:00",
      "Summary": "<p>Search is an essential part of any modern application. Without a first-class emphasis on great search, many applications\naren’t much better than a spreadsheet. Luckily for application developers, we’re spoiled for options for delivering an\nexcellent search experience to our users. One of the options I’ve been playing with recently is Typesense, which aims to\nbe an open-source alternative to commercial-service Algolia.</p>\n\n<p>In this post, we’ll look at how you can play around with Typesense within the context of .NET using Testcontainers.\nTestcontainers is a library that makes spinning up containers so simple you’ll wonder how you ever lived without it.\nLet’s get started.</p>\n\n<!--more-->\n\n<h2 id=\"what-is-typesense\">What is Typesense</h2>\n\n<p>Search is challenging to get right, with many commercial options. The most notable commercial offerings include\nElasticsearch and Algolia, which come with licensing costs or are search-as-a-service solutions. While great choices in\ntheir own right, the options might not fit your particular goals for finding a search\nsolution. <a href=\"https://typesense.org/\">Typesense</a> is an open-source alternative to the aforementioned options, with many\ngreat features developers expect from a search provider.</p>\n\n<p>Typesense provides development teams with a search engine that can perform search-as-you-type, autocomplete, faceted\nnavigation, geo-search, recommendations, and more. Developers can also run Typesense within a docker container within\ntheir organization’s infrastructure. There are also SDKs for most languages that make managing a search index easier\nfrom within your technology stack of choice. For folks reading this post, yes, there is a .NET SDK too.</p>\n\n<p>Typesense operates on a “batteries-included” philosophy, hoping to give developers all the essential features they need\nright out of the box. This means you can get a “good enough” experience within minutes while having the ability to\nfine-tune the experience over time.</p>\n\n<p>To take Typesense for a test drive, we’ll use Testcontainers to spin up an instance of the search provider and poke at\nit.</p>\n\n<h2 id=\"what-is-testcontainers\">What is Testcontainers</h2>\n\n<p><a href=\"https://testcontainers.com/\">Testcontainers</a> is an open-source framework for providing lightweight and disposable\ninstances of any imaginable dependency that can run within a Docker container. You can test against the actual\ntechnology and avoid mocks and stubs altogether. This framework has a first-class .NET library to allow any developer to\npull a Docker image, configure a container instance, run it, and dispose of it.</p>\n\n<p>The following section, we will set up a unit test class using xUnit, Testcontainers, and Typesense.</p>\n\n<h2 id=\"xunit-testcontainers-and-typesense-sample\">xUnit, Testcontainers, and Typesense sample</h2>\n\n<p><strong>Note: The samples are using newer C# language features like primary constructors and target-type inference. If the\ncode doesn’t compile, you likely need set your language version to a newer version or adapt the code.</strong></p>\n\n<p>We’ll need to create a new xUnit class library with the following dependencies: <code>Testcontainers</code>, <code>Typesense</code>,\nand <code>xUnit</code>. Once these dependencies are added to the class library, we can start by creating a <code>TypesenseFixture</code>\nclass.</p>\n\n<p>The <code>TypesenseFixture</code> class will create the container and the configuration needed to connect to our container\ninstance.</p>\n\n<pre><code class=\"language-csharp\">using DotNet.Testcontainers.Builders;\nusing DotNet.Testcontainers.Containers;\nusing Microsoft.Extensions.Options;\nusing Typesense;\nusing Typesense.Setup;\nusing Xunit;\n\nnamespace TypesenseWithTestcontainer;\n\npublic class TypesenseFixture: IAsyncLifetime\n{\n    private const int ContainerPort = 8108;\n    private const string ApiKey = \"typesense-api-key\";\n\n    public TypesenseFixture()\n    {\n        TypesenseContainer = new ContainerBuilder()\n            .WithImage(\"typesense/typesense:0.25.1\")\n            .WithPortBinding(ContainerPort, true)\n            .WithEnvironment(\"TYPESENSE_API_KEY\", ApiKey)\n            .WithEnvironment(\"TYPESENSE_DATA_DIR\", \"/tmp\")\n            .WithWaitStrategy(Wait.ForUnixContainer()\n                .UntilHttpRequestIsSucceeded(r =&gt; r\n                    .ForPort(ContainerPort)\n                    .ForPath(\"/health\")\n                    .WithHeader(\"TYPESENSE-API-KEY\", ApiKey)\n                )\n            )\n            .Build();\n    }\n\n    public Config ConnectionConfig { get; private set; }\n    public IContainer TypesenseContainer { get; }\n\n    public TypesenseClient GetClient()\n    {\n        var options = new OptionsWrapper&lt;Config&gt;(ConnectionConfig);\n        var client = new TypesenseClient(options, new HttpClient());\n        return client;\n    }\n\n    public async Task InitializeAsync()\n    {\n        await TypesenseContainer.StartAsync();\n        \n        var port = TypesenseContainer\n            .GetMappedPublicPort(ContainerPort)\n            .ToString();\n        \n        ConnectionConfig = new Config(\n            new Node[] { new(TypesenseContainer.Hostname, port) },\n            ApiKey\n        );\n    }\n\n    public Task DisposeAsync()\n        =&gt; TypesenseContainer.DisposeAsync().AsTask();\n}\n</code></pre>\n\n<p>Essential steps that are happening in the use of <code>ContainerBuilder</code>:</p>\n\n<ol>\n  <li>We set the image name for <code>typesense/typesense:0.25.1</code>. This name matches an image in the Docker image registry.</li>\n  <li>We bind the internal port <code>8081</code> to a random port on our host.</li>\n  <li>We set the environment variables of <code>TYPESENSE_API_KEY</code> and <code>TYPESENSE_DATA_DIR</code>. These variables are required to\nstart up the container successfully.</li>\n  <li>We wait for Typesense to start by repeatedly hitting the <code>/health</code> endpoint until the response is successful.</li>\n</ol>\n\n<p>Once the container has started successfully, we can use the container information to produce a Typesense configuration\nfor our client.</p>\n\n<p>Our first step is to see if we can call our instance of Typesense.</p>\n\n<pre><code class=\"language-csharp\">using System.Text.Json.Serialization;\nusing Typesense;\nusing Xunit;\nusing Xunit.Abstractions;\n\nnamespace TypesenseWithTestcontainer;\n\npublic class TypesenseTests(TypesenseFixture fixture, ITestOutputHelper output) :\n    IClassFixture&lt;TypesenseFixture&gt;\n{\n    [Fact]\n    public async Task CanQueryTypesenseForHealth()\n    {\n        var client = fixture.GetClient();\n        var result = await client.RetrieveHealth();\n\n        Assert.NotNull(result);\n    }\n}\n</code></pre>\n\n<p>The preceding test should pass if everything is set up correctly. Let’s expand our test with a more fun Typesense\nexample.</p>\n\n<p>First, we’ll need a document to store in Typesense.</p>\n\n<pre><code class=\"language-csharp\">public class Product(string id, string name, string manufacturer, double price)\n{\n\t[JsonPropertyName(nameof(Id))]\n\tpublic string Id { get; set; } = id;\n\t[JsonPropertyName(nameof(Name))]\n\tpublic string Name { get; set; } = name;\n\t[JsonPropertyName(nameof(Manufacturer))]\n\tpublic string Manufacturer { get; set; } = manufacturer;\n\t[JsonPropertyName(nameof(Price))]\n\tpublic double Price { get; set; } = price;\n\t\n\tpublic static Product[] Samples { get; } = {\n\t\tnew(\"1\", \"iPhone 15\", \"Apple\", 1500),\n\t\tnew(\"2\", \"Pixel 8 Pro\", \"Google\", 1300),\n\t\tnew(\"3\", \"Playstation 5\", \"Sony\", 500),\n\t\tnew(\"4\", \"XBox Series X\", \"Xbox\", 500),\n\t\tnew(\"5\", \"Switch\", \"Nintendo\", 300)\n\t};\n}\n</code></pre>\n\n<p>Typesense uses <code>System.Text.Json</code> with <code>CamelCase</code> naming. In the case of my test, I wanted to retain the original\ncasing, so I used the <code>JsonPropertyName</code> attribute to set the name of each field explicitly. The <code>Product</code> class also\ndefines some sample data for use in our test.</p>\n\n<p>We’ll also want to add <code>IAsyncLifetime</code> to our <code>TypesenseTests</code> class. This will allow us to load our document\ncollection and clear it on each test.</p>\n\n<pre><code class=\"language-csharp\">public async Task InitializeAsync()\n{\n\tvar client = fixture.GetClient();\n\n\tvar schema = new Schema(nameof(Product), new Field[]\n\t{\n\t\tnew(nameof(Product.Id), FieldType.String),\n\t\tnew(nameof(Product.Name), FieldType.String, false),\n\t\tnew(nameof(Product.Manufacturer), FieldType.String, true, false, true),\n\t\tnew(nameof(Product.Price), FieldType.Float, false)\n\t});\n\n\tawait client.CreateCollection(schema);\n\n\tforeach (var product in Product.Samples) {\n\t\tawait client.CreateDocument(nameof(Product), product);\n\t}\n}\n\npublic async Task DisposeAsync()\n{\n\tvar client = fixture.GetClient();\n\tawait client.DeleteCollection(nameof(Product));\n}\n</code></pre>\n\n<p>Finally, let’s add our test and search for a product.</p>\n\n<pre><code class=\"language-csharp\">[Fact]\npublic async Task CanSearchForProducts()\n{\n\tvar client = fixture.GetClient();\n\n\tvar results = await client\n\t\t.Search&lt;Product&gt;(\n\t\t\tnameof(Product),\n\t\t\tnew(\"Sony\", nameof(Product.Manufacturer))\n\t\t);\n\t\n\tAssert.Equal(1, results.Hits.Count);\n\t\n\tvar product = results.Hits[0].Document;\n\tAssert.Equal(\"Sony\", product.Manufacturer);\n\t\n\toutput.WriteLine($\"Found {product.Manufacturer} {product.Name} ({product.Price:C})\");\n}\n</code></pre>\n\n<p>Awesome! Here’s the complete test class for improved clarity.</p>\n\n<pre><code class=\"language-csharp\">using System.Text.Json.Serialization;\nusing Typesense;\nusing Xunit;\nusing Xunit.Abstractions;\n\nnamespace TypesenseWithTestcontainer;\n\npublic class TypesenseTests(TypesenseFixture fixture, ITestOutputHelper output) :\n    IClassFixture&lt;TypesenseFixture&gt;, IAsyncLifetime\n{\n    [Fact]\n    public async Task CanQueryTypesenseForHealth()\n    {\n        var client = fixture.GetClient();\n        var result = await client.RetrieveHealth();\n\n        Assert.NotNull(result);\n    }\n\n    [Fact]\n    public async Task CanSearchForProducts()\n    {\n        var client = fixture.GetClient();\n\n        var results = await client\n            .Search&lt;Product&gt;(\n                nameof(Product),\n                new(\"Sony\", nameof(Product.Manufacturer))\n            );\n        \n        Assert.Equal(1, results.Hits.Count);\n        \n        var product = results.Hits[0].Document;\n        Assert.Equal(\"Sony\", product.Manufacturer);\n        \n        output.WriteLine($\"Found {product.Manufacturer} {product.Name} ({product.Price:C})\");\n    }\n\n    public class Product(string id, string name, string manufacturer, double price)\n    {\n        [JsonPropertyName(nameof(Id))]\n        public string Id { get; set; } = id;\n        [JsonPropertyName(nameof(Name))]\n        public string Name { get; set; } = name;\n        [JsonPropertyName(nameof(Manufacturer))]\n        public string Manufacturer { get; set; } = manufacturer;\n        [JsonPropertyName(nameof(Price))]\n        public double Price { get; set; } = price;\n        \n        public static Product[] Samples { get; } = {\n            new(\"1\", \"iPhone 15\", \"Apple\", 1500),\n            new(\"2\", \"Pixel 8 Pro\", \"Google\", 1300),\n            new(\"3\", \"Playstation 5\", \"Sony\", 500),\n            new(\"4\", \"XBox Series X\", \"Xbox\", 500),\n            new(\"5\", \"Switch\", \"Nintendo\", 300)\n        };\n    }\n\n    public async Task InitializeAsync()\n    {\n        var client = fixture.GetClient();\n\n        var schema = new Schema(nameof(Product), new Field[]\n        {\n            new(nameof(Product.Id), FieldType.String),\n            new(nameof(Product.Name), FieldType.String, false),\n            new(nameof(Product.Manufacturer), FieldType.String, true, false, true),\n            new(nameof(Product.Price), FieldType.Float, false)\n        });\n\n        await client.CreateCollection(schema);\n\n        foreach (var product in Product.Samples) {\n            await client.CreateDocument(nameof(Product), product);\n        }\n    }\n\n    public async Task DisposeAsync()\n    {\n        var client = fixture.GetClient();\n        await client.DeleteCollection(nameof(Product));\n    }\n}\n</code></pre>\n\n<p>Now, we can test the Typesense search engine from within .NET and explore the client’s capabilities.</p>\n\n<p>As a note, you should do your document initialization code less frequently and possibly within the fixture. Also,\nexplore xUnit’s <code>Collection</code> attribute to reduce the amount of containers created for larger test suites.</p>\n\n<h2 id=\"conclusion\">Conclusion</h2>\n\n<p>Typesense is a promising solution for providing your users an outstanding search experience. By using Testcontainers\nwith the Typesense Docker image, you can quickly experiment with the capabilities of the search engine and what’s\npossible.</p>\n\n<p>You can get the complete sample at\nmy <a href=\"https://github.com/khalidabuhakmeh/TypesenseWithTestcontainer\">Typesense with Testcontainers GitHub repository</a>.</p>\n\n<p>I hope this post gives you a good starting point to explore and iterate on your solutions. As always, thank you for\nreading and sharing my posts. Cheers. :)</p>\n",
      "Content": null,
      "Language": null,
      "Link": "https://khalidabuhakmeh.com/testing-typesense-search-with-testcontainers-and-dotnet"
    },
    {
      "FeedId": "https://khalidabuhakmeh.com/feed.xml",
      "ItemId": "https://khalidabuhakmeh.com/how-to-use-regular-expressions-and-match-evaluators-in-dotnet",
      "Title": "How to use Regular Expressions and Match Evaluators in .NET",
      "PublishDate": "2023-12-05T00:00:00+00:00",
      "Summary": "<p>Let’s face it, regular expressions are powerful and can be an immense pain in the butt to write. While crafting a regular expression to perform any input recognition is possible, it becomes exceedingly difficult when the matching rules require more complicated logic. In specific scenarios, doing an initial regular expression match is more straightforward, and then applying code logic to get the desired result.</p>\n\n<p>This post will look at a straightforward example of using <code>RegEx.Replace</code> with the <code>MatchEvaluator</code> to do a two-step replacement of matched tokens.</p>\n\n<!--more-->\n\n<h2 id=\"what-is-regexreplace\">What is RegEx.Replace?</h2>\n\n<p>When attempting to replace tokens in a string, many developers will reach for <code>RegEx.Replace</code>, which aims to take an input, a regular expression, and then returns are modified result.</p>\n\n<pre><code class=\"language-csharp\">Regex.Replace(\"test\", \"^test$\", \"success\");\n</code></pre>\n\n<p>The example works great for simple scenarios, as it is doing token replacement. But what about the following scenario?</p>\n\n<ol>\n  <li>Find all image filenames</li>\n  <li>Replace the filename and extension</li>\n  <li>Ignore any filename that doesn’t match a criteria.</li>\n</ol>\n\n<p>This is possible with a regular expression but can be complex with lookahead, lookbehind, and named groups. It is not easy for most developers to pull this off. How do we get the result that we want?</p>\n\n<p>Let’s look at a more readable way of solving the problem presented with <code>MatchEvaluator</code>.</p>\n\n<h2 id=\"working-with-matchevaluator\">Working with MatchEvaluator</h2>\n\n<p>The <code>MatchEvaluator</code> type is a delegate wrapper that expects a potentially mutated match result. The delegate can return any value based on the match and other logic a developer may add.</p>\n\n<p>Let’s look at a solution.</p>\n\n<pre><code class=\"language-csharp\">using System.Text.RegularExpressions;  \n  \nstring[] extensions = [\".jpg\", \".gif\"];  \n// lang=regex  \nvar pattern = @\"\\w*\\.(\\w{3,4})\";  \n  \nvar original = \"test.webp, test-01.jpg and test-02.gif\";  \nvar result = Regex.Replace(original, pattern, match =&gt;  \n{  \n    var extension = Path.GetExtension(match.Value);  \n    // if we don't need to do anything, return the original value  \n    if (!extensions.Contains(extension)) return match.Value;  \n    // convert value to a token with webp  \n    var filename = Path.GetFileNameWithoutExtension(match.Value);  \n    return $\"{filename}-converted.webp\";  \n}, RegexOptions.IgnoreCase);  \n  \nConsole.WriteLine(result);\n</code></pre>\n\n<p>As you can see, the <code>MatchEvaluator</code> delegate gets the <code>Match</code>. At this point, we can write custom and complex logic to transform the match.</p>\n\n<p>Running the code above, returns the following result.</p>\n\n<pre><code class=\"language-text\">test.webp, test-01-converted.webp and test-02-converted.webp\n</code></pre>\n\n<p>Neat!</p>\n\n<h2 id=\"conclusion\">Conclusion</h2>\n\n<p>If you’re struggling to write that perfect <code>RegEx</code> for token replacement, you might find it more straightforward to do it in two steps. First, write a simple-to-understand pattern, and then use <code>MatchEvalutor</code> to get you to the finish line.</p>\n\n<p>I hope you enjoyed this post, and thanks for reading.</p>\n",
      "Content": null,
      "Language": null,
      "Link": "https://khalidabuhakmeh.com/how-to-use-regular-expressions-and-match-evaluators-in-dotnet"
    },
    {
      "FeedId": "https://khalidabuhakmeh.com/feed.xml",
      "ItemId": "https://khalidabuhakmeh.com/scriban-for-text-and-liquid-templating-in-dotnet",
      "Title": "Scriban for Text and Liquid Templating in .NET",
      "PublishDate": "2023-11-28T00:00:00+00:00",
      "Summary": "<p>Templating is a common approach to separating logic from presentation, and many options exist within the .NET ecosystem.\nThe most popular is the Razor engine used by ASP.NET Core, but it currently has some dependencies that make it difficult\nto use consistently in many scenarios. That’s where alternative templating systems can provide value, as they typically\nwork with fewer, if any, external dependencies.</p>\n\n<p>As a big fan of <a href=\"https://jekyllrb.com\">Jekyll</a>, <a href=\"https://shopify.github.io/liquid/basics/introduction/\">Liquid</a> is a\nnatural choice for\ntemplating as it provides simple templating, types, iteration, control flow, and a suite of built-in helper methods.\nIt’s also very mature and has excellent documentation. So, I was excited to\ntry <a href=\"https://github.com/scriban/scriban\">Scriban</a> as a fast, robust, safe, and lightweight templating engine.</p>\n\n<!--more-->\n\n<h2 id=\"what-is-scriban\">What is Scriban?</h2>\n\n<p><a href=\"https://github.com/scriban/scriban\">Scriban</a> is the brainchild of <a href=\"https://github.com/xoofx\">Alexandre Mutel</a>, and is\ntouted as a scripting language and\nengine for .NET with the primary purpose of text templating. It also provides a compatibility mode for parsing and\nrendering Liquid templates. It’s vital to distinguish Scriban as a text templating engine, not just a web view engine.\nText templating implies it can be used to generate any text-based format, including but not limited to HTML. Outside of\n.NET dependencies, Scriban is entirely free of external dependencies, with the option to source embed. This makes it\nperfect for many app host options in the .NET ecosystem.</p>\n\n<h2 id=\"getting-started-with-scriban\">Getting Started with Scriban</h2>\n\n<p>Let’s see what a <em>“Hello World”</em> use case would look like.</p>\n\n<pre><code class=\"language-csharp\">// Parse a scriban template\nvar template = Template.Parse(\"Hello !\");\nvar result = template.Render(new { Name = \"World\" }); \n// =&gt; \"Hello World!\" \n</code></pre>\n\n<p>This could look more exciting, but it hints at some mind-blowing scenarios which we’ll see in the next section. Let’s\nramp it up.</p>\n\n<h2 id=\"complex-liquid-scenario-with-scriban\">Complex Liquid Scenario with Scriban</h2>\n\n<p>As mentioned, Liquid is a commonly-used templating language used in the Ruby on Rails community. Shopify also uses it\nfor its online storefront platform. Let’s look at a complex C# example of a Liquid template and then break it down.</p>\n\n<p><strong>Note: If you’re using <a href=\"https://jetbrains.com/rider\">JetBrains Rider</a>, install\nthe <a href=\"https://plugins.jetbrains.com/plugin/14388-liquid\">Liquid plugin</a> to get Liquid syntax highlighting.</strong></p>\n\n<pre><code class=\"language-csharp\">using Scriban;  \nusing Scriban.Runtime;  \n  \nvar script = new ScriptObject();  \nscript.Import(typeof(MyFunctions));  \nscript.Add(\"products\", new Product[]  \n{  \n    new(\"Blue Socks\", 10m, \"plain socks\"),  \n    new(\"Gray Pants\", 22m, \"regular ol' pants\"),  \n    new(\"Amazing T-Shirt\", 24m, \n        \"the world's most fantastical t-shirt\"),  \n});  \n  \nvar context = new LiquidTemplateContext();  \ncontext.PushGlobal(script);  \n  \nvar template = Template.ParseLiquid(\n    // lang=liquid\n    \"\"\"\n    &lt;ul id='products'&gt;{% for product in products %}\n        &lt;li&gt;\n            &lt;h2&gt;{{ product.name | append_emoji }} ({{ product.price }})&lt;/h2&gt;\n            &lt;p&gt;{{ product.description | truncate: 15, \"...\" }}&lt;/p&gt;\n        &lt;/li&gt;{% endfor %}\n    &lt;/ul&gt;\n    \"\"\");\n  \nvar result = template.Render(context);  \n  \nConsole.WriteLine(result);  \n  \npublic static class MyFunctions  \n{  \n    public static string AppendEmoji(string input)  \n        =&gt; $\"{input} 🛍️\";  \n}  \n  \npublic record Product(  \n    string Name,  \n    decimal Price,  \n    string Description);\n</code></pre>\n\n<p>At the start of of the code, we create a new <code>ScriptObject</code>. This instance will contain all our variables and .NET\nfunctions we’ll want to use in our template.</p>\n\n<p>The first step registers an <code>AppendEmoji</code> method, which gets translated into <code>append_emoji</code> by convention. All static\nmethods in the <code>MyFunctions</code> class will be registered. You can expand your templating vocabulary with a few C# methods.</p>\n\n<p>Next, we add the <code>products</code> global variable to our script. This collection will be used in the template to display our\nproduct collection. These are plain old C# records.</p>\n\n<p>Finally, we get to the template parsing and rendering. You’ll notice the use of the <code>truncate</code> filter in the template.\nFrom my testing, most Liquid filters are available out of the box, which is helpful. When the template is parsed, we’re\nready to render it. Here, the call to <code>Render</code> is provided the script context, which references our data and our\nC# <code>AppendEmoji</code> helper method.</p>\n\n<p>All that’s left is to see what the results look like.</p>\n\n<pre><code class=\"language-html\">&lt;ul id='products'&gt;\n    &lt;li&gt;\n        &lt;h2&gt;Blue Socks 🛍️ (10)&lt;/h2&gt;\n        &lt;p&gt;plain socks&lt;/p&gt;\n    &lt;/li&gt;\n    &lt;li&gt;\n        &lt;h2&gt;Gray Pants 🛍️ (22)&lt;/h2&gt;\n        &lt;p&gt;regular ol' ...&lt;/p&gt;\n    &lt;/li&gt;\n    &lt;li&gt;\n        &lt;h2&gt;Amazing T-Shirt 🛍️ (24)&lt;/h2&gt;\n        &lt;p&gt;the world's ...&lt;/p&gt;\n    &lt;/li&gt;\n&lt;/ul&gt;\n</code></pre>\n\n<p>That’s awesome!</p>\n\n<h2 id=\"conclusion\">Conclusion</h2>\n\n<p><a href=\"https://github.com/scriban/scriban\">Scriban</a> looks like an excellent templating engine for the .NET ecosystem. With the\nability to use Liquid, it goes to a whole new level. The ability to inject variables and methods into the template is\nalso excellent. Please try it and let me know what scenarios you could use a text templating engine in.</p>\n\n<p>Thank you for reading and sharing my posts with friends and colleagues.</p>\n",
      "Content": null,
      "Language": null,
      "Link": "https://khalidabuhakmeh.com/scriban-for-text-and-liquid-templating-in-dotnet"
    },
    {
      "FeedId": "https://khalidabuhakmeh.com/feed.xml",
      "ItemId": "https://khalidabuhakmeh.com/aspnet-core-pdf-previews-and-downloads",
      "Title": "ASP.NET Core PDF Previews and Downloads",
      "PublishDate": "2023-11-21T00:00:00+00:00",
      "Summary": "<p>Tell me if you’ve heard this one before. You spend months working with UI and UX experts, building what you think is the\nmost optimal means of displaying business information. You sit in a meeting with your stakeholders, demoing what you\ncreated. Everything feels great, but then silence fills the room. A lone stakeholder raises their voice, “This is all\ngreat, but can we get it in a PDF?”.</p>\n\n<p>The Portable Document Format (PDF) is in a heated race, with Excel spreadsheets as the most valuable file format in\nbusiness today. As a developer, you will inevitably be asked to compress everything into a file that business\nindividuals can share via email. Don’t fight it, but embrace it.</p>\n\n<p>In this post, we’ll see the two approaches to transmitting PDF files through ASP.NET Core to get two different\nbehaviors: In-browser preview and downloads.</p>\n\n<!--more-->\n\n<h2 id=\"generating-a-pdf-with-questpdf\">Generating a PDF with QuestPDF</h2>\n\n<p>While this post isn’t a tutorial for generating PDFs, you’ll need a way to generate PDFs to follow along. I recommend\nusing the <a href=\"https://www.questpdf.com/\">QuestPDF library</a>. The API is easy to get started with and will have you\ngenerating PDF documents in no time. Also, their licensing costs are reasonable, ranging from a free community license\nto an Enterprise license. That said, feel free to substitute any PDF-generating method you prefer.</p>\n\n<p>Here is the code for my PDF generation.</p>\n\n<pre><code class=\"language-csharp\">private static byte[] GetPdfDocuments()  \n{  \n  var pdf =  \n      Document.Create(container =&gt;  \n      {  \n          container.Page(page =&gt;  \n          {  \n              page.Size(PageSizes.A4);  \n              page.Margin(2, Unit.Centimetre);  \n              page.PageColor(Colors.White);  \n              page.DefaultTextStyle(x =&gt; x.FontSize(20));  \n\n              page.Header()  \n                  .Text(\"Hello PDF!\")  \n                  .SemiBold().FontSize(36)\n                  .FontColor(Colors.Blue.Medium);  \n\n              page.Content()  \n                  .PaddingVertical(1, Unit.Centimetre)  \n                  .Column(x =&gt;\n                  {  \n                      x.Spacing(20);\n\n                      x\n                      .Item()\n                      .Text(Placeholders.LoremIpsum());  \n                      x\n                      .Item()\n                      .Image(Placeholders.Image(200, 100));  \n                  });\n              \n              page.Footer()  \n                  .AlignCenter()  \n                  .Text(x =&gt;  \n                  {  \n                      x.Span(\"Page \");  \n                      x.CurrentPageNumber();  \n                  });            \n          });        \n  }).GeneratePdf();  \n  \n  return pdf;  \n}\n</code></pre>\n\n<p>OK, let’s move on to one of the first ways of transmitting a PDF to your user: previewing the file within the browser.</p>\n\n<h2 id=\"previewing-a-pdf-file-in-the-browser\">Previewing a PDF File in the Browser</h2>\n\n<p>In this example, I’ll be using ASP.NET Core MVC, but this approach should work with Razor Pages and even Minimal APIs.\nAdjust the code accordingly.</p>\n\n<pre><code class=\"language-csharp\">public IActionResult Show()  \n{  \n    var pdf = GetPdfDocuments();  \n    return File(pdf, \"application/pdf\");  \n}\n</code></pre>\n\n<p>Next, you’ll want to add the button in your view to trigger this MVC action.</p>\n\n<pre><code class=\"language-html\">&lt;a class=\"btn btn-primary\"\n   asp-controller=\"Files\"\n   asp-action=\"Show\"\n   target=\"_blank\"&gt;\n    Preview PDF\n&lt;/a&gt;\n</code></pre>\n\n<p>That’s it! Clicking the <strong>Preview</strong> button will trigger your browser to open the file in a new tab. But you may be\nasking yourself, “Why does this work?” Let’s look at the response headers of the HTTP request.</p>\n\n<pre><code class=\"language-text\">Content-Length: 78127\nContent-Type: application/pdf\nDate: Wed, 06 Sep 2023 14:17:30 GMT\nServer: Kestrel\n</code></pre>\n\n<p>A client (web browser) uses the content type of <code>application/pdf</code> to determine if a default viewing application is\nassociated with the MIME type. Since the PDF is a standard format, most modern browsers can render them in-app (sorry,\nAdobe Acrobat Reader). The user can now view the file as if it were another tab.</p>\n\n<p><strong>Note: It’s essential to recognize that users can also change their preferences regarding how files are handled, so\nthis can behave differently based on an individual’s local setup.</strong></p>\n\n<p>What if you don’t want this behavior and want to force a download?</p>\n\n<h2 id=\"downloading-a-pdf-file-in-the-browser\">Downloading a PDF File in the Browser</h2>\n\n<p>If you want to let folks download files rather than having the client open the file in the browser, it’s as simple as\nadding another argument to the previous code.</p>\n\n<pre><code class=\"language-csharp\">public IActionResult Download()  \n{  \n    var pdf = GetPdfDocuments();  \n    return File(pdf, \"application/pdf\", \"download.pdf\");  \n}\n</code></pre>\n\n<p>Then, the button in your view is similar to the previous example.</p>\n\n<pre><code class=\"language-html\">&lt;a class=\"btn btn-primary\"\n   asp-controller=\"Files\"\n   asp-action=\"Download\"&gt;\n    Download PDF\n&lt;/a&gt;\n</code></pre>\n\n<p>Now, why does this download the PDF rather than preview the file?</p>\n\n<p>Let’s look at the HTTP response headers to see what’s different.</p>\n\n<pre><code class=\"language-text\">Content-Disposition: attachment; filename=download.pdf; filename*=UTF-8''download.pdf\nContent-Length: 78109\nContent-Type: application/pdf\nDate: Wed, 06 Sep 2023 14:17:30 GMT\nServer: Kestrel\n</code></pre>\n\n<p>You can see a <code>Content-Disposition</code> response header with the value of <code>attachment</code> and a <code>filename</code>. This tells the\nbrowser that the server intends the client to download the file rather than attempt to render it as a document.</p>\n\n<h2 id=\"conclusion\">Conclusion</h2>\n\n<p>While the focus of this blog post was PDFs, this applies to any document type. If the user has a default application\nthat can preview a file, then excluding the filename will attempt to open and preview the document. For PDFs, most\nbrowsers can render them in-app without additional applications. For downloading files, you only need to remember to\ngive the file a name.</p>\n\n<p>I hope this post was informative to you, and as always, thanks for sharing my posts with colleagues and friends. Cheers.</p>\n",
      "Content": null,
      "Language": null,
      "Link": "https://khalidabuhakmeh.com/aspnet-core-pdf-previews-and-downloads"
    },
    {
      "FeedId": "https://khalidabuhakmeh.com/feed.xml",
      "ItemId": "https://khalidabuhakmeh.com/vestpocket-file-based-data-storage-for-aot-dotnet-applications",
      "Title": "VestPocket: File-based Data Storage for AOT .NET Applications",
      "PublishDate": "2023-11-14T00:00:00+00:00",
      "Summary": "<p><a href=\"https://www.youtube.com/watch?v=oBad-MQaqdE\">As Zoolander villain Mugato</a> might say if he were a .NET developer, <em>“Ahead of Time (AOT) compilation is so hot right now.”</em> AOT is one of the focuses of the .NET 8 release, with a lot of attention given to high-performance scenarios. For the uninitiated, the act of AOT is compiling a higher-level language into a lower-level language for a better execution profile at runtime. In the case of .NET AOT, it’s targeting builds for specific environments to get near-native performance.</p>\n\n<p>While many folks will undoubtedly start looking at AOT as an option to squeeze more juice out of their apps, they may have to reconsider many of their dependencies that are not AOT compatible. In that dependency vacuum, a new class of libraries will emerge to offer developers a way forward.</p>\n\n<p>In today’s blog post, let’s check out VestPocket. VestPocket is a file-based “database” closer to a key-value store than a full-blown database. It aims to provide developers with an in-memory record storage option while having them persisted to disk.</p>\n\n<!--more-->\n\n<h2 id=\"what-is-vestpocket\">What is VestPocket?</h2>\n\n<p><a href=\"https://github.com/keithwill/VestPocket\">VestPocket</a> is a .NET library that allows developers to store entities in a single file. Records are serialized using <code>System.Text.Json</code> and the newer AOT-compatible serialization source generators in .NET 7. The library is meant to give the developer a local database instance without the overhead of a database engine.</p>\n\n<p>Some use cases might involve:</p>\n\n<ul>\n  <li>Version and deploy application-specific data in a human-readable file.</li>\n  <li>Caching data locally in a single application instance.</li>\n  <li>As a proof-of-concept database for demos and samples.</li>\n  <li>You need more resilience than in-memory collections.</li>\n</ul>\n\n<p>You can get a solution up and running with a bit of setup. Let’s do that now!</p>\n\n<h2 id=\"getting-started-with-vestpocket\">Getting Started with VestPocket</h2>\n\n<p>Before getting started, you’ll need to install the <code>VestPocket</code> NuGet package. As mentioned in the previous section, VestPocket uses <code>System.Text.Json</code> and source generators to serialize records into the file-based format. Let’s start by looking at setting up our entity models.</p>\n\n<pre><code class=\"language-csharp\">using System.Text.Json.Serialization;  \nusing VestPocket;  \n  \nnamespace Vested;  \n  \n[JsonSerializable(typeof(Entity))]  \n[JsonSourceGenerationOptions(WriteIndented = false)]  \npublic partial class DatabaseContext : JsonSerializerContext  \n{  \n}  \n  \n[JsonDerivedType(typeof(Entity), nameof(Entity))]  \n[JsonDerivedType(typeof(Person), nameof(Person))]  \npublic record Entity(string Key, int Version, bool Deleted)  \n    : IEntity  \n{  \n    public IEntity WithVersion(int version)  \n        =&gt; this with { Version = version };  \n}  \n  \npublic record Person(  \n    string Key,  \n    string Name,  \n    int Age,  \n    int Version = 0,  \n    bool Deleted = false  \n) : Entity(Key, Version, Deleted);\n</code></pre>\n\n<p>All your VestPocket entities will need a base <code>Entity</code> type. This type is created within your application and must implement the <code>IEntity</code> interface from VestPocket. Once you have a base record, you can begin implementing derived entities. In the previous code, I implemented a new <code>Person</code> entity. Be sure to mark your <code>Entity</code> instance with all derived entities using <code>JsonDerivedType</code>. This attribute tells <code>System.Text.Json</code> the derived types that the <code>JsonSerializerContext</code> should be aware of when building serializers and deserializers to create for use at runtime. Finally, we set up the <code>DatabaseContext</code> with serialization options and known entities. Again, since everything will derive from <code>Entity</code>, we only need one <code>JsonSerializable</code> attribute.</p>\n\n<p>Now, let’s write some code using our new data storage.</p>\n\n<pre><code class=\"language-csharp\">using Vested;  \nusing VestPocket;  \n  \nvar options = new VestPocketOptions { FilePath = \"test.vest\" };  \nvar store = new VestPocketStore&lt;Entity&gt;(DatabaseContext.Default.Entity, options);  \n  \n// open the database  \nawait store.OpenAsync(CancellationToken.None);  \n  \nvar khalid =   \n    store.Get&lt;Person&gt;(\"person/khalid\") ??  \n    new(\"person/khalid\", \"Khalid Abuhakmeh\", 40);  \n  \nvar maarten =   \n    store.Get&lt;Person&gt;(\"person/maarten\") ??  \n    new(\"person/maarten\", \"Maarten Balliauw\", 39);  \n  \n// will save a new version or increment version  \nawait store.Save(new Entity[] { khalid, maarten });  \n  \n// get all people  \nvar people = store.GetByPrefix&lt;Person&gt;(\"person/\");  \n  \nforeach (var (_, name, age, _, _) in people)  \n{  \n    Console.WriteLine($\"{name} ({age})\");  \n}  \n  \n// maintenance (clean up previous versions)  \nawait store.ForceMaintenance();  \n  \n// close store (flush any pending writes)  \nawait store.Close(CancellationToken.None);\n</code></pre>\n\n<p>If you’ve used any .NET object-relation mapper, this style will likely not surprise you. Let’s break down the sample.</p>\n\n<pre><code class=\"language-csharp\">var options = new VestPocketOptions { FilePath = \"test.vest\" };  \nvar store = new VestPocketStore&lt;Entity&gt;(DatabaseContext.Default.Entity, options);  \n</code></pre>\n\n<p>A <code>VestPocketStore</code> is your access method to your data storage. The constructor takes the <code>Entity</code> serializer generated by <code>System.Text.Json</code> and an instance of <code>VestPocketOptions</code>. Stores are thread-safe, so you can share a single store instance across your application.</p>\n\n<pre><code class=\"language-csharp\">// open the database  \nawait store.OpenAsync(CancellationToken.None);  \n</code></pre>\n\n<p>To create the file or access an existing file, the <code>OpenAsync</code> method must be invoked.</p>\n\n<pre><code class=\"language-csharp\">var khalid =   \n    store.Get&lt;Person&gt;(\"person/khalid\") ??  \n    new(\"person/khalid\", \"Khalid Abuhakmeh\", 40);  \n  \nvar maarten =   \n    store.Get&lt;Person&gt;(\"person/maarten\") ??  \n    new(\"person/maarten\", \"Maarten Balliauw\", 39);  \n</code></pre>\n\n<p>This code may look weird, but for the sake of this sample, I check to see if the sample has already stored a previous version of our records. If so, we retrieve the existing element. Otherwise, we’ll create a new record in memory.</p>\n\n<pre><code class=\"language-csharp\">// will save a new version or increment version  \nawait store.Save(new Entity[] { khalid, maarten });  \n</code></pre>\n\n<p>Here, we attempt to store the records. It’s important to note that VestPocket is an append-only write system. So, you might have multiple versions of the same record. Here is the <code>test.vest</code> file on disk.</p>\n\n<pre><code class=\"language-json\">{\"Creation\":\"2023-09-05T13:20:35.044512-04:00\",\"LastRewrite\":\"2023-09-05T13:30:11.911718-04:00\",\"CompressedEntities\":null}  \n{\"$type\":\"Person\",\"Name\":\"Khalid Abuhakmeh\",\"Age\":40,\"Key\":\"person/khalid\",\"Version\":3,\"Deleted\":false}  \n{\"$type\":\"Person\",\"Name\":\"Maarten Balliauw\",\"Age\":39,\"Key\":\"person/maarten\",\"Version\":3,\"Deleted\":false}  \n{\"$type\":\"Person\",\"Name\":\"Khalid Abuhakmeh\",\"Age\":40,\"Key\":\"person/khalid\",\"Version\":4,\"Deleted\":false}  \n{\"$type\":\"Person\",\"Name\":\"Maarten Balliauw\",\"Age\":39,\"Key\":\"person/maarten\",\"Version\":4,\"Deleted\":false}\n</code></pre>\n\n<p>As the previous code shows, you can always retrieve records by a specific key, but you can filter the results down based on key prefixes.</p>\n\n<pre><code class=\"language-csharp\">// get all people  \nvar people = store.GetByPrefix&lt;Person&gt;(\"person/\");  \n  \nforeach (var (_, name, age, _, _) in people)  \n{  \n    Console.WriteLine($\"{name} ({age})\");  \n}\n</code></pre>\n\n<p>You may also want to “clean up” the database of old versions eventually. This is where the call to <code>ForceMaintenance</code> helps. It removes all but the latest version of an entity.</p>\n\n<pre><code class=\"language-csharp\">// maintenance (clean up previous versions)  \nawait store.ForceMaintenance();  \n</code></pre>\n\n<p>Finally, before our application exits, we want to ensure we’ve flushed all records to disk. We can do that by calling <code>Close</code> on our store instance.</p>\n\n<pre><code class=\"language-csharp\">// close store (flush any pending writes)  \nawait store.Close(CancellationToken.None);\n</code></pre>\n\n<p>There, you have it. A simple one-file usage of VestPocket.</p>\n\n<h2 id=\"conclusion\">Conclusion</h2>\n\n<p>With AOT on the horizon, it’s nice to see folks experimenting with it and providing the community with packages. VestPocket is a file-based data storage mechanism with an <a href=\"https://learn.microsoft.com/en-us/windows/win32/extensible-storage-engine/extensible-storage-engine-managed-reference\">ESENT vibe</a>, and that’s pretty neat. While still in the experimental phase, I can see it being helpful in the use cases the author describes. Head over to <a href=\"https://github.com/keithwill/VestPocket\">the VestPocket GitHub repository</a> and give it a star.</p>\n\n<p>As always, thank you for reading and sharing my posts with friends and colleagues. Cheers.</p>\n",
      "Content": null,
      "Language": null,
      "Link": "https://khalidabuhakmeh.com/vestpocket-file-based-data-storage-for-aot-dotnet-applications"
    },
    {
      "FeedId": "https://khalidabuhakmeh.com/feed.xml",
      "ItemId": "https://khalidabuhakmeh.com/moonsharp-running-lua-scripts-in-dotnet",
      "Title": "MoonSharp - Running Lua Scripts in .NET",
      "PublishDate": "2023-11-07T00:00:00+00:00",
      "Summary": "<p><a href=\"http://www.lua.org/about.html\">Lua</a> is a scripting language most famously known for powering Blizzard’s World of Warcraft but was designed to be a general-purpose means of building robust, efficient, and lightweight solutions. Lua was created in 1993 (30 years ago!) and has since been popular among developers across all ecosystems. Lua is an excellent choice for folks because it is fast, portable, embeddable, small, and Free under an MIT license.</p>\n\n<p>If you’ve ever dreamed about building extensibility into your applications, Lua is an excellent choice, as you can allow consumers to build scripts that work within your .NET host application. In this post, we’ll walk through the straightforward steps to add Lua support to your .NET applications, how you might invoke Lua scripts, and how you might let Lua scripts call your .NET methods.</p>\n\n<!--more-->\n\n<h2 id=\"getting-started-with-moonsharp\">Getting Started with MoonSharp</h2>\n\n<p>In a .NET console application, start by installing the <code>MoonSharp</code> NuGet package.</p>\n\n<pre><code class=\"language-console\">dotnet add package MoonSharp\n</code></pre>\n\n<p>You can also add the following <code>ItemGroup</code> to your .NET project file.</p>\n\n<pre><code class=\"language-xml\">&lt;ItemGroup&gt;  \n  &lt;PackageReference Include=\"MoonSharp\" Version=\"2.0.0\" /&gt;  \n&lt;/ItemGroup&gt;\n</code></pre>\n\n<p>After that, you should be ready to start writing your first Lua script.</p>\n\n<p><strong>As a bonus, if you’re using <a href=\"https://jetbrains.com/rider\">JetBrains Rider</a> you’ll get Lua syntax highlighting with the language injections feature.</strong></p>\n\n<p>In your <code>Program.cs</code> file, add the following code.</p>\n\n<pre><code class=\"language-csharp\">using MoonSharp.Interpreter;  \n  \n// language=lua  \nvar lua =  \n  \"\"\"  \n  print(\"Hello, Lua\")  \n  \"\"\";  \n  \nScript.DefaultOptions.DebugPrint = Console.WriteLine;  \nScript.RunString(lua);\n</code></pre>\n\n<p>You should see the following output in your console when you run your Console application.</p>\n\n<pre><code class=\"language-text\">Hello, Lua\n</code></pre>\n\n<p>Setting the <code>DebugPrint</code> property is necessary to allow MoonSharp to redirect print output somewhere. We chose the console in this case, but it could be directed to a <code>string</code>, <code>Stream</code>, or whatever.</p>\n<h2 id=\"invoke-a-lua-function-from-c\">Invoke a Lua Function from C#</h2>\n\n<p>Doing a <code>print</code> call is fun, but we can be more practical. Let’s step it up by invoking a Lua <code>add</code> method that takes two integer arguments.</p>\n\n<pre><code class=\"language-csharp\">using MoonSharp.Interpreter;  \n  \nScript.DefaultOptions.DebugPrint = Console.WriteLine;  \n  \n// language=lua  \nvar lua =  \n  \"\"\"  \n  function add(x, y)    \n      return x + y  \n  end  \n  \"\"\";  \n  \nvar script = new Script();  \n// loads and executes script  \nscript.DoString(lua);  \n// call our global method  \nDynValue value = script.Call(script.Globals[\"add\"], 1, 1);  \n  \nConsole.WriteLine($\"1 + 1 is {value.Number}\");\n</code></pre>\n\n<p>Here, we load a new function of <code>add</code> that takes two number arguments. Remember, Lua is dynamically typed, so you won’t see any type declarations. We create a <code>script</code> variable to reuse the context of our script, which now holds a global add function. We can use the script variable from here to invoke our global function and the necessary arguments. The <code>DynValue</code> is a dynamic result, but there are helper properties you can use to type the result to a known .NET type. In this case, we’ll use the <code>Number</code> property to get an integer value. Executing our application, we get the console output.</p>\n\n<pre><code class=\"language-text\">1 + 1 is 2\n</code></pre>\n\n<p>What if we want a Lua script to call our .NET application?</p>\n\n<h2 id=\"invoking-a-c-method-from-a-lua-script\">Invoking a C# Method from a Lua Script</h2>\n\n<p>MoonSharp allows you to inject elements into the global script context. In this section, we’ll provide our Lua script with an add method and do the addition in the scope of a C# code block.</p>\n\n<pre><code class=\"language-csharp\">using MoonSharp.Interpreter;  \n  \nScript.DefaultOptions.DebugPrint = Console.WriteLine;  \n  \n// language=lua  \nvar lua =  \n  \"\"\"  \n  local result = add(1,1)  \n  local output = string.format(\"1 + 1 is %s\", result)  \n  print(output)  \n  \"\"\";  \n  \nvar script = new Script();  \n  \nint add(int x, int y)  \n{  \n  Console.WriteLine(\"Yep, I'm .NET baby!\");  \n  return x + y;  \n}  \n  \n// load our C# method into global  \nscript.Globals[nameof(add)] = add;   \n// loads and executes script  \nscript.DoString(lua);\n</code></pre>\n\n<p>We pass the C# local function of <code>add</code> as a <code>Func&lt;int,int,int&gt;</code> to Lua. This allows Lua scripts to invoke the global method. Running the code above returns the following result.</p>\n\n<pre><code class=\"language-text\">Yep, I'm .NET baby!\n1 + 1 is 2\n</code></pre>\n\n<p>Awesome!</p>\n\n<h2 id=\"conclusion\">Conclusion</h2>\n\n<p>We’ve only scratched the surface of what MoonSharp has to offer with Lua, but with these three demonstrations, you can see that the interoperability possibilities are through the roof. Leveraging MoonSharp you can build extensibility into your applications using a battle-hardened scripting language.</p>\n\n<p>If you want to learn more about <a href=\"https://www.moonsharp.org/\">MoonSharp, visit the official site to see more samples and to read the official documentation.</a></p>\n\n<p>Thanks for reading and sharing my posts with friends and colleagues.</p>\n",
      "Content": null,
      "Language": null,
      "Link": "https://khalidabuhakmeh.com/moonsharp-running-lua-scripts-in-dotnet"
    },
    {
      "FeedId": "https://khalidabuhakmeh.com/feed.xml",
      "ItemId": "https://khalidabuhakmeh.com/what-should-i-dispose-with-dotnet-database-connections",
      "Title": "What Should I Dispose with .NET Database Connections?",
      "PublishDate": "2023-10-31T00:00:00+00:00",
      "Summary": "<p>When working with “expensive” resources, it is essential to call the <code>Dispose</code> method to tell .NET’s garbage collector that it’s time to clean up the instance and all its associated baggage. Disposing of instances is most important when dealing with finite resources on the hot path of your codebase, and for most .NET developers, the most crucial resource is a database connection. Your app is done for if you run out of database connections.</p>\n\n<p>With database connections, we also have a supporting cast of commands and readers, all of which can be disposed of as well. This leads to an interesting question: <strong><em>“Do you HAVE TO dispose everything?”</em></strong></p>\n\n<p>In this post, we’ll explore the <code>Microsoft.Data.Sqlite</code> implementations of <code>DbConnection</code>, <code>DbCommand</code>, and <code>DbDataReader</code> and see what happens when we call <code>Dispose</code> on each type.</p>\n\n<!--more-->\n\n<h2 id=\"the-data-access-code\">The Data Access Code</h2>\n\n<p>When working with ADO.NET, you’ll likely be using a <code>Microsoft.Data.*</code> package or a community library like <code>Npgsql</code>. Each library implements a database-specific version of <code>DbConnection</code>, <code>DbCommand</code>, <code>DbReader</code>, and other intrinsics. Let’s write a simple application that opens a connection, creates a command, and then reads the results.</p>\n\n<pre><code class=\"language-csharp\">using Microsoft.Data.Sqlite;  \n  \nawait using SqliteConnection connection = new(\"Data Source=test.sqlite\");  \nawait connection.OpenAsync();  \n  \nawait using SqliteCommand command = connection.CreateCommand();  \ncommand.CommandText = \"SELECT * FROM sqlite_master\";  \n  \nawait using SqliteDataReader reader = command.ExecuteReader();  \nConsole.WriteLine($\"Has Rows? {reader.HasRows}\");\n</code></pre>\n\n<p>You may notice a few things happening in the previous code.</p>\n\n<ol>\n  <li>All implementations implement <code>IDisposable</code>, but more specifically <code>IAsyncDisposable</code>.</li>\n  <li>We can use scope-based disposal, which disposed of our instances as soon as they fall out of scope. The use of <code>await using</code> allows us to do that.</li>\n  <li>All instances are disposed of, but do we need it?</li>\n</ol>\n\n<p>In the following sections, we’ll see what each dispose of and if we need to dispose of all instances in the code sample.</p>\n<h2 id=\"disposing-a-sqliteconnection\">Disposing a SqliteConnection</h2>\n\n<p>What does disposing of an instance of <code>SqliteConnection</code> entail? Looking through the codebase using my trusty decompiler, I found that calling dispose does a lot.</p>\n\n<pre><code class=\"language-csharp\">protected override void Dispose(bool disposing)  \n{  \n    if (disposing)  \n    {        \n        Close();  \n    }  \n    base.Dispose(disposing);  \n}\n\npublic override void Close()  \n{  \n    if (State != ConnectionState.Open)  \n    {        \n        return;  \n    }\n      \n    Transaction?.Dispose();  \n  \n    for (var i = _commands.Count - 1; i &gt;= 0; i--)  \n    {        \n        var reference = _commands[i];  \n        if (reference.TryGetTarget(out var command))  \n        {            \n            // NB: Calls RemoveCommand()  \n            command.Dispose();  \n        }        \n        else  \n        {  \n            _commands.RemoveAt(i);  \n        }    \n    }  \n    Debug.Assert(_commands.Count == 0);  \n  \n    _innerConnection!.Close();  \n    _innerConnection = null;  \n  \n    _state = ConnectionState.Closed;  \n    OnStateChange(_fromOpenToClosedEventArgs);  \n}\n</code></pre>\n\n<ol>\n  <li>It closes the current connection and sets the state to closed.</li>\n  <li>It disposes of any active transactions to the database.</li>\n  <li>It also disposes of any <code>DbCommand</code> instances associated with the connection and removes them from being tracked.</li>\n  <li>If there are any inner connections, they get disposed of as well.</li>\n</ol>\n\n<p>Hmm… commands get disposed of. Well, what does that do?</p>\n\n<h2 id=\"disposing-a-sqlitecommand\">Disposing a SqliteCommand</h2>\n\n<p>No surprise, but disposing of a <code>SqliteCommand</code> does a lot too! Let’s take a look at the implementation.</p>\n\n<pre><code class=\"language-csharp\">protected override void Dispose(bool disposing)  \n{  \n    DisposePreparedStatements(disposing);  \n  \n    if (disposing)  \n    {        \n        _connection?.RemoveCommand(this);  \n    }  \n    base.Dispose(disposing);  \n}\n\nprivate void DisposePreparedStatements(bool disposing = true)  \n{  \n    if (disposing &amp;&amp; DataReader != null)  \n    {        \n        DataReader.Dispose();  \n        DataReader = null;  \n    }  \n    if (_preparedStatements != null)  \n    {        \n        foreach ((var stmt, _) in _preparedStatements)  \n        {            \n            stmt.Dispose();  \n        }  \n        _preparedStatements.Clear();  \n    }  \n    _prepared = false;  \n}\n</code></pre>\n\n<ol>\n  <li>The command is removed from the associated connection</li>\n  <li>Any reader associated with the command is disposed.</li>\n  <li>All statements associated with the command are disposed of and cleared from a tracking collection.</li>\n</ol>\n\n<p>Interestingly, again, disposing of the command disposes the reader. Let’s keep going. What does that do?</p>\n\n<h2 id=\"disposing-a-sqlitedatareader\">Disposing a SqliteDataReader</h2>\n\n<p>We’re almost to the end. What happens when a <code>SqliteDataReader</code> gets disposed?</p>\n\n<pre><code class=\"language-csharp\">protected override void Dispose(bool disposing)  \n{  \n    if (!disposing || _closed)  \n    {        \n        return;  \n    }  \n    _command.DataReader = null;  \n  \n    _record?.Dispose();  \n    _record = null;  \n  \n    if (_stmtEnumerator != null)  \n    {        \n        try  \n        {  \n            while (NextResult())  \n            {            \n            }        \n        }        \n        catch  \n        {  \n        }    \n    }  \n    _stmtEnumerator?.Dispose();  \n  \n    _closed = true;  \n  \n    if (_closeConnection)  \n    {        \n        _command.Connection!.Close();  \n    }\n}\n</code></pre>\n\n<p>Here, disposing of the reader disposes of all the record instances currently part of the reader. The method will also disconnect from the command it is associated with. Also, in this case, the reader will close the connection if a boolean is set to true.</p>\n<h2 id=\"conclusion\">Conclusion</h2>\n\n<p>Following the chain of calls, calling <code>Dispose</code> on the <code>SqliteConnection</code> should be enough for most folks to reclaim the resources allocated by the initial code. That said, if you want to reclaim your resources “faster”, you can undoubtedly call the <code>Dispose</code> methods as soon as you’re done with the resource. Generally, I recommend calling dispose on derived instances from <code>SqliteConnection</code> if you use object-pooling, where the root instance is long-lived. This is a common practice in ORMs, which can help improve performance. Finally, if you’re using a dependency injection library, it already handles object disposal automatically for you. As always, check your code, use the decompiler, and learn how stuff works.</p>\n\n<p>As always, thanks for reading and sharing my posts with friends and colleagues. Cheers :)</p>\n",
      "Content": null,
      "Language": null,
      "Link": "https://khalidabuhakmeh.com/what-should-i-dispose-with-dotnet-database-connections"
    },
    {
      "FeedId": "https://khalidabuhakmeh.com/feed.xml",
      "ItemId": "https://khalidabuhakmeh.com/global-endpoint-filters-with-aspnet-core-minimal-apis",
      "Title": "Global Endpoint Filters with ASP.NET Core Minimal APIs",
      "PublishDate": "2023-10-24T00:00:00+00:00",
      "Summary": "<p>The ASP.NET Core technology stack works on the pipeline concept. A user request travels through the pipeline, where you have opportunities to handle the request in various forms. The approach to enhancing the pipeline in ASP.NET Core has been a mixture of Middleware and paradigm-specific filters. Filters for ASP.NET Core MVC give you MVC-specific idioms to work with, while Middleware typically works with the rawest elements of an <code>HttpContext</code>.</p>\n\n<p><strong><a href=\"/aspnet-core-minimal-api-endpoint-filters\">With Minimal APIs, you can implement the <code>IEndpointFilter</code> interface I wrote about previously</a>.</strong></p>\n\n<p>In this post, we’ll see a technique to apply the <code>IEndpointFilter</code> to all endpoints, similar to ASP.NET Core MVC’s global filters. As a bonus, it’s pretty straightforward.</p>\n\n<!--more-->\n\n<h2 id=\"why-not-middleware\">Why not Middleware?</h2>\n\n<p>Middleware in ASP.NET Core is designed to operate as a gate to incoming HTTP requests and outgoing HTTP responses. You could use the <code>IMiddleware</code> interface to process the request, but you’ll quickly find out you’re working with lower-level intrinsics than you might want. Let’s take a look at an implementation of a new Middleware.</p>\n\n<pre><code class=\"language-csharp\">public class MyMiddleware: IMiddleware  \n{  \n    public Task InvokeAsync(HttpContext context, RequestDelegate next)  \n    {        \n        throw new NotImplementedException();  \n    }\n}\n</code></pre>\n\n<p>You’ll quickly notice the use of <code>HttpContext</code> and the <code>RequestDelegate</code> types. These types can give you access to elements of the request pipeline you might need, but the accessing code can be verbose and opaque. In other words, you’ll quickly find your Middleware code exploding in complexity.</p>\n\n<p><strong>Middleware is an excellent tool for applying similar functionality across all ASP.NET Core development paradigms, including MVC, Razor Pages, Minimal APIs, and Blazor.</strong> To offer that breadth, middleware implementations must work at the lowest abstractions.</p>\n\n<p>On the other hand, the <code>IEndpointFilter</code> is explicitly designed to work with the latest concept of Endpoints, which includes Minimal APIs, MVC, and Razor Pages. Endpoints generally focus on inputs and outputs, with the pipeline responsible for executing those results. It’s easier to see this in the implementation of a filter.</p>\n\n<pre><code class=\"language-csharp\">public class ScreamingFilter: IEndpointFilter  \n{  \n    public async ValueTask&lt;object?&gt; InvokeAsync(  \n        EndpointFilterInvocationContext context,  \n        EndpointFilterDelegate next)  \n    {        \n        var result = await next(context);  \n        return result is string s   \n            ? $\"{s}!!!!\"   \n            : result;  \n    }\n}\n</code></pre>\n\n<p>Rather than working with <code>HttpContext</code>, we are working with the return value of our endpoint. That allows us to deal with objects and their properties. This opens up a world of possibilities regarding object inspection and enrichment that can be difficult to do with middleware.</p>\n\n<p>OK, enough theory. Let’s get to Global Endpoint Filters for Minimal APIs.</p>\n\n<h2 id=\"the-one-trick-that-makes-it-possible\">The One Trick That Makes It Possible</h2>\n\n<p>First of all, and I’ll be the first to admit it, this technique can seem “simple” on the surface, but it works surprisingly well.</p>\n\n<p><strong>You need a global’ Map’ group to get Global Endpoint Filters for Minimal APIs working.</strong> Let’s see this in action.</p>\n\n<pre><code class=\"language-csharp\">var builder = WebApplication.CreateBuilder(args);  \n  \nvar app = builder.Build();  \n\n// the magic 🪄\nvar global = app  \n    .MapGroup(string.Empty)  \n    .AddEndpointFilter&lt;ScreamingFilter&gt;();  \n  \nglobal.MapGet(\"/\", () =&gt; \"Hello World\");  \nglobal.MapGet(\"/hi\", () =&gt; \"Hi\");  \nglobal.MapGroup(\"/what\").MapGet(\"/now\", () =&gt; \"🤷\");  \n  \napp.Run();  \n  \npublic class ScreamingFilter: IEndpointFilter  \n{  \n    public async ValueTask&lt;object?&gt; InvokeAsync(  \n        EndpointFilterInvocationContext context,  \n        EndpointFilterDelegate next)  \n    {        \n        var result = await next(context);  \n        return result is string s   \n            ? $\"{s}!!!!\"   \n            : result;  \n    }\n}\n</code></pre>\n\n<p>The trick is to register all endpoints off of the root <code>MapGroup</code>. Each additional endpoint will now inherit the filters of the group. Since the <code>global</code> group has no route prefix, it doesn’t affect any paths of registered endpoints. The explicit type of <code>global</code> is <code>RouteGroupBuilder</code>, which implements <code>IEndpointRouteBuilder</code> and <code>IEndpointConventionBuilder</code>, which should give you access to the same functionality as registering a regular endpoint, including having additional sub-groups.</p>\n\n<p>Now, you have what are essentially global endpoint filters for all your minimal API endpoints. Pretty cool! Note that endpoint execution ordering will still apply. All “global” endpoint filters will execute first, then any filters applied directly to the endpoints.</p>\n\n<p>As always, thanks for reading my blog posts and for sharing my posts with friends and colleagues. Cheers :)</p>\n",
      "Content": null,
      "Language": null,
      "Link": "https://khalidabuhakmeh.com/global-endpoint-filters-with-aspnet-core-minimal-apis"
    },
    {
      "FeedId": "https://khalidabuhakmeh.com/feed.xml",
      "ItemId": "https://khalidabuhakmeh.com/razorslices-razor-views-with-aspnet-core-minimal-apis",
      "Title": "RazorSlices - Razor Views with ASP.NET Core Minimal APIs",
      "PublishDate": "2023-10-17T00:00:00+00:00",
      "Summary": "<p>With .NET 8 on the horizon, Minimal APIs continues to grow its offerings, slowly providing a similar feature set to the frameworks before, including ASP.NET Core MVC and Razor Pages. I was surprised when someone in the community (👋 Hi <a href=\"https://github.com/jchannon\">Johnathan Channon</a>) pointed me to a fascinating <a href=\"https://github.com/DamianEdwards/RazorSlices#no-intention-to-support\">RazorSlices</a> project. RazorSlices is written by <a href=\"https://github.com/DamianEdwards/RazorSlices/commits?author=DamianEdwards\">Damian Edwards</a>, an ASP.NET Core team member with a history of working with the Razor view engine. His goal is to bring Razor functionality to Minimal API adopters in a similar way that ASP.NET Core MVC, Razor Pages, and Blazor users enjoy today.</p>\n\n<p>In this post, we’ll see how to set up <a href=\"https://github.com/DamianEdwards/RazorSlices#no-intention-to-support\">RazorSlices</a> in your ASP.NET Core applications and think about the pros and cons of its usage.</p>\n\n<!--more-->\n\n<h2 id=\"getting-started-with-razorslices\">Getting Started with RazorSlices</h2>\n\n<p>In a Minimal API project, start by installing the RazorSlices package. You can do this by using the <code>dotnet add package RazorSlices</code> command or by adding the appropriate <code>PackageReference</code> in your <code>.csproj</code> file.</p>\n\n<pre><code class=\"language-xml\">&lt;PackageReference Include=\"RazorSlices\" Version=\"0.7.0\" /&gt;\n</code></pre>\n\n<p>Next, create a folder at the root of your ASP.NET Core application. It can be named anything you like. I chose <code>Slices</code> as it was what the documentation recommended. This directory is where you’ll place all your Razor views to be used in your Minimal API endpoints.</p>\n\n<p>Within the <code>Slices</code> folder, create a new file named <code>_ViewImports.cshtml</code>. The view imports file allows you to create a shared context for all views within the folder, including namespaces, base classes, and tag helpers. Here’s the contents of my file.</p>\n\n<pre><code class=\"language-razor\">@inherits RazorSliceHttpResult  \n  \n@using System.Globalization;  \n@using Microsoft.AspNetCore.Razor;  \n@using Microsoft.AspNetCore.Http.HttpResults;  \n  \n@tagHelperPrefix __disable_tagHelpers__:  \n@removeTagHelper *, Microsoft.AspNetCore.Mvc.Razor\n</code></pre>\n\n<p>You’ll notice two strange things when looking at this file:</p>\n\n<ol>\n  <li>The <code>@inherits</code> value is of <code>RazorSliceHttpResult</code> to work with the <code>IResult</code> type used my Minimal APIs.</li>\n  <li>Tag helpers are removed and obfuscated. That’s because they’re not supported in this model. Only expect to port a Razor Pages implementation over to RazorSlices by making some modifications or concessions.</li>\n</ol>\n\n<p>Next, you’ll want to create a new <code>Hello.cshtml</code> view in the <code>Slices</code> folder.</p>\n\n<pre><code class=\"language-razor\">@inherits RazorSliceHttpResult&lt;DateTime&gt;  \n&lt;!DOCTYPE html&gt;  \n&lt;html lang=\"en\"&gt;  \n&lt;head&gt;  \n    &lt;meta charset=\"utf-8\"&gt;  \n    &lt;title&gt;Hello from Razor Slices!&lt;/title&gt;  \n&lt;/head&gt;  \n&lt;body&gt;  \n&lt;p&gt;  \n    Hello from Razor Slices! The time is @Model  \n&lt;/p&gt;  \n&lt;/body&gt;  \n&lt;/html&gt;\n</code></pre>\n\n<p>Note that the view also uses the <code>@inherit</code> attribute, but this time uses a generic type definition. The generic type argument is the type of the <code>@Model</code> instance.</p>\n\n<p>Finally, you’ll want to use the view in your Minimal API endpoint.</p>\n\n<pre><code class=\"language-csharp\">var builder = WebApplication.CreateBuilder(args);  \nvar app = builder.Build();  \n  \napp.MapGet(\"/\", () =&gt;  \n    Results.Extensions.RazorSlice(\"/Slices/Hello.cshtml\", DateTime.Now));  \n  \napp.Run();\n</code></pre>\n\n<p>And that’s it! You are now rendering Razor views through your Minimal API endpoint.</p>\n\n<p>For folks using JetBrains tooling, go a little extra and install <strong>JetBrains.Annotations</strong>.</p>\n\n<pre><code class=\"language-console\">dotnet add package JetBrains.Annotations\n</code></pre>\n\n<p>Then, modify your code to look like the following.</p>\n\n<pre><code class=\"language-csharp\">using JetBrains.Annotations;  \n  \nvar builder = WebApplication.CreateBuilder(args);  \nvar app = builder.Build();  \n  \napp.MapGet(\"/\", () =&gt;  \n    Slice(\"/Slices/Hello.cshtml\", DateTime.Now));  \n  \napp.Run();  \n  \nIResult Slice&lt;T&gt;([AspMvcView]string viewPath, T model)  \n    =&gt; Results.Extensions.RazorSlice(viewPath, model);\n</code></pre>\n\n<p>The benefit here is you can now <kbd>Ctrl</kbd> + Click through to your view right from the C# code. That should help your productivity. This works because you need to reference RazorSlice views by the absolute path, and JetBrains Rider and ReSharper undertand that behavior. Pretty awesome, right?</p>\n\n<h2 id=\"the-pros-of-razorslices\">The Pros of RazorSlices</h2>\n\n<p>The most obvious benefit here is that you can now use Razor to generate HTML results in your Minimal API endpoints. I might be biased, but I love the Razor syntax and its benefits to the web development experience.</p>\n\n<p>Another significant benefit is your Razor views can also use the <code>@inject</code> attribute, giving you access to dependencies in the HTML rendering process.</p>\n\n<p>If performance is a concern of yours, there is a <code>SliceFactory</code>, that can help reduce the cost associated with looking up views. This can be an easy win for folks looking to eek out more performance. Speaking of performance, there are plans to add Ahead of Time (AOT) support.</p>\n\n<h2 id=\"the-cons-of-razorslices\">The Cons of RazorSlices</h2>\n\n<p>Let’s talk about the drawbacks of using RazorSlices, because there are a few.</p>\n\n<p>As mentioned, if you’re looking for a one-to-one replacement for MVC or Razor Pages, you will be disappointed. It’s meant to be something other than a drop-in replacement for either approach. This is evident when using features like TagHelpers or View Components.</p>\n\n<p>The library has no current support for partial views, making view composition and componentization impossible. It may find its way into the package but is currently unavailable. This includes the view infrastructure associated with MVC, like layouts and layout sections. As I said previously, this is not a drop-in replacement.</p>\n\n<p>A new paradigm means leaving behind the past paradigm. If you depend on third-party Razor libraries, they may not work in this current iteration.</p>\n\n<h2 id=\"conclusion\">Conclusion</h2>\n\n<p>RazorSlices is worth checking out if you’re looking for a way to render HTML one step above string interpolation in your API endpoints. It provides the basics of what you love about Razor syntax, including expressions, control structures, looping, and code blocks. For most, that’s going to be enough to accomplish any goal. That said, if you’re looking for an ASP.NET Core MVC replacement, this library is far from being that, but that’s OK.</p>\n\n<p>Check out the library at <a href=\"https://github.com/DamianEdwards/RazorSlices\">RazorSlices</a> and let me know your thoughts. As always, thanks for reading and sharing my blog posts.</p>\n\n",
      "Content": null,
      "Language": null,
      "Link": "https://khalidabuhakmeh.com/razorslices-razor-views-with-aspnet-core-minimal-apis"
    },
    {
      "FeedId": "https://khalidabuhakmeh.com/feed.xml",
      "ItemId": "https://khalidabuhakmeh.com/how-to-use-embedded-resources-in-dotnet",
      "Title": "How To Use Embedded Resources in .NET",
      "PublishDate": "2023-10-10T00:00:00+00:00",
      "Summary": "<p>While code is inarguably the bedrock of any software application, it’s not the only thing necessary to deliver a user experience. Whether you’re building a website, desktop application, or mobile app, you’ll likely need non-code assets. These assets include images, videos, third-party file formats, and more. Additionally, you should include localization values to support a variety of languages and grow your user base.</p>\n\n<p>This post will explore embedded resources in .NET and point to some material I’ve written for JetBrains about localizing your ASP.NET applications.</p>\n\n<!--more-->\n\n<h2 id=\"embedded-resources\">Embedded Resources</h2>\n\n<p>An embedded resource is any file you want to include in your final built assembly. This can include anything from text files to binary formats like images or videos. Embedded resources use the <code>EmbeddedResource</code> MSBuild element, which the compiler reads to transform project assets into binary embedded in your assemblies. Here are a few examples.</p>\n\n<pre><code class=\"language-xml\">&lt;ItemGroup&gt;  \n  &lt;EmbeddedResource Include=\"Embedded\\test.txt\" /&gt;  \n  &lt;None Remove=\"Embedded\\person.json\" /&gt;  \n  &lt;EmbeddedResource Include=\"Embedded\\person.json\" /&gt;  \n  &lt;EmbeddedResource Update=\"Embedded\\Values.resx\"&gt;  \n    &lt;Generator&gt;ResXFileCodeGenerator&lt;/Generator&gt;  \n    &lt;LastGenOutput&gt;Values.Designer.cs&lt;/LastGenOutput&gt;  \n  &lt;/EmbeddedResource&gt;\n&lt;/ItemGroup&gt;\n</code></pre>\n\n<p>Once an asset is embedded, it is given a unique name in the resource manifest, which is typically similar to its file path but is overridable.</p>\n\n<p>Remember, assets are stored within the <code>Assembly</code>, which means you must know which assembly has your resources to get the names from the manifest. Here is an example.</p>\n\n<pre><code class=\"language-csharp\">var names =   \n\tSystem  \n\t.Reflection  \n\t.Assembly  \n\t.GetExecutingAssembly()  \n\t.GetManifestResourceNames();  \n  \nforeach (var name in names)  \n{  \n    Console.WriteLine(name);  \n}\n</code></pre>\n\n<p>Combined with our <code>ItemGroup</code> from above, we’d get the following output.</p>\n\n<pre><code class=\"language-text\">BedTime.Embedded.Values.resources\nBedTime.Embedded.test.txt\nBedTime.Embedded.person.json\n</code></pre>\n\n<p>You may have also noticed the use of <code>ResXFileCodeGenerator</code>. The <code>Resx</code> file format is a unique format used by .NET applications to store mostly <code>string</code> values, but it can also be adapted to store binary formats like images in <code>base64</code> strings. I don’t recommend it, but it’s possible.</p>\n\n<p>The <code>.resx</code> format is best suited for localization, <a href=\"https://www.jetbrains.com/dotnet/guide/tutorials/localization/\">which I wrote about previously for JetBrains here. Check it out.</a> It also generates a C# class for accessing values for straightforward usage. The format is also used by many of the features in .NET, including ASP.NET Core.</p>\n\n<h2 id=\"accessing-embedded-resources-from-c\">Accessing Embedded Resources from C#</h2>\n\n<p>I recommend folks access embedded resources by writing <code>static</code> wrapper classes that formalize the process of accessing assembly artifacts. let’s look at how we might access one of the files from the previous section, and then we’ll create the wrapper class for all resources.</p>\n\n<pre><code class=\"language-csharp\">var info = Assembly.GetExecutingAssembly().GetName();  \nvar name = info.Name;  \nusing var stream = Assembly  \n    .GetExecutingAssembly()  \n    .GetManifestResourceStream($\"{name}.Embedded.test.txt\")!;  \nusing var streamReader = new StreamReader(stream, Encoding.UTF8);  \nreturn streamReader.ReadToEnd();\n</code></pre>\n\n<p>Resource names will typically follow this convention <code>(Assembly Name).(Folders).(Filename)</code> unless an explicit name exists. You can also use the <code>GetManifestResourceNames</code> method to find a resource name if you can’t figure it out by convention.</p>\n\n<p>Now, let’s wrap all our resources in a static class.</p>\n\n<pre><code class=\"language-csharp\">using System.Reflection;\nusing System.Text;\nusing System.Text.Json;\n\nnamespace BedTime.Embedded;\n\npublic static class Resources\n{\n    public static class Embedded\n    {\n        public static string TestTxt\n        {\n            get\n            {\n                var info = Assembly.GetExecutingAssembly().GetName();\n                var name = info.Name;\n                using var stream = Assembly\n                    .GetExecutingAssembly()\n                    .GetManifestResourceStream($\"{name}.Embedded.test.txt\")!;\n                using var streamReader = new StreamReader(stream, Encoding.UTF8);\n                return streamReader.ReadToEnd();\n            }\n        }\n\n        public static Person Person\n        {\n            get\n            {\n                var info = Assembly.GetExecutingAssembly().GetName();\n                var name = info.Name;\n                using var stream = Assembly\n                    .GetExecutingAssembly()\n                    .GetManifestResourceStream($\"{name}.Embedded.person.json\")!;\n                return JsonSerializer.Deserialize&lt;Person&gt;(stream)!;\n            }\n        }\n    }\n}\n\npublic record Person(string Name, string[] Hobbies)\n{\n    public override string ToString()\n    {\n        return $\"{Name} likes {Hobbies.ToOxfordComma()}\";\n    }\n};\n\npublic static class EnumerableExtensions\n{\n    public static string ToOxfordComma(this string[]? items)\n    {\n        var result = items?.Length switch\n        {\n            // three or more items\n            &gt;=3 =&gt; $\"{string.Join(\", \", items[..^1])}, and {items[^1]}\",\n            // 1 item or 2 items\n            not null =&gt; string.Join(\" and \", items),\n            // null\n            _ =&gt; string.Empty\n        };\n\n        return result;\n    }\n}\n</code></pre>\n\n<p>You can see why I recommend this route. You have more control over how you read values from the assembly and how to transform them into something useful. In the case of <code>Person</code>, it’s a JSON file that we ultimately want to turn into an instance of a class. It’s also much nicer to use in your code.</p>\n\n<pre><code class=\"language-csharp\">Console.WriteLine(Resources.Embedded.TestTxt);  \nConsole.WriteLine(Resources.Embedded.Person);\n</code></pre>\n\n<p>You can also add caching of elements to reduce resource-intensive actions like serialization and deserialization.</p>\n\n<h2 id=\"conclusion\">Conclusion</h2>\n\n<p>Embedded resources are a nice feature of the .NET programming stack and can be used to deliver application-critical assets bundled alongside your code. This reduces the need to read files from disk or deal with network calls to retrieve assets. This will increase the size of your assemblies, so use this approach sparingly and with caution. I also recommend hand-writing your embedded resource access to give you more granular control over the final result and to reduce conversion noise in your more critical code.</p>\n\n<p>I hope you found this post helpful, and thanks, as always, for reading.</p>\n",
      "Content": null,
      "Language": null,
      "Link": "https://khalidabuhakmeh.com/how-to-use-embedded-resources-in-dotnet"
    },
    {
      "FeedId": "https://khalidabuhakmeh.com/feed.xml",
      "ItemId": "https://khalidabuhakmeh.com/how-to-display-dotnet-collections-with-the-oxford-comma",
      "Title": "How To Display .NET Collections with the Oxford Comma",
      "PublishDate": "2023-10-03T00:00:00+00:00",
      "Summary": "<p>Taking a .NET collection and displaying the items in a human-readable format is something we all ultimately have to tackle in our applications. While we could spit out values uniformly separated by a character, that’s a very uncivilized approach. I’ll go as far as to say that the comma (,) and the use of “and” separates us from the animals. The peak of human evolution is the <a href=\"https://www.grammarbook.com/blog/commas/oxford-comma/\">Oxford Comma</a>, and it’s all been downhill from that moment.</p>\n\n<p>In this short post, we’ll see how to take a .NET collection and transform it into an Oxford Comma sentence using pattern matching.</p>\n\n<!--more-->\n\n<h2 id=\"the-oxford-comma-is-life\">The Oxford Comma is Life</h2>\n\n<p>For those unfamiliar with the Oxford Comma rule, it’s a grammatical rule that says a final comma can be used in a series. For example, consider the following two sentences:</p>\n\n<pre><code>How Harry Reid, a terrorist interrogator and the \nsinger from Blink-182 took UFOs mainstream.\n\nHow Harry Reid, a terrorist interrogator, and the\nsinger from Blink-182 took UFOs mainstream.\n</code></pre>\n\n<pre><code>I am visiting California to see my friends, Mickey Mouse and Dr. Dre.\n\nI am visiting California to see my friends, Mickey Mouse, and Dr Dre.\n</code></pre>\n\n<p>These two sentences’ meanings change entirely due to a well-placed comma.</p>\n\n<p>When displaying values in code, you may want to format it for your users naturally, and picking the Oxford comma is the most natural form.</p>\n\n<p>Let’s see what tests for an Oxford Comma extension might look like.</p>\n\n<h2 id=\"oxford-comma-tests-and-extension-method\">Oxford Comma Tests and Extension Method</h2>\n\n<p>Let’s start with tests to see what use cases we must account for in our test fixture.</p>\n\n<pre><code class=\"language-csharp\">using Xunit.Abstractions;\n  \npublic class OxfordCommaTests  \n{  \n    private readonly ITestOutputHelper _output;  \n  \n    public OxfordCommaTests(ITestOutputHelper output)  \n        =&gt; _output = output;\n\n    [Fact]  \n    public void Zero_Items()  \n    {  \n        Assert.Equal(\"\", Array.Empty&lt;string&gt;().ToOxfordComma());  \n        Assert.Equal(\"\", (null as string[]).ToOxfordComma());\n    }\n  \n    [Fact]  \n    public void One_Item()  \n    {\n        var items = new[] { \"Cats\" };  \n        var result = items.ToOxfordComma();  \n    \n        _output.WriteLine(result);  \n    \n        Assert.Equal(\"Cats\", result);  \n    }  \n    \n    [Fact]  \n    public void Two_Items()  \n    {        \n        var items = new[] { \"Cats\", \"Dogs\" };  \n        var result = items.ToOxfordComma();  \n  \n        _output.WriteLine(result);  \n  \n        Assert.Equal(\"Cats and Dogs\", result);  \n    }  \n    \n    [Fact]  \n    public void Three_Items()  \n    {        \n        var items = new[] { \"Cats\", \"Dogs\", \"Capybara\" };  \n        var result = items.ToOxfordComma();  \n  \n        _output.WriteLine(result);  \n  \n        Assert.Equal(\"Cats, Dogs, and Capybara\", result);  \n    }\n}\n</code></pre>\n\n<p>Our extension method must account for four scenarios when dealing with collections.</p>\n\n<ol>\n  <li>No items</li>\n  <li>One item</li>\n  <li>Two items</li>\n  <li>Three or more items</li>\n</ol>\n\n<p>Let’s see how I implemented this extension method.</p>\n\n<pre><code class=\"language-csharp\">public static class EnumerableExtensions  \n{  \n    public static string ToOxfordComma(this string[]? items)  \n    {        \n        var result = items?.Length switch  \n        {  \n            // three or more items  \n            &gt;=3 =&gt; $\"{string.Join(\", \", items[..^1])}, and {items[^1]}\",  \n            // 1 item or 2 items  \n            not null =&gt; string.Join(\" and \", items),  \n            // null  \n            _ =&gt; string.Empty  \n        };  \n    \n        return result;  \n    }\n}\n</code></pre>\n\n<p>I’m using pattern matching here. There are some interesting points for folks unfamiliar with the C# features in this code block:</p>\n\n<ul>\n  <li>I use range operators to pick out the items as necessary.</li>\n  <li>I use <code>string.Join</code> behavior to handle two use cases.</li>\n  <li>I use the <code>_</code> discard to handle the default case of <code>null</code>.</li>\n</ul>\n\n<p>Pretty cool if you ask me.</p>\n\n<h2 id=\"conclusion\">Conclusion</h2>\n\n<p>There you have it. Using some newer C# features, we can handle the Oxford comma in a few lines of code. So, consider this extension method next time you consider displaying values to your users.</p>\n\n<p>Thanks for reading this post and sharing it with your friends and colleagues. Cheers.</p>\n\n",
      "Content": null,
      "Language": null,
      "Link": "https://khalidabuhakmeh.com/how-to-display-dotnet-collections-with-the-oxford-comma"
    },
    {
      "FeedId": "https://khalidabuhakmeh.com/feed.xml",
      "ItemId": "https://khalidabuhakmeh.com/how-to-fix-feature-folders-view-errors-with-jetbrains-annotations-rider-and-resharper",
      "Title": "How To Fix Feature Folders View Errors with JetBrains Annotations (Rider and ReSharper)",
      "PublishDate": "2023-09-26T00:00:00+00:00",
      "Summary": "<p>The Model-View-Controller pattern is so common that every technology stack has an implementation of it. ASP.NET developers have been working with the pattern since 2009. Here are a few other things popular in 2009 to remind you of your rapid decay: The Hannah Montana Movie, FarmVille, Black Eyed Peas, and Avatar the Movie. But like everything, there’s a moment to reflect on our decisions and choose a different approach. For ASP.NET Core developers, that introspection might lead them to move away from the MVC style towards the pattern of Feature Folders.</p>\n\n<p>In this post, we’ll quickly discuss the Feature Folders pattern and how you can get your JetBrains tooling of JetBrains Rider or ReSharper to play nicely with your newly adopted approach.</p>\n\n<!--more-->\n\n<h2 id=\"what-are-feature-folders\">What Are Feature Folders?</h2>\n\n<p>In an MVC controller, you’ll typically have a folder structure style that spreads the three parts of the MVC pattern across similarly labeled folders. When working with ASP.NET Core, you have a <code>Views</code> and <code>Controllers</code> folder, and developers typically choose a “Models” folder or might even create a <code>Core</code> project to hold implementations. While this approach is popular, it can lead to solution sprawl, where it takes the developer looking in multiple locations to create a single feature.</p>\n\n<p><strong>Feature Folders</strong> states that it makes more sense to include all the MVC elements in a clearly labeled folder for each unique feature of a web application. For example, a “login” feature would include the controller, the model and view models, and the Razor views for that feature. Having everything organized in a single folder helps developers reduce sprawl, makes it easier to manage features, and ultimately helps teams organize around a feature mindset.</p>\n\n<p>Like all styles, it’s up to you and your team whether these benefits materialize and whether you think they work.</p>\n\n<p>The one drawback to this style change is that it’s typically not understood by .NET tooling by default. Have no fear. We’re about to fix that.</p>\n\n<h2 id=\"jetbrains-annotations-and-views\">JetBrains Annotations and Views</h2>\n\n<p>So, you’ve decided to start using Feature Folders. Great! The first step is to start moving your files around in your solution. From the root of your web application, the <code>Features</code> folder will likely look something like this</p>\n\n<pre><code class=\"language-text\">- Features\n  - _ViewStart.cshtml\n  - Home\n    - HomeController.cs\n    - Index.cshtml\n    - Privacy.cshtml\n</code></pre>\n\n<p>We have a <code>Home</code> feature responsible for showing the homepage and associated content.</p>\n\n<p>The next step is to tell ASP.NET Core MVC how to find the new location of the relocated views. We can do that by configuring the <code>RazorViewEngineOptions</code> instance.</p>\n\n<pre><code class=\"language-csharp\">// feature folders  \nbuilder.Services.Configure&lt;RazorViewEngineOptions&gt;(rvo =&gt;  \n{  \n    rvo.ViewLocationFormats.Add(\"~/Features/{1}/{0}.cshtml\");  \n});\n</code></pre>\n\n<p><strong>Note you may need more entries than a single one, depending on your implementation of Feature Folders.</strong></p>\n\n<p>That’s it! JetBrains Rider and ReSharper should start finding your new views. You might be asking yourself, well, how?</p>\n\n<p>If we look at the documentation within JetBrains Rider, you’ll see an External Annotation of <code>AspMvcViewLocationFormat</code> added to the <code>ViewLocationFormats</code> collection.</p>\n\n<pre><code class=\"language-csharp\">[AspMvcViewLocationFormat(...)] \npublic IList&lt;string&gt; ViewLocationFormats { get; }\n</code></pre>\n\n<p>This tells JetBrains Rider that this collection and any item added to it contains view locations. Registering a new location tells ASP.NET Core MVC and our JetBrains tools where to find the new Feature Folder views.</p>\n\n<p>What do you do if you use a NuGet library for Feature Folders? You can do one of two things:</p>\n\n<ol>\n  <li>Use <a href=\"https://www.jetbrains.com/help/resharper/Code_Analysis__External_Annotations.html\">External Annotations</a> if possible</li>\n  <li>Use JetBrains Annotations in your web project</li>\n</ol>\n\n<p>I recommend using the <a href=\"https://www.nuget.org/packages/JetBrains.Annotations/\">JetBrains.Annotations</a> package, as it’s much more straightforward. As seen previously, JetBrains Rider and ReSharper use these annotations to get more information about your codebase to enable features. You can also apply these attributes at the assembly level. In this case, we’ll tell the ReSharper engine where to find views. Once the JetBrains package is installed, add the following line anywhere in your solution.</p>\n\n<pre><code class=\"language-csharp\">[assembly: AspMvcViewLocationFormat(\"~/Features/{1}/{0}.cshtml\")]\n</code></pre>\n\n<p>This string matches the same <code>ViewLocationFormat</code> we added in our registration. Add as many of these attributes as it takes to match the library you’re using. JetBrains tooling should now show no errors and let you navigate directly to matching views from a controller.</p>\n\n<h2 id=\"conclusion\">Conclusion</h2>\n\n<p>JetBrains tooling is world-class, and the developers have ingeniously created flexibility to give you the power to develop apps how you want to. By using methods or assemblies decorated with the <code>AspMvcViewLocationFormat</code> attribute, you can guide the tools to the views your application uses.</p>\n\n<p>As always, thanks for reading and I hope this post helped you make your development experience that much better.</p>\n",
      "Content": null,
      "Language": null,
      "Link": "https://khalidabuhakmeh.com/how-to-fix-feature-folders-view-errors-with-jetbrains-annotations-rider-and-resharper"
    },
    {
      "FeedId": "https://khalidabuhakmeh.com/feed.xml",
      "ItemId": "https://khalidabuhakmeh.com/systemtextjson-jsonconverter-test-helpers",
      "Title": "System.Text.Json JsonConverter Test Helpers",
      "PublishDate": "2023-09-19T00:00:00+00:00",
      "Summary": "<p>In a perfect world, you’d have to write zero <code>JsonConverter</code> classes, as all JSON data would serialize and deserialize as expected. Unfortunately, we live in a world where folks make bespoke formatting decisions that can boggle the mind. For folks using <code>System.Text.Json</code>, you’ll likely have to write a <code>JsonCoverter</code> to deal with these choices. When writing converters, you’ll want a test suite to ensure you’ve caught all the edge cases and to limit exceptions.</p>\n\n<p>In this post, I’ll provide extension methods that make it a breeze to test any <code>JsonConverter</code> and a bonus class that makes it simpler to deal with double-quoting values.</p>\n\n<!--more-->\n\n<h2 id=\"the-json-converter-example\">The JSON Converter Example</h2>\n\n<p>Before we see the extension methods in action, let’s derive a <code>JsonConverter</code> definition.</p>\n\n<pre><code class=\"language-csharp\">using System.Globalization;\nusing System.Text.Json;\nusing System.Text.Json.Serialization;\n\nnamespace ConverterTests;\n\npublic class DateTimeConverter : JsonConverter&lt;DateTime&gt;\n{\n    public string Format { get; }\n\n    public DateTimeConverter(string format)\n    {\n        Format = format;\n    }\n\n    public override DateTime Read(\n        ref Utf8JsonReader reader,\n        Type typeToConvert,\n        JsonSerializerOptions options)\n    {\n        if (reader.TokenType == JsonTokenType.String)\n        {\n            var dateString = reader.GetString();\n            if (DateTime.TryParseExact(\n                    dateString, \n                    Format , \n                    CultureInfo.InvariantCulture, \n                    DateTimeStyles.None,\n                    out var result))\n            {\n                return result;\n            }\n        }\n\n        throw new JsonException();\n    }\n\n    public override void Write(\n        Utf8JsonWriter writer, \n        DateTime value,\n        JsonSerializerOptions options)\n    {\n        var token = value.ToString(Format);\n        writer.WriteStringValue(token);\n    }\n}\n</code></pre>\n\n<p>Every <code>JsonConverter</code> has a <code>Read</code> and <code>Write</code> method. The read method allows you to process the appropriate token into the destination target. In this example, we’re taking a string with a particular date and time format and converting it into a <code>DateTime</code> instance. For the <code>Write</code> method, we use the same format to write the string value to the <code>UTF8JsonWriter</code> instance. Implementing either method depends on your use case and whether you’re serializing, deserializing, or performing both actions.</p>\n\n<p>Let’s get to what a test looks like for this converter.</p>\n\n<h2 id=\"writing-tests-for-json-converters\">Writing Tests for Json Converters</h2>\n\n<p>Let’s take a look at the “ideal” test for executing the <code>Read</code> and <code>Write</code> methods. Note, these are extension methods, and the code is not calling the methods directly.</p>\n\n<pre><code class=\"language-csharp\">private readonly DateTimeConverter _sut = new(\"yyyy-MM-dd H:mm\");\n\n[Fact]  \npublic void Can_read_string_value_as_datetime()  \n{  \n    var result = _sut.Read(\"\\\"2023-08-01 6:00\\\"\");  \n    Assert.Equal(new(2023, 8, 1, 6, 0, 0), result);  \n}\n\n[Fact]  \npublic void Can_write_datetime_as_string()  \n{  \n    var result = _sut.Write(new(2023, 8, 1, 6, 0, 0));  \n    Assert.Equal(\"\\\"2023-08-01 6:00\\\"\", result);  \n}\n</code></pre>\n\n<p>Oooo, so lovely. How did I accomplish such sweet tests? Well, it’s these extension methods.</p>\n\n<pre><code class=\"language-csharp\">using System.Text;\nusing System.Text.Json;\nusing System.Text.Json.Serialization;\n\nnamespace ConverterTests;\n\npublic static class JsonConverterTestExtensions\n{\n    public static TResult? Read&lt;TResult&gt;(\n        this JsonConverter&lt;TResult&gt; converter, \n        string token,\n        JsonSerializerOptions? options = null)\n    {\n        options ??= JsonSerializerOptions.Default;\n        var bytes = Encoding.UTF8.GetBytes(token);\n        var reader = new Utf8JsonReader(bytes);\n        // advance to token\n        reader.Read();\n        var result = converter.Read(ref reader, typeof(TResult), options);\n        // did we get the result?\n        return result;\n    }\n\n    public static (bool IsSuccessful, TResult? Result) TryRead&lt;TResult&gt;(\n        this JsonConverter&lt;TResult&gt; converter,\n        string token,\n        JsonSerializerOptions? options = null)\n    {\n        try\n        {\n            var result = Read(converter, token, options);\n            return (true, result);\n        }\n        catch (Exception)\n        {\n            return (IsSuccessful: false, Result: default);\n        }\n    }\n\n    public static string Write&lt;T&gt;(\n        this JsonConverter&lt;T&gt; converter, \n        T value,\n        JsonSerializerOptions? options = null)\n    {\n        options ??= JsonSerializerOptions.Default;\n        using var ms = new MemoryStream();\n        using var writer = new Utf8JsonWriter(ms);\n        converter.Write(writer, value, options);\n        writer.Flush();\n        var result = Encoding.UTF8.GetString(ms.ToArray());\n        return result;\n    }\n\n    public static (bool IsSuccessful, string? Result) TryWrite&lt;T&gt;(\n        this JsonConverter&lt;T&gt; converter,\n        T value,\n        JsonSerializerOptions? options = null)\n    {\n        try\n        {\n            var result = Write(converter, value, options);\n            return (true, result);\n        }\n        catch\n        {\n            return (false, null);\n        }\n    }\n}\n</code></pre>\n\n<p>These extensions have <code>Read</code>, <code>TryRead</code>, <code>Write</code>, and <code>TryWrite</code> methods to reduce the boilerplate code you might add to your tests.</p>\n\n<h2 id=\"double-quoting-json-tokens\">Double Quoting JSON Tokens</h2>\n\n<p>You may have noticed in the tests above that tokens need to be double-quoted. This can be unpleasant, especially when you tweak values as you write more tests. That’s why I created a <code>Quote</code> class that utilized <code>explicit</code> and <code>implicit</code> cast operators to double-quote any value.</p>\n\n<pre><code class=\"language-csharp\">namespace ConverterTests;  \n  \npublic class Quote  \n{  \n    private readonly object _value;  \n  \n    private Quote(object value)   \n        =&gt; _value = value;  \n  \n    public static explicit operator Quote(string value)   \n        =&gt; new(value);  \n  \n    public static implicit operator string(Quote value)   \n        =&gt; value.ToString();  \n  \n    public override string ToString()   \n        =&gt; $\"\\\"{_value}\\\"\";  \n}\n</code></pre>\n\n<p>Let’s see it in action.</p>\n\n<pre><code class=\"language-csharp\">[Fact]  \npublic void Can_read_string_value_as_datetime()  \n{  \n    var result = _sut.Read((Quote)\"2023-08-01 6:00\");  \n    Assert.Equal(new(2023, 8, 1, 6, 0, 0), result);  \n}\n</code></pre>\n\n<p>Now it should be easier to manage your values without escaping any double quotes.</p>\n\n<h2 id=\"conclusion\">Conclusion</h2>\n\n<p>The <code>JsonConverter</code> class is a necessary part of working with <code>System.Text.Json</code> and writing tests around your implementations is a must. I hope these extension methods make it easier for you and your team to maintain your implementations.</p>\n\n<p>Cheers. Thanks for reading and sharing my blog posts with friends and colleagues.</p>\n",
      "Content": null,
      "Language": null,
      "Link": "https://khalidabuhakmeh.com/systemtextjson-jsonconverter-test-helpers"
    },
    {
      "FeedId": "https://khalidabuhakmeh.com/feed.xml",
      "ItemId": "https://khalidabuhakmeh.com/dumb-developer-tricks-fizz-buzz-with-csharp-12-and-polly",
      "Title": "Dumb Developer Tricks - Fizz Buzz with C# 12 and Polly",
      "PublishDate": "2023-09-12T00:00:00+00:00",
      "Summary": "<p>One of the more fun aspects of working with any programming language is writing code you probably shouldn’t. Why write something clever when doing the unexpected can help give you a new appreciation of what’s possible? As a bonus, now that AI companies are scraping my blog posts for their benefit, I might as well spread as much “dumb” code as possible 😅. So next time you’re interviewing a potential candidate for a position and ask, <strong><em>“What the f@#% is this?!”</em></strong> you’ll know who to thank, sincerely, me.</p>\n\n<p>In this post, we’ll take the commonly used <a href=\"https://en.wikipedia.org/wiki/Fizz_buzz\">Fizz Buzz problem</a> and take it to the extreme limits of “oh no, don’t do that” by using exceptions for messaging, and <a href=\"https://www.thepollyproject.org/\">Polly</a>, the popular is a .NET resilience and transient-fault-handling library, to display our results. We’ll also use C# 12 features in the latest .NET 8 SDK. Let’s get started.</p>\n\n<!--more-->\n\n<h2 id=\"the-fizz-buzz-solution\">The Fizz Buzz Solution</h2>\n\n<p>For folks unfamiliar with <strong>Fizz Buzz</strong>, it’s a straightforward problem with a clear objective. Given an enumeration of numbers (1, 2, 3…), you must output messages when a particular criterion is met:</p>\n\n<ul>\n  <li>When a number is divisible by <strong>3</strong>, output <strong>Fizz</strong></li>\n  <li>When a number is divisible by <strong>5</strong>, output <strong>Buzz</strong></li>\n  <li>When a number is divisible by both <strong>3</strong> and <strong>5</strong>, output <strong>FizzBuzz</strong></li>\n</ul>\n\n<p>It’s a problem designed to see if a software developer has a core set of competencies without being a “gotcha” interview trap. To solve this problem, you’ll typically have to use constructs such as iteration, variables, branching logic, and an output format (usually the console).</p>\n\n<p>Sure, we could do it the “easy” way, but let’s take it up a notch. Let’s first install Polly into a .NET Console application to get started.</p>\n\n<pre><code class=\"language-text\">dotnet add package Polly\n</code></pre>\n\n<p>Next, let’s write the solution and explain what’s happening.</p>\n\n<pre><code class=\"language-csharp\">using Polly;  \nusing static System.Console;  \nusing static System.TimeSpan;  \n  \nvar count = 0;  \n  \nPolicy  \n    .Handle&lt;Exception&gt;()  \n    .WaitAndRetryForever(  \n        _ =&gt; FromMilliseconds(250),  \n        (ex, _, _) =&gt; WriteLine(ex.Message)  \n    )    \n    .Execute(() =&gt;  \n    {  \n        count++;        \n        count = (count % 3, count % 5) switch  \n        {  \n            (0, 0) =&gt; throw new FizzBuzzException(),  \n            (0, _) =&gt; throw new FizzException(),  \n            (_, 0) =&gt; throw new BuzzException(),  \n            _ =&gt; throw new NumberException(count)  \n        };    \n    });\n\npublic class FizzException() : Exception(\"Fizz\");  \npublic class BuzzException() : Exception(\"Buzz\");  \npublic class FizzBuzzException() : Exception(\"FizzBuzz\");  \npublic class NumberException(int number): Exception(number.ToString());\n</code></pre>\n\n<p>A few neat tricks in this codebase show how “elite” I am at solving the most mundane of problems.</p>\n\n<ol>\n  <li>I use static imports to reduce noise in the subsequent code.</li>\n  <li>I am using a <code>Policy</code> to create a loop that iterates every 250ms.</li>\n  <li>I am using pattern matching to determine which <code>Exception</code> to throw.</li>\n  <li>I’m using C# 12 primary constructors to reduce the exception definitions to a single line.</li>\n  <li>Each exception determines which message gets output to the <code>Console</code>.</li>\n</ol>\n\n<p>Wow, that’s some impressively… <em>dumb</em> code, but it gets the job done! That said, this problem is more about a developer’s ability to solve problems creatively and explain the reasoning behind “why” they chose the path they did.</p>\n\n<p>Please let me know if you have a particularly creative way to solve the Fizz Buzz problem. I’d be happy to see it.</p>\n\n<p>Thanks for reading my blog posts and sharing them with friends and colleagues. Cheers.</p>\n",
      "Content": null,
      "Language": null,
      "Link": "https://khalidabuhakmeh.com/dumb-developer-tricks-fizz-buzz-with-csharp-12-and-polly"
    },
    {
      "FeedId": "https://khalidabuhakmeh.com/feed.xml",
      "ItemId": "https://khalidabuhakmeh.com/multi-tenancy-with-aspnet-core-and-finbuckle-multitenant",
      "Title": "Multi-tenancy with ASP.NET Core and FinBuckle.Multitenant",
      "PublishDate": "2023-09-05T00:00:00+00:00",
      "Summary": "<p>Multi-tenancy is a complex topic with a generally understood definition, yet the devil is in the details. From a high level, Multi-tenancy is the idea that a single codebase can support many users in what they perceive as unique-to-them silos. Users have their tenants, which can provide isolation from others. Isolation can be logical or physical, specifically around dependencies such as data storage, authentication and authorization, and third-party services. For developers, multi-tenancy also makes the programming model more straightforward since most business logic can have a contextual baseline codified into the application’s infrastructure.</p>\n\n<p>While the multi-tenancy approach is popular, it can be tricky to implement, especially within the ASP.NET Core pipeline, which heavily depends on dependency injection. In this post, we’ll see how to use the <a href=\"https://www.finbuckle.com/MultiTenant\"><code>FinBuckle.Multitenant</code> package</a> to gain a competitive advantage when developing multi-tenant applications.</p>\n\n<!--more-->\n\n<h2 id=\"what-is-finbucklemultitenant\">What is FinBuckle.Multitenant?</h2>\n\n<p><code>FinBuckle.Multitenant</code> is an open-source .NET library designed to codify many best practices around multi-tenancy, taking into account many of the standard building blocks found in the .NET community. These building blocks include ASP.NET Core, dependency injection, identity management, and more. The package focuses on being “lightweight” and a drop-in dependency for your .NET (Core) solutions, providing a mechanism to support data isolation, tenancy resolution, and tenant-specific behaviors. How does the library do all that?</p>\n\n<p><code>FinBuckle.Multitenant</code> has three components users should understand before starting: Tenants, Strategies, and Stores.</p>\n\n<p>A Tenant is a logical concept specifying a boundary for a set of users. Within a tenant, you may have unique data storage, identity management, or any other aspect of the application. If your application is an apartment complex, each tenant would be an apartment.</p>\n\n<p>Strategies help your application determine which tenant is currently in context. The library provides multiple strategies, including a URL base path strategy, a claim strategy, a session strategy, a TLD host strategy, a header strategy, and many more. Additionally, strategies can be combined to create a combination unique to your use case. You may also create custom strategies depending on your application’s unique scenario. Staying with the analogy of an apartment complex, a strategy for determining your apartment might be a key, facial recognition, NFC taps, or a friendly doorman recognizing you.</p>\n\n<p>The final essential element of the library is a Store. Stores provide a record of all potential tenants that exist within your overall application. These stores are a data storage mechanism backed by a database, in-memory collections, HTTP endpoints, configuration files, or a distributed cache. Which works best depends on your particular use case and the number of potential tenants. In the final analogy, a store is the building’s rental office, which has the contracts for each apartment.</p>\n\n<p>All three parts are integral to how <code>FinBuckle.MultiTenant</code> works, but let’s see it used in an ASP.NET Core sample.</p>\n\n<h2 id=\"getting-started-with-multi-tenancy\">Getting Started with Multi-tenancy</h2>\n\n<p>Starting with an ASP.NET Core web application, we’ll first need to install the <code>FinBuckle.Multitenant.AspNetCore</code> package.</p>\n\n<pre><code class=\"language-text\">dotnet add package FinBuckle.MultiTenant.AspNetCore\n</code></pre>\n\n<p>Once installed, we’ll need to configure all elements described in the previous section: Tenants, Strategies, and Stores. Let’s take a look at our <code>Program.cs</code> file and how we hook the library into the ASP.NET Core infrastructure of the application.</p>\n\n<pre><code class=\"language-csharp\">using Finbuckle.MultiTenant;  \nusing Multitenants;  \n  \nvar builder = WebApplication.CreateBuilder(args);  \n  \nbuilder.Services.AddRazorPages();  \nbuilder.Services.AddMultiTenant&lt;TenantInfo&gt;()  \n    .WithRouteStrategy(\"tenant\")  \n    .WithDelegateStrategy(Tenants.QueryStringStrategy)  \n    .WithInMemoryStore(Tenants.Register);  \n  \nvar app = builder.Build();  \n  \n// Configure the HTTP request pipeline.  \nif (!app.Environment.IsDevelopment())  \n{  \n    app.UseExceptionHandler(\"/Error\");  \n    app.UseHsts();  \n}  \n  \napp.UseHttpsRedirection();  \napp.UseStaticFiles();  \napp.UseRouting();  \napp.UseMultiTenant();  \napp.UseAuthorization();  \napp.MapRazorPages();  \napp.Run();\n</code></pre>\n\n<p>The library has both a services registration and a middleware component.  Here you can see us adding the multi-tenancy with the <code>TenantInfo</code> class being our tenant definition. You can implement your own <code>ITenantInfo</code> instances, but the library provides a simple <code>TenantInfo</code> type definition for an easy way to get started.</p>\n\n<p>You may have also noticed our two strategies of <code>RouteStrategy</code> and <code>DelegateStrategy</code>. The <code>RouteStrategy</code> is an included strategy that uses the endpoint’s route values to determine the tenant. In this sample, the route value’s key is “tenant”. We’ll see later how the <code>DelegateStrategy</code> is implemented in our <code>Tenants</code> static class, but it’s a custom method that takes an <code>HttpContext</code> instance.</p>\n\n<p>Finally, we are using an <code>InMemoryStore</code> for this demo, with all the tenants hard-coded into our application. Let’s see what these references lead to.</p>\n\n<pre><code class=\"language-csharp\">using System.Diagnostics.CodeAnalysis;  \nusing Finbuckle.MultiTenant;  \nusing Finbuckle.MultiTenant.Stores;  \n  \nnamespace Multitenants;  \n  \npublic static class Tenants  \n{  \n    public static readonly TenantInfo Default = new()  \n    {  \n        Id = 1.ToString(),  \n        Name = \"Default\",  \n        Identifier = \"default\"  \n    };  \n  \n    public static readonly TenantInfo Other = new()  \n    {  \n        Id = 2.ToString(),  \n        Name = \"Other\",  \n        Identifier = \"other\"  \n    };  \n  \n    private static readonly List&lt;TenantInfo&gt; All = new()  \n    {  \n        Default,  \n        Other  \n    };  \n  \n    public static void Register(InMemoryStoreOptions&lt;TenantInfo&gt; options)  \n    {  \n        options.Tenants.Add(Default);  \n        options.Tenants.Add(Other);  \n    }  \n  \n    public static Task&lt;string?&gt; QueryStringStrategy(object state)  \n    {  \n        if (state is not HttpContext httpContext) \n\t        return Task.FromResult&lt;string?&gt;(null);  \n  \n        var tenantContext = httpContext.GetMultiTenantContext&lt;TenantInfo&gt;();  \n  \n        //Someone already set the tenant. Likely another strategy  \n        if (tenantContext is not null &amp;&amp; tenantContext.HasResolvedTenant)  \n            return Task.FromResult(tenantContext.TenantInfo!.Identifier);  \n  \n        var tenant = httpContext.Request.Query.TryGetValue(\"tenant\", out var values)  \n                     &amp;&amp; TryGetTenant(values.ToString(), out var info)  \n            ? info  \n            : Default;  \n  \n        return Task.FromResult(tenant.Identifier);  \n    }  \n  \n    private static bool TryGetTenant(string identifier, [NotNullWhen(true)] out TenantInfo? tenant)  \n    {  \n        tenant = All.FirstOrDefault(x =&gt; x.Identifier == identifier);  \n        return tenant is not null;  \n    }  \n}\n</code></pre>\n\n<p>The most complex part of the <code>Tenants</code> implementation is our <code>QueryStringStrategy</code>, which provides a <code>default</code> tenant fallback when an ASP.NET Core request does not specify the tenant.</p>\n\n<p>Cool! Now that it’s all setup, where do we use the tenant information?</p>\n\n<p>Well, an instance of <code>TenantInfo</code> should always be in the services collection of your .NET application. That means you can ask your application to resolve the <code>TenantInfo</code> as a dependency of any of your .NET services. This includes database classes, services, razor views, and more. In this case, we’ll inject our <code>TenantInfo</code> into a Razor View.</p>\n\n<pre><code class=\"language-razor\">@page \"{tenant?}\"  \n@model IndexModel  \n@inject Finbuckle.MultiTenant.TenantInfo Tenant  \n@{  \n    ViewData[\"Title\"] = \"Home page\";  \n}  \n  \n&lt;div class=\"text-center\"&gt;  \n    &lt;h1 class=\"display-4\"&gt;Welcome&lt;/h1&gt;  \n    &lt;p&gt;  \n        Learn about  \n        &lt;a href=\"https://learn.microsoft.com/aspnet/core\"&gt;  \n            building Web apps with ASP.NET Core  \n        &lt;/a&gt;.  \n    &lt;/p&gt;  \n  \n    You are currently on the \"@Tenant.Name\" tenant.  \n&lt;/div&gt;\n</code></pre>\n\n<p>Note that the route of this Razor page has a <code>tenant</code> route value, matching our <code>RouteStrategy</code> from before. The value is also optional, allowing our custom <code>QueryStringStategy</code> to set the default tenant.</p>\n\n<p>Running the page, you can now experiment with going to <code>/</code>, <code>/other</code>, and <code>/?tenant=other</code>, all of which should switch between the hard-coded tenants. The value used is the <code>Identifier</code> on your <code>TenantInfo</code> instances, so be sure to use the Id here appropriately.</p>\n\n<p>And that’s it! Wow, how easy was that? Adding multi-tenancy to a .NET application has never been easier.</p>\n\n<h2 id=\"conclusion\">Conclusion</h2>\n\n<p><code>FinBuckle.Multitenant</code> is a refreshingly complete solution built for the modern sensibilities of the newest .NET programming model. It has well-thought solutions for what becomes a quickly complex problem. The authors at <strong>FinBuckle</strong> have done a great job thinking about the different aspects of an application that might need tenancy information and providing mechanisms to retrieve the tenant in most conceivable situations. Whether you’re working with ASP.NET Core, distributed services, or authentication, you can retrieve the tenant information when and where you need it.</p>\n\n<p>If you use <code>FinBuckle.Multitenant</code> or are thinking about using it, <a href=\"https://github.com/sponsors/Finbuckle\">be sure to go to FinBuckle’s GitHub sponsors page and show your support</a>. Just a few dollars can make a difference in making projects like these sustainable.</p>\n",
      "Content": null,
      "Language": null,
      "Link": "https://khalidabuhakmeh.com/multi-tenancy-with-aspnet-core-and-finbuckle-multitenant"
    },
    {
      "FeedId": "https://khalidabuhakmeh.com/feed.xml",
      "ItemId": "https://khalidabuhakmeh.com/measuring-unicode-string-lengths-with-csharp",
      "Title": "Measuring Unicode String Lengths with C#",
      "PublishDate": "2023-08-29T00:00:00+00:00",
      "Summary": "<p>I maintain an open-source project called <a href=\"https://github.com/khalidabuhakmeh/ConsoleTables\">ConsoleTables</a>. It’s a silly little project meant to help you take a collection of data and quickly dump it into your terminal session. I started the project so long ago that the reason I created it is lost to the sands of time. That said, it’s seen wild adoption by many, and there’s a continuing issue that folks come back with repeatedly: handling non-ASCII characters. Non-ASCII characters can do strange things to your output.</p>\n\n<p>In this short post, we’ll see how you can calculate the actual length of a string using the <code>StringInfo</code> class and why writing to the console might be one of the most complex technical challenges of our time. Well, maybe not, but it’s still damn hard.</p>\n\n<!--more-->\n\n<h2 id=\"non-ascii-characters\">Non-ASCII Characters</h2>\n\n<p>What do I mean when I say “Non-ASCII” characters? ASCII is a table of numeric values from 0 to 127 that represent characters found in the English language, along with values for familiar computer characters such as <code>Space</code>, <code>Delete</code>, and <code>Escape</code>. Let’s see what that table looks like.</p>\n\n<p><img src=\"https://res.cloudinary.com/abuhakmeh/image/fetch/c_limit,f_auto,q_auto,w_800/https://khalidabuhakmeh.com/assets/images/posts/misc/ascii-table.png\" srcset=\"https://res.cloudinary.com/abuhakmeh/image/fetch/c_limit,f_auto,q_auto,w_320/https://khalidabuhakmeh.com/assets/images/posts/misc/ascii-table.png 320w, https://res.cloudinary.com/abuhakmeh/image/fetch/c_limit,f_auto,q_auto,w_540/https://khalidabuhakmeh.com/assets/images/posts/misc/ascii-table.png 540w, https://res.cloudinary.com/abuhakmeh/image/fetch/c_limit,f_auto,q_auto,w_760/https://khalidabuhakmeh.com/assets/images/posts/misc/ascii-table.png 760w, https://res.cloudinary.com/abuhakmeh/image/fetch/c_limit,f_auto,q_auto,w_980/https://khalidabuhakmeh.com/assets/images/posts/misc/ascii-table.png 980w, https://res.cloudinary.com/abuhakmeh/image/fetch/c_limit,f_auto,q_auto,w_1200/https://khalidabuhakmeh.com/assets/images/posts/misc/ascii-table.png 1200w\" sizes=\"100vw\" alt=\"ASCII Table\" loading=\"lazy\" width=\"2560\" height=\"1746\" crossorigin=\"anonymous\" /></p>\n\n<p>Simple. Well, it is for English speakers, but other languages and symbols exist and are essential to represent all the collective knowledge of mankind. This is why Unicode exists, providing a set of characters for modern and historic scripts, symbols, and thousands of emojis. You know, emojis, the kind you send your partner 😘. There are nearly 150,000 characters in Unicode, a far cry from the humble 127 of ASCII, and far too many to display in a chart for you here.</p>\n\n<p>With the variety of characters comes a visual problem for folks rendering them into a terminal output. How many “spaces” does a character take up? In most cases, we hope all characters take up one space, but that’s only sometimes the case. How do we determine the length required to display a Unicode character with C#?</p>\n\n<p>Let’s see some code that attempts to solve just that problem.</p>\n\n<h2 id=\"systemglobalizationstringinfo-and-lengths\">System.Globalization.StringInfo and Lengths</h2>\n\n<p>Let’s look at a collection of <code>string</code> instances in an array. Visually, to your human eye, how many spaces would you say each is?</p>\n\n<pre><code class=\"language-csharp\">var characters = new[] { \"a\", \"1\", \"👩‍🚀\", \"あ\", \"👨‍👩‍👧‍👦\", \"✨\" };\n</code></pre>\n\n<p>You might say, “Khalid, they’re all definitely one character long! Do you take me for a fool?!” Well, no, I respect you; please don’t hurt me. My question frames the point that appearances can be deceiving, and only a few values are <strong>1</strong> in length. Let’s take at the console output for each <code>string</code> value and look at our output.</p>\n\n<p><img src=\"https://res.cloudinary.com/abuhakmeh/image/fetch/c_limit,f_auto,q_auto,w_800/https://khalidabuhakmeh.com/assets/images/posts/misc/jetbrains-rider-terminal-output-unicode-no-lengths.png\" srcset=\"https://res.cloudinary.com/abuhakmeh/image/fetch/c_limit,f_auto,q_auto,w_320/https://khalidabuhakmeh.com/assets/images/posts/misc/jetbrains-rider-terminal-output-unicode-no-lengths.png 320w, https://res.cloudinary.com/abuhakmeh/image/fetch/c_limit,f_auto,q_auto,w_540/https://khalidabuhakmeh.com/assets/images/posts/misc/jetbrains-rider-terminal-output-unicode-no-lengths.png 540w, https://res.cloudinary.com/abuhakmeh/image/fetch/c_limit,f_auto,q_auto,w_724/https://khalidabuhakmeh.com/assets/images/posts/misc/jetbrains-rider-terminal-output-unicode-no-lengths.png 724w\" sizes=\"100vw\" alt=\"JetBrains Rider terminal output with strange spacing\" loading=\"lazy\" width=\"724\" height=\"382\" crossorigin=\"anonymous\" /></p>\n\n<p>What the heck is going on? Ugh. Well, by using <code>System.Globalization.StringInfo</code>, we can determine if we’re dealing with a character with more length than is visible to the naked eye by using</p>\n\n<pre><code class=\"language-csharp\">using System.Globalization;  \n\nvar characters = new[] { \"a\", \"1\", \"👩‍🚀\", \"あ\", \"👨‍👩‍👧‍👦\", \"✨\" };  \n  \nvar lengths = characters.Select(s =&gt;   \n        (value: s, length: StringInfo.GetNextTextElementLength(s))  \n    );  \n  \nforeach (var (value, length) in lengths)  \n{  \n    Console.WriteLine($\"{value} (length: {length})\");  \n}\n</code></pre>\n\n<p>Running our code, we can now see the length of each <code>string</code> value, and it’s surprising.</p>\n\n<p><img src=\"https://res.cloudinary.com/abuhakmeh/image/fetch/c_limit,f_auto,q_auto,w_800/https://khalidabuhakmeh.com/assets/images/posts/misc/jetbrains-rider-terminal-output-unicode-with-lengths.png\" srcset=\"https://res.cloudinary.com/abuhakmeh/image/fetch/c_limit,f_auto,q_auto,w_320/https://khalidabuhakmeh.com/assets/images/posts/misc/jetbrains-rider-terminal-output-unicode-with-lengths.png 320w, https://res.cloudinary.com/abuhakmeh/image/fetch/c_limit,f_auto,q_auto,w_540/https://khalidabuhakmeh.com/assets/images/posts/misc/jetbrains-rider-terminal-output-unicode-with-lengths.png 540w, https://res.cloudinary.com/abuhakmeh/image/fetch/c_limit,f_auto,q_auto,w_760/https://khalidabuhakmeh.com/assets/images/posts/misc/jetbrains-rider-terminal-output-unicode-with-lengths.png 760w, https://res.cloudinary.com/abuhakmeh/image/fetch/c_limit,f_auto,q_auto,w_766/https://khalidabuhakmeh.com/assets/images/posts/misc/jetbrains-rider-terminal-output-unicode-with-lengths.png 766w\" sizes=\"100vw\" alt=\"JetBrains Rider console output with lengths\" loading=\"lazy\" width=\"766\" height=\"336\" crossorigin=\"anonymous\" /></p>\n\n<p>Why is this happening?! Well, some Unicode characters build on other existing characters. For instance, <a href=\"https://emojipedia.org/woman-astronaut/\">the Woman Cosmonaut combines the 👩 + U+200D + 🚀</a>. The two emojis and the zero-width divider are <strong>5</strong> characters in length. The family emoji has <strong>11</strong> characters because of this combination:</p>\n\n<ul>\n  <li><a href=\"https://emojipedia.org/emoji/%F0%9F%91%A8/\">👨 U+1F468</a></li>\n  <li><a href=\"https://emojipedia.org/emoji/%E2%80%8D/\">‍ U+200D</a></li>\n  <li><a href=\"https://emojipedia.org/emoji/%F0%9F%91%A9/\">👩 U+1F469</a></li>\n  <li><a href=\"https://emojipedia.org/emoji/%E2%80%8D/\">‍ U+200D</a></li>\n  <li><a href=\"https://emojipedia.org/emoji/%F0%9F%91%A7/\">👧 U+1F467</a></li>\n  <li><a href=\"https://emojipedia.org/emoji/%E2%80%8D/\">‍ U+200D</a></li>\n  <li><a href=\"https://emojipedia.org/emoji/%F0%9F%91%A6/\">👦 U+1F466</a></li>\n</ul>\n\n<p>That’s a lot of characters!</p>\n\n<p>So what can you do to work around this issue? Well, not much. The terminal determines how it displays the values. This can lead to frustration when building a Console-focused library, as you will be chasing issues depending on your user’s development environment.</p>\n\n<p>Luckily, we can use <code>System.Globalization.StringInfo</code> to see those invisible spaces that Unicode values may bring, but sadly, there isn’t much we can do from the C# side to fix the display output, as it would mutate the values we’re dealing with.</p>\n\n<p>I hope you enjoyed this post, and thank you for reading and sharing all my blog posts with friends and colleagues.</p>\n",
      "Content": null,
      "Language": null,
      "Link": "https://khalidabuhakmeh.com/measuring-unicode-string-lengths-with-csharp"
    },
    {
      "FeedId": "https://khalidabuhakmeh.com/feed.xml",
      "ItemId": "https://khalidabuhakmeh.com/miniword-microsoft-office-word-templating",
      "Title": "MiniWord - Microsoft Office Word Templating",
      "PublishDate": "2023-08-22T00:00:00+00:00",
      "Summary": "<p>When it comes to <strong>BUSINESS</strong>, Microsoft Office file formats reign supreme, and if you’re a software developer, you’ll inevitably be asked to convert data into one of the Office formats; it’s a law (look it up). Luckily for all of us, you aren’t the first, or the last, to be asked to perform such a task, which means there are open-source libraries to help you perform your duty as a business developer. Go business!</p>\n\n<p>As luck would find it, I was scanning the Chinese .NET OSS scene when I came across the <a href=\"https://github.com/mini-software/MiniWord\">MiniWord</a> project. MiniWord is a library that uses the OpenXML nature of <code>.docx</code> files to support a mail merge-like experience for developers. In this post, we’ll look at <strong>MiniWord</strong> and how you can use it to empower your business stakeholders to take your existing dataset and turn it into glorious Word documents.</p>\n\n<!--more-->\n\n<h2 id=\"what-is-miniword\">What is MiniWord?</h2>\n\n<p>MiniWord uses Microsoft Word’s OpenXML format to provide a cross-platform library for completing document templates. The library lets you take any dataset and generate a new Word document for each entry. This seems straightforward, but MiniWord provides powerful templating features that make it worth checking out.</p>\n\n<p>The process of creating a template starts with a <strong>tag</strong>. Tags use the <code>{{ }}</code> syntax to create placeholders in existing Word documents rather than the mail merge placeholders. Once tags are placed in a word document, you can give the library a dictionary where keys match the tags within the document.</p>\n\n<pre><code class=\"language-csharp\">var value = new Dictionary&lt;string, object&gt;()\n{\n    [\"Name\"] = \"Jack\",\n    [\"Department\"] = \"IT Department\",\n    [\"Purpose\"] = \"Shanghai site needs a new system to control HR system.\",\n    [\"StartDate\"] = DateTime.Parse(\"2022-09-07 08:30:00\"),\n    [\"EndDate\"] = DateTime.Parse(\"2022-09-15 15:30:00\"),\n    [\"Approved\"] = true,\n    [\"Total_Amount\"] = 123456,\n};\nMiniWord.SaveAsByTemplate(path, templatePath, value);\n</code></pre>\n\n<p>You can fill a seemingly generic Word document with information with just a few lines of C# code.</p>\n\n<p><img src=\"https://res.cloudinary.com/abuhakmeh/image/fetch/c_limit,f_auto,q_auto,w_800/https://khalidabuhakmeh.com/assets/images/posts/microsoft-office-word-templates-miniword/miniword-microsoft-example.png\" srcset=\"https://res.cloudinary.com/abuhakmeh/image/fetch/c_limit,f_auto,q_auto,w_320/https://khalidabuhakmeh.com/assets/images/posts/microsoft-office-word-templates-miniword/miniword-microsoft-example.png 320w, https://res.cloudinary.com/abuhakmeh/image/fetch/c_limit,f_auto,q_auto,w_540/https://khalidabuhakmeh.com/assets/images/posts/microsoft-office-word-templates-miniword/miniword-microsoft-example.png 540w, https://res.cloudinary.com/abuhakmeh/image/fetch/c_limit,f_auto,q_auto,w_760/https://khalidabuhakmeh.com/assets/images/posts/microsoft-office-word-templates-miniword/miniword-microsoft-example.png 760w, https://res.cloudinary.com/abuhakmeh/image/fetch/c_limit,f_auto,q_auto,w_980/https://khalidabuhakmeh.com/assets/images/posts/microsoft-office-word-templates-miniword/miniword-microsoft-example.png 980w, https://res.cloudinary.com/abuhakmeh/image/fetch/c_limit,f_auto,q_auto,w_1200/https://khalidabuhakmeh.com/assets/images/posts/microsoft-office-word-templates-miniword/miniword-microsoft-example.png 1200w\" sizes=\"100vw\" alt=\"MinWord transforming a Microsoft Office word template to a complete document\" loading=\"lazy\" width=\"1889\" height=\"934\" crossorigin=\"anonymous\" /></p>\n\n<p>You’re also not limited to text values. MiniWord supports adding text, images, lists, tables, colored text, and hyperlinks. That’s a lot of options for dynamic data.</p>\n\n<p>Generated documents can be saved to disk, or results can be written to a <code>Stream</code> instance, which can be sent to a remote client using ASP.NET Core or a messaging library. You can see the supported methods provided by MiniWord below.</p>\n\n<pre><code class=\"language-csharp\">SaveAsByTemplate(string path, string templatePath, Dictionary&lt;string, object&gt; value)\nSaveAsByTemplate(string path, byte[] templateBytes, Dictionary&lt;string, object&gt; value)\nSaveAsByTemplate(this Stream stream, string templatePath, Dictionary&lt;string, object&gt; value)\nSaveAsByTemplate(this Stream stream, byte[] templateBytes, Dictionary&lt;string, object&gt; value)\n</code></pre>\n\n<p>The provided methods make integrating MiniWord with a local filesystem to a distributed cloud solution straightforward. That’s pretty awesome!</p>\n\n<p>Let’s get to a working sample.</p>\n\n<h2 id=\"working-with-miniword\">Working with MiniWord</h2>\n\n<p>You’ll need to start with an existing .NET application, and for this post, I’ve created a console application. The first step is to install the MiniWord package. You can use your IDE’s NuGet tool, edit the project file, or run the following command.</p>\n\n<pre><code class=\"language-console\">dotnet add package MiniWord\n</code></pre>\n\n<p>Next, you’ll need a <code>.docx</code>, and in my case, I’m trying to get the word out about JetBrains Rider. You can paste the following into a Word document. If you’re on macOS (like I am), you can open Pages and export the file to a Word document.</p>\n\n<pre><code class=\"language-text\">\nHello, {{FirstName}} {{LastName}}, \n\nWe hear you like programming in .NET. May I suggest you check out JetBrains Rider at https://jetbrains.com/rider?\n\nJetBrains Rider’s support is world-class for {{Framework}}, and it’s all powered by ReSharper.\n\nCheers,\n  \nKhalid Abuhakmeh\nJetBrains .NET Advocate\n\n</code></pre>\n\n<p>You’ll need to place the newly created <code>.docx</code> file in your project with a <code>Copy to output directory</code> option of <code>Copy if newer</code>. You can also choose to hardcode the path in the following code.</p>\n\n<pre><code class=\"language-csharp\">using MiniSoftware;  \n  \nvar recipients = new[]  \n{  \n    new { FirstName = \"Maarten\", LastName = \"Balliauw\", Framework = \"Razor Pages\" },  \n    new { FirstName = \"Rachel\", LastName = \"Appel\", Framework = \"Blazor\" },  \n    new { FirstName = \"Matt\", LastName = \"Ellis\", Framework = \"Unity\" },  \n    new { FirstName = \"Matthias\", LastName = \"Koch\", Framework = \"Nuke\" }  \n};  \n  \nvar template = File.ReadAllBytes(\"Advocacy.docx\");  \n  \nforeach (var recipient in recipients)  \n{  \n    var values = ConvertToDictionary(recipient);  \n    MiniWord.SaveAsByTemplate(  \n        $\"{recipient.FirstName}-{recipient.LastName}-advocacy.docx\".ToLower(),  \n        template,        values    );}  \n  \n// Generated in part by JetBrains AI Assistant  \n// Prompt: I need a method that takes an anonymous  \n//         C# object and converts it to a dictionary.  \nstatic Dictionary&lt;string, object&gt; ConvertToDictionary&lt;T&gt;(T target)  \n{  \n    return typeof(T).GetProperties().ToDictionary(  \n        prop =&gt; prop.Name,  \n        prop =&gt; prop.GetValue(target, null)  \n    )!;  \n}\n</code></pre>\n\n<p>Running the code, you’ll get a new Word document for each instance in the <code>recipients</code> collection. The newly created assets would be under <code>/bin/Debug/netX.0</code> unless you chose a different directory.</p>\n\n<p>Opening any of the generated files, you’ll see the expected result.</p>\n\n<pre><code class=\"language-text\">Hello, Maarten Balliauw,\n\nWe hear you like programming in .NET. May I suggest you check out JetBrains Rider at https://jetbrains.com/rider?\n\nJetBrains Rider’s support is world-class for Razor Pages, and it’s all powered by ReSharper.\n\nCheers,\n \nKhalid Abuhakmeh\nJetBrains .NET Advocate\n</code></pre>\n\n<p>Very cool. Now I can tell Maarten Balliauw how awesome JetBrains Rider and ReSharper are for becoming a productive .NET developer, all thanks to MiniWord!</p>\n\n<h2 id=\"conclusion\">Conclusion</h2>\n\n<p>MiniWord uses the OpenXML format, so it works cross-platform on Windows, macOS, and Linux without installing a copy of Microsoft Office on the local environment. The implementation can be critical in cloud-hosted scenarios. It also helps that the library’s author has provided implementations that support many scenarios. The support for various tag options also makes this more than just a search and replace tool, as you can build highly complex documents. If you’re looking for a library to empower your business stakeholders, <a href=\"https://github.com/mini-software/MiniWord\">check out MiniWord and give the author a star on their GitHub repository</a>.</p>\n\n<p>Thanks for reading and sharing this post with friends and colleagues.</p>\n",
      "Content": null,
      "Language": null,
      "Link": "https://khalidabuhakmeh.com/miniword-microsoft-office-word-templating"
    },
    {
      "FeedId": "https://khalidabuhakmeh.com/feed.xml",
      "ItemId": "https://khalidabuhakmeh.com/sisk-an-alternative-dotnet-http-server",
      "Title": "Sisk - An Alternative .NET HTTP Server",
      "PublishDate": "2023-08-15T00:00:00+00:00",
      "Summary": "<p>Many of us take for granted the existence of ASP.NET Core to access HTTP in the .NET world. It’s the foundation for most web implementations in the .NET space and provides functionality for all the programming paradigms in the ASP.NET ecosystem.</p>\n\n<p>So it was genuinely surprising when I found a new HTTP server implementation on NuGet. Not only new but also very well thought out and accessible to many folks.</p>\n\n<p>In this post, we’ll look at Sisk, and HTTP server implementation designed to be 100% open-source, multi-platform, and written in C#.</p>\n\n<!--more-->\n\n<h2 id=\"what-is-sisk\">What is Sisk?</h2>\n\n<p>Sisk is an HTTP Server implementation separate from ASP.NET Core. That means there is no high-level overlap between this library and that of the ASP.NET Core ecosystem. Sisk’s HTTP Server implementation provides functionality such as routing, request handling, middleware, logging, web sockets, server-sent events, and more. Again, all independent of what you’re used to with Razor Pages, ASP.NET Core MVC, or Minimal APIs. The documentation site claims to be “code-pattern-agnostic, “ meaning you can code however you want. An HTTP server is helpful in many scenarios, but why would you want a different HTTP server implementation outside of ASP.NET Core?</p>\n\n<h2 id=\"why-does-sisk-exist\">Why does Sisk exist?</h2>\n\n<p>The <a href=\"https://sisk.project-principium.dev/#/\">documentation site does a great job explaining what Sisk is</a>, but <strong><em>why</em></strong> does it exist? From a consumer’s perspective, there are several reasons to want a separate HTTP server from what ships with ASP.NET Core.</p>\n\n<p>This HTTP server implementation provides a much more straightforward programming model than the one provided by ASP.NET Core. It’s focused on providing HTTP functionality. That’s it. There’s no UI framework, so you must provide one yourself. The features of ASP.NET Core can quickly become a burden in some scenarios.</p>\n\n<p>Running a simple HTTP server can be helpful in local scenarios where UI talks to a local backend. A local host can serve application functionality while multiple UI instances and widgets interact with the server process. Sisk also has the advantage of providing multiple listening ports and making adding additional ones more straightforward.</p>\n\n<p>HTTP servers are typically essential to distributed architectures, where services need a communication protocol to interoperate. HTTP is commonly used as a transport because it is flexible and battle-hardened. Containerizing processes with exposed simple HTTP servers can reduce the size of images and ultimately improve deployment throughput. Given <a href=\"https://sisk.project-principium.dev/#/docs/native-aot\">Sisk has Native AOT support</a>, I bet you can get some efficient images.</p>\n\n<p>Finally, writing an HTTP server is a fun and cool thing. While familiar, the programming model for Sisk is different enough to be a friendly programming alternative to ASP.NET Core.</p>\n\n<h2 id=\"your-first-sisk-http-server-app\">Your First Sisk HTTP Server App</h2>\n\n<p>To start with Sisk, you’ll need to create a .NET console application first. Once you’ve created the console application, you’ll want to install the following NuGet package.</p>\n\n<pre><code class=\"language-console\">dotnet add package Sisk.HttpServer\n</code></pre>\n\n<p>Now, let’s write a two-endpoint HTTP server application.</p>\n\n<pre><code class=\"language-csharp\">using Sisk.Core.Http;  \nusing static Sisk.Core.Routing.RouteMethod;  \n  \nvar http = HttpServer.Emit(  \n    insecureHttpPort: 5000, host: out _, configuration: out _,  \n    router: out var router  \n);  \n  \nrouter.SetRoute(Get, \"/\", _ =&gt; new(200) {  \n    Content = new StringContent(\"Hello, World\")  \n});  \n  \nrouter.SetRoute(Get, \"/hi/&lt;name&gt;\", req =&gt;  \n{  \n    var name = req.Query[\"name\"];  \n    return new(200) {  \n        Content = new HtmlContent($\"&lt;h1&gt;Hello, {name}&lt;/h1&gt;\")  \n    };\n});  \n  \nhttp.Start();  \nConsole.WriteLine($\"HTTP Server is listening on {http.ListeningPrefixes[0]}\");  \nConsole.ReadKey();\n</code></pre>\n\n<p>Running our application, we see that both endpoints are now accessible in our browser. You’ll also note that our <code>/hi/&lt;name&gt;</code> path uses a route value. We can access the entire request through the <code>HttpRequest</code> instance, which Sisk passes to our action.</p>\n\n<p>Sisk also has a way to define endpoints in different locations. Let’s add a new <strong>widgets</strong> endpoint. First, let’s create a <code>Widgets</code> class to hold our endpoint.</p>\n\n<pre><code class=\"language-csharp\">using Sisk.Core.Http;  \nusing Sisk.Core.Routing;  \nusing static Sisk.Core.Routing.RouteMethod;  \n  \npublic class Widgets  \n{  \n    [Route(Get, \"/widgets\")]  \n    static HttpResponse Index(HttpRequest request)  \n    {        \n\t    HttpResponse res = new() {  \n            Content = new StringContent(\"Index\")  \n        };        return res;  \n    }\n}\n</code></pre>\n\n<p>Note that all endpoints must be <code>static</code> implementations. Sisk will fail to turn your methods into delegates otherwise.</p>\n\n<p>Next, let’s add our new endpoint to our previous example.</p>\n\n<pre><code class=\"language-csharp\">using Sisk.Core.Http;  \nusing static Sisk.Core.Routing.RouteMethod;  \n  \nvar http = HttpServer.Emit(  \n    insecureHttpPort: 5000, host: out _, configuration: out _,  \n    router: out var router  \n);  \n  \nrouter.SetRoute(Get, \"/\", _ =&gt; new(200) {  \n    Content = new StringContent(\"Hello, World\")  \n});  \n  \nrouter.SetRoute(Get, \"/hi/&lt;name&gt;\", req =&gt;  \n{  \n    var name = req.Query[\"name\"];  \n    return new(200) {  \n        Content = new HtmlContent($\"&lt;h1&gt;Hello, {name}&lt;/h1&gt;\")  \n    };\n});\n\n// register the Widgets endpoint from our class\nrouter.SetObject(typeof(Widgets));\n  \nhttp.Start();  \nConsole.WriteLine($\"HTTP Server is listening on {http.ListeningPrefixes[0]}\");  \nConsole.ReadKey();\n</code></pre>\n\n<p>Now we have a new endpoint in our application.</p>\n\n<h2 id=\"conclusion\">Conclusion</h2>\n\n<p>Sisk is a really exciting HTTP server, and while it’s certainly not the first attempt at an independent HTTP server implementation, it is a welcome addition to the .NET ecosystem. If you need a lightweight HTTP server implementation without all of what ASP.NET Core offers, then Sisk might be for you. Remember, though, this HTTP server is independent of the ASP.NET Core ecosystem, so be prepared to write your integrations or rely on external implementations.</p>\n\n<p>This post only begins to scratch the surface of what Sisk provides, so I suggest you check out the <a href=\"https://github.com/sisk-http\">GitHub repository</a> and <a href=\"https://sisk.project-principium.dev/#/\">documentation</a> to see if it’s right for you.</p>\n",
      "Content": null,
      "Language": null,
      "Link": "https://khalidabuhakmeh.com/sisk-an-alternative-dotnet-http-server"
    },
    {
      "FeedId": "https://khalidabuhakmeh.com/feed.xml",
      "ItemId": "https://khalidabuhakmeh.com/dotnet-8-interceptors",
      "Title": ".NET 8 Interceptors",
      "PublishDate": "2023-08-08T00:00:00+00:00",
      "Summary": "<p>Typically I wouldn’t say I like writing about preview features for multiple reasons. Most of my posts aim to help folks solve problems they might have rather than get on a soap box or advertise. But I thought I would cover this .NET preview feature as it’s a sister topic to something I’ve wanted in the .NET ecosystem for the longest time: monkey patching. If you’re unfamiliar with the topic, I suggest you read my post on monkey patching. In general, monkey patching allows you to substitute one implementation for another, and what do you know, <a href=\"https://github.com/dotnet/roslyn/blob/d71ec683082104e9122a4937abc768710c5f7782/docs/features/interceptors.md\">.NET 8 is introducing the concept of <strong>Interceptors</strong></a>.</p>\n\n<p>As the name implies, Interceptors allow developers to target specific method invocations and intercept them with a new implementation. Interceptors have several purposes and meaningful distinctions that we’ll get into in this post. So let’s get started.</p>\n\n<!--more-->\n\n<h2 id=\"what-is-an-interceptor\">What is an Interceptor?</h2>\n\n<p>In .NET 8 preview 6, the SDK introduces additional functionality to “intercept” any method call within your codebase. The word “interceptor” is clear as to the purpose of this new functionality. It only replaces methods intentionally and does not replace method implementations globally. The approach means you, as the developer, must be systematic about using an Interceptor.</p>\n\n<p>The .NET team uses interceptors to overwrite infrastructure code that previously relied on reflection with compile-time versions specific to your application. Interceptors will hopefully reduce your programs’ start-up time and efficiency. The .NET team designed interceptors to work with source generators, as source generators can surgically deal with abstract syntax trees and code files to target method invocations. While you could hand-write interceptor calls, it becomes impractical in a real-world application.</p>\n\n<p>Let’s get into setting up your project to work with interceptors.</p>\n\n<h2 id=\"getting-started-with-interceptors\">Getting Started with Interceptors</h2>\n\n<p>Interceptors are a .NET 8 preview 6 feature, so you’ll need the matching SDK version or higher to get this working. Begin by creating a new console application, or really any .NET application.</p>\n\n<p>Next, in your <code>.csproj</code>, you must add the following <code>PropertyGroup</code> element.</p>\n\n<pre><code class=\"language-xml\">&lt;PropertyGroup&gt;\n    &lt;Features&gt;InterceptorsPreview&lt;/Features&gt;\n&lt;/PropertyGroup&gt;\n</code></pre>\n\n<p>Also be sure to set your <code>LangVersion</code> element to <code>preview</code> to get access to the feature.</p>\n\n<pre><code class=\"language-xml\">&lt;PropertyGroup&gt;\n    &lt;LangVersion&gt;preview&lt;/LangVersion&gt;\n&lt;/PropertyGroup&gt;\n</code></pre>\n\n<p>Next, add the following attribute definition to your project.</p>\n\n<pre><code class=\"language-csharp\">namespace System.Runtime.CompilerServices;\n\n[AttributeUsage(AttributeTargets.Method, AllowMultiple = true, Inherited = false)]\npublic sealed class InterceptsLocationAttribute : Attribute\n{\n    public InterceptsLocationAttribute(string filePath, int line, int character)\n    {\n    }\n}\n</code></pre>\n\n<p>Yes, it’s weird that the attribute isn’t part of the BCL, but since this is a preview feature, I imagine the .NET team didn’t want to pollute the .NET framework with a potential API change later.</p>\n\n<p>You’ll notice that the attribute takes three parameters: <strong>filePath</strong>, <strong>line</strong>, and <strong>character</strong>. You’ll also note that these values aren’t assigned anywhere, and you’d be correct. The attribute is a marker the compiler will read at compile-time, so setting the values for runtime use is pointless.</p>\n\n<p>Now, let’s intercept some code. Add the following to your <code>Program.cs</code> file. <strong>Note, the line numbers and spacing are critically important. If you reformat the code, this solution might break.</strong> Also be sure to change the file path to the absolute path of your <code>Program.cs</code> file.</p>\n\n<pre><code class=\"language-csharp\">using System.Runtime.CompilerServices;\n\nC.M(); // What the Fudge?!\nC.M(); // Original\n\nclass C\n{\n    public static void M() =&gt; Console.WriteLine(\"Original\");\n}\n\n// generated\nclass D\n{\n    [InterceptsLocation(\"/Users/khalidabuhakmeh/RiderProjects/ConsoleApp12/ConsoleApp12/Program.cs\", \n        line: 3, character: 3)]\n    public static void M() =&gt; Console.WriteLine(\"What the Fudge?!\");\n}\n</code></pre>\n\n<p>Running the application above, you’ll see the most peculiar thing. Two different outputs from the same method call! What the heck?!</p>\n\n<pre><code class=\"language-csharp\">What the Fudge?!\nOriginal\n</code></pre>\n\n<p>But how? What does the compiled code look like after compilation? We can see what happened using JetBrains Rider’s IL Viewer.</p>\n\n<pre><code class=\"language-csharp\">// Decompiled with JetBrains decompiler\n// Type: Program\n// Assembly: ConsoleApp12, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null\n// MVID: 09D7E1E0-5709-4A62-884A-AB84DAA1E08C\n// Assembly location: /Users/khalidabuhakmeh/RiderProjects/ConsoleApp12/ConsoleApp12/bin/Debug/net8.0/ConsoleApp12.dll\n// Local variable names from /users/khalidabuhakmeh/riderprojects/consoleapp12/consoleapp12/bin/debug/net8.0/consoleapp12.pdb\n// Compiler-generated code is shown\n\nusing System.Runtime.CompilerServices;\n\n[CompilerGenerated]\ninternal class Program\n{\n  private static void &lt;Main&gt;$(string[] args)\n  {\n    D.M();\n    C.M();\n  }\n\n  public Program()\n  {\n    base..ctor();\n  }\n}\n</code></pre>\n\n<p>We can now see that the compiler replaced the first method invocation with our intercepting implementation. Wow!</p>\n\n<p>After the razzle-dazzle wears off, you’ll likely think this is impractical. Who has time to hardcode full paths to files, count lines, and count columns? Well, as mentioned previously, this is where source generators come in.</p>\n\n<p>While I won’t demonstrate it here when dealing with syntax trees, you do have access to information like <code>FilePath</code>, and every <code>CSharpSyntaxNode</code> has a <code>GetLocation</code> method that gives you access to line numbers and location within a code file. If you’re already proficient in writing source generators, this information is already available.</p>\n\n<h2 id=\"conclusion\">Conclusion</h2>\n\n<p>This feature is definitely for a select group of individuals in the .NET community, specifically those who write and maintain source generators. Within that subgroup, you likely have framework authors looking to squeeze every last bit of performance out of .NET. As you’ve seen, Interceptors only change specific implementations and cannot target methods globally. If you’re using a source generator to do an interception of all methods, you’ll have to generate an interception call for each location. Generating a large amount of custom code can adversely affect the size of your compiled assets, so be aware of using this feature. Also, you may consider avoiding this feature altogether. Interceptors are still in preview, and the primary intention is to help .NET authors to improve ASP.NET Core and other frameworks within the .NET SDK. Either way, it’s good to understand this feature exists next time you’re debugging your .NET 8 applications because the method you think you’re calling might not be the method you’re actually calling.</p>\n\n<p>I hope you enjoyed this blog post, and as always, thanks for reading and sharing my posts with friends and colleagues.</p>\n\n",
      "Content": null,
      "Language": null,
      "Link": "https://khalidabuhakmeh.com/dotnet-8-interceptors"
    },
    {
      "FeedId": "https://khalidabuhakmeh.com/feed.xml",
      "ItemId": "https://khalidabuhakmeh.com/generate-sitemaps-for-all-of-aspnet-core",
      "Title": "Generate Sitemaps for All of ASP.NET Core",
      "PublishDate": "2023-08-01T00:00:00+00:00",
      "Summary": "<p>While ASP.NET Core is a robust web framework, it lacks some core features that make executing a creative-focused site more straightforward. One of those features is the ability to generate a sitemap. If folks can’t find your content, then for all intents and purposes, it doesn’t exist. Sitemaps tell search engines which parts of your site are essential for user searches.</p>\n\n<p>In this post, I’ll be combining an open-source project called <a href=\"https://www.nuget.org/packages/DotnetSitemapGenerator\">DotnetSitemapGenerator</a> with some of my custom infrastructure code to generate sitemap nodes from ASP.NET Core Minimal APIs, ASP.NET Core MVC actions, and Razor Pages. The post covers all the server-side rendered paradigms within ASP.NET Core, except for Blazor. As a bonus, I also generate sitemap nodes from a database using Entity Framework Core.</p>\n\n<!--more-->\n\n<h2 id=\"what-is-a-sitemap\">What is a Sitemap?</h2>\n\n<p>A sitemap is a file provided by your web application that provides search engines with information about pages, videos, and other potential points of interest. Search engines use this file to crawl your site more efficiently, helping keep your search results up to date and more relevant for prospective visitors. A sitemap is typically hosted at the root of a website at <code>/sitemap.xml</code> by convention but can be configured depending on your use case.</p>\n\n<p>While a sitemap is optional for a well-linked site, there are advantages to having one for your application.</p>\n\n<p>For instance, crawlers might have difficulty distinguishing between valuable pages if you have an extensive website. A large site can lead to issues indexing newer pages, and thus you may lose valuable visitors for more recent content.</p>\n\n<p>Newer sites might also struggle to have crawlers discover their existence, as fewer or no inbound links exist. Generating a sitemap and submitting it to popular search engines ensures your site finds its way quickly into the results of users. As your site becomes more popular, this is less likely a concern, but we all start somewhere.</p>\n\n<p>You may want search engines to index your rich media content separately from your written content. Having separate sitemaps can mean new avenues for users to discover your site. Sitemaps can clarify what value you are providing by creating distinctions between different types of content.</p>\n\n<p>While sitemaps can be helpful for many sites, they do not guarantee all items within your XML files will be indexed by search engines. That said, there are values for change frequency and priority that can help search engines prioritize their crawlers. Generally, it’s better to be safe than sorry when there’s so much competition for visitors.</p>\n\n<h2 id=\"a-basic-sitemap\">A Basic Sitemap</h2>\n\n<p>Sitemaps, in their simplest form, are a collection of URLs. Let’s look at the final sample we’ll generate in this post.</p>\n\n<pre><code class=\"language-xml\">&lt;urlset xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\"&gt;\n    &lt;url&gt;\n        &lt;loc&gt;http://localhost:5077/test&lt;/loc&gt;\n        &lt;changefreq&gt;daily&lt;/changefreq&gt;\n    &lt;/url&gt;\n    &lt;url&gt;\n        &lt;loc&gt;http://localhost:5077/&lt;/loc&gt;\n    &lt;/url&gt;\n    &lt;url&gt;\n        &lt;loc&gt;http://localhost:5077/Privacy&lt;/loc&gt;\n    &lt;/url&gt;\n    &lt;url&gt;\n        &lt;loc&gt;http://localhost:5077/cool/3&lt;/loc&gt;\n    &lt;/url&gt;\n    &lt;url&gt;\n        &lt;loc&gt;http://localhost:5077/products/1/express-galaxy-tumbler&lt;/loc&gt;\n    &lt;/url&gt;\n    &lt;url&gt;\n        &lt;loc&gt;http://localhost:5077/products/2/aero-life-air-purifier&lt;/loc&gt;\n    &lt;/url&gt;\n    &lt;url&gt;\n        &lt;loc&gt;http://localhost:5077/products/3/ocean-wave-projector&lt;/loc&gt;\n    &lt;/url&gt;\n    &lt;url&gt;\n        &lt;loc&gt;http://localhost:5077/products/4/illuminated-globe-decor&lt;/loc&gt;\n    &lt;/url&gt;\n    &lt;url&gt;\n        &lt;loc&gt;http://localhost:5077/products/5/moonlight-cushion&lt;/loc&gt;\n    &lt;/url&gt;\n    &lt;url&gt;\n        &lt;loc&gt;http://localhost:5077/products/6/sunrise-alarm-clock&lt;/loc&gt;\n    &lt;/url&gt;\n    &lt;url&gt;\n        &lt;loc&gt;http://localhost:5077/products/7/frosty-mini-fridge&lt;/loc&gt;\n    &lt;/url&gt;\n    &lt;url&gt;\n        &lt;loc&gt;http://localhost:5077/products/8/breeze-tower-fan&lt;/loc&gt;\n    &lt;/url&gt;\n    &lt;url&gt;\n        &lt;loc&gt;http://localhost:5077/products/9/comet-electric-scooter&lt;/loc&gt;\n    &lt;/url&gt;\n    &lt;url&gt;\n        &lt;loc&gt;http://localhost:5077/products/10/starlight-projector&lt;/loc&gt;\n    &lt;/url&gt;\n&lt;/urlset&gt;\n</code></pre>\n\n<p>The XML file is presentationally unremarkable but essential to building an online presence.</p>\n\n<p>The XML file has endpoints from ASP.NET Core MVC controllers, Razor Pages, and Minimal APIs. Let’s look at how we register our Sitemap infrastructure, and then we’ll go through each mechanism that provides these values to our sitemap.</p>\n\n<h2 id=\"setting-up-the-aspnet-core-infrastructure\">Setting up the ASP.NET Core Infrastructure</h2>\n\n<p>We’ll start inside <code>Program.cs</code> to see how all the pieces come together, then explore how we pull these nodes into our sitemap XML file.</p>\n\n<pre><code class=\"language-csharp\">using Microsoft.EntityFrameworkCore;\nusing Shopping.Models;\nusing Shopping.Sitemap;\n\nvar builder = WebApplication.CreateBuilder(args);\n\n// Add services to the container.\nbuilder.Services.AddRazorPages();\nbuilder.Services.AddControllers();\nbuilder.Services.AddEndpointsApiExplorer();\nbuilder.Services.AddHttpContextAccessor();\n\n// my unique extension method for sitemap information\nbuilder.Services.AddSitemap();\nbuilder.Services.AddOutputCache(options =&gt; {\n    options.AddPolicy(\"sitemap\", b =&gt; b.Expire(TimeSpan.FromSeconds(1)));\n});\n\nbuilder.Services.AddDbContext&lt;Database&gt;(\n    ob =&gt; ob.UseSqlite(\"Data Source = database.db\")\n);\n\nvar app = builder.Build();\n\n// Configure the HTTP request pipeline.\nif (!app.Environment.IsDevelopment())\n{\n    app.UseExceptionHandler(\"/Error\");\n    // The default HSTS value is 30 days. You may want to change this for production scenarios, see https://aka.ms/aspnetcore-hsts.\n    app.UseHsts();\n}\n\napp.UseHttpsRedirection();\napp.UseStaticFiles();\napp.UseRouting();\napp.UseOutputCache();\n\napp.MapSitemap().CacheOutput(\"sitemap\");\n\napp.MapGet(\"cool/{id}\", () =&gt; \"cool beans\")\n   .WithSitemap(\"cool\", new { id = 3 });\n\napp.UseAuthorization();\napp.MapRazorPages();\napp.MapControllers();\napp.Run();\n</code></pre>\n\n<p>We first start by adding our services to the ASP.NET Core services collection. The registrations include our sitemap providers, the Endpoints Api Explorer (for Minimal APIs), and the <code>HttpContextAccessor</code> for generating links.</p>\n\n<pre><code class=\"language-csharp\">builder.Services.AddEndpointsApiExplorer();\nbuilder.Services.AddHttpContextAccessor();\n// my unique extension method for sitemap information\nbuilder.Services.AddSitemap();\n</code></pre>\n\n<p>Further down the file is our <code>sitemap.xml</code> endpoint, enabling output caching.</p>\n\n<pre><code class=\"language-csharp\">app.MapSitemap().CacheOutput(\"sitemap\");\n</code></pre>\n\n<p>I’ve defined these methods in the project’s <code>SitemapExtensions.cs</code> file.</p>\n\n<pre><code class=\"language-csharp\">using Shopping.Sitemap.Providers;\n\nnamespace Shopping.Sitemap;\n\npublic static class SitemapExtensions\n{\n    public static RouteHandlerBuilder MapSitemap(this IEndpointRouteBuilder endpoints, string path = \"sitemap.xml\")\n    {\n        return endpoints.MapGet(path, async (SitemapBuilder sitemap) =&gt;\n        {\n            var xml = await sitemap.GenerateAsync();\n            return Results.Stream(xml, \"text/xml\");\n        });\n    }\n\n    public static void AddSitemap(this IServiceCollection services)\n    {\n        // add sitemap services\n        services.AddScoped&lt;ISitemapUrlProvider, PagesSitemapUrlProvider&gt;();\n        services.AddScoped&lt;ISitemapUrlProvider, EndpointsSitemapUrlProvider&gt;();\n        services.AddScoped&lt;ISitemapUrlProvider, ProductSitemapSitemapUrlProvider&gt;();\n        services.AddScoped&lt;SitemapBuilder&gt;();\n    }\n\n    public static RouteHandlerBuilder WithSitemap(this RouteHandlerBuilder endpoint,\n        string name, object? defaults = null)\n    {\n        return endpoint\n            // adds RouteName and EndpointName\n            .WithName(name)\n            .WithMetadata(new SitemapAttribute\n            {\n                RouteValues = new RouteValueDictionary(defaults)\n            });\n    }\n}\n</code></pre>\n\n<p>The <code>AddSiteMap</code> method registers our URL providers, which will ultimately be used by our <code>SitemapBuilder</code> to combine all the nodes for our <code>sitemap.xml</code> file.</p>\n\n<p>Now that we have infrastructure covered let’s talk about each ASP.NET Core approach your endpoints may be implemented in.</p>\n\n<h2 id=\"aspnet-core-razor-pages-and-mvc-actions\">ASP.NET Core Razor Pages and MVC Actions</h2>\n\n<p>Razor Pages and MVC Views are considered Actions in ASP.NET Core, so they behave very similarly within the context of sitemap generation. The only difference between the two approaches is how you generate links from each route.</p>\n\n<p>Let’s look at our <code>PagesSitemapUrlProvider</code>, which will support MVC and Razor Pages.</p>\n\n<pre><code class=\"language-csharp\">using DotnetSitemapGenerator;\nusing Microsoft.AspNetCore.Mvc.Infrastructure;\nusing IsRazorPage = Microsoft.AspNetCore.Mvc.RazorPages.CompiledPageActionDescriptor;\nusing IsMvc = Microsoft.AspNetCore.Mvc.Controllers.ControllerActionDescriptor;\n\nnamespace Shopping.Sitemap.Providers;\n\npublic class PagesSitemapUrlProvider : ISitemapUrlProvider\n{\n    private readonly LinkGenerator _linkGenerator;\n    private readonly IHttpContextAccessor _httpContextAccessor;\n    private readonly IActionDescriptorCollectionProvider _actionDescriptorCollectionProvider;\n    private readonly ILogger&lt;PagesSitemapUrlProvider&gt; _logger;\n\n    public PagesSitemapUrlProvider(\n        LinkGenerator linkGenerator,\n        IHttpContextAccessor httpContextAccessor,\n        IActionDescriptorCollectionProvider actionDescriptorCollectionProvider,\n        ILogger&lt;PagesSitemapUrlProvider&gt; logger)\n    {\n        _linkGenerator = linkGenerator;\n        _httpContextAccessor = httpContextAccessor;\n        _actionDescriptorCollectionProvider = actionDescriptorCollectionProvider;\n        _logger = logger;\n    }\n\n    public Task&lt;IReadOnlyCollection&lt;SitemapNode&gt;&gt; GetNodes()\n    {\n        var httpContext = _httpContextAccessor.HttpContext!;\n        var nodes = new List&lt;SitemapNode&gt;();\n\n        foreach (var descriptor in _actionDescriptorCollectionProvider.ActionDescriptors.Items)\n        {\n            // LastOrDefault is used to get the closest SitemapAttribute to the endpoint\n            var exists = descriptor.EndpointMetadata.LastOrDefault(em =&gt; em is SitemapAttribute); \n            if (exists is not SitemapAttribute sitemapAttribute) continue;\n            \n            var url = descriptor switch\n            {\n                // Razor Pages\n                IsRazorPage razorPage =&gt;\n                    _linkGenerator.GetUriByPage(httpContext, page: razorPage.ViewEnginePath),\n                // ASP.NET Core MVC\n                IsMvc controller =&gt;\n                    _linkGenerator.GetUriByAction(httpContext,\n                        action: controller.ActionName,\n                        controller: controller.ControllerName,\n                        // use the values provided by the user (if any)\n                        values: sitemapAttribute.RouteValues),\n                _ =&gt; null\n            };\n\n            if (ShouldAddUrl(nodes, url))\n            {\n                nodes.Add(new SitemapNode(url)\n                {\n                    ChangeFrequency = sitemapAttribute.ChangeFrequency,\n                    Priority = sitemapAttribute.Priority\n                });\n            }\n        }\n\n        return Task.FromResult&lt;IReadOnlyCollection&lt;SitemapNode&gt;&gt;(nodes);\n    }\n    \n    private static bool ShouldAddUrl(List&lt;SitemapNode&gt; nodes, string? url)\n    {\n        // if the url failed to generate, don't add a record\n        if (string.IsNullOrWhiteSpace(url)) return false;\n        // if it already exists based on the URL, don't add it\n        return !nodes.Exists(n =&gt; n.Url.Equals(url, StringComparison.OrdinalIgnoreCase));\n    }\n    \n}\n</code></pre>\n\n<p>The trick in this method is utilizing the information from <code>ActionDescriptor</code> to determine how we want to generate links using the <code>LinkGenerator</code> instance. We also require an <code>HttpContext</code> to determine values for the base URL.</p>\n\n<p>Now all we need to do is decorate the endpoints we want to include in our Sitemap generation process. Here’s an example using custom attributes on our controller, where the closest attribute will be used when creating the sitemap node.</p>\n\n<pre><code class=\"language-csharp\">using Microsoft.AspNetCore.Mvc;\nusing Shopping.Sitemap;\n\nnamespace Shopping.Controllers;\n\n[ControllerSitemap]\npublic class TestController : Controller\n{\n    [ActionSitemap]\n    [Route(\"test\")]\n    public IActionResult Index()\n    {\n        return View();\n    }\n}\n\npublic class ControllerSitemapAttribute : SitemapAttribute\n{\n}\n\npublic class ActionSitemapAttribute : SitemapAttribute\n{\n    public ActionSitemapAttribute()\n    {\n        ChangeFrequency = DotnetSitemapGenerator.ChangeFrequency.Daily;\n    }\n}\n</code></pre>\n\n<p>The implementation in Razor Pages is similar, but here we use the base <code>SitemapAttribute</code>.</p>\n\n<pre><code class=\"language-csharp\">using Microsoft.AspNetCore.Mvc.RazorPages;\nusing Microsoft.EntityFrameworkCore;\nusing Shopping.Models;\nusing Shopping.Sitemap;\n\nnamespace Shopping.Pages;\n\n[Sitemap]\npublic class IndexModel : PageModel\n{\n    private readonly ILogger&lt;IndexModel&gt; _logger;\n    private readonly Database _db;\n\n    public IndexModel(ILogger&lt;IndexModel&gt; logger, Database db)\n    {\n        _logger = logger;\n        _db = db;\n    }\n\n    public List&lt;Product&gt; Products { get; set; } = new();\n\n    public async Task OnGet()\n    {\n        Products = await _db\n            .Products\n            .OrderBy(p =&gt; p.Id)\n            .ToListAsync();\n    }\n}\n</code></pre>\n\n<p>Cool! What about Minimal API endpoints?</p>\n\n<h2 id=\"aspnet-core-minimal-api-endpoints\">ASP.NET Core Minimal API endpoints</h2>\n\n<p>While most developers use ASP.NET Core Minimal APIs for API endpoints that return JSON or XML, developers may also choose to return any content type, which may include HTML files. So you may find these endpoints straddling the line between API and presentational duties.</p>\n\n<p>For completeness, let’s add an option for Minimal API endpoints.</p>\n\n<pre><code class=\"language-csharp\">using DotnetSitemapGenerator;\nusing Microsoft.AspNetCore.Mvc.ApiExplorer;\n\nnamespace Shopping.Sitemap.Providers;\n\npublic class EndpointsSitemapUrlProvider : ISitemapUrlProvider\n{\n    private readonly LinkGenerator _linkGenerator;\n    private readonly IHttpContextAccessor _httpContextAccessor;\n    private readonly IApiDescriptionGroupCollectionProvider _apiDescriptionGroupCollectionProvider;\n    private readonly ILogger&lt;PagesSitemapUrlProvider&gt; _logger;\n\n    public EndpointsSitemapUrlProvider(\n        LinkGenerator linkGenerator,\n        IHttpContextAccessor httpContextAccessor,\n        IApiDescriptionGroupCollectionProvider apiDescriptionGroupCollectionProvider,\n        ILogger&lt;PagesSitemapUrlProvider&gt; logger)\n    {\n        _linkGenerator = linkGenerator;\n        _httpContextAccessor = httpContextAccessor;\n        _apiDescriptionGroupCollectionProvider = apiDescriptionGroupCollectionProvider;\n        _logger = logger;\n    }\n\n    public Task&lt;IReadOnlyCollection&lt;SitemapNode&gt;&gt; GetNodes()\n    {\n        var httpContext = _httpContextAccessor.HttpContext!;\n        var nodes = new List&lt;SitemapNode&gt;();\n\n        // Minimal Apis that might return HTML\n        foreach (var group in _apiDescriptionGroupCollectionProvider.ApiDescriptionGroups.Items)\n        {\n            var endpoints =\n                group\n                    .Items\n                    .Where(i =&gt; HttpMethods.IsGet(i.HttpMethod ?? \"\"))\n                    .Where(i =&gt; i.ActionDescriptor.EndpointMetadata.Any(em =&gt; em is SitemapAttribute));\n\n            foreach (var endpoint in endpoints)\n            {\n                var attribute = endpoint\n                    .ActionDescriptor\n                    .EndpointMetadata\n                    .LastOrDefault(a =&gt; a is SitemapAttribute);\n\n                if (attribute is not SitemapAttribute sitemapAttribute)\n                    continue;\n\n                var routeName = endpoint\n                    .ActionDescriptor\n                    .EndpointMetadata\n                    .Where(m =&gt; m is RouteNameMetadata)\n                    .Cast&lt;RouteNameMetadata&gt;()\n                    .Select(a =&gt; a.RouteName)\n                    .FirstOrDefault();\n\n                if (routeName is null)\n                    continue;\n\n                var url = _linkGenerator.GetUriByName(\n                    httpContext,\n                    routeName,\n                    values: sitemapAttribute.RouteValues\n                );\n\n                if (ShouldAddUrl(nodes, url))\n                {\n                    nodes.Add(new SitemapNode(url)\n                    {\n                        ChangeFrequency = sitemapAttribute.ChangeFrequency,\n                        Priority = sitemapAttribute.Priority\n                    });\n                }\n            }\n        }\n\n        return Task.FromResult&lt;IReadOnlyCollection&lt;SitemapNode&gt;&gt;(nodes);\n    }\n\n    private static bool ShouldAddUrl(List&lt;SitemapNode&gt; nodes, string? url)\n    {\n        // if the url failed to generate, don't add a record\n        if (string.IsNullOrWhiteSpace(url)) return false;\n        // if it already exists based on the URL, don't add it\n        return !nodes.Exists(n =&gt; n.Url.Equals(url, StringComparison.OrdinalIgnoreCase));\n    }\n}\n</code></pre>\n\n<p>We’ll need to annotate our API endpoints to get Minimal API endpoints into the sitemap.</p>\n\n<pre><code class=\"language-csharp\">app.MapGet(\"cool/{id}\", () =&gt; \"cool beans\")\n   .WithSitemap(\"cool\", new { id = 3 });\n</code></pre>\n\n<p>In this example, we have a route value that needs to be satisfied before generating the link. Using the <code>WithSitemap</code> method, we can provide a default value. The extension method also adds a name to our endpoint metadata, which allows us to generate the correct link.</p>\n\n<p>We’re on a roll. What about data-driven pages?</p>\n\n<h2 id=\"database-driven-pages-with-entity-framework-core\">Database-driven pages with Entity Framework Core</h2>\n\n<p>Many sites have dynamic pages built on a dataset. Dynamic URLs are standard on shopping sites with an extensive product catalog. Let’s see how we can implement a <code>ProductSitemapUrlProvider</code>.</p>\n\n<pre><code class=\"language-csharp\">using DotnetSitemapGenerator;\nusing Microsoft.EntityFrameworkCore;\nusing Shopping.Models;\n\nnamespace Shopping.Sitemap.Providers;\n\npublic class ProductSitemapSitemapUrlProvider : ISitemapUrlProvider\n{\n    private readonly Database _db;\n    private readonly LinkGenerator _linkGenerator;\n    private readonly IHttpContextAccessor _httpContextAccessor;\n\n    public ProductSitemapSitemapUrlProvider(\n        Database db, \n        LinkGenerator linkGenerator, \n        IHttpContextAccessor httpContextAccessor)\n    {\n        _db = db;\n        _linkGenerator = linkGenerator;\n        _httpContextAccessor = httpContextAccessor;\n    }\n    \n    public async Task&lt;IReadOnlyCollection&lt;SitemapNode&gt;&gt; GetNodes()\n    {\n        var elements = new List&lt;SitemapNode&gt;();\n        var products = await _db.Products.OrderBy(x =&gt; x.Id).ToListAsync();\n        \n        foreach (var product in products)\n        {\n            var url = _linkGenerator.GetUriByPage(\n                _httpContextAccessor.HttpContext!,\n                page: \"/Products\",\n                values: new { product.Id, product.Slug });\n            \n            elements.Add(new SitemapNode(url));\n        }\n\n        return elements;\n    }\n}\n</code></pre>\n\n<p>That’s pretty straightforward. We must point to our product detail page, a Razor page at <code>/Products</code>, and get a unique URL for each product.</p>\n\n<h2 id=\"conclusion\">Conclusion</h2>\n\n<p><strong><a href=\"https://github.com/khalidabuhakmeh/AspNetCore-Sitemap\">Working sample at GitHub repository for ASP.NET Core Sitemap</a></strong></p>\n\n<p>With some help from an OSS project, I created a robust framework for generating sitemaps in ASP.NET Core using different programming approaches. While I’m sure this approach has more room for improvement, I’m pretty happy with the final result. What do you think?</p>\n\n<p>I added this project to GitHub, and I don’t intend to make it a NuGet package soon since I see developers adapting the code for each project. If you’re inspired to make it a NuGet package, you can do so; just let me know.</p>\n\n<p>Thanks for reading and sharing my posts with friends and colleagues.</p>\n\n",
      "Content": null,
      "Language": null,
      "Link": "https://khalidabuhakmeh.com/generate-sitemaps-for-all-of-aspnet-core"
    },
    {
      "FeedId": "https://khalidabuhakmeh.com/feed.xml",
      "ItemId": "https://khalidabuhakmeh.com/dotnet-8-timeprovider-and-unit-tests",
      "Title": ".NET 8 TimeProvider and Unit Tests",
      "PublishDate": "2023-07-25T00:00:00+00:00",
      "Summary": "<p>Working with time has always been one of the more difficult parts of software development. Inevitably, time makes fools of us all. Luckily, for .NET 8 users, there’s a new attempt to provide tools to make testing your time-based logic much more straightforward.</p>\n\n<p>This post explores the new .NET 8 packages of <code>Microsoft.Bcl.TimerProvider</code> and its testing partner of <code>Microsoft.Extensions.TimeProvider.Testing</code>. Specifically, we’ll see how to access controlled values for <code>Now</code> and <code>UtcNow</code> and how to tick a timer into the future, all through the use of <a href=\"https://learn.microsoft.com/en-us/dotnet/api/system.timeprovider?view=net-8.0\"><code>TimeProvider</code></a>.</p>\n\n<!--more-->\n\n<h2 id=\"why-use-a-time-provider\">Why use a Time Provider?</h2>\n\n<p>We’ve all been there, writing business logic that relies on the passage of time. “Execute this method a minute from now, but only if it’s a Monday!” Personally, the challenge of dealing with Date and Time elements in code can be a herculean effort. The packages shipped in .NET 8 attempt to give developers access to a <code>TimeProvider</code> abstraction with methods like <code>GetUtcNow</code>, <code>GetLocalNow</code>, <code>GetTimestamp</code>, and others. These methods provide instances of the <code>DateTimeOffset</code> class, which inherits from <code>DateTime</code>.</p>\n\n<p>In addition to Date and Time helpers, the <code>TimeProvider</code> class provides mechanisms to create <code>Timer</code> instances. In the default implementation, the timer created is of type <code>SystemTimeProviderTimer</code> and implements the <code>ITimer</code> interface. Having the timer instance originate from the <code>TimeProvider</code> allows the testing package to implement a test instance for unit testing.</p>\n\n<p>This layer of indirection allows you to be a time lord, controlling when clocks tick forward, move backward, and when timers should get called. The power to change time can help you test the trickiest of time-based code.</p>\n\n<p>Let’s see a few examples.</p>\n\n<h2 id=\"using-the-testing-classes\">Using The Testing Classes</h2>\n\n<p>In your codebase, you’re likely to take a dependency on <code>TimeProvider</code>, but in your tests, you’ll be substituting an instance of <code>FakeTimeProvider</code>. It’s a fake time provider.</p>\n\n<p>In my contrived example, I’ve created a method that finds the next day of the week.</p>\n\n<pre><code class=\"language-csharp\">public static class DateTimeExtensions\n{\n    public static DateTime FindNext(this TimeProvider provider, DayOfWeek dayOfWeek)\n    {\n        var now = provider.GetLocalNow();\n        var daysUntilNextWeekDay = ((int)dayOfWeek - (int)now.DayOfWeek + 7) % 7;\n        return now.DateTime.AddDays(daysUntilNextWeekDay);\n    }\n}\n</code></pre>\n\n<p><em><strong>Note: Yes, this is a contrived example. I could have passed the <code>DateTime</code> to the method, but that’s not the point.</strong></em></p>\n\n<p>Let’s create a <code>FakeTimeProvider</code> and set the current date and time.</p>\n\n<pre><code class=\"language-csharp\">[Fact]\npublic void Can_Find_Next_Monday()\n{\n    var fake = new FakeTimeProvider();\n \n    //This is a Wednesday\n    fake.SetUtcNow(DateTime.Parse(\"2023-06-28\"));\n\n    var result = fake.FindNext(DayOfWeek.Monday);\n    \n    Assert.Equal(\"2023-07-03\", result.ToString(\"yyyy-MM-dd\"));\n}\n</code></pre>\n\n<p>Great! That was easy. You must create a new <code>FakeTimeProvider</code> for each appropriate scope. One per test is the safest, but I can also see folks creating one provider for a group of tests. Use your judgment here.</p>\n\n<p>What about Timers? Fake timers use the <code>FakeTimeProvider</code> to know the elapsed time and determine when they should fire. Using the <code>TimeProvider</code> abstraction is helpful for testing callbacks and the infrastructure you may create to manage timers. Let’s look at a complete timer test.</p>\n\n<pre><code class=\"language-csharp\">[Fact]\npublic void Can_tick_when_asked()\n{\n    var fake = new FakeTimeProvider();\n    var now = DateTime.Now;\n    fake.SetUtcNow(now);\n    \n    var result = false;\n    \n    fake.CreateTimer(\n        _ =&gt; result = !result,\n        state: null, \n        // time to delay before invoking the callback method\n        // if TimeSpan.Zero will get immediately invoked\n        dueTime: TimeSpan.FromSeconds(1),\n        // time between callback invocations\n        period: TimeSpan.FromMinutes(1)\n    );\n    \n    Assert.False(result);\n    \n    // Change the fabric of space &amp; time...\n    // well not really.\n    fake.SetUtcNow(now.AddMinutes(1));\n    \n    Assert.True(result);\n}\n</code></pre>\n\n<p>The previous code creates a timer, but we only execute the callback when the time is set a minute into the future. Now we can test our callbacks and if they work as expected with a few lines of code. <strong>The <code>dueTime</code> argument is essential, as setting it to <code>TimeSpan.Zero</code> will fire the callback immediately.</strong> This behavior may be what you want, but it also means you have no opportunity to test the prior state of your tests.</p>\n\n<p>Here’s the complete unit test to play around with the packages and classes yourself.</p>\n\n<pre><code class=\"language-csharp\">using Microsoft.Extensions.Time.Testing;\n\npublic class UnitTest1\n{\n    [Fact]\n    public void Can_Find_Next_Monday()\n    {\n        var fake = new FakeTimeProvider();\n     \n        // this is a Wednesday\n        fake.SetUtcNow(DateTime.Parse(\"2023-06-28\"));\n        \n        var result = fake.FindNext(DayOfWeek.Monday);\n        \n        Assert.Equal(\"2023-07-03\", result.ToString(\"yyyy-MM-dd\"));\n    }\n\n    [Fact]\n    public void Current_Day_Of_Week_Counts_As_Next()\n    {\n        var fake = new FakeTimeProvider();\n     \n        // this is a Wednesday\n        fake.SetUtcNow(DateTime.Parse(\"2023-06-28\"));\n\n        var result = fake.FindNext(DayOfWeek.Wednesday);\n        \n        Assert.Equal(\"2023-06-28\", result.ToString(\"yyyy-MM-dd\"));\n    }\n\n    [Fact]\n    public void Can_tick_when_asked()\n    {\n        var fake = new FakeTimeProvider();\n        var now = DateTime.Now;\n        fake.SetUtcNow(now);\n        \n        var result = false;\n        \n        fake.CreateTimer(\n            _ =&gt; result = !result,\n            state: null, \n            // time to delay before invoking the callback method\n            // if TimeSpan.Zero will get immediately invoked\n            dueTime: TimeSpan.FromSeconds(1),\n            // time between callback invocations\n            period: TimeSpan.FromMinutes(1)\n        );\n        \n        Assert.False(result);\n        \n        // Change the fabric of space &amp; time...\n        // well not really.\n        fake.SetUtcNow(now.AddMinutes(1));\n        \n        Assert.True(result);\n    }\n    \n}\n\npublic static class DateTimeExtensions\n{\n    public static DateTime FindNext(this TimeProvider provider, DayOfWeek dayOfWeek)\n    {\n        var now = provider.GetLocalNow();\n        var daysUntilNextWeekDay = ((int)dayOfWeek - (int)now.DayOfWeek + 7) % 7;\n        return now.DateTime.AddDays(daysUntilNextWeekDay);\n    }\n}\n</code></pre>\n\n<h2 id=\"conclusion\">Conclusion</h2>\n\n<p>The new <code>Microsoft.Bcl.TimeProvider</code> package and the <code>TimeProvider</code> abstraction should help folks add a layer of separation between them and the <code>DateTime</code> model of .NET. These new classes should alleviate the tight coupling between your business logic and the forward march of time, helping increase the reliability of your codebase. I hope you found this post interesting. Cheers :)</p>\n",
      "Content": null,
      "Language": null,
      "Link": "https://khalidabuhakmeh.com/dotnet-8-timeprovider-and-unit-tests"
    },
    {
      "FeedId": "https://khalidabuhakmeh.com/feed.xml",
      "ItemId": "https://khalidabuhakmeh.com/csharp-records-the-with-keyword-and-reference-types",
      "Title": "C# Records, the With Keyword, and Reference Types",
      "PublishDate": "2023-07-18T00:00:00+00:00",
      "Summary": "<p>The <code>record</code> keyword in C# has been available since C# 9, and you either love it or hate it. Regardless of your opinion, you will likely make a not-so-obvious mistake when working with the <code>with</code> keyword. This particular mistake can lead to strange system behavior and hard-to-diagnose bugs. Nobody wants bugs, right?!</p>\n\n<p>In this post, we’ll explore the problem and how to solve that issue.</p>\n\n<!--more-->\n\n<h2 id=\"the-problem-with-records\">The Problem with Records</h2>\n\n<p>The virtue of <code>record</code> types is based on immutability, allowing you, the developer, to encapsulate data and pass it around without fear of introducing unwanted changes. The <code>with</code> keyword enables you to copy an existing record to avoid mutating the original value, thus maintaining a clear separation between what was and might be. Let’s take a look at a simple example.</p>\n\n<pre><code class=\"language-csharp\">var one = new Simple(1);\nvar copy = one with { Number = one.Number + 1 };\n\nConsole.WriteLine(copy);\n</code></pre>\n\n<p>When running the previous code, the result is the following console output.</p>\n\n<pre><code class=\"language-csharp\">Simple { Number = 2 }\n</code></pre>\n\n<p>Attempting to change the <code>Number</code> directly creates a compilation exception with the message.</p>\n\n<pre><code class=\"language-text\">Init-only property 'Simple.Number' can only be assigned in an object initializer, or on 'this' or 'base' in an instance constructor or an 'init' accessor\n</code></pre>\n\n<p>Now, the real fun begins. We’ve been looking at value types, which the runtime will copy. What about reference types? Let’s add a collection to a record.</p>\n\n<pre><code class=\"language-csharp\">var item = new Item();\n\nvar newItem = item with { };\nitem.State.Add(1);\nnewItem.State.Add(2);\n\nConsole.WriteLine(item);\nConsole.WriteLine(newItem);\n\npublic record Item(List&lt;int&gt; State)\n{\n    public Item() : this(new List&lt;int&gt;())\n    {\n    }\n\n    public override string ToString()\n    {\n        return $\"Item {{ State = {string.Join(\", \", State)} }}\";\n    }\n}\n</code></pre>\n\n<p>What do you expect <code>State</code> (don’t peek)? You would be correct if you guessed it would be <code>1, 2</code> across both instances.</p>\n\n<pre><code class=\"language-text\">Item { State = 1, 2 }\nItem { State = 1, 2 }\n</code></pre>\n\n<p>As you may well know, reference types point to a location in memory. When using the <code>with</code> keyword on records with reference types, the runtime will copy the reference to the new instance of the record. This behavior is excellent for memory efficiency, as the runtime does not allocate more memory for read-only information. This behavior is not good if you mutate the data before passing the data around to other consumers.</p>\n\n<p>How do we solve this issue? Well, there are two ways.</p>\n\n<h2 id=\"using-property-setters-when-copying\">Using Property Setters when copying</h2>\n\n<p>The first approach is to be aware of all the reference types in a record and mutate the values early in the creation process.</p>\n\n<pre><code class=\"language-csharp\">var item = new Item();\n\nvar newItem = item with { State = item.State.Append(2).ToList() };\nitem.State.Add(1);\n\nConsole.WriteLine(item);\nConsole.WriteLine(newItem);\n</code></pre>\n\n<p>The resulting output shows we now have two different collections.</p>\n\n<pre><code class=\"language-text\">Item { State = 1 }\nItem { State = 2 }\n</code></pre>\n\n<p>This approach is acceptable but requires effort when using the <code>with</code> keyword.</p>\n\n<p>Another approach is using a “copy constructor”. A copy constructor is a method that takes an instance in the known inheritance hierarchy and allows you to make decisions during the creation process. Let’s change our record definition by adding a copy constructor that creates a new collection instance. <strong>The <code>with</code> keyword will tell the runtime to look for a copy constructor on your definition before copying values over.</strong></p>\n\n<pre><code class=\"language-csharp\">var item = new Item();\n\nvar newItem = item with { };\nitem.State.Add(1);\nnewItem.State.Add(2);\nConsole.WriteLine(item);\nConsole.WriteLine(newItem);\n\npublic record Item(List&lt;int&gt; State)\n{\n    public Item() : this(new List&lt;int&gt;())\n    {\n    }\n\n    // copy constructor\n    protected Item(Item oldItem)\n    {\n        State = new List&lt;int&gt;(oldItem.State);\n    }\n\n    public override string ToString()\n    {\n        return $\"Item {{ State = {string.Join(\", \", State)} }}\";\n    }\n}\n</code></pre>\n\n<p>When we run the previous code, our result shows two separate collections on two record instances.</p>\n\n<pre><code class=\"language-text\">Item { State = 1 }\nItem { State = 2 }\n</code></pre>\n\n<p>You have two viable approaches to work around reference types in <code>record</code> types.</p>\n\n<p>Another option you should consider is the use of immutable reference types from the start. In the case of this example, you may want to use <code>IReadOnlyList</code> instead of <code>List</code> right in the record’s constructor.</p>\n\n<h2 id=\"conclusion\">Conclusion</h2>\n\n<p>While the <code>record</code> type has syntactic significance in C#, under the covers, it’s just a specialized implementation of a <code>class</code>. The concepts around value types and reference types still apply. Remembering what values you add to your implementations is essential, as incorrectly copying records can lead to strange bugs. My recommendation to most folks using <code>record</code> types would be to implement the copy constructor early on to remember to be intentional about the copying process.</p>\n\n<p>I hope you found this post helpful, and thank you for sharing this post with friends and colleagues. Cheers :)</p>\n\n",
      "Content": null,
      "Language": null,
      "Link": "https://khalidabuhakmeh.com/csharp-records-the-with-keyword-and-reference-types"
    },
    {
      "FeedId": "https://khalidabuhakmeh.com/feed.xml",
      "ItemId": "https://khalidabuhakmeh.com/htmx-aspnet-core-and-bootstrap-modals",
      "Title": "HTMX, ASP.NET Core, and Bootstrap Modals",
      "PublishDate": "2023-07-11T00:00:00+00:00",
      "Summary": "<p>If you’ve done any frontend development in the past decade, you’ve likely interacted with Bootstrap, a toolkit focused on providing developers with CSS layout rules and components. Additionally, no frontend toolkit is complete with the accompanying JavaScript to make components interactive. That said, the JavaScript aspects are entirely optional, and the toolkit has a “Bring Your Own JavaScript” philosophy to integrate Bootstrap visual components into whatever frontend library you choose.</p>\n\n<p>This post will show how to use <a href=\"https://getboostrap.com\">Bootstrap</a> modals with <a href=\"https://htxm.org\">HTMX</a>. For folks who aren’t aware, HTMX is a hypermedia-focused library to build interactivity into your client applications with server-rendered responses.</p>\n\n<p><strong>Please note I’m using the <a href=\"https://github.com/khalidabuhakmeh/Htmx.Net\">HTMX.NET</a> library and ASP.NET Core tag helpers.</strong></p>\n\n<!--more-->\n\n<h2 id=\"bootstrap-modals\">Bootstrap Modals</h2>\n\n<p>Bootstrap modals are built with HTML, CSS, and Javascript in mind. You typically have all three working together to get the intended behavior the Bootstrap team intended. You can find these interactive portions of bootstrap modals in the JavaScript library that accompanies the library, but there’s a caveat.</p>\n\n<p>Modals have to already exist on the page as HTML or programmatically added through JavaScript calls. Static modals are great, but likely not what most folks want. Most developers want dynamic modals based on user interaction or situational modals. So how do we get dynamic modals that we generate on the server? Well, spoiler alert, HTMX, of course!</p>\n\n<h2 id=\"htmx-and-all-that-jazz\">HTMX and All That Jazz</h2>\n\n<p>Before we start looking at the code, let’s look at the parts of the process we need to consider.</p>\n\n<ol>\n  <li>The interactive element is a button a user will click to trigger a request to the server.</li>\n  <li>The endpoint that receives and renders the modal.</li>\n  <li>The endpoint that receives and responds with a user-specific response.</li>\n</ol>\n\n<p>If you’re a backend developer, implementing these steps will get you the intended behavior, and it’s all straightforward. Let’s walk through implementing each.</p>\n\n<h3 id=\"the-modal-trigger\">The Modal Trigger</h3>\n\n<p>Modals need a trigger and a target. When our user clicks the trigger, we want to request the server to generate and return our modal HTML.</p>\n\n<p>Let’s start with our button and what HTMX attributes we’ll need. I use ASP.NET Core Razor Pages, which works with any backend technology. Also, remember some of these attributes are part of the HTMX.NET library and the tag helpers it provides.</p>\n\n<pre><code class=\"language-cshtml\">@page\n@model IndexModel\n@{\n    ViewData[\"Title\"] = \"Home page\";\n}\n\n&lt;div class=\"text-center\"&gt;\n    &lt;h1 class=\"display-4\"&gt;Welcome&lt;/h1&gt;\n    &lt;button hx-get hx-page=\"Index\" \n            hx-page-handler=\"Modal\"\n            hx-target=\"#modal-container\"&gt;\n        Show Modal\n    &lt;/button&gt;\n&lt;/div&gt;\n\n&lt;div id=\"modal-container\"&gt;&lt;/div&gt;\n</code></pre>\n\n<p>The Razor Pages handler is a simple endpoint that returns an <code>IActionResult</code>.</p>\n\n<pre><code class=\"language-csharp\">public IActionResult OnGetModal()\n{\n    return Partial(\"Modal\");\n}\n</code></pre>\n\n<p>Now that we have that part let’s look at the modal HTML itself.</p>\n\n<h3 id=\"the-server-rendered-modal\">The Server-rendered Modal</h3>\n\n<p>The modal is your run-of-the-mill Bootstrap modal but with some additional JavaScript. Here is the trick. <strong>HTMX will execute any <code>&lt;script&gt;</code> elements immediately, allowing you to perform the necessary setup for HTML</strong>. The behavior will enable you to use HTMX and the JavaScript the Bootstrap development team intended.</p>\n\n<pre><code class=\"language-cshtml\">@model IndexModel\n\n&lt;div id=\"my-modal\" class=\"modal fade\" tabindex=\"-1\"&gt;\n    &lt;div class=\"modal-dialog modal-dialog-centered\"&gt;\n        &lt;div id=\"modal-body\" class=\"modal-content\"&gt;\n            &lt;div class=\"modal-header\"&gt;\n                &lt;h5 class=\"modal-title\"&gt;From The Server&lt;/h5&gt;\n                &lt;button type=\"button\"\n                        class=\"btn-close\"\n                        data-bs-dismiss=\"modal\"\n                        aria-label=\"Close\"&gt;\n                &lt;/button&gt;\n            &lt;/div&gt;\n            &lt;div class=\"modal-body\"&gt;\n                &lt;form id=\"myForm\" hx-post\n                      hx-page=\"index\"\n                      hx-page-handler=\"Modal\"\n                      hx-target=\"closest .modal-body\"&gt;\n                    &lt;div class=\"mb-3\"&gt;\n                        &lt;label asp-for=\"Message\" class=\"form-label\"&gt;&lt;/label&gt;\n                        &lt;input asp-for=\"Message\" class=\"form-control\" placeholder=\"Your message...\"&gt;\n                    &lt;/div&gt;\n                    @Html.AntiForgeryToken()\n                &lt;/form&gt;\n            &lt;/div&gt;\n            &lt;div class=\"modal-footer\"&gt;\n                &lt;button form=\"myForm\"\n                        type=\"submit\"\n                        class=\"btn btn-primary\"&gt;\n                    Save changes\n                &lt;/button&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n&lt;/div&gt;\n&lt;script&gt;\n    function showModal() {\n        const modal = new bootstrap.Modal('#my-modal');\n        modal.show();\n    }\n    // scopes the modal so we can keep creating them\n    showModal();\n&lt;/script&gt;\n</code></pre>\n\n<p>Looking through the HTML, you’ll see HTMX attributes sprinkled throughout. HTMX will process these attributes as it adds the HTML clientside DOM. I’m using HTMX’s <code>hx-target</code> to tell HTMX where the following response should go. Please read the HTMX documentation to understand how to use <code>hx</code> attributes for your solutions.</p>\n\n<p>If you have a message-only modal, you can stop here, but if you need modals for further interactions, the next section will show you how to handle that use case.</p>\n\n<p>OK, one more step: we’ll have an interactive HTMX-powered modal.</p>\n\n<h3 id=\"the-form-submission\">The Form Submission</h3>\n\n<p>We must receive the HTML form’s input elements in our Razor Pages handler. In the sample above, that is a single <code>Message</code> text box. Our Razor Page implementation has an endpoint and a <code>string</code> property.</p>\n\n<pre><code class=\"language-csharp\">[BindProperty]\npublic string? Message { get; set; }\n\npublic IActionResult OnPostModal()\n{\n    return Partial(\"Success\", this);\n}\n</code></pre>\n\n<p>Along with the C# code, we have a corresponding view of <code>Success</code>.</p>\n\n<pre><code class=\"language-cshtml\">@model IndexModel\n\n&lt;strong&gt;You Said: \"@Model.Message\"&lt;/strong&gt;\n</code></pre>\n\n<p>Wow, that’s it.</p>\n\n<p>If you’d like to see a complete working version of this solution, you can get <a href=\"https://github.com/khalidabuhakmeh/HtmxBootstrapModal\">the working HTMX Bootstrap modal sample on my GitHub Repository here</a>.</p>\n\n<h2 id=\"conclusion\">Conclusion</h2>\n\n<p>Bootstrap is a popular frontend library designed to allow you to bring any client-side libraries to the party. In my case, I enjoy using HTMX to enhance an otherwise static experience. As you can see in the sample, it only takes some basic problem-solving skills to bring the two together.</p>\n\n<p>I hope you found this blog post helpful, and thank you for reading.</p>\n\n",
      "Content": null,
      "Language": null,
      "Link": "https://khalidabuhakmeh.com/htmx-aspnet-core-and-bootstrap-modals"
    },
    {
      "FeedId": "https://khalidabuhakmeh.com/feed.xml",
      "ItemId": "https://khalidabuhakmeh.com/adding-a-readme-to-nuget-package-landing-pages",
      "Title": "Adding a Readme to NuGet Package Landing Pages",
      "PublishDate": "2023-07-04T00:00:00+00:00",
      "Summary": "<p>An essential part of working on open-source libraries is conveying the value and useability of said library—a well-written “readme” file, while not a substitute for complete documentation, can help onboard new users and increase the joy of using your code.</p>\n\n<p>Regarding NuGet packages, you can now add a <code>Readme.md</code> asset to your NuGet packages, which NuGet.org will display on your package’s landing page, thus giving you another medium to attract new users and inform the curious developer. For example, check out my library <a href=\"https://www.nuget.org/packages/Htmx.TagHelpers/1.1.3#readme-body-tab\">HTMX.NET landing page</a>, which now has the read me prominently displayed.</p>\n\n<p>Let’s see what steps you must take to accomplish the same in your libraries.</p>\n\n<!--more-->\n\n<h2 id=\"the-readme-file\">The Readme File</h2>\n\n<p>Typically, at the root of every open-source repository should be a <code>readme.md</code> file. The inclusion of the file has become a convention across GitHub, GitLab, and most distributed source control offerings. Your source control’s user interface will display the readme to repository visitors, allowing them to read your perspective and introductory notes.</p>\n\n<p>As an aside, a good readme should answer three essential questions:</p>\n\n<ol>\n  <li><strong>What is this project?</strong> A statement of intent and what the ultimate goal of the repository is trying to accomplish goes a long way.</li>\n  <li><strong>How do I get started?</strong> This includes where to get the library, possibly building the source, or acessing the library through a package manager.</li>\n  <li><strong>What are some common use cases?</strong> While you can’t account for all scenarios, there are likely common use cases your users will encounter. Spell them out. If there are known edge cases, spell those out too.</li>\n</ol>\n\n<p>When adding the <code>Readme.md</code> to your .NET repository, you’ll want to link it to each project that is packagable. <a href=\"/a-dotnet-five-guide-from-idea-to-nuget-package\">Checkout out my NuGet guide here if you’re unfamiliar with setting up .NET projects for NuGet.</a></p>\n\n<h2 id=\"updating-the-package-project\">Updating The Package Project</h2>\n\n<p>The way I accomplish this is by using the <code>Link</code> functionality in a <code>csproj</code> file. Let’s take a look at what that might look like.</p>\n\n<pre><code class=\"language-xml\">&lt;ItemGroup&gt;\n    &lt;None Remove=\"antiforgerySnippet.js\" /&gt;\n    &lt;None Include=\"..\\..\\icon.png\" Pack=\"true\" PackagePath=\"\"&gt;\n        &lt;Link&gt;Properties\\icon.png&lt;/Link&gt;\n    &lt;/None&gt;\n    &lt;!-- IMPORTANT: adding the Readme as a link --&gt;\n    &lt;None Include=\"..\\..\\README.md\" Pack=\"true\" PackagePath=\"\"&gt;\n        &lt;Link&gt;Properties\\README.md&lt;/Link&gt;\n    &lt;/None&gt;\n&lt;/ItemGroup&gt;\n</code></pre>\n\n<p>The link can point to anywhere in your project, but I place most of my linked resources inside of the <code>Properties</code> folder to keep the visual clutter to a minnimum. You’ll also need to have the <code>Pack</code> attribute set to <code>true</code> and the <code>PackagePath</code> is set to the NuGet package root. I also have a package icon in this item group, which I also recommend adding.</p>\n\n<p>Next, you’ll need to add some additional elements to your project’s <code>PropertyGroup</code> element, with the important tags for this tutorial being <code>PackageReadmeFile</code>. I’ve included a complete <code>PropertyGroup</code> section to see how it fits in with all the other <code>Package*</code> elements.</p>\n\n<p>The <code>PackageReadmeFile</code> requires the path to the <code>Readme.md</code> file within the NuGet package. Do not confuse this with where you place the file in your project.</p>\n\n<pre><code class=\"language-xml\">&lt;PropertyGroup&gt;\n    &lt;TargetFramework&gt;netcoreapp3.1&lt;/TargetFramework&gt;\n    &lt;OutputType&gt;Library&lt;/OutputType&gt;\n    &lt;Nullable&gt;enable&lt;/Nullable&gt;\n    &lt;LangVersion&gt;Latest&lt;/LangVersion&gt;\n    &lt;IsPackable&gt;true&lt;/IsPackable&gt;\n    &lt;PackageId&gt;Htmx.TagHelpers&lt;/PackageId&gt;\n    &lt;Authors&gt;Khalid Abuhakmeh&lt;/Authors&gt;\n    &lt;PackageIcon&gt;icon.png&lt;/PackageIcon&gt;\n    &lt;RepositoryUrl&gt;https://github.com/khalidabuhakmeh/Htmx.Net&lt;/RepositoryUrl&gt;\n    &lt;PackageLicenseExpression&gt;MIT&lt;/PackageLicenseExpression&gt;\n    &lt;PackageTags&gt;web,javascript&lt;/PackageTags&gt;\n    &lt;!-- IMPORTANT Do not forget this --&gt;\n    &lt;PackageReadmeFile&gt;README.md&lt;/PackageReadmeFile&gt;\n    &lt;Description&gt;\n        Adds ASP.NET Core tag helpers to make generating urls for Htmx (https://htmx.org) easier. Mimics the ASP.NET Core url tag helpers.\n    &lt;/Description&gt;\n&lt;/PropertyGroup&gt;\n</code></pre>\n\n<p>If you’ve followed these steps correctly, then you should have a visible Readme on your NuGet packages home page. Congratulations! 🎉</p>\n\n<p><strong>Side Note:</strong> NuGet.org will not respective relatively-linked resources such as images. If your file uses image references, be sure to have absolute paths to the images or else you’ll have an incomplete readme on NuGet.org.</p>\n\n<h2 id=\"conclusion\">Conclusion</h2>\n\n<p>There you have it! With the use of a Readme file, a <code>Link</code> element, and <code>PackageReadmeFile</code> element you too can have a better looking NuGet package page. It can give you and your package a greater chance of being picked and it can help grow your little corner of the .NET community.</p>\n\n<p>As always, thanks for reading and sharing my posts with friends and colleagues.</p>\n",
      "Content": null,
      "Language": null,
      "Link": "https://khalidabuhakmeh.com/adding-a-readme-to-nuget-package-landing-pages"
    },
    {
      "FeedId": "https://khalidabuhakmeh.com/feed.xml",
      "ItemId": "https://khalidabuhakmeh.com/htmx-boosts-and-aspnet-core-anti-forgery-tokens",
      "Title": "HTMX Boosts and ASP.NET Core Anti-Forgery Tokens",
      "PublishDate": "2023-06-27T00:00:00+00:00",
      "Summary": "<p>I maintain an ASP.NET Core enhancement library focused on integrating <a href=\"https://htmx.org\">HTMX</a> naturally into your web development workflow. It works great, but I must admit that HTMX is doing much of the heavy lifting regarding developer experience; it’s incredible! That said, <a href=\"https://github.com/khalidabuhakmeh/htmx.net\">my library (HTMX.NET)</a> helps smooth out some of the edges that come with integrating the two parts of the experience: ASP.NET Core and the HTML UI.</p>\n\n<p>In this post, I’ll discuss how to work with anti-forgery tokens and some techniques I’ve taken to help mitigate the issues you might run into when working with HTMX boosts and ASP.NET Core security measures.</p>\n\n<!--more-->\n\n<h2 id=\"what-is-htmx-and-whats-a-boost\">What is HTMX and What’s a Boost?</h2>\n\n<p>HTMX is a client-side library that takes a hypermedia approach to manage user interaction between the client and the server. In simpler terms, HTMX works with HTML fragments and replaces DOM elements based on an HTML server response. While seemingly simple, this approach is robust and used by organizations like GitHub and the Ruby on Rails community.</p>\n\n<p>HTMX also supports the concept of <strong>Boost</strong>. In practice, boosting requires no changes to the server-side implementation but can increase perceived user performance on the client. HTMX can intercept any anchor-based web request and then process the response, replacing the page’s existing <code>&lt;body&gt;</code> element with the response’s version. Boosting can limit client-side parsing to the elements in the <code>&lt;body&gt;</code> tag while eliminating the need for requesting and reprocessing the <code>&lt;head&gt;</code> element and all its resources, such as scripts and cascading stylesheets.</p>\n\n<p>While boosting has benefits, there are drawbacks you should be aware of:</p>\n\n<ul>\n  <li>Any changes in the head are not automatically processed, except for the page’s title.</li>\n  <li>Additional scripts in the body will be reprocessed, leading to rerunning scripts (and potential re-registration of event handlers).</li>\n</ul>\n\n<p>Following the previous best practices of placing scripts just before the <code>&lt;body&gt;</code> tag ends, these drawbacks become apparent. Also, when working with ASP.NET Core anti-forgery tokens, as currently, the HTMX.NET library adds a global token to the <code>&lt;head&gt;</code> tag to be used generally by <strong>POST</strong> requests. Finally, for your information, it’s best practice to use <code>&lt;form&gt;</code> elements, as ASP.NET Core gives forms a new anti-forgery token to use on submissions.</p>\n\n<p>The goal is to update anti-forgery tokens and stop event handlers from being re-registered. So how did I accomplish that?</p>\n\n<h2 id=\"scripts-within-the-body-tag\">Scripts Within The Body Tag</h2>\n\n<p>Since HTMX boosts only replace the contents of the <code>&lt;body&gt;</code> tag, not the <code>&lt;body&gt;</code> tag itself, I can add additional metadata to the DOM element that survives while the page session is still active. For example, if the script executes at the end of the <code>&lt;body&gt;</code> tag, we can wrap all scripts with the following check.</p>\n\n<pre><code class=\"language-javascript\">if (!document.body.attributes.__htmx_antiforgery) {\n    // register HTMX event handlers here\n    document.body.attributes.__htmx_antiforgery = true;\n}\n</code></pre>\n\n<p>That solves the multiple registrations of event handlers issue, and now we can handle boosts. In the latest release of HTMX (1.9.2), we have more metadata to determine if a response resulted from a boosted request. So after a response is loaded but yet to be processed, we can glean the latest anti-forgery token from the <code>&lt;head&gt;</code> element of the response.</p>\n\n<pre><code class=\"language-javascript\">document.addEventListener(\"htmx:afterOnLoad\", evt =&gt; {\n    if (evt.detail.boosted) {\n        const parser = new DOMParser();\n        const html = parser.parseFromString(evt.detail.xhr.responseText, 'text/html');\n        const selector = 'meta[name=htmx-config]';\n        const config = html.querySelector(selector);\n        if (config) {\n            const current = document.querySelector(selector);\n            // only change the anti-forgery token\n            const key = 'antiForgery';\n            htmx.config[key] = JSON.parse(config.attributes['content'].value)[key];\n            // update DOM, probably not necessary, but for sanity's sake\n            current.replaceWith(config);\n        }\n    }\n});\n</code></pre>\n\n<p>This JavaScript event handler will keep our anti-forgery tokens up to date on each full-page boost. Neat!</p>\n\n<p>While this approach works in the <code>&lt;body&gt;</code> tag, I think there’s a better way.</p>\n\n<h2 id=\"add-script-to-head-and-defer\">Add Script to Head and Defer</h2>\n\n<p>The JavaScript I’ve written for HTMX.NET works excellently, but we can use the registration differently to avoid some of the abovementioned issues.</p>\n\n<p>By changing how the client can access the script, we can take advantage of some newer concepts in resource management. The first step is to register an endpoint that can serve our initial script.</p>\n\n<pre><code class=\"language-csharp\">using Microsoft.AspNetCore.Builder;\nusing Microsoft.AspNetCore.Http;\nusing Microsoft.AspNetCore.Routing;\n\nnamespace Htmx.TagHelpers;\n\npublic static class HtmxAntiforgeryScriptEndpoints\n{\n    /// &lt;summary&gt;\n    /// The path to the anti-forgery script that is used from HTML\n    /// &lt;/summary&gt;\n    public static string Path { get; private set; } = \"_htmx/antiforgery.js\";\n    \n    /// &lt;summary&gt;\n    /// Register an endpoint that responds with the HTMX anti-forgery script.&lt;br/&gt;\n    /// IMPORTANT: Remember to add the following script tag to your _Layout.cshtml or Razor view:\n    /// &lt;![CDATA[\n    /// &lt;script src=\"@HtmxAntiforgeryScriptEndpoints.Path\" defer&gt;&lt;/script&gt;\n    /// ]]&gt;\n    /// &lt;/summary&gt;\n    /// &lt;param name=\"builder\"&gt;Endpoint builder&lt;/param&gt;\n    /// &lt;param name=\"path\"&gt;The path to the anti-forgery script&lt;/param&gt;\n    /// &lt;returns&gt;The registered endpoint (Use &lt;seealso cref=\"Path\"/&gt; to reference endpoint)&lt;/returns&gt;\n    public static IEndpointConventionBuilder MapHtmxAntiforgeryScript(\n        this IEndpointRouteBuilder builder,\n        string? path = null)\n    {\n        // set Path globally for access\n        Path = path ?? Path;\n        \n        return builder.MapGet(Path, async ctx =&gt;\n        {\n            ctx.Response.ContentType = \"text/javascript\";\n            await ctx.Response.WriteAsync(HtmxSnippets.AntiforgeryJavaScript);\n        });\n    }\n}\n</code></pre>\n\n<p>Now we can register our endpoint with our ASP.NET Core application.</p>\n\n<pre><code class=\"language-csharp\">app.MapHtmxAntiforgeryScript();\n</code></pre>\n\n<p>The added benefit here is we can now add response caching and other endpoint filters to alter how this script is delivered.</p>\n\n<p>Finally, with the keyword’ defer’, we can add the script to our <code>_Layout.cshtml</code> file in the <code>&lt;head&gt;</code> element.</p>\n\n<pre><code class=\"language-cshtml\">&lt;head&gt;\n    &lt;meta charset=\"utf-8\"/&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"/&gt;\n    &lt;meta\n        name=\"htmx-config\"\n        historyCacheSize=\"20\"\n        indicatorClass=\"htmx-indicator\"\n        includeAspNetAntiforgeryToken=\"true\"/&gt;\n    &lt;title&gt;@ViewData[\"Title\"] - Htmx.Sample&lt;/title&gt;\n    &lt;link rel=\"stylesheet\" href=\"~/lib/bootstrap/dist/css/bootstrap.min.css\"/&gt;\n    &lt;link rel=\"stylesheet\" href=\"~/css/site.css\" asp-append-version=\"true\"/&gt;\n    &lt;script src=\"~/lib/jquery/dist/jquery.min.js\" defer&gt;&lt;/script&gt;\n    &lt;script src=\"~/lib/bootstrap/dist/js/bootstrap.bundle.min.js\" defer&gt;&lt;/script&gt;\n    &lt;script src=\"https://unpkg.com/htmx.org@@1.9.2\" defer&gt;&lt;/script&gt;\n    &lt;script src=\"@HtmxAntiforgeryScriptEndpoints.Path\" defer&gt;&lt;/script&gt;\n&lt;/head&gt;\n</code></pre>\n\n<p>The <code>defer</code> keyword will download the script parallel to parsing the page and only execute it after the client has finished parsing. The keyword keeps our scripts from blocking the critical rendering path.</p>\n\n<p>While our script contains the <code>if</code> block, it is unnecessary now since HTMX boosts will not reload any of the <code>&lt;head&gt;</code> elements. Neat!</p>\n\n<h2 id=\"conclusion\">Conclusion</h2>\n\n<p>HTMX has many great features out-of-the-box, but it’s still necessary to fuse the elements of HTMX to your technology stack of choice. In my case, and likely yours, that’s ASP.NET Core. So you should expect this update in the current feature set of HTMX.NET. If you use HTMX.NET, please let me know what you think and where I can improve it.</p>\n\n<p>As always, thanks for reading and sharing my posts. Cheers :)</p>\n",
      "Content": null,
      "Language": null,
      "Link": "https://khalidabuhakmeh.com/htmx-boosts-and-aspnet-core-anti-forgery-tokens"
    },
    {
      "FeedId": "https://khalidabuhakmeh.com/feed.xml",
      "ItemId": "https://khalidabuhakmeh.com/using-stringbuilder-to-replace-values",
      "Title": "Using StringBuilder To Replace Values",
      "PublishDate": "2023-06-20T00:00:00+00:00",
      "Summary": "<p>Have you ever had to clean up your users’ input, only to realize the pain and aggravation it can lead to with all the unnecessary memory overhead? I recently had an “aha!” moment and thought I would share this tip with you.</p>\n\n<p>This article will be short, but I’ll try to give you some context as we go along. Let’s get started.</p>\n\n<!--more-->\n\n<h2 id=\"calculators-and-user-input\">Calculators and User Input</h2>\n\n<p>I recently looked at a sample calculator project from <a href=\"https://github.com/naweed\">MAUI developer Naweed Akram</a>. He has some fantastic MAUI samples, and his <a href=\"https://github.com/naweed/MauiScientificCalculator\">Scientific Calculator</a> is impressive. Check it out, seriously. He uses the <a href=\"https://github.com/ncalc/ncalc\">NCalc</a> library to parse <code>string</code> expressions and evaluate the result. It’s a very cool library but has a caveat. Functions are case-sensitive, so user input must be constrained or normalized. Naweed chose the normalization path, and his implementation is similar to the approach I would have taken myself. Let’s take a look at it.</p>\n\n<pre><code class=\"language-csharp\">private string NormalizeInputString()\n{\n    Dictionary&lt;string, string&gt; _opMapper = new()\n    {\n        {\"×\", \"*\"},\n        {\"÷\", \"/\"},\n        {\"SIN\", \"Sin\"},\n        {\"COS\", \"Cos\"},\n        {\"TAN\", \"Tan\"},\n        {\"ASIN\", \"Asin\"},\n        {\"ACOS\", \"Acos\"},\n        {\"ATAN\", \"Atan\"},\n        {\"LOG\", \"Log\"},\n        {\"EXP\", \"Exp\"},\n        {\"LOG10\", \"Log10\"},\n        {\"POW\", \"Pow\"},\n        {\"SQRT\", \"Sqrt\"},\n        {\"ABS\", \"Abs\"},\n    };\n    \n    var retString = InputText;\n    foreach (var key in _opMapper.Keys)\n    {\n        retString = retString.Replace(key, _opMapper[key]);\n    }\n\n    return retString;\n}\n</code></pre>\n\n<p>The method uses a <code>Dictionary</code> of keys and values to force specific casing to match what NCalc expects from the user. While functional, there is room to optimize performance.</p>\n\n<p>In the previous code, the method call to <code>Replace</code> creates a new string in memory for each replacement. So, in a worst-case scenario, we could have 15 new strings allocated as we clean the user’s equation, one for each key and the original value. Yikes!</p>\n\n<p>What should we do?!</p>\n\n<h2 id=\"using-stringbuilder-to-replace\">Using StringBuilder To Replace</h2>\n\n<p>We commonly think of <code>StringBuilder</code> as a class to build up new string values, but it didn’t occur to me that <code>StringBuilder</code> could also be used to alter an existing string efficiently. So, let’s update the code sample.</p>\n\n<pre><code class=\"language-csharp\">private string NormalizeInputString()\n{\n    Dictionary&lt;string, string&gt; _opMapper = new()\n    {\n        {\"×\", \"*\"},\n        {\"÷\", \"/\"},\n        {\"SIN\", \"Sin\"},\n        {\"COS\", \"Cos\"},\n        {\"TAN\", \"Tan\"},\n        {\"ASIN\", \"Asin\"},\n        {\"ACOS\", \"Acos\"},\n        {\"ATAN\", \"Atan\"},\n        {\"LOG\", \"Log\"},\n        {\"EXP\", \"Exp\"},\n        {\"LOG10\", \"Log10\"},\n        {\"POW\", \"Pow\"},\n        {\"SQRT\", \"Sqrt\"},\n        {\"ABS\", \"Abs\"},\n    };\n    \n    var retString = new StringBuilder(InputText);\n    foreach (var key in _opMapper.Keys)\n    {\n        retString.Replace(key, _opMapper[key]);\n    }\n\n    return retString.ToString();\n}\n</code></pre>\n\n<p>Now we only generate two strings: the original input and the final result. You might be asking, “how much of a difference can this make, really?”. Well, every optimization is contextual and will depend on your use case. But, we can reduce some unnecessary memory pressure for a relatively simple change.</p>\n\n<p>Let’s use Benchmarkdotnet to compare the previous implementation and the <code>StringBuilder</code> approach.</p>\n\n<pre><code class=\"language-csharp\">using System.Text;\nusing BenchmarkDotNet.Attributes;\nusing BenchmarkDotNet.Running;\n\nBenchmarkRunner.Run&lt;StringReplace&gt;();\n\n[MemoryDiagnoser]\n[ShortRunJob]\npublic class StringReplace\n{\n    readonly Dictionary&lt;string, string&gt; map = new()\n    {\n        { \"×\", \"*\" },\n        { \"÷\", \"/\" },\n        { \"SIN\", \"Sin\" },\n        { \"COS\", \"Cos\" },\n        { \"TAN\", \"Tan\" },\n        { \"ASIN\", \"Asin\" },\n        { \"ACOS\", \"Acos\" },\n        { \"ATAN\", \"Atan\" },\n        { \"LOG\", \"Log\" },\n        { \"EXP\", \"Exp\" },\n        { \"LOG10\", \"Log10\" },\n        { \"POW\", \"Pow\" },\n        { \"SQRT\", \"Sqrt\" },\n        { \"ABS\", \"Abs\" },\n    };\n\n    private const string target = \"1 x 1 ÷ 1 * SIN(COS(TAN(LOG(ASIN(ATAN(EXP(POW(SQRT(ABS(1))))))))))  |\" +\n                                  \"1 x 1 ÷ 1 * SIN(COS(TAN(LOG(ASIN(ATAN(EXP(POW(SQRT(ABS(1))))))))))  |\" +\n                                  \"1 x 1 ÷ 1 * SIN(COS(TAN(LOG(ASIN(ATAN(EXP(POW(SQRT(ABS(1))))))))))  |\" +\n                                  \"1 x 1 ÷ 1 * SIN(COS(TAN(LOG(ASIN(ATAN(EXP(POW(SQRT(ABS(1))))))))))  |\" +\n                                  \"1 x 1 ÷ 1 * SIN(COS(TAN(LOG(ASIN(ATAN(EXP(POW(SQRT(ABS(1))))))))))  |\" +\n                                  \"1 x 1 ÷ 1 * SIN(COS(TAN(LOG(ASIN(ATAN(EXP(POW(SQRT(ABS(1))))))))))  |\" +\n                                  \"1 x 1 ÷ 1 * SIN(COS(TAN(LOG(ASIN(ATAN(EXP(POW(SQRT(ABS(1))))))))))  |\" +\n                                  \"1 x 1 ÷ 1 * SIN(COS(TAN(LOG(ASIN(ATAN(EXP(POW(SQRT(ABS(1))))))))))  |\" +\n                                  \"1 x 1 ÷ 1 * SIN(COS(TAN(LOG(ASIN(ATAN(EXP(POW(SQRT(ABS(1))))))))))  |\";\n\n    [Benchmark]\n    public string String()\n    {\n        var result = target;\n        foreach (var key in map.Keys)\n        {\n            result = result.Replace(key, map[key]);\n        }\n\n        return result;\n    }\n\n    [Benchmark]\n    public string StringBuilder()\n    {\n        var result = new StringBuilder(target);\n        foreach (var key in map.Keys)\n        {\n            result.Replace(key, map[key]);\n        }\n\n        return result.ToString();\n    }\n}\n</code></pre>\n\n<p>Let’s see the results of the Benchmarkdotnet run.</p>\n\n<pre><code>|        Method |     Mean |    Error |    StdDev |   Gen0 | Allocated |\n|-------------- |---------:|---------:|----------:|-------:|----------:|\n|        String | 3.967 us | 1.673 us | 0.0917 us | 1.8082 |  11.11 KB |\n| StringBuilder | 3.480 us | 2.472 us | 0.1355 us | 0.4082 |   2.52 KB |\n</code></pre>\n\n<p>Wow! The <code>StringBuilder</code> implementation allocates about 20% of what the <code>String</code> implementation does. That’s a pretty significant performance optimization for code that looks almost identical. These increases can become more effective as the target string grows or the dictionary of keys/values expands.</p>\n\n<h2 id=\"conclusion\">Conclusion</h2>\n\n<p>While you may think of <code>StringBuilder</code> as a means to build strings over several iterations, you can also think of <code>StringBuilder</code> as an alteration tool. Utilizing the <code>Replace</code> method could reduce memory overhead while keeping the code almost the same. Given the benchmark comparison, you can also see reduced Gen0 sizes, which should minimize garbage collection pauses over time. It’s a win-win.</p>\n\n<p>I hope you enjoyed this blog post, and please feel free to share it with colleagues and friends. As always, thanks for reading.</p>\n",
      "Content": null,
      "Language": null,
      "Link": "https://khalidabuhakmeh.com/using-stringbuilder-to-replace-values"
    },
    {
      "FeedId": "https://khalidabuhakmeh.com/feed.xml",
      "ItemId": "https://khalidabuhakmeh.com/the-privilege-of-dotnet-tooling-choices",
      "Title": "The Privilege of .NET Tooling Choices",
      "PublishDate": "2023-06-13T00:00:00+00:00",
      "Summary": "<p>Regarding the .NET ecosystem, we’ve become spoiled with great tooling choices from Visual Studio, JetBrains Rider, VS Code, and NeoVIM, not to mention the extension ecosystem like ReSharper, CodeRush, and OzCode. As a result, the ability to define your development workflow and your team’s workflow has never been more varied. What a time to be a .NET developer!</p>\n\n<p>With choice comes the burden of improving your productivity while not hampering the preferences of your team members. After all, all of us have years of different experiences and skill sets that no single tool can satisfy.\nA development tool that tries to please everyone is doomed to please no one.</p>\n\n<p>So I wanted to use this time to describe my philosophy when picking development tools and why I think it’s vital for personal and team happiness and completing development projects.</p>\n\n<p>Let’s get started.</p>\n\n<!--more-->\n\n<h2 id=\"picking-personal-tools\">Picking Personal Tools</h2>\n\n<p>When it comes to defining my development environment, I believe it is a deeply personal choice. I prefer the operating system I like (macOS) and IDE I work with (JetBrains Rider). Over 15 years, I’ve found the combination of tooling that works for me, but I’m also willing to consider other options as the technology landscape changes. I also understand my personal choices will not be another individual’s. So instead of arguing about personal preferences, finding ways to be a better development neighbor is more important.</p>\n\n<p>In the pursuit of being a good development partner, I have a  <strong>“must follow”</strong> rule:</p>\n\n<blockquote>\n  <p>My tooling choices should not burden other developers with my preferences.</p>\n</blockquote>\n\n<p>Therefore, if I choose a tool, it must abide by at least one of two criteria:</p>\n\n<ul>\n  <li>The tool is transparent to other team members. It doesn’t pollute the shared spaces with my preference and put my team members at the disadvantage of dealing with my “junk”.</li>\n  <li>If my tool produces artifacts, other team members must be able to utilize those artifacts regardless of all of our preferences. (we’ll talk more about this later).</li>\n</ul>\n\n<p>What does “polluting” constitute? If a codebase is a communal shared space by team members, my tools shouldn’t leave artifacts that team members didn’t agree to use. These artifacts include tool-specific configuration files, assets, or dependencies. These artifacts are one more burden a team must manage, which would constitute selfish behavior on my part.</p>\n\n<p>In my attempt to stay on the good side of karma, a tool needs to provide at least two options:</p>\n\n<ul>\n  <li>Assets are optional; tooling can work with or without the extra configuration.</li>\n  <li>Assets can exist locally in my development environment without me checking the files in source control.</li>\n</ul>\n\n<p>These characteristics allow me to make my choice and still be a good team member. Everyone wins.</p>\n\n<h2 id=\"picking-team-tools\">Picking Team Tools</h2>\n\n<p>Given the promise of .NET being a cross-platform technology stack, the shared tools a team picks should reflect that value. So, for example, tools might include test runners, HTTP clients, static analysis tooling, and build pipeline enhancements. This brings me to my subsequent <strong>“must follow”</strong> rule:</p>\n\n<blockquote>\n  <p>Any tool a team adopts must account for running locally on any developer’s preferred environment and provide value to all team members.</p>\n</blockquote>\n\n<p>So what do I look for in team tooling choices?</p>\n\n<ul>\n  <li>A tool must provide value to a majority of team members. Therefore, a consensus on what constitutes value is essential to adopting tools. Adding dependencies is a burden, after all.</li>\n  <li>A team tool must be cross-platform. A Windows or Unix-only tool doesn’t benefit everyone and should be crossed off the list immediately. It’s time we expect better from our team tools.</li>\n  <li>Any tool that processes files should provide a CLI version of itself. A CLI tool allows team members to get value from shared assets even if they might not have a comparable experience an IDE plugin might provide. A CLI tool also means you can get similar results in CI/CD pipelines and locally. At the very least, the tool should be accessible to everyone via a web interface if it is a subscription service-style tool.</li>\n</ul>\n\n<p>In a team setting, a team tool should not penalize my macOS choice, favoring a team member’s Windows experience, and vice versa. Likewise, a team member’s use of a Visual Studio extension should not hamper my JetBrains Rider experience. And ultimately, a tool that I can run in a CI/CD environment must also run locally. Adopting a tool that favors one group over another creates unnecessary friction and fragmentation. That friction leads to resentment and conflict, lowering team productivity.</p>\n\n<p>Team-focused tools should also be accessible to all team members in the same capacity, as everyone should be able to manage and maintain them. After all, the team agreed on the value of adopting the tool, right? With the complexity of the modern software development lifecycle, teams should limit their risk exposure. A team tool that only works in specific circumstances and is only accessible to certain team members is a liability.</p>\n\n<h2 id=\"conclusion\">Conclusion</h2>\n\n<p>As .NET developers, we have a glut of choices in front of us, and while we each have our particular favorites, we also need to understand the team-based nature of software development. When we take those choices away from team members, we create an environment devoid of diversity and creativity, which I try to avoid as much as possible. The .NET ecosystem and the folks working in it should champion team productivity and create a base experience everyone can rely on, regardless of anyone’s personal tooling choices. I hope you leave being mindful of how individual choices can affect a team’s productivity and, ultimately, the vibrancy of the .NET ecosystem.</p>\n\n",
      "Content": null,
      "Language": null,
      "Link": "https://khalidabuhakmeh.com/the-privilege-of-dotnet-tooling-choices"
    },
    {
      "FeedId": "https://khalidabuhakmeh.com/feed.xml",
      "ItemId": "https://khalidabuhakmeh.com/entity-framework-core-7-filtering-on-json-arrays",
      "Title": "Entity Framework Core 7: Filtering on JSON Arrays",
      "PublishDate": "2023-06-06T00:00:00+00:00",
      "Summary": "<p>Entity Framework Core 7 introduced developers to JSON column support. <a href=\"https://blog.jetbrains.com/dotnet/2023/02/14/getting-started-entity-framework-core-7-json-support\">I even wrote about it on the JetBrains .NET blog</a>, and it has been generally well-received. However, recently a user tried my sample project, only to find that they could not filter on a collection of JSON values. Given the current Microsoft SQL Server provider, the following LINQ statement does not work.</p>\n\n<pre><code class=\"language-csharp\">var results = await db.Posts\n    .Where(x =&gt; x.Tags.Any(t =&gt; t.Value == \"CSharp\"))\n    .ToListAsync();\n</code></pre>\n\n<p>Entity Framework Core will throw the following exception.</p>\n\n<pre><code class=\"language-text\">The LINQ expression 'DbSet&lt;Post&gt;()\n    .Where(p =&gt; EF.Property&lt;List&lt;Tag&gt;&gt;(p, \"Tags\")\n        .AsQueryable()\n        .Any(o =&gt; o.Value == \"CSharp\"))' \ncould not be translated.\nEither rewrite the query in a form that can be translated, \nor switch to client evaluation explicitly by inserting a \ncall to 'AsEnumerable', 'AsAsyncEnumerable', 'ToList', \nor 'ToListAsync'. See https://go.microsoft.com/fwlink/?linkid=2101038 \nfor more information.\n</code></pre>\n\n<p>If you’re experiencing this issue and need to filter on a JSON array, I have several SQL queries to help you work around this issue. Let’s get started.</p>\n\n<!--more-->\n\n<h2 id=\"sql-to-the-rescue\">SQL to the Rescue</h2>\n\n<p>Luckily, in later versions of Entity Framework, we have access to the <code>FromSql</code> methods that can allow us to seed the <code>From</code> clause with a sub-query. The advantage of this approach is we can still use many of the features of LINQ from a starting result set. But before we get to the C# code, let’s look at some queries against our data model.</p>\n\n<pre><code class=\"language-csharp\">var blogPost = new Post\n{\n    Title = \"Writing about .NET\",\n    Author =\n    {\n        Name = \"Khalid Abuhakmeh\",\n        ImageUrl = \"/khalidabuhakmeh.jpg\",\n        SocialMediaUrl = \"@khalidabuhakmeh@mastodon.social\"\n    },\n    Tags =\n    {\n        new Tag { Value = \"dotnet\" },\n        new Tag { Value = \"drop\" }, \n        new Tag { Value = \"dot\" }\n    }\n};\n</code></pre>\n\n<p><code>Tags</code> are stored as a JSON Column in the following form.</p>\n\n<pre><code class=\"language-json\">[{\"Value\":\"dotnet\"},{\"Value\":\"drop\"},{\"Value\":\"dot\"}]\n</code></pre>\n\n<p>So how do you filter a row based on whether a tag exists in your collection of tag values? Well, there are a few ways. I’ve included them below with the <strong>Total Cost</strong> according to running them on a dataset of 500 rows. Of course, a lower value is better, but check it against your dataset and consult your local DBA.</p>\n\n<pre><code class=\"language-sql\">-- Total Cost: 0.00527086\nSELECT *\nFROM Posts p\nCROSS APPLY OPENJSON(p.Tags)\nWITH (Tag VARCHAR(300) '$.Value') as Tag\nWhere Tag = 'dotnet'\n\n-- Total Cost: 0.0651177\nSELECT *\nFrom Posts posts\nWHERE (SELECT Tag as tag\n       FROM OPENJSON(Tags) WITH (Tag VARCHAR(300) '$.Value') AS Tag\n       WHERE Tag = 'dotnet') = 'dotnet'\n\n-- Total Cost: 0.0304298\nSELECT *\nFrom Posts posts\nWHERE EXISTS \n  (SELECT Tag as tag\n   FROM OPENJSON(Tags) WITH (Tag VARCHAR(300) '$.Value') AS Tag\n   WHERE Tag = 'dotnet')\n\n-- Total Cost: 0.0297937\nSELECT *\nFrom Posts posts\nWHERE EXISTS \n (SELECT Value\n  FROM OPENJSON(Tags) WITH (Value VARCHAR(300) '$.Value') AS Value\n  WHERE Value in ('dotnet', 'drop'))\n</code></pre>\n\n<p>I’ve included variants that support multiple tag filtering or several values. Use the one for your use case.</p>\n\n<p>Now that we have a SQL query, how do we use it in Entity Framework Core?</p>\n\n<p>Well, I had mentioned the use of <code>FromSql</code>, and we can do just that.</p>\n\n<pre><code class=\"language-csharp\">var values = new object[] { \"drop\", \"dot\" };\nvar placeholders = string.Join(\",\", values.Select((_, i) =&gt; $\"{{{i}}}\").ToArray());\n\nvar list = await db.Posts.FromSqlRaw(\n        $\"SELECT * From Posts posts WHERE EXISTS (SELECT Value FROM OPENJSON(Tags) WITH (Value VARCHAR(300) '$.Value') AS Value WHERE Value in ({placeholders}))\", values)\n    .ToListAsync();\n</code></pre>\n\n<p>I decided to use the <code>Exists</code> versions of my SQL queries, as they are the most straightforward to reason about, and it supports multiple tags. I also needed to parameterize the user input, which should keep the query safe against SQL injection attacks.</p>\n\n<p>You can add additional filters to the base query, like the following.</p>\n\n<pre><code class=\"language-csharp\">var list = await db.Posts.FromSqlRaw(\"&lt;SQL&gt;\")\n    .Where(p =&gt; p.Id == 2)\n    .ToListAsync();\n</code></pre>\n\n<p>The generated SQL query will appear in the console’s output.</p>\n\n<pre><code class=\"language-text\">info: 5/8/2023 14:21:20.802 RelationalEventId.CommandExecuted[20101] (Microsoft.EntityFrameworkCore.Database.Command) \n      Executed DbCommand (91ms) [Parameters=[p0='drop' (Size = 4000), p1='dot' (Size = 4000)], CommandType='Text', CommandTimeout='30']\n      SELECT [c].[Id], [c].[CreateAt], [c].[Permalink], [c].[Title], [c].[UpdatedAt], JSON_QUERY([c].[Author],'$'), JSON_QUERY([c].[Tags],'$')\n      FROM (\n          SELECT * From Posts posts WHERE EXISTS (SELECT Value FROM OPENJSON(Tags) WITH (Value VARCHAR(300) '$.Value') AS Value WHERE Value in (@p0,@p1))\n      ) AS [c]\n      WHERE [c].[Id] = 1\n</code></pre>\n\n<p>Awesome! Well, I have one more option for you, but I do think it’s the inferior option. That said, for the sake of completeness, here it is.</p>\n\n<h2 id=\"using-likes-to-filter-rows\">Using Likes To Filter Rows</h2>\n\n<p>The solution presented above will use the JSON features of Microsoft SQL Server to accurately filter rows based on the values in a JSON object. If you’re dealing with simpler data, as I am in this post, a <code>LIKE</code> query might be good enough.</p>\n\n<pre><code class=\"language-csharp\">var value = \"%\\\"dotnet\\\"%\";\nvar one = await db.Posts\n     .FromSqlRaw(\"SELECT * FROM Posts WHERE Tags LIKE {0}\", value)\n     .FirstOrDefaultAsync();\n</code></pre>\n\n<p>This approach certainly works, but has the disadvantage of using double-sided wildcards, which is known for being less-than optimal when it comes to performance. You also have to deal with creating the filter value with the use of <code>%</code> and <code>\"</code> characters.</p>\n\n<p>It’s an option if you need it, but I really do recommend the previous approach.</p>\n\n<h2 id=\"conclusion\">Conclusion</h2>\n\n<p>While Entity Framework Core introduced JSON support, <a href=\"https://blog.jetbrains.com/dotnet/2023/02/14/getting-started-entity-framework-core-7-json-support\">as I wrote about in my JetBrains blog post</a>, it sadly is missing collection filtering. However, using the <code>FromSql</code> variant methods, you can get it working while retaining the strengths of LINQ and query filtering. In addition, you can take the extra step to add much of the functionality mentioned here into an extension method. The one drawback to using <code>FromSql</code> is that it becomes the foundation for all future filtering, which may make it challenging to optimize your LINQ queries without adding more to the original SQL statement. In conclusion, I’m pretty happy with this approach, but looking forward to the day that Entity Framework Core supports this functionality out of the box.</p>\n\n<p>I hope you enjoyed this post, and thank you for reading and sharing my content with others.</p>\n\n",
      "Content": null,
      "Language": null,
      "Link": "https://khalidabuhakmeh.com/entity-framework-core-7-filtering-on-json-arrays"
    },
    {
      "FeedId": "https://khalidabuhakmeh.com/feed.xml",
      "ItemId": "https://khalidabuhakmeh.com/javascript-import-maps-for-aspnet-core-developers",
      "Title": "JavaScript Import Maps For ASP.NET Core Developers",
      "PublishDate": "2023-05-30T00:00:00+00:00",
      "Summary": "<p>If you’re building web applications, you’ll likely have to write some JavaScript, so why not write the best JavaScript you can? The JavaScript ecosystem has evolved with an emphasis on performance and user experience, and if you’ve avoided writing JavaScript for a while now, you’ll be pleasantly surprised.</p>\n\n<p><a href=\"https://web.dev/import-maps-in-all-modern-browsers/\">Import Maps is the latest advancement</a>, a technique to make managing and consuming EcmaScript modules (ESM) much more straightforward for client-side developers. Ultimately, it brings the same style of development Node developers have enjoyed on the server side of the ecosystem to the browser.</p>\n\n<p>In this post, we’ll compare traditional script referencing to ESM, how to write a simple ESM file, how to use it in your Razor-powered ASP.NET Core applications, and some good-to-know facts.</p>\n\n<!--more-->\n\n<p>What is ESM and Why Should I Care?</p>\n\n<p>JavaScript implementations have transitioned from unstructured code living in a global context to codebases depending on easy-to-follow structures. Let’s look at a simple module and how you can consume it.</p>\n\n<pre><code class=\"language-javascript\">// file name: simple.js\nexport default function () {\n    console.log('hello world!');\n}\n</code></pre>\n\n<p>Now, let’s use our module that exports a function.</p>\n\n<pre><code class=\"language-javascript\">import Simple from \"./simple.js\";\nSimple();\n</code></pre>\n\n<p>You can see that authoring and consuming a module has intention behind it. You can tell where a module is coming from and what parts of the module you use. There’s no surprise global variables or opportunities for unresolvable conflicts. So why is this better?</p>\n\n<p>If you’ve spent any time doing web development, you’re likely familiar with JQuery and how it’s referenced and used in a web application. The breakdown is not to pick on JQuery but to demonstrate some issues with traditionally-written libraries.</p>\n\n<p>The foremost trait of a traditional script is that you reference it on a web page like so.</p>\n\n<pre><code class=\"language-html\">&lt;script src=\"/libs/jquery/3.6.4/jquery.min.js\"&gt;&lt;/script&gt;\n</code></pre>\n\n<p>While perfectly fine, there are a few drawbacks to referencing scripts this way.</p>\n\n<ol>\n  <li>Scripts are blocking and will stop the page from processing until all content is loaded.</li>\n  <li>Script variables and functions are global and may conflict with other scripts.</li>\n  <li>Selectively loading dependencies requires server-side templating to toggle elements or client-side code that dynamically injects script tags.</li>\n</ol>\n\n<p>In our ESM example, you can reference scripts using the <code>type</code> of <code>module</code> in your Razor pages.</p>\n\n<pre><code class=\"language-html\">&lt;script src=\"~/js/site.js\" type=\"module\" asp-append-version=\"true\"&gt;&lt;/script&gt;\n</code></pre>\n\n<p>The presence of <code>type=module</code> tells the browser to load the file with the knowledge that it is using ESM and to respect <code>import</code> statements. Only dependencies that are part of the import graph will be loaded, and additionally, all modules are deferred by default, meaning they won’t block the page rendering.</p>\n\n<p>So how do import maps factor into all of this?</p>\n\n<h2 id=\"import-maps-and-why-theyre-important\">Import Maps and Why They’re Important</h2>\n\n<p>Import maps allow you to define aliases for internal and external dependencies used in your JavaScript. For example, look at the import map from my sample ASP.NET Core Razor Pages project.</p>\n\n<pre><code class=\"language-html\">&lt;script type=\"importmap\"&gt;\n{\n    \"imports\" : {\n        \"vue\": \"https://unpkg.com/vue@3/dist/vue.esm-browser.js\",\n        \"hello-world\": \"@Url.Content(\"~/js/hello-world.js\")\",\n        \"simple\": \"@Url.Content(\"~/js/simple.js\")\"\n    }\n}\n&lt;/script&gt;\n</code></pre>\n\n<p>Once you’ve defined an import map, you can use the aliases anywhere in your client-side environment. For example, here is the implementation for <code>hello-world.js</code>.</p>\n\n<pre><code class=\"language-javascript\">import { createApp } from \"vue\";\n\nexport default function helloWorld(target, message) {\n    createApp({\n        data() {\n            return {\n                message: message\n            }\n        }\n    }).mount(target)\n}\n</code></pre>\n\n<p>You can see that I’m importing the <code>vue</code> dependency, which points to an ESM version of the Vue library. <strong>It’s important that any library imported also be written in the ESM style.</strong> All without immediately knowing what <code>vue</code> is used during my usage. The flexibility allows for more centralized dependencies updates without affecting large swaths of my codebase.</p>\n\n<p>We can also import a module within our HTML pages using a’ script’ tag element.</p>\n\n<pre><code class=\"language-html\">&lt;div id=\"app\"&gt;&lt;/div&gt;\n\n&lt;script type=\"module\"&gt;\nimport helloWorld from 'hello-world';\nhelloWorld('#app', 'Hello From ASP.NET Core');\n&lt;/script&gt;\n</code></pre>\n\n<p>Awesome right?!</p>\n\n<p>Now our ASP.NET Core pages can selectively use dependencies from our JavaScript modules, with the added benefit of only loading the libraries we need. What a fantastic feature.</p>\n\n<p>You might be thinking, how can ASP.NET Core do more in this situation? How about importing JSON files into your clientside apps? That would be cool, right? Well, you can!</p>\n\n<p>Let’s first define a JSON endpoint using Minimal APIs.</p>\n\n<pre><code class=\"language-csharp\">app.MapGet(\"/config\", \n    () =&gt; new { name = \"Khalid\" });\n</code></pre>\n\n<p>Next, we’ll modify our import map to point to this new endpoint.</p>\n\n<pre><code class=\"language-html\">&lt;script type=\"importmap\"&gt;\n{\n    \"imports\" : {\n        \"vue\": \"https://unpkg.com/vue@3/dist/vue.esm-browser.js\",\n        \"hello-world\": \"@Url.Content(\"~/js/hello-world.js\")\",\n        \"simple\": \"@Url.Content(\"~/js/simple.js\")\",\n        \"config\": \"@Url.Content(\"~/config\")\"\n    }\n}\n&lt;/script&gt;\n</code></pre>\n\n<p>Finally, we can import and use our JSON response in our client-side script. You must assert that the module import is of type <code>json</code> for it to work correctly.</p>\n\n<pre><code class=\"language-html\">&lt;script type=\"module\"&gt;\nimport config from 'config' assert { type: 'json' };\nimport helloWorld from 'hello-world';\nhelloWorld('#app', `Hello ${config.name} From ASP.NET Core`);\n&lt;/script&gt;\n</code></pre>\n\n<p>Note that there might still be compatibility issues with <code>assert</code> statements across browser vendors. Please consult the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules\">Mozilla documentation to see if your browser supports particular features with modules</a>.</p>\n\n<h2 id=\"general-thoughts-on-import-maps\">General Thoughts on Import Maps</h2>\n\n<p>I have some thoughts I’d love to share with you about some advantages of this approach.</p>\n\n<ol>\n  <li>Modules and import statements are very natural for C# developers, so the move to this style of development should be easier for most folks.</li>\n  <li>The deferment of these scripts by default means you get an added performance boost to your user experience. Who doesn’t want that?!</li>\n  <li>The combination of JavaScript code using ASP.NET Core server-rendered content is powerful.</li>\n  <li>Import maps make it easy to manage dependencies, regardless if you’re using a build tool or want to use prebuilt dependencies. It’s great!</li>\n  <li>All your dependencies must be ESM compatible, so trying to import commonJS files will not work.</li>\n  <li>Don’t forget to add <code>type=module</code> to your script tags. It’s easy to forget and can leave you scratching your head.</li>\n</ol>\n\n<h2 id=\"conclusion\">Conclusion</h2>\n\n<p><a href=\"https://web.dev/import-maps-in-all-modern-browsers/\">All major browsers now support import maps</a>, and ESM is the future of writing JavaScript. It’s also a great way to update your existing clientside development workflow without taking on large build toolchains. You’ll need to seek out ESM-compatible libraries, but many of the most popular ones have already started the shift. In combination with ASP.NET Core, you can use the dynamic server-side generation tools to interact and enhance your client-side experience. It’s a win-win for everyone.</p>\n\n<p>I hope you enjoyed this post, and as always, thanks for reading and sharing my content.</p>\n",
      "Content": null,
      "Language": null,
      "Link": "https://khalidabuhakmeh.com/javascript-import-maps-for-aspnet-core-developers"
    },
    {
      "FeedId": "https://khalidabuhakmeh.com/feed.xml",
      "ItemId": "https://khalidabuhakmeh.com/xunit-tests-jetbrains-rider-and-counting-until-failure",
      "Title": "XUnit Tests, JetBrains Rider, and Counting Until Failure",
      "PublishDate": "2023-05-23T00:00:00+00:00",
      "Summary": "<p><a href=\"https://jetbrains.com/rider\">JetBrains Rider</a> is a fantastic tool, and full disclosure, as of writing this post, I am a developer advocate for JetBrains. <a href=\"https://xunit.net\">XUnit</a> is also an excellent unit testing framework, and their combined powers create an out-of-this-world testing experience.</p>\n\n<p>One feature JetBrains Rider users have fallen in love with is <strong>Run Selected Tests Until Failure</strong>, which is what it sounds like. JetBrains Rider will continue executing your unit test until the test fails. The test runner feature can help diagnose finicky unit tests that work intermittently. Nothing is worse than an inconsistent bug, am I right?!</p>\n\n<p>When performing an investigation, you want as much information as possible. For example, a common question might be, “How many times did my test run before failing?”.</p>\n\n<p>In this post, we’ll build an XUnit fixture you can use in your tests to determine the number of iterations before a failure. Let’s get started.</p>\n\n<!--more-->\n\n<h2 id=\"xunit-unit-tests-and-fixtures\">XUnit Unit Tests and Fixtures</h2>\n\n<p>XUnit is a unit testing library that provides a framework for building a test suite. It’s a popular tool for many developers and is supported by all .NET IDE vendors. A technique to share functionality across unit tests is building a fixture. <a href=\"https://xunit.net/docs/shared-context\">A fixture is a shared context between tests</a>. This feature can help reduce the cost of expensive dependencies such as databases, Docker containers, and more.</p>\n\n<p>I prefer fixtures, but admittedly this approach could forgo fixtures in favor of a static class and static methods. If you like that approach, please modify the code accordingly.</p>\n\n<p>I’ll be using SQLite to store the count for each test execution. You’ll need to install the NuGet package of <code>Microsoft.Data.Sqlite</code>. Let’s take a look at the fixture.</p>\n\n<pre><code class=\"language-csharp\">using System.Runtime.CompilerServices;\nusing Microsoft.Data.Sqlite;\n\nnamespace FailCounter;\n\npublic class TestRunsCounter\n{\n    private const string ConnectionString = \"Data Source=tests.db\";\n\n    public TestRunsCounter()\n    {\n        using var connection = new SqliteConnection(ConnectionString);\n        connection.Open();\n        using var command = connection.CreateCommand();\n        command.CommandText =\n            \"\"\"\n            CREATE TABLE IF NOT EXISTS Counts\n            (\n                Name  TEXT not null\n                    constraint Name primary key,\n                Count integer\n            );\n            \"\"\";\n        command.ExecuteNonQuery();\n    }\n\n    public long Increment([CallerMemberName] string? testName = null)\n    {\n        if (testName is null)\n            return 0;\n\n        using var connection = new SqliteConnection(ConnectionString);\n        connection.Open();\n        var command = connection.CreateCommand();\n        command.CommandText =\n            \"\"\"\n            INSERT Into Counts (Name, Count) Values($name, 1)      \n            On CONFLICT(Name) Do Update Set\n                Count = Count + 1\n                Where Name = $name;\n            Select Count from Counts Where Name = $name;\n            \"\"\";\n        command.Parameters.AddWithValue(\"$name\", testName);\n        var count = (long)command.ExecuteScalar()!;\n\n        return count;\n    }\n\n    public void Reset([CallerMemberName] string? testName = null)\n    {\n        if (testName is null)\n            return;\n\n        using var connection = new SqliteConnection(ConnectionString);\n        connection.Open();\n        var command = connection.CreateCommand();\n        command.CommandText =\n            \"\"\"\n            INSERT Into Counts (Name, Count) Values($name, 0)      \n            On CONFLICT(Name) Do Update Set\n                Count = 0\n                Where Name = $name;\n            \"\"\";\n        command.Parameters.AddWithValue(\"$name\", testName);\n        command.ExecuteNonQuery();\n    }\n}\n</code></pre>\n\n<p>The calls to <code>Increment</code> will either increment an existing row’s count or insert a new row with a count of 1. I also included a <code>Reset</code> method for resetting counters during investigations. The <code>Reset</code> method must be called manually by you.</p>\n\n<h2 id=\"using-the-test-runs-counter-fixture\">Using The Test Runs Counter Fixture</h2>\n\n<p>Utilizing the <code>TestRunsCounter</code> fixture is as straightforward as implementing the <code>IClassFixture</code> interface. Let’s look at an example of using the counter.</p>\n\n<pre><code class=\"language-csharp\">using Xunit.Abstractions;\n\nnamespace FailCounter;\n\npublic class UnitTest1 : IClassFixture&lt;TestRunsCounter&gt;\n{\n    private readonly TestRunsCounter _fixture;\n    private readonly ITestOutputHelper _output;\n\n    public UnitTest1(TestRunsCounter fixture, ITestOutputHelper output)\n    {\n        _fixture = fixture;\n        _output = output;\n    }\n\n    [Fact]\n    public void Test1()\n    {\n        var count = _fixture.Increment();\n        _output.WriteLine($\"Current count is \\\"{count}\\\".\");\n\n        if (count &gt; 10)\n        {\n            throw new Exception();\n        }\n\n        Assert.True(count &lt; 10);\n    }\n\n    [Theory]\n    [InlineData(nameof(Test1))]\n    public void Reset(string testName)\n        =&gt; _fixture.Reset(testName);\n}\n</code></pre>\n\n<p>Now we can let JetBrains Rider run our test until failure. We can also use the unit test of <code>Reset</code> to reset our failing test. Great!</p>\n\n<h2 id=\"conclusion\">Conclusion</h2>\n\n<p>Intermittently failing tests are frustrating, but with JetBrains Riders “Run Selected Tests Until Failure”, you can diagnose those pesky situations. By using SQLite, we can track the iterations it took to fail. You can also use this as a starting to serialize other stateful information from a unit test and store them in SQLite.</p>\n\n<p>I hope you enjoyed this post, and let me know how you end up using this code in your code bases. As always, thank you.</p>\n",
      "Content": null,
      "Language": null,
      "Link": "https://khalidabuhakmeh.com/xunit-tests-jetbrains-rider-and-counting-until-failure"
    },
    {
      "FeedId": "https://khalidabuhakmeh.com/feed.xml",
      "ItemId": "https://khalidabuhakmeh.com/override-razor-pages-routes-from-razor-class-libraries",
      "Title": "Override Razor Pages Routes From Razor Class Libraries",
      "PublishDate": "2023-05-16T00:00:00+00:00",
      "Summary": "<p>Sharing is caring, and what’s more affectionate than sharing Razor Pages functionality with the .NET community? Well, a lot of other things, but sharing Razor Pages can help you deliver functionality to the other developers that would otherwise be difficult to integrate into existing applications.</p>\n\n<p>Some examples of practical Razor Page implementations might include a route debugger, an administrative panel, a terminal emulator, and a documentation renderer. All of these could be something you take on and ship to users to help accelerate their development and help them focus more on their problem domain.</p>\n\n<p>To accomplish this goal, you may use the Razor Class Library, which allows you to bundle Razor Pages, Razor Components, and other static assets. That said, there are bound to be conflicts with routes and users’ aesthetic senses of what routes should look like.</p>\n\n<p>In this post, we’ll see how you can override Razor Pages routes delivered from a Razor Class Library.</p>\n\n<!--more-->\n\n<h2 id=\"what-is-a-razor-class-library\">What Is A Razor Class Library?</h2>\n\n<p>Razor Class Libraries (RCL) allow developers to share Razor components, C# code, and static assets to projects referencing the library. The approach is helpful for situations where you have standard functionality worth sharing in other projects but not necessarily repeating. Projects that can use an RCL include ASP.NET Core MVC, Blazor Server app, and Blazor WASM. You can distribute RCLs in multiple ways, but the most effective approach is through a NuGet package.</p>\n\n<p>You can create an RCL project using the .NET template <code>razorclasslib</code> or the “New Project” facilities of your favorite .NET IDE.</p>\n\n<h2 id=\"creating-a-razor-class-library-for-razor-pages\">Creating A Razor Class Library For Razor Pages</h2>\n\n<p>To create an RCL, begin a new project within your solution using the .NET SDK-provided template. You’ll need two additional elements in your <code>.csproj</code> file to support Razor Pages.</p>\n\n<p>First, let’s add the <code>AddRazorSupportForMvc</code> element. In the <code>csrpoj</code> file, you should add the following element to your project file’s first <code>PropertyGroup</code> tag. This addition allows the RCL to support Razor Pages and the structure required to embed the files in the project.</p>\n\n<pre><code class=\"language-xml\">&lt;AddRazorSupportForMvc&gt;true&lt;/AddRazorSupportForMvc&gt;\n</code></pre>\n\n<p>The following essential element is a <code>FrameworkReference</code> in the same project file. The reference imports the ASP.NET Core primitives required by Razor pages.</p>\n\n<pre><code class=\"language-xml\">&lt;FrameworkReference Include=\"Microsoft.AspNetCore.App\" /&gt;\n</code></pre>\n\n<p>Without this additional reference, you won’t be able to use classes like <code>PageModel</code>.</p>\n\n<h2 id=\"adding-a-razor-page\">Adding A Razor Page</h2>\n\n<p>In the RCL project, we will use <strong>Areas</strong> to isolate our Razor Pages from a consuming project’s pages. The approach keeps conflicts at a minimum. We’ll add a custom “Privacy” Razor Page in an “Extra” area. The directory structure will look like.</p>\n\n<pre><code class=\"language-text\">|- wwwroot\n|- Areas\n   |- Extra\n      |- Pages    \n         |- Privacy.cshtml \n         |- Privacy.cshtml.cs \n</code></pre>\n\n<p>The contents of the Razor Page are not very important in this case. I reworked the namespaces and copied the default <code>Privacy</code> page from an existing Razor Pages project.</p>\n\n<p><strong>Here’s the important part! Don’t skip this.</strong></p>\n\n<p>When defining your Razor Pages, <em><strong>do not</strong></em> set the route in your pages. Instead, each page should only have the <code>@page</code> attribute.</p>\n\n<pre><code class=\"language-text\">// correct\n@page\n// incorrect\n@page \"/privacy\"\n</code></pre>\n\n<p>This decision will be necessary for letting users override their applications’ routes.</p>\n\n<p>In a referencing project, you should now be able to navigate to the page using <code>/Extra/Privacy</code>, but what if you don’t do that? Well, let’s look at the crux of this post, overriding the route.</p>\n\n<h2 id=\"overriding-rcl-razor-pages-routes\">Overriding RCL Razor Pages Routes</h2>\n\n<p>ASP.NET Core registers Razor Pages by their <strong>“page name”</strong>. The page name is typically a version of the physical path combined with an area, if applicable.</p>\n\n<p>In our case, the route to our RCL Razor Page has a page name of <code>/Privacy</code> and an area name of <code>Extra</code>. We can use this information by adding a new convention to our Razor Pages options. The code is straightforward; you can add the following code in your <code>Program.cs</code> or <code>Startup</code> class.</p>\n\n<pre><code class=\"language-csharp\">builder.Services.Configure&lt;RazorPagesOptions&gt;(opt =&gt;\n{\n    // Override an imported Razor Class Library\n    // Razor Pages Route\n    opt.Conventions.AddAreaPageRoute(\n        areaName: \"Extra\",\n        pageName: \"/Privacy\",\n        route: \"/Privacy\");\n});\n</code></pre>\n\n<p>Instead of navigating to <code>/Extra/Privacy</code>, you can get to the RCL Razor page using <code>/Privacy</code>. Hooray!</p>\n\n<p><strong>It’s imperative that the author of the RCL did not set the <code>@page</code> route, or else you will run into issues.</strong></p>\n\n<p>Now, you can generate routes using the link generation found in ASP.NET Core using the original page name and area name from the RCL library.</p>\n\n<pre><code class=\"language-html\">&lt;a asp-area=\"Extra\" asp-page=\"/Privacy\"&gt;Privacy&lt;/a&gt;\n</code></pre>\n\n<p>And the resulting link will be the override route set in your <code>RazorPagesOptions</code> instance. Great!</p>\n\n<p>An additional step you could take in your RCL implementation is providing an extension method on <code>IServiceCollection</code> that sets the route in a more user-friendly manner.</p>\n\n<pre><code class=\"language-csharp\">using Microsoft.AspNetCore.Mvc.RazorPages;\nusing Microsoft.Extensions.DependencyInjection;\n\nnamespace RazorPagesExtra.Extra;\n\npublic static class RoutesExtensions\n{\n    public static IServiceCollection SetPrivacyUrl(this IServiceCollection services, string route)\n    {\n        services.Configure&lt;RazorPagesOptions&gt;(opt =&gt;\n        {\n            // Override an imported Razor Class Library\n            // Razor Pages Route\n            opt.Conventions.AddAreaPageRoute(\n                areaName: \"Extra\",\n                pageName: \"/Privacy\",\n                route: route);\n        });\n        \n        return services;\n    }\n}\n</code></pre>\n\n<p>With a call in the referencing app, looking like the following:</p>\n\n<pre><code class=\"language-csharp\">builder.Services.SetPrivacyUrl(\"/Privacy\");\n</code></pre>\n\n<p>And this could be expanded to a configuration object instead. So you have unlimited options for how you’d like to approach this from here on out.</p>\n\n<p><strong>Note: If you’re noticing your RCL page has no layout, you can always add a new <code>Areas</code> folder in your referencing project with a <code>_ViewStart.cshtml</code> file.</strong></p>\n\n<pre><code class=\"language-text\">@{\n   /*\n    *  |- wwwroot\n    *  |- Areas\n    *     |- _ViewStart.cshtml \n    */\n   Layout = \"_Layout\";\n}\n</code></pre>\n\n<p>This additional file will set the Layout for all RCL libraries and let you use your project’s layout file.</p>\n\n<h2 id=\"conclusion\">Conclusion</h2>\n\n<p>Delivering value to other developers using RCLs is an excellent feature of ASP.NET Core, but sometimes users want control over their routes. Using Razor Pages conventions and excluding a default route, you can give your users the ability to override any route you provide via an RCL.</p>\n\n<p>I hope you found this post helpful, and as always, thank you for reading and sharing my work.</p>\n\n<p><a href=\"https://github.com/khalidabuhakmeh/OverrideRazorClassLibraryRoutes\">If you’d like to see a complete sample of this repository, you can see it on my GitHub repository.</a></p>\n\n",
      "Content": null,
      "Language": null,
      "Link": "https://khalidabuhakmeh.com/override-razor-pages-routes-from-razor-class-libraries"
    },
    {
      "FeedId": "https://khalidabuhakmeh.com/feed.xml",
      "ItemId": "https://khalidabuhakmeh.com/manage-vite-assets-like-a-pro",
      "Title": "Manage Vite Assets Like A Pro",
      "PublishDate": "2023-05-09T00:00:00+00:00",
      "Summary": "<p>I’ve recently been doing a lot of work with TypeScript and Vite, and one of the issues I’ve run into is my <code>vite.config.ts</code> file can become a mess almost too quickly. Unfortunately, Vite’s strength of configurability is also its most significant barrier: so many options exist!</p>\n\n<p>In this post, we’ll see how you can set up your Vite asset management to predictably place assets where you want them while taking advantage of Vite’s build pipeline to hash and chunk files. I’ll also introduce you to a Vite plugin that I think should be part of Vite out of the box.</p>\n\n<p>Let’s get started!</p>\n\n<!--more-->\n\n<h2 id=\"a-vite-project-and-goals\">A Vite Project and Goals</h2>\n\n<p>When starting a Vite-powered project, you’ll likely pick your frontend framework, possibly set up TypeScript, install external dependencies, and add assets like images, videos, and other static files. However, it’s important to note that Vite operates in what I refer to as a <code>split-mind</code> approach. As a result, what happens in development mode differs from what you expect during the build process. Your development folder can have one organizational strategy, while your distribution folder takes an entirely different direction.</p>\n\n<p>Understanding and configuring where your final build artifacts end up is an optional feature of Vite, but taking the time to think through the process can set you up for success when deploying your app.</p>\n\n<p>For example, having images in a dedicated folder means you can more easily manage your static assets in a hosting environment. Additionally, some files, like RSS feeds, might not benefit from the hash and be counterproductive. Finally, having folders allows for CDN and syncing strategies at a higher level than a single folder or file.</p>\n\n<p>So, how do you manage your Vite assets? Let me show you.</p>\n\n<h2 id=\"vite-assets-configuration\">Vite Assets Configuration</h2>\n\n<p>Vite options have a lot of methods and values you can override to create the particular behavior you seek. In short, you need to override the following Vite option values:</p>\n\n<ul>\n  <li><code>build.rollupOptions.output.entryFileNames</code></li>\n  <li><code>build.rollupOptions.output.assetFileNames</code></li>\n  <li><code>build.rollupOptions.output.chunkFileNames</code></li>\n</ul>\n\n<p>While you could certainly set these values inline, you’ll find your <code>vite.config.ts</code> file quickly becomes unruly. So what I did was create a file at <code>config/assets.ts</code>. Let’s take a look at it.</p>\n\n<pre><code class=\"language-typescript\">import {PreRenderedAsset} from \"rollup\";\n\ntype AssetOutputEntry = {\n    output: string,\n    regex: RegExp\n}\n\nexport const assetDir = \"assets\";\nexport const entryFileNames = `${assetDir}/js/[name]-[hash].js`;\nexport const chunkFileNames = `${assetDir}/js/[name]-[hash]-chunk.js`\nconst assets: AssetOutputEntry[] = [\n    {\n        output: `${assetDir}/img/[name]-[hash][extname]`,\n        regex: /\\.(png|jpe?g|gif|svg|webp|avif)$/\n    },\n    {\n        regex: /\\.css$/,\n        output: `${assetDir}/css/[name]-[hash][extname]`\n    },\n    {\n        output: `${assetDir}/js/[name]-[hash][extname]`,\n        regex: /\\.js$/\n    },\n    {\n        output: `[name][extname]`,\n        regex: /\\.xml$/\n    }\n];\n\nexport function processAssetFileNames(info: PreRenderedAsset): string {\n    if (info &amp;&amp; info.name) {\n        const name = info.name as string;\n        const result = assets.find(a =&gt; a.regex.test(name));\n        if (result) {\n            return result.output;\n        }\n    }\n    // default since we don't have an entry\n    return `${assetDir}/[name]-[hash][extname]`\n}\n</code></pre>\n\n<p>The file allows anyone to manage assets by setting a new <code>AssetOutputEntry</code> item with a corresponding <code>output</code> and <code>regex</code> value. As Vite finds new assets to process, the method <code>processAssetFileNames</code> will be passed the information, at which point you can route the file to its final destination. Let’s see how you use this new file in your <code>vite.config.ts</code> file.</p>\n\n<pre><code class=\"language-typescript\">import {defineConfig} from \"vite\";\nimport {processAssetFileNames, entryFileNames, chunkFileNames, assetDir} from \"./config/assets\";\nimport {resolve} from \"path\";\nimport viteHtmlResolveAlias from 'vite-plugin-html-resolve-alias'\n\nexport default defineConfig({\n\n    resolve: {\n        alias: {\n            '@img': resolve(__dirname, 'src/img/'),\n            '@rss': resolve(__dirname, 'src/rss.xml')\n        }\n    },\n\n    plugins: [\n      viteHtmlResolveAlias()\n    ],\n\n    build: {\n        minify: true,\n        assetsDir: assetDir,\n        // don't inline anything for demo\n        assetsInlineLimit: 0,\n        emptyOutDir: true,\n        rollupOptions: {\n            output: {\n                entryFileNames: entryFileNames,\n                assetFileNames: processAssetFileNames,\n                chunkFileNames: chunkFileNames\n            }\n        }\n    }\n});\n</code></pre>\n\n<p>Now you can manage all your assets from your <code>assets.ts</code> file using regular expressions. Neat!</p>\n\n<p>Now let’s look at how we can use the assets in our HTML files.</p>\n\n<h2 id=\"html-resolve-alias-vite-assets\">HTML Resolve Alias Vite Assets</h2>\n\n<p>You will want to use some assets in HTML and JavaScript files. For example, I’m using an image of <code>vite.svg</code> in the <code>main.ts</code> file and <code>index.html</code> in this sample.</p>\n\n<p>Note: The following package says it’s incompatible with the latest Vite version, but it’s not. So you may need to perform an <code>npm install --force</code> to get the package installed.</p>\n\n<p>Using the package <code>vite-plugin-html-resolve-alias</code>, I can create resolution aliases that the plugin will process in my HTML files. But first, let’s see what setting up aliases looks like. You may have noticed the <code>resolve</code> section in my previous configuration file.</p>\n\n<pre><code class=\"language-javascript\">resolve: {\n    alias: {\n        '@img': resolve(__dirname, 'src/img/'),\n        '@rss': resolve(__dirname, 'src/rss.xml')\n    }\n},\n</code></pre>\n\n<p>These are aliases to files found in my <code>src</code> directory that I want to run through the Vite asset pipeline and use in TypeScript and HTML. To use these files in HTML, we can use our new aliases.</p>\n\n<pre><code class=\"language-cshtml\">&lt;link rel=\"icon\" type=\"image/svg+xml\" href=\"@img/vite.svg\"/&gt;\n&lt;link rel=\"alternate\" type=\"application/rss+xml\" title=\"RSS Feed\" href=\"@rss\"/&gt;\n</code></pre>\n\n<p>When we call to build, these assets are processed similarly to any other asset imported in our TypeScript. Neat! Here’s a snippet from the final build output.</p>\n\n<pre><code>&lt;link rel=\"icon\" type=\"image/svg+xml\" href=\"/assets/img/vite-4a748afd.svg\"&gt;\n&lt;link rel=\"alternate\" type=\"application/rss+xml\" title=\"RSS Feed\" href=\"/rss.xml\"&gt;\n</code></pre>\n\n<p>Depending on the use case, I’m no longer hampered by duplicate assets in <code>public</code> or <code>src</code>. I can use the same asset in both static HTML and dynamic JavaScript. That’s a win-win!</p>\n\n<h2 id=\"conclusion\">Conclusion</h2>\n\n<p>Vite’s asset pipeline is robust, especially for folks building web applications. With some care and thought, you can decide how assets are processed and where they end up in the final distribution folder.</p>\n\n<p>If you’d like to see a working sample of this blog post, <a href=\"https://github.com/khalidabuhakmeh/vite-asset-management\">I’ve uploaded it to my GitHub repository, where you can see the build in action</a>.</p>\n\n<p>I hope you found this post helpful, and let me know what you think. As always, thanks for reading and sharing my posts. Cheers.</p>\n",
      "Content": null,
      "Language": null,
      "Link": "https://khalidabuhakmeh.com/manage-vite-assets-like-a-pro"
    },
    {
      "FeedId": "https://khalidabuhakmeh.com/feed.xml",
      "ItemId": "https://khalidabuhakmeh.com/running-vite-with-aspnet-core-web-applications",
      "Title": "Running Vite with ASP.NET Core Web Applications",
      "PublishDate": "2023-05-02T00:00:00+00:00",
      "Summary": "<p>The web ecosystem constantly ebbs and flows between simplicity and complexity. The nature of an ever-evolving development model makes it essential to keep your tooling updated, or else you find yourself stranded on a “maintenance island”. The current tool du jour is Vite, and I find the decisions made with it a refreshing net positive for the frontend development toolkit. It’s one of the more straightforward tooling options in the ecosystem with sane defaults but ultimate reconfigurability.</p>\n\n<p>While the frontend ecosystem is handily winning the UI/UX development conversation, there’s also a lot that ASP.NET Core’s Razor can offer application developers, and it’s arguably a better option to rely on both when building user-facing applications.</p>\n\n<p>In this post, we’ll see how to integrate Vite’s development server with ASP.NET Core, and you’ll be surprised it’s much simpler than you may think. Let’s get started.</p>\n\n<!--more-->\n\n<h2 id=\"whats-vite\">What’s Vite?</h2>\n\n<p>Before jumping into ASP.NET code, let’s talk about <a href=\"https://vitejs.dev\"><strong>Vite</strong></a> and how it can help your development workflow. Vite is a development environment for developers using various frameworks, such as React, Angular, Vue, and other libraries. Vite also is “smart” and can recognize common development dependencies, such as TypeScript and Sass, giving developers a low-ceremony approach to adding the dependencies to their projects. Finally, Vite is compatible with Rollup plugins to process other assets, such as images, styles, and HTML.</p>\n\n<p>For developers, Vite operates in two modes: <code>development</code> and <code>build</code>. Vite’s <code>development</code> mode utilizes hot-module reload capabilities to provide developers with immediate feedback when assets change on disk. This mode increases the feedback-loop time, increasing developer productivity. It also allows developers to see unprocessed assets to improve the ability to debug issues.</p>\n\n<p>During the <code>build</code> mode, assets are processed through plugins and ultimately readied for deployment. The build includes all referenced JavaScript, Stylesheets, and HTML files. Additionally, Vite copies all static assets to the final build directory.</p>\n\n<p>In summary, Vite is a development tool that simplifies an increasingly complex frontend ecosystem, and I believe it works. Check out the official site to learn more. https://vitejs.dev/</p>\n\n<h2 id=\"adding-vite-to-aspnet-core\">Adding Vite To ASP.NET Core</h2>\n\n<p>The first step to adding Vite to your ASP.NET Core applications is getting all your files and folders in the right place. The two most essential elements will be where you place your <code>package.json</code> and your frontend development folder. I named my development folder <code>Client</code>, but feel free to call it whatever you’d like.</p>\n\n<pre><code>Project\n|- wwwroot\n|- /Client\n  |- /public\n  |- /src\n  |- main.ts\n|- package.json\n</code></pre>\n\n<p>In your <code>packages.json</code>, you’ll add all your development dependencies, with the most critical being <code>vite</code> and <code>typescript</code> (if you want to use TypeScript). Here’s my <code>package.json</code> file for my sample project, including my <code>scripts</code>.</p>\n\n<pre><code class=\"language-json\">{\n  \"name\": \"my-webcomponents\",\n  \"private\": true,\n  \"version\": \"0.0.0\",\n  \"type\": \"module\",\n  \"scripts\": {\n    \"dev\": \"vite\",\n    \"build\": \"tsc &amp;&amp; vite build\",\n    \"preview\": \"vite preview\"\n  },\n  \"devDependencies\": {\n    \"ts-node\": \"^10.9.1\",\n    \"typescript\": \"^5.0.2\",\n    \"vite\": \"^4.2.0\",\n    \"bootstrap\": \"^5.2.3\",\n    \"jquery\": \"^3.6.4\",\n    \"jquery-validation\": \"^1.19.5\",\n    \"jquery-validation-unobtrusive\": \"^4.0.0\",\n    \"sass\": \"^1.61.0\"\n  }\n}\n</code></pre>\n\n<p>Next, we need both the <code>tsconfig.json</code> and <code>vite.config.ts</code> files at the root of our project. Here are mine, respectively.</p>\n\n<pre><code class=\"language-json\">{\n  \"compilerOptions\": {\n    \"composite\": true,\n    \"module\": \"ESNext\",\n    \"lib\": [\"ES2020\", \"DOM\", \"DOM.Iterable\"],\n    \"declaration\": true,\n    \"emitDeclarationOnly\": true,\n    \"outDir\": \"./Client/types\",\n    \"strict\": true,\n    \"noUnusedLocals\": true,\n    \"noUnusedParameters\": true,\n    \"noImplicitReturns\": true,\n    \"noFallthroughCasesInSwitch\": true,\n    \"moduleResolution\": \"Node\",\n    \"isolatedModules\": true,\n    \"allowSyntheticDefaultImports\": true,\n    \"experimentalDecorators\": true,\n    \"forceConsistentCasingInFileNames\": true,\n    \"useDefineForClassFields\": false,\n    \"skipLibCheck\": true,\n    \"types\": [\n      \"vite/client\"\n    ]\n  },\n  \"include\": [\n    \"vite.config.ts\",\n    \"Client\"\n  ]\n}\n</code></pre>\n\n<p>The <code>vite.config.ts</code> file is a bit of a doozy, but it’s written to support the same HTTPS certificate your ASP.NET Core application will use by loading settings from your <code>appSettings</code> files.</p>\n\n<pre><code class=\"language-typescript\">/**\n * Name: vite.config.ts\n * Description: Vite configuration file\n */\n\nimport { UserConfig, defineConfig } from 'vite';\nimport { spawn } from \"child_process\";\nimport fs from \"fs\";\nimport path from \"path\";\n\n// @ts-ignore\nimport appsettings from \"./appsettings.json\";\n// @ts-ignore\nimport appsettingsDev from \"./appsettings.Development.json\";\n\nimport * as process from \"process\";\n\n// Get base folder for certificates.\nconst baseFolder =\n    process.env.APPDATA !== undefined &amp;&amp; process.env.APPDATA !== ''\n        ? `${process.env.APPDATA}/ASP.NET/https`\n        : `${process.env.HOME}/.aspnet/https`;\n\n// Generate the certificate name using the NPM package name\nconst certificateName = process.env.npm_package_name;\n\n// Define certificate filepath\nconst certFilePath = path.join(baseFolder, `${certificateName}.pem`);\n// Define key filepath\nconst keyFilePath = path.join(baseFolder, `${certificateName}.key`);\n\n// Pattern for CSS files\nconst cssPattern = /\\.css$/;\n// Pattern for image files\nconst imagePattern = /\\.(png|jpe?g|gif|svg|webp|avif)$/;\n\n// Export Vite configuration\nexport default defineConfig(async () =&gt; {\n  // Ensure the certificate and key exist\n  if (!fs.existsSync(certFilePath) || !fs.existsSync(keyFilePath)) {\n    // Wait for the certificate to be generated\n    await new Promise&lt;void&gt;((resolve) =&gt; {\n      spawn('dotnet', [\n        'dev-certs',\n        'https',\n        '--export-path',\n        certFilePath,\n        '--format',\n        'Pem',\n        '--no-password',\n      ], { stdio: 'inherit', })\n          .on('exit', (code: any) =&gt; {\n            resolve();\n            if (code) {\n              process.exit(code);\n            }\n          });\n    });\n  };\n\n  // Define Vite configuration\n  const config: UserConfig = {\n    clearScreen: true,\n    appType: 'mpa',\n    root: 'Client',\n    publicDir: 'public',\n    build: {\n      manifest: appsettings.Vite.Manifest,\n      emptyOutDir: true,\n      outDir: '../wwwroot',\n      assetsDir: '',\n      rollupOptions: {\n        input: ['Client/main.ts', \"Client/scss/site.scss\" ],\n        // remove hashing, but I could add it back in\n        output: {\n          // Save entry files to the appropriate folder\n          entryFileNames: 'js/[name].js',\n          // Save chunk files to the js folder\n          chunkFileNames: 'js/[name]-chunk.js',\n          // Save asset files to the appropriate folder\n          assetFileNames: (info) =&gt; {\n            if (info.name) {\n              // If the file is a CSS file, save it to the css folder\n              if (cssPattern.test(info.name)) {\n                return 'css/[name][extname]';\n              }\n              // If the file is an image file, save it to the images folder\n              if (imagePattern.test(info.name)) {\n                return 'images/[name][extname]';\n              }\n\n              // If the file is any other type of file, save it to the assets folder \n              return 'assets/[name][extname]';\n            } else {\n              // If the file name is not specified, save it to the output directory\n              return '[name][extname]';\n            }\n          },\n        }\n      },\n    },\n    server: {\n      port: appsettingsDev.Vite.Server.Port,\n      strictPort: true,\n      https: {\n        cert: certFilePath,\n        key: keyFilePath\n      },\n      hmr: {\n        host: \"localhost\",\n        clientPort: appsettingsDev.Vite.Server.Port\n      }\n    }\n  }\n\n  return config;\n});\n</code></pre>\n\n<p>Feel free to modify the <code>vite.config.ts</code> to match your use case. For example, I removed the hash from all build artifacts, but you may want to add them back.</p>\n\n<p>You’ll also want to modify the <code>input</code> array to produce the required files on the build. In my case, I want to build both my site’s CSS and JavaScript as separate assets.</p>\n\n<p>If you get stuck configuring your Vite configuration, I suggest you read the Vite documentation to see all available options.</p>\n\n<p><strong>Important note: The build assets should end up in <code>wwwroot</code> so ASP.NET Core can bundle and publish them correctly. Also, modify your <code>csproj</code> to include any files on publish. As this is project specific, you’ll need to figure this out independently.</strong></p>\n\n<p>Next, we must modify our <code>appsettings.json</code> and <code>appsettings.Development.json</code> files. So here they are, respectively.</p>\n\n<pre><code class=\"language-json\">{\n  \"Logging\": {\n    \"LogLevel\": {\n      \"Default\": \"Information\",\n      \"Microsoft.AspNetCore\": \"Warning\"\n    }\n  },\n  \"AllowedHosts\": \"*\",\n  \"Vite\": {\n    \"Manifest\": \"assets.manifest.json\"\n  }\n}\n</code></pre>\n\n<p>And The development settings, which includes a <code>Vite</code> section. Here we will tell the Middleware what port the Vite dev server will be listening on. You can also set the script name here, but by default, the Vite middleware will look for a script named <strong><code>dev</code></strong>.</p>\n\n<pre><code class=\"language-json\">{\n  \"DetailedErrors\": true,\n  \"Logging\": {\n    \"LogLevel\": {\n      \"Default\": \"Information\",\n      \"Microsoft.AspNetCore\": \"Warning\"\n    }\n  },\n  \"Vite\": {\n    \"Server\": {\n      \"Port\": 5173,\n      \"Https\": true\n    }\n  }\n}\n</code></pre>\n\n<p>Let’s install the NuGet package of <code>Vite.AspNetCore</code> by adding it to our project’s <code>csproj</code> file.</p>\n\n<pre><code class=\"language-xml\">&lt;ItemGroup&gt;\n  &lt;PackageReference Include=\"Vite.AspNetCore\" Version=\"1.4.0\" /&gt;\n&lt;/ItemGroup&gt;\n</code></pre>\n\n<p>Once you’ve installed the package, register the services and Middleware in your ASP.NET Core application.</p>\n\n<pre><code class=\"language-csharp\">var builder = WebApplication.CreateBuilder(args);\n\nif (builder.Environment.IsDevelopment())\n{\n    builder.Services.AddViteDevMiddleware();\n}\n// Add the Vite Manifest Service.\nbuilder.Services.AddViteManifest();\n</code></pre>\n\n<p>And here’s the registration for Middleware.</p>\n\n<pre><code class=\"language-csharp\">if (app.Environment.IsDevelopment())\n{\n    app.UseViteDevMiddleware();\n}\n</code></pre>\n\n<p>Here is my complete <code>Program.cs</code> file, so you can see where to place each code block.</p>\n\n<pre><code class=\"language-csharp\">using Vite.AspNetCore.Extensions;\n\nvar builder = WebApplication.CreateBuilder(args);\n\nif (builder.Environment.IsDevelopment())\n{\n    builder.Services.AddViteDevMiddleware();\n}\n// Add the Vite Manifest Service.\nbuilder.Services.AddViteManifest();\n\n// Add services to the container.\nbuilder.Services.AddRazorPages();\n\nvar app = builder.Build();\n\n// Configure the HTTP request pipeline.\nif (!app.Environment.IsDevelopment())\n{\n    app.UseExceptionHandler(\"/Error\");\n    app.UseHsts();\n}\n\napp.UseHttpsRedirection();\napp.UseStaticFiles();\napp.UseRouting();\napp.UseAuthorization();\napp.MapRazorPages();\napp.MapControllers();\n\nif (app.Environment.IsDevelopment())\n{\n    app.UseViteDevMiddleware();\n}\n\napp.Run();\n</code></pre>\n\n<p>There’s one more step, which is to connect the client to our Vite development server. We must modify the <code>_Layout.cshtml</code> page with additional <code>environment</code> tags to do that.</p>\n\n<pre><code class=\"language-cshtml\">&lt;environment include=\"Development\"&gt;\n    &lt;!-- Vite development server script --&gt;\n    &lt;script type=\"module\" src=\"~/@@vite/client\"&gt;&lt;/script&gt;\n    &lt;script defer type=\"module\" src=\"~/main.ts\"&gt;&lt;/script&gt;\n&lt;/environment&gt;\n&lt;environment include=\"Production\"&gt;\n    &lt;link rel=\"stylesheet\" href=\"~/@Manifest[\"scss/site.scss\"]!.File\" asp-append-version=\"true\"/&gt;\n    &lt;script defer type=\"module\" src=\"~/@Manifest[\"main.ts\"]!.File\" asp-append-version=\"true\"&gt;&lt;/script&gt;\n&lt;/environment&gt;\n</code></pre>\n\n<p>This code block in your layout will depend on your <code>vite.config.ts</code> file and the resulting assets in your manifest. The <code>Vite.AspNetCore</code> package comes with a helpful manifest helper, so you don’t have to know what the artifact name will be on the build, you use the source name instead, and it finds the correct name for you.</p>\n\n<p>If you’ve followed my steps correctly, you should now have an ASP.NET Core application talking to the Vite development server. You can also change any asset and see Vite’s HMR update your page immediately. Very cool!</p>\n\n<h2 id=\"caveats\">Caveats</h2>\n\n<p>The <code>Vite.AspNetCore</code> project isn’t waiting for the Vite server to start, so initial page loads may not immediately connect to the server. I’ll be attempting to submit a pull request to fix this issue. If you don’t see your assets on the page, try reloading your page.</p>\n\n<p>A Vite caveat, you must import Sass assets in your JavaScript or TypeScript files to take advantage of hot module reloads.</p>\n\n<p>Vite configuration is a dense topic. While the defaults work in most situations, reading more about the topic, precisely things like Rollup plugins, doesn’t hurt.</p>\n\n<p>You may want to exclude your <code>wwwroot</code> from source control, as running the <code>build</code> locally will create and change those files every time. In addition, churn can add a lot of noise to your pull requests and make code reviews a headache.</p>\n\n<h2 id=\"conclusion\">Conclusion</h2>\n\n<p>Vite is a powerful development tool for folks building frontend experiences. The <code>Vite.AspNetCore</code> Middleware is an excellent option for folks who want to merge their front and back end into a single process. I want to thank the author <a href=\"https://github.com/Eptagone\">Quetzal Rivera</a> for taking the time to create the package so the community can benefit from their work.</p>\n\n<p><a href=\"https://github.com/khalidabuhakmeh/AspNetCoreLitWebComponents\">I’ve created a working solution at my GitHub repository if you want to see a functioning sample.</a></p>\n\n<p>As always, thanks for reading.</p>\n\n",
      "Content": null,
      "Language": null,
      "Link": "https://khalidabuhakmeh.com/running-vite-with-aspnet-core-web-applications"
    },
    {
      "FeedId": "https://khalidabuhakmeh.com/feed.xml",
      "ItemId": "https://khalidabuhakmeh.com/unit-test-11ty-pages-with-vitest-and-typescript",
      "Title": "Unit Test 11ty Pages With Vitest and Typescript",
      "PublishDate": "2023-04-25T00:00:00+00:00",
      "Summary": "<p><a href=\"https://www.11ty.dev\">11ty</a> (pronounced eleventy) is the most incredible static site generator available to the JavaScript community. It’s powerful, flexible, and has just enough opinions to make you immediately productive while letting you and your team build the development workflow of your dreams.</p>\n\n<p>In this post, we’ll explore unit testing your 11ty views if you’ve decided to use a combination of Typescript/JavaScript templates mixed with string literals. Of course, this approach also works with JSX, which I’ll use in the code below. Let’s get started.</p>\n\n<!--more-->\n\n<h2 id=\"javascript-template-language\">JavaScript Template Language</h2>\n\n<p>While 11ty offers a multitude of template languages, folks who are comfortable writing JavaScript and appreciate tooling help should consider using TypeScript and <a href=\"https://www.11ty.dev/docs/languages/javascript/\">the JavaScript template language</a> features of 11ty.</p>\n\n<p>While I adore templating languages like Liquid, Nunjucks, and Mustache, tooling can sometimes fall short in these contexts, providing you with little information about your data model and what fields are accessible. On the other hand, when working with JavaScript templates, tooling can effectively introspect types, function parameters, and much more. The JavaScript template approach can help you identify issues before they spiral out of control. You can take it further and create all your templates using TypeScript.</p>\n\n<p>Let’s see what a JavaScript template declaration might look like.</p>\n\n<pre><code class=\"language-js\">class Test {\n  // or `async data() {`\n  // or `get data() {`\n  data() {\n    return {\n      name: \"Ted\",\n      layout: \"teds-rad-layout\",\n      // … other front matter keys\n    };\n  }\n\n  render({name}) {\n    // will always be \"Ted\"\n    return `&lt;p&gt;${name}&lt;/p&gt;`;\n  }\n}\n\nmodule.exports = Test;\n</code></pre>\n\n<p>As you can see, a few things are happening in the previous code.</p>\n\n<ol>\n  <li>There is a <code>data</code> getter that returns the template’s “frontmatter”.</li>\n  <li>There is a <code>render</code> method that returns HTML.</li>\n  <li>All methods are in a <code>class</code> definition.</li>\n  <li>All methods support <code>sync</code> and <code>async</code> implementations.</li>\n  <li><code>data()</code> has access to <code>this</code>, an <code>EleventyPage</code> instance; the <code>render</code> method also has access to <code>this</code> along with the page’s frontmatter.</li>\n</ol>\n\n<p>Awesome! So how do you write a test for this class?</p>\n\n<h2 id=\"writing-tests-for-11ty-javascript-templates\">Writing Tests For 11ty JavaScript Templates</h2>\n\n<p>First of all, you need to pick a unit testing environment. For simplicity’s sake, I used a combination of <code>Vite</code> and <code>Vitest</code>. I will also be using TypeScript to get an enhanced tooling experience.</p>\n\n<p>Let’s look at the template we’ll be unit testing. I’ve created an <code>Example.tsx</code> file to use JSX.</p>\n\n<pre><code class=\"language-react\">import h, {JSX} from \"vhtml\";\n\nexport class Example {\n    data(): Context {\n        return {\n            // @ts-ignore, 11ty shortcode\n            greeting: this.lower(\"Hi\")\n        }\n    }\n\n    render(this: MyThis, context: Context) : JSX.Element {\n        // VIP over here\n        return this.name === 'Khalid'\n            ? (&lt;h1&gt;{context.greeting} {this.name}&lt;/h1&gt;)\n            : (&lt;h6&gt;{context.greeting} {this.name}&lt;/h6&gt;)\n    }\n}\n\nexport type MyThis = { name: string; lower: Function; }\nexport type Context = { greeting : string }\n\nmodule.exports = Example;\n</code></pre>\n\n<p>I’m also defining expected types for <code>this</code>, which you can get from the parameters list of each method, or you can use <code>this</code> implicitly.</p>\n\n<p>Knowing that we’re looking for specific data, we can now use our types for better tooling support and a better idea of how to stub out functionality and required data. So now, let’s take a look at the test.</p>\n\n<pre><code class=\"language-typescript\">// @ts-ignore\nimport h, {JSX} from \"vhtml\";\nimport {expect, it} from \"vitest\";\nimport { Example } from \"./Example\";\n\nit('can set this on render method', () =&gt; {\n    const example = new Example();\n    const myThis = {\n        name: \"Khalid\",\n        lower: (i: string) =&gt; i.toLowerCase()\n    };\n\n    const data = example.data.apply(myThis);\n    const result = example.render.apply(myThis, [ data ]);\n\n    expect(result).to.equal(\"&lt;h1&gt;hi Khalid&lt;/h1&gt;\")\n});\n</code></pre>\n\n<p>The vital part of the test is taking the methods of our template, in this case, it’s <code>data</code> and <code>render</code>, and using the <code>apply</code> method to change the <code>this</code> on each method call.</p>\n\n<p>The advantage to this approach is that you can now stub and replace any functionality within your templates. In addition, using types makes it relatively straightforward to test different data scenarios, such as no elements in a collection instead of some elements.</p>\n\n<h2 id=\"conclusion\">Conclusion</h2>\n\n<p>There are a lot of template language choices in the 11ty toolbox, and I think you should try them all. They each have strengths and weaknesses, but it’s great that they’re all built on top of a core set of 11ty data objects. If you need to unit test your templates for complex visual logic, consider the JavaScript template language, as it’s easy to verify and fix bugs using this approach. I should note that unit tests should be an addition to your testing strategy and that you should always confirm your work by running it through 11ty itself.</p>\n\n<p>Well, I hope you enjoyed this post, and as always, thank you for reading.</p>\n\n",
      "Content": null,
      "Language": null,
      "Link": "https://khalidabuhakmeh.com/unit-test-11ty-pages-with-vitest-and-typescript"
    },
    {
      "FeedId": "https://khalidabuhakmeh.com/feed.xml",
      "ItemId": "https://khalidabuhakmeh.com/writing-a-cross-platform-clock-app-with-avalonia-ui-and-nxui",
      "Title": "Writing a Cross-Platform Clock App With Avalonia UI and NXUI",
      "PublishDate": "2023-04-18T00:00:00+00:00",
      "Summary": "<p><a href=\"https://www.avaloniaui.net/\">Avalonia UI</a> has been a refreshing reprieve from my typical web development workflows. Of course, the web will always be my first love, but I’m enjoying the ease and intuitiveness of desktop app development. Additionally, the Avalonia team has put extraordinary work into making a truly cross-platform development experience. So if you want to build your first Avalonia-powered application, this post might be just for you.</p>\n\n<p>I’ll be using the <a href=\"https://github.com/wieslawsoltes/NXUI\">NXUI library</a> written by <a href=\"https://github.com/wieslawsoltes\">Wiesław Šoltés</a>. If you’re allergic to XAML, this library might be your detour to desktop development, as it relies on a fluent interface to define views while retaining the APIs that make XAML so expressive.</p>\n\n<p>So, let’s get started!</p>\n\n<!--more-->\n\n<h2 id=\"what-is-nxui\">What is NXUI?</h2>\n\n<p>NXUI is an attempt to bring the trend of minimalism to desktop application development built around the Avalonia UI API. As author, Wiesław Šoltés states in the NXUI readme:</p>\n\n<blockquote>\n  <p>Creating minimal Avalonia next generation (NXUI, next-gen UI) application using C# 10 and .NET 6 and 7</p>\n</blockquote>\n\n<p>So what does the code of a next-generation Avalonia application look like?</p>\n\n<pre><code class=\"language-csharp\">Window Build() =&gt; Window().Content(Label().Content(\"NXUI\"));\n\nAppBuilder.Configure&lt;Application&gt;()\n  .UsePlatformDetect()\n  .UseFluentTheme()\n  .StartWithClassicDesktopLifetime(Build, args);\n</code></pre>\n\n<p>Wow! That’s relatively minimal, but let’s write something more useful. How about a clock? It’s time to write some code (pun intended).</p>\n\n<p>To start building your first NXUI application, you’ll need to add the following to a .NET console app’s <code>.csproj</code>.</p>\n\n<pre><code>&lt;PackageReference Include=\"NXUI\" Version=\"11.0.0-preview5\" /&gt;\n</code></pre>\n\n<p>Note: the version might differ when searching on NuGet. Be sure to use the latest version of the package.</p>\n\n<h2 id=\"an-avalonia-ui-clock-app\">An Avalonia UI Clock App</h2>\n\n<p>NXUI relies heavily on <code>Observable</code> elements to hydrate dynamic values in a view. In the case of our demo, we’ll be using the <code>System.Timers.Timer</code> class to create a new string value using the current <code>DateTime.Now</code> result. Let’s see how you create an <code>Observable&lt;string&gt;</code> that returns values on a specified interval.</p>\n\n<pre><code class=\"language-csharp\">var currentTime = Observable.Create&lt;string&gt;(\n    observer =&gt;\n    {\n        var timer = new System.Timers.Timer {\n            Interval = 250,\n        };\n        timer.Elapsed += (_, _) =&gt; observer.OnNext($\"{DateTime.Now:hh:mm:ss tt}\");\n        timer.Start();\n        return Disposable.Empty;\n    });\n</code></pre>\n\n<p>When working with NXUI, you’ll often use the <code>Observable.Create</code> method for dynamic values. You can also refactor many calls into separate classes and helper methods.</p>\n\n<p>Next, let’s Build our view, which will hold our time string.</p>\n\n<pre><code class=\"language-csharp\">Window Build() =&gt;\n    Window()\n        .Width(400).Height(200).CanResize(false)\n        .WindowStartupLocation(WindowStartupLocation.CenterScreen)\n        .Content(\n            Border()\n                .Margin(25, 0, 25, 0)\n                .Height(100)\n                .CornerRadius(10)\n                .BoxShadow(BoxShadows.Parse(\"5 5 10 2 Black\"))\n                .Background(Brushes.White)\n                .Child(\n                    TextBlock()\n                        .Foreground(Brushes.Black)\n                        .TextAlignmentCenter()\n                        .ZIndex(1)\n                        .FontSize(40)\n                        .FontStretch(FontStretch.Expanded)\n                        .VerticalAlignment(VerticalAlignment.Center)\n                        // Set The Observable&lt;string&gt; to Text\n                        .Text(currentTime)\n                )\n        );\n</code></pre>\n\n<p>We have a window with a single <code>Border</code> element, which wraps our <code>TextBlock</code>. The most important aspect of our code is that the call to <code>TextBlock.Text</code> takes our <code>currentTime</code> argument. As the timer ticks, the UI will update with our latest value.</p>\n\n<p>The code for this demo is a tight 40 lines of code.</p>\n\n<pre><code class=\"language-csharp\">var currentTime = Observable.Create&lt;string&gt;(\n    observer =&gt;\n    {\n        var timer = new System.Timers.Timer {\n            Interval = 250,\n        };\n        timer.Elapsed += (_, _) =&gt; observer.OnNext($\"{DateTime.Now:hh:mm:ss tt}\");\n        timer.Start();\n        return Disposable.Empty;\n    });\n\nWindow Build() =&gt;\n    Window()\n        .Width(400).Height(200).CanResize(false)\n        .WindowStartupLocation(WindowStartupLocation.CenterScreen)\n        .Content(\n            Border()\n                .Margin(25, 0, 25, 0)\n                .Height(100)\n                .CornerRadius(10)\n                .BoxShadow(BoxShadows.Parse(\"5 5 10 2 Black\"))\n                .Background(Brushes.White)\n                .Child(\n                    TextBlock()\n                        .Foreground(Brushes.Black)\n                        .TextAlignmentCenter()\n                        .ZIndex(1)\n                        .FontSize(40)\n                        .FontStretch(FontStretch.Expanded)\n                        .VerticalAlignment(VerticalAlignment.Center)\n                        // Set The Observable&lt;string&gt; to Text\n                        .Text(currentTime)\n                )\n        );\n\nAppBuilder\n    .Configure&lt;Application&gt;()\n    .UsePlatformDetect()\n    .UseFluentTheme()\n    .StartWithClassicDesktopLifetime(Build, args);\n</code></pre>\n\n<p>Running our code, we see a functioning clock application. Pretty cool! (The image reflects the clock from the final sample).</p>\n\n<p><img src=\"https://github.com/khalidabuhakmeh/AvaloniaClock/raw/main/screenshot.png\" alt=\"Avalonia Clock\" /></p>\n\n<h2 id=\"conclusion\">Conclusion</h2>\n\n<p>The most fantastic part of Avalonia has been the rich ecosystem of folks building different ways to make the technology accessible. If you like XAML, then that’s great. If you want C#, there are also ways to access Avalonia. If you’re an F# person, there are also folks working on F# implementations of Avalonia. NXUI is one of many approaches in the Avalonia ecosystem. The fluent interface made it a little more accessible to discover the properties of components and how they might tie together.</p>\n\n<p>If you’d like to play around with the code found in this post, I’ve pushed up a complete working <a href=\"https://github.com/khalidabuhakmeh/AvaloniaClock\">Avalonia Clock sample at my GitHub repository</a>.</p>\n\n",
      "Content": null,
      "Language": null,
      "Link": "https://khalidabuhakmeh.com/writing-a-cross-platform-clock-app-with-avalonia-ui-and-nxui"
    },
    {
      "FeedId": "https://khalidabuhakmeh.com/feed.xml",
      "ItemId": "https://khalidabuhakmeh.com/dependency-injection-with-avalonia-ui-apps",
      "Title": "Dependency Injection with Avalonia UI Apps",
      "PublishDate": "2023-04-11T00:00:00+00:00",
      "Summary": "<p>I’ve recently been experimenting with <a href=\"https://www.avaloniaui.net/\">Avalonia UI</a>, a development framework for desktop and mobile platforms, and I’ve been enjoying the experience. While Avalonia has much to offer out of the box, it is more than happy to let you make many decisions. One of those decisions is whether to use dependency injection as a part of your application.</p>\n\n<p>In this experimental post, we’ll see how I added dependency injection into an ongoing Avalonia application and discuss the pros and cons of the approach.</p>\n\n<p>Let’s get started.</p>\n\n<!--more-->\n\n<h2 id=\"registering-your-dependencies\">Registering Your Dependencies</h2>\n\n<p>Since no infrastructure exists for user-defined dependency injection in Avalonia (or at least non that I am aware of), we must create our own. The first step to any dependency injection approach is finding and registering all our dependencies.</p>\n\n<p>For the post, <a href=\"https://jasperfx.github.io/lamar/\">I’m using Lamar</a>, the spiritual successor of StructureMap. Of course, you can substitute your own, but I like Lamar’s interface for scanning and registering types.</p>\n\n<p>I added the following code in <code>Program.cs</code> of my Avalonia app.</p>\n\n<pre><code class=\"language-csharp\">public static IContainer Container { get; }\n\nstatic Program()\n{\n    Container = new Container(cfg =&gt;\n    {\n        cfg.Scan(scan =&gt;\n        {\n            scan.AssemblyContainingType&lt;Program&gt;();\n            scan.AddAllTypesOf&lt;ViewModelBase&gt;();\n            scan.AddAllTypesOf&lt;IControl&gt;();\n            scan.WithDefaultConventions();\n        });\n    });\n}\n</code></pre>\n\n<p>This code scans my application for all types of <code>ViewModelBase</code> and <code>IControl</code> along with the default conventions of Lamar. A sane default is registering concrete types against their first interface. Now that we set up our dependency graph let’s start changing our view models and views.</p>\n\n<h2 id=\"windowbase-and-viewmodelbase\">WindowBase and ViewModelBase</h2>\n\n<p>Using the Model-View-ViewModel approach, I must create base classes for my views and viewmodels. Let’s look at both now, starting with my <code>WindowBase</code> class.</p>\n\n<pre><code class=\"language-csharp\">using Avalonia.Controls;\nusing HelloAvalonia.ViewModels;\nusing Lamar;\n\nnamespace HelloAvalonia.Views;\n\npublic abstract class WindowBase&lt;T&gt; : Window\n    where T: ViewModelBase\n{\n    [SetterProperty]\n    public T ViewModel\n    {\n        get =&gt; (T)DataContext!;\n        set =&gt; DataContext = value;\n    }\n}\n</code></pre>\n\n<p>You’ll notice I’m using an attribute called <code>SetterProperty</code> on a new <code>ViewModel</code> property. As Lamar builds our Window, it will also resolve the ViewModel and set the <code>DataContext</code>. <strong>I opted to use property injection to allow the Avalonia preview tool to continue working in JetBrains Rider.</strong></p>\n\n<p>Now, let’s look at our <code>ViewModelBase</code> implementation.</p>\n\n<pre><code class=\"language-csharp\">using CommunityToolkit.Mvvm.ComponentModel;\n\nnamespace HelloAvalonia.ViewModels;\n\npublic abstract class ViewModelBase : ObservableObject\n{\n}\n</code></pre>\n\n<p>I’m using the <strong><a href=\"https://github.com/CommunityToolkit/dotnet\">CommunityToolkit.Mvvm</a></strong> package, so my ViewModels inherit from <code>ObservableObject</code>. Now, let’s implement a view model instance.</p>\n\n<h2 id=\"mainwindow-mainwindowviewmodel-and-dependencies\">MainWindow, MainWindowViewModel, and Dependencies</h2>\n\n<p>Like our <code>ViewModel</code> property in our <code>WindowBase</code> class, we’ll resolve all dependencies using the <code>SetterProperty</code> attribute. First, let’s change our main view to inherit from WindowBase. The change will ensure our <code>DataContext</code> is set as our container creates the instance.</p>\n\n<pre><code class=\"language-csharp\">using System;\nusing HelloAvalonia.ViewModels;\nusing Lamar;\n\nnamespace HelloAvalonia.Views;\n\npublic partial class MainWindow : WindowBase&lt;MainWindowViewModel&gt;\n{\n    public MainWindow()\n    {\n        InitializeComponent();\n    }\n        \n    [SetterProperty]\n    public DialogWindow? Dialog { get; set; }\n\n    public Action ShowDialogInteraction =&gt; \n        () =&gt; Dialog?.ShowDialog(this);\n}\n</code></pre>\n\n<p>I will also need another dialog window to show some other information. For example, I can ask for any control registered in my container.</p>\n\n<p>In this example, I’m using the dialog instance to create an interaction and pass it to my view model to keep controls out of my business logic.</p>\n\n<pre><code class=\"language-xml\">&lt;Button\n    Content=\"Show Dialog\"\n    Command=\"{Binding ShowDialogCommand}\"\n    CommandParameter=\"{Binding #Main.ShowDialogInteraction}\"\n    HorizontalAlignment=\"Center\"&gt;\n</code></pre>\n\n<p>Now let’s see the <code>MainWindowViewModel</code> implementation.</p>\n\n<pre><code class=\"language-csharp\">using System;\nusing CommunityToolkit.Mvvm.ComponentModel;\nusing CommunityToolkit.Mvvm.Input;\n\nnamespace HelloAvalonia.ViewModels;\n\npublic partial class MainWindowViewModel : ViewModelBase\n{\n    [ObservableProperty, NotifyPropertyChangedFor(nameof(PlayAnimation))]\n    private int _count;\n\n    [ObservableProperty]\n    private bool _isEnabled = true;\n\n    [ObservableProperty] private string _text = \"Click Me\";\n    public bool PlayAnimation =&gt; Count &gt; 0 &amp;&amp; Count % 2 == 0;\n\n    [RelayCommand]\n    private void Click()\n    {\n        Count++;\n        Text = Count == 1\n            ? $\"Clicked {Count} time\"\n            : $\"Clicked {Count} times\";\n    } \n\n    [RelayCommand]\n    private void ShowDialog(Action? showDialogInteraction)\n    {\n        showDialogInteraction?.Invoke();\n    }\n}\n</code></pre>\n\n<p>There are no dependencies here, but we pass our interaction to our <code>ShowDialog</code> method. So what’s the dialog implementation look like?</p>\n\n<pre><code class=\"language-csharp\">using System;\nusing HelloAvalonia.ViewModels;\n\nnamespace HelloAvalonia.Views;\n\npublic partial class DialogWindow : WindowBase&lt;DialogWindowViewModel&gt;\n{\n    public DialogWindow()\n    {\n        InitializeComponent();\n    }\n    \n    public Action HideInteraction =&gt; Hide;\n}\n</code></pre>\n\n<p>And the View Model is even simpler.</p>\n\n<pre><code class=\"language-csharp\">using System;\nusing System.Threading.Tasks;\nusing Avalonia.Media.Imaging;\nusing CommunityToolkit.Mvvm.ComponentModel;\nusing CommunityToolkit.Mvvm.Input;\nusing HelloAvalonia.Models;\nusing Lamar;\n\nnamespace HelloAvalonia.ViewModels;\n\npublic partial class DialogWindowViewModel : ViewModelBase\n{\n    [SetterProperty] \n    public ICatsImageService? Cats { get; set; }\n\n    [ObservableProperty] private Bitmap? _catImage;\n\n    [RelayCommand]\n    private async Task Opened()\n    {\n        if (Cats is { })\n        {\n            var bitmap = await Cats.GetRandomImage();\n            CatImage = bitmap;\n        }\n    }\n\n    [RelayCommand]\n    private void Hide(Action? interaction)\n    {\n        CatImage = null;\n        interaction?.Invoke();\n    }\n}\n</code></pre>\n\n<p>We are injecting an instance of <code>ICatsImageService</code> using Lamar’s <code>SetterProperty</code> attribute.</p>\n\n<p>So now that we have our views and viewmodels, where is our entry point?</p>\n\n<h2 id=\"the-entrypoint\">The Entrypoint</h2>\n\n<p>The entry point of an Avalonia app occurs in the <code>App</code> implementation. Therefore, I modify the <code>OnFrameworkInitializationCompleted</code> method to use the container I define in <code>Program</code>.</p>\n\n<pre><code class=\"language-csharp\">using Avalonia;\nusing Avalonia.Controls.ApplicationLifetimes;\nusing Avalonia.Markup.Xaml;\nusing HelloAvalonia.Views;\n\nnamespace HelloAvalonia;\n\npublic partial class App : Application\n{\n    public override void Initialize()\n    {\n        AvaloniaXamlLoader.Load(this);\n    }\n\n    public override void OnFrameworkInitializationCompleted()\n    {\n        if (ApplicationLifetime is IClassicDesktopStyleApplicationLifetime desktop)\n        {\n            desktop.MainWindow = \n                Program\n                .Container\n                .GetInstance&lt;MainWindow&gt;();\n        }\n\n        base.OnFrameworkInitializationCompleted();\n    }\n}\n</code></pre>\n\n<p>That’s it! We now have a working application.</p>\n\n<h2 id=\"conclusion\">Conclusion</h2>\n\n<p>Some folks hate dependency injection, and some folks love it. I think it has value in complex applications where you want to define “how” things are set up in one place and forget about it. With Avalonia, it takes a bit of work to get started with dependency injection, but not too much.</p>\n\n<p>It’s essential to be mindful of the lifetimes of your controls and their dependencies. As you’re dealing with a desktop application, I don’t see a need to create multiple instances of objects, so Singleton registrations should work fine in most cases.</p>\n\n<p>Well, I hope you liked this post. I’ve included the code to this <a href=\"https://github.com/khalidabuhakmeh/HelloAvalonia\">Avalonia UI sample on my GitHub repository</a> for you to try.</p>\n",
      "Content": null,
      "Language": null,
      "Link": "https://khalidabuhakmeh.com/dependency-injection-with-avalonia-ui-apps"
    },
    {
      "FeedId": "https://khalidabuhakmeh.com/feed.xml",
      "ItemId": "https://khalidabuhakmeh.com/load-youtube-embed-videos-with-javascript",
      "Title": "Load YouTube Embed Videos When Needed With JavaScript",
      "PublishDate": "2023-04-04T00:00:00+00:00",
      "Summary": "<p>If you’re a content creator or work on a site that heavily relies on YouTube embeds, you’ll quickly realize that they can dramatically impact the load time of a page. Load times can also grow depending on the number of YouTube embeds on a page.</p>\n\n<p>In this post, we’ll see a technique to reduce page load times by using newer HTML and JavaScript techniques to load videos when the user needs them.</p>\n\n<p>Let’s get started.</p>\n\n<!--more-->\n\n<h2 id=\"why-are-youtube-embeds-slowing-my-page-load-times\">Why Are YouTube Embeds Slowing My Page Load Times</h2>\n\n<p>YouTube videos typically have a thumbnail image displayed to the user before the video starts. YouTube may serve up to four thumbnails, all varying in quality. Unfortunately for performance, most browsers treat images as blocking elements on a page. Regarding performance, this means the page cannot complete loading unless the element is also loaded.</p>\n\n<p>There have been recent techniques to mitigate this issue, including adding a <code>width</code> and <code>height</code> to images so the client can calculate the layout in advance of the image loading and the use of the <code>lazy</code> attribute to signify that you’re willing to load the asset outside of the critical rendering path. That’s great, right?!</p>\n\n<p>Well, YouTube embeds utilize an <code>iframe</code> where you don’t have control over the markup or attributes. So how do you get around this issue? You cheat… sort of.</p>\n\n<h2 id=\"using-plyr-for-youtube-embeds\">Using Plyr For YouTube Embeds</h2>\n\n<p>In my use case, I had over 42 YouTube images on a page, with only one visible at a time. That’s a lot of image requests to YouTube’s thumbnail service, making my page understandably slow to load.</p>\n\n<p>My first step was to use a video player other than that of YouTube’s iframe embed. In my case, I used <a href=\"https://plyr.io/\"><strong>Plyr</strong></a>. It’s pretty straightforward to use the library with existing YouTube content.</p>\n\n<pre><code class=\"language-html\">&lt;div class=\"video-player\" \n     data-plyr-provider=\"vimeo\" \n     data-plyr-embed-id=\"76979871\"&gt;&lt;/div&gt;\n</code></pre>\n<p>With the HTML in place, you must create an instance of the <code>Plyr</code> JavaScript class for each occurrence of an embedded video.</p>\n\n<pre><code class=\"language-javascript\">const players = Array\n    .from(document.querySelectorAll('.video-player'))\n    .map((p) =&gt; new Plyr(p));\n</code></pre>\n<p>Note that this suffers from the same issue as before, so we need to be smarter here. You’ll see how to solve this same issue in the next section.</p>\n\n<h2 id=\"using-intersectionobserver-to-create-plyr-instances\">Using IntersectionObserver To Create Plyr Instances</h2>\n\n<p>Our goal is only to instantiate <code>Plyr</code> instances that the user sees. We can accomplish this using the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API\"><code>IntersectionObserver</code> type</a>.</p>\n\n<blockquote>\n  <p>The Intersection Observer API provides a way to asynchronously observe changes in the intersection of a target element with an ancestor element or with a top-level document’s viewport. –Mozilla</p>\n</blockquote>\n\n<p>For our use case, we’ll monitor our video elements’ visibility and call <code>new Plyr</code> once.</p>\n\n<pre><code class=\"language-javascript\">// import Plyr dependency\nimport Plyr from \"plyr\";\n\n// simplified onVisible method\nconst onVisible = function (element, callback) {\n  const  options = {\n    root: document,\n  };\n  const observer = new IntersectionObserver((entries, observer) =&gt; {\n    entries.forEach((entry) =&gt; {\n      callback(entry, observer);\n    });\n  }, options);\n  observer.observe(element);\n};\n\n// create an array of video player HTML elements\nconst videos = Array.from(document.querySelectorAll(\".video-player\"));\n// apply onVisible callback\nvideos.forEach((video) =&gt; {\n  onVisible(video, (entry, observer) =&gt; {\n    if (entry.intersectionRatio &gt; 0) {\n      new Plyr(entry.target);\n      observer.unobserve(entry.target);\n    }\n  });\n});\n</code></pre>\n\n<p>The vital part of this code is the implementation of the callback for each element.</p>\n\n<pre><code class=\"language-javascript\"> if (entry.intersectionRatio &gt; 0) {\n      new Plyr(entry.target);\n      observer.unobserve(entry.target);\n}\n</code></pre>\n\n<p>Once we create the video player, we no longer need to observe its changes, as we’ve loaded all assets, and the video is ready for the user. Now videos are created when the user needs them, not on the initial page load.</p>\n\n<p>Using the <code>IntersectionObserver</code> technique, my page load times went from several seconds to milliseconds. In addition, I improved performance and kept users happy with just a few lines of JavaScript.</p>\n\n<h2 id=\"conclusion\">Conclusion</h2>\n\n<p>Web development is easy to get into but takes a lifetime to master, especially as the APIs and features of HTML, JavaScript, and CSS improve. Also, when working with third parties, finding solutions around their implementations can be challenging. Luckily, you can always load things when needed rather than all at once. This technique can also be used for other network-heavy and blocking resources.</p>\n\n<p>I hope you found this post interesting and helpful. As always, thank you for reading.</p>\n\n",
      "Content": null,
      "Language": null,
      "Link": "https://khalidabuhakmeh.com/load-youtube-embed-videos-with-javascript"
    },
    {
      "FeedId": "https://khalidabuhakmeh.com/feed.xml",
      "ItemId": "https://khalidabuhakmeh.com/dotnet-maui-app-stopped-working-help",
      "Title": ".NET MAUI App Stopped Working -- HELP!",
      "PublishDate": "2023-03-28T00:00:00+00:00",
      "Summary": "<p>So you’ve spent several weeks successfully developing a Multi-Application UI app. Then, suddenly, your IDE shows that your application has hundreds of errors, and you cannot build. What’s going on?!</p>\n\n<p>This post is an ongoing list of issues you might encounter while developing MAUI apps that seem to break your app for inexplicable “reasons”. Finally, I’ll suggest potential fixes to get you back into the development flow.</p>\n\n<p>Let’s Get Started!</p>\n\n<!--more-->\n\n<h2 id=\"everything-is-screaming-red-and-broken\">Everything Is Screaming Red and Broken!</h2>\n\n<p>If you were successfully developing your application and suddenly your solution failed to load, you likely have changed your environment. <strong>Failed MAUI solutions indicate a change in the .NET SDK.</strong></p>\n\n<p>For example, you may have been developing successfully using the .NET 7 SDK and wanted to try the latest .NET 8 preview SDK. Unfortunately, after installing the SDK, everything is broken! Ahhh!</p>\n\n<p>The problem is the easiest fix among the issues I’ve seen with MAUI. To fix the issue,  add a <code>global.json</code> file at the root of your solution to tie your project back to the correct SDK band and to access the SDK band’s workloads.</p>\n\n<pre><code class=\"language-json\">{\n  \"sdk\": {\n    \"version\": \"7.0.0\",\n    \"rollForward\": \"latestMinor\",\n    \"allowPrerelease\": false\n  }\n}\n</code></pre>\n\n<p>You may need to restart your editor, but you should be back in business upon restart.</p>\n\n<h2 id=\"build-fails-with-one-or-more-invalid-files-were-detected\">Build Fails with One or More Invalid Files Were Detected</h2>\n\n<p>So you decided to import some new resources to pretty up your MAUI application. Unfortunately, you’ll get this error message after importing, and you’re confused. Is it my new files?</p>\n\n<pre><code class=\"language-console\">Microsoft.Maui.Resizetizer.targets(525, 9): One or more invalid file names were detected. File names must be lowercase, start and end with a letter character, and contain only alphanumeric characters or underscores: \n</code></pre>\n\n<p>Deleting the new assets doesn’t fix your issue, and now your app is perpetually broken. Aaaaaah!</p>\n\n<p>Well, have no fear. The error is another straightforward problem with a clear solution. MacOS users may have touched the files in the asset folder, creating a <code>.DS_Store</code> file that’s typically invisible in the solution explorer and Finder. However, you’ll see the file if you look at the <strong>Images</strong> folder using something like JetBrains Rider File Explorer.</p>\n\n<p><img src=\"https://res.cloudinary.com/abuhakmeh/image/fetch/c_limit,f_auto,q_auto,w_800/https://khalidabuhakmeh.com/assets/images/posts/dotnet-maui-app-work/jetbrains-rider-maui-file-system-ds-store.png\" srcset=\"https://res.cloudinary.com/abuhakmeh/image/fetch/c_limit,f_auto,q_auto,w_320/https://khalidabuhakmeh.com/assets/images/posts/dotnet-maui-app-work/jetbrains-rider-maui-file-system-ds-store.png 320w, https://res.cloudinary.com/abuhakmeh/image/fetch/c_limit,f_auto,q_auto,w_478/https://khalidabuhakmeh.com/assets/images/posts/dotnet-maui-app-work/jetbrains-rider-maui-file-system-ds-store.png 478w\" sizes=\"100vw\" alt=\"File System in JetBrains Rider showing .DS_Store file in MAUI App\" loading=\"lazy\" width=\"478\" height=\"350\" crossorigin=\"anonymous\" /></p>\n\n<p>Delete this file, and you’ll be back in business.</p>\n\n<p>You can also resolve this issue by changing your MAUI project’s <code>MauiImage</code> wildcard in the <code>.csproj</code> only to include file extensions for known image types.</p>\n\n<pre><code>&lt;!-- Images --&gt;\n&lt;MauiImage Include=\"Resources\\Images\\*.{png,svg}\" /&gt;\n</code></pre>\n\n<p>You can recreate the <code>.DS_Store</code> issue by running <code>touch</code> from the command line, which creates the offending file.</p>\n\n<h2 id=\"pass-selectitem-to-my-view-model-command\">Pass SelectItem to My View Model Command</h2>\n\n<p>While not an issue, this one left me scratching my head for a bit, and I thought I’d save you the trouble of scratching your head. <strong>How do you bind a <code>SelectItem</code> from a <code>CollectionView</code> to a <code>CommandParameter</code>?</strong></p>\n\n<p>If you’re using an MVVM framework, like <code>CommunityToolkit.Mvvm</code>, you likely have a command on your view model that needs information from a user event like <code>SelectionChanged</code>.</p>\n\n<p>The trick to this solution is to add a name to your component, then use the <code>Source</code> attribute to reference the item. It will make more sense when you look at the XAML.</p>\n\n<pre><code class=\"language-xml\">&lt;CollectionView\n    x:Name=\"TodosCollectionView\"\n    VerticalOptions=\"Fill\"\n    ItemsSource=\"{Binding Items}\"\n    SelectionMode=\"Single\"\n    SelectionChangedCommand=\"{Binding SelectionChangedCommand}\"\n    SelectionChangedCommandParameter=\"{Binding SelectedItem, Source={x:Reference TodosCollectionView}}\"&gt;\n...\n&lt;/CollectionView&gt;\n</code></pre>\n\n<h2 id=\"communitytoolkitmvvm-cant-find-my-properties-or-commands\">CommunityToolkit.Mvvm Can’t Find My Properties or Commands</h2>\n\n<p>CommunityToolkit.Mvvm uses source generators and requires an environment to read and generate the additional source code of your view models. The generated code includes properties and <code>IAsyncRelayCommand</code> implementations. If you cannot find these elements in your code, you likely have one of the following issues in your code base.</p>\n\n<p>You forgot the <code>partial</code> keyword on your view model.\nThe name of your view model is <em>not</em> the same name as the generated command. For example, an <code>OnAddItem</code> method with <code>RelayCommandAttribute</code> will create an <code>AddItemCommand</code> command.\nTry cleaning your <code>obj</code> and <code>bin</code> folders, which might fix the current state of your project. By clean, I mean delete them from your disk.\nRestart your IDE.</p>\n\n<h2 id=\"my-maui-app-never-starts-what-gives\">My MAUI App Never Starts! What Gives?!</h2>\n\n<p>If you’re using the dependency injection facility of MAUI, you must register all dependencies as part of your <code>MauiProgram</code> file. Check your development environments console output for mentions of the following error.</p>\n\n<pre><code class=\"language-console\">System.InvalidOperationException: Unable to resolve service for type...\n</code></pre>\n\n<p>The solution is to register the missing type in <code>MauiProgram</code>.</p>\n\n<pre><code class=\"language-csharp\">builder.Services.AddSingleton&lt;AppShell&gt;();\nbuilder.Services.AddSingleton&lt;MainPage&gt;();\nbuilder.Services.AddSingleton&lt;MainPageModel&gt;();\nbuilder.Services.AddSingleton&lt;TodoItemPage&gt;();\nbuilder.Services.AddSingleton&lt;TodoItemPageModel&gt;();\n</code></pre>\n\n<p>As a suggestion, you may want to create a convention to register pages and their corresponding view models automatically.</p>\n\n<h2 id=\"my-maui-build-is-slow\">My MAUI Build is Slow!</h2>\n\n<p>If you’re running a build for every target framework in your <code>TargetFrameworks</code> tag, you’ll get some slow builds.</p>\n\n<pre><code class=\"language-xml\">&lt;TargetFrameworks&gt;net7.0-ios;net7.0-maccatalyst;net7.0-android;&lt;/TargetFrameworks&gt;\n</code></pre>\n\n<p>In my case, iOS is the fastest build, so I remove a few target frameworks until I’m ready to work on Android.</p>\n\n<pre><code class=\"language-xml\">&lt;TargetFrameworks&gt;net7.0-ios&lt;TargetFrameworks&gt;\n</code></pre>\n\n<p>If you want to put in the additional effort, you can use environment variables and MSBuild flags to create different builds for different situations.</p>\n\n<p>The downside to this approach is you can inadvertently build something that works in iOS that is completely broken on other platforms before you realize it.</p>\n\n<h2 id=\"conclusion\">Conclusion</h2>\n\n<p>Developing with MAUI can be fun, but opaque errors are inevitable. I hope some of the problems and solutions outlined in this post can get you back on track.</p>\n\n",
      "Content": null,
      "Language": null,
      "Link": "https://khalidabuhakmeh.com/dotnet-maui-app-stopped-working-help"
    },
    {
      "FeedId": "https://khalidabuhakmeh.com/feed.xml",
      "ItemId": "https://khalidabuhakmeh.com/dotnet-maui-development-environment-set-up-walkthrough",
      "Title": ".NET MAUI Development Environment Set Up Walkthrough",
      "PublishDate": "2023-03-21T00:00:00+00:00",
      "Summary": "<p>Last year <a href=\"https://blog.jetbrains.com/dotnet/2022/05/25/macos-environment-setup-for-maui-development/\">I wrote macOS Environment Setup for MAUI Development</a> for the JetBrains .NET blog, and while many folks have told me they still find it helpful, it is, admittedly, out of date. So in this post, I’ll give you a shorter and more manageable guide to setting up your development environment for Multi-platform App UI (MAUI) in 2023.</p>\n\n<p>I’ve helped several folks set up their macOS environment with this updated guide, and it should mostly apply to a Windows environment (outside of the OS-specific SDKs).</p>\n\n<!--more-->\n\n<h2 id=\"installing-the-net-sdk\">Installing the .NET SDK</h2>\n\n<p>The first and most obvious step is you’ll need to install the latest .NET SDK. Head over to <a href=\"https://dot.net\">https://dot.net</a> and download the latest MAUI-supported SDK. As of writing this article, that is .NET 7.</p>\n\n<p>The SDK is necessary as dotnet will install and manage MAUI workloads according to SDK version bands.</p>\n\n<p>Once you’ve installed the .NET SDK, we’ll focus on the next important step.</p>\n\n<h2 id=\"installing-xcode-for-maui\">Installing XCode for MAUI</h2>\n\n<p>You’ll need to install XCode, ensuring that MAUI supports the version of XCode you are installing. <strong>For .NET 7, the current version of XCode is 14.2.</strong></p>\n\n<p>I recommend installing XCode using the Apple AppStore, as it’s the more straightforward method. You’ll want to pick Apple SDKs for iOS and macOS when installed. Other SDKs for Apple Watch and Apple TV are optional.</p>\n\n<p>Start up XCode and open the application’s settings. Next, you’ll need to navigate to Locations and ensure that Xcode is the correct value in the Command Line Tools select dropdown. If the dropdown has no value, be sure to select one. These tools help compile native assemblies for Apple device targets.</p>\n\n<p><img src=\"https://res.cloudinary.com/abuhakmeh/image/fetch/c_limit,f_auto,q_auto,w_800/https://khalidabuhakmeh.com/assets/images/posts/maui-dev-enviornment-dotnet/xcode-locations.png\" srcset=\"https://res.cloudinary.com/abuhakmeh/image/fetch/c_limit,f_auto,q_auto,w_320/https://khalidabuhakmeh.com/assets/images/posts/maui-dev-enviornment-dotnet/xcode-locations.png 320w, https://res.cloudinary.com/abuhakmeh/image/fetch/c_limit,f_auto,q_auto,w_540/https://khalidabuhakmeh.com/assets/images/posts/maui-dev-enviornment-dotnet/xcode-locations.png 540w, https://res.cloudinary.com/abuhakmeh/image/fetch/c_limit,f_auto,q_auto,w_760/https://khalidabuhakmeh.com/assets/images/posts/maui-dev-enviornment-dotnet/xcode-locations.png 760w, https://res.cloudinary.com/abuhakmeh/image/fetch/c_limit,f_auto,q_auto,w_980/https://khalidabuhakmeh.com/assets/images/posts/maui-dev-enviornment-dotnet/xcode-locations.png 980w, https://res.cloudinary.com/abuhakmeh/image/fetch/c_limit,f_auto,q_auto,w_1200/https://khalidabuhakmeh.com/assets/images/posts/maui-dev-enviornment-dotnet/xcode-locations.png 1200w\" sizes=\"100vw\" alt=\"XCode Locations tab in settings\" loading=\"lazy\" width=\"1660\" height=\"1100\" crossorigin=\"anonymous\" /></p>\n\n<p>While you’re here, check your Platforms tab to ensure you have all the SDKs installed correctly.</p>\n\n<p><img src=\"https://res.cloudinary.com/abuhakmeh/image/fetch/c_limit,f_auto,q_auto,w_800/https://khalidabuhakmeh.com/assets/images/posts/maui-dev-enviornment-dotnet/xcode-platforms.png\" srcset=\"https://res.cloudinary.com/abuhakmeh/image/fetch/c_limit,f_auto,q_auto,w_320/https://khalidabuhakmeh.com/assets/images/posts/maui-dev-enviornment-dotnet/xcode-platforms.png 320w, https://res.cloudinary.com/abuhakmeh/image/fetch/c_limit,f_auto,q_auto,w_540/https://khalidabuhakmeh.com/assets/images/posts/maui-dev-enviornment-dotnet/xcode-platforms.png 540w, https://res.cloudinary.com/abuhakmeh/image/fetch/c_limit,f_auto,q_auto,w_760/https://khalidabuhakmeh.com/assets/images/posts/maui-dev-enviornment-dotnet/xcode-platforms.png 760w, https://res.cloudinary.com/abuhakmeh/image/fetch/c_limit,f_auto,q_auto,w_980/https://khalidabuhakmeh.com/assets/images/posts/maui-dev-enviornment-dotnet/xcode-platforms.png 980w, https://res.cloudinary.com/abuhakmeh/image/fetch/c_limit,f_auto,q_auto,w_1200/https://khalidabuhakmeh.com/assets/images/posts/maui-dev-enviornment-dotnet/xcode-platforms.png 1200w\" sizes=\"100vw\" alt=\"Xcode platforms tab showing installed Platforms of iOS and mac\" loading=\"lazy\" width=\"1660\" height=\"1080\" crossorigin=\"anonymous\" /></p>\n\n<p>You’re good to go with XCode.</p>\n\n<h2 id=\"installing-xamarinios-and-xamarinmacos\">Installing Xamarin.iOS and Xamarin.macOS</h2>\n\n<p>You’ll also want to install the latest Xamarin SDKs since MAUI still uses these. Visual Studio for Mac and Visual Studio ship these with each release, but you can install them without those apps. These SDKs also ship with JetBrains Rider’s plugins but can be outdated for MAUI development.</p>\n\n<p><a href=\"https://github.com/xamarin/xamarin-macios/blob/main/DOWNLOADS.md\">You can download the latest Xamarin.iOS and Xamarin.mac packages here.</a></p>\n\n<p>You’ll only need the package for the environments you are targeting, but you’re already installing gigabytes of dependencies, so what’s a few more?</p>\n\n<h2 id=\"installing-maui-workloads\">Installing MAUI Workloads</h2>\n\n<p><strong>Important! Add a <code>global.json</code> file with the correct SDK band you’ll be building MAUI apps.</strong> For example, in the case of this guide, you’re working with .NET 7. So your <code>global.json</code> file should look like the following:</p>\n\n<pre><code class=\"language-json\">{\n  \"sdk\": {\n    \"version\": \"7.0.0\",\n    \"rollForward\": \"latestMajor\",\n    \"allowPrerelease\": false\n  }\n}\n</code></pre>\n\n<p>If you only have one SDK installed, you can skip this file. However, remember that you’ll need this file if you install any other SDKs.</p>\n\n<p>Workloads include all the necessary assemblies and MSBuild targets that make building a mobile application possible for a given platform. For example, most developers will want to target iOS, Android, and Mac Catalyst.</p>\n\n<p>Run the following commands in a new terminal. Note you’ll need elevated administrator permissions to complete this step.</p>\n\n<pre><code>sudo dotnet workload install maui\nsudo dotnet workload install maui-android maui-ios maui-maccatalyst\nsudo dotnet workload install ios android maccatalyst\nsudo dotnet workload install wasm-tools\n</code></pre>\n\n<p>Once you install all these workloads, you can double-check that everything went accordingly using the command <code>dotnet workload list</code>. You can also find other workloads using the dotnet workload search command.</p>\n\n<h2 id=\"installing-microsoft-openjdk\">Installing Microsoft OpenJDK</h2>\n\n<p>You’ll need an OpenJDK installation to build and work with Android. I’ve found that <a href=\"https://learn.microsoft.com/en-us/java/openjdk/download#openjdk-11\">Microsoft’s OpenJDK 11.0.18 LTS works best with MAUI</a>. <a href=\"https://learn.microsoft.com/en-us/java/openjdk/download#openjdk-11\">You can find the download here</a>.</p>\n\n<p>You might need to set the <code>JAVA_HOME</code> environment variable on your environment to point to the location of the newly installed OpenJDK. This step is optional if you use an IDE like <a href=\"https://jetbrains.com/rider\">JetBrains Rider</a>.</p>\n\n<p>This next step is to get Android SDKs configured.</p>\n\n<h2 id=\"installing-android-sdks\">Installing Android SDKs</h2>\n\n<p>This next step requires Android Studio, or if you’re a JetBrains Rider user, these same features also exist in that product. We’ll be using JetBrains products to install Android SDKs.</p>\n\n<p>Note to JetBrains Rider users, you’ll need to <a href=\"https://plugins.jetbrains.com/plugin/12056-rider-xamarin-android-support\">install the Rider Xamarin Android Support plugin</a>.</p>\n\n<p>As a JetBrains Rider user, you’ll want to check your environments tab to ensure all environments are installed or recognized.</p>\n\n<p><img src=\"https://res.cloudinary.com/abuhakmeh/image/fetch/c_limit,f_auto,q_auto,w_800/https://khalidabuhakmeh.com/assets/images/posts/maui-dev-enviornment-dotnet/jetbrains-rider-environments.png\" srcset=\"https://res.cloudinary.com/abuhakmeh/image/fetch/c_limit,f_auto,q_auto,w_320/https://khalidabuhakmeh.com/assets/images/posts/maui-dev-enviornment-dotnet/jetbrains-rider-environments.png 320w, https://res.cloudinary.com/abuhakmeh/image/fetch/c_limit,f_auto,q_auto,w_540/https://khalidabuhakmeh.com/assets/images/posts/maui-dev-enviornment-dotnet/jetbrains-rider-environments.png 540w, https://res.cloudinary.com/abuhakmeh/image/fetch/c_limit,f_auto,q_auto,w_760/https://khalidabuhakmeh.com/assets/images/posts/maui-dev-enviornment-dotnet/jetbrains-rider-environments.png 760w, https://res.cloudinary.com/abuhakmeh/image/fetch/c_limit,f_auto,q_auto,w_980/https://khalidabuhakmeh.com/assets/images/posts/maui-dev-enviornment-dotnet/jetbrains-rider-environments.png 980w, https://res.cloudinary.com/abuhakmeh/image/fetch/c_limit,f_auto,q_auto,w_1200/https://khalidabuhakmeh.com/assets/images/posts/maui-dev-enviornment-dotnet/jetbrains-rider-environments.png 1200w\" sizes=\"100vw\" alt=\"JetBrains Rider's Environment Tab showing all installed or recognized requirments\" loading=\"lazy\" width=\"2104\" height=\"1400\" crossorigin=\"anonymous\" /></p>\n\n<p>Next, under the Android section in JetBrains Rider (or Android Studio), you’ll want to install the SDK that matches your MAUI install. As of writing this post, that version is 33. Find the Install new button and walk through the installation.</p>\n\n<p>Once completed, go back to the Android section and choose SDK Components. Here, you’ll select the following:</p>\n\n<ul>\n  <li><strong>Android 13.0 (Tiramasu)</strong> under SDK Platforms</li>\n  <li><strong>NDK (Side-by-side)</strong> under SDK Tools</li>\n</ul>\n\n<p>When downloads and installation are complete, finish this process by ensuring the paths are set correctly on your Android settings page. This dialog is also where you’ll set the path to the OpenJDK 11 install from earlier.</p>\n\n<p><img src=\"https://res.cloudinary.com/abuhakmeh/image/fetch/c_limit,f_auto,q_auto,w_800/https://khalidabuhakmeh.com/assets/images/posts/maui-dev-enviornment-dotnet/android-settings-tab.png\" srcset=\"https://res.cloudinary.com/abuhakmeh/image/fetch/c_limit,f_auto,q_auto,w_320/https://khalidabuhakmeh.com/assets/images/posts/maui-dev-enviornment-dotnet/android-settings-tab.png 320w, https://res.cloudinary.com/abuhakmeh/image/fetch/c_limit,f_auto,q_auto,w_540/https://khalidabuhakmeh.com/assets/images/posts/maui-dev-enviornment-dotnet/android-settings-tab.png 540w, https://res.cloudinary.com/abuhakmeh/image/fetch/c_limit,f_auto,q_auto,w_760/https://khalidabuhakmeh.com/assets/images/posts/maui-dev-enviornment-dotnet/android-settings-tab.png 760w, https://res.cloudinary.com/abuhakmeh/image/fetch/c_limit,f_auto,q_auto,w_980/https://khalidabuhakmeh.com/assets/images/posts/maui-dev-enviornment-dotnet/android-settings-tab.png 980w, https://res.cloudinary.com/abuhakmeh/image/fetch/c_limit,f_auto,q_auto,w_1200/https://khalidabuhakmeh.com/assets/images/posts/maui-dev-enviornment-dotnet/android-settings-tab.png 1200w\" sizes=\"100vw\" alt=\"Android Settings tab\" loading=\"lazy\" width=\"2104\" height=\"1400\" crossorigin=\"anonymous\" /></p>\n\n<h2 id=\"simulators-and-emulators\">Simulators and Emulators</h2>\n\n<p>For iOS, you’ll want to start your simulator at least once before trying any MAUI development. I recommend this step because the first time you boot an iOS simulator, it takes a minute to prepare everything. Start XCode, use the settings menu <code>XCode &gt; Open Developer Tool</code>, and select “Simulator”.</p>\n\n<p>In JetBrains Rider, this is the time to set up a new Android device emulator. Search for Device Manager and set up a new device. You can also choose to attach a physical Android device. That’s up to you.</p>\n\n<p><img src=\"https://res.cloudinary.com/abuhakmeh/image/fetch/c_limit,f_auto,q_auto,w_800/https://khalidabuhakmeh.com/assets/images/posts/maui-dev-enviornment-dotnet/jetbrains-rider-device-manager.png\" srcset=\"https://res.cloudinary.com/abuhakmeh/image/fetch/c_limit,f_auto,q_auto,w_320/https://khalidabuhakmeh.com/assets/images/posts/maui-dev-enviornment-dotnet/jetbrains-rider-device-manager.png 320w, https://res.cloudinary.com/abuhakmeh/image/fetch/c_limit,f_auto,q_auto,w_540/https://khalidabuhakmeh.com/assets/images/posts/maui-dev-enviornment-dotnet/jetbrains-rider-device-manager.png 540w, https://res.cloudinary.com/abuhakmeh/image/fetch/c_limit,f_auto,q_auto,w_760/https://khalidabuhakmeh.com/assets/images/posts/maui-dev-enviornment-dotnet/jetbrains-rider-device-manager.png 760w, https://res.cloudinary.com/abuhakmeh/image/fetch/c_limit,f_auto,q_auto,w_980/https://khalidabuhakmeh.com/assets/images/posts/maui-dev-enviornment-dotnet/jetbrains-rider-device-manager.png 980w, https://res.cloudinary.com/abuhakmeh/image/fetch/c_limit,f_auto,q_auto,w_1200/https://khalidabuhakmeh.com/assets/images/posts/maui-dev-enviornment-dotnet/jetbrains-rider-device-manager.png 1200w\" sizes=\"100vw\" alt=\"JetBrains Rider Device Manager showing Android Device\" loading=\"lazy\" width=\"2522\" height=\"1650\" crossorigin=\"anonymous\" /></p>\n\n<p>You’ll need these virtual devices for testing your MAUI applications.</p>\n\n<h2 id=\"your-first-maui-app\">Your First MAUI App</h2>\n\n<p>Phew! We’re at the finish line! Yay! Hopefully, you followed every step meticulously, and I didn’t miss anything obvious. But, honestly, this is a lot to take in, especially if it’s your first attempt at mobile app development.</p>\n\n<p>Now you can create a new MAUI app and run it in the environment of your choice.</p>\n\n<p><img src=\"https://res.cloudinary.com/abuhakmeh/image/fetch/c_limit,f_auto,q_auto,w_800/https://khalidabuhakmeh.com/assets/images/posts/maui-dev-enviornment-dotnet/maui-running-ios.png\" srcset=\"https://res.cloudinary.com/abuhakmeh/image/fetch/c_limit,f_auto,q_auto,w_320/https://khalidabuhakmeh.com/assets/images/posts/maui-dev-enviornment-dotnet/maui-running-ios.png 320w, https://res.cloudinary.com/abuhakmeh/image/fetch/c_limit,f_auto,q_auto,w_540/https://khalidabuhakmeh.com/assets/images/posts/maui-dev-enviornment-dotnet/maui-running-ios.png 540w, https://res.cloudinary.com/abuhakmeh/image/fetch/c_limit,f_auto,q_auto,w_760/https://khalidabuhakmeh.com/assets/images/posts/maui-dev-enviornment-dotnet/maui-running-ios.png 760w, https://res.cloudinary.com/abuhakmeh/image/fetch/c_limit,f_auto,q_auto,w_980/https://khalidabuhakmeh.com/assets/images/posts/maui-dev-enviornment-dotnet/maui-running-ios.png 980w, https://res.cloudinary.com/abuhakmeh/image/fetch/c_limit,f_auto,q_auto,w_1200/https://khalidabuhakmeh.com/assets/images/posts/maui-dev-enviornment-dotnet/maui-running-ios.png 1200w\" sizes=\"100vw\" alt=\"Running iOS simulator showing a MAUI app and JetBrains Rider\" loading=\"lazy\" width=\"2964\" height=\"2160\" crossorigin=\"anonymous\" /></p>\n\n<p>If you get build errors, don’t panic. Remember, you need a <code>global.json</code> file to tie your new solution to the correct SDK version band. Scroll back up and use the same <code>global.json</code> file from the previous section.</p>\n\n<h2 id=\"conclusion\">Conclusion</h2>\n\n<p>Hopefully, I covered every step necessary to build iOS and Android MAUI apps in your development environment. Of course, if you’re on Windows, you might have different challenges, but most of this guide still applies to you for Android development. Of course, you’ll still need Windows workloads to target MAUI for Windows. Use the <code>dotnet workload search</code> to find the appropriate packages.</p>\n\n<p>Anyways, if you found this post helpful, I’m happy for you. You got a working MAUI environment, and that’s no tiny feet. So take this time to bask in your success. You deserve it.</p>\n\n<p>If you need help, you can find me on Mastodon or contact me through the form on this site. Cheers :)</p>\n\n",
      "Content": null,
      "Language": null,
      "Link": "https://khalidabuhakmeh.com/dotnet-maui-development-environment-set-up-walkthrough"
    },
    {
      "FeedId": "https://khalidabuhakmeh.com/feed.xml",
      "ItemId": "https://khalidabuhakmeh.com/solving-dotnet-json-deserialization-issues",
      "Title": "Solving .NET JSON Deserialization Issues",
      "PublishDate": "2023-03-14T00:00:00+00:00",
      "Summary": "<p>What is more frustrating than a sem-working solution, am I right? Unfortunately, when it comes to JSON serialization, that can mean getting some of the data sometimes. You’re left scratching your head and asking, “Why is my data not coming through correctly?”</p>\n\n<p>In this post, we’ll explore the different <code>JsonSerializerOptions</code> you might run into with .NET and how you can predict the behavior of your serialization. Let’s get started.</p>\n\n<!--more-->\n\n<h2 id=\"starting-with-plain-old-json\">Starting With Plain-old JSON</h2>\n\n<p>When working with JSON, two parties are typically involved: The producer and the consumer. Unfortunately, more often than not, when running into JSON deserialization issues, we often find that we misunderstood the producer’s JSON format and likely misconfigured something on our end. Let’s look at an example response from a hypothetical JSON API.</p>\n\n<pre><code class=\"language-json\">[\n   {\n      \"name\": \"Khalid Abuhakmeh\",\n      \"hobby\" : \"Video Games\"\n   },\n   {\n      \"name\": \"Maarten Balliauw\",\n      \"hobby\" : \"Gardening\" \n   }\n]\n</code></pre>\n\n<p>There are a few characteristics to note about this response.</p>\n\n<ol>\n  <li>The top-level element is an array.</li>\n  <li>There are multiple elements in the array. Two, to be exact.</li>\n  <li>All fields are quoted.</li>\n  <li>All field names are camel-cased.</li>\n</ol>\n\n<p>To process this JSON response, we need to set up our serialization options to match the JSON serialization choices of our producer. In the next section, let’s look at ways to fail and succeed at deserialization.</p>\n\n<h2 id=\"attempting-to-deserialize-json\">Attempting to Deserialize JSON</h2>\n\n<p>The first likely step folks will take to use the <code>JsonSerializer</code> class as is, with a straight call to <code>Deserialize&lt;T&gt;</code>.</p>\n\n<pre><code class=\"language-csharp\">var @default = JsonSerializer.Deserialize&lt;Person[]&gt;(json);\nConsole.WriteLine($\"default: {@default?[0]}\");\n</code></pre>\n\n<p>I’m sad to say this is <strong>incorrect</strong>, as the default serializer options work from “PascalCase”. So the result of this deserialization will produce entities, but their values will be null or empty.</p>\n\n<pre><code class=\"language-console\">default: Person { Name = , Hobby =  }\n</code></pre>\n\n<p>Oops! Where are the <code>Name</code> and the <code>Hobby</code>? Well, it turns out that we have a naming mismatch. So how do we fix this issue? There are a few options.</p>\n\n<p>The first way to fix this issue is to use a different set of options for the <code>JsonSerializer</code>. For example, we can use the <code>JsonSerializerDefaults</code> class to choose the <code>Web</code> option.</p>\n\n<pre><code class=\"language-csharp\">// camelCase\nvar web = JsonSerializer.Deserialize&lt;Person[]&gt;(json,\n    new JsonSerializerOptions(JsonSerializerDefaults.Web));\nConsole.WriteLine($\"web: {web?[0]}\");\n</code></pre>\n\n<p>Choosing the <code>JsonSerializerDefaults.Web</code> value for <code>JsonSerializerOptions</code> defaults to the camel case for all JSON field names. Running the code above, we have corrected our initial issues.</p>\n\n<pre><code class=\"language-console\">web: Person { Name = Khalid Abuhakmeh, Hobby = Video Games }\n</code></pre>\n\n<p>What if we have an unreliable producer, and they may inadvertently change their mind about casing? Well, there’s one more option.</p>\n\n<pre><code class=\"language-csharp\">// any Case\nvar any = JsonSerializer.Deserialize&lt;Person[]&gt;(json,\n    new JsonSerializerOptions\n    {\n        PropertyNameCaseInsensitive = true\n    });\nConsole.WriteLine($\"case insensitive: {any?[0]}\");\n</code></pre>\n\n<p>This option will ignore casing on field names and map accordingly but be warned. Ignoring the case sensitivity of names will cause issues if the producer uses the same name for different fields. Running the code sample, we get the following result.</p>\n\n<pre><code class=\"language-console\">case insensitive: Person { Name = Khalid Abuhakmeh, Hobby = Video Games }\n</code></pre>\n\n<p>Cool! The solution still works, but there’s still one more solution to look over.</p>\n\n<p>You’ll likely use the <code>HttpClient</code> class when working with JSON APIs. The <code>HttpClient</code> uses the <code>JsonSerializerDefaults.Web</code> options internally, so you don’t need any additional changes if you’re calling a camel-cased API.</p>\n\n<pre><code class=\"language-csharp\">// stubbing the web request to return the JSON\nvar httpClient = new HttpClient(new StubHandler(json));\n\n// uses JsonSerializerOptions(JsonSerializerDefaults.Web) by default\nvar response = await httpClient.GetFromJsonAsync&lt;Person[]&gt;(\"https://example.com\");\nConsole.WriteLine($\"http client: {response?[0]}\");\n</code></pre>\n\n<p>Running this code, we see the results we expect.</p>\n\n<pre><code class=\"language-console\">http client: Person { Name = Khalid Abuhakmeh, Hobby = Video Games }\n</code></pre>\n\n<p>You can also pass in any options to override the default behavior of the <code>GetFromJsonAsync</code> method.</p>\n\n<pre><code class=\"language-csharp\">var otherResponse = await httpClient.GetFromJsonAsync&lt;Person[]&gt;(\n    \"https://example.com\",\n    new JsonSerializerOptions\n    {\n        PropertyNameCaseInsensitive = true\n    });\nConsole.WriteLine($\"http client w/ options: {otherResponse?[0]}\");\n</code></pre>\n\n<p>Running this sample, we still see the correct results.</p>\n\n<pre><code class=\"language-console\">http client w/ options: Person { Name = Khalid Abuhakmeh, Hobby = Video Games }\n</code></pre>\n\n<p>So, there we have it—a run-down of solving your serialization/deserialization issues when working with existing JSON APIs. I’ve included the complete solution below if you’d like to work with this sample.</p>\n\n<p>As always, thanks for reading and sharing my posts.</p>\n\n<hr />\n\n<pre><code class=\"language-csharp\">using System.Net;\nusing System.Net.Http.Json;\nusing System.Text.Json;\n\n// language=json\nvar json = \"\"\"\n[\n   {\n      \"name\": \"Khalid Abuhakmeh\",\n      \"hobby\" : \"Video Games\"\n   },\n   {\n      \"name\": \"Maarten Balliauw\",\n      \"hobby\" : \"Gardening\" \n   }\n]\n\"\"\";\n\n// PascalCase\nvar @default = JsonSerializer.Deserialize&lt;Person[]&gt;(json);\nConsole.WriteLine($\"default: {@default?[0]}\");\n\n// CamelCase\nvar web = JsonSerializer.Deserialize&lt;Person[]&gt;(json,\n    new JsonSerializerOptions(JsonSerializerDefaults.Web));\nConsole.WriteLine($\"web: {web?[0]}\");\n\n// any Case\nvar any = JsonSerializer.Deserialize&lt;Person[]&gt;(json,\n    new JsonSerializerOptions\n    {\n        PropertyNameCaseInsensitive = true\n    });\nConsole.WriteLine($\"case insensitive: {any?[0]}\");\n\n// stubbing the web request to return the JSON\nvar httpClient = new HttpClient(new StubHandler(json));\n\n// uses JsonSerializerOptions(JsonSerializerDefaults.Web) by default\nvar response = await httpClient.GetFromJsonAsync&lt;Person[]&gt;(\"https://example.com\");\nConsole.WriteLine($\"http client: {response?[0]}\");\n\nvar otherResponse = await httpClient.GetFromJsonAsync&lt;Person[]&gt;(\n    \"https://example.com\",\n    new JsonSerializerOptions\n    {\n        PropertyNameCaseInsensitive = true\n    });\nConsole.WriteLine($\"http client w/ options: {otherResponse?[0]}\");\n\n// ReSharper disable once ClassNeverInstantiated.Global\npublic record Person(string Name, string Hobby);\n\npublic class StubHandler : DelegatingHandler\n{\n    private readonly string _response;\n\n    public StubHandler(string response)\n    {\n        _response = response;\n    }\n\n    protected override Task&lt;HttpResponseMessage&gt; SendAsync(\n        HttpRequestMessage request,\n        CancellationToken cancellationToken)\n    {\n        return Task.FromResult(new HttpResponseMessage(HttpStatusCode.OK)\n        {\n            Content = new StringContent(_response),\n            RequestMessage = request\n        });\n    }\n}\n</code></pre>\n",
      "Content": null,
      "Language": null,
      "Link": "https://khalidabuhakmeh.com/solving-dotnet-json-deserialization-issues"
    },
    {
      "FeedId": "https://khalidabuhakmeh.com/feed.xml",
      "ItemId": "https://khalidabuhakmeh.com/validating-connection-strings-on-dotnet-startup",
      "Title": "Validating Connection Strings on .NET Startup",
      "PublishDate": "2023-03-07T00:00:00+00:00",
      "Summary": "<p>There exist extension points in .NET that allow you to verify the starting state of your application. Validating configuration can be helpful when you know that without certain elements, there’s no reason to start the application. One of those configuration values is connection strings, but there’s a catch. You may have set the value in the configuration, but the value either is to a non-existent resource or the resource is inaccessible.</p>\n\n<p>In this short post, we’ll write an extension method and a class that will allow you to test your database connection on startup and fail the application if you can’t connect.</p>\n\n<!--more-->\n\n<h2 id=\"the-initial-host-configuration\">The Initial Host Configuration</h2>\n\n<p>Let’s look at the final solution and work our way backward. We have our application host, and we register a connection string validator. Our validation will get the connection string, determine the provider, and attempt a connection. If successful, the app starts. If unsuccessful, the app exits.</p>\n\n<pre><code class=\"language-csharp\">using System.Data.Common;\nusing Microsoft.Data.SqlClient;\nusing Microsoft.Data.Sqlite;\nusing Microsoft.Extensions.Options;\nusing Microsoft.IdentityModel.Tokens;\nusing WorkerServiceDatabase;\n\nIHost host = Host.CreateDefaultBuilder(args)\n    .ConfigureServices(services =&gt;\n    {\n        services\n            .ValidateConnectionStrings()\n            .ValidateOnStart();\n        \n        services.AddHostedService&lt;Worker&gt;();\n    })\n    .Build();\n\nhost.Run();\n</code></pre>\n\n<p>Neat, let’s see what challenges we have to overcome.</p>\n\n<h2 id=\"the-connectionstring-configuration\">The ConnectionString Configuration</h2>\n\n<p>.NET allows you to bind a configuration to a strongly-typed object, but in the case of <code>ConnectionStrings</code>, that’s a well-known JSON section. So how do we accomplish that? Well, let’s have a look at our working configuration.</p>\n\n<pre><code class=\"language-json\">{\n  \"Logging\": {\n    \"LogLevel\": {\n      \"Default\": \"Information\",\n      \"Microsoft.Hosting.Lifetime\": \"Information\"\n    }\n  },\n  \"ConnectionStrings\": {\n      \"Sqlite\": \"Data Source=database.db\",\n      \"SqlServer\": \"Data Source=localhost,11433;Initial Catalog=Northwind;User Id=sa;Password=Pass123!;Encrypt=false\"\n    }\n}\n</code></pre>\n\n<p><code>ConnectionStrings</code> looks like a JSON Dictionary, so we can bind to a class that inherits from <code>Dictionary&lt;string,string&gt;</code>.</p>\n\n<pre><code class=\"language-csharp\">public class ConnectionStrings\n    : Dictionary&lt;string,string&gt;\n{}\n</code></pre>\n\n<p>Awesome, but there’s a problem. None of our connection strings declare the database provider. So here’s the first decision you’ll want to make for your use case: “How do you map connection string names to their database providers?”</p>\n\n<p>My approach to this issue was explicitly mapping the keys to a database provider in my <code>ConnectionStrings</code> constructor.</p>\n\n<pre><code class=\"language-csharp\">public class ConnectionStrings\n    : Dictionary&lt;string,string&gt;\n{\n    public ConnectionStrings()\n    {\n        // these are the key names\n        DbProviderFactories.RegisterFactory(\"Sqlite\", SqliteFactory.Instance);\n        DbProviderFactories.RegisterFactory(\"SqlServer\", SqlClientFactory.Instance);\n    }\n}\n</code></pre>\n\n<p>These database factories come from the NuGet packages of <code>Microsoft.Data.SqlClient</code> and <code>Microsoft.Data.Sqlite</code>. You’ll need to add other database factories for providers like PostgreSQL, MySQL, or Oracle.</p>\n\n<p>Next, let’s write our <code>Validate</code> method. This method will create a new connection using our connection strings and then attempt to open a connection to the database.</p>\n\n<pre><code class=\"language-csharp\">public class ConnectionStrings\n    : Dictionary&lt;string,string&gt;\n{\n    public ConnectionStrings()\n    {\n        // these are the key names\n        DbProviderFactories.RegisterFactory(\"Sqlite\", SqliteFactory.Instance);\n        DbProviderFactories.RegisterFactory(\"SqlServer\", SqlClientFactory.Instance);\n    }\n    \n    public bool Validate()\n    {\n        // can't inject logger :(\n        var logger = LoggerFactory\n            .Create(cfg =&gt; cfg.AddConsole().AddDebug())\n            .CreateLogger(\"ConnectionStrings\");\n        \n        List&lt;Exception&gt; errors = new();\n        foreach (var (key, connectionString) in this)\n        {\n            try\n            {\n                var factory = DbProviderFactories.GetFactory(key);\n                using var connection = factory.CreateConnection();\n                if (connection is null) {\n                    throw new Exception($\"\\\"{key}\\\" did not have a valid database provider registered\");\n                }\n\n                connection.ConnectionString = connectionString;\n                connection.Open();\n            }\n            catch (Exception e)\n            {\n                var message = $\"Could not connect to \\\"{key}\\\".\";\n                logger.LogError(message);\n                errors.Add(new Exception(message, e));\n            }\n        }\n\n        return errors.IsNullOrEmpty();\n    }\n}\n</code></pre>\n\n<p>The validate method loops over the values in our <code>ConnectionString</code> section, finding the <code>DbProviderFactory</code> and creating a connection.</p>\n\n<p>I had to create a new logger factory so you could see the failed connection, but you could remove that if you want an all-or-nothing approach.</p>\n\n<p>We have our class; now let’s wire it up.</p>\n\n<h2 id=\"the-connectionstring-validation-method\">The ConnectionString Validation Method</h2>\n\n<p>This section is pretty straightforward, we’ll write an extension method to bind our <code>ConnectionStrings</code> configuration section to our <code>ConnectionStrings</code> class and call the validate method.</p>\n\n<pre><code class=\"language-csharp\">public static class ConnectionStringExtensions\n{\n    public static OptionsBuilder&lt;ConnectionStrings&gt; \n        ValidateConnectionStrings(this IServiceCollection services)\n    {\n        return services\n            .AddOptions&lt;ConnectionStrings&gt;()\n            .BindConfiguration(\"ConnectionStrings\")\n            .Validate(c =&gt; c.Validate(), \"Could not connect to 1 or more databases.\");\n    }\n}\n</code></pre>\n\n<p>Easy peasy.</p>\n\n<h2 id=\"the-complete-solution\">The Complete Solution</h2>\n\n<p>So how does this all look in one file? Where here it is.</p>\n\n<pre><code class=\"language-csharp\">using System.Data.Common;\nusing Microsoft.Data.SqlClient;\nusing Microsoft.Data.Sqlite;\nusing Microsoft.Extensions.Options;\nusing Microsoft.IdentityModel.Tokens;\nusing WorkerServiceDatabase;\n\nIHost host = Host.CreateDefaultBuilder(args)\n    .ConfigureServices(services =&gt;\n    {\n        services \n            // validate connection strings\n            .ValidateConnectionStrings()\n            .ValidateOnStart();\n        \n        services.AddHostedService&lt;Worker&gt;();\n    })\n    .Build();\n\nhost.Run();\n\npublic static class ConnectionStringExtensions\n{\n    public static OptionsBuilder&lt;ConnectionStrings&gt; \n        ValidateConnectionStrings(this IServiceCollection services)\n    {\n        return services\n            .AddOptions&lt;ConnectionStrings&gt;()\n            .BindConfiguration(\"ConnectionStrings\")\n            .Validate(c =&gt; c.Validate(), \"Could not connect to 1 or more databases.\");\n    }\n}\n\npublic class ConnectionStrings\n    : Dictionary&lt;string,string&gt;\n{\n    public ConnectionStrings()\n    {\n        // these are the key names\n        DbProviderFactories.RegisterFactory(\"Sqlite\", SqliteFactory.Instance);\n        DbProviderFactories.RegisterFactory(\"SqlServer\", SqlClientFactory.Instance);\n    }\n    \n    public bool Validate()\n    {\n        // can't inject logger :(\n        var logger = LoggerFactory\n            .Create(cfg =&gt; cfg.AddConsole().AddDebug())\n            .CreateLogger(\"ConnectionStrings\");\n        \n        List&lt;Exception&gt; errors = new();\n        foreach (var (key, connectionString) in this)\n        {\n            try\n            {\n                var factory = DbProviderFactories.GetFactory(key);\n                using var connection = factory.CreateConnection();\n                if (connection is null) {\n                    throw new Exception($\"\\\"{key}\\\" did not have a valid database provider registered\");\n                }\n\n                connection.ConnectionString = connectionString;\n                connection.Open();\n            }\n            catch (Exception e)\n            {\n                var message = $\"Could not connect to \\\"{key}\\\".\";\n                logger.LogError(message);\n                errors.Add(new Exception(message, e));\n            }\n        }\n\n        return errors.IsNullOrEmpty();\n    }\n}\n</code></pre>\n\n<p>There you have it.</p>\n\n<p><strong>Important. The validation process in .NET uses a <code>ValidationHostedService</code>, so it’s important that if you have any hosted service that relies on your configuration, then you should register them after your validation runs. If you don’t you’ll have your hosted service start before validation is completed.</strong></p>\n\n<h2 id=\"summary\">Summary</h2>\n\n<p>Using .NET configuration extension points, we can validate the most critical resources. For example, using the <code>DbProviderFactories</code> class, we can register and support many database providers. However, you must make a design choice, as the <code>ConnectionStrings</code> section in the configuration doesn’t allow the provider to be set. Ultimately, my approach wasn’t too bad, but it could be better. Also, I found that the <code>ConnectionStrings</code> class instance must have a parameterless constructor and could not inject an instance of <code>ILogger</code>, which is why I created my own. If you are fine with a “pass/fail” approach, feel free to exclude the logger, which might lead to frustrating debugging to determine which connection string failed.</p>\n\n<p>Thanks for reading, and I hope you enjoyed this post.</p>\n",
      "Content": null,
      "Language": null,
      "Link": "https://khalidabuhakmeh.com/validating-connection-strings-on-dotnet-startup"
    },
    {
      "FeedId": "https://khalidabuhakmeh.com/feed.xml",
      "ItemId": "https://khalidabuhakmeh.com/speed-up-aspnet-core-json-apis-with-source-generators",
      "Title": "Speed Up ASP.NET Core JSON APIs with Source Generators",
      "PublishDate": "2023-02-28T00:00:00+00:00",
      "Summary": "<p>Building applications is a virtuous circle of learning about problems, finding solutions, and optimizing. I find optimizing an application the most fun, as it can help you squeeze performance out from surprising places.</p>\n\n<p>In this post, we’ll see how you can use the latest JSON source generators shipped in .NET 6 to improve your JSON API performance and increase your response throughput.</p>\n\n<!--more-->\n\n<p>Like many source generators in .NET, the <strong>System.Text.Json</strong> source generator enhances an existing partial class with essential elements required for serialization. Those elements include:</p>\n\n<ul>\n  <li>A <code>JsonTypeInfo&lt;T&gt;</code> for each serializable entity in your object graph.</li>\n  <li>A default instance of a <code>JsonSerializerContext</code>.</li>\n  <li><code>JsonSerialiazerOptions</code> for formatting JSON on serialization.</li>\n</ul>\n\n<p>Don’t worry; it’s not as complex as it sounds. Let’s first start with our entity.</p>\n\n<pre><code class=\"language-csharp\">public record Person(\n    string Name,\n    bool IsCool = true,\n    Person? Friend = null\n);\n</code></pre>\n\n<p>We want to optimize the serialization of this record. Since we know structurally what this entity looks like, we can create a rigid and streamlined serializer, which should improve overall performance. Therefore, we first define a <code>PersonSerializationContext</code> derived from <code>JsonSerialzerContext</code>.</p>\n\n<pre><code class=\"language-csharp\">[JsonSourceGenerationOptions(\n    WriteIndented = true,\n    DefaultIgnoreCondition = JsonIgnoreCondition.WhenWritingNull,\n    PropertyNamingPolicy = JsonKnownNamingPolicy.CamelCase)]\n[JsonSerializable(typeof(Person))]\npublic partial class PersonSerializationContext \n    : JsonSerializerContext {}\n</code></pre>\n\n<p>Essential elements of this definition include:</p>\n\n<p>The <code>partial</code> keyword. The source generator will create the implementation of our class for us.\nThe <code>JsonSourceGenerationOptions</code> attribute allows us to customize serialization with the correct casing, null handling, and much more. Don’t forget this if you have specific serialization needs.\nThe <code>JsonSerializable</code> attribute for non-standard types during serialization. Each attribute of this kind will produce a <code>JsonTypeInfo</code> property on our context class.</p>\n\n<p>Cool, let’s see how we can use our new <code>PersonSerializationContext</code>.</p>\n\n<pre><code class=\"language-csharp\">using System.Text.Json;\nusing System.Text.Json.Serialization;\n\nvar person = new Person(\"Khalid\", Friend: new(\"Maarten\"));\n\nvar json =\n    JsonSerializer.Serialize(\n        person,\n        PersonSerializationContext.Default.Person);\n\nConsole.WriteLine(json);\n</code></pre>\n\n<p>Running our application, we see the desired output. You’ll note that the result uses camel casing and that serialization did not output null values.</p>\n\n<pre><code class=\"language-json\">{\n  \"name\": \"Khalid\",\n  \"isCool\": true,\n  \"friend\": {\n    \"name\": \"Maarten\",\n    \"isCool\": true\n  }\n}\n</code></pre>\n\n<p>So, how do you take advantage of your new <code>PersonSerializationContext</code> in an ASP.NET Core application? Well, it’s pretty straightforward.</p>\n\n<p>Inside of an existing Minimal APIs endpoint, you’ll need to use the <code>Results.Json</code> method and pass it your generated <code>Options</code> found on the <code>Default</code> property.</p>\n\n<pre><code class=\"language-csharp\">using System.Text.Json.Serialization;\n\nvar builder = WebApplication.CreateBuilder(args);\nvar app = builder.Build();\n\napp.MapGet(\"/\", () =&gt; \"Hello World!\");\n\napp.MapGet(\"person\", () =&gt; \n    Results.Json(\n        new Person(\"Khalid\", Friend: new(\"Maarten\")), \n        PersonSerializationContext.Default.Options));\n\napp.Run();\n\n[JsonSourceGenerationOptions(\n    WriteIndented = true,\n    DefaultIgnoreCondition = JsonIgnoreCondition.WhenWritingNull,\n    PropertyNamingPolicy = JsonKnownNamingPolicy.CamelCase)]\n[JsonSerializable(typeof(Person))]\npublic partial class PersonSerializationContext \n    : JsonSerializerContext {}\n\npublic record Person(\n    string Name,\n    bool IsCool = true,\n    Person? Friend = null\n);\n</code></pre>\n\n<p>Running the ASP.NET Core application and hitting the endpoint produces the expected results, the same as we saw before in our console application.</p>\n\n<pre><code class=\"language-text\">// 20230210114342\n// http://localhost:5115/person\n\n{\n  \"name\": \"Khalid\",\n  \"isCool\": true,\n  \"friend\": {\n    \"name\": \"Maarten\",\n    \"isCool\": true\n  }\n}\n</code></pre>\n\n<h2 id=\"conclusion\">Conclusion</h2>\n\n<p>While hearing the phrase “source generators” might be scary at first, this optimization can improve your APIs’ performance with minimal effort. A few lines of code and some refactoring, and you’re off to the races.</p>\n\n<p>If you’re going to use this technique, I recommend finding your application’s hottest paths and starting there. Then measure to see what kind of serialization overhead you’ve reduced.</p>\n\n<p>As always, thanks for reading and sharing my posts with your colleagues. If you have any questions, please feel free to reach out.</p>\n",
      "Content": null,
      "Language": null,
      "Link": "https://khalidabuhakmeh.com/speed-up-aspnet-core-json-apis-with-source-generators"
    },
    {
      "FeedId": "https://khalidabuhakmeh.com/feed.xml",
      "ItemId": "https://khalidabuhakmeh.com/combining-11ty-static-site-generator-with-aspnet-core",
      "Title": "Combining 11ty Static Site Generator with ASP.NET Core",
      "PublishDate": "2023-02-21T00:00:00+00:00",
      "Summary": "<p>I love many things about static site generators, but I mainly enjoy the challenge of building a fast user experience, given development time constraints. The constraints force me to be mindful of every new feature I add, the content I want to present, and the resources I use to accomplish all my goals. I believe that most, if not all, experiences on the web could benefit from some element of static site generation. While that may or may not be true, I believe in the inverse statement. Some static sites could benefit from a dynamic backend to provide unique and personalized experiences.</p>\n\n<p>This post will explore adding 11ty, one of my favorite static site generator tools, to an ASP.NET Core application. We’ll see how this approach will allow us to build out static content while taking advantage of a dynamic and programmable hosting platform. Let’s get started.</p>\n\n<!--more-->\n\n<h2 id=\"setting-up-an-aspnet-core-web-project-for-11ty\">Setting up an ASP.NET Core Web Project for 11ty</h2>\n\n<p>Let’s start with an ASP.NET Core <strong>Empty</strong> template, a barebones solution. We’ll be adding a few files and folders. First, let’s create a new <code>site</code> folder. This directory will hold all our static content that 11ty will process into static files.</p>\n\n<p>The next step is creating a <code>package.json</code> file to manage our NPM packages. Finally, we’ll create a build script to process our static content. Here are the contents of <code>/site/package.json</code>.</p>\n\n<pre><code class=\"language-json\">{\n  \"name\": \"site\",\n  \"private\": true,\n  \"scripts\": {\n    \"build\": \"node node_modules/.bin/eleventy\"\n  },\n  \"devDependencies\": {\n    \"@11ty/eleventy\": \"^2.0.0-beta.3\"\n  }\n}\n</code></pre>\n\n<p>From here, we can run <code>npm install</code> to install all the development dependencies. Feel free to add any other NPM packages for your static site. 11ty has a lot of great options too, so I imagine many folks will.</p>\n\n<p>The next step is to add an <code>eleventy.config.js</code> file, which will help the 11ty process copy assets to our destination of <code>wwwroot</code>.</p>\n\n<pre><code class=\"language-javascript\">module.exports = function (eleventyConfig) {\n    // copy images, css, and js from /assets\n    eleventyConfig.addPassthroughCopy(\"./assets\")\n    return {\n        dir: {\n            passthroughFileCopy: true,\n            // write to aspnet.core output directory\n            output: \"../wwwroot\"\n        }\n    }\n}\n</code></pre>\n\n<p>If you’re checking this project into source control, as you should, you may want to ignore the contents of <code>wwwroot</code> as they are artifacts of the build process and will likely be changing regularly.</p>\n\n<p>Next, let’s add some content and templates for 11ty to process. First, create a new folder under <code>site</code> called <code>_includes</code>. Once you’ve made the folder, add the following <code>layout.html</code> file.</p>\n\n<pre><code class=\"language-html\">\n&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;title&gt;{{ title }}&lt;/title&gt;\n    &lt;meta name=\"Description\" content=\"{{ description }}\" /&gt;\n    &lt;meta charset=\"UTF-8\" /&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" /&gt;\n    &lt;meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\" /&gt;\n    &lt;link rel=\"stylesheet\" type=\"text/css\" href=\"/assets/styles.css\" /&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div class=\"content\"&gt;{{ content }}&lt;/div&gt;\n&lt;script src=\"/assets/script.js\"&gt;&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n\n</code></pre>\n\n<p>Next, create an <code>assets</code> folder under <code>site</code> and add two files, <code>script.js</code> and <code>styles.css</code>. We’ve referenced these files in the layout, but we need some content. Here is the content for our JavaScript file. The stylesheet content can be empty for now.</p>\n\n<pre><code class=\"language-javascript\">;(function () {\n    console.log(\"Hello there!\")\n\n    fetch('/api/current-time')\n        .then((response) =&gt; response.json())\n        .then((data) =&gt; {\n            const el =document.getElementById('target');\n            el.innerText =`the current date time is ${data.datetime}`; \n        });\n})()\n</code></pre>\n\n<p>Spoiler, we’ll be implementing an ASP.NET Core API endpoint and calling it from our static files.</p>\n\n<p>Finally, let’s add an <code>index.md</code> file. 11ty allows you to write your content in multiple templating languages, with my favorite being plain-old markdown.</p>\n\n<pre><code class=\"language-text\">\n---\ntitle: \"Hello 11ty\"\nlayout: layout.html\ndescription: Hosting 11ty on ASP.NET Core\n---\n\n# This Is Eleventy Served from ASP.NET Core\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n\n&lt;h1 id=\"target\"&gt;Loading...&lt;/h1&gt;\n\n</code></pre>\n\n<p>Let’s get back to the world of .NET. The following section will set up our build process and the ASP.NET Core pipeline.</p>\n\n<h2 id=\"setting-up-aspnet-core-to-build-11ty\">Setting Up ASP.NET Core to build 11ty</h2>\n\n<p>First, we need MSBuild to execute our NPM <code>build</code> script. That’s as straightforward as adding a <code>Target</code> to the <code>.csrpoj</code> file.</p>\n\n<pre><code class=\"language-xml\">&lt;Project Sdk=\"Microsoft.NET.Sdk.Web\"&gt;\n\n    &lt;PropertyGroup&gt;\n        &lt;TargetFramework&gt;net7.0&lt;/TargetFramework&gt;\n        &lt;Nullable&gt;enable&lt;/Nullable&gt;\n        &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt;\n    &lt;/PropertyGroup&gt;\n\n    &lt;ItemGroup&gt;\n      &lt;Folder Include=\"wwwroot\" /&gt;\n    &lt;/ItemGroup&gt;\n\n    &lt;Target Name=\"11ty\" BeforeTargets=\"Build\"&gt;\n        &lt;Exec Command=\"npm install &amp;amp;&amp;amp; npm run build\" WorkingDirectory=\"site\" /&gt;\n    &lt;/Target&gt;\n\n&lt;/Project&gt;\n</code></pre>\n\n<p><strong>It’s important to set the <code>WorkingDirectory</code> attribute to <code>site</code>, or else NPM will not find the script.</strong></p>\n\n<p>The next phase in our process is to configure our ASP.NET Core pipeline. We only need two pieces of middleware: <code>DefaultFilesMiddleware</code> and <code>StaticFilesMiddleware</code>. We’ll also take this opportunity to add our ASP.NET Core Minimal API endpoint.</p>\n\n<pre><code class=\"language-csharp\">var builder = WebApplication.CreateBuilder(args);\nvar app = builder.Build();\n\napp.UseDefaultFiles();\napp.UseStaticFiles();\n\napp.MapGet(\"/api/current-time\", () =&gt; new\n{\n    datetime = DateTime.Now\n});\n\napp.Run();\n</code></pre>\n\n<p>And that’s it! You now have a working <strong><a href=\"https://github.com/khalidabuhakmeh/EleventyCore\">11ty and ASP.NET Core web project</a></strong>. I’ve uploaded it to my GitHub repository if you’d like a quicker starting point.**</p>\n\n<p>As always, thanks for reading, and I hope this helps you. If you enjoyed this post, please share it with friends and colleagues.</p>\n\n",
      "Content": null,
      "Language": null,
      "Link": "https://khalidabuhakmeh.com/combining-11ty-static-site-generator-with-aspnet-core"
    },
    {
      "FeedId": "https://khalidabuhakmeh.com/feed.xml",
      "ItemId": "https://khalidabuhakmeh.com/generating-bogus-http-endpoints-with-aspnet-core-minimal-apis",
      "Title": "Generating Bogus HTTP Endpoints with ASP.NET Core Minimal APIs",
      "PublishDate": "2023-02-14T00:00:00+00:00",
      "Summary": "<p>As a developer advocate, I find myself writing a lot of demos for folks around .NET and, specifically, the ASP.NET Core parts of the stack. Unfortunately, writing repetitive boilerplate can make me feel like <a href=\"https://www.imdb.com/title/tt0081505/\">Jack Torrence from The Shining movie</a>: <strong><em>“All work and no play makes <a href=\"https://mastodon.social/@khalidabuhakmeh\">Khalid</a> a dull boy.”</em></strong> Nobody likes the drudgery of repeating yourself, nobody! So, given my situation, I thought I’d chase this problem down in a maze with a metaphorical axe. So, what am I trying to accomplish?</p>\n\n<p>What if I could take an existing C# model and build a low-ceremony set of test endpoints that follow standard HTTP semantics, and how would I accomplish that?</p>\n\n<p>In this article, you’ll see how I built a single registration for test endpoints that you can use to prototype UIs quickly for frameworks like React, Blazor, Angular, or vanilla JavaScript. Let’s get started.</p>\n\n<!--more-->\n\n<h2 id=\"the-basics-of-an-http-api\">The Basics of an HTTP API</h2>\n\n<p>For folks unfamiliar with building an HTTP API, the HTTP semantics are essential to the implementation on the server. Elements of an HTTP request include the method, headers, path, query-string values, and the optional payload. Without all these elements, your HTTP API limits how and what your user can send to your endpoint.</p>\n\n<p>On the flip side, you have the HTTP Request, which has headers, payload, and status code elements. The server uses these values to tell a client what occurred on the server via a status code and what the client can expect regarding the type of payload.</p>\n\n<p>In addition to HTTP semantics, I typically center the creation of HTTP APIs around a “resource”. A resource is a logical entity that a user reads and writes through requests and receives in response payloads. In my experience, an API resource can be something like a <strong>Person</strong>, <strong>Quotes</strong>, and so on.</p>\n\n<p>I’ve found that building my HTTP APIs around HTTP semantics and resources makes the process of reasoning and maintaining a project simpler in the long run.</p>\n\n<h2 id=\"the-aspnet-core-registration\">The ASP.NET Core Registration</h2>\n\n<p>We’ll start with the user experience I’m aiming for and then look at how to implement the code behind the endpoint registration. I aim to have a low-ceremony registration to add essential create, read, update, and delete endpoints. The endpoints will also adhere to standard HTTP semantics. Additionally, I want persistence between requests, so the user can create or update a new resource and then retrieve it using the identity. First, let’s look at the <code>Program.cs</code>.</p>\n\n<pre><code class=\"language-csharp\">using BogusEndpoints;\n\nvar builder = WebApplication.CreateBuilder(args);\n\nvar app = builder.Build();\n\napp.MapGet(\"/\", () =&gt; \"Hello World!\");\n\napp.MapAutoBogusEndpoint&lt;Person&gt;(\"/people\", rules =&gt;\n{\n    rules.RuleFor(p =&gt; p.Id, f =&gt; f.IndexGlobal + 1);\n    rules.RuleFor(p =&gt; p.FullName, f =&gt; f.Name.FullName());\n});\n\napp.Run();\n\npublic record Person(int Id, string FullName)\n{\n    public DateTime CreatedAt { get; set; } = DateTime.UtcNow;\n    public Dog Dog { get; set; }\n}\n\npublic record Dog(string Name);\n</code></pre>\n\n<p>You’ll notice the call to <code>MapAutoBogusEndpoint</code> allows the user to set a root path and the ability to configure the kind of data for the resource. Any property the user does not set will get random data based on the property type. For example, let’s make an HTTP call to the Index endpoint to retrieve a list of <code>Person</code> resources, limiting the result to</p>\n\n<pre><code class=\"language-text\">GET http://localhost:5208/people?pageSize=1\n\nHTTP/1.1 200 OK\nContent-Type: application/json; charset=utf-8\nDate: Thu, 02 Feb 2023 16:20:23 GMT\nServer: Kestrel\nTransfer-Encoding: chunked\n\n{\n  \"results\": [\n    {\n      \"id\": 1,\n      \"fullName\": \"Ofelia Vandervort\",\n      \"createdAt\": \"2023-02-02T01:32:03.1170216-05:00\",\n      \"dog\": {\n        \"name\": \"Toys &amp; Health\"\n      }\n    }\n  ],\n  \"page\": 1,\n  \"pageSize\": 1,\n  \"totalItemCount\": 1000\n}\n</code></pre>\n\n<p>That’s pretty cool, right?! Other calls like creating, updating, and deleting also work.</p>\n\n<pre><code class=\"language-text\">PUT http://localhost:5208/people/1\nContent-Type: application/json\n\n{\n  \"id\": 1,\n  \"fullName\": \"Khalid Abuhakmeh\",\n  \"createdAt\": \"2023-02-02T01:32:03.1170216-05:00\",\n  \"dog\": {\n    \"name\": \"Toys &amp; Health\"\n  }\n}\n###\n\nHTTP/1.1 200 OK\nContent-Type: application/json; charset=utf-8\nDate: Thu, 02 Feb 2023 16:28:34 GMT\nServer: Kestrel\nTransfer-Encoding: chunked\n\n{\n  \"id\": 1,\n  \"fullName\": \"Khalid Abuhakmeh\",\n  \"createdAt\": \"2023-02-02T01:32:03.1170216-05:00\",\n  \"dog\": {\n    \"name\": \"Toys &amp; Health\"\n  }\n}\n</code></pre>\n\n<p>I make the best effort to assign the identifiers if an identifier needs to be incremented or generated. That said, in most cases, an HTTP API will expect that the user passes most data representing the state.</p>\n\n<p>So how is this all done?</p>\n\n<h2 id=\"generating-boilerplate-prototype-endpoints\">Generating Boilerplate Prototype Endpoints</h2>\n\n<p>I accomplish most of the work using the NuGet library <strong><a href=\"https://www.nuget.org/packages/AutoBogus\">AutoBogus</a></strong>. The configuration action allows you to configure each property accordingly when registering the endpoint. I’ll paste most of the code here.</p>\n\n<pre><code class=\"language-csharp\">using AutoBogus;\nusing Microsoft.AspNetCore.Mvc;\nusing X.PagedList;\n\nnamespace BogusEndpoints;\n\npublic static class BogusEndpointsExtensions\n{\n    public static RouteGroupBuilder MapAutoBogusEndpoint&lt;TResource&gt;(\n        this WebApplication app,\n        PathString prefix,\n        Action&lt;AutoFaker&lt;TResource&gt;&gt;? builder = null\n    ) where TResource : class\n    {\n        var group = app.MapGroup(prefix)\n            .WithGroupName($\"{typeof(TResource).FullName}_Bogus\");\n\n        var faker = new AutoFaker&lt;TResource&gt;();\n        builder?.Invoke(faker);\n\n        // generate a working collection\n        // will allocate objects in memory\n        var db = faker.Generate(1000);\n\n        // INDEX\n        group.MapGet(\"\", (int? pageSize, int? page) =&gt;\n            {\n                var result = db\n                    .ToPagedList(\n                        page.GetValueOrDefault(1),\n                        pageSize.GetValueOrDefault(10));\n\n                return new\n                {\n                    results = result,\n                    page = result.PageNumber,\n                    pageSize = result.PageSize,\n                    totalItemCount = result.TotalItemCount\n                };\n            })\n        .WithName($\"{typeof(TResource).FullName}_Bogus+List\");\n\n        // SHOW\n        group.MapGet(\"{id}\", (string id) =&gt;\n        {\n            var result = db.FirstOrDefault(t =&gt; FindById(t, id));\n            return result != null ? Results.Ok(result) : Results.NotFound();\n        })\n        .WithName($\"{typeof(TResource).FullName}_Bogus+Show\");\n\n        // POST\n        group.MapPost(\"\", (TResource item) =&gt;\n        {\n            try\n            {\n                dynamic generated = faker.Generate(1)[0];\n                SetId(item, generated.Id);\n                db.Add(item);\n                return Results.CreatedAtRoute(\n                    $\"{typeof(TResource).FullName}_Bogus+Show\",\n                    new { id = generated.Id },\n                    item\n                );\n            }\n            catch\n            {\n                return Results.Ok(item);\n            }\n        }).WithName($\"{typeof(TResource).FullName}_Bogus+Create\");\n\n        // PUT\n        group.MapPut(\"{id}\", (string id, [FromBody] TResource item) =&gt;\n        {\n            var index = db.FindIndex(t =&gt; FindById(t, id));\n            if (index &lt; 0) return Results.NotFound();\n            SetId(id, item);\n            db[index] = item;\n            return Results.Ok(item);\n        }).WithName($\"{typeof(TResource).FullName}_Bogus+Update\");\n\n        // DELETE\n        group.MapDelete(\"{id}\", (string id) =&gt;\n        {\n            db.RemoveAll(t =&gt; FindById(t, id));\n            return Results.Accepted();\n        })\n        .WithName($\"{typeof(TResource).FullName}_Bogus+Delete\");\n        \n        return group;\n    }\n\n    private static bool FindById&lt;TResource&gt;(TResource target, object? id)\n    {\n        if (id is null)\n            return false;\n\n        var type = typeof(TResource);\n        var identifier = type\n            .GetProperties()\n            .FirstOrDefault(p =&gt; p.Name == \"Id\");\n\n        if (identifier == null)\n            return false;\n\n        object? converted = Convert.ChangeType(id, identifier.PropertyType);\n        if (converted == null) return false;\n        var value = identifier.GetValue(target);\n        var result = converted.Equals(value);\n        return result;\n    }\n    \n    private static void SetId&lt;TResource&gt;(TResource target, object? id)\n    {\n        if (id is null)\n            return;\n\n        var type = typeof(TResource);\n        var identifier = type\n            .GetProperties()\n            .FirstOrDefault(p =&gt; p.Name == \"Id\");\n\n        if (identifier == null)\n            return;\n\n        object? converted = Convert.ChangeType(id, identifier.PropertyType);\n        if (converted == null) return;\n        identifier.SetValue(target, converted);\n    }\n}\n</code></pre>\n\n<p>All you need to do is create your resource types, such as <code>Person,</code> and you’ll get all the necessary machinery for an HTTP API. But there’s still something missing. What about validation results?</p>\n\n<h2 id=\"adding-validation-to-bogus-endpoints\">Adding Validation to Bogus Endpoints</h2>\n\n<p>I made a calculated effort to return the <code>RouteGroupBuilder</code> from each registration call, allowing you to add any endpoint filter to a group. Exposing this object instance makes it trivial to add <strong>FluentValidation</strong> as an endpoint filter.</p>\n\n<pre><code class=\"language-csharp\">using BogusEndpoints;\nusing FluentValidation;\n\nvar builder = WebApplication.CreateBuilder(args);\nbuilder.Services.AddValidatorsFromAssemblyContaining&lt;Program&gt;();\n\nvar app = builder.Build();\n\napp.MapGet(\"/\", () =&gt; \"Hello World!\");\n\napp.MapAutoBogusEndpoint&lt;Person&gt;(\"/people\", rules =&gt;\n{\n    rules.RuleFor(p =&gt; p.Id, f =&gt; f.IndexGlobal + 1);\n    rules.RuleFor(p =&gt; p.FullName, f =&gt; f.Name.FullName());\n})\n.AddEndpointFilter&lt;PersonValidationFilter&gt;();\n\napp.Run();\n\npublic record Person(int Id, string FullName)\n{\n    public DateTime CreatedAt { get; set; } = DateTime.UtcNow;\n    public Dog Dog { get; set; }\n}\n\npublic record Dog(string Name);\n</code></pre>\n\n<p>We tie the validator specifically to the resource of <code>Person</code>.</p>\n\n<pre><code class=\"language-csharp\">using FluentValidation;\n\npublic class PersonValidationFilter : IEndpointFilter\n{\n    public async ValueTask&lt;object?&gt; InvokeAsync(EndpointFilterInvocationContext context, EndpointFilterDelegate next)\n    {\n        var validator = context.HttpContext.RequestServices.GetRequiredService&lt;PersonValidator&gt;();\n        foreach (var arg in context.Arguments)\n        {\n            if (arg is not Person person) continue;\n            var result = await validator.ValidateAsync(person);\n            if (result.IsValid) continue;\n            var errors = result.Errors\n                .GroupBy(e =&gt; e.PropertyName)\n                .ToDictionary(\n                    g =&gt; g.Key, \n                    g =&gt; g.Select(e =&gt; e.ErrorMessage).ToArray()\n                );\n\n            return Results.ValidationProblem(errors);\n        }\n\n        return await next(context);\n    }\n}\n\npublic class PersonValidator : AbstractValidator&lt;Person&gt;\n{\n    public PersonValidator()\n    {\n        RuleFor(m =&gt; m.FullName).NotEmpty();\n    }\n}\n</code></pre>\n\n<p>Any call to an endpoint not meeting your validation criteria will return an appropriate problem details response and status code.</p>\n\n<pre><code class=\"language-text\">POST http://localhost:5208/people\n\nHTTP/1.1 400 Bad Request\nContent-Type: application/problem+json\nDate: Thu, 02 Feb 2023 16:56:57 GMT\nServer: Kestrel\nTransfer-Encoding: chunked\n\n{\n  \"type\": \"https://tools.ietf.org/html/rfc7231#section-6.5.1\",\n  \"title\": \"One or more validation errors occurred.\",\n  \"status\": 400,\n  \"errors\": {\n    \"FullName\": [\n      \"'Full Name' must not be empty.\"\n    ]\n  }\n}\n</code></pre>\n\n<p>Cool!</p>\n\n<h2 id=\"other-ideas-around-bogus-endpoints\">Other Ideas around Bogus Endpoints</h2>\n\n<p>This current implementation relies on runtime generation, which is ok for testing purposes, but there are a lot of potential pitfalls, primarily around identifiers. Using source code generators, you could make the endpoints rely less on reflection and more on the design-time types of the resource models. In addition, the use of source generators could lead to fewer edge case bugs.</p>\n\n<p>.NET Community member <strong>João Antunes</strong>  has <a href=\"https://blog.codingmilitia.com/2023/01/31/mapping-aspnet-core-minimal-api-endpoints-with-csharp-source-generators/\">an excellent blog post detailing registering Minimal API endpoints using source code generators</a>. I could see someone adapting both our ideas into something useful for the community at large.</p>\n\n<h2 id=\"conclusion\">Conclusion</h2>\n\n<p>If you’ve ever found yourself in a situation where you needed some test endpoints to match your models but were more focused on the UI/UX rather than the implementation, this solution might be for you. The approach in this post could use some optimizations and edge case handling, but I’ll leave it up to you to work through those.</p>\n\n<p>As always, thanks for reading, and I hope you enjoyed this post. If you did, please feel to share it with friends and colleagues.</p>\n",
      "Content": null,
      "Language": null,
      "Link": "https://khalidabuhakmeh.com/generating-bogus-http-endpoints-with-aspnet-core-minimal-apis"
    },
    {
      "FeedId": "https://khalidabuhakmeh.com/feed.xml",
      "ItemId": "https://khalidabuhakmeh.com/how-to-use-entity-framework-core-in-aspnet-core",
      "Title": "How to use Entity Framework Core in ASP.NET Core",
      "PublishDate": "2023-02-07T00:00:00+00:00",
      "Summary": "<p>Moving from one ecosystem to another can be challenging, especially when unfamiliar with the technology stack and available tools. So I wrote this post for anyone coming to ASP.NET Core from another ecosystem or .NET developers who might be dabbling with web development for the first time. Knowing where all the bits and bobs are in a new environment can be overwhelming, and I’m here to help.</p>\n\n<p>As you read through the post, we’ll create a new ASP.NET Core project, integrate a data access library called Entity Framework Core 7, and discuss the steps you need to take toward a straightforward solution. Like all solutions, I developed this guidance from my first-hand experience.</p>\n\n<!--more-->\n\n<p>Please do so if you’d like to experiment with your choices at any point in this tutorial. This guide is a jumping-off point so you can succeed. This blog post assumes you have <a href=\"https://dot.net\">.NET installed</a> and some kind of editor or tooling. I recommend <a href=\"https://jetbrains.com/rider\">JetBrains Rider</a> but this tutorial should work with Visual Studio and Visual Studio Code.</p>\n\n<p>Let’s go ahead and get started.</p>\n\n<h2 id=\"creating-a-new-aspnet-core-web-project\">Creating a New ASP.NET Core Web Project</h2>\n\n<p>Before we get started, you’ll need to create a new ASP.NET Core solution. Creating a new .NET solution can typically be done in one of two ways: Command-line tooling or through your favorite IDE (I prefer JetBrains Rider).</p>\n\n<p>For this guide, I’ll show you how to create a new <strong>Razor Pages</strong> web project using the command line. First, in a new terminal, type the following command.</p>\n\n<pre><code class=\"language-command\">dotnet new webapp -o WebApplication\n</code></pre>\n\n<p>The command will create a web project ready for development. <strong>Note: This template is available in most IDEs and will create an additional solution file with your project in a nested folder when selected.</strong>  A solution is a typical structure for most .NET applications, as you may have more than one project per solution.</p>\n\n<p>You’re ready to start adding some of our necessary dependencies from here.</p>\n\n<h2 id=\"tools-and-nuget-dependencies\">Tools and NuGet Dependencies</h2>\n\n<p>We’ll start by installing a tool manifest in our solution directory. The tool manifest keeps track of all command-line tooling installed for the current solution, and many of EF Core’s management feature set exists in the <code>dotnet-ef</code> tool.</p>\n\n<p>Type the following command from the root folder of your solution.</p>\n\n<pre><code class=\"language-command\">dotnet new tool-manifest\n</code></pre>\n\n<p>The command will create a <code>.config</code> folder with a <code>dotnet-tool.json</code> file. It’s not necessary to look at it. Just know it’s a manifest of all the tools installed for your local development needs.</p>\n\n<p>Next, you’ll need to install the EF Core 7 tooling with the following command.</p>\n\n<pre><code class=\"language-command\">dotnet tool install dotnet-ef\n</code></pre>\n\n<p>Now, let’s move on to installing our EF Core 7 dependencies.</p>\n\n<p>You’ll need to install two specific packages in your web application project.</p>\n\n<p>The first package is your EF Core database provider package, and you can choose from Microsoft SQL Server, PostgreSQL, MySQL, or other providers. In this case, I decided to use SQLite because it’s file-based and gets the point across.</p>\n\n<p>The second is EF Core’s <strong>Design</strong> package, which allows you to generate database migrations. These migrations help keep your database schema compatible with your C# models.</p>\n\n<p>Here’s my <code>.csproj</code> file.</p>\n\n<pre><code class=\"language-xml\">&lt;Project Sdk=\"Microsoft.NET.Sdk.Web\"&gt;\n\n    &lt;PropertyGroup&gt;\n        &lt;TargetFramework&gt;net7.0&lt;/TargetFramework&gt;\n        &lt;Nullable&gt;enable&lt;/Nullable&gt;\n        &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt;\n    &lt;/PropertyGroup&gt;\n\n    &lt;ItemGroup&gt;\n      &lt;PackageReference Include=\"Microsoft.EntityFrameworkCore.Design\" Version=\"7.0.2\"&gt;\n        &lt;PrivateAssets&gt;all&lt;/PrivateAssets&gt;\n        &lt;IncludeAssets&gt;runtime; build; native; contentfiles; analyzers; buildtransitive&lt;/IncludeAssets&gt;\n      &lt;/PackageReference&gt;\n      &lt;PackageReference Include=\"Microsoft.EntityFrameworkCore.Sqlite\" Version=\"7.0.2\" /&gt;\n    &lt;/ItemGroup&gt;\n\n&lt;/Project&gt;\n</code></pre>\n\n<p>NuGet will install all other EF Core packages transitively from these two packages. Our web application is now ready for some code.</p>\n\n<h2 id=\"designing-a-database-with-ef-core-and-c\">Designing a Database with EF Core and C#</h2>\n\n<p>EF Core supports multiple design philosophies, but the one I’m fond of is Code-First. Code first lets you design C# models, which EF Core will translate into a database schema. Create a folder at the root of your web application named <strong>“Models”</strong> and create a new file called <strong>“Database.cs”</strong>. Add the following content to the file. This code contains our first table and our <code>DbContext</code> implementation.</p>\n\n<p>Adjust the namespace according to your project’s namespace if you’d like.</p>\n\n<pre><code class=\"language-csharp\">using Microsoft.EntityFrameworkCore;\n\nnamespace WebApplication4.Models;\n\npublic class Database : DbContext\n{\n    public Database(DbContextOptions&lt;Database&gt; options)\n        : base(options)\n    {}\n    \n    public DbSet&lt;Person&gt; People =&gt; Set&lt;Person&gt;();\n}\n\npublic class Person\n{\n    public int Id { get; set; }\n    public string Name { get; set; } = \"\";\n    public DateTime CreatedAt { get; set; } = DateTime.UtcNow;\n}\n</code></pre>\n\n<p>This code will create a new “People” table with the columns of <code>Id</code>, <code>Name</code>, and <code>CreatedAt</code>. You’ll also notice that our <code>Database</code> class takes a parameter of <code>DbContextOptions&lt;Database&gt;</code>; this is how you configure our database settings. The following section will show you how to set up values like connection strings and database providers.</p>\n\n<h2 id=\"services-collection-and-configuring-our-dbcontext\">Services Collection and Configuring Our DbContext</h2>\n\n<p>You’ll need to register the type with ASP.NET Core’s services collection to take advantage of your newly created’ Database’ class. The registration process allows you to set up everything just the way you want, with options like database provider, logging, interceptors, and more. For this guide, let’s keep it simple. Add the following lines of code in your <code>Program.cs</code> file.</p>\n\n<pre><code class=\"language-csharp\">builder.Services.AddDbContext&lt;Database&gt;(options =&gt; {\n    var config = builder.Configuration;\n    var connectionString = config.GetConnectionString(\"database\");\n    \n    options.UseSqlite(connectionString);\n});\n</code></pre>\n\n<p>You’ll notice that you’re using the configuration to get a connection string. So what does the configuration file look like? In your <code>appSettings.Development.json</code> file, you’ll have the following.</p>\n\n<pre><code class=\"language-json\">{\n  \"DetailedErrors\": true,\n  \"Logging\": {\n    \"LogLevel\": {\n      \"Default\": \"Information\",\n      \"Microsoft.AspNetCore\": \"Warning\"\n    }\n  },\n  \"ConnectionStrings\": {\n    \"database\": \"Data Source=database.db\"\n  }\n}\n</code></pre>\n\n<p>Here you can add your connection strings and read them in code. <strong>I recommend storing connection strings in environment variables or cloud-specific settings providers when running your application in production settings.</strong> Do not store sensitive information in source control under any circumstance.</p>\n\n<p>The next step is to create our database instance using database migrations and EF Core tooling.</p>\n\n<h2 id=\"ef-core-migrations-and-databases\">EF Core Migrations and Databases</h2>\n\n<p>We have most of the working parts of our application set in place, but we still haven’t touched a database. That changes now. You’ll be creating your first migration from the command line. From the root directory of your solution, type the following command:</p>\n\n<pre><code class=\"language-command\">dotnet ef migrations add \"Initial\" --project WebApplication4\n</code></pre>\n\n<p>Be sure you change the <code>--project</code> argument to match your project’s name. You can also exclude this argument by executing the command from the web application’s root directory instead of the solution directory.</p>\n\n<p>When executed correctly, you should see a new “Migrations” folder in your web application project and a timestamped migration named “Initial”. Opening the file will show the C# to Database schema translation that EF Core performed on your behalf.</p>\n\n<pre><code class=\"language-csharp\">using System;\nusing Microsoft.EntityFrameworkCore.Migrations;\n\n#nullable disable\n\nnamespace WebApplication4.Migrations\n{\n    /// &lt;inheritdoc /&gt;\n    public partial class Initial : Migration\n    {\n        /// &lt;inheritdoc /&gt;\n        protected override void Up(MigrationBuilder migrationBuilder)\n        {\n            migrationBuilder.CreateTable(\n                name: \"People\",\n                columns: table =&gt; new\n                {\n                    Id = table.Column&lt;int&gt;(type: \"INTEGER\", nullable: false)\n                        .Annotation(\"Sqlite:Autoincrement\", true),\n                    Name = table.Column&lt;string&gt;(type: \"TEXT\", nullable: false),\n                    CreatedAt = table.Column&lt;DateTime&gt;(type: \"TEXT\", nullable: false)\n                },\n                constraints: table =&gt;\n                {\n                    table.PrimaryKey(\"PK_People\", x =&gt; x.Id);\n                });\n        }\n\n        /// &lt;inheritdoc /&gt;\n        protected override void Down(MigrationBuilder migrationBuilder)\n        {\n            migrationBuilder.DropTable(\n                name: \"People\");\n        }\n    }\n}\n</code></pre>\n\n<p>Let’s apply this to a database. Running the following command will use the connection string in your app settings. Be sure it is a local developer instance of a database.</p>\n\n<pre><code class=\"language-command\">dotnet ef database update --project WebApplication4\n</code></pre>\n\n<p>If you’re using SQLite, you should now see a <code>database.db</code> or file with the same name as is found in your connection string. If you’re using another database provider, you can now see the EF Core-created tables in your database instance.</p>\n\n<p>For production purposes, I recommend you run migrations outside the running application. A lot can go wrong with database migration, and you don’t want a lousy migration to stop your application from running. That said, you can run migrations from your application’s startup for local development purposes. As an optional step, you can add the following migration code to your “Program.cs” file, below the call to <code>var app = builder.Build();</code>.</p>\n\n<pre><code class=\"language-csharp\">if (app.Environment.IsDevelopment())\n{\n    // migrate database, only during development\n    using var scope = app.Services.CreateScope();\n    var db = scope.ServiceProvider.GetRequiredService&lt;Database&gt;();\n    await db.Database.MigrateAsync();\n}\n</code></pre>\n\n<p>Let’s start using our <code>DbContext</code> and database instance.</p>\n\n<h2 id=\"using-a-dbcontext-in-a-razor-page\">Using a DbContext in a Razor Page</h2>\n\n<p>Our goal in this section is to use our <code>Database</code> class to read and write to our <code>People</code> table. If you’re following along, you should have an <code>Index.cshtml</code> along with an <code>Index.cshtml.cs</code> file under a <code>Pages</code> directory. We’ll be modifying the <code>Index.cshtml.cs</code> type to pass in a <code>Database</code> parameter to the constructor. So let’s start with the most straightforward modification of constructor injection.</p>\n\n<pre><code class=\"language-csharp\">using Microsoft.AspNetCore.Mvc.RazorPages;\nusing WebApplication4.Models;\n\nnamespace WebApplication4.Pages;\n\npublic class IndexModel : PageModel\n{\n    private readonly ILogger&lt;IndexModel&gt; _logger;\n    private readonly Database _database;\n\n    public Person? Person { get; set; }\n    \n    public IndexModel(ILogger&lt;IndexModel&gt; logger, Database database)\n    {\n        _logger = logger;\n        _database = database;\n    }\n\n    public void OnGet()\n    {\n        Person = _database\n            .People\n            .OrderByDescending(p =&gt; p.CreatedAt)\n            .FirstOrDefault();\n    }\n}\n</code></pre>\n\n<p>The above code takes in a <code>Database</code> instance and sets it to a private member. Then, on the page’s response to a <code>GET</code> HTTP request, the <code>OnGet</code> method will query for the latest person in the <code>People</code> table. You can set the result to the <code>Person</code> property. You’ll use this later when building the view.</p>\n\n<p>Let’s also take a look at parameter injection. You’ll need to add an <code>OnPost</code> method and a new bindable property. The new method will also take a <code>Database</code> instance as an argument, but you’ll need a <code>FromServices</code> attribute to tell ASP.NET Core to resolve this value from the services collection. Let’s look at the updated file.</p>\n\n<pre><code class=\"language-csharp\">using System.ComponentModel;\nusing System.ComponentModel.DataAnnotations;\nusing Microsoft.AspNetCore.Mvc;\nusing Microsoft.AspNetCore.Mvc.RazorPages;\nusing WebApplication4.Models;\n\nnamespace WebApplication4.Pages;\n\npublic class IndexModel : PageModel\n{\n    private readonly ILogger&lt;IndexModel&gt; _logger;\n    private readonly Database _database;\n\n    public Person? Person { get; set; }\n    \n    public IndexModel(ILogger&lt;IndexModel&gt; logger, Database database)\n    {\n        _logger = logger;\n        _database = database;\n    }\n\n    public void OnGet()\n    {\n        Person = _database\n            .People\n            .OrderByDescending(p =&gt; p.CreatedAt)\n            .FirstOrDefault();\n    }\n\n    [BindProperty, Required, DisplayName(\"Person's Name\")]\n    public string? Name { get; set; }\n    \n    public async Task&lt;IActionResult&gt; OnPost([FromServices] Database db)\n    {\n        if (ModelState.IsValid)\n        {\n            Person person = new() { Name = Name! };\n            db.People.Add(person);\n            await db.SaveChangesAsync();\n            return RedirectToPage();\n        }\n\n        // show validation messages\n        return Page();\n    }\n}\n</code></pre>\n\n<p>Before continuing to the Razor view, let’s discuss the <code>OnPost</code> implementation. It’s a critical practice when developing applications to adhere to a <strong>GET-POST-Redirect</strong> pattern. The pattern keeps your users from accidentally refreshing the page and submitting multiple requests for the same action. The method uses a return value of <code>IActionResult</code> so you can return numerous interface implementations, including <code>RedirectToPage</code> and <code>Page</code>.</p>\n\n<p>In addition to handling a form post, we need properties to bind to our ASP.NET Core Razor Pages form. In this case, we only have one property of <code>Name</code>. In Razor Pages, the page model is where you add all your form fields, but you can also certainly move them into individual models. If you’re using ASP.NET Core MVC, you might apply a “View Model” approach, which will also work here.</p>\n\n<p>Let’s write some Razor!</p>\n\n<h2 id=\"creating-an-aspnet-core-razor-form\">Creating an ASP.NET Core Razor Form</h2>\n\n<p>The culmination of our work has led you to the Razor view, where you’ll be adding a form to add new <code>Person</code> instances to your database. First, let’s look at the view and break down its parts.</p>\n\n<pre><code class=\"language-cshtml\">@page\n@model IndexModel\n@{\n    ViewData[\"Title\"] = \"Home page\";\n}\n\n@if (Model.Person is {} person)\n{\n    &lt;div class=\"alert alert-primary\" role=\"alert\"&gt;\n        Hello &lt;span class=\"alert-link\"&gt;@person.Name&lt;/span&gt;! \n        Nice to meet you.\n    &lt;/div&gt;\n}\n\n&lt;form asp-page=\"Index\" method=\"post\"&gt;\n    &lt;div asp-validation-summary=\"All\"&gt;&lt;/div&gt;\n    &lt;div class=\"input-group\"&gt;\n        &lt;div class=\"form-group mb-2\"&gt;\n            &lt;label asp-for=\"Name\"&gt;&lt;/label&gt;\n            &lt;input class=\"form-control\" asp-for=\"Name\"&gt;\n            &lt;span asp-validation-for=\"Name\" class=\"invalid-feedback\"&gt;&lt;/span&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n    &lt;button class=\"btn btn-primary\" type=\"submit\"&gt;Save Person&lt;/button&gt;\n&lt;/form&gt;\n</code></pre>\n\n<p>The <code>form</code> element uses <strong>TagHelpers</strong> to use the <code>IndexModel</code> properties to build our form. We are also telling the form to <code>POST</code> the form to our page handler of <code>OnPost</code> using the <code>asp-page</code> attribute. Finally, there’s a submit button.</p>\n\n<p>Above our form, we’ve also added usage of our <code>Person</code> property. If it is not null, we’ll show an alert from the last entry in the database.</p>\n\n<p><img src=\"https://res.cloudinary.com/abuhakmeh/image/fetch/c_limit,f_auto,q_auto,w_800/https://khalidabuhakmeh.com/assets/images/posts/misc/how-to-use-entity-framework-core-aspnet-core-result.png\" srcset=\"https://res.cloudinary.com/abuhakmeh/image/fetch/c_limit,f_auto,q_auto,w_320/https://khalidabuhakmeh.com/assets/images/posts/misc/how-to-use-entity-framework-core-aspnet-core-result.png 320w, https://res.cloudinary.com/abuhakmeh/image/fetch/c_limit,f_auto,q_auto,w_540/https://khalidabuhakmeh.com/assets/images/posts/misc/how-to-use-entity-framework-core-aspnet-core-result.png 540w, https://res.cloudinary.com/abuhakmeh/image/fetch/c_limit,f_auto,q_auto,w_760/https://khalidabuhakmeh.com/assets/images/posts/misc/how-to-use-entity-framework-core-aspnet-core-result.png 760w, https://res.cloudinary.com/abuhakmeh/image/fetch/c_limit,f_auto,q_auto,w_980/https://khalidabuhakmeh.com/assets/images/posts/misc/how-to-use-entity-framework-core-aspnet-core-result.png 980w, https://res.cloudinary.com/abuhakmeh/image/fetch/c_limit,f_auto,q_auto,w_1024/https://khalidabuhakmeh.com/assets/images/posts/misc/how-to-use-entity-framework-core-aspnet-core-result.png 1024w\" sizes=\"100vw\" alt=\"asp.net core web page showing data from entity framework core\" loading=\"lazy\" width=\"1024\" height=\"634\" crossorigin=\"anonymous\" /></p>\n\n<p>Running your application now, you’ll be able to save and read data in an ASP.NET Core application using Entity Framework Core. Congratulations!</p>\n\n<h2 id=\"conclusion\">Conclusion</h2>\n\n<p>Getting a working ASP.NET Core application using EF Core can seem tedious, but in most cases, the “plumbing” work is done once upfront and never touched again.</p>\n\n<p>You’ll spend most of your time adding a C# class to your <code>DbContext</code>, adding new database migrations, and then plumbing that entity to a Razor page. That’s the positive side of this approach; adding new functionality is boring with few surprises. When building and maintaining applications, boring is a good thing.</p>\n\n<p>While I certainly didn’t go into every possible detail, this quick-start guide should have you up in no time. If you have any specific questions or have issues, please contact me at @khalidabuhakmeh@mastodon.social or use the contact form on the blog.</p>\n\n<p>As always, thanks for reading and sharing my blog posts.</p>\n",
      "Content": null,
      "Language": null,
      "Link": "https://khalidabuhakmeh.com/how-to-use-entity-framework-core-in-aspnet-core"
    },
    {
      "FeedId": "https://khalidabuhakmeh.com/feed.xml",
      "ItemId": "https://khalidabuhakmeh.com/register-maui-views-and-viewmodels-with-scrutor",
      "Title": "Register MAUI Views and ViewModels with Scrutor",
      "PublishDate": "2023-01-31T00:00:00+00:00",
      "Summary": "<p>As a developer advocate at <a href=\"https://jetbrains.com\">JetBrains</a>, I find myself exploring technologies in nooks and crannies of the ecosystem previously out of reach. As a lifelong proponent of the web, mobile development has always been on my list to explore, but I rarely found the time to do so. One of the latest technologies I am dabbling with is Multi-platform App UI, more commonly referred to as MAUI.</p>\n\n<p>In this post, I’ll show you how to use the packages <strong>CommunityToolkit.Mvvm</strong> and <strong>Scrutor</strong> to quickly register your XAML views and the corresponding ViewModels for a more convenient approach.</p>\n\n<!--more-->\n\n<h2 id=\"communitytoolkitmvvm-and-the-mvvm-pattern\">CommunityToolkit.Mvvm and the MVVM pattern</h2>\n\n<p>The Model-View-View-Model pattern, also referred to as MVVM, is an approach that separates the logic of your views from the language of the View. In the case of MAUI, that view language is typically XAML. Utilizing the pattern leads to a few positive side effects:</p>\n\n<ol>\n  <li>Your <strong>ViewModels</strong> are much more straightforward to test, with the bulk of your logic exposed through properties and commands.</li>\n  <li>Your <strong>Views</strong> are simpler, binding to properties and commands rather than directly to members on the specific <code>ContentPage</code>.</li>\n  <li>In MAUI, both <code>ContentPage</code> and <strong>ViewModels</strong> can support dependency injection arguments, allowing for the composition of app functionality.</li>\n</ol>\n\n<p>I’m sure there are other benefits to using the MVVM pattern, but these immediately spring to mind when compared to the alternative of dumping all logic in a <code>ContentPage</code> directly.</p>\n\n<p>The <code>CommunityToolkit.Mvvm</code> package includes helpers to make adopting the MVVM pattern more straightforward and performant. <code>CommunityToolkit.Mvvm</code> uses source generators to generate the tedious parts of building MAUI apps, most notably the implementation of <code>INotifyPropertyChanged</code> and <code>ICommand</code> instances.</p>\n\n<p>Let’s start with a simple update of the default MAUI template. Next, we’ll add a new <code>MainPageViewModel</code> and move most of the app’s logic from the <code>MainPage.xaml.cs</code> file to our new class.</p>\n\n<p><strong>Note: <a href=\"https://putridparrot.com/blog/mvvm-with-the-mvvm-community-toolkit/\">This sample is from a blog post by Mark Timmings. Check it out here.</a></strong></p>\n\n<pre><code class=\"language-csharp\">using System.Diagnostics;\nusing CommunityToolkit.Mvvm.ComponentModel;\nusing CommunityToolkit.Mvvm.Input;\n\nnamespace MyFirstMauiApp.ViewModels;\n\npublic partial class MainPageViewModel : ObservableObject\n{\n    [ObservableProperty] int count;\n    [ObservableProperty] private string text;\n    [ObservableProperty]\n    [NotifyCanExecuteChangedFor(nameof(IncrementCountCommand))]\n    bool canIncrement;\n    \n    bool CanExecuteIncrement() =&gt; canIncrement;\n\n    [RelayCommand(CanExecute = nameof(CanExecuteIncrement))]\n    void IncrementCount()\n    {\n        Count++;\n        Text = Count == 1 \n            ? $\"Clicked {count} time\" \n            : $\"Clicked {count} times\";\n        \n        SemanticScreenReader.Announce(Text);\n    }\n    \n    partial void OnCanIncrementChanged(bool value)\n    {\n        Debug.WriteLine(\"OnCanIncrementChanged called\");\n    } \n}\n</code></pre>\n\n<p>Next, we’ll update our <code>MainPage.xaml.cs</code> code.</p>\n\n<pre><code class=\"language-csharp\">using MyFirstMauiApp.ViewModels;\n\nnamespace MyFirstMauiApp;\n\npublic partial class MainPage : ContentPage\n{\n    public MainPage(MainPageViewModel model)\n    {\n        InitializeComponent();\n        BindingContext = model;\n    }\n}\n</code></pre>\n\n<p>We’ll also need to update the XAML to take advantage of our new <code>MainPageViewModel</code> class.</p>\n\n<pre><code class=\"language-xml\">&lt;?xml version=\"1.0\" encoding=\"utf-8\" ?&gt;\n&lt;ContentPage xmlns=\"http://schemas.microsoft.com/dotnet/2021/maui\"\n             xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n             xmlns:viewModels=\"clr-namespace:MyFirstMauiApp.ViewModels\"\n             x:Class=\"MyFirstMauiApp.MainPage\"\n             x:DataType=\"viewModels:MainPageViewModel\"&gt;\n\n    &lt;ScrollView&gt;\n        &lt;VerticalStackLayout\n            Spacing=\"25\"\n            Padding=\"30,0\"\n            VerticalOptions=\"Center\"&gt;\n\n            &lt;Image\n                Source=\"dotnet_bot.png\"\n                SemanticProperties.Description=\"Cute dot net bot waving hi to you!\"\n                HeightRequest=\"200\"\n                HorizontalOptions=\"Center\" /&gt;\n\n            &lt;Label\n                Text=\"Hello, World!\"\n                SemanticProperties.HeadingLevel=\"Level1\"\n                FontSize=\"32\"\n                HorizontalOptions=\"Center\" /&gt;\n\n            &lt;Label\n                Text=\"{Binding Text}\"\n                SemanticProperties.HeadingLevel=\"Level2\"\n                SemanticProperties.Description=\"Welcome to dot net Multi platform App U I\"\n                FontSize=\"18\"\n                HorizontalOptions=\"Center\" /&gt;\n            \n            &lt;CheckBox\n                IsChecked=\"{Binding CanIncrement}\" /&gt;\n\n            &lt;Button\n                x:Name=\"CounterBtn\"\n                Text=\"{Binding Count, StringFormat='Click me ({0})'}\"\n                SemanticProperties.Hint=\"Counts the number of times you click\"\n                Command=\"{Binding IncrementCountCommand}\"\n                HorizontalOptions=\"Center\" /&gt;\n\n        &lt;/VerticalStackLayout&gt;\n    &lt;/ScrollView&gt;\n\n&lt;/ContentPage&gt;\n</code></pre>\n\n<p>If you were to run this application now, you’d get the following <code>MissingMethodException</code> exception.</p>\n\n<pre><code class=\"language-console\">Unhandled Exception:\nSystem.MissingMethodException: No parameterless constructor defined for type 'MyFirstMauiApp.MainPage'.\n   at ObjCRuntime.Runtime.ThrowException(IntPtr gchandle)\n   at UIKit.UIApplication.UIApplicationMain(Int32 argc, String[] argv, IntPtr principalClassName, IntPtr delegateClassName)\n   at UIKit.UIApplication.Main(String[] args, Type principalClass, Type delegateClass)\n   at MyFirstMauiApp.Program.Main(String[] args) in /Users/khalidabuhakmeh/RiderProjects/MyFirstMauiApp/MyFirstMauiApp/Platforms/iOS/Program.cs:line 13\n2023-01-17 14:15:13.288973-0500 MyFirstMauiApp[40948:8367336] Unhandled managed exception: No parameterless constructor defined for type 'MyFirstMauiApp.MainPage'. (System.MissingMethodException)\n</code></pre>\n\n<p>MAUI doesn’t know how to instantiate any classes mentioned in this sample yet. Let’s fix that.</p>\n\n<h2 id=\"using-scrutor-to-register-views-and-viewmodels\">Using Scrutor to Register Views and ViewModels</h2>\n\n<p>In the context of an MVVM-powered MAUI app, there are two essential elements: The View and the ViewModel. These concepts are represented by the types <code>ContentPage</code> and <code>ObservableObject</code>.</p>\n\n<p><a href=\"https://github.com/khellang/Scrutor\">Scrutor</a> can scan for those types and register the instances as themselves with <strong>singleton</strong> lifetimes.</p>\n\n<pre><code class=\"language-csharp\">using Microsoft.Extensions.Logging;\nusing CommunityToolkit.Mvvm.ComponentModel;\n\nnamespace MyFirstMauiApp;\n\npublic static class MauiProgram\n{\n    public static MauiApp CreateMauiApp()\n    {\n        var builder = MauiApp.CreateBuilder();\n\n        // The important part\n        builder.Services.Scan(s =&gt; s\n            .FromAssemblyOf&lt;App&gt;()\n            .AddClasses(f =&gt; f.AssignableToAny(\n                    typeof(ContentPage), \n                    typeof(ObservableObject))\n                )\n                .AsSelf()\n                .WithSingletonLifetime()\n        );\n        // end of important part\n        \n        builder\n            .UseMauiApp&lt;App&gt;().ConfigureFonts(fonts =&gt;\n            {\n                fonts.AddFont(\"OpenSans-Regular.ttf\", \"OpenSansRegular\");\n                fonts.AddFont(\"OpenSans-Semibold.ttf\", \"OpenSansSemibold\");\n            });\n        \n#if DEBUG\n        builder.Logging.AddDebug();\n#endif\n        return builder.Build();\n    }\n}\n</code></pre>\n\n<p>When we start the application, we should see our MVVM-powered MAUI application.</p>\n\n<p>The advantage to using Scrutor in this instance is that we can continue to expand our application’s functionality with Views and ViewModels. They should all be part of the services collection and work with dependency injection.</p>\n\n<p>I’ve chosen to register all elements as <strong>singelton</strong> since, in most cases, a mobile application is limited to a single user, and having types registered as <strong>scoped</strong> or <strong>transient</strong> is a waste of resources.</p>\n\n<p>I hope you enjoyed this blog post, and please let me know what kind of MAUI apps you’re building. As this is still a burgeoning community and technology, there’s still a lot to learn.</p>\n\n<p>As always, thanks for reading and sharing my posts.</p>\n",
      "Content": null,
      "Language": null,
      "Link": "https://khalidabuhakmeh.com/register-maui-views-and-viewmodels-with-scrutor"
    },
    {
      "FeedId": "https://khalidabuhakmeh.com/feed.xml",
      "ItemId": "https://khalidabuhakmeh.com/programming-svgs-with-csharp-dotnet",
      "Title": "Programming SVGs with C#",
      "PublishDate": "2023-01-24T00:00:00+00:00",
      "Summary": "<p>One of my hobbies to create graphics using my favorite photo editing tool, <a href=\"https://www.pixelmator.com/pro/\">Pixelmator Pro</a>. It’s a fantastic tool; anyone on macOS should add it to their <strong>Applications</strong> folder. One of the benefits of using a photo-editing tool is the ability to create Scalable Vector Graphics (SVG). SVGs are an XML-based format that allows you to edit and manipulate the content of an image with a text editor if you choose, but I wouldn’t recommend it. Photo-editing tools are much better at creating graphics, but SVGs provide a way to extend and repurpose existing assets.</p>\n\n<p>In this post, I’ll show you how you can take an existing SVG and create a programmable visual asset with some C# code. Let’s get started.</p>\n\n<!--more-->\n\n<h2 id=\"whats-an-svg\">What’s an SVG?</h2>\n\n<p>Scalable Vector Graphics is an XML-based markup language, not too dissimilar to HTML, allowing users to create two-dimensional based vector graphics. A standard format used across multiple image editors to create infinitely scalable assets is widely supported by major browser vendors. First, let’s look at an example SVG, which we’ll program later with C#.</p>\n\n<pre><code class=\"language-xml\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;!-- Generated by Pixelmator Pro 3.2.3 --&gt;\n&lt;svg width=\"1000\" height=\"1000\" viewBox=\"0 0 1000 1000\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"&gt;\n    &lt;path id=\"Color-Fill\" fill=\"#ff6900\" stroke=\"none\" d=\"M 0 0 L 1000 0 L 1000 1000 L 0 1000 Z\"/&gt;\n    &lt;g&gt;\n        &lt;path id=\"Logo-Shape\" fill=\"#020303\" fill-rule=\"evenodd\" stroke=\"none\" d=\"M 832.5 500 C 832.5 316.365356 683.634644 167.5 500 167.5 C 316.365326 167.5 167.5 316.365356 167.5 500 C 167.5 683.634644 316.365326 832.5 500 832.5 C 683.634644 832.5 832.5 683.634644 832.5 500 Z\"/&gt;\n        &lt;text id=\"Beyond-The-Idea\" xml:space=\"preserve\" x=\"50%\" y=\"50%\" text-anchor=\"middle\"&gt;\n            &lt;tspan id=\"Top\" x=\"50%\" y=\"493\" font-family=\"JetBrains Mono\" font-size=\"111.9625\" fill=\"#ffffff\" xml:space=\"preserve\"&gt;BEYOND&lt;/tspan&gt;\n            &lt;tspan id=\"Bottom\" x=\"50%\" y=\"604.2\" font-family=\"JetBrains Mono\" font-size=\"111.9625\" fill=\"#ffffff\" xml:space=\"preserve\"&gt;THE IDEA&lt;/tspan&gt;\n        &lt;/text&gt;\n    &lt;/g&gt;\n&lt;/svg&gt;\n</code></pre>\n\n<p>This SVG produces the following visual output.</p>\n\n<p><img src=\"/assets/images/posts/programmable-svgs/template.svg\" alt=\"SVG Template\" /></p>\n\n<p>An added benefit of being markup is you can typically target any element with styling or explicit color fills and strokes. The flexibility makes one asset infinitely configurable.</p>\n\n<p>Neat, right?! So how do you take this XML and create a programmable image?</p>\n\n<h2 id=\"hurndles-to-programming-svgs\">Hurndles to Programming SVGs</h2>\n\n<p>By the end of this section, we’ll have loaded an SVG into a .NET application’s memory, modified text elements of the SVG, and rendered the image to disk as a PNG. We’ll also create a wrapper class to make using your new SVG easier for other developers.</p>\n\n<p>Before we start, let’s talk about caveats you’re likely to encounter. The code I’ll be showing can overcome these issues, while you’ll need to figure others out for your use case.</p>\n\n<p>If you want to follow along, create a new console application and add the <a href=\"https://www.nuget.org/packages/Svg\"><code>Svg</code> NuGet package</a>.</p>\n\n<h3 id=\"what-about-the-fonts\">What about the fonts?</h3>\n\n<p>The first issue you’ll likely run into is <strong>fonts</strong>. SVGs are a markup language, and text elements reference fonts. Therefore, if you use a non-standard font (which is likely), you’re bound to run into rendering issues when you deploy your programmable SVG.</p>\n\n<p>The <code>Svg</code> package has a static type called <code>SvgFontManager</code> which will let you load any font into the SVG rendering context.</p>\n\n<p>In the case of this sample, let’s add a font, <code>JetBrains Mono</code>, to our assembly as an embedded resource, then load it into the font manager.</p>\n\n<pre><code class=\"language-csharp\">var assembly = Assembly.GetAssembly(typeof(PromotionalImage))!;\nusing var fontStream = assembly.GetManifestResourceStream(\"SvgFontEmbed.JetBrainsMono-Regular.ttf\")!;\nusing var ms = new MemoryStream();\nfontStream.CopyTo(ms);\n// load font into font manager\nSvgFontManager.PrivateFontDataList.Add(ms.ToArray());\n</code></pre>\n\n<p>The font name of <code>JetBrains Mono</code> is used in the SVG, as seen on the <code>tspan</code> elements.</p>\n\n<pre><code class=\"language-xml\">&lt;tspan id=\"Top\" x=\"50%\" y=\"493\" font-family=\"JetBrains Mono\" font-size=\"111.9625\" fill=\"#ffffff\" xml:space=\"preserve\"&gt;BEYOND&lt;/tspan&gt;\n</code></pre>\n\n<p>You can add as many or as few fonts as your SVG requires. But, of course, you can also forget to add any fonts you know will be on the destination host.</p>\n\n<h3 id=\"text-centering\">Text Centering</h3>\n\n<p>Another issue you may run into is the centering of text elements. While I mostly created the sample SVG in a photo editor, I manually modified the markup to adapt to variations in input. As a recommendation, you should change any numeric values for <code>x</code> or <code>y</code> to use percentage values, thus keeping the spirit of the original image intact.</p>\n\n<h3 id=\"using-html-colors-instead-of-rgb\">Using HTML colors instead of RGB</h3>\n\n<p>If you want to use HTML-based colors, you can use the <code>ColorTranslator</code> class in <code>System.Drawing</code> namespace.</p>\n\n<pre><code class=\"language-csharp\">ColorTranslator.FromHtml(\"#840087\")\n</code></pre>\n\n<p>The Hexadecimal color representation is more common among image-editing apps, developers, and designers. Go with the flow.</p>\n\n<h2 id=\"back-to-programming-an-svg\">Back To Programming an SVG</h2>\n\n<p>I thought I’d start with some of the issues I ran into before jumping into a programmable SVG because you’ll likely have to tinker with your SVG template to get the results you’re looking to produce.</p>\n\n<p>You’ll first want to add your SVG template and fonts into your console application or class library as embedded resources. Doing so will make sharing these images easier in the long run, as all assets will be part of your compiled artifact.</p>\n\n<pre><code class=\"language-xml\">&lt;ItemGroup&gt;\n  &lt;None Remove=\"JetBrainsMono-Regular.ttf\" /&gt;\n  &lt;EmbeddedResource Include=\"JetBrainsMono-Regular.ttf\" /&gt;\n  &lt;None Remove=\"template.svg\" /&gt;\n  &lt;EmbeddedResource Include=\"template.svg\" /&gt;\n&lt;/ItemGroup&gt;\n</code></pre>\n\n<p>You’ll be able to access these resources using the following code.</p>\n\n<pre><code class=\"language-csharp\">static PromotionalImage()\n{\n    var assembly = Assembly.GetAssembly(typeof(PromotionalImage))!;\n    using var fontStream = assembly.GetManifestResourceStream(\"SvgFontEmbed.JetBrainsMono-Regular.ttf\")!;\n    using var ms = new MemoryStream();\n    fontStream.CopyTo(ms);\n    // load font into font manager\n    SvgFontManager.PrivateFontDataList.Add(ms.ToArray());\n\n    using var svgStream = assembly.GetManifestResourceStream(\"SvgFontEmbed.template.svg\")!;\n    using var textReader = new StreamReader(svgStream);\n\n    SvgXml = textReader.ReadToEnd();\n}\n</code></pre>\n\n<p>Your next step is to look at your SVG and determine all the identifiers you want your users to modify, along with the types of each element. In the case of the example above, we’ll be converting the background color and the two text spans of <code>Top</code> and <code>Bottom</code>.</p>\n\n<pre><code class=\"language-csharp\">using System.Drawing;\nusing System.Reflection;\nusing Svg;\n\npublic static class PromotionalImage\n{\n    private static string SvgXml;\n    \n    static PromotionalImage()\n    {\n        var assembly = Assembly.GetAssembly(typeof(PromotionalImage))!;\n        using var fontStream = assembly.GetManifestResourceStream(\"SvgFontEmbed.JetBrainsMono-Regular.ttf\")!;\n        using var ms = new MemoryStream();\n        fontStream.CopyTo(ms);\n        // load font into font manager\n        SvgFontManager.PrivateFontDataList.Add(ms.ToArray());\n\n        using var svgStream = assembly.GetManifestResourceStream(\"SvgFontEmbed.template.svg\")!;\n        using var textReader = new StreamReader(svgStream);\n\n        SvgXml = textReader.ReadToEnd();\n    }\n\n    public static SvgDocument Create(string topText, string bottomText, string? bgColor = null)\n    {\n        var document = SvgDocument.FromSvg&lt;SvgDocument&gt;(SvgXml);\n\n        var texts = document.Children.FindSvgElementsOf&lt;SvgTextSpan&gt;().ToList();\n        texts.First(t =&gt; t.ID == \"Top\").Text = topText;\n        texts.First(t =&gt; t.ID == \"Bottom\").Text = bottomText;\n        \n        if (bgColor is { })\n        {\n            var bg = document.Children.Where(x =&gt; x.ID == \"Color-Fill\")\n                .Where(e =&gt; e is SvgPath)\n                .Cast&lt;SvgPath&gt;()\n                .First();\n\n            bg.Fill = new SvgColourServer(ColorTranslator.FromHtml(bgColor));\n        }\n\n        return document;\n    }\n}\n</code></pre>\n\n<p>Let’s look at the steps in the <code>Create</code> method.</p>\n\n<ol>\n  <li>First, we create a new SVG document in memory. We want to do that to work with a fresh instance every time.</li>\n  <li>Second, we find the text spans in our SVG by their identifiers and set the new values set by the user.</li>\n  <li>Finally, we find the background of <code>Color-Fill</code> and set the color to the hexadecimal value passed in.</li>\n</ol>\n\n<p>Let’s see how we can use this new class in code.</p>\n\n<pre><code class=\"language-csharp\">using System.Drawing.Imaging;\n\nvar image = PromotionalImage.Create(\"DROP\", \"THE DOT\", \"#840087\");\nimage.Draw().Save(\"result.png\", ImageFormat.Png);\n</code></pre>\n\n<p>The resulting image is a mutation of our original template.</p>\n\n<p><img src=\"https://res.cloudinary.com/abuhakmeh/image/fetch/c_limit,f_auto,q_auto,w_800/https://khalidabuhakmeh.com/assets/images/posts/programmable-svgs/result.png\" srcset=\"https://res.cloudinary.com/abuhakmeh/image/fetch/c_limit,f_auto,q_auto,w_320/https://khalidabuhakmeh.com/assets/images/posts/programmable-svgs/result.png 320w, https://res.cloudinary.com/abuhakmeh/image/fetch/c_limit,f_auto,q_auto,w_540/https://khalidabuhakmeh.com/assets/images/posts/programmable-svgs/result.png 540w, https://res.cloudinary.com/abuhakmeh/image/fetch/c_limit,f_auto,q_auto,w_760/https://khalidabuhakmeh.com/assets/images/posts/programmable-svgs/result.png 760w, https://res.cloudinary.com/abuhakmeh/image/fetch/c_limit,f_auto,q_auto,w_980/https://khalidabuhakmeh.com/assets/images/posts/programmable-svgs/result.png 980w, https://res.cloudinary.com/abuhakmeh/image/fetch/c_limit,f_auto,q_auto,w_1000/https://khalidabuhakmeh.com/assets/images/posts/programmable-svgs/result.png 1000w\" sizes=\"100vw\" alt=\"drop the dot from svg template\" loading=\"lazy\" width=\"1000\" height=\"1000\" crossorigin=\"anonymous\" /></p>\n\n<p>Yes! You did it. You just programmed an SVG using C#.</p>\n\n<h2 id=\"conclusion\">Conclusion</h2>\n\n<p>With SVGs and .NET, you can procedurally generate an infinite amount of assets with minimal effort. The <code>Svg</code> library on NuGet supports many markup elements required to change any starting template dramatically. You could go so far as to add new paths, change colors, modify the text, switch fonts, or do whatever you wish. Embedding the resources into a class library would allow you to ship a generator via a NuGet package to use in various situations. The possibilities are limitless.</p>\n\n<p>I hope you enjoyed this post, and as always, thanks for reading.</p>\n\n",
      "Content": null,
      "Language": null,
      "Link": "https://khalidabuhakmeh.com/programming-svgs-with-csharp-dotnet"
    }
  ]
}
